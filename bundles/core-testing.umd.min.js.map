{"version":3,"sources":["packages/core/core-testing.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","core","testing","compiler","this","_global","window","runInTestZone","fn","context","finishCallback","failCallback","currentZone","Zone","current","AsyncTestZoneSpec","undefined","Error","ProxyZoneSpec","proxyZoneSpec","get","assertPresent","proxyZone","getZoneWith","previousDelegate","getDelegate","parent","run","testZoneSpec","setDelegate","error","runGuarded","ComponentFixture","componentRef","ngZone","_autoDetect","_this","_isStable","_isDestroyed","_resolve","_promise","_onUnstableSubscription","_onStableSubscription","_onMicrotaskEmptySubscription","_onErrorSubscription","changeDetectorRef","elementRef","location","debugElement","getDebugNode","nativeElement","componentInstance","instance","runOutsideAngular","onUnstable","subscribe","next","onMicrotaskEmpty","detectChanges","onStable","scheduleMicroTask","hasPendingMacrotasks","onError","prototype","_tick","checkNoChanges","autoDetectChanges","autoDetect","isStable","whenStable","Promise","resolve","res","_getRenderer","_renderer","injector","RendererFactory2","whenRenderingDone","renderer","destroy","unsubscribe","_Zone","FakeAsyncTestZoneSpec","_fakeAsyncTestZoneSpec","resetFakeAsyncZoneFallback","resetDelegate","_inFakeAsyncCall","_getFakeAsyncZoneSpec","flushMicrotasksFallback","flushMicrotasks","_Zone$1","fakeAsyncTestModule","__symbol__","resetFakeAsyncZone","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__awaiter","thisArg","_arguments","P","generator","reject","fulfilled","value","step","e","rejected","result","done","then","apply","__generator","body","f","y","t","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","n","v","op","TypeError","call","pop","push","__values","o","m","__read","ar","__spread","concat","AsyncTestCompleter","rej","_reject","fail","stackTrace","enumerable","configurable","TestComponentRenderer","insertRootElement","rootElementId","ComponentFixtureAutoDetect","InjectionToken","ComponentFixtureNoNgZone","modules","Map","resolveComponentResources","resourceResolver","componentResolved","urlMap","cachedResourceResolve","url","promise","resp","set","unwrapResponse","componentResourceResolutionQueue","forEach","component","type","promises","templateUrl","template","styleUrls","styles","styleOffset","styleUrl","index","style","splice","indexOf","fullyResolved","all","componentDefResolved","componentDefPendingResolution","delete","clearResolutionOfComponentResourcesQueue","Set","isComponentDefPendingResolution","has","old","response","text","_nextReferenceId","MetadataOverrider","_references","overrideMetadata","metadataClass","oldMetadata","override","props","_valueProps","obj","keys","prop","startsWith","proto","getPrototypeOf","protoProp","remove","add","ɵstringify","setMetadata","metadata","removeMetadata","references","removeObjects","_loop_1","removeValue","isArray","_propHashKey","_loop_2","propValue","filter","addMetadata","addValue","propName","JSON","stringify","_serializeReference","ref","id","TestingModuleOverride","reflection","ɵReflectionCapabilities","OverrideResolver","overrides","resolved","addOverride","setOverrides","clear","_a","_b","getAnnotation","annotations","annotation","Directive","Component","Pipe","NgModule","overrider_1","DirectiveResolver","_super","ComponentResolver","PipeResolver","NgModuleResolver","R3TestBedCompiler","platform","additionalModuleTypes","originalComponentResolutionQueue","originalRegisteredModules","declarations","imports","providers","schemas","pendingComponents","pendingDirectives","pendingPipes","seenComponents","seenDirectives","existingComponentStyles","resolvers","initResolvers","directive","pipe","componentToModuleScope","initialNgDefs","defCleanupOps","_injector","compilerProviders","providerOverrides","rootProviderOverrides","providerOverridesByToken","moduleProvidersOverridden","testModuleRef","testModuleType","DynamicTestModule","setCompilerProviders","configureTestingModule","moduleDef","_c","_d","queueTypeArray","DECLARATION","queueTypesFromModulesArray","overrideModule","ngModule","name","recompileNgModule","overrideComponent","overrideDirective","overridePipe","overrideProvider","token","provider","injectableDef","providerDef","useFactory","provide","deps","multi","useValue","ɵgetInjectableDef","providedIn","overrideTemplateUsingTestingModule","def","ɵNG_COMP_DEF","overrideStyleUrls","OVERRIDE_TEMPLATE","compileComponents","resourceLoader_1","clearComponentResolutionQueue","compileTypesSync","ResourceLoader","finalize","compileTestModule","applyTransitiveScopes","applyProviderOverrides","patchComponentsWithExistingStyles","ɵRender3NgModuleRef","localeId","LOCALE_ID","ɵDEFAULT_LOCALE_ID","ɵsetLocaleId","ApplicationInitStatus","runInitializers","_compileNgModuleSync","moduleType","applyProviderOverridesToModule","_compileNgModuleAsync","getRegisteredModulesState","_getModuleResolver","_getComponentFactories","maybeUnwrapFn","ɵmod","reduce","factories","declaration","componentDef","ɵcmp","ɵRender3ComponentFactory","needsAsyncResources","maybeStoreNgDef","ɵcompileComponent","ɵNG_DIR_DEF","ɵcompileDirective","ɵNG_PIPE_DEF","ɵcompilePipe","moduleToScope","componentType","moduleScope","realType","isTestingModuleOverride","ɵtransitiveScopesFor","getScopeOfModule","storeFieldOfDefOnType","ɵpatchComponentDefWithScope","maybeApplyOverrides","field","hasProviderOverrides","patchDefWithProviderOverrides","e_1","injectorDef","ɵNG_INJ_DEF","size","flatten","imported","isModuleWithProviders","getOverriddenProviders","ɵNG_MOD_DEF","e_1_1","arr","e_2","arr_1","arr_1_1","queueType","e_2_1","ɵcompileNgModuleDefs","e_3","arr_2","arr_2_1","hasNgModuleDef","e_3_1","currentDef","defField","original","restoreComponentResolutionQueue","queue","restoreOriginalState","forEachRight","descriptor","restoreRegisteredModulesState","moduleMap","RootScopeModule","NgZone","enableLongStackTrace","Compiler","R3TestCompiler","CompilerModule","COMPILER_OPTIONS","opts","CompilerModuleFactory","ɵNgModuleFactory","getSingleProviderOverrides","getProviderToken","getProviderOverrides","hasMultiProviderOverrides","some","isMultiProvider","overriddenProviders","final","seenMultiProviders","unshift","providersResolver","resolver_1","processProvidersFn_1","ngDef","maybeFn","Function","values","mapFn","out","getProviderField","idx","testBed","compileModuleSync","compileModuleAsync","compileModuleAndAllComponentsSync","ngModuleFactory","componentFactories","ModuleWithComponentFactories","compileModuleAndAllComponentsAsync","clearCache","clearCacheFor","getModuleId","meta","_nextRootElementId","TestBedRender3","_compiler","_testModuleRef","_activeFixtures","_globalCompilationChecked","initTestEnvironment","aotSummaries","_getTestBedRender3","resetTestEnvironment","configureCompiler","config","overrideTemplate","inject","notFoundValue","flags","Injector","THROW_IF_NOT_FOUND","InjectFlags","Default","createComponent","resetTestingModule","checkGlobalCompilationFinished","ɵresetCompiledComponents","destroyActiveFixtures","useJit","assertNotInstantiated","UNDEFINED","execute","tokens","params","map","testComponentRenderer","rootElId","noNgZone","componentFactory","initComponent","NULL","fixture","methodName","methodDescription","ɵflushModuleScopingQueueAsMuchAsPossible","console","stacktrace","unimplemented","testBed$1","TestingCompiler","loadAotSummaries","summaries","getComponentFactory","getComponentFromError","Injectable","TestingCompilerFactory","_nextRootElementId$1","TestBedViewEngine","_instantiated","_moduleRef","_moduleFactory","_compilerOptions","_moduleOverrides","_componentOverrides","_directiveOverrides","_pipeOverrides","_providers","_declarations","_imports","_schemas","_testEnvAotSummaries","_aotSummaries","_templateOverrides","_isRoot","_rootProviderOverrides","_getTestBedViewEngine","getTestBed","ɵclearOverrides","_assertNotInstantiated","_createCompilerAndModule","moduleAndComponentFactories","_initIfNeeded","errorCompType","compFactory","templateOf","ɵoverrideComponentView","ngZoneInjector","TestBed","entry","rootScopeImports","jit","ɵINJECTOR_SCOPE","compilerFactory","createTestingCompiler","overrideProviderImpl","deprecated","dep","depToken","depFlags","Optional","SkipSelf","ɵoverrideProvider","deprecatedBehavior","OverrideComponent","selector","ɵivyEnabled","completer","InjectSetupWrapper","_moduleDef","_addModule","_global$1","beforeEach","ɵangular_packages_core_testing_testing_b","ɵangular_packages_core_testing_testing_c","ɵangular_packages_core_testing_testing_a","withModule","ɵMetadataOverrider","async","asyncTest","asyncFallback","jasmine","err","fakeAsync","fakeAsyncFallback","args","_i","lastProxyZoneSpec","pendingPeriodicTimers","pendingTimers","tick","millis","tickFallback","flush","maxTurns","flushFallback","discardPeriodicTasks","discardPeriodicTasksFallback","__core_private_testing_placeholder__","ɵTestingCompiler","ɵTestingCompilerFactory"],"mappings":";;;;;CAMC,SAAUA,EAAQC,GACI,iBAAZC,SAA0C,oBAAXC,OAAyBF,EAAQC,QAASE,QAAQ,iBAAkBA,QAAQ,sBAChG,mBAAXC,QAAyBA,OAAOC,IAAMD,OAAO,wBAAyB,CAAC,UAAW,gBAAiB,qBAAsBJ,GACtGA,IAAzBD,EAASA,GAAUO,MAAsBC,GAAKR,EAAOQ,IAAM,GAAIR,EAAOQ,GAAGC,KAAOT,EAAOQ,GAAGC,MAAQ,GAAIT,EAAOQ,GAAGC,KAAKC,QAAU,IAAKV,EAAOQ,GAAGC,KAAMT,EAAOQ,GAAGG,UAHnK,CAIEC,KAAM,SAAUV,EAASO,EAAME,GAAY;;;;;;;OASzC,IAAIE,EAA6B,oBAAXC,OAAyBd,OAASc,OAmDxD,SAASC,EAAcC,EAAIC,EAASC,EAAgBC,GAChD,IAAIC,EAAcC,KAAKC,QACnBC,EAAoBF,KAAwB,kBAChD,QAA0BG,IAAtBD,EACA,MAAM,IAAIE,MAAM,8JAGpB,IAAIC,EAAgBL,KAAoB,cACxC,QAAsBG,IAAlBE,EACA,MAAM,IAAID,MAAM,qJAGpB,IAAIE,EAAgBD,EAAcE,MAClCF,EAAcG,gBAGd,IAAIC,EAAYT,KAAKC,QAAQS,YAAY,iBACrCC,EAAmBL,EAAcM,cAuBrC,OAtBAH,EAAUI,OAAOC,IAAI,WACjB,IAAIC,EAAe,IAAIb,EAAkB,WAErCH,EAAYe,IAAI,WACRR,EAAcM,eAAiBG,GAE/BT,EAAcU,YAAYL,GAE9Bd,OAEL,SAAUoB,GAETlB,EAAYe,IAAI,WACRR,EAAcM,eAAiBG,GAE/BT,EAAcU,YAAYL,GAE9Bb,EAAamB,MAElB,QACHX,EAAcU,YAAYD,KAEvBf,KAAKC,QAAQiB,WAAWvB,EAAIC;;;;;;;;;;;;;;;AAyDvC,IAAIuB,EAAkC,WAClC,SAASA,EAAiBC,EAAcC,EAAQC,GAC5C,IAAIC,EAAQhC,KACZA,KAAK6B,aAAeA,EACpB7B,KAAK8B,OAASA,EACd9B,KAAK+B,YAAcA,EACnB/B,KAAKiC,WAAY,EACjBjC,KAAKkC,cAAe,EACpBlC,KAAKmC,SAAW,KAChBnC,KAAKoC,SAAW,KAChBpC,KAAKqC,wBAA0B,KAC/BrC,KAAKsC,sBAAwB,KAC7BtC,KAAKuC,8BAAgC,KACrCvC,KAAKwC,qBAAuB,KAC5BxC,KAAKyC,kBAAoBZ,EAAaY,kBACtCzC,KAAK0C,WAAab,EAAac,SAC/B3C,KAAK4C,aAAe/C,EAAKgD,aAAa7C,KAAK0C,WAAWI,eACtD9C,KAAK+C,kBAAoBlB,EAAamB,SACtChD,KAAK8C,cAAgB9C,KAAK0C,WAAWI,cACrC9C,KAAK6B,aAAeA,EACpB7B,KAAK8B,OAASA,EACVA,GAGAA,EAAOmB,kBAAkB,WACrBjB,EAAMK,wBACFP,EAAOoB,WAAWC,UAAU,CAAEC,KAAM,WAAcpB,EAAMC,WAAY,KACxED,EAAMO,8BAAgCT,EAAOuB,iBAAiBF,UAAU,CACpEC,KAAM,WACEpB,EAAMD,aAGNC,EAAMsB,eAAc,MAIhCtB,EAAMM,sBAAwBR,EAAOyB,SAASJ,UAAU,CACpDC,KAAM,WACFpB,EAAMC,WAAY,EAEK,OAAnBD,EAAMI,UA+HlC,SAASoB,EAAkBpD,GACvBK,KAAKC,QAAQ8C,kBAAkB,oBAAqBpD;;;;;;;OA5H5BoD,CAAkB,WACT1B,EAAO2B,sBACe,OAAnBzB,EAAMI,WACNJ,EAAMG,UAAS,GACfH,EAAMG,SAAW,KACjBH,EAAMI,SAAW,WAOzCJ,EAAMQ,qBACFV,EAAO4B,QAAQP,UAAU,CAAEC,KAAM,SAAU1B,GAAS,MAAMA,OA4G1E,OAxGAE,EAAiB+B,UAAUC,MAAQ,SAAUC,GACzC7D,KAAKyC,kBAAkBa,gBACnBO,GACA7D,KAAK6D,kBAMbjC,EAAiB+B,UAAUL,cAAgB,SAAUO,GACjD,IAAI7B,EAAQhC,UACW,IAAnB6D,IAA6BA,GAAiB,GAC/B,MAAf7D,KAAK8B,OAGL9B,KAAK8B,OAAOP,IAAI,WAAcS,EAAM4B,MAAMC,KAI1C7D,KAAK4D,MAAMC,IAMnBjC,EAAiB+B,UAAUE,eAAiB,WAAc7D,KAAKyC,kBAAkBoB,kBAMjFjC,EAAiB+B,UAAUG,kBAAoB,SAAUC,GAErD,QADmB,IAAfA,IAAyBA,GAAa,GACvB,MAAf/D,KAAK8B,OACL,MAAM,IAAIjB,MAAM,sEAEpBb,KAAK+B,YAAcgC,EACnB/D,KAAKsD,iBAMT1B,EAAiB+B,UAAUK,SAAW,WAAc,OAAOhE,KAAKiC,YAAcjC,KAAK8B,OAAO2B,sBAO1F7B,EAAiB+B,UAAUM,WAAa,WACpC,IAAIjC,EAAQhC,KACZ,OAAIA,KAAKgE,WACEE,QAAQC,SAAQ,GAEA,OAAlBnE,KAAKoC,SACHpC,KAAKoC,UAGZpC,KAAKoC,SAAW,IAAI8B,QAAQ,SAAUE,GAAOpC,EAAMG,SAAWiC,IACvDpE,KAAKoC,WAGpBR,EAAiB+B,UAAUU,aAAe,WAItC,YAHuBzD,IAAnBZ,KAAKsE,YACLtE,KAAKsE,UAAYtE,KAAK6B,aAAa0C,SAASvD,IAAInB,EAAK2E,iBAAkB,OAEpExE,KAAKsE,WAKhB1C,EAAiB+B,UAAUc,kBAAoB,WAC3C,IAAIC,EAAW1E,KAAKqE,eACpB,OAAIK,GAAYA,EAASD,kBACdC,EAASD,oBAEbzE,KAAKiE,cAKhBrC,EAAiB+B,UAAUgB,QAAU,WAC5B3E,KAAKkC,eACNlC,KAAK6B,aAAa8C,UACkB,MAAhC3E,KAAKqC,0BACLrC,KAAKqC,wBAAwBuC,cAC7B5E,KAAKqC,wBAA0B,MAED,MAA9BrC,KAAKsC,wBACLtC,KAAKsC,sBAAsBsC,cAC3B5E,KAAKsC,sBAAwB,MAES,MAAtCtC,KAAKuC,gCACLvC,KAAKuC,8BAA8BqC,cACnC5E,KAAKuC,8BAAgC,MAER,MAA7BvC,KAAKwC,uBACLxC,KAAKwC,qBAAqBoC,cAC1B5E,KAAKwC,qBAAuB,MAEhCxC,KAAKkC,cAAe,IAGrBN,EArK0B,GAsLjCiD,EAAwB,oBAATpE,KAAuBA,KAAO,KAC7CqE,EAAwBD,GAASA,EAA6B,sBAC9D/D,EAAgB+D,GAASA,EAAqB,cAC9CE,EAAyB,KAO7B,SAASC,IACLD,EAAyB,KAEzBjE,GAAiBA,EAAcG,gBAAgBgE,gBAEnD,IAAIC,GAAmB,EAgEvB,SAASC,IACL,GAA8B,MAA1BJ,EACA,MAAM,IAAIlE,MAAM,0EAEpB,OAAOkE,EA8CX,SAASK,IACLD,IAAwBE;;;;;;;OAU5B,IAAIC,EAA0B,oBAAT7E,KAAuBA,KAAO,KAC/C8E,EAAsBD,GAAWA,EAAQA,EAAQE,WAAW,kBAOhE,SAASC,IACL,OAAIF,EACOA,EAAoBE,qBAGpBT,IAiHf,IAAIU,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBG,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOA,EAAEM,eAAeD,KAAIN,EAAEM,GAAKL,EAAEK,MACpDN,EAAGC,IAG5B,SAASO,EAAUR,EAAGC,GAElB,SAASQ,IAAOpG,KAAKqG,YAAcV,EADnCD,EAAcC,EAAGC,GAEjBD,EAAEhC,UAAkB,OAANiC,EAAaC,OAAOS,OAAOV,IAAMQ,EAAGzC,UAAYiC,EAAEjC,UAAW,IAAIyC,GA0BnF,SAASG,EAAWC,EAAYC,EAAQC,EAAKC,GACzC,IAA2HhB,EAAvHiB,EAAIC,UAAUC,OAAQC,EAAIH,EAAI,EAAIH,EAAkB,OAATE,EAAgBA,EAAOd,OAAOmB,yBAAyBP,EAAQC,GAAOC,EACrH,GAAuB,iBAAZM,SAAoD,mBAArBA,QAAQC,SAAyBH,EAAIE,QAAQC,SAASV,EAAYC,EAAQC,EAAKC,QACpH,IAAK,IAAIQ,EAAIX,EAAWM,OAAS,EAAGK,GAAK,EAAGA,KAASxB,EAAIa,EAAWW,MAAIJ,GAAKH,EAAI,EAAIjB,EAAEoB,GAAKH,EAAI,EAAIjB,EAAEc,EAAQC,EAAKK,GAAKpB,EAAEc,EAAQC,KAASK,GAChJ,OAAOH,EAAI,GAAKG,GAAKlB,OAAOuB,eAAeX,EAAQC,EAAKK,GAAIA,EAWhE,SAASM,EAAUC,EAASC,EAAYC,EAAGC,GACvC,OAAO,IAAKD,IAAMA,EAAItD,UAAU,SAAUC,EAASuD,GAC/C,SAASC,EAAUC,GAAS,IAAMC,EAAKJ,EAAUrE,KAAKwE,IAAW,MAAOE,GAAKJ,EAAOI,IACpF,SAASC,EAASH,GAAS,IAAMC,EAAKJ,EAAiB,MAAEG,IAAW,MAAOE,GAAKJ,EAAOI,IACvF,SAASD,EAAKG,GAAUA,EAAOC,KAAO9D,EAAQ6D,EAAOJ,OAAS,IAAIJ,EAAE,SAAUrD,GAAWA,EAAQ6D,EAAOJ,SAAWM,KAAKP,EAAWI,GACnIF,GAAMJ,EAAYA,EAAUU,MAAMb,EAASC,GAAc,KAAKnE,UAItE,SAASgF,EAAYd,EAASe,GAC1B,IAAsGC,EAAGC,EAAGC,EAAGC,EAA3GC,EAAI,CAAEC,MAAO,EAAGC,KAAM,WAAa,GAAW,EAAPJ,EAAE,GAAQ,MAAMA,EAAE,GAAI,OAAOA,EAAE,IAAOK,KAAM,GAAIC,IAAK,IAChG,OAAOL,EAAI,CAAErF,KAAM2F,EAAK,GAAIC,MAASD,EAAK,GAAIE,OAAUF,EAAK,IAAwB,mBAAXG,SAA0BT,EAAES,OAAOC,UAAY,WAAa,OAAOnJ,OAAUyI,EACvJ,SAASM,EAAKK,GAAK,OAAO,SAAUC,GAAK,OACzC,SAASxB,EAAKyB,GACV,GAAIhB,EAAG,MAAM,IAAIiB,UAAU,mCAC3B,KAAOb,GAAG,IACN,GAAIJ,EAAI,EAAGC,IAAMC,EAAY,EAARc,EAAG,GAASf,EAAU,OAAIe,EAAG,GAAKf,EAAS,SAAOC,EAAID,EAAU,SAAMC,EAAEgB,KAAKjB,GAAI,GAAKA,EAAEnF,SAAWoF,EAAIA,EAAEgB,KAAKjB,EAAGe,EAAG,KAAKrB,KAAM,OAAOO,EAE3J,OADID,EAAI,EAAGC,IAAGc,EAAK,CAAS,EAARA,EAAG,GAAQd,EAAEZ,QACzB0B,EAAG,IACP,KAAK,EAAG,KAAK,EAAGd,EAAIc,EAAI,MACxB,KAAK,EAAc,OAAXZ,EAAEC,QAAgB,CAAEf,MAAO0B,EAAG,GAAIrB,MAAM,GAChD,KAAK,EAAGS,EAAEC,QAASJ,EAAIe,EAAG,GAAIA,EAAK,CAAC,GAAI,SACxC,KAAK,EAAGA,EAAKZ,EAAEI,IAAIW,MAAOf,EAAEG,KAAKY,MAAO,SACxC,QACI,KAAkBjB,GAAZA,EAAIE,EAAEG,MAAY/B,OAAS,GAAK0B,EAAEA,EAAE1B,OAAS,MAAkB,IAAVwC,EAAG,IAAsB,IAAVA,EAAG,IAAW,CAAEZ,EAAI,EAAG,SACjG,GAAc,IAAVY,EAAG,MAAcd,GAAMc,EAAG,GAAKd,EAAE,IAAMc,EAAG,GAAKd,EAAE,IAAM,CAAEE,EAAEC,MAAQW,EAAG,GAAI,MAC9E,GAAc,IAAVA,EAAG,IAAYZ,EAAEC,MAAQH,EAAE,GAAI,CAAEE,EAAEC,MAAQH,EAAE,GAAIA,EAAIc,EAAI,MAC7D,GAAId,GAAKE,EAAEC,MAAQH,EAAE,GAAI,CAAEE,EAAEC,MAAQH,EAAE,GAAIE,EAAEI,IAAIY,KAAKJ,GAAK,MACvDd,EAAE,IAAIE,EAAEI,IAAIW,MAChBf,EAAEG,KAAKY,MAAO,SAEtBH,EAAKjB,EAAKmB,KAAKlC,EAASoB,GAC1B,MAAOZ,GAAKwB,EAAK,CAAC,EAAGxB,GAAIS,EAAI,EAAK,QAAUD,EAAIE,EAAI,EACtD,GAAY,EAARc,EAAG,GAAQ,MAAMA,EAAG,GAAI,MAAO,CAAE1B,MAAO0B,EAAG,GAAKA,EAAG,QAAK,EAAQrB,MAAM,GArB9BJ,CAAK,CAACuB,EAAGC,MA6B7D,SAASM,EAASC,GACd,IAAIC,EAAsB,mBAAXX,QAAyBU,EAAEV,OAAOC,UAAWhC,EAAI,EAChE,OAAI0C,EAAUA,EAAEL,KAAKI,GACd,CACHxG,KAAM,WAEF,OADIwG,GAAKzC,GAAKyC,EAAE9C,SAAQ8C,OAAI,GACrB,CAAEhC,MAAOgC,GAAKA,EAAEzC,KAAMc,MAAO2B,KAKhD,SAASE,EAAOF,EAAGR,GACf,IAAIS,EAAsB,mBAAXX,QAAyBU,EAAEV,OAAOC,UACjD,IAAKU,EAAG,OAAOD,EACf,IAAmB7C,EAAYe,EAA3BX,EAAI0C,EAAEL,KAAKI,GAAOG,EAAK,GAC3B,IACI,WAAc,IAANX,GAAgBA,KAAM,MAAQrC,EAAII,EAAE/D,QAAQ6E,MAAM8B,EAAGL,KAAK3C,EAAEa,OAExE,MAAOlG,GAASoG,EAAI,CAAEpG,MAAOA,GAC7B,QACI,IACQqF,IAAMA,EAAEkB,OAAS4B,EAAI1C,EAAU,SAAI0C,EAAEL,KAAKrC,GAElD,QAAU,GAAIW,EAAG,MAAMA,EAAEpG,OAE7B,OAAOqI,EAGX,SAASC,IACL,IAAK,IAAID,EAAK,GAAI5C,EAAI,EAAGA,EAAIN,UAAUC,OAAQK,IAC3C4C,EAAKA,EAAGE,OAAOH,EAAOjD,UAAUM,KACpC,OAAO4C;;;;;;;;AAoEX,IAAIG,EAAoC,WACpC,SAASA,IACL,IAAIlI,EAAQhC,KACZA,KAAKoC,SAAW,IAAI8B,QAAQ,SAAUE,EAAK+F,GACvCnI,EAAMG,SAAWiC,EACjBpC,EAAMoI,QAAUD,IAUxB,OAPAD,EAAmBvG,UAAUsE,KAAO,SAAUL,GAAS5H,KAAKmC,SAASyF,IACrEsC,EAAmBvG,UAAU0G,KAAO,SAAU3I,EAAO4I,GAActK,KAAKoK,QAAQ1I,IAChFmE,OAAOuB,eAAe8C,EAAmBvG,UAAW,UAAW,CAC3D3C,IAAK,WAAc,OAAOhB,KAAKoC,UAC/BmI,YAAY,EACZC,cAAc,IAEXN,EAf4B,GA8BnCO,EAAuC,WACvC,SAASA,KAGT,OADAA,EAAsB9G,UAAU+G,kBAAoB,SAAUC,KACvDF,EAJ+B,GAStCG,EAA6B,IAAI/K,EAAKgL,eAAe,8BAIrDC,EAA2B,IAAIjL,EAAKgL,eAAe,4BA6CnDE,EAAU,IAAIC;;;;;;;;;;;;;;;AAkFlB,SAASC,EAA0BC,GAE/B,IAAIC,EAAoB,GAEpBC,EAAS,IAAIJ,IACjB,SAASK,EAAsBC,GAC3B,IAAIC,EAAUH,EAAOpK,IAAIsK,GACzB,IAAKC,EAAS,CACV,IAAIC,EAAON,EAAiBI,GAC5BF,EAAOK,IAAIH,EAAKC,EAAUC,EAAKtD,KAAKwD,IAExC,OAAOH,EA0BX,OAxBAI,EAAiCC,QAAQ,SAAUC,EAAWC,GAC1D,IAAIC,EAAW,GACXF,EAAUG,aACVD,EAASrC,KAAK2B,EAAsBQ,EAAUG,aAAa9D,KAAK,SAAU+D,GACtEJ,EAAUI,SAAWA,KAG7B,IAAIC,EAAYL,EAAUK,UACtBC,EAASN,EAAUM,SAAWN,EAAUM,OAAS,IACjDC,EAAcP,EAAUM,OAAOrF,OACnCoF,GAAaA,EAAUN,QAAQ,SAAUS,EAAUC,GAC/CH,EAAOzC,KAAK,IACZqC,EAASrC,KAAK2B,EAAsBgB,GAAUnE,KAAK,SAAUqE,GACzDJ,EAAOC,EAAcE,GAASC,EAC9BL,EAAUM,OAAON,EAAUO,QAAQJ,GAAW,GACtB,GAApBH,EAAUpF,SACV+E,EAAUK,eAAYtL,QAIlC,IAAI8L,EAAgBxI,QAAQyI,IAAIZ,GAAU7D,KAAK,WAAc,OAsCrE,SAAS0E,EAAqBd,GAC1Be,EAA8BC,OAAOhB;;;;;;;OAvCmCc,CAAqBd,KACzFX,EAAkBzB,KAAKgD,KAE3BK,IACO7I,QAAQyI,IAAIxB,GAAmBjD,KAAK,cAE/C,IAAIyD,EAAmC,IAAIX,IAEvC6B,EAAgC,IAAIG,IAOxC,SAASC,EAAgCnB,GACrC,OAAOe,EAA8BK,IAAIpB,GAM7C,SAASiB,IACL,IAAII,EAAMxB,EAEV,OADAA,EAAmC,IAAIX,IAChCmC,EAUX,SAASzB,EAAe0B,GACpB,MAA0B,iBAAZA,EAAuBA,EAAWA,EAASC,OAa7D,IAAIC,EAAmB,EACnBC,EAAmC,WACnC,SAASA,IACLvN,KAAKwN,YAAc,IAAIxC,IAyB3B,OAnBAuC,EAAkB5J,UAAU8J,iBAAmB,SAAUC,EAAeC,EAAaC,GACjF,IAAIC,EAAQ,GAIZ,GAHIF,GAkFZ,SAASG,EAAYC,GACjB,IAAIF,EAAQ,GAEZhI,OAAOmI,KAAKD,GAAKnC,QAAQ,SAAUqC,GAC1BA,EAAKC,WAAW,MACjBL,EAAMnE,KAAKuE,KAKnB,IADA,IAAIE,EAAQJ,EACLI,EAAQtI,OAAOuI,eAAeD,IACjCtI,OAAOmI,KAAKG,GAAOvC,QAAQ,SAAUyC,GACjC,IAAI1H,EAAOd,OAAOmB,yBAAyBmH,EAAOE,IAC7CA,EAAUH,WAAW,MAAQvH,GAAQ,QAASA,GAC/CkH,EAAMnE,KAAK2E,KAIvB,OAAOR;;;;;;;OAnGCC,CAAYH,GAAa/B,QAAQ,SAAUqC,GAAQ,OAAOJ,EAAMI,GAAQN,EAAYM,KAEpFL,EAASnC,IAAK,CACd,GAAImC,EAASU,QAAUV,EAASW,IAC5B,MAAM,IAAI1N,MAAM,6BAA+BhB,EAAK2O,WAAWd,GAAiB,uBAuDhG,SAASe,EAAYC,EAAUjD,GAC3B,IAAK,IAAIwC,KAAQxC,EACbiD,EAAST,GAAQxC,EAAIwC,GAvDjBQ,CAAYZ,EAAOD,EAASnC,KAQhC,OANImC,EAASU,QAUrB,SAASK,EAAeD,EAAUJ,EAAQM,GACtC,IAAIC,EAAgB,IAAI7B,IACpB8B,EAAU,SAAUb,GACpB,IAAIc,EAAcT,EAAOL,GACrBjI,MAAMgJ,QAAQD,GACdA,EAAYnD,QAAQ,SAAUhE,GAASiH,EAAcN,IAAIU,EAAahB,EAAMrG,EAAOgH,MAGnFC,EAAcN,IAAIU,EAAahB,EAAMc,EAAaH,KAG1D,IAAK,IAAIX,KAAQK,EACbQ,EAAQb,GAEZ,IAAIiB,EAAU,SAAUjB,GACpB,IAAIkB,EAAYT,EAAST,GACrBjI,MAAMgJ,QAAQG,GACdT,EAAST,GAAQkB,EAAUC,OAAO,SAAUxH,GAAS,OAAQiH,EAAc3B,IAAI+B,EAAahB,EAAMrG,EAAOgH,MAGrGC,EAAc3B,IAAI+B,EAAahB,EAAMkB,EAAWP,MAChDF,EAAST,QAAQrN,IAI7B,IAAK,IAAIqN,KAAQS,EACbQ,EAAQjB,GAnCJU,CAAed,EAAOD,EAASU,OAAQtO,KAAKwN,aAE5CI,EAASW,KAoCrB,SAASc,EAAYX,EAAUH,GAC3B,IAAK,IAAIN,KAAQM,EAAK,CAClB,IAAIe,EAAWf,EAAIN,GACfkB,EAAYT,EAAST,GAErBS,EAAST,GADI,MAAbkB,GAAqBnJ,MAAMgJ,QAAQG,GAClBA,EAAUlF,OAAOqF,GAGjBA,GA3CjBD,CAAYxB,EAAOD,EAASW,KAEzB,IAAIb,EAAcG,IAEtBN,EA3B2B,GA2EtC,SAAS0B,EAAaM,EAAUJ,EAAWP,GAOvC,OAAOW,EAAW,IAAMC,KAAKC,UAAUN,EANxB,SAAUzI,EAAKkB,GAI1B,MAHqB,mBAAVA,IACPA,EAMZ,SAAS8H,EAAoBC,EAAKf,GAC9B,IAAIgB,EAAKhB,EAAW5N,IAAI2O,GAKxB,OAJKC,IACDA,EAAK,GAAK/P,EAAK2O,WAAWmB,GAAOrC,IACjCsB,EAAWnD,IAAIkE,EAAKC,IAEjBA,EAZSF,CAAoB9H,EAAOgH,IAEhChH,IAwCf,IAoHIiI,EApHAC,EAAa,IAAIjQ,EAAKkQ,wBAItBC,EAAkC,WAClC,SAASA,IACLhQ,KAAKiQ,UAAY,IAAIjF,IACrBhL,KAAKkQ,SAAW,IAAIlF,IAmDxB,OAjDAgF,EAAiBrM,UAAUwM,YAAc,SAAUrE,EAAM8B,GACrD,IAAIqC,EAAYjQ,KAAKiQ,UAAUjP,IAAI8K,IAAS,GAC5CmE,EAAUvG,KAAKkE,GACf5N,KAAKiQ,UAAUxE,IAAIK,EAAMmE,GACzBjQ,KAAKkQ,SAASpD,OAAOhB,IAEzBkE,EAAiBrM,UAAUyM,aAAe,SAAUH,GAChD,IAAIjO,EAAQhC,KACZA,KAAKiQ,UAAUI,QACfJ,EAAUrE,QAAQ,SAAU0E,GACxB,IAAIC,EAAKzG,EAAOwG,EAAI,GACpBtO,EAAMmO,YADyBI,EAAG,GAAeA,EAAG,OAI5DP,EAAiBrM,UAAU6M,cAAgB,SAAU1E,GAOjD,IANA,IAAI2E,EAAcX,EAAWW,YAAY3E,GAMhC3E,EAAIsJ,EAAY3J,OAAS,EAAGK,GAAK,EAAGA,IAAK,CAC9C,IAAIuJ,EAAaD,EAAYtJ,GAG7B,GAFkBuJ,aAAsB7Q,EAAK8Q,WAAaD,aAAsB7Q,EAAK+Q,WACjFF,aAAsB7Q,EAAKgR,MAAQH,aAAsB7Q,EAAKiR,SAE9D,OAAOJ,aAAsB1Q,KAAK8L,KAAO4E,EAAa,KAG9D,OAAO,MAEXV,EAAiBrM,UAAUQ,QAAU,SAAU2H,GAC3C,IAAI9J,EAAQhC,KACRkQ,EAAWlQ,KAAKkQ,SAASlP,IAAI8K,IAAS,KAC1C,IAAKoE,EAAU,CAEX,GADAA,EAAWlQ,KAAKwQ,cAAc1E,GAChB,CACV,IAAImE,EAAYjQ,KAAKiQ,UAAUjP,IAAI8K,GACnC,GAAImE,EAAW,CACX,IAAIc,EAAc,IAAIxD,EACtB0C,EAAUrE,QAAQ,SAAUgC,GACxBsC,EAAWa,EAAYtD,iBAAiBzL,EAAM8J,KAAMoE,EAAUtC,MAI1E5N,KAAKkQ,SAASzE,IAAIK,EAAMoE,GAE5B,OAAOA,GAEJF,EAtD0B,GAwDjCgB,EAAmC,SAAUC,GAE7C,SAASD,IACL,OAAkB,OAAXC,GAAmBA,EAAO9I,MAAMnI,KAAM6G,YAAc7G,KAO/D,OATAmG,EAAU6K,EAAmBC,GAI7BpL,OAAOuB,eAAe4J,EAAkBrN,UAAW,OAAQ,CACvD3C,IAAK,WAAc,OAAOnB,EAAK8Q,WAC/BpG,YAAY,EACZC,cAAc,IAEXwG,EAV2B,CAWpChB,GACEkB,EAAmC,SAAUD,GAE7C,SAASC,IACL,OAAkB,OAAXD,GAAmBA,EAAO9I,MAAMnI,KAAM6G,YAAc7G,KAO/D,OATAmG,EAAU+K,EAAmBD,GAI7BpL,OAAOuB,eAAe8J,EAAkBvN,UAAW,OAAQ,CACvD3C,IAAK,WAAc,OAAOnB,EAAK+Q,WAC/BrG,YAAY,EACZC,cAAc,IAEX0G,EAV2B,CAWpClB,GACEmB,EAA8B,SAAUF,GAExC,SAASE,IACL,OAAkB,OAAXF,GAAmBA,EAAO9I,MAAMnI,KAAM6G,YAAc7G,KAO/D,OATAmG,EAAUgL,EAAcF,GAIxBpL,OAAOuB,eAAe+J,EAAaxN,UAAW,OAAQ,CAClD3C,IAAK,WAAc,OAAOnB,EAAKgR,MAC/BtG,YAAY,EACZC,cAAc,IAEX2G,EAVsB,CAW/BnB,GACEoB,EAAkC,SAAUH,GAE5C,SAASG,IACL,OAAkB,OAAXH,GAAmBA,EAAO9I,MAAMnI,KAAM6G,YAAc7G,KAO/D,OATAmG,EAAUiL,EAAkBH,GAI5BpL,OAAOuB,eAAegK,EAAiBzN,UAAW,OAAQ,CACtD3C,IAAK,WAAc,OAAOnB,EAAKiR,UAC/BvG,YAAY,EACZC,cAAc,IAEX4G,EAV0B,CAWnCpB,IAUF,SAAWH,GACPA,EAAsBA,EAAmC,YAAI,GAAK,cAClEA,EAAsBA,EAAyC,kBAAI,GAAK,oBAF5E,CAGGA,IAA0BA,EAAwB,KAKrD,IAAIwB,EAAmC,WACnC,SAASA,EAAkBC,EAAUC,GACjCvR,KAAKsR,SAAWA,EAChBtR,KAAKuR,sBAAwBA,EAC7BvR,KAAKwR,iCAAmC,KACxCxR,KAAKyR,0BAA4B,KAEjCzR,KAAK0R,aAAe,GACpB1R,KAAK2R,QAAU,GACf3R,KAAK4R,UAAY,GACjB5R,KAAK6R,QAAU,GAEf7R,KAAK8R,kBAAoB,IAAI9E,IAC7BhN,KAAK+R,kBAAoB,IAAI/E,IAC7BhN,KAAKgS,aAAe,IAAIhF,IAExBhN,KAAKiS,eAAiB,IAAIjF,IAC1BhN,KAAKkS,eAAiB,IAAIlF,IAG1BhN,KAAKmS,wBAA0B,IAAInH,IACnChL,KAAKoS,UAqlBb,SAASC,IACL,MAAO,CACH9S,OAAQ,IAAI6R,EACZvF,UAAW,IAAIqF,EACfoB,UAAW,IAAItB,EACfuB,KAAM,IAAIpB,GA1lBOkB,GACjBrS,KAAKwS,uBAAyB,IAAIxH,IAKlChL,KAAKyS,cAAgB,IAAIzH,IAGzBhL,KAAK0S,cAAgB,GACrB1S,KAAK2S,UAAY,KACjB3S,KAAK4S,kBAAoB,KACzB5S,KAAK6S,kBAAoB,GACzB7S,KAAK8S,sBAAwB,GAC7B9S,KAAK+S,yBAA2B,IAAI/H,IACpChL,KAAKgT,0BAA4B,IAAIhG,IACrChN,KAAKiT,cAAgB,KAMrBjT,KAAKkT,eAJD,SAASC,MAikBjB,OA3jBA9B,EAAkB1N,UAAUyP,qBAAuB,SAAUxB,GACzD5R,KAAK4S,kBAAoBhB,EACzB5R,KAAK2S,UAAY,MAErBtB,EAAkB1N,UAAU0P,uBAAyB,SAAUC,GAC3D,IAAIhD,EAAIC,EAAIgD,EAAIC,OAEe5S,IAA3B0S,EAAU5B,eACV1R,KAAKyT,eAAeH,EAAU5B,aAAc7B,EAAsB6D,cACjEpD,EAAKtQ,KAAK0R,cAAchI,KAAKvB,MAAMmI,EAAItG,EAASsJ,EAAU5B,qBAGrC9Q,IAAtB0S,EAAU3B,UACV3R,KAAK2T,2BAA2BL,EAAU3B,UACzCpB,EAAKvQ,KAAK2R,SAASjI,KAAKvB,MAAMoI,EAAIvG,EAASsJ,EAAU3B,gBAE9B/Q,IAAxB0S,EAAU1B,YACT2B,EAAKvT,KAAK4R,WAAWlI,KAAKvB,MAAMoL,EAAIvJ,EAASsJ,EAAU1B,iBAElChR,IAAtB0S,EAAUzB,UACT2B,EAAKxT,KAAK6R,SAASnI,KAAKvB,MAAMqL,EAAIxJ,EAASsJ,EAAUzB,WAG9DR,EAAkB1N,UAAUiQ,eAAiB,SAAUC,EAAUjG,GAI7D,GAFA5N,KAAKoS,UAAU7S,OAAO4Q,YAAY0D,EAAUjG,GAE3B,OADF5N,KAAKoS,UAAU7S,OAAO4E,QAAQ0P,GAEzC,MAAM,IAAIhT,MAAMgT,EAASC,KAAO,+CAEpC9T,KAAK+T,kBAAkBF,GAIvB7T,KAAK2T,2BAA2B,CAACE,KAErCxC,EAAkB1N,UAAUqQ,kBAAoB,SAAUnI,EAAW+B,GACjE5N,KAAKoS,UAAUvG,UAAUsE,YAAYtE,EAAW+B,GAChD5N,KAAK8R,kBAAkBvD,IAAI1C,IAE/BwF,EAAkB1N,UAAUsQ,kBAAoB,SAAU3B,EAAW1E,GACjE5N,KAAKoS,UAAUE,UAAUnC,YAAYmC,EAAW1E,GAChD5N,KAAK+R,kBAAkBxD,IAAI+D,IAE/BjB,EAAkB1N,UAAUuQ,aAAe,SAAU3B,EAAM3E,GACvD5N,KAAKoS,UAAUG,KAAKpC,YAAYoC,EAAM3E,GACtC5N,KAAKgS,aAAazD,IAAIgE,IAE1BlB,EAAkB1N,UAAUwQ,iBAAmB,SAAUC,EAAOC,GAC5D,IAQIC,EARAC,EAAcF,EAASG,WACvB,CACIC,QAASL,EACTI,WAAYH,EAASG,WACrBE,KAAML,EAASK,MAAQ,GACvBC,MAAON,EAASM,OAEpB,CAAEF,QAASL,EAAOQ,SAAUP,EAASO,SAAUD,MAAON,EAASM,QAEpC,iBAAVP,IAAuBE,EAAgBzU,EAAKgV,kBAAkBT,KAClD,SAA7BE,EAAcQ,WACa9U,KAAK8S,sBAAwB9S,KAAK6S,mBACjDnJ,KAAK6K,GAErBvU,KAAK+S,yBAAyBtH,IAAI2I,EAAOG,IAE7ClD,EAAkB1N,UAAUoR,mCAAqC,SAAUjJ,EAAMG,GAC7E,IAGQyC,EAFJsG,EAAMlJ,EAAKjM,EAAKoV,cAKhBC,IAAsBF,IAAQ/H,EAAgCnB,OAH1D4C,EAHI1O,KAGaoS,UAAUvG,UAAU1H,QAAQ2H,IAC/BI,WAAawC,EAASxC,UAAUpF,OAAS,EAW/D9G,KAAKgU,kBAAkBlI,EAAM,CAAEL,IADhByJ,EAAoB,CAAEjJ,SAAUA,EAAUE,OAAQ,GAAID,UAAW,IAAO,CAAED,SAAUA,KAE/FiJ,GAAqBF,EAAI7I,QAAU6I,EAAI7I,OAAOrF,OAAS,GACvD9G,KAAKmS,wBAAwB1G,IAAIK,EAAMkJ,EAAI7I,QAG/CnM,KAAKwS,uBAAuB/G,IAAIK,EAAM+D,EAAsBsF,oBAEhE9D,EAAkB1N,UAAUyR,kBAAoB,WAC5C,OAAO/N,EAAUrH,UAAM,OAAQ,EAAQ,WACnC,IAAyBqV,EACrBrT,EAAQhC,KACZ,OAAOoI,EAAYpI,KAAM,SAAUsQ,GAC/B,OAAQA,EAAG3H,OACP,KAAK,EAGD,OAFA3I,KAAKsV,gCACiBtV,KAAKuV,mBAQpB,CAAC,EAAatK,EANV,SAAUK,GAIjB,OAHK+J,IACDA,EAAmBrT,EAAMuC,SAASvD,IAAIjB,EAASyV,iBAE5CtR,QAAQC,QAAQkR,EAAiBrU,IAAIsK,OALf,CAAC,EAAa,GAQnD,KAAK,EACDgF,EAAG1H,OACH0H,EAAG3H,MAAQ,EACf,KAAK,EAAG,MAAO,CAAC,SAKhC0I,EAAkB1N,UAAU8R,SAAW,WAEnCzV,KAAKuV,mBAELvV,KAAK0V,oBACL1V,KAAK2V,wBACL3V,KAAK4V,yBAGL5V,KAAK6V,oCAGL7V,KAAKwS,uBAAuBnC,QAE5BrQ,KAAKiT,cAAgB,IAAIpT,EAAKiW,oBAAoB9V,KAAKkT,eADlClT,KAAKsR,SAAS/M,UAGnC,IAAIwR,EAAW/V,KAAKiT,cAAc1O,SAASvD,IAAInB,EAAKmW,UAAWnW,EAAKoW,oBAKpE,OAJApW,EAAKqW,aAAaH,GAGlB/V,KAAKiT,cAAc1O,SAASvD,IAAInB,EAAKsW,uBAAuBC,kBACrDpW,KAAKiT,eAKhB5B,EAAkB1N,UAAU0S,qBAAuB,SAAUC,GACzDtW,KAAK2T,2BAA2B,CAAC2C,IACjCtW,KAAKuV,mBACLvV,KAAK4V,yBACL5V,KAAKuW,+BAA+BD,GACpCtW,KAAK2V,yBAKTtE,EAAkB1N,UAAU6S,sBAAwB,SAAUF,GAC1D,OAAOjP,EAAUrH,UAAM,OAAQ,EAAQ,WACnC,OAAOoI,EAAYpI,KAAM,SAAUsQ,GAC/B,OAAQA,EAAG3H,OACP,KAAK,EAKD,OAJuC,OAAnC3I,KAAKyR,4BACLzR,KAAKyR,0BAjkBjC,SAASgF,IACL,OAAO,IAAIzL,IAAID,GAgkB0C0L,IAErCzW,KAAK2T,2BAA2B,CAAC2C,IAC1B,CAAC,EAAatW,KAAKoV,qBAC9B,KAAK,EAKD,OAJA9E,EAAG1H,OACH5I,KAAK4V,yBACL5V,KAAKuW,+BAA+BD,GACpCtW,KAAK2V,wBACE,CAAC,SAQ5BtE,EAAkB1N,UAAU+S,mBAAqB,WAAc,OAAO1W,KAAKoS,UAAU7S,QAIrF8R,EAAkB1N,UAAUgT,uBAAyB,SAAUL,GAC3D,IAAItU,EAAQhC,KACZ,OAAO4W,EAAcN,EAAWO,KAAKnF,cAAcoF,OAAO,SAAUC,EAAWC,GAC3E,IAAIC,EAAeD,EAAYE,KAE/B,OADAD,GAAgBF,EAAUrN,KAAK,IAAI7J,EAAKsX,yBAAyBF,EAAcjV,EAAMiR,gBAC9E8D,GACR,KAEP1F,EAAkB1N,UAAU4R,iBAAmB,WAC3C,IAAIvT,EAAQhC,KAERoX,GAAsB,EAoB1B,OAnBApX,KAAK8R,kBAAkBlG,QAAQ,SAAUoL,GACrCI,EAAsBA,GAAuBnK,EAAgC+J,GAC7E,IAAItI,EAAW1M,EAAMoQ,UAAUvG,UAAU1H,QAAQ6S,GACjDhV,EAAMqV,gBAAgBxX,EAAKoV,aAAc+B,GACzCnX,EAAKyX,kBAAkBN,EAAatI,KAExC1O,KAAK8R,kBAAkBzB,QACvBrQ,KAAK+R,kBAAkBnG,QAAQ,SAAUoL,GACrC,IAAItI,EAAW1M,EAAMoQ,UAAUE,UAAUnO,QAAQ6S,GACjDhV,EAAMqV,gBAAgBxX,EAAK0X,YAAaP,GACxCnX,EAAK2X,kBAAkBR,EAAatI,KAExC1O,KAAK+R,kBAAkB1B,QACvBrQ,KAAKgS,aAAapG,QAAQ,SAAUoL,GAChC,IAAItI,EAAW1M,EAAMoQ,UAAUG,KAAKpO,QAAQ6S,GAC5ChV,EAAMqV,gBAAgBxX,EAAK4X,aAAcT,GACzCnX,EAAK6X,aAAaV,EAAatI,KAEnC1O,KAAKgS,aAAa3B,QACX+G,GAEX/F,EAAkB1N,UAAUgS,sBAAwB,WAChD,IAAI3T,EAAQhC,KACR2X,EAAgB,IAAI3M,IAQxBhL,KAAKwS,uBAAuB5G,QAAQ,SAAU0K,EAAYsB,GACtD,IAAIC,EARe,SAAUvB,GAC7B,IAAKqB,EAAczK,IAAIoJ,GAAa,CAChC,IAAIwB,EAvQpB,SAASC,EAAwBnQ,GAC7B,OAAOA,IAAUiI,EAAsB6D,aACnC9L,IAAUiI,EAAsBsF,kBAqQT4C,CAAwBzB,GAActU,EAAMkR,eAAiBoD,EAC5EqB,EAAclM,IAAI6K,EAAYzW,EAAKmY,qBAAqBF,IAE5D,OAAOH,EAAc3W,IAAIsV,GAGP2B,CAAiB3B,GACnCtU,EAAMkW,sBAAsBN,EAAe/X,EAAKoV,aAAc,iBAC9DjT,EAAMkW,sBAAsBN,EAAe/X,EAAKoV,aAAc,YAC9DpV,EAAKsY,4BAA4BP,EAAcV,KAAMW,KAEzD7X,KAAKwS,uBAAuBnC,SAEhCgB,EAAkB1N,UAAUiS,uBAAyB,WACjD,IAAI5T,EAAQhC,KACRoY,EAAsB,SAAUC,GAAS,OAAO,SAAUvM,GAC1D,IACI4C,GADW2J,IAAUxY,EAAKoV,aAAejT,EAAMoQ,UAAUvG,UAAY7J,EAAMoQ,UAAUE,WACjEnO,QAAQ2H,GAC5B9J,EAAMsW,qBAAqB5J,EAASkD,YACpC5P,EAAMuW,8BAA8BzM,EAAMuM,KAGlDrY,KAAKiS,eAAerG,QAAQwM,EAAoBvY,EAAKoV,eACrDjV,KAAKkS,eAAetG,QAAQwM,EAAoBvY,EAAK0X,cACrDvX,KAAKiS,eAAe5B,QACpBrQ,KAAKkS,eAAe7B,SAExBgB,EAAkB1N,UAAU4S,+BAAiC,SAAUD,GACnE,IAAIkC,EAAKlI,EACT,IAAItQ,KAAKgT,0BAA0B9F,IAAIoJ,GAAvC,CAGAtW,KAAKgT,0BAA0BzE,IAAI+H,GACnC,IAAImC,EAAcnC,EAAWzW,EAAK6Y,aAClC,GAAI1Y,KAAK+S,yBAAyB4F,KAAO,EAAG,CAKxC,IAGI/G,EAAY5H,EAHW4O,EAAQA,EAAQH,EAAY9G,QAAS,SAAUkH,GACtE,OAkWhB,SAASC,EAAsBlR,GAC3B,OAAOA,EAAM1B,eAAe,YAnWT4S,CAAsBD,GAAYA,EAASjH,UAAY,MAEnB6G,EAAY7G,WACvD5R,KAAKsY,qBAAqB1G,KAC1B5R,KAAKqX,gBAAgBxX,EAAK6Y,YAAapC,GACvCtW,KAAKkY,sBAAsB5B,EAAYzW,EAAK6Y,YAAa,aACzDD,EAAY7G,UAAY5R,KAAK+Y,uBAAuBnH,IAGxD,IAAI0B,EAAYgD,EAAWzW,EAAKmZ,aAChC,IACI,IAAK,IAAIzI,EAAK5G,EAAS2J,EAAU3B,SAAU4B,EAAKhD,EAAGnN,QAASmQ,EAAGtL,KAAMsL,EAAKhD,EAAGnN,OAEzEpD,KAAKuW,+BADYhD,EAAG3L,OAI5B,MAAOqR,GAAST,EAAM,CAAE9W,MAAOuX,GAC/B,QACI,IACQ1F,IAAOA,EAAGtL,OAASqI,EAAKC,EAAGtH,SAASqH,EAAG9G,KAAK+G,GAEpD,QAAU,GAAIiI,EAAK,MAAMA,EAAI9W,WAIzC2P,EAAkB1N,UAAUkS,kCAAoC,WAC5D7V,KAAKmS,wBAAwBvG,QAAQ,SAAUO,EAAQL,GAAQ,OAAOA,EAAKjM,EAAKoV,cAAc9I,OAASA,IACvGnM,KAAKmS,wBAAwB9B,SAEjCgB,EAAkB1N,UAAU8P,eAAiB,SAAUyF,EAAK5C,GACxD,IAAI6C,EAAK7I,EACT,IACI,IAAK,IAAI8I,EAAQzP,EAASuP,GAAMG,EAAUD,EAAMhW,QAASiW,EAAQpR,KAAMoR,EAAUD,EAAMhW,OAAQ,CAC3F,IAAIwE,EAAQyR,EAAQzR,MAChB5B,MAAMgJ,QAAQpH,GACd5H,KAAKyT,eAAe7L,EAAO0O,GAG3BtW,KAAKsZ,UAAU1R,EAAO0O,IAIlC,MAAOiD,GAASJ,EAAM,CAAEzX,MAAO6X,GAC/B,QACI,IACQF,IAAYA,EAAQpR,OAASqI,EAAK8I,EAAMnQ,SAASqH,EAAG9G,KAAK4P,GAEjE,QAAU,GAAID,EAAK,MAAMA,EAAIzX,SAGrC2P,EAAkB1N,UAAUoQ,kBAAoB,SAAUF,GACtD,IAAInF,EAAW1O,KAAKoS,UAAU7S,OAAO4E,QAAQ0P,GAC7C,GAAiB,OAAbnF,EACA,MAAM,IAAI7N,MAAM,4CAA8CgT,EAASC,MAG3E9T,KAAKqX,gBAAgBxX,EAAKmZ,YAAanF,GACvC7T,KAAKqX,gBAAgBxX,EAAK6Y,YAAa7E,GACvChU,EAAK2Z,qBAAqB3F,EAAUnF,IAExC2C,EAAkB1N,UAAU2V,UAAY,SAAUxN,EAAMwK,GAEpD,OADgBtW,KAAKoS,UAAUvG,UAAU1H,QAAQ2H,KAKzCmB,EAAgCnB,IAAUA,EAAK5F,eAAerG,EAAKoV,eACnEjV,KAAK8R,kBAAkBvD,IAAIzC,GAE/B9L,KAAKiS,eAAe1D,IAAIzC,QAgBnB9L,KAAKwS,uBAAuBtF,IAAIpB,IACjC9L,KAAKwS,uBAAuBxR,IAAI8K,KAAU+D,EAAsB6D,aAChE1T,KAAKwS,uBAAuB/G,IAAIK,EAAMwK,KAI9BtW,KAAKoS,UAAUE,UAAUnO,QAAQ2H,IAExCA,EAAK5F,eAAerG,EAAK0X,cAC1BvX,KAAK+R,kBAAkBxD,IAAIzC,QAE/B9L,KAAKkS,eAAe3D,IAAIzC,UAGjB9L,KAAKoS,UAAUG,KAAKpO,QAAQ2H,IAC1BA,EAAK5F,eAAerG,EAAK4X,eAClCzX,KAAKgS,aAAazD,IAAIzC,KAI9BuF,EAAkB1N,UAAUgQ,2BAA6B,SAAUuF,GAC/D,IAAIO,EAAKnJ,EACT,IACI,IAAK,IAAIoJ,EAAQ/P,EAASuP,GAAMS,EAAUD,EAAMtW,QAASuW,EAAQ1R,KAAM0R,EAAUD,EAAMtW,OAAQ,CAC3F,IAAIwE,EAAQ+R,EAAQ/R,MACpB,GAAI5B,MAAMgJ,QAAQpH,GACd5H,KAAK2T,2BAA2B/L,QAE/B,GAAIgS,EAAehS,GAAQ,CAC5B,IAAIoN,EAAMpN,EAAMiP,KAEhB7W,KAAKyT,eAAemD,EAAc5B,EAAItD,cAAe9J,GACrD5H,KAAK2T,2BAA2BiD,EAAc5B,EAAIrD,UAClD3R,KAAK2T,2BAA2BiD,EAAc5B,EAAI1V,YAI9D,MAAOua,GAASJ,EAAM,CAAE/X,MAAOmY,GAC/B,QACI,IACQF,IAAYA,EAAQ1R,OAASqI,EAAKoJ,EAAMzQ,SAASqH,EAAG9G,KAAKkQ,GAEjE,QAAU,GAAID,EAAK,MAAMA,EAAI/X,SAGrC2P,EAAkB1N,UAAU0T,gBAAkB,SAAUpJ,EAAMnC,GAC1D,IAAK9L,KAAKyS,cAAcvF,IAAIpB,GAAO,CAC/B,IAAIgO,EAAajU,OAAOmB,yBAAyB8E,EAAMmC,GACvDjO,KAAKyS,cAAchH,IAAIK,EAAM,CAACmC,EAAM6L,MAG5CzI,EAAkB1N,UAAUuU,sBAAwB,SAAUpM,EAAMiO,EAAU1B,GAC1E,IAAIrD,EAAMlJ,EAAKiO,GAEf/Z,KAAK0S,cAAchJ,KAAK,CAAE2O,MAAOA,EAAOrD,IAAKA,EAAKgF,SADnChF,EAAIqD,MAQvBhH,EAAkB1N,UAAU2R,8BAAgC,WACxD,IAAItT,EAAQhC,KACkC,OAA1CA,KAAKwR,mCACLxR,KAAKwR,iCAAmC,IAAIxG,KAEhD+B,IAA2CnB,QAAQ,SAAUhE,EAAOlB,GAAO,OAAO1E,EAAMwP,iCAAiC/F,IAAI/E,EAAKkB,MAOtIyJ,EAAkB1N,UAAUsW,gCAAkC,WACZ,OAA1Cja,KAAKwR,mCAttBjB,SAASyI,EAAgCC,GACrCrN,EAA8BwD,QAC9B6J,EAAMtO,QAAQ,SAAUlD,EAAGoD,GAAQ,OAAOe,EAA8B0B,IAAIzC,KAC5EH,EAAmCuO,EAotB3BD,CAAgCja,KAAKwR,kCACrCxR,KAAKwR,iCAAmC,OAGhDH,EAAkB1N,UAAUwW,qBAAuB,WAG/CC,EAAapa,KAAK0S,cAAe,SAAUpJ,GAAMA,EAAG0L,IAAI1L,EAAG+O,OAAS/O,EAAG0Q,WAEvEha,KAAKyS,cAAc7G,QAAQ,SAAUhE,EAAOkE,GACxC,IAAIwE,EAAKxG,EAAOlC,EAAO,GAAIqG,EAAOqC,EAAG,GAAI+J,EAAa/J,EAAG,GACpD+J,EAUDxU,OAAOuB,eAAe0E,EAAMmC,EAAMoM,UAH3BvO,EAAKmC,KAMpBjO,KAAKyS,cAAcpC,QACnBrQ,KAAKgT,0BAA0B3C,QAC/BrQ,KAAKia,kCACDja,KAAKyR,4BA51BjB,SAAS6I,EAA8BC,GACnCxP,EAAU,IAAIC,IAAIuP,GA41BVD,CAA8Bta,KAAKyR,2BACnCzR,KAAKyR,0BAA4B,MAGrC5R,EAAKqW,aAAarW,EAAKoW,qBAE3B5E,EAAkB1N,UAAU+R,kBAAoB,WAC5C,IACI8E,EADAxY,EAAQhC,KAMZH,EAAK2Z,qBALDgB,EACA,SAASA,MAI8B,CACvC5I,UAAW5H,EAAShK,KAAK8S,yBAE7B,IAAIhR,EAAS,IAAIjC,EAAK4a,OAAO,CAAEC,sBAAsB,IACjD9I,EAAY5H,EAAS,CACrB,CAAEyK,QAAS5U,EAAK4a,OAAQ7F,SAAU9S,GAClC,CAAE2S,QAAS5U,EAAK8a,SAAUnG,WAAY,WAAc,OAAO,IAAIoG,GAAe5Y,MAC/EhC,KAAK4R,UAAW5R,KAAK6S,mBAGxBhT,EAAK2Z,qBAAqBxZ,KAAKkT,eAAgB,CAC3CxB,aAAc1R,KAAK0R,aACnBC,QAJU,CAAC6I,EAAiBxa,KAAKuR,sBAAuBvR,KAAK2R,SAAW,IAKxEE,QAAS7R,KAAK6R,QACdD,UAAWA,IAC2B,GAE1C5R,KAAKuW,+BAA+BvW,KAAKkT,iBAE7CrN,OAAOuB,eAAeiK,EAAkB1N,UAAW,WAAY,CAC3D3C,IAAK,WACD,GAAuB,OAAnBhB,KAAK2S,UACL,OAAO3S,KAAK2S,UAEhB,IAWIkI,EAXAjJ,EAAY,GACM5R,KAAKsR,SAAS/M,SAASvD,IAAInB,EAAKib,kBACtClP,QAAQ,SAAUmP,GAC1BA,EAAKnJ,WACLA,EAAUlI,KAAKqR,EAAKnJ,aAGG,OAA3B5R,KAAK4S,mBACLhB,EAAUlI,KAAKvB,MAAMyJ,EAAW5H,EAAShK,KAAK4S,oBAQlD/S,EAAK2Z,qBALDqB,EACA,SAASA,MAI6B,CAAEjJ,UAAWA,IACvD,IAAIoJ,EAAwB,IAAInb,EAAKob,iBAAiBJ,GAEtD,OADA7a,KAAK2S,UAAYqI,EAAsB1U,OAAOtG,KAAKsR,SAAS/M,UAAUA,SAC/DvE,KAAK2S,WAEhBpI,YAAY,EACZC,cAAc,IAGlB6G,EAAkB1N,UAAUuX,2BAA6B,SAAU7G,GAC/D,IAAID,EAAQ+G,EAAiB9G,GAC7B,OAAOrU,KAAK+S,yBAAyB/R,IAAIoT,IAAU,MAEvD/C,EAAkB1N,UAAUyX,qBAAuB,SAAUxJ,GACzD,IAAI5P,EAAQhC,KACZ,OAAK4R,GAAcA,EAAU9K,QAAiD,IAAvC9G,KAAK+S,yBAAyB4F,KAO9DC,EAAQA,EAAQhH,EAAW,SAAUyC,GAAY,OAAOrS,EAAMkZ,2BAA2B7G,IAAa,MANlG,IAQfhD,EAAkB1N,UAAUoV,uBAAyB,SAAUnH,GAC3D,IAAI5P,EAAQhC,KACZ,IAAK4R,IAAcA,EAAU9K,QAAiD,IAAvC9G,KAAK+S,yBAAyB4F,KACjE,MAAO,GACX,IAAI1I,EAAYjQ,KAAKob,qBAAqBxJ,GACtCyJ,EAA4BpL,EAAUqL,KAAKC,GAC3CC,EAAsBxR,EAAS4H,EAAW3B,GAE9C,IAAKoL,EACD,OAAOG,EAEX,IAAIC,EAAQ,GACRC,EAAqB,IAAI1O,IAwB7B,OApBAoN,EAAaoB,EAAqB,SAAUnH,GACxC,IAAID,EAAQ+G,EAAiB9G,GACzBkH,EAAgBlH,IAAarS,EAAM+Q,yBAAyB7F,IAAIkH,GAC3DsH,EAAmBxO,IAAIkH,KACxBsH,EAAmBnN,IAAI6F,GACnBC,GAAYA,EAASO,UAAY5O,MAAMgJ,QAAQqF,EAASO,UACxDwF,EAAa/F,EAASO,SAAU,SAAUhN,GAEtC6T,EAAME,QAAQ,CAAElH,QAASL,EAAOQ,SAAUhN,EAAO+M,OAAO,MAI5D8G,EAAME,QAAQtH,IAKtBoH,EAAME,QAAQtH,KAGfoH,GAEXpK,EAAkB1N,UAAU2U,qBAAuB,SAAU1G,GACzD,OAAO5R,KAAKob,qBAAqBxJ,GAAW9K,OAAS,GAEzDuK,EAAkB1N,UAAU4U,8BAAgC,SAAUvB,EAAaqB,GAC/E,IAAIrW,EAAQhC,KACRgV,EAAMgC,EAAYqB,GACtB,GAAIrD,GAAOA,EAAI4G,kBAAmB,CAC9B5b,KAAKqX,gBAAgBgB,EAAOrB,GAC5B,IAAI6E,EAAa7G,EAAI4G,kBACjBE,EAAuB,SAAUlK,GAAa,OAAO5P,EAAM+W,uBAAuBnH,IACtF5R,KAAKkY,sBAAsBlB,EAAaqB,EAAO,qBAC/CrD,EAAI4G,kBAAoB,SAAUG,GAAS,OAAOF,EAAWE,EAAOD,MAGrEzK,EAxmB2B,GAknBtC,SAASuI,EAAehS,GACpB,OAAOA,EAAM1B,eAAe,QAEhC,SAAS0Q,EAAcoF,GACnB,OAAOA,aAAmBC,SAAWD,IAAYA,EAErD,SAASpD,EAAQsD,EAAQC,GACrB,IAAIC,EAAM,GASV,OARAF,EAAOtQ,QAAQ,SAAUhE,GACjB5B,MAAMgJ,QAAQpH,GACdwU,EAAI1S,KAAKvB,MAAMiU,EAAKpS,EAAS4O,EAAQhR,EAAOuU,KAG5CC,EAAI1S,KAAKyS,EAAQA,EAAMvU,GAASA,KAGjCwU,EAEX,SAASC,EAAiBhI,EAAUgE,GAChC,OAAOhE,GAAgC,iBAAbA,GAAyBA,EAASgE,GAEhE,SAAS8C,EAAiB9G,GACtB,OAAOgI,EAAiBhI,EAAU,YAAcA,EAEpD,SAASkH,EAAgBlH,GACrB,QAASgI,EAAiBhI,EAAU,SAKxC,SAAS+F,EAAa8B,EAAQ9b,GAC1B,IAAK,IAAIkc,EAAMJ,EAAOpV,OAAS,EAAGwV,GAAO,EAAGA,IACxClc,EAAG8b,EAAOI,GAAMA,GAGxB,IAkWIC,GAlWA3B,GAAgC,WAChC,SAASA,EAAe2B,GACpBvc,KAAKuc,QAAUA,EA2CnB,OAzCA3B,EAAejX,UAAU6Y,kBAAoB,SAAUlG,GAEnD,OADAtW,KAAKuc,QAAQlG,qBAAqBC,GAC3B,IAAIzW,EAAKob,iBAAiB3E,IAErCsE,EAAejX,UAAU8Y,mBAAqB,SAAUnG,GACpD,OAAOjP,EAAUrH,UAAM,OAAQ,EAAQ,WACnC,OAAOoI,EAAYpI,KAAM,SAAUsQ,GAC/B,OAAQA,EAAG3H,OACP,KAAK,EAAG,MAAO,CAAC,EAAa3I,KAAKuc,QAAQ/F,sBAAsBF,IAChE,KAAK,EAED,OADAhG,EAAG1H,OACI,CAAC,EAAc,IAAI/I,EAAKob,iBAAiB3E,UAKpEsE,EAAejX,UAAU+Y,kCAAoC,SAAUpG,GACnE,IAAIqG,EAAkB3c,KAAKwc,kBAAkBlG,GACzCsG,EAAqB5c,KAAKuc,QAAQ5F,uBAAuBL,GAC7D,OAAO,IAAIzW,EAAKgd,6BAA6BF,EAAiBC,IAElEhC,EAAejX,UAAUmZ,mCAAqC,SAAUxG,GACpE,OAAOjP,EAAUrH,UAAM,OAAQ,EAAQ,WACnC,IAAI2c,EAAiBC,EACrB,OAAOxU,EAAYpI,KAAM,SAAUsQ,GAC/B,OAAQA,EAAG3H,OACP,KAAK,EAAG,MAAO,CAAC,EAAa3I,KAAKyc,mBAAmBnG,IACrD,KAAK,EAGD,OAFAqG,EAAkBrM,EAAG1H,OACrBgU,EAAqB5c,KAAKuc,QAAQ5F,uBAAuBL,GAClD,CAAC,EAAc,IAAIzW,EAAKgd,6BAA6BF,EAAiBC,UAKjGhC,EAAejX,UAAUoZ,WAAa,aACtCnC,EAAejX,UAAUqZ,cAAgB,SAAUlR,KACnD8O,EAAejX,UAAUsZ,YAAc,SAAU3G,GAC7C,IAAI4G,EAAOld,KAAKuc,QAAQ7F,qBAAqBvS,QAAQmS,GACrD,OAAO4G,GAAQA,EAAKtN,SAAMhP,GAEvBga,EA7CwB,GAuD/BuC,GAAqB,EAWrBC,GAAgC,WAChC,SAASA,IAELpd,KAAKsR,SAAW,KAChBtR,KAAK6T,SAAW,KAChB7T,KAAKqd,UAAY,KACjBrd,KAAKsd,eAAiB,KACtBtd,KAAKud,gBAAkB,GACvBvd,KAAKwd,2BAA4B,EAsRrC,OAvQAJ,EAAeK,oBAAsB,SAAU5J,EAAUvC,EAAUoM,GAC/D,IAAInB,EAAUoB,KAEd,OADApB,EAAQkB,oBAAoB5J,EAAUvC,EAAUoM,GACzCnB,GAOXa,EAAeQ,qBAAuB,WAAcD,KAAqBC,wBACzER,EAAeS,kBAAoB,SAAUC,GAEzC,OADAH,KAAqBE,kBAAkBC,GAChCV,GAMXA,EAAe/J,uBAAyB,SAAUC,GAE9C,OADAqK,KAAqBtK,uBAAuBC,GACrC8J,GAOXA,EAAehI,kBAAoB,WAAc,OAAOuI,KAAqBvI,qBAC7EgI,EAAexJ,eAAiB,SAAUC,EAAUjG,GAEhD,OADA+P,KAAqB/J,eAAeC,EAAUjG,GACvCwP,GAEXA,EAAepJ,kBAAoB,SAAUnI,EAAW+B,GAEpD,OADA+P,KAAqB3J,kBAAkBnI,EAAW+B,GAC3CwP,GAEXA,EAAenJ,kBAAoB,SAAU3B,EAAW1E,GAEpD,OADA+P,KAAqB1J,kBAAkB3B,EAAW1E,GAC3CwP,GAEXA,EAAelJ,aAAe,SAAU3B,EAAM3E,GAE1C,OADA+P,KAAqBzJ,aAAa3B,EAAM3E,GACjCwP,GAEXA,EAAeW,iBAAmB,SAAUlS,EAAWI,GAEnD,OADA0R,KAAqB3J,kBAAkBnI,EAAW,CAAEJ,IAAK,CAAEQ,SAAUA,EAAUD,YAAa,QACrFoR,GAQXA,EAAerI,mCAAqC,SAAUlJ,EAAWI,GAErE,OADA0R,KAAqB5I,mCAAmClJ,EAAWI,GAC5DmR,GAEXA,EAAejJ,iBAAmB,SAAUC,EAAOC,GAE/C,OADAsJ,KAAqBxJ,iBAAiBC,EAAOC,GACtC+I,GAEXA,EAAeY,OAAS,SAAU5J,EAAO6J,EAAeC,GACpD,OAAOP,KAAqBK,OAAO5J,EAAO6J,EAAeC,IAG7Dd,EAAepc,IAAM,SAAUoT,EAAO6J,EAAeC,GAGjD,YAFsB,IAAlBD,IAA4BA,EAAgBpe,EAAKse,SAASC,yBAChD,IAAVF,IAAoBA,EAAQre,EAAKwe,YAAYC,SAC1CX,KAAqBK,OAAO5J,EAAO6J,EAAeC,IAE7Dd,EAAemB,gBAAkB,SAAU1S,GACvC,OAAO8R,KAAqBY,gBAAgB1S,IAEhDuR,EAAeoB,mBAAqB,WAEhC,OADAb,KAAqBa,qBACdpB,GAeXA,EAAezZ,UAAU8Z,oBAAsB,SAAU5J,EAAUvC,EAAUoM,GACzE,GAAI1d,KAAKsR,UAAYtR,KAAK6T,SACtB,MAAM,IAAIhT,MAAM,gEAEpBb,KAAKsR,SAAWA,EAChBtR,KAAK6T,SAAWA,EAChB7T,KAAKqd,UAAY,IAAIhM,EAAkBrR,KAAKsR,SAAUtR,KAAK6T,WAO/DuJ,EAAezZ,UAAUia,qBAAuB,WAC5C5d,KAAKwe,qBACLxe,KAAKqd,UAAY,KACjBrd,KAAKsR,SAAW,KAChBtR,KAAK6T,SAAW,MAEpBuJ,EAAezZ,UAAU6a,mBAAqB,WAC1Cxe,KAAKye,iCACL5e,EAAK6e,2BACkB,OAAnB1e,KAAKqd,WACLrd,KAAKD,SAASoa,uBAElBna,KAAKqd,UAAY,IAAIhM,EAAkBrR,KAAKsR,SAAUtR,KAAK6T,UAC3D7T,KAAKsd,eAAiB,KACtBtd,KAAK2e,yBAETvB,EAAezZ,UAAUka,kBAAoB,SAAUC,GACnD,GAAqB,MAAjBA,EAAOc,OACP,MAAM,IAAI/d,MAAM,4DAEKD,IAArBkd,EAAOlM,WACP5R,KAAKD,SAASqT,qBAAqB0K,EAAOlM,YAGlDwL,EAAezZ,UAAU0P,uBAAyB,SAAUC,GACxDtT,KAAK6e,sBAAsB,mCAAoC,6BAC/D7e,KAAKD,SAASsT,uBAAuBC,IAEzC8J,EAAezZ,UAAUyR,kBAAoB,WAAc,OAAOpV,KAAKD,SAASqV,qBAChFgI,EAAezZ,UAAUqa,OAAS,SAAU5J,EAAO6J,EAAeC,GAC9D,GAAI9J,IAAUgJ,EACV,OAAOpd,KAEX,IAAI8e,EAAY,GACZ9W,EAAShI,KAAKiT,cAAc1O,SAASvD,IAAIoT,EAAO0K,EAAWZ,GAC/D,OAAOlW,IAAW8W,EAAY9e,KAAKD,SAASwE,SAASvD,IAAIoT,EAAO6J,EAAeC,GAC3ElW,GAGRoV,EAAezZ,UAAU3C,IAAM,SAAUoT,EAAO6J,EAAeC,GAG3D,YAFsB,IAAlBD,IAA4BA,EAAgBpe,EAAKse,SAASC,yBAChD,IAAVF,IAAoBA,EAAQre,EAAKwe,YAAYC,SAC1Cte,KAAKge,OAAO5J,EAAO6J,EAAeC,IAE7Cd,EAAezZ,UAAUob,QAAU,SAAUC,EAAQ5e,EAAIC,GACrD,IAAI2B,EAAQhC,KACRif,EAASD,EAAOE,IAAI,SAAU1W,GAAK,OAAOxG,EAAMgc,OAAOxV,KAC3D,OAAOpI,EAAG+H,MAAM9H,EAAS4e,IAE7B7B,EAAezZ,UAAUiQ,eAAiB,SAAUC,EAAUjG,GAC1D5N,KAAK6e,sBAAsB,iBAAkB,4BAC7C7e,KAAKD,SAAS6T,eAAeC,EAAUjG,IAE3CwP,EAAezZ,UAAUqQ,kBAAoB,SAAUnI,EAAW+B,GAC9D5N,KAAK6e,sBAAsB,oBAAqB,+BAChD7e,KAAKD,SAASiU,kBAAkBnI,EAAW+B,IAE/CwP,EAAezZ,UAAUoR,mCAAqC,SAAUlJ,EAAWI,GAC/EjM,KAAK6e,sBAAsB,+CAAgD,+EAC3E7e,KAAKD,SAASgV,mCAAmClJ,EAAWI,IAEhEmR,EAAezZ,UAAUsQ,kBAAoB,SAAU3B,EAAW1E,GAC9D5N,KAAK6e,sBAAsB,oBAAqB,+BAChD7e,KAAKD,SAASkU,kBAAkB3B,EAAW1E,IAE/CwP,EAAezZ,UAAUuQ,aAAe,SAAU3B,EAAM3E,GACpD5N,KAAK6e,sBAAsB,eAAgB,0BAC3C7e,KAAKD,SAASmU,aAAa3B,EAAM3E,IAKrCwP,EAAezZ,UAAUwQ,iBAAmB,SAAUC,EAAOC,GACzDrU,KAAKD,SAASoU,iBAAiBC,EAAOC,IAE1C+I,EAAezZ,UAAU4a,gBAAkB,SAAUzS,GACjD,IAAI9J,EAAQhC,KACRmf,EAAwBnf,KAAKge,OAAOvT,GACpC2U,EAAW,6BAA+BjC,KAC9CgC,EAAsBzU,kBAAkB0U,GACxC,IAAInI,EAAenL,EAAKoL,KACxB,IAAKD,EACD,MAAM,IAAIpW,MAAM,kBAAoBhB,EAAK2O,WAAW1C,GAAQ,wDAGhE,IAAIuT,EAAWrf,KAAKge,OAAOlT,GAA0B,GAEjD/G,EAAa/D,KAAKge,OAAOpT,GAA4B,GACrD9I,EAASud,EAAW,KAAOrf,KAAKge,OAAOne,EAAK4a,OAAQ,MACpD6E,EAAmB,IAAIzf,EAAKsX,yBAAyBF,GACrDsI,EAAgB,WAChB,IAAI1d,EAAeyd,EAAiBhZ,OAAOzG,EAAKse,SAASqB,KAAM,GAAI,IAAMJ,EAAUpd,EAAMiR,eACzF,OAAO,IAAIrR,EAAiBC,EAAcC,EAAQiC,IAElD0b,EAAU3d,EAASA,EAAOP,IAAIge,GAAiBA,IAEnD,OADAvf,KAAKud,gBAAgB7T,KAAK+V,GACnBA,GAEX5Z,OAAOuB,eAAegW,EAAezZ,UAAW,WAAY,CACxD3C,IAAK,WACD,GAAuB,OAAnBhB,KAAKqd,UACL,MAAM,IAAIxc,MAAM,oDAEpB,OAAOb,KAAKqd,WAEhB9S,YAAY,EACZC,cAAc,IAElB3E,OAAOuB,eAAegW,EAAezZ,UAAW,gBAAiB,CAC7D3C,IAAK,WAID,OAH4B,OAAxBhB,KAAKsd,iBACLtd,KAAKsd,eAAiBtd,KAAKD,SAAS0V,YAEjCzV,KAAKsd,gBAEhB/S,YAAY,EACZC,cAAc,IAElB4S,EAAezZ,UAAUkb,sBAAwB,SAAUa,EAAYC,GACnE,GAA4B,OAAxB3f,KAAKsd,eACL,MAAM,IAAIzc,MAAM,UAAY8e,EAAoB,qGACOD,EAAa,OAe5EtC,EAAezZ,UAAU8a,+BAAiC,WAGjDze,KAAKwd,2BAAqD,OAAxBxd,KAAKsd,gBACxCzd,EAAK+f,2CAET5f,KAAKwd,2BAA4B,GAErCJ,EAAezZ,UAAUgb,sBAAwB,WAC7C3e,KAAKud,gBAAgB3R,QAAQ,SAAU6T,GACnC,IACIA,EAAQ9a,UAEZ,MAAOmD,GACH+X,QAAQne,MAAM,oCAAqC,CAC/CmK,UAAW4T,EAAQ1c,kBACnB+c,WAAYhY,OAIxB9H,KAAKud,gBAAkB,IAEpBH,EA9RwB;;;;;;;OAiSnC,SAASO,KACL,OAAOpB,GAAUA,IAAW,IAAIa;;;;;;;OAUpC,SAAS2C,KACL,MAAMlf,MAAM,iBAOhB,IAyhBImf,GAzhBAC,GAAiC,SAAUhP,GAE3C,SAASgP,IACL,OAAkB,OAAXhP,GAAmBA,EAAO9I,MAAMnI,KAAM6G,YAAc7G,KAsC/D,OAxCAmG,EAAU8Z,EAAiBhP,GAI3BpL,OAAOuB,eAAe6Y,EAAgBtc,UAAW,WAAY,CACzD3C,IAAK,WAAc,MAAM+e,MACzBxV,YAAY,EACZC,cAAc,IAElByV,EAAgBtc,UAAUiQ,eAAiB,SAAUrU,EAAQ0Q,GACzD,MAAM8P,MAEVE,EAAgBtc,UAAUsQ,kBAAoB,SAAU3B,EAAWrC,GAC/D,MAAM8P,MAEVE,EAAgBtc,UAAUqQ,kBAAoB,SAAUnI,EAAWoE,GAC/D,MAAM8P,MAEVE,EAAgBtc,UAAUuQ,aAAe,SAAU5B,EAAWrC,GAC1D,MAAM8P,MAMVE,EAAgBtc,UAAUuc,iBAAmB,SAAUC,GAAa,MAAMJ,MAM1EE,EAAgBtc,UAAUyc,oBAAsB,SAAUvU,GAAa,MAAMkU,MAK7EE,EAAgBtc,UAAU0c,sBAAwB,SAAU3e,GAAS,MAAMqe,MACzDxZ,EAAW,CACzB1G,EAAKygB,cACNL,GAxC6B,CA0ClCpgB,EAAK8a,UAMH4F,GACA,SAASA,OAYTC,GAAuB,EAWvBC,GAAmC,WACnC,SAASA,IACLzgB,KAAK0gB,eAAgB,EACrB1gB,KAAKqd,UAAY,KACjBrd,KAAK2gB,WAAa,KAClB3gB,KAAK4gB,eAAiB,KACtB5gB,KAAK6gB,iBAAmB,GACxB7gB,KAAK8gB,iBAAmB,GACxB9gB,KAAK+gB,oBAAsB,GAC3B/gB,KAAKghB,oBAAsB,GAC3BhhB,KAAKihB,eAAiB,GACtBjhB,KAAKkhB,WAAa,GAClBlhB,KAAKmhB,cAAgB,GACrBnhB,KAAKohB,SAAW,GAChBphB,KAAKqhB,SAAW,GAChBrhB,KAAKud,gBAAkB,GACvBvd,KAAKshB,qBAAuB,WAAc,MAAO,IACjDthB,KAAKuhB,cAAgB,GACrBvhB,KAAKwhB,mBAAqB,GAC1BxhB,KAAKyhB,SAAU,EACfzhB,KAAK0hB,uBAAyB,GAC9B1hB,KAAKsR,SAAW,KAChBtR,KAAK6T,SAAW,KAoapB,OAvZA4M,EAAkBhD,oBAAsB,SAAU5J,EAAUvC,EAAUoM,GAClE,IAAInB,EAAUoF,KAEd,OADApF,EAAQkB,oBAAoB5J,EAAUvC,EAAUoM,GACzCnB,GAKXkE,EAAkB7C,qBAAuB,WAAc+D,KAAwB/D,wBAC/E6C,EAAkBjC,mBAAqB,WAEnC,OADAmD,KAAwBnD,qBACjBiC,GAMXA,EAAkB5C,kBAAoB,SAAUC,GAE5C,OADA6D,KAAwB9D,kBAAkBC,GACnC2C,GAMXA,EAAkBpN,uBAAyB,SAAUC,GAEjD,OADAqO,KAAwBtO,uBAAuBC,GACxCmN,GAOXA,EAAkBrL,kBAAoB,WAAc,OAAOwM,KAAaxM,qBACxEqL,EAAkB7M,eAAiB,SAAUC,EAAUjG,GAEnD,OADA+T,KAAwB/N,eAAeC,EAAUjG,GAC1C6S,GAEXA,EAAkBzM,kBAAoB,SAAUnI,EAAW+B,GAEvD,OADA+T,KAAwB3N,kBAAkBnI,EAAW+B,GAC9C6S,GAEXA,EAAkBxM,kBAAoB,SAAU3B,EAAW1E,GAEvD,OADA+T,KAAwB1N,kBAAkB3B,EAAW1E,GAC9C6S,GAEXA,EAAkBvM,aAAe,SAAU3B,EAAM3E,GAE7C,OADA+T,KAAwBzN,aAAa3B,EAAM3E,GACpC6S,GAEXA,EAAkB1C,iBAAmB,SAAUlS,EAAWI,GAEtD,OADA0V,KAAwB3N,kBAAkBnI,EAAW,CAAEJ,IAAK,CAAEQ,SAAUA,EAAUD,YAAa,QACxFyU,GAQXA,EAAkB1L,mCAAqC,SAAUlJ,EAAWI,GAExE,OADA0V,KAAwB5M,mCAAmClJ,EAAWI,GAC/DwU,GAEXA,EAAkBtM,iBAAmB,SAAUC,EAAOC,GAElD,OADAsN,KAAwBxN,iBAAiBC,EAAOC,GACzCoM,GAEXA,EAAkBzC,OAAS,SAAU5J,EAAO6J,EAAeC,GACvD,OAAOyD,KAAwB3D,OAAO5J,EAAO6J,EAAeC,IAGhEuC,EAAkBzf,IAAM,SAAUoT,EAAO6J,EAAeC,GAGpD,YAFsB,IAAlBD,IAA4BA,EAAgBpe,EAAKse,SAASC,yBAChD,IAAVF,IAAoBA,EAAQre,EAAKwe,YAAYC,SAC1CqD,KAAwB3D,OAAO5J,EAAO6J,EAAeC,IAEhEuC,EAAkBlC,gBAAkB,SAAU1S,GAC1C,OAAO8V,KAAwBpD,gBAAgB1S,IAanD4U,EAAkB9c,UAAU8Z,oBAAsB,SAAU5J,EAAUvC,EAAUoM,GAC5E,GAAI1d,KAAKsR,UAAYtR,KAAK6T,SACtB,MAAM,IAAIhT,MAAM,gEAEpBb,KAAKsR,SAAWA,EAChBtR,KAAK6T,SAAWA,EACZ6J,IACA1d,KAAKshB,qBAAuB5D,IAMpC+C,EAAkB9c,UAAUia,qBAAuB,WAC/C5d,KAAKwe,qBACLxe,KAAKsR,SAAW,KAChBtR,KAAK6T,SAAW,KAChB7T,KAAKshB,qBAAuB,WAAc,MAAO,KAErDb,EAAkB9c,UAAU6a,mBAAqB,WAC7C3e,EAAKgiB,kBACL7hB,KAAKuhB,cAAgB,GACrBvhB,KAAKwhB,mBAAqB,GAC1BxhB,KAAKqd,UAAY,KACjBrd,KAAK8gB,iBAAmB,GACxB9gB,KAAK+gB,oBAAsB,GAC3B/gB,KAAKghB,oBAAsB,GAC3BhhB,KAAKihB,eAAiB,GACtBjhB,KAAKyhB,SAAU,EACfzhB,KAAK0hB,uBAAyB,GAC9B1hB,KAAK2gB,WAAa,KAClB3gB,KAAK4gB,eAAiB,KACtB5gB,KAAK6gB,iBAAmB,GACxB7gB,KAAKkhB,WAAa,GAClBlhB,KAAKmhB,cAAgB,GACrBnhB,KAAKohB,SAAW,GAChBphB,KAAKqhB,SAAW,GAChBrhB,KAAK0gB,eAAgB,EACrB1gB,KAAKud,gBAAgB3R,QAAQ,SAAU6T,GACnC,IACIA,EAAQ9a,UAEZ,MAAOmD,GACH+X,QAAQne,MAAM,oCAAqC,CAC/CmK,UAAW4T,EAAQ1c,kBACnB+c,WAAYhY,OAIxB9H,KAAKud,gBAAkB,IAE3BkD,EAAkB9c,UAAUka,kBAAoB,SAAUC,GACtD9d,KAAK8hB,uBAAuB,4BAA6B,0BACzD9hB,KAAK6gB,iBAAiBnX,KAAKoU,IAE/B2C,EAAkB9c,UAAU0P,uBAAyB,SAAUC,GAC3D,IAAIhD,EAAIC,EAAIgD,EAAIC,EAChBxT,KAAK8hB,uBAAuB,iCAAkC,6BAC1DxO,EAAU1B,YACTtB,EAAKtQ,KAAKkhB,YAAYxX,KAAKvB,MAAMmI,EAAItG,EAASsJ,EAAU1B,YAEzD0B,EAAU5B,eACTnB,EAAKvQ,KAAKmhB,eAAezX,KAAKvB,MAAMoI,EAAIvG,EAASsJ,EAAU5B,eAE5D4B,EAAU3B,UACT4B,EAAKvT,KAAKohB,UAAU1X,KAAKvB,MAAMoL,EAAIvJ,EAASsJ,EAAU3B,UAEvD2B,EAAUzB,UACT2B,EAAKxT,KAAKqhB,UAAU3X,KAAKvB,MAAMqL,EAAIxJ,EAASsJ,EAAUzB,UAEvDyB,EAAUoK,cACV1d,KAAKuhB,cAAc7X,KAAK4J,EAAUoK,eAG1C+C,EAAkB9c,UAAUyR,kBAAoB,WAC5C,IAAIpT,EAAQhC,KACZ,GAAIA,KAAK4gB,gBAAkB5gB,KAAK0gB,cAC5B,OAAOxc,QAAQC,QAAQ,MAE3B,IAAImS,EAAatW,KAAK+hB,2BACtB,OAAO/hB,KAAKqd,UAAUP,mCAAmCxG,GACpDpO,KAAK,SAAU8Z,GAChBhgB,EAAM4e,eAAiBoB,EAA4BrF,mBAG3D8D,EAAkB9c,UAAUse,cAAgB,WACxC,IAAIzJ,EAAKlI,EACT,IAAItQ,KAAK0gB,cAAT,CAGA,IAAK1gB,KAAK4gB,eACN,IACI,IAAItK,EAAatW,KAAK+hB,2BACtB/hB,KAAK4gB,eACD5gB,KAAKqd,UAAUX,kCAAkCpG,GAAYqG,gBAErE,MAAO7U,GACH,IAAIoa,EAAgBliB,KAAKqd,UAAUgD,sBAAsBvY,GACzD,MAAIoa,EACM,IAAIrhB,MAAM,uCAAyChB,EAAK2O,WAAW0T,GAAiB,2IAIpFpa,EAIlB,IACI,IAAK,IAAIyI,EAAK5G,EAAS3J,KAAKwhB,oBAAqBjO,EAAKhD,EAAGnN,QAASmQ,EAAGtL,KAAMsL,EAAKhD,EAAGnN,OAAQ,CACvF,IAAIoQ,EAAKD,EAAG3L,MAAOiE,EAAY2H,EAAG3H,UAC9BsW,EAAcniB,KAAKqd,UAAU+C,oBADyB5M,EAAG4O,YAE7DviB,EAAKwiB,uBAAuBxW,EAAWsW,IAG/C,MAAOlJ,GAAST,EAAM,CAAE9W,MAAOuX,GAC/B,QACI,IACQ1F,IAAOA,EAAGtL,OAASqI,EAAKC,EAAGtH,SAASqH,EAAG9G,KAAK+G,GAEpD,QAAU,GAAIiI,EAAK,MAAMA,EAAI9W,OAEjC,IAAII,EAAS,IAAIjC,EAAK4a,OAAO,CAAEC,sBAAsB,IAEjD4H,EAAiBziB,EAAKse,SAAS7X,OAAO,CACtCsL,UAFY,CAAC,CAAE6C,QAAS5U,EAAK4a,OAAQ7F,SAAU9S,IAG/CR,OAAQtB,KAAKsR,SAAS/M,SACtBuP,KAAM9T,KAAK4gB,eAAetK,WAAWxC,OAEzC9T,KAAK2gB,WAAa3gB,KAAK4gB,eAAeta,OAAOgc,GAG7CtiB,KAAK2gB,WAAWpc,SAASvD,IAAInB,EAAKsW,uBAAuBC,kBACzDpW,KAAK0gB,eAAgB,IAEzBD,EAAkB9c,UAAUoe,yBAA2B,WACnD,IAAI5I,EAAK7I,EACLtO,EAAQhC,KACR4R,EAAY5R,KAAKkhB,WAAWjX,OAAO,CAAC,CAAEwK,QAAS8N,GAAS3N,SAAU5U,QAClE0R,EAAe1H,EAAShK,KAAKmhB,cAAenhB,KAAKwhB,mBAAmBtC,IAAI,SAAUsD,GAAS,OAAOA,EAAMJ,cACxGK,EAAmB,GACnB3P,EAAwB9S,KAAK0hB,uBACjC,GAAI1hB,KAAKyhB,QAAS,CACd,IAAIjH,EAAiC,WASjC,OANkBjU,EAAW,CACzB1G,EAAKiR,SAAS,CACVc,UAAW5H,EAAS8I,GACpB4P,KAAK,KALb,SAASlI,OADuB,GAWpCiI,EAAiB/Y,KAAK8Q,GAE1B5I,EAAUlI,KAAK,CAAE+K,QAAS5U,EAAK8iB,gBAAiB/N,SAAU5U,KAAKyhB,QAAU,OAAS,OAClF,IAAI9P,EAAU,CAAC8Q,EAAkBziB,KAAK6T,SAAU7T,KAAKohB,UACjDvP,EAAU7R,KAAKqhB,SACflO,EAAmC,WAMnC,OAHoB5M,EAAW,CAC3B1G,EAAKiR,SAAS,CAAEc,UAAWA,EAAWF,aAAcA,EAAcC,QAASA,EAASE,QAASA,EAAS6Q,KAAK,KAH/G,SAASvP,OADyB,GAQlCyP,EAAkB5iB,KAAKsR,SAAS/M,SAASvD,IAAIuf,IACjDvgB,KAAKqd,UAAYuF,EAAgBC,sBAAsB7iB,KAAK6gB,kBAC5D,IACI,IAAK,IAAItQ,EAAK5G,EAASK,EAAS,CAAChK,KAAKshB,sBAAuBthB,KAAKuhB,gBAAiBhO,EAAKhD,EAAGnN,QAASmQ,EAAGtL,KAAMsL,EAAKhD,EAAGnN,OAEjHpD,KAAKqd,UAAU6C,iBADD3M,EAAG3L,OAIzB,MAAO2R,GAASJ,EAAM,CAAEzX,MAAO6X,GAC/B,QACI,IACQhG,IAAOA,EAAGtL,OAASqI,EAAKC,EAAGtH,SAASqH,EAAG9G,KAAK+G,GAEpD,QAAU,GAAI4I,EAAK,MAAMA,EAAIzX,OAMjC,OAJA1B,KAAK8gB,iBAAiBlV,QAAQ,SAAU4W,GAAS,OAAOxgB,EAAMqb,UAAUzJ,eAAe4O,EAAM,GAAIA,EAAM,MACvGxiB,KAAK+gB,oBAAoBnV,QAAQ,SAAU4W,GAAS,OAAOxgB,EAAMqb,UAAUrJ,kBAAkBwO,EAAM,GAAIA,EAAM,MAC7GxiB,KAAKghB,oBAAoBpV,QAAQ,SAAU4W,GAAS,OAAOxgB,EAAMqb,UAAUpJ,kBAAkBuO,EAAM,GAAIA,EAAM,MAC7GxiB,KAAKihB,eAAerV,QAAQ,SAAU4W,GAAS,OAAOxgB,EAAMqb,UAAUnJ,aAAasO,EAAM,GAAIA,EAAM,MAC5FrP,GAEXsN,EAAkB9c,UAAUme,uBAAyB,SAAUpC,EAAYC,GACvE,GAAI3f,KAAK0gB,cACL,MAAM,IAAI7f,MAAM,UAAY8e,EAAoB,qGACOD,EAAa,OAG5Ee,EAAkB9c,UAAUqa,OAAS,SAAU5J,EAAO6J,EAAeC,GAEjE,GADAle,KAAKiiB,gBACD7N,IAAUmO,GACV,OAAOviB,KAIX,IAAI8e,EAAY,GACZ9W,EAAShI,KAAK2gB,WAAWpc,SAASvD,IAAIoT,EAAO0K,EAAWZ,GAC5D,OAAOlW,IAAW8W,EAAY9e,KAAKqd,UAAU9Y,SAASvD,IAAIoT,EAAO6J,EAAeC,GAC5ElW,GAGRyY,EAAkB9c,UAAU3C,IAAM,SAAUoT,EAAO6J,EAAeC,GAG9D,YAFsB,IAAlBD,IAA4BA,EAAgBpe,EAAKse,SAASC,yBAChD,IAAVF,IAAoBA,EAAQre,EAAKwe,YAAYC,SAC1Cte,KAAKge,OAAO5J,EAAO6J,EAAeC,IAE7CuC,EAAkB9c,UAAUob,QAAU,SAAUC,EAAQ5e,EAAIC,GACxD,IAAI2B,EAAQhC,KACZA,KAAKiiB,gBACL,IAAIhD,EAASD,EAAOE,IAAI,SAAU1W,GAAK,OAAOxG,EAAMgc,OAAOxV,KAC3D,OAAOpI,EAAG+H,MAAM9H,EAAS4e,IAE7BwB,EAAkB9c,UAAUiQ,eAAiB,SAAUC,EAAUjG,GAC7D5N,KAAK8hB,uBAAuB,iBAAkB,4BAC9C9hB,KAAK8gB,iBAAiBpX,KAAK,CAACmK,EAAUjG,KAE1C6S,EAAkB9c,UAAUqQ,kBAAoB,SAAUnI,EAAW+B,GACjE5N,KAAK8hB,uBAAuB,oBAAqB,+BACjD9hB,KAAK+gB,oBAAoBrX,KAAK,CAACmC,EAAW+B,KAE9C6S,EAAkB9c,UAAUsQ,kBAAoB,SAAU3B,EAAW1E,GACjE5N,KAAK8hB,uBAAuB,oBAAqB,+BACjD9hB,KAAKghB,oBAAoBtX,KAAK,CAAC4I,EAAW1E,KAE9C6S,EAAkB9c,UAAUuQ,aAAe,SAAU3B,EAAM3E,GACvD5N,KAAK8hB,uBAAuB,eAAgB,0BAC5C9hB,KAAKihB,eAAevX,KAAK,CAAC6I,EAAM3E,KAEpC6S,EAAkB9c,UAAUwQ,iBAAmB,SAAUC,EAAOC,GAC5DrU,KAAK8iB,qBAAqB1O,EAAOC,IAErCoM,EAAkB9c,UAAUmf,qBAAuB,SAAU1O,EAAOC,EAAU0O,QACvD,IAAfA,IAAyBA,GAAa,GAC1C,IAAI/N,EAAM,KACW,iBAAVZ,IAAuBY,EAAMnV,EAAKgV,kBAAkBT,KAA8B,SAAnBY,EAAIF,YAEtE9U,KAAK0hB,uBAAuBhY,KAD5B2K,EAASG,WACwB,CAAEC,QAASL,EAAOI,WAAYH,EAASG,WAAYE,KAAML,EAASK,MAAQ,IAG1E,CAAED,QAASL,EAAOQ,SAAUP,EAASO,WAG9E,IACIhN,EADAsW,EAAQ,EAER7J,EAASG,YACT0J,GAAS,KACTtW,EAAQyM,EAASG,aAGjB0J,GAAS,IACTtW,EAAQyM,EAASO,UAErB,IAAIF,GAAQL,EAASK,MAAQ,IAAIwK,IAAI,SAAU8D,GAC3C,IACIC,EADAC,EAAW,EAkBf,OAhBIld,MAAMgJ,QAAQgU,GACdA,EAAIpX,QAAQ,SAAU4W,GACdA,aAAiB3iB,EAAKsjB,SACtBD,GAAY,EAEPV,aAAiB3iB,EAAKujB,SAC3BF,GAAY,EAGZD,EAAWT,IAKnBS,EAAWD,EAER,CAACE,EAAUD,KAEtBpjB,EAAKwjB,kBAAkB,CAAEjP,MAAOA,EAAO8J,MAAOA,EAAOxJ,KAAMA,EAAM9M,MAAOA,EAAO0b,mBAAoBP,KAEvGtC,EAAkB9c,UAAUoR,mCAAqC,SAAUlJ,EAAWI,GAClFjM,KAAK8hB,uBAAuB,qCAAsC,qBAClE,IAAIyB,EAAmC,WAMnC,OAHoBhd,EAAW,CAC3B1G,EAAK+Q,UAAU,CAAE4S,SAAU,QAASvX,SAAUA,EAAUyW,KAAK,KAHjE,SAASa,OADyB,GAQtCvjB,KAAKwhB,mBAAmB9X,KAAK,CAAEmC,UAAWA,EAAWuW,WAAYmB,KAErE9C,EAAkB9c,UAAU4a,gBAAkB,SAAU1S,GACpD,IAAI7J,EAAQhC,KACZA,KAAKiiB,gBACL,IAAI3C,EAAmBtf,KAAKqd,UAAU+C,oBAAoBvU,GAC1D,IAAKyT,EACD,MAAM,IAAIze,MAAM,+BAAiChB,EAAK2O,WAAW3C,GAAa,oDAGlF,IAAIwT,EAAWrf,KAAKge,OAAOlT,GAA0B,GAEjD/G,EAAa/D,KAAKge,OAAOpT,GAA4B,GACrD9I,EAASud,EAAW,KAAOrf,KAAKge,OAAOne,EAAK4a,OAAQ,MACpD0E,EAAwBnf,KAAKge,OAAOvT,GACpC2U,EAAW,OAASoB,KACxBrB,EAAsBzU,kBAAkB0U,GACxC,IAAIG,EAAgB,WAChB,IAAI1d,EAAeyd,EAAiBhZ,OAAOzG,EAAKse,SAASqB,KAAM,GAAI,IAAMJ,EAAUpd,EAAM2e,YACzF,OAAO,IAAI/e,EAAiBC,EAAcC,EAAQiC,IAElD0b,EAAW3d,EAA2BA,EAAOP,IAAIge,GAA7BA,IAExB,OADAvf,KAAKud,gBAAgB7T,KAAK+V,GACnBA,GAEJgB,EA1b2B,GAwclC8B,GAAU1iB,EAAK4jB,YAAcrG,GAAiBqD,GAQ9CmB,GAAa/hB,EAAK4jB,YAAc9F,GAAqBgE,GAEzD,SAASA,KACL,OAAO3B,GAAYA,IAAa,IAAIS,GA0BxC,SAASzC,GAAOgB,EAAQ5e,GACpB,IAAImc,EAAUqF,KACd,OAAI5C,EAAOvS,QAAQvC,IAAuB,EAE/B,WACH,IAAIlI,EAAQhC,KAGZ,OAAOuc,EAAQnH,oBAAoBlN,KAAK,WACpC,IAAIwb,EAAYnH,EAAQyB,OAAO9T,GAE/B,OADAqS,EAAQwC,QAAQC,EAAQ5e,EAAI4B,GACrB0hB,EAAUnY,WAMlB,WAAc,OAAOgR,EAAQwC,QAAQC,EAAQ5e,EAAIJ,OAMhE,IAAI2jB,GAAoC,WACpC,SAASA,EAAmBC,GACxB5jB,KAAK4jB,WAAaA,EAgBtB,OAdAD,EAAmBhgB,UAAUkgB,WAAa,WACtC,IAAIvQ,EAAYtT,KAAK4jB,aACjBtQ,GACAsO,KAAavO,uBAAuBC,IAG5CqQ,EAAmBhgB,UAAUqa,OAAS,SAAUgB,EAAQ5e,GACpD,IAAIT,EAAOK,KAEX,OAAO,WAEH,OADAL,EAAKkkB,aACE7F,GAAOgB,EAAQ5e,GAAIoJ,KAAKxJ,QAGhC2jB,EAlB4B,GAyCnCG,GAA+B,oBAAX5jB,OAAyBd,OAASc,OAEtD4jB,GAAUC,YACVD,GAAUC,WAAW,WACjBxB,GAAQ/D,qBACR/Y;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CRnG,EAAQ0kB,yCAA2C5G,GACnD9d,EAAQ2kB,yCAA2CtG,GACnDre,EAAQ4kB,yCAA2CzD,GACnDnhB,EAAQijB,QAAUA,GAClBjjB,EAAQsiB,WAAaA,GACrBtiB,EAAQ0e,OAASA,GACjB1e,EAAQqkB,mBAAqBA,GAC7BrkB,EAAQ6kB,WA7ER,SAASA,GAAW7Q,EAAWlT,GAC3B,OAAIA,EAEO,WACH,IAAImc,EAAUqF,KAId,OAHItO,GACAiJ,EAAQlJ,uBAAuBC,GAE5BlT,EAAG+H,MAAMnI,OAGjB,IAAI2jB,GAAmB,WAAc,OAAOrQ;;;;;;;QAmEvDhU,EAAQ8kB,mBAAqB7W,EAC7BjO,EAAQ+kB,MAz0FR,SAASA,GAAMjkB,GACX,IAAIyE,EAAwB,oBAATpE,KAAuBA,KAAO,KACjD,IAAKoE,EACD,OAAO,WACH,OAAOX,QAAQwD,OAAO,4IAI9B,IAAI4c,EAAYzf,GAASA,EAAMA,EAAMW,WAAW,cAChD,MAAyB,mBAAd8e,EACAA,EAAUlkB,GA9GzB,SAASmkB,EAAcnkB,GAGnB,OAAIH,EAAQukB,QAED,SAAUvc,GACRA,KAGDA,EAAO,cACFoC,KAAO,SAAUvC,GAAK,MAAMA,IAErC3H,EAAcC,EAAIJ,KAAMiI,EAAM,SAAUwc,GACpC,GAAmB,iBAARA,EACP,OAAOxc,EAAKoC,KAAK,IAAIxJ,MAAM4jB,IAG3Bxc,EAAKoC,KAAKoa,MASnB,WACH,IAAIziB,EAAQhC,KACZ,OAAO,IAAIkE,QAAQ,SAAU5D,EAAgBC,GACzCJ,EAAcC,EAAI4B,EAAO1B,EAAgBC,MAsF1CgkB,CAAcnkB,IA2zFzBd,EAAQsC,iBAAmBA,EAC3BtC,EAAQmG,mBAAqBA,EAC7BnG,EAAQolB,UAz8ER,SAASA,GAAUtkB,GACf,OAAImF,EACOA,EAAoBmf,UAAUtkB,GA9I7C,SAASukB,EAAkBvkB,GAEvB,OAAO,WAEH,IADA,IAAIwkB,EAAO,GACFC,EAAK,EAAGA,EAAKhe,UAAUC,OAAQ+d,IACpCD,EAAKC,GAAMhe,UAAUge,GAEzB,IAAI9jB,EAAgBD,EAAcG,gBAClC,GAAIiE,EACA,MAAM,IAAIrE,MAAM,uCAEpBqE,GAAmB,EACnB,IACI,IAAKH,EAAwB,CACzB,GAAIhE,EAAcM,wBAAyByD,EACvC,MAAM,IAAIjE,MAAM,uCAEpBkE,EAAyB,IAAID,EAEjC,IAAIV,OAAM,EACN0gB,EAAoB/jB,EAAcM,cACtCN,EAAcU,YAAYsD,GAC1B,IACIX,EAAMhE,EAAG+H,MAAMnI,KAAM4kB,GACrBxf,IAEJ,QACIrE,EAAcU,YAAYqjB,GAE9B,GAAI/f,EAAuBggB,sBAAsBje,OAAS,EACtD,MAAM,IAAIjG,MAAMkE,EAAuBggB,sBAAsBje,OAAS,0CAG1E,GAAI/B,EAAuBigB,cAAcle,OAAS,EAC9C,MAAM,IAAIjG,MAAMkE,EAAuBigB,cAAcle,OAAS,iCAElE,OAAO1C,EAEX,QACIc,GAAmB,EACnBF,MAyGG2f,CAAkBvkB,IAq8EjCd,EAAQ2lB,KAr7ER,SAASA,GAAKC,GAEV,YADe,IAAXA,IAAqBA,EAAS,GAC9B3f,EACOA,EAAoB0f,KAAKC,GArGxC,SAASC,EAAaD,QACH,IAAXA,IAAqBA,EAAS,GAClC/f,IAAwB8f,KAAKC,GAsGlBC,CAAaD,IAg7E5B5lB,EAAQ8lB,MAn6ER,SAASA,GAAMC,GACX,OAAI9f,EACOA,EAAoB6f,MAAMC,GAzGzC,SAASC,EAAcD,GACnB,OAAOlgB,IAAwBigB,MAAMC,GA2G1BC,CAAcD,IA+5E7B/lB,EAAQimB,qBAv5ER,SAASA,KACL,GAAIhgB,EACA,OAAOA,EAAoBggB,wBA9GnC,SAASC,IACUrgB,IACN4f,sBAAsBje,OAAS,EA+GpC0e,IAm5ERlmB,EAAQ+F,gBA34ER,SAASA,KACL,OAAIE,EACOA,EAAoBF,kBAGpBD,KAu4Ef9F,EAAQmL,sBAAwBA,EAChCnL,EAAQsL,2BAA6BA,EACrCtL,EAAQwL,yBAA2BA,EACnCxL,EAAQmmB,qCA3DmC,GA4D3CnmB,EAAQomB,iBAAmBzF,GAC3B3gB,EAAQqmB,wBAA0BpF,GAElC1a,OAAOuB,eAAe9H,EAAS,aAAc,CAAEsI,OAAO","sourcesContent":["/**\n * @license Angular v9.0.0-next.13+45.sha-e231073.with-local-changes\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/compiler')) :\n    typeof define === 'function' && define.amd ? define('@angular/core/testing', ['exports', '@angular/core', '@angular/compiler'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.core = global.ng.core || {}, global.ng.core.testing = {}), global.ng.core, global.ng.compiler));\n}(this, function (exports, core, compiler) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var _global = (typeof window === 'undefined' ? global : window);\n    /**\n     * Wraps a test function in an asynchronous test zone. The test will automatically\n     * complete when all asynchronous calls within this zone are done. Can be used\n     * to wrap an {@link inject} call.\n     *\n     * Example:\n     *\n     * ```\n     * it('...', async(inject([AClass], (object) => {\n     *   object.doSomething.then(() => {\n     *     expect(...);\n     *   })\n     * });\n     * ```\n     *\n     *\n     */\n    function asyncFallback(fn) {\n        // If we're running using the Jasmine test framework, adapt to call the 'done'\n        // function when asynchronous activity is finished.\n        if (_global.jasmine) {\n            // Not using an arrow function to preserve context passed from call site\n            return function (done) {\n                if (!done) {\n                    // if we run beforeEach in @angular/core/testing/testing_internal then we get no done\n                    // fake it here and assume sync.\n                    done = function () { };\n                    done.fail = function (e) { throw e; };\n                }\n                runInTestZone(fn, this, done, function (err) {\n                    if (typeof err === 'string') {\n                        return done.fail(new Error(err));\n                    }\n                    else {\n                        done.fail(err);\n                    }\n                });\n            };\n        }\n        // Otherwise, return a promise which will resolve when asynchronous activity\n        // is finished. This will be correctly consumed by the Mocha framework with\n        // it('...', async(myFn)); or can be used in a custom framework.\n        // Not using an arrow function to preserve context passed from call site\n        return function () {\n            var _this = this;\n            return new Promise(function (finishCallback, failCallback) {\n                runInTestZone(fn, _this, finishCallback, failCallback);\n            });\n        };\n    }\n    function runInTestZone(fn, context, finishCallback, failCallback) {\n        var currentZone = Zone.current;\n        var AsyncTestZoneSpec = Zone['AsyncTestZoneSpec'];\n        if (AsyncTestZoneSpec === undefined) {\n            throw new Error('AsyncTestZoneSpec is needed for the async() test helper but could not be found. ' +\n                'Please make sure that your environment includes zone.js/dist/async-test.js');\n        }\n        var ProxyZoneSpec = Zone['ProxyZoneSpec'];\n        if (ProxyZoneSpec === undefined) {\n            throw new Error('ProxyZoneSpec is needed for the async() test helper but could not be found. ' +\n                'Please make sure that your environment includes zone.js/dist/proxy.js');\n        }\n        var proxyZoneSpec = ProxyZoneSpec.get();\n        ProxyZoneSpec.assertPresent();\n        // We need to create the AsyncTestZoneSpec outside the ProxyZone.\n        // If we do it in ProxyZone then we will get to infinite recursion.\n        var proxyZone = Zone.current.getZoneWith('ProxyZoneSpec');\n        var previousDelegate = proxyZoneSpec.getDelegate();\n        proxyZone.parent.run(function () {\n            var testZoneSpec = new AsyncTestZoneSpec(function () {\n                // Need to restore the original zone.\n                currentZone.run(function () {\n                    if (proxyZoneSpec.getDelegate() == testZoneSpec) {\n                        // Only reset the zone spec if it's sill this one. Otherwise, assume it's OK.\n                        proxyZoneSpec.setDelegate(previousDelegate);\n                    }\n                    finishCallback();\n                });\n            }, function (error) {\n                // Need to restore the original zone.\n                currentZone.run(function () {\n                    if (proxyZoneSpec.getDelegate() == testZoneSpec) {\n                        // Only reset the zone spec if it's sill this one. Otherwise, assume it's OK.\n                        proxyZoneSpec.setDelegate(previousDelegate);\n                    }\n                    failCallback(error);\n                });\n            }, 'test');\n            proxyZoneSpec.setDelegate(testZoneSpec);\n        });\n        return Zone.current.runGuarded(fn, context);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Wraps a test function in an asynchronous test zone. The test will automatically\n     * complete when all asynchronous calls within this zone are done. Can be used\n     * to wrap an {@link inject} call.\n     *\n     * Example:\n     *\n     * ```\n     * it('...', async(inject([AClass], (object) => {\n     *   object.doSomething.then(() => {\n     *     expect(...);\n     *   })\n     * });\n     * ```\n     *\n     * @publicApi\n     */\n    function async(fn) {\n        var _Zone = typeof Zone !== 'undefined' ? Zone : null;\n        if (!_Zone) {\n            return function () {\n                return Promise.reject('Zone is needed for the async() test helper but could not be found. ' +\n                    'Please make sure that your environment includes zone.js/dist/zone.js');\n            };\n        }\n        var asyncTest = _Zone && _Zone[_Zone.__symbol__('asyncTest')];\n        if (typeof asyncTest === 'function') {\n            return asyncTest(fn);\n        }\n        // not using new version of zone.js\n        // TODO @JiaLiPassion, remove this after all library updated to\n        // newest version of zone.js(0.8.25)\n        return asyncFallback(fn);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Fixture for debugging and testing a component.\n     *\n     * @publicApi\n     */\n    var ComponentFixture = /** @class */ (function () {\n        function ComponentFixture(componentRef, ngZone, _autoDetect) {\n            var _this = this;\n            this.componentRef = componentRef;\n            this.ngZone = ngZone;\n            this._autoDetect = _autoDetect;\n            this._isStable = true;\n            this._isDestroyed = false;\n            this._resolve = null;\n            this._promise = null;\n            this._onUnstableSubscription = null;\n            this._onStableSubscription = null;\n            this._onMicrotaskEmptySubscription = null;\n            this._onErrorSubscription = null;\n            this.changeDetectorRef = componentRef.changeDetectorRef;\n            this.elementRef = componentRef.location;\n            this.debugElement = core.getDebugNode(this.elementRef.nativeElement);\n            this.componentInstance = componentRef.instance;\n            this.nativeElement = this.elementRef.nativeElement;\n            this.componentRef = componentRef;\n            this.ngZone = ngZone;\n            if (ngZone) {\n                // Create subscriptions outside the NgZone so that the callbacks run oustide\n                // of NgZone.\n                ngZone.runOutsideAngular(function () {\n                    _this._onUnstableSubscription =\n                        ngZone.onUnstable.subscribe({ next: function () { _this._isStable = false; } });\n                    _this._onMicrotaskEmptySubscription = ngZone.onMicrotaskEmpty.subscribe({\n                        next: function () {\n                            if (_this._autoDetect) {\n                                // Do a change detection run with checkNoChanges set to true to check\n                                // there are no changes on the second run.\n                                _this.detectChanges(true);\n                            }\n                        }\n                    });\n                    _this._onStableSubscription = ngZone.onStable.subscribe({\n                        next: function () {\n                            _this._isStable = true;\n                            // Check whether there is a pending whenStable() completer to resolve.\n                            if (_this._promise !== null) {\n                                // If so check whether there are no pending macrotasks before resolving.\n                                // Do this check in the next tick so that ngZone gets a chance to update the state of\n                                // pending macrotasks.\n                                scheduleMicroTask(function () {\n                                    if (!ngZone.hasPendingMacrotasks) {\n                                        if (_this._promise !== null) {\n                                            _this._resolve(true);\n                                            _this._resolve = null;\n                                            _this._promise = null;\n                                        }\n                                    }\n                                });\n                            }\n                        }\n                    });\n                    _this._onErrorSubscription =\n                        ngZone.onError.subscribe({ next: function (error) { throw error; } });\n                });\n            }\n        }\n        ComponentFixture.prototype._tick = function (checkNoChanges) {\n            this.changeDetectorRef.detectChanges();\n            if (checkNoChanges) {\n                this.checkNoChanges();\n            }\n        };\n        /**\n         * Trigger a change detection cycle for the component.\n         */\n        ComponentFixture.prototype.detectChanges = function (checkNoChanges) {\n            var _this = this;\n            if (checkNoChanges === void 0) { checkNoChanges = true; }\n            if (this.ngZone != null) {\n                // Run the change detection inside the NgZone so that any async tasks as part of the change\n                // detection are captured by the zone and can be waited for in isStable.\n                this.ngZone.run(function () { _this._tick(checkNoChanges); });\n            }\n            else {\n                // Running without zone. Just do the change detection.\n                this._tick(checkNoChanges);\n            }\n        };\n        /**\n         * Do a change detection run to make sure there were no changes.\n         */\n        ComponentFixture.prototype.checkNoChanges = function () { this.changeDetectorRef.checkNoChanges(); };\n        /**\n         * Set whether the fixture should autodetect changes.\n         *\n         * Also runs detectChanges once so that any existing change is detected.\n         */\n        ComponentFixture.prototype.autoDetectChanges = function (autoDetect) {\n            if (autoDetect === void 0) { autoDetect = true; }\n            if (this.ngZone == null) {\n                throw new Error('Cannot call autoDetectChanges when ComponentFixtureNoNgZone is set');\n            }\n            this._autoDetect = autoDetect;\n            this.detectChanges();\n        };\n        /**\n         * Return whether the fixture is currently stable or has async tasks that have not been completed\n         * yet.\n         */\n        ComponentFixture.prototype.isStable = function () { return this._isStable && !this.ngZone.hasPendingMacrotasks; };\n        /**\n         * Get a promise that resolves when the fixture is stable.\n         *\n         * This can be used to resume testing after events have triggered asynchronous activity or\n         * asynchronous change detection.\n         */\n        ComponentFixture.prototype.whenStable = function () {\n            var _this = this;\n            if (this.isStable()) {\n                return Promise.resolve(false);\n            }\n            else if (this._promise !== null) {\n                return this._promise;\n            }\n            else {\n                this._promise = new Promise(function (res) { _this._resolve = res; });\n                return this._promise;\n            }\n        };\n        ComponentFixture.prototype._getRenderer = function () {\n            if (this._renderer === undefined) {\n                this._renderer = this.componentRef.injector.get(core.RendererFactory2, null);\n            }\n            return this._renderer;\n        };\n        /**\n          * Get a promise that resolves when the ui state is stable following animations.\n          */\n        ComponentFixture.prototype.whenRenderingDone = function () {\n            var renderer = this._getRenderer();\n            if (renderer && renderer.whenRenderingDone) {\n                return renderer.whenRenderingDone();\n            }\n            return this.whenStable();\n        };\n        /**\n         * Trigger component destruction.\n         */\n        ComponentFixture.prototype.destroy = function () {\n            if (!this._isDestroyed) {\n                this.componentRef.destroy();\n                if (this._onUnstableSubscription != null) {\n                    this._onUnstableSubscription.unsubscribe();\n                    this._onUnstableSubscription = null;\n                }\n                if (this._onStableSubscription != null) {\n                    this._onStableSubscription.unsubscribe();\n                    this._onStableSubscription = null;\n                }\n                if (this._onMicrotaskEmptySubscription != null) {\n                    this._onMicrotaskEmptySubscription.unsubscribe();\n                    this._onMicrotaskEmptySubscription = null;\n                }\n                if (this._onErrorSubscription != null) {\n                    this._onErrorSubscription.unsubscribe();\n                    this._onErrorSubscription = null;\n                }\n                this._isDestroyed = true;\n            }\n        };\n        return ComponentFixture;\n    }());\n    function scheduleMicroTask(fn) {\n        Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * fakeAsync has been moved to zone.js\n     * this file is for fallback in case old version of zone.js is used\n     */\n    var _Zone = typeof Zone !== 'undefined' ? Zone : null;\n    var FakeAsyncTestZoneSpec = _Zone && _Zone['FakeAsyncTestZoneSpec'];\n    var ProxyZoneSpec = _Zone && _Zone['ProxyZoneSpec'];\n    var _fakeAsyncTestZoneSpec = null;\n    /**\n     * Clears out the shared fake async zone for a test.\n     * To be called in a global `beforeEach`.\n     *\n     * @publicApi\n     */\n    function resetFakeAsyncZoneFallback() {\n        _fakeAsyncTestZoneSpec = null;\n        // in node.js testing we may not have ProxyZoneSpec in which case there is nothing to reset.\n        ProxyZoneSpec && ProxyZoneSpec.assertPresent().resetDelegate();\n    }\n    var _inFakeAsyncCall = false;\n    /**\n     * Wraps a function to be executed in the fakeAsync zone:\n     * - microtasks are manually executed by calling `flushMicrotasks()`,\n     * - timers are synchronous, `tick()` simulates the asynchronous passage of time.\n     *\n     * If there are any pending timers at the end of the function, an exception will be thrown.\n     *\n     * Can be used to wrap inject() calls.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example core/testing/ts/fake_async.ts region='basic'}\n     *\n     * @param fn\n     * @returns The function wrapped to be executed in the fakeAsync zone\n     *\n     * @publicApi\n     */\n    function fakeAsyncFallback(fn) {\n        // Not using an arrow function to preserve context passed from call site\n        return function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            var proxyZoneSpec = ProxyZoneSpec.assertPresent();\n            if (_inFakeAsyncCall) {\n                throw new Error('fakeAsync() calls can not be nested');\n            }\n            _inFakeAsyncCall = true;\n            try {\n                if (!_fakeAsyncTestZoneSpec) {\n                    if (proxyZoneSpec.getDelegate() instanceof FakeAsyncTestZoneSpec) {\n                        throw new Error('fakeAsync() calls can not be nested');\n                    }\n                    _fakeAsyncTestZoneSpec = new FakeAsyncTestZoneSpec();\n                }\n                var res = void 0;\n                var lastProxyZoneSpec = proxyZoneSpec.getDelegate();\n                proxyZoneSpec.setDelegate(_fakeAsyncTestZoneSpec);\n                try {\n                    res = fn.apply(this, args);\n                    flushMicrotasksFallback();\n                }\n                finally {\n                    proxyZoneSpec.setDelegate(lastProxyZoneSpec);\n                }\n                if (_fakeAsyncTestZoneSpec.pendingPeriodicTimers.length > 0) {\n                    throw new Error(_fakeAsyncTestZoneSpec.pendingPeriodicTimers.length + \" \" +\n                        \"periodic timer(s) still in the queue.\");\n                }\n                if (_fakeAsyncTestZoneSpec.pendingTimers.length > 0) {\n                    throw new Error(_fakeAsyncTestZoneSpec.pendingTimers.length + \" timer(s) still in the queue.\");\n                }\n                return res;\n            }\n            finally {\n                _inFakeAsyncCall = false;\n                resetFakeAsyncZoneFallback();\n            }\n        };\n    }\n    function _getFakeAsyncZoneSpec() {\n        if (_fakeAsyncTestZoneSpec == null) {\n            throw new Error('The code should be running in the fakeAsync zone to call this function');\n        }\n        return _fakeAsyncTestZoneSpec;\n    }\n    /**\n     * Simulates the asynchronous passage of time for the timers in the fakeAsync zone.\n     *\n     * The microtasks queue is drained at the very start of this function and after any timer callback\n     * has been executed.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example core/testing/ts/fake_async.ts region='basic'}\n     *\n     * @publicApi\n     */\n    function tickFallback(millis) {\n        if (millis === void 0) { millis = 0; }\n        _getFakeAsyncZoneSpec().tick(millis);\n    }\n    /**\n     * Simulates the asynchronous passage of time for the timers in the fakeAsync zone by\n     * draining the macrotask queue until it is empty. The returned value is the milliseconds\n     * of time that would have been elapsed.\n     *\n     * @param maxTurns\n     * @returns The simulated time elapsed, in millis.\n     *\n     * @publicApi\n     */\n    function flushFallback(maxTurns) {\n        return _getFakeAsyncZoneSpec().flush(maxTurns);\n    }\n    /**\n     * Discard all remaining periodic tasks.\n     *\n     * @publicApi\n     */\n    function discardPeriodicTasksFallback() {\n        var zoneSpec = _getFakeAsyncZoneSpec();\n        zoneSpec.pendingPeriodicTimers.length = 0;\n    }\n    /**\n     * Flush any pending microtasks.\n     *\n     * @publicApi\n     */\n    function flushMicrotasksFallback() {\n        _getFakeAsyncZoneSpec().flushMicrotasks();\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var _Zone$1 = typeof Zone !== 'undefined' ? Zone : null;\n    var fakeAsyncTestModule = _Zone$1 && _Zone$1[_Zone$1.__symbol__('fakeAsyncTest')];\n    /**\n     * Clears out the shared fake async zone for a test.\n     * To be called in a global `beforeEach`.\n     *\n     * @publicApi\n     */\n    function resetFakeAsyncZone() {\n        if (fakeAsyncTestModule) {\n            return fakeAsyncTestModule.resetFakeAsyncZone();\n        }\n        else {\n            return resetFakeAsyncZoneFallback();\n        }\n    }\n    /**\n     * Wraps a function to be executed in the fakeAsync zone:\n     * - microtasks are manually executed by calling `flushMicrotasks()`,\n     * - timers are synchronous, `tick()` simulates the asynchronous passage of time.\n     *\n     * If there are any pending timers at the end of the function, an exception will be thrown.\n     *\n     * Can be used to wrap inject() calls.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example core/testing/ts/fake_async.ts region='basic'}\n     *\n     * @param fn\n     * @returns The function wrapped to be executed in the fakeAsync zone\n     *\n     * @publicApi\n     */\n    function fakeAsync(fn) {\n        if (fakeAsyncTestModule) {\n            return fakeAsyncTestModule.fakeAsync(fn);\n        }\n        else {\n            return fakeAsyncFallback(fn);\n        }\n    }\n    /**\n     * Simulates the asynchronous passage of time for the timers in the fakeAsync zone.\n     *\n     * The microtasks queue is drained at the very start of this function and after any timer callback\n     * has been executed.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example core/testing/ts/fake_async.ts region='basic'}\n     *\n     * @publicApi\n     */\n    function tick(millis) {\n        if (millis === void 0) { millis = 0; }\n        if (fakeAsyncTestModule) {\n            return fakeAsyncTestModule.tick(millis);\n        }\n        else {\n            return tickFallback(millis);\n        }\n    }\n    /**\n     * Simulates the asynchronous passage of time for the timers in the fakeAsync zone by\n     * draining the macrotask queue until it is empty. The returned value is the milliseconds\n     * of time that would have been elapsed.\n     *\n     * @param maxTurns\n     * @returns The simulated time elapsed, in millis.\n     *\n     * @publicApi\n     */\n    function flush(maxTurns) {\n        if (fakeAsyncTestModule) {\n            return fakeAsyncTestModule.flush(maxTurns);\n        }\n        else {\n            return flushFallback(maxTurns);\n        }\n    }\n    /**\n     * Discard all remaining periodic tasks.\n     *\n     * @publicApi\n     */\n    function discardPeriodicTasks() {\n        if (fakeAsyncTestModule) {\n            return fakeAsyncTestModule.discardPeriodicTasks();\n        }\n        else {\n            discardPeriodicTasksFallback();\n        }\n    }\n    /**\n     * Flush any pending microtasks.\n     *\n     * @publicApi\n     */\n    function flushMicrotasks() {\n        if (fakeAsyncTestModule) {\n            return fakeAsyncTestModule.flushMicrotasks();\n        }\n        else {\n            return flushMicrotasksFallback();\n        }\n    }\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\r\n\r\n    function __rest(s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                    t[p[i]] = s[p[i]];\r\n            }\r\n        return t;\r\n    }\r\n\r\n    function __decorate(decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    }\r\n\r\n    function __param(paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    }\r\n\r\n    function __metadata(metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    }\r\n\r\n    function __awaiter(thisArg, _arguments, P, generator) {\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    }\r\n\r\n    function __generator(thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    }\r\n\r\n    function __exportStar(m, exports) {\r\n        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n    }\r\n\r\n    function __values(o) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n        if (m) return m.call(o);\r\n        return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n    }\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\r\n\r\n    function __spread() {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    }\r\n\r\n    function __spreadArrays() {\r\n        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n        for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n                r[k] = a[j];\r\n        return r;\r\n    };\r\n\r\n    function __await(v) {\r\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n    }\r\n\r\n    function __asyncGenerator(thisArg, _arguments, generator) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n        return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n        function fulfill(value) { resume(\"next\", value); }\r\n        function reject(value) { resume(\"throw\", value); }\r\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n    }\r\n\r\n    function __asyncDelegator(o) {\r\n        var i, p;\r\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n    }\r\n\r\n    function __asyncValues(o) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var m = o[Symbol.asyncIterator], i;\r\n        return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n    }\r\n\r\n    function __makeTemplateObject(cooked, raw) {\r\n        if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n        return cooked;\r\n    };\r\n\r\n    function __importStar(mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n        result.default = mod;\r\n        return result;\r\n    }\r\n\r\n    function __importDefault(mod) {\r\n        return (mod && mod.__esModule) ? mod : { default: mod };\r\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Injectable completer that allows signaling completion of an asynchronous test. Used internally.\n     */\n    var AsyncTestCompleter = /** @class */ (function () {\n        function AsyncTestCompleter() {\n            var _this = this;\n            this._promise = new Promise(function (res, rej) {\n                _this._resolve = res;\n                _this._reject = rej;\n            });\n        }\n        AsyncTestCompleter.prototype.done = function (value) { this._resolve(value); };\n        AsyncTestCompleter.prototype.fail = function (error, stackTrace) { this._reject(error); };\n        Object.defineProperty(AsyncTestCompleter.prototype, \"promise\", {\n            get: function () { return this._promise; },\n            enumerable: true,\n            configurable: true\n        });\n        return AsyncTestCompleter;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * An abstract class for inserting the root test component element in a platform independent way.\n     *\n     * @publicApi\n     */\n    var TestComponentRenderer = /** @class */ (function () {\n        function TestComponentRenderer() {\n        }\n        TestComponentRenderer.prototype.insertRootElement = function (rootElementId) { };\n        return TestComponentRenderer;\n    }());\n    /**\n     * @publicApi\n     */\n    var ComponentFixtureAutoDetect = new core.InjectionToken('ComponentFixtureAutoDetect');\n    /**\n     * @publicApi\n     */\n    var ComponentFixtureNoNgZone = new core.InjectionToken('ComponentFixtureNoNgZone');\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function stringify(token) {\n        if (typeof token === 'string') {\n            return token;\n        }\n        if (Array.isArray(token)) {\n            return '[' + token.map(stringify).join(', ') + ']';\n        }\n        if (token == null) {\n            return '' + token;\n        }\n        if (token.overriddenName) {\n            return \"\" + token.overriddenName;\n        }\n        if (token.name) {\n            return \"\" + token.name;\n        }\n        var res = token.toString();\n        if (res == null) {\n            return '' + res;\n        }\n        var newLineIndex = res.indexOf('\\n');\n        return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Map of module-id to the corresponding NgModule.\n     * - In pre Ivy we track NgModuleFactory,\n     * - In post Ivy we track the NgModuleType\n     */\n    var modules = new Map();\n    /**\n     * Registers a loaded module. Should only be called from generated NgModuleFactory code.\n     * @publicApi\n     */\n    function registerModuleFactory(id, factory) {\n        var existing = modules.get(id);\n        assertSameOrNotExisting(id, existing && existing.moduleType, factory.moduleType);\n        modules.set(id, factory);\n    }\n    function assertSameOrNotExisting(id, type, incoming) {\n        if (type && type !== incoming) {\n            throw new Error(\"Duplicate module registered for \" + id + \" - \" + stringify(type) + \" vs \" + stringify(type.name));\n        }\n    }\n    function registerNgModuleType(ngModuleType) {\n        if (ngModuleType.ɵmod.id !== null) {\n            var id = ngModuleType.ɵmod.id;\n            var existing = modules.get(id);\n            assertSameOrNotExisting(id, existing, ngModuleType);\n            modules.set(id, ngModuleType);\n        }\n        var imports = ngModuleType.ɵmod.imports;\n        if (imports instanceof Function) {\n            imports = imports();\n        }\n        if (imports) {\n            imports.forEach(function (i) { return registerNgModuleType(i); });\n        }\n    }\n    function clearRegisteredModuleState() {\n        modules.clear();\n    }\n    function getRegisteredModulesState() {\n        return new Map(modules);\n    }\n    function restoreRegisteredModulesState(moduleMap) {\n        modules = new Map(moduleMap);\n    }\n    function getRegisteredNgModuleType(id) {\n        return modules.get(id);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Used to resolve resource URLs on `@Component` when used with JIT compilation.\n     *\n     * Example:\n     * ```\n     * @Component({\n     *   selector: 'my-comp',\n     *   templateUrl: 'my-comp.html', // This requires asynchronous resolution\n     * })\n     * class MyComponent{\n     * }\n     *\n     * // Calling `renderComponent` will fail because `renderComponent` is a synchronous process\n     * // and `MyComponent`'s `@Component.templateUrl` needs to be resolved asynchronously.\n     *\n     * // Calling `resolveComponentResources()` will resolve `@Component.templateUrl` into\n     * // `@Component.template`, which allows `renderComponent` to proceed in a synchronous manner.\n     *\n     * // Use browser's `fetch()` function as the default resource resolution strategy.\n     * resolveComponentResources(fetch).then(() => {\n     *   // After resolution all URLs have been converted into `template` strings.\n     *   renderComponent(MyComponent);\n     * });\n     *\n     * ```\n     *\n     * NOTE: In AOT the resolution happens during compilation, and so there should be no need\n     * to call this method outside JIT mode.\n     *\n     * @param resourceResolver a function which is responsible for returning a `Promise` to the\n     * contents of the resolved URL. Browser's `fetch()` method is a good default implementation.\n     */\n    function resolveComponentResources(resourceResolver) {\n        // Store all promises which are fetching the resources.\n        var componentResolved = [];\n        // Cache so that we don't fetch the same resource more than once.\n        var urlMap = new Map();\n        function cachedResourceResolve(url) {\n            var promise = urlMap.get(url);\n            if (!promise) {\n                var resp = resourceResolver(url);\n                urlMap.set(url, promise = resp.then(unwrapResponse));\n            }\n            return promise;\n        }\n        componentResourceResolutionQueue.forEach(function (component, type) {\n            var promises = [];\n            if (component.templateUrl) {\n                promises.push(cachedResourceResolve(component.templateUrl).then(function (template) {\n                    component.template = template;\n                }));\n            }\n            var styleUrls = component.styleUrls;\n            var styles = component.styles || (component.styles = []);\n            var styleOffset = component.styles.length;\n            styleUrls && styleUrls.forEach(function (styleUrl, index) {\n                styles.push(''); // pre-allocate array.\n                promises.push(cachedResourceResolve(styleUrl).then(function (style) {\n                    styles[styleOffset + index] = style;\n                    styleUrls.splice(styleUrls.indexOf(styleUrl), 1);\n                    if (styleUrls.length == 0) {\n                        component.styleUrls = undefined;\n                    }\n                }));\n            });\n            var fullyResolved = Promise.all(promises).then(function () { return componentDefResolved(type); });\n            componentResolved.push(fullyResolved);\n        });\n        clearResolutionOfComponentResourcesQueue();\n        return Promise.all(componentResolved).then(function () { return undefined; });\n    }\n    var componentResourceResolutionQueue = new Map();\n    // Track when existing ɵcmp for a Type is waiting on resources.\n    var componentDefPendingResolution = new Set();\n    function maybeQueueResolutionOfComponentResources(type, metadata) {\n        if (componentNeedsResolution(metadata)) {\n            componentResourceResolutionQueue.set(type, metadata);\n            componentDefPendingResolution.add(type);\n        }\n    }\n    function isComponentDefPendingResolution(type) {\n        return componentDefPendingResolution.has(type);\n    }\n    function componentNeedsResolution(component) {\n        return !!((component.templateUrl && !component.hasOwnProperty('template')) ||\n            component.styleUrls && component.styleUrls.length);\n    }\n    function clearResolutionOfComponentResourcesQueue() {\n        var old = componentResourceResolutionQueue;\n        componentResourceResolutionQueue = new Map();\n        return old;\n    }\n    function restoreComponentResolutionQueue(queue) {\n        componentDefPendingResolution.clear();\n        queue.forEach(function (_, type) { return componentDefPendingResolution.add(type); });\n        componentResourceResolutionQueue = queue;\n    }\n    function isComponentResourceResolutionQueueEmpty() {\n        return componentResourceResolutionQueue.size === 0;\n    }\n    function unwrapResponse(response) {\n        return typeof response == 'string' ? response : response.text();\n    }\n    function componentDefResolved(type) {\n        componentDefPendingResolution.delete(type);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var _nextReferenceId = 0;\n    var MetadataOverrider = /** @class */ (function () {\n        function MetadataOverrider() {\n            this._references = new Map();\n        }\n        /**\n         * Creates a new instance for the given metadata class\n         * based on an old instance and overrides.\n         */\n        MetadataOverrider.prototype.overrideMetadata = function (metadataClass, oldMetadata, override) {\n            var props = {};\n            if (oldMetadata) {\n                _valueProps(oldMetadata).forEach(function (prop) { return props[prop] = oldMetadata[prop]; });\n            }\n            if (override.set) {\n                if (override.remove || override.add) {\n                    throw new Error(\"Cannot set and add/remove \" + core.ɵstringify(metadataClass) + \" at the same time!\");\n                }\n                setMetadata(props, override.set);\n            }\n            if (override.remove) {\n                removeMetadata(props, override.remove, this._references);\n            }\n            if (override.add) {\n                addMetadata(props, override.add);\n            }\n            return new metadataClass(props);\n        };\n        return MetadataOverrider;\n    }());\n    function removeMetadata(metadata, remove, references) {\n        var removeObjects = new Set();\n        var _loop_1 = function (prop) {\n            var removeValue = remove[prop];\n            if (Array.isArray(removeValue)) {\n                removeValue.forEach(function (value) { removeObjects.add(_propHashKey(prop, value, references)); });\n            }\n            else {\n                removeObjects.add(_propHashKey(prop, removeValue, references));\n            }\n        };\n        for (var prop in remove) {\n            _loop_1(prop);\n        }\n        var _loop_2 = function (prop) {\n            var propValue = metadata[prop];\n            if (Array.isArray(propValue)) {\n                metadata[prop] = propValue.filter(function (value) { return !removeObjects.has(_propHashKey(prop, value, references)); });\n            }\n            else {\n                if (removeObjects.has(_propHashKey(prop, propValue, references))) {\n                    metadata[prop] = undefined;\n                }\n            }\n        };\n        for (var prop in metadata) {\n            _loop_2(prop);\n        }\n    }\n    function addMetadata(metadata, add) {\n        for (var prop in add) {\n            var addValue = add[prop];\n            var propValue = metadata[prop];\n            if (propValue != null && Array.isArray(propValue)) {\n                metadata[prop] = propValue.concat(addValue);\n            }\n            else {\n                metadata[prop] = addValue;\n            }\n        }\n    }\n    function setMetadata(metadata, set) {\n        for (var prop in set) {\n            metadata[prop] = set[prop];\n        }\n    }\n    function _propHashKey(propName, propValue, references) {\n        var replacer = function (key, value) {\n            if (typeof value === 'function') {\n                value = _serializeReference(value, references);\n            }\n            return value;\n        };\n        return propName + \":\" + JSON.stringify(propValue, replacer);\n    }\n    function _serializeReference(ref, references) {\n        var id = references.get(ref);\n        if (!id) {\n            id = \"\" + core.ɵstringify(ref) + _nextReferenceId++;\n            references.set(ref, id);\n        }\n        return id;\n    }\n    function _valueProps(obj) {\n        var props = [];\n        // regular public props\n        Object.keys(obj).forEach(function (prop) {\n            if (!prop.startsWith('_')) {\n                props.push(prop);\n            }\n        });\n        // getters\n        var proto = obj;\n        while (proto = Object.getPrototypeOf(proto)) {\n            Object.keys(proto).forEach(function (protoProp) {\n                var desc = Object.getOwnPropertyDescriptor(proto, protoProp);\n                if (!protoProp.startsWith('_') && desc && 'get' in desc) {\n                    props.push(protoProp);\n                }\n            });\n        }\n        return props;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var reflection = new core.ɵReflectionCapabilities();\n    /**\n     * Allows to override ivy metadata for tests (via the `TestBed`).\n     */\n    var OverrideResolver = /** @class */ (function () {\n        function OverrideResolver() {\n            this.overrides = new Map();\n            this.resolved = new Map();\n        }\n        OverrideResolver.prototype.addOverride = function (type, override) {\n            var overrides = this.overrides.get(type) || [];\n            overrides.push(override);\n            this.overrides.set(type, overrides);\n            this.resolved.delete(type);\n        };\n        OverrideResolver.prototype.setOverrides = function (overrides) {\n            var _this = this;\n            this.overrides.clear();\n            overrides.forEach(function (_a) {\n                var _b = __read(_a, 2), type = _b[0], override = _b[1];\n                _this.addOverride(type, override);\n            });\n        };\n        OverrideResolver.prototype.getAnnotation = function (type) {\n            var annotations = reflection.annotations(type);\n            // Try to find the nearest known Type annotation and make sure that this annotation is an\n            // instance of the type we are looking for, so we can use it for resolution. Note: there might\n            // be multiple known annotations found due to the fact that Components can extend Directives (so\n            // both Directive and Component annotations would be present), so we always check if the known\n            // annotation has the right type.\n            for (var i = annotations.length - 1; i >= 0; i--) {\n                var annotation = annotations[i];\n                var isKnownType = annotation instanceof core.Directive || annotation instanceof core.Component ||\n                    annotation instanceof core.Pipe || annotation instanceof core.NgModule;\n                if (isKnownType) {\n                    return annotation instanceof this.type ? annotation : null;\n                }\n            }\n            return null;\n        };\n        OverrideResolver.prototype.resolve = function (type) {\n            var _this = this;\n            var resolved = this.resolved.get(type) || null;\n            if (!resolved) {\n                resolved = this.getAnnotation(type);\n                if (resolved) {\n                    var overrides = this.overrides.get(type);\n                    if (overrides) {\n                        var overrider_1 = new MetadataOverrider();\n                        overrides.forEach(function (override) {\n                            resolved = overrider_1.overrideMetadata(_this.type, resolved, override);\n                        });\n                    }\n                }\n                this.resolved.set(type, resolved);\n            }\n            return resolved;\n        };\n        return OverrideResolver;\n    }());\n    var DirectiveResolver = /** @class */ (function (_super) {\n        __extends(DirectiveResolver, _super);\n        function DirectiveResolver() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        Object.defineProperty(DirectiveResolver.prototype, \"type\", {\n            get: function () { return core.Directive; },\n            enumerable: true,\n            configurable: true\n        });\n        return DirectiveResolver;\n    }(OverrideResolver));\n    var ComponentResolver = /** @class */ (function (_super) {\n        __extends(ComponentResolver, _super);\n        function ComponentResolver() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        Object.defineProperty(ComponentResolver.prototype, \"type\", {\n            get: function () { return core.Component; },\n            enumerable: true,\n            configurable: true\n        });\n        return ComponentResolver;\n    }(OverrideResolver));\n    var PipeResolver = /** @class */ (function (_super) {\n        __extends(PipeResolver, _super);\n        function PipeResolver() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        Object.defineProperty(PipeResolver.prototype, \"type\", {\n            get: function () { return core.Pipe; },\n            enumerable: true,\n            configurable: true\n        });\n        return PipeResolver;\n    }(OverrideResolver));\n    var NgModuleResolver = /** @class */ (function (_super) {\n        __extends(NgModuleResolver, _super);\n        function NgModuleResolver() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        Object.defineProperty(NgModuleResolver.prototype, \"type\", {\n            get: function () { return core.NgModule; },\n            enumerable: true,\n            configurable: true\n        });\n        return NgModuleResolver;\n    }(OverrideResolver));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var TestingModuleOverride;\n    (function (TestingModuleOverride) {\n        TestingModuleOverride[TestingModuleOverride[\"DECLARATION\"] = 0] = \"DECLARATION\";\n        TestingModuleOverride[TestingModuleOverride[\"OVERRIDE_TEMPLATE\"] = 1] = \"OVERRIDE_TEMPLATE\";\n    })(TestingModuleOverride || (TestingModuleOverride = {}));\n    function isTestingModuleOverride(value) {\n        return value === TestingModuleOverride.DECLARATION ||\n            value === TestingModuleOverride.OVERRIDE_TEMPLATE;\n    }\n    var R3TestBedCompiler = /** @class */ (function () {\n        function R3TestBedCompiler(platform, additionalModuleTypes) {\n            this.platform = platform;\n            this.additionalModuleTypes = additionalModuleTypes;\n            this.originalComponentResolutionQueue = null;\n            this.originalRegisteredModules = null;\n            // Testing module configuration\n            this.declarations = [];\n            this.imports = [];\n            this.providers = [];\n            this.schemas = [];\n            // Queues of components/directives/pipes that should be recompiled.\n            this.pendingComponents = new Set();\n            this.pendingDirectives = new Set();\n            this.pendingPipes = new Set();\n            // Keep track of all components and directives, so we can patch Providers onto defs later.\n            this.seenComponents = new Set();\n            this.seenDirectives = new Set();\n            // Store resolved styles for Components that have template overrides present and `styleUrls`\n            // defined at the same time.\n            this.existingComponentStyles = new Map();\n            this.resolvers = initResolvers();\n            this.componentToModuleScope = new Map();\n            // Map that keeps initial version of component/directive/pipe defs in case\n            // we compile a Type again, thus overriding respective static fields. This is\n            // required to make sure we restore defs to their initial states between test runs\n            // TODO: we should support the case with multiple defs on a type\n            this.initialNgDefs = new Map();\n            // Array that keeps cleanup operations for initial versions of component/directive/pipe/module\n            // defs in case TestBed makes changes to the originals.\n            this.defCleanupOps = [];\n            this._injector = null;\n            this.compilerProviders = null;\n            this.providerOverrides = [];\n            this.rootProviderOverrides = [];\n            this.providerOverridesByToken = new Map();\n            this.moduleProvidersOverridden = new Set();\n            this.testModuleRef = null;\n            var DynamicTestModule = /** @class */ (function () {\n                function DynamicTestModule() {\n                }\n                return DynamicTestModule;\n            }());\n            this.testModuleType = DynamicTestModule;\n        }\n        R3TestBedCompiler.prototype.setCompilerProviders = function (providers) {\n            this.compilerProviders = providers;\n            this._injector = null;\n        };\n        R3TestBedCompiler.prototype.configureTestingModule = function (moduleDef) {\n            var _a, _b, _c, _d;\n            // Enqueue any compilation tasks for the directly declared component.\n            if (moduleDef.declarations !== undefined) {\n                this.queueTypeArray(moduleDef.declarations, TestingModuleOverride.DECLARATION);\n                (_a = this.declarations).push.apply(_a, __spread(moduleDef.declarations));\n            }\n            // Enqueue any compilation tasks for imported modules.\n            if (moduleDef.imports !== undefined) {\n                this.queueTypesFromModulesArray(moduleDef.imports);\n                (_b = this.imports).push.apply(_b, __spread(moduleDef.imports));\n            }\n            if (moduleDef.providers !== undefined) {\n                (_c = this.providers).push.apply(_c, __spread(moduleDef.providers));\n            }\n            if (moduleDef.schemas !== undefined) {\n                (_d = this.schemas).push.apply(_d, __spread(moduleDef.schemas));\n            }\n        };\n        R3TestBedCompiler.prototype.overrideModule = function (ngModule, override) {\n            // Compile the module right away.\n            this.resolvers.module.addOverride(ngModule, override);\n            var metadata = this.resolvers.module.resolve(ngModule);\n            if (metadata === null) {\n                throw new Error(ngModule.name + \" is not an @NgModule or is missing metadata\");\n            }\n            this.recompileNgModule(ngModule);\n            // At this point, the module has a valid module def (ɵmod), but the override may have introduced\n            // new declarations or imported modules. Ingest any possible new types and add them to the\n            // current queue.\n            this.queueTypesFromModulesArray([ngModule]);\n        };\n        R3TestBedCompiler.prototype.overrideComponent = function (component, override) {\n            this.resolvers.component.addOverride(component, override);\n            this.pendingComponents.add(component);\n        };\n        R3TestBedCompiler.prototype.overrideDirective = function (directive, override) {\n            this.resolvers.directive.addOverride(directive, override);\n            this.pendingDirectives.add(directive);\n        };\n        R3TestBedCompiler.prototype.overridePipe = function (pipe, override) {\n            this.resolvers.pipe.addOverride(pipe, override);\n            this.pendingPipes.add(pipe);\n        };\n        R3TestBedCompiler.prototype.overrideProvider = function (token, provider) {\n            var providerDef = provider.useFactory ?\n                {\n                    provide: token,\n                    useFactory: provider.useFactory,\n                    deps: provider.deps || [],\n                    multi: provider.multi,\n                } :\n                { provide: token, useValue: provider.useValue, multi: provider.multi };\n            var injectableDef;\n            var isRoot = (typeof token !== 'string' && (injectableDef = core.ɵgetInjectableDef(token)) &&\n                injectableDef.providedIn === 'root');\n            var overridesBucket = isRoot ? this.rootProviderOverrides : this.providerOverrides;\n            overridesBucket.push(providerDef);\n            // Keep overrides grouped by token as well for fast lookups using token\n            this.providerOverridesByToken.set(token, providerDef);\n        };\n        R3TestBedCompiler.prototype.overrideTemplateUsingTestingModule = function (type, template) {\n            var _this = this;\n            var def = type[core.ɵNG_COMP_DEF];\n            var hasStyleUrls = function () {\n                var metadata = _this.resolvers.component.resolve(type);\n                return !!metadata.styleUrls && metadata.styleUrls.length > 0;\n            };\n            var overrideStyleUrls = !!def && !isComponentDefPendingResolution(type) && hasStyleUrls();\n            // In Ivy, compiling a component does not require knowing the module providing the\n            // component's scope, so overrideTemplateUsingTestingModule can be implemented purely via\n            // overrideComponent. Important: overriding template requires full Component re-compilation,\n            // which may fail in case styleUrls are also present (thus Component is considered as required\n            // resolution). In order to avoid this, we preemptively set styleUrls to an empty array,\n            // preserve current styles available on Component def and restore styles back once compilation\n            // is complete.\n            var override = overrideStyleUrls ? { template: template, styles: [], styleUrls: [] } : { template: template };\n            this.overrideComponent(type, { set: override });\n            if (overrideStyleUrls && def.styles && def.styles.length > 0) {\n                this.existingComponentStyles.set(type, def.styles);\n            }\n            // Set the component's scope to be the testing module.\n            this.componentToModuleScope.set(type, TestingModuleOverride.OVERRIDE_TEMPLATE);\n        };\n        R3TestBedCompiler.prototype.compileComponents = function () {\n            return __awaiter(this, void 0, void 0, function () {\n                var needsAsyncResources, resourceLoader_1, resolver;\n                var _this = this;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            this.clearComponentResolutionQueue();\n                            needsAsyncResources = this.compileTypesSync();\n                            if (!needsAsyncResources) return [3 /*break*/, 2];\n                            resolver = function (url) {\n                                if (!resourceLoader_1) {\n                                    resourceLoader_1 = _this.injector.get(compiler.ResourceLoader);\n                                }\n                                return Promise.resolve(resourceLoader_1.get(url));\n                            };\n                            return [4 /*yield*/, resolveComponentResources(resolver)];\n                        case 1:\n                            _a.sent();\n                            _a.label = 2;\n                        case 2: return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        R3TestBedCompiler.prototype.finalize = function () {\n            // One last compile\n            this.compileTypesSync();\n            // Create the testing module itself.\n            this.compileTestModule();\n            this.applyTransitiveScopes();\n            this.applyProviderOverrides();\n            // Patch previously stored `styles` Component values (taken from ɵcmp), in case these\n            // Components have `styleUrls` fields defined and template override was requested.\n            this.patchComponentsWithExistingStyles();\n            // Clear the componentToModuleScope map, so that future compilations don't reset the scope of\n            // every component.\n            this.componentToModuleScope.clear();\n            var parentInjector = this.platform.injector;\n            this.testModuleRef = new core.ɵRender3NgModuleRef(this.testModuleType, parentInjector);\n            // Set the locale ID, it can be overridden for the tests\n            var localeId = this.testModuleRef.injector.get(core.LOCALE_ID, core.ɵDEFAULT_LOCALE_ID);\n            core.ɵsetLocaleId(localeId);\n            // ApplicationInitStatus.runInitializers() is marked @internal to core.\n            // Cast it to any before accessing it.\n            this.testModuleRef.injector.get(core.ApplicationInitStatus).runInitializers();\n            return this.testModuleRef;\n        };\n        /**\n         * @internal\n         */\n        R3TestBedCompiler.prototype._compileNgModuleSync = function (moduleType) {\n            this.queueTypesFromModulesArray([moduleType]);\n            this.compileTypesSync();\n            this.applyProviderOverrides();\n            this.applyProviderOverridesToModule(moduleType);\n            this.applyTransitiveScopes();\n        };\n        /**\n         * @internal\n         */\n        R3TestBedCompiler.prototype._compileNgModuleAsync = function (moduleType) {\n            return __awaiter(this, void 0, void 0, function () {\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            if (this.originalRegisteredModules === null) {\n                                this.originalRegisteredModules = getRegisteredModulesState();\n                            }\n                            this.queueTypesFromModulesArray([moduleType]);\n                            return [4 /*yield*/, this.compileComponents()];\n                        case 1:\n                            _a.sent();\n                            this.applyProviderOverrides();\n                            this.applyProviderOverridesToModule(moduleType);\n                            this.applyTransitiveScopes();\n                            return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        /**\n         * @internal\n         */\n        R3TestBedCompiler.prototype._getModuleResolver = function () { return this.resolvers.module; };\n        /**\n         * @internal\n         */\n        R3TestBedCompiler.prototype._getComponentFactories = function (moduleType) {\n            var _this = this;\n            return maybeUnwrapFn(moduleType.ɵmod.declarations).reduce(function (factories, declaration) {\n                var componentDef = declaration.ɵcmp;\n                componentDef && factories.push(new core.ɵRender3ComponentFactory(componentDef, _this.testModuleRef));\n                return factories;\n            }, []);\n        };\n        R3TestBedCompiler.prototype.compileTypesSync = function () {\n            var _this = this;\n            // Compile all queued components, directives, pipes.\n            var needsAsyncResources = false;\n            this.pendingComponents.forEach(function (declaration) {\n                needsAsyncResources = needsAsyncResources || isComponentDefPendingResolution(declaration);\n                var metadata = _this.resolvers.component.resolve(declaration);\n                _this.maybeStoreNgDef(core.ɵNG_COMP_DEF, declaration);\n                core.ɵcompileComponent(declaration, metadata);\n            });\n            this.pendingComponents.clear();\n            this.pendingDirectives.forEach(function (declaration) {\n                var metadata = _this.resolvers.directive.resolve(declaration);\n                _this.maybeStoreNgDef(core.ɵNG_DIR_DEF, declaration);\n                core.ɵcompileDirective(declaration, metadata);\n            });\n            this.pendingDirectives.clear();\n            this.pendingPipes.forEach(function (declaration) {\n                var metadata = _this.resolvers.pipe.resolve(declaration);\n                _this.maybeStoreNgDef(core.ɵNG_PIPE_DEF, declaration);\n                core.ɵcompilePipe(declaration, metadata);\n            });\n            this.pendingPipes.clear();\n            return needsAsyncResources;\n        };\n        R3TestBedCompiler.prototype.applyTransitiveScopes = function () {\n            var _this = this;\n            var moduleToScope = new Map();\n            var getScopeOfModule = function (moduleType) {\n                if (!moduleToScope.has(moduleType)) {\n                    var realType = isTestingModuleOverride(moduleType) ? _this.testModuleType : moduleType;\n                    moduleToScope.set(moduleType, core.ɵtransitiveScopesFor(realType));\n                }\n                return moduleToScope.get(moduleType);\n            };\n            this.componentToModuleScope.forEach(function (moduleType, componentType) {\n                var moduleScope = getScopeOfModule(moduleType);\n                _this.storeFieldOfDefOnType(componentType, core.ɵNG_COMP_DEF, 'directiveDefs');\n                _this.storeFieldOfDefOnType(componentType, core.ɵNG_COMP_DEF, 'pipeDefs');\n                core.ɵpatchComponentDefWithScope(componentType.ɵcmp, moduleScope);\n            });\n            this.componentToModuleScope.clear();\n        };\n        R3TestBedCompiler.prototype.applyProviderOverrides = function () {\n            var _this = this;\n            var maybeApplyOverrides = function (field) { return function (type) {\n                var resolver = field === core.ɵNG_COMP_DEF ? _this.resolvers.component : _this.resolvers.directive;\n                var metadata = resolver.resolve(type);\n                if (_this.hasProviderOverrides(metadata.providers)) {\n                    _this.patchDefWithProviderOverrides(type, field);\n                }\n            }; };\n            this.seenComponents.forEach(maybeApplyOverrides(core.ɵNG_COMP_DEF));\n            this.seenDirectives.forEach(maybeApplyOverrides(core.ɵNG_DIR_DEF));\n            this.seenComponents.clear();\n            this.seenDirectives.clear();\n        };\n        R3TestBedCompiler.prototype.applyProviderOverridesToModule = function (moduleType) {\n            var e_1, _a;\n            if (this.moduleProvidersOverridden.has(moduleType)) {\n                return;\n            }\n            this.moduleProvidersOverridden.add(moduleType);\n            var injectorDef = moduleType[core.ɵNG_INJ_DEF];\n            if (this.providerOverridesByToken.size > 0) {\n                // Extract the list of providers from ModuleWithProviders, so we can define the final list of\n                // providers that might have overrides.\n                // Note: second `flatten` operation is needed to convert an array of providers\n                // (e.g. `[[], []]`) into one flat list, also eliminating empty arrays.\n                var providersFromModules = flatten(flatten(injectorDef.imports, function (imported) {\n                    return isModuleWithProviders(imported) ? imported.providers : [];\n                }));\n                var providers = __spread(providersFromModules, injectorDef.providers);\n                if (this.hasProviderOverrides(providers)) {\n                    this.maybeStoreNgDef(core.ɵNG_INJ_DEF, moduleType);\n                    this.storeFieldOfDefOnType(moduleType, core.ɵNG_INJ_DEF, 'providers');\n                    injectorDef.providers = this.getOverriddenProviders(providers);\n                }\n                // Apply provider overrides to imported modules recursively\n                var moduleDef = moduleType[core.ɵNG_MOD_DEF];\n                try {\n                    for (var _b = __values(moduleDef.imports), _c = _b.next(); !_c.done; _c = _b.next()) {\n                        var importType = _c.value;\n                        this.applyProviderOverridesToModule(importType);\n                    }\n                }\n                catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                finally {\n                    try {\n                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                    }\n                    finally { if (e_1) throw e_1.error; }\n                }\n            }\n        };\n        R3TestBedCompiler.prototype.patchComponentsWithExistingStyles = function () {\n            this.existingComponentStyles.forEach(function (styles, type) { return type[core.ɵNG_COMP_DEF].styles = styles; });\n            this.existingComponentStyles.clear();\n        };\n        R3TestBedCompiler.prototype.queueTypeArray = function (arr, moduleType) {\n            var e_2, _a;\n            try {\n                for (var arr_1 = __values(arr), arr_1_1 = arr_1.next(); !arr_1_1.done; arr_1_1 = arr_1.next()) {\n                    var value = arr_1_1.value;\n                    if (Array.isArray(value)) {\n                        this.queueTypeArray(value, moduleType);\n                    }\n                    else {\n                        this.queueType(value, moduleType);\n                    }\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (arr_1_1 && !arr_1_1.done && (_a = arr_1.return)) _a.call(arr_1);\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n        };\n        R3TestBedCompiler.prototype.recompileNgModule = function (ngModule) {\n            var metadata = this.resolvers.module.resolve(ngModule);\n            if (metadata === null) {\n                throw new Error(\"Unable to resolve metadata for NgModule: \" + ngModule.name);\n            }\n            // Cache the initial ngModuleDef as it will be overwritten.\n            this.maybeStoreNgDef(core.ɵNG_MOD_DEF, ngModule);\n            this.maybeStoreNgDef(core.ɵNG_INJ_DEF, ngModule);\n            core.ɵcompileNgModuleDefs(ngModule, metadata);\n        };\n        R3TestBedCompiler.prototype.queueType = function (type, moduleType) {\n            var component = this.resolvers.component.resolve(type);\n            if (component) {\n                // Check whether a give Type has respective NG def (ɵcmp) and compile if def is\n                // missing. That might happen in case a class without any Angular decorators extends another\n                // class where Component/Directive/Pipe decorator is defined.\n                if (isComponentDefPendingResolution(type) || !type.hasOwnProperty(core.ɵNG_COMP_DEF)) {\n                    this.pendingComponents.add(type);\n                }\n                this.seenComponents.add(type);\n                // Keep track of the module which declares this component, so later the component's scope\n                // can be set correctly. If the component has already been recorded here, then one of several\n                // cases is true:\n                // * the module containing the component was imported multiple times (common).\n                // * the component is declared in multiple modules (which is an error).\n                // * the component was in 'declarations' of the testing module, and also in an imported module\n                //   in which case the module scope will be TestingModuleOverride.DECLARATION.\n                // * overrideTemplateUsingTestingModule was called for the component in which case the module\n                //   scope will be TestingModuleOverride.OVERRIDE_TEMPLATE.\n                //\n                // If the component was previously in the testing module's 'declarations' (meaning the\n                // current value is TestingModuleOverride.DECLARATION), then `moduleType` is the component's\n                // real module, which was imported. This pattern is understood to mean that the component\n                // should use its original scope, but that the testing module should also contain the\n                // component in its scope.\n                if (!this.componentToModuleScope.has(type) ||\n                    this.componentToModuleScope.get(type) === TestingModuleOverride.DECLARATION) {\n                    this.componentToModuleScope.set(type, moduleType);\n                }\n                return;\n            }\n            var directive = this.resolvers.directive.resolve(type);\n            if (directive) {\n                if (!type.hasOwnProperty(core.ɵNG_DIR_DEF)) {\n                    this.pendingDirectives.add(type);\n                }\n                this.seenDirectives.add(type);\n                return;\n            }\n            var pipe = this.resolvers.pipe.resolve(type);\n            if (pipe && !type.hasOwnProperty(core.ɵNG_PIPE_DEF)) {\n                this.pendingPipes.add(type);\n                return;\n            }\n        };\n        R3TestBedCompiler.prototype.queueTypesFromModulesArray = function (arr) {\n            var e_3, _a;\n            try {\n                for (var arr_2 = __values(arr), arr_2_1 = arr_2.next(); !arr_2_1.done; arr_2_1 = arr_2.next()) {\n                    var value = arr_2_1.value;\n                    if (Array.isArray(value)) {\n                        this.queueTypesFromModulesArray(value);\n                    }\n                    else if (hasNgModuleDef(value)) {\n                        var def = value.ɵmod;\n                        // Look through declarations, imports, and exports, and queue everything found there.\n                        this.queueTypeArray(maybeUnwrapFn(def.declarations), value);\n                        this.queueTypesFromModulesArray(maybeUnwrapFn(def.imports));\n                        this.queueTypesFromModulesArray(maybeUnwrapFn(def.exports));\n                    }\n                }\n            }\n            catch (e_3_1) { e_3 = { error: e_3_1 }; }\n            finally {\n                try {\n                    if (arr_2_1 && !arr_2_1.done && (_a = arr_2.return)) _a.call(arr_2);\n                }\n                finally { if (e_3) throw e_3.error; }\n            }\n        };\n        R3TestBedCompiler.prototype.maybeStoreNgDef = function (prop, type) {\n            if (!this.initialNgDefs.has(type)) {\n                var currentDef = Object.getOwnPropertyDescriptor(type, prop);\n                this.initialNgDefs.set(type, [prop, currentDef]);\n            }\n        };\n        R3TestBedCompiler.prototype.storeFieldOfDefOnType = function (type, defField, field) {\n            var def = type[defField];\n            var original = def[field];\n            this.defCleanupOps.push({ field: field, def: def, original: original });\n        };\n        /**\n         * Clears current components resolution queue, but stores the state of the queue, so we can\n         * restore it later. Clearing the queue is required before we try to compile components (via\n         * `TestBed.compileComponents`), so that component defs are in sync with the resolution queue.\n         */\n        R3TestBedCompiler.prototype.clearComponentResolutionQueue = function () {\n            var _this = this;\n            if (this.originalComponentResolutionQueue === null) {\n                this.originalComponentResolutionQueue = new Map();\n            }\n            clearResolutionOfComponentResourcesQueue().forEach(function (value, key) { return _this.originalComponentResolutionQueue.set(key, value); });\n        };\n        /*\n         * Restores component resolution queue to the previously saved state. This operation is performed\n         * as a part of restoring the state after completion of the current set of tests (that might\n         * potentially mutate the state).\n         */\n        R3TestBedCompiler.prototype.restoreComponentResolutionQueue = function () {\n            if (this.originalComponentResolutionQueue !== null) {\n                restoreComponentResolutionQueue(this.originalComponentResolutionQueue);\n                this.originalComponentResolutionQueue = null;\n            }\n        };\n        R3TestBedCompiler.prototype.restoreOriginalState = function () {\n            // Process cleanup ops in reverse order so the field's original value is restored correctly (in\n            // case there were multiple overrides for the same field).\n            forEachRight(this.defCleanupOps, function (op) { op.def[op.field] = op.original; });\n            // Restore initial component/directive/pipe defs\n            this.initialNgDefs.forEach(function (value, type) {\n                var _a = __read(value, 2), prop = _a[0], descriptor = _a[1];\n                if (!descriptor) {\n                    // Delete operations are generally undesirable since they have performance implications\n                    // on objects they were applied to. In this particular case, situations where this code\n                    // is invoked should be quite rare to cause any noticeable impact, since it's applied\n                    // only to some test cases (for example when class with no annotations extends some\n                    // @Component) when we need to clear 'ɵcmp' field on a given class to restore\n                    // its original state (before applying overrides and running tests).\n                    delete type[prop];\n                }\n                else {\n                    Object.defineProperty(type, prop, descriptor);\n                }\n            });\n            this.initialNgDefs.clear();\n            this.moduleProvidersOverridden.clear();\n            this.restoreComponentResolutionQueue();\n            if (this.originalRegisteredModules) {\n                restoreRegisteredModulesState(this.originalRegisteredModules);\n                this.originalRegisteredModules = null;\n            }\n            // Restore the locale ID to the default value, this shouldn't be necessary but we never know\n            core.ɵsetLocaleId(core.ɵDEFAULT_LOCALE_ID);\n        };\n        R3TestBedCompiler.prototype.compileTestModule = function () {\n            var _this = this;\n            var RootScopeModule = /** @class */ (function () {\n                function RootScopeModule() {\n                }\n                return RootScopeModule;\n            }());\n            core.ɵcompileNgModuleDefs(RootScopeModule, {\n                providers: __spread(this.rootProviderOverrides),\n            });\n            var ngZone = new core.NgZone({ enableLongStackTrace: true });\n            var providers = __spread([\n                { provide: core.NgZone, useValue: ngZone },\n                { provide: core.Compiler, useFactory: function () { return new R3TestCompiler(_this); } }\n            ], this.providers, this.providerOverrides);\n            var imports = [RootScopeModule, this.additionalModuleTypes, this.imports || []];\n            // clang-format off\n            core.ɵcompileNgModuleDefs(this.testModuleType, {\n                declarations: this.declarations,\n                imports: imports,\n                schemas: this.schemas,\n                providers: providers,\n            }, /* allowDuplicateDeclarationsInRoot */ true);\n            // clang-format on\n            this.applyProviderOverridesToModule(this.testModuleType);\n        };\n        Object.defineProperty(R3TestBedCompiler.prototype, \"injector\", {\n            get: function () {\n                if (this._injector !== null) {\n                    return this._injector;\n                }\n                var providers = [];\n                var compilerOptions = this.platform.injector.get(core.COMPILER_OPTIONS);\n                compilerOptions.forEach(function (opts) {\n                    if (opts.providers) {\n                        providers.push(opts.providers);\n                    }\n                });\n                if (this.compilerProviders !== null) {\n                    providers.push.apply(providers, __spread(this.compilerProviders));\n                }\n                // TODO(ocombe): make this work with an Injector directly instead of creating a module for it\n                var CompilerModule = /** @class */ (function () {\n                    function CompilerModule() {\n                    }\n                    return CompilerModule;\n                }());\n                core.ɵcompileNgModuleDefs(CompilerModule, { providers: providers });\n                var CompilerModuleFactory = new core.ɵNgModuleFactory(CompilerModule);\n                this._injector = CompilerModuleFactory.create(this.platform.injector).injector;\n                return this._injector;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        // get overrides for a specific provider (if any)\n        R3TestBedCompiler.prototype.getSingleProviderOverrides = function (provider) {\n            var token = getProviderToken(provider);\n            return this.providerOverridesByToken.get(token) || null;\n        };\n        R3TestBedCompiler.prototype.getProviderOverrides = function (providers) {\n            var _this = this;\n            if (!providers || !providers.length || this.providerOverridesByToken.size === 0)\n                return [];\n            // There are two flattening operations here. The inner flatten() operates on the metadata's\n            // providers and applies a mapping function which retrieves overrides for each incoming\n            // provider. The outer flatten() then flattens the produced overrides array. If this is not\n            // done, the array can contain other empty arrays (e.g. `[[], []]`) which leak into the\n            // providers array and contaminate any error messages that might be generated.\n            return flatten(flatten(providers, function (provider) { return _this.getSingleProviderOverrides(provider) || []; }));\n        };\n        R3TestBedCompiler.prototype.getOverriddenProviders = function (providers) {\n            var _this = this;\n            if (!providers || !providers.length || this.providerOverridesByToken.size === 0)\n                return [];\n            var overrides = this.getProviderOverrides(providers);\n            var hasMultiProviderOverrides = overrides.some(isMultiProvider);\n            var overriddenProviders = __spread(providers, overrides);\n            // No additional processing is required in case we have no multi providers to override\n            if (!hasMultiProviderOverrides) {\n                return overriddenProviders;\n            }\n            var final = [];\n            var seenMultiProviders = new Set();\n            // We iterate through the list of providers in reverse order to make sure multi provider\n            // overrides take precedence over the values defined in provider list. We also fiter out all\n            // multi providers that have overrides, keeping overridden values only.\n            forEachRight(overriddenProviders, function (provider) {\n                var token = getProviderToken(provider);\n                if (isMultiProvider(provider) && _this.providerOverridesByToken.has(token)) {\n                    if (!seenMultiProviders.has(token)) {\n                        seenMultiProviders.add(token);\n                        if (provider && provider.useValue && Array.isArray(provider.useValue)) {\n                            forEachRight(provider.useValue, function (value) {\n                                // Unwrap provider override array into individual providers in final set.\n                                final.unshift({ provide: token, useValue: value, multi: true });\n                            });\n                        }\n                        else {\n                            final.unshift(provider);\n                        }\n                    }\n                }\n                else {\n                    final.unshift(provider);\n                }\n            });\n            return final;\n        };\n        R3TestBedCompiler.prototype.hasProviderOverrides = function (providers) {\n            return this.getProviderOverrides(providers).length > 0;\n        };\n        R3TestBedCompiler.prototype.patchDefWithProviderOverrides = function (declaration, field) {\n            var _this = this;\n            var def = declaration[field];\n            if (def && def.providersResolver) {\n                this.maybeStoreNgDef(field, declaration);\n                var resolver_1 = def.providersResolver;\n                var processProvidersFn_1 = function (providers) { return _this.getOverriddenProviders(providers); };\n                this.storeFieldOfDefOnType(declaration, field, 'providersResolver');\n                def.providersResolver = function (ngDef) { return resolver_1(ngDef, processProvidersFn_1); };\n            }\n        };\n        return R3TestBedCompiler;\n    }());\n    function initResolvers() {\n        return {\n            module: new NgModuleResolver(),\n            component: new ComponentResolver(),\n            directive: new DirectiveResolver(),\n            pipe: new PipeResolver()\n        };\n    }\n    function hasNgModuleDef(value) {\n        return value.hasOwnProperty('ɵmod');\n    }\n    function maybeUnwrapFn(maybeFn) {\n        return maybeFn instanceof Function ? maybeFn() : maybeFn;\n    }\n    function flatten(values, mapFn) {\n        var out = [];\n        values.forEach(function (value) {\n            if (Array.isArray(value)) {\n                out.push.apply(out, __spread(flatten(value, mapFn)));\n            }\n            else {\n                out.push(mapFn ? mapFn(value) : value);\n            }\n        });\n        return out;\n    }\n    function getProviderField(provider, field) {\n        return provider && typeof provider === 'object' && provider[field];\n    }\n    function getProviderToken(provider) {\n        return getProviderField(provider, 'provide') || provider;\n    }\n    function isMultiProvider(provider) {\n        return !!getProviderField(provider, 'multi');\n    }\n    function isModuleWithProviders(value) {\n        return value.hasOwnProperty('ngModule');\n    }\n    function forEachRight(values, fn) {\n        for (var idx = values.length - 1; idx >= 0; idx--) {\n            fn(values[idx], idx);\n        }\n    }\n    var R3TestCompiler = /** @class */ (function () {\n        function R3TestCompiler(testBed) {\n            this.testBed = testBed;\n        }\n        R3TestCompiler.prototype.compileModuleSync = function (moduleType) {\n            this.testBed._compileNgModuleSync(moduleType);\n            return new core.ɵNgModuleFactory(moduleType);\n        };\n        R3TestCompiler.prototype.compileModuleAsync = function (moduleType) {\n            return __awaiter(this, void 0, void 0, function () {\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.testBed._compileNgModuleAsync(moduleType)];\n                        case 1:\n                            _a.sent();\n                            return [2 /*return*/, new core.ɵNgModuleFactory(moduleType)];\n                    }\n                });\n            });\n        };\n        R3TestCompiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {\n            var ngModuleFactory = this.compileModuleSync(moduleType);\n            var componentFactories = this.testBed._getComponentFactories(moduleType);\n            return new core.ModuleWithComponentFactories(ngModuleFactory, componentFactories);\n        };\n        R3TestCompiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {\n            return __awaiter(this, void 0, void 0, function () {\n                var ngModuleFactory, componentFactories;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.compileModuleAsync(moduleType)];\n                        case 1:\n                            ngModuleFactory = _a.sent();\n                            componentFactories = this.testBed._getComponentFactories(moduleType);\n                            return [2 /*return*/, new core.ModuleWithComponentFactories(ngModuleFactory, componentFactories)];\n                    }\n                });\n            });\n        };\n        R3TestCompiler.prototype.clearCache = function () { };\n        R3TestCompiler.prototype.clearCacheFor = function (type) { };\n        R3TestCompiler.prototype.getModuleId = function (moduleType) {\n            var meta = this.testBed._getModuleResolver().resolve(moduleType);\n            return meta && meta.id || undefined;\n        };\n        return R3TestCompiler;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var _nextRootElementId = 0;\n    /**\n     * @description\n     * Configures and initializes environment for unit testing and provides methods for\n     * creating components and services in unit tests.\n     *\n     * TestBed is the primary api for writing unit tests for Angular applications and libraries.\n     *\n     * Note: Use `TestBed` in tests. It will be set to either `TestBedViewEngine` or `TestBedRender3`\n     * according to the compiler used.\n     */\n    var TestBedRender3 = /** @class */ (function () {\n        function TestBedRender3() {\n            // Properties\n            this.platform = null;\n            this.ngModule = null;\n            this._compiler = null;\n            this._testModuleRef = null;\n            this._activeFixtures = [];\n            this._globalCompilationChecked = false;\n        }\n        /**\n         * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n         * angular module. These are common to every test in the suite.\n         *\n         * This may only be called once, to set up the common providers for the current test\n         * suite on the current platform. If you absolutely need to change the providers,\n         * first use `resetTestEnvironment`.\n         *\n         * Test modules and platforms for individual platforms are available from\n         * '@angular/<platform_name>/testing'.\n         *\n         * @publicApi\n         */\n        TestBedRender3.initTestEnvironment = function (ngModule, platform, aotSummaries) {\n            var testBed = _getTestBedRender3();\n            testBed.initTestEnvironment(ngModule, platform, aotSummaries);\n            return testBed;\n        };\n        /**\n         * Reset the providers for the test injector.\n         *\n         * @publicApi\n         */\n        TestBedRender3.resetTestEnvironment = function () { _getTestBedRender3().resetTestEnvironment(); };\n        TestBedRender3.configureCompiler = function (config) {\n            _getTestBedRender3().configureCompiler(config);\n            return TestBedRender3;\n        };\n        /**\n         * Allows overriding default providers, directives, pipes, modules of the test injector,\n         * which are defined in test_injector.js\n         */\n        TestBedRender3.configureTestingModule = function (moduleDef) {\n            _getTestBedRender3().configureTestingModule(moduleDef);\n            return TestBedRender3;\n        };\n        /**\n         * Compile components with a `templateUrl` for the test's NgModule.\n         * It is necessary to call this function\n         * as fetching urls is asynchronous.\n         */\n        TestBedRender3.compileComponents = function () { return _getTestBedRender3().compileComponents(); };\n        TestBedRender3.overrideModule = function (ngModule, override) {\n            _getTestBedRender3().overrideModule(ngModule, override);\n            return TestBedRender3;\n        };\n        TestBedRender3.overrideComponent = function (component, override) {\n            _getTestBedRender3().overrideComponent(component, override);\n            return TestBedRender3;\n        };\n        TestBedRender3.overrideDirective = function (directive, override) {\n            _getTestBedRender3().overrideDirective(directive, override);\n            return TestBedRender3;\n        };\n        TestBedRender3.overridePipe = function (pipe, override) {\n            _getTestBedRender3().overridePipe(pipe, override);\n            return TestBedRender3;\n        };\n        TestBedRender3.overrideTemplate = function (component, template) {\n            _getTestBedRender3().overrideComponent(component, { set: { template: template, templateUrl: null } });\n            return TestBedRender3;\n        };\n        /**\n         * Overrides the template of the given component, compiling the template\n         * in the context of the TestingModule.\n         *\n         * Note: This works for JIT and AOTed components as well.\n         */\n        TestBedRender3.overrideTemplateUsingTestingModule = function (component, template) {\n            _getTestBedRender3().overrideTemplateUsingTestingModule(component, template);\n            return TestBedRender3;\n        };\n        TestBedRender3.overrideProvider = function (token, provider) {\n            _getTestBedRender3().overrideProvider(token, provider);\n            return TestBedRender3;\n        };\n        TestBedRender3.inject = function (token, notFoundValue, flags) {\n            return _getTestBedRender3().inject(token, notFoundValue, flags);\n        };\n        /** @deprecated from v9.0.0 use TestBed.inject */\n        TestBedRender3.get = function (token, notFoundValue, flags) {\n            if (notFoundValue === void 0) { notFoundValue = core.Injector.THROW_IF_NOT_FOUND; }\n            if (flags === void 0) { flags = core.InjectFlags.Default; }\n            return _getTestBedRender3().inject(token, notFoundValue, flags);\n        };\n        TestBedRender3.createComponent = function (component) {\n            return _getTestBedRender3().createComponent(component);\n        };\n        TestBedRender3.resetTestingModule = function () {\n            _getTestBedRender3().resetTestingModule();\n            return TestBedRender3;\n        };\n        /**\n         * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n         * angular module. These are common to every test in the suite.\n         *\n         * This may only be called once, to set up the common providers for the current test\n         * suite on the current platform. If you absolutely need to change the providers,\n         * first use `resetTestEnvironment`.\n         *\n         * Test modules and platforms for individual platforms are available from\n         * '@angular/<platform_name>/testing'.\n         *\n         * @publicApi\n         */\n        TestBedRender3.prototype.initTestEnvironment = function (ngModule, platform, aotSummaries) {\n            if (this.platform || this.ngModule) {\n                throw new Error('Cannot set base providers because it has already been called');\n            }\n            this.platform = platform;\n            this.ngModule = ngModule;\n            this._compiler = new R3TestBedCompiler(this.platform, this.ngModule);\n        };\n        /**\n         * Reset the providers for the test injector.\n         *\n         * @publicApi\n         */\n        TestBedRender3.prototype.resetTestEnvironment = function () {\n            this.resetTestingModule();\n            this._compiler = null;\n            this.platform = null;\n            this.ngModule = null;\n        };\n        TestBedRender3.prototype.resetTestingModule = function () {\n            this.checkGlobalCompilationFinished();\n            core.ɵresetCompiledComponents();\n            if (this._compiler !== null) {\n                this.compiler.restoreOriginalState();\n            }\n            this._compiler = new R3TestBedCompiler(this.platform, this.ngModule);\n            this._testModuleRef = null;\n            this.destroyActiveFixtures();\n        };\n        TestBedRender3.prototype.configureCompiler = function (config) {\n            if (config.useJit != null) {\n                throw new Error('the Render3 compiler JiT mode is not configurable !');\n            }\n            if (config.providers !== undefined) {\n                this.compiler.setCompilerProviders(config.providers);\n            }\n        };\n        TestBedRender3.prototype.configureTestingModule = function (moduleDef) {\n            this.assertNotInstantiated('R3TestBed.configureTestingModule', 'configure the test module');\n            this.compiler.configureTestingModule(moduleDef);\n        };\n        TestBedRender3.prototype.compileComponents = function () { return this.compiler.compileComponents(); };\n        TestBedRender3.prototype.inject = function (token, notFoundValue, flags) {\n            if (token === TestBedRender3) {\n                return this;\n            }\n            var UNDEFINED = {};\n            var result = this.testModuleRef.injector.get(token, UNDEFINED, flags);\n            return result === UNDEFINED ? this.compiler.injector.get(token, notFoundValue, flags) :\n                result;\n        };\n        /** @deprecated from v9.0.0 use TestBed.inject */\n        TestBedRender3.prototype.get = function (token, notFoundValue, flags) {\n            if (notFoundValue === void 0) { notFoundValue = core.Injector.THROW_IF_NOT_FOUND; }\n            if (flags === void 0) { flags = core.InjectFlags.Default; }\n            return this.inject(token, notFoundValue, flags);\n        };\n        TestBedRender3.prototype.execute = function (tokens, fn, context) {\n            var _this = this;\n            var params = tokens.map(function (t) { return _this.inject(t); });\n            return fn.apply(context, params);\n        };\n        TestBedRender3.prototype.overrideModule = function (ngModule, override) {\n            this.assertNotInstantiated('overrideModule', 'override module metadata');\n            this.compiler.overrideModule(ngModule, override);\n        };\n        TestBedRender3.prototype.overrideComponent = function (component, override) {\n            this.assertNotInstantiated('overrideComponent', 'override component metadata');\n            this.compiler.overrideComponent(component, override);\n        };\n        TestBedRender3.prototype.overrideTemplateUsingTestingModule = function (component, template) {\n            this.assertNotInstantiated('R3TestBed.overrideTemplateUsingTestingModule', 'Cannot override template when the test module has already been instantiated');\n            this.compiler.overrideTemplateUsingTestingModule(component, template);\n        };\n        TestBedRender3.prototype.overrideDirective = function (directive, override) {\n            this.assertNotInstantiated('overrideDirective', 'override directive metadata');\n            this.compiler.overrideDirective(directive, override);\n        };\n        TestBedRender3.prototype.overridePipe = function (pipe, override) {\n            this.assertNotInstantiated('overridePipe', 'override pipe metadata');\n            this.compiler.overridePipe(pipe, override);\n        };\n        /**\n         * Overwrites all providers for the given token with the given provider definition.\n         */\n        TestBedRender3.prototype.overrideProvider = function (token, provider) {\n            this.compiler.overrideProvider(token, provider);\n        };\n        TestBedRender3.prototype.createComponent = function (type) {\n            var _this = this;\n            var testComponentRenderer = this.inject(TestComponentRenderer);\n            var rootElId = \"root-ng-internal-isolated-\" + _nextRootElementId++;\n            testComponentRenderer.insertRootElement(rootElId);\n            var componentDef = type.ɵcmp;\n            if (!componentDef) {\n                throw new Error(\"It looks like '\" + core.ɵstringify(type) + \"' has not been IVY compiled - it has no '\\u0275cmp' field\");\n            }\n            // TODO: Don't cast as `InjectionToken<boolean>`, proper type is boolean[]\n            var noNgZone = this.inject(ComponentFixtureNoNgZone, false);\n            // TODO: Don't cast as `InjectionToken<boolean>`, proper type is boolean[]\n            var autoDetect = this.inject(ComponentFixtureAutoDetect, false);\n            var ngZone = noNgZone ? null : this.inject(core.NgZone, null);\n            var componentFactory = new core.ɵRender3ComponentFactory(componentDef);\n            var initComponent = function () {\n                var componentRef = componentFactory.create(core.Injector.NULL, [], \"#\" + rootElId, _this.testModuleRef);\n                return new ComponentFixture(componentRef, ngZone, autoDetect);\n            };\n            var fixture = ngZone ? ngZone.run(initComponent) : initComponent();\n            this._activeFixtures.push(fixture);\n            return fixture;\n        };\n        Object.defineProperty(TestBedRender3.prototype, \"compiler\", {\n            get: function () {\n                if (this._compiler === null) {\n                    throw new Error(\"Need to call TestBed.initTestEnvironment() first\");\n                }\n                return this._compiler;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(TestBedRender3.prototype, \"testModuleRef\", {\n            get: function () {\n                if (this._testModuleRef === null) {\n                    this._testModuleRef = this.compiler.finalize();\n                }\n                return this._testModuleRef;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        TestBedRender3.prototype.assertNotInstantiated = function (methodName, methodDescription) {\n            if (this._testModuleRef !== null) {\n                throw new Error(\"Cannot \" + methodDescription + \" when the test module has already been instantiated. \" +\n                    (\"Make sure you are not using `inject` before `\" + methodName + \"`.\"));\n            }\n        };\n        /**\n         * Check whether the module scoping queue should be flushed, and flush it if needed.\n         *\n         * When the TestBed is reset, it clears the JIT module compilation queue, cancelling any\n         * in-progress module compilation. This creates a potential hazard - the very first time the\n         * TestBed is initialized (or if it's reset without being initialized), there may be pending\n         * compilations of modules declared in global scope. These compilations should be finished.\n         *\n         * To ensure that globally declared modules have their components scoped properly, this function\n         * is called whenever TestBed is initialized or reset. The _first_ time that this happens, prior\n         * to any other operations, the scoping queue is flushed.\n         */\n        TestBedRender3.prototype.checkGlobalCompilationFinished = function () {\n            // Checking _testNgModuleRef is null should not be necessary, but is left in as an additional\n            // guard that compilations queued in tests (after instantiation) are never flushed accidentally.\n            if (!this._globalCompilationChecked && this._testModuleRef === null) {\n                core.ɵflushModuleScopingQueueAsMuchAsPossible();\n            }\n            this._globalCompilationChecked = true;\n        };\n        TestBedRender3.prototype.destroyActiveFixtures = function () {\n            this._activeFixtures.forEach(function (fixture) {\n                try {\n                    fixture.destroy();\n                }\n                catch (e) {\n                    console.error('Error during cleanup of component', {\n                        component: fixture.componentInstance,\n                        stacktrace: e,\n                    });\n                }\n            });\n            this._activeFixtures = [];\n        };\n        return TestBedRender3;\n    }());\n    var testBed;\n    function _getTestBedRender3() {\n        return testBed = testBed || new TestBedRender3();\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function unimplemented() {\n        throw Error('unimplemented');\n    }\n    /**\n     * Special interface to the compiler only used by testing\n     *\n     * @publicApi\n     */\n    var TestingCompiler = /** @class */ (function (_super) {\n        __extends(TestingCompiler, _super);\n        function TestingCompiler() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        Object.defineProperty(TestingCompiler.prototype, \"injector\", {\n            get: function () { throw unimplemented(); },\n            enumerable: true,\n            configurable: true\n        });\n        TestingCompiler.prototype.overrideModule = function (module, overrides) {\n            throw unimplemented();\n        };\n        TestingCompiler.prototype.overrideDirective = function (directive, overrides) {\n            throw unimplemented();\n        };\n        TestingCompiler.prototype.overrideComponent = function (component, overrides) {\n            throw unimplemented();\n        };\n        TestingCompiler.prototype.overridePipe = function (directive, overrides) {\n            throw unimplemented();\n        };\n        /**\n         * Allows to pass the compile summary from AOT compilation to the JIT compiler,\n         * so that it can use the code generated by AOT.\n         */\n        TestingCompiler.prototype.loadAotSummaries = function (summaries) { throw unimplemented(); };\n        /**\n         * Gets the component factory for the given component.\n         * This assumes that the component has been compiled before calling this call using\n         * `compileModuleAndAllComponents*`.\n         */\n        TestingCompiler.prototype.getComponentFactory = function (component) { throw unimplemented(); };\n        /**\n         * Returns the component type that is stored in the given error.\n         * This can be used for errors created by compileModule...\n         */\n        TestingCompiler.prototype.getComponentFromError = function (error) { throw unimplemented(); };\n        TestingCompiler = __decorate([\n            core.Injectable()\n        ], TestingCompiler);\n        return TestingCompiler;\n    }(core.Compiler));\n    /**\n     * A factory for creating a Compiler\n     *\n     * @publicApi\n     */\n    var TestingCompilerFactory = /** @class */ (function () {\n        function TestingCompilerFactory() {\n        }\n        return TestingCompilerFactory;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var _nextRootElementId$1 = 0;\n    /**\n     * @description\n     * Configures and initializes environment for unit testing and provides methods for\n     * creating components and services in unit tests.\n     *\n     * `TestBed` is the primary api for writing unit tests for Angular applications and libraries.\n     *\n     * Note: Use `TestBed` in tests. It will be set to either `TestBedViewEngine` or `TestBedRender3`\n     * according to the compiler used.\n     */\n    var TestBedViewEngine = /** @class */ (function () {\n        function TestBedViewEngine() {\n            this._instantiated = false;\n            this._compiler = null;\n            this._moduleRef = null;\n            this._moduleFactory = null;\n            this._compilerOptions = [];\n            this._moduleOverrides = [];\n            this._componentOverrides = [];\n            this._directiveOverrides = [];\n            this._pipeOverrides = [];\n            this._providers = [];\n            this._declarations = [];\n            this._imports = [];\n            this._schemas = [];\n            this._activeFixtures = [];\n            this._testEnvAotSummaries = function () { return []; };\n            this._aotSummaries = [];\n            this._templateOverrides = [];\n            this._isRoot = true;\n            this._rootProviderOverrides = [];\n            this.platform = null;\n            this.ngModule = null;\n        }\n        /**\n         * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n         * angular module. These are common to every test in the suite.\n         *\n         * This may only be called once, to set up the common providers for the current test\n         * suite on the current platform. If you absolutely need to change the providers,\n         * first use `resetTestEnvironment`.\n         *\n         * Test modules and platforms for individual platforms are available from\n         * '@angular/<platform_name>/testing'.\n         */\n        TestBedViewEngine.initTestEnvironment = function (ngModule, platform, aotSummaries) {\n            var testBed = _getTestBedViewEngine();\n            testBed.initTestEnvironment(ngModule, platform, aotSummaries);\n            return testBed;\n        };\n        /**\n         * Reset the providers for the test injector.\n         */\n        TestBedViewEngine.resetTestEnvironment = function () { _getTestBedViewEngine().resetTestEnvironment(); };\n        TestBedViewEngine.resetTestingModule = function () {\n            _getTestBedViewEngine().resetTestingModule();\n            return TestBedViewEngine;\n        };\n        /**\n         * Allows overriding default compiler providers and settings\n         * which are defined in test_injector.js\n         */\n        TestBedViewEngine.configureCompiler = function (config) {\n            _getTestBedViewEngine().configureCompiler(config);\n            return TestBedViewEngine;\n        };\n        /**\n         * Allows overriding default providers, directives, pipes, modules of the test injector,\n         * which are defined in test_injector.js\n         */\n        TestBedViewEngine.configureTestingModule = function (moduleDef) {\n            _getTestBedViewEngine().configureTestingModule(moduleDef);\n            return TestBedViewEngine;\n        };\n        /**\n         * Compile components with a `templateUrl` for the test's NgModule.\n         * It is necessary to call this function\n         * as fetching urls is asynchronous.\n         */\n        TestBedViewEngine.compileComponents = function () { return getTestBed().compileComponents(); };\n        TestBedViewEngine.overrideModule = function (ngModule, override) {\n            _getTestBedViewEngine().overrideModule(ngModule, override);\n            return TestBedViewEngine;\n        };\n        TestBedViewEngine.overrideComponent = function (component, override) {\n            _getTestBedViewEngine().overrideComponent(component, override);\n            return TestBedViewEngine;\n        };\n        TestBedViewEngine.overrideDirective = function (directive, override) {\n            _getTestBedViewEngine().overrideDirective(directive, override);\n            return TestBedViewEngine;\n        };\n        TestBedViewEngine.overridePipe = function (pipe, override) {\n            _getTestBedViewEngine().overridePipe(pipe, override);\n            return TestBedViewEngine;\n        };\n        TestBedViewEngine.overrideTemplate = function (component, template) {\n            _getTestBedViewEngine().overrideComponent(component, { set: { template: template, templateUrl: null } });\n            return TestBedViewEngine;\n        };\n        /**\n         * Overrides the template of the given component, compiling the template\n         * in the context of the TestingModule.\n         *\n         * Note: This works for JIT and AOTed components as well.\n         */\n        TestBedViewEngine.overrideTemplateUsingTestingModule = function (component, template) {\n            _getTestBedViewEngine().overrideTemplateUsingTestingModule(component, template);\n            return TestBedViewEngine;\n        };\n        TestBedViewEngine.overrideProvider = function (token, provider) {\n            _getTestBedViewEngine().overrideProvider(token, provider);\n            return TestBedViewEngine;\n        };\n        TestBedViewEngine.inject = function (token, notFoundValue, flags) {\n            return _getTestBedViewEngine().inject(token, notFoundValue, flags);\n        };\n        /** @deprecated from v9.0.0 use TestBed.inject */\n        TestBedViewEngine.get = function (token, notFoundValue, flags) {\n            if (notFoundValue === void 0) { notFoundValue = core.Injector.THROW_IF_NOT_FOUND; }\n            if (flags === void 0) { flags = core.InjectFlags.Default; }\n            return _getTestBedViewEngine().inject(token, notFoundValue, flags);\n        };\n        TestBedViewEngine.createComponent = function (component) {\n            return _getTestBedViewEngine().createComponent(component);\n        };\n        /**\n         * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n         * angular module. These are common to every test in the suite.\n         *\n         * This may only be called once, to set up the common providers for the current test\n         * suite on the current platform. If you absolutely need to change the providers,\n         * first use `resetTestEnvironment`.\n         *\n         * Test modules and platforms for individual platforms are available from\n         * '@angular/<platform_name>/testing'.\n         */\n        TestBedViewEngine.prototype.initTestEnvironment = function (ngModule, platform, aotSummaries) {\n            if (this.platform || this.ngModule) {\n                throw new Error('Cannot set base providers because it has already been called');\n            }\n            this.platform = platform;\n            this.ngModule = ngModule;\n            if (aotSummaries) {\n                this._testEnvAotSummaries = aotSummaries;\n            }\n        };\n        /**\n         * Reset the providers for the test injector.\n         */\n        TestBedViewEngine.prototype.resetTestEnvironment = function () {\n            this.resetTestingModule();\n            this.platform = null;\n            this.ngModule = null;\n            this._testEnvAotSummaries = function () { return []; };\n        };\n        TestBedViewEngine.prototype.resetTestingModule = function () {\n            core.ɵclearOverrides();\n            this._aotSummaries = [];\n            this._templateOverrides = [];\n            this._compiler = null;\n            this._moduleOverrides = [];\n            this._componentOverrides = [];\n            this._directiveOverrides = [];\n            this._pipeOverrides = [];\n            this._isRoot = true;\n            this._rootProviderOverrides = [];\n            this._moduleRef = null;\n            this._moduleFactory = null;\n            this._compilerOptions = [];\n            this._providers = [];\n            this._declarations = [];\n            this._imports = [];\n            this._schemas = [];\n            this._instantiated = false;\n            this._activeFixtures.forEach(function (fixture) {\n                try {\n                    fixture.destroy();\n                }\n                catch (e) {\n                    console.error('Error during cleanup of component', {\n                        component: fixture.componentInstance,\n                        stacktrace: e,\n                    });\n                }\n            });\n            this._activeFixtures = [];\n        };\n        TestBedViewEngine.prototype.configureCompiler = function (config) {\n            this._assertNotInstantiated('TestBed.configureCompiler', 'configure the compiler');\n            this._compilerOptions.push(config);\n        };\n        TestBedViewEngine.prototype.configureTestingModule = function (moduleDef) {\n            var _a, _b, _c, _d;\n            this._assertNotInstantiated('TestBed.configureTestingModule', 'configure the test module');\n            if (moduleDef.providers) {\n                (_a = this._providers).push.apply(_a, __spread(moduleDef.providers));\n            }\n            if (moduleDef.declarations) {\n                (_b = this._declarations).push.apply(_b, __spread(moduleDef.declarations));\n            }\n            if (moduleDef.imports) {\n                (_c = this._imports).push.apply(_c, __spread(moduleDef.imports));\n            }\n            if (moduleDef.schemas) {\n                (_d = this._schemas).push.apply(_d, __spread(moduleDef.schemas));\n            }\n            if (moduleDef.aotSummaries) {\n                this._aotSummaries.push(moduleDef.aotSummaries);\n            }\n        };\n        TestBedViewEngine.prototype.compileComponents = function () {\n            var _this = this;\n            if (this._moduleFactory || this._instantiated) {\n                return Promise.resolve(null);\n            }\n            var moduleType = this._createCompilerAndModule();\n            return this._compiler.compileModuleAndAllComponentsAsync(moduleType)\n                .then(function (moduleAndComponentFactories) {\n                _this._moduleFactory = moduleAndComponentFactories.ngModuleFactory;\n            });\n        };\n        TestBedViewEngine.prototype._initIfNeeded = function () {\n            var e_1, _a;\n            if (this._instantiated) {\n                return;\n            }\n            if (!this._moduleFactory) {\n                try {\n                    var moduleType = this._createCompilerAndModule();\n                    this._moduleFactory =\n                        this._compiler.compileModuleAndAllComponentsSync(moduleType).ngModuleFactory;\n                }\n                catch (e) {\n                    var errorCompType = this._compiler.getComponentFromError(e);\n                    if (errorCompType) {\n                        throw new Error(\"This test module uses the component \" + core.ɵstringify(errorCompType) + \" which is using a \\\"templateUrl\\\" or \\\"styleUrls\\\", but they were never compiled. \" +\n                            \"Please call \\\"TestBed.compileComponents\\\" before your test.\");\n                    }\n                    else {\n                        throw e;\n                    }\n                }\n            }\n            try {\n                for (var _b = __values(this._templateOverrides), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var _d = _c.value, component = _d.component, templateOf = _d.templateOf;\n                    var compFactory = this._compiler.getComponentFactory(templateOf);\n                    core.ɵoverrideComponentView(component, compFactory);\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            var ngZone = new core.NgZone({ enableLongStackTrace: true });\n            var providers = [{ provide: core.NgZone, useValue: ngZone }];\n            var ngZoneInjector = core.Injector.create({\n                providers: providers,\n                parent: this.platform.injector,\n                name: this._moduleFactory.moduleType.name\n            });\n            this._moduleRef = this._moduleFactory.create(ngZoneInjector);\n            // ApplicationInitStatus.runInitializers() is marked @internal to core. So casting to any\n            // before accessing it.\n            this._moduleRef.injector.get(core.ApplicationInitStatus).runInitializers();\n            this._instantiated = true;\n        };\n        TestBedViewEngine.prototype._createCompilerAndModule = function () {\n            var e_2, _a;\n            var _this = this;\n            var providers = this._providers.concat([{ provide: TestBed, useValue: this }]);\n            var declarations = __spread(this._declarations, this._templateOverrides.map(function (entry) { return entry.templateOf; }));\n            var rootScopeImports = [];\n            var rootProviderOverrides = this._rootProviderOverrides;\n            if (this._isRoot) {\n                var RootScopeModule = /** @class */ (function () {\n                    function RootScopeModule() {\n                    }\n                    RootScopeModule = __decorate([\n                        core.NgModule({\n                            providers: __spread(rootProviderOverrides),\n                            jit: true,\n                        })\n                    ], RootScopeModule);\n                    return RootScopeModule;\n                }());\n                rootScopeImports.push(RootScopeModule);\n            }\n            providers.push({ provide: core.ɵINJECTOR_SCOPE, useValue: this._isRoot ? 'root' : null });\n            var imports = [rootScopeImports, this.ngModule, this._imports];\n            var schemas = this._schemas;\n            var DynamicTestModule = /** @class */ (function () {\n                function DynamicTestModule() {\n                }\n                DynamicTestModule = __decorate([\n                    core.NgModule({ providers: providers, declarations: declarations, imports: imports, schemas: schemas, jit: true })\n                ], DynamicTestModule);\n                return DynamicTestModule;\n            }());\n            var compilerFactory = this.platform.injector.get(TestingCompilerFactory);\n            this._compiler = compilerFactory.createTestingCompiler(this._compilerOptions);\n            try {\n                for (var _b = __values(__spread([this._testEnvAotSummaries], this._aotSummaries)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var summary = _c.value;\n                    this._compiler.loadAotSummaries(summary);\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n            this._moduleOverrides.forEach(function (entry) { return _this._compiler.overrideModule(entry[0], entry[1]); });\n            this._componentOverrides.forEach(function (entry) { return _this._compiler.overrideComponent(entry[0], entry[1]); });\n            this._directiveOverrides.forEach(function (entry) { return _this._compiler.overrideDirective(entry[0], entry[1]); });\n            this._pipeOverrides.forEach(function (entry) { return _this._compiler.overridePipe(entry[0], entry[1]); });\n            return DynamicTestModule;\n        };\n        TestBedViewEngine.prototype._assertNotInstantiated = function (methodName, methodDescription) {\n            if (this._instantiated) {\n                throw new Error(\"Cannot \" + methodDescription + \" when the test module has already been instantiated. \" +\n                    (\"Make sure you are not using `inject` before `\" + methodName + \"`.\"));\n            }\n        };\n        TestBedViewEngine.prototype.inject = function (token, notFoundValue, flags) {\n            this._initIfNeeded();\n            if (token === TestBed) {\n                return this;\n            }\n            // Tests can inject things from the ng module and from the compiler,\n            // but the ng module can't inject things from the compiler and vice versa.\n            var UNDEFINED = {};\n            var result = this._moduleRef.injector.get(token, UNDEFINED, flags);\n            return result === UNDEFINED ? this._compiler.injector.get(token, notFoundValue, flags) :\n                result;\n        };\n        /** @deprecated from v9.0.0 use TestBed.inject */\n        TestBedViewEngine.prototype.get = function (token, notFoundValue, flags) {\n            if (notFoundValue === void 0) { notFoundValue = core.Injector.THROW_IF_NOT_FOUND; }\n            if (flags === void 0) { flags = core.InjectFlags.Default; }\n            return this.inject(token, notFoundValue, flags);\n        };\n        TestBedViewEngine.prototype.execute = function (tokens, fn, context) {\n            var _this = this;\n            this._initIfNeeded();\n            var params = tokens.map(function (t) { return _this.inject(t); });\n            return fn.apply(context, params);\n        };\n        TestBedViewEngine.prototype.overrideModule = function (ngModule, override) {\n            this._assertNotInstantiated('overrideModule', 'override module metadata');\n            this._moduleOverrides.push([ngModule, override]);\n        };\n        TestBedViewEngine.prototype.overrideComponent = function (component, override) {\n            this._assertNotInstantiated('overrideComponent', 'override component metadata');\n            this._componentOverrides.push([component, override]);\n        };\n        TestBedViewEngine.prototype.overrideDirective = function (directive, override) {\n            this._assertNotInstantiated('overrideDirective', 'override directive metadata');\n            this._directiveOverrides.push([directive, override]);\n        };\n        TestBedViewEngine.prototype.overridePipe = function (pipe, override) {\n            this._assertNotInstantiated('overridePipe', 'override pipe metadata');\n            this._pipeOverrides.push([pipe, override]);\n        };\n        TestBedViewEngine.prototype.overrideProvider = function (token, provider) {\n            this.overrideProviderImpl(token, provider);\n        };\n        TestBedViewEngine.prototype.overrideProviderImpl = function (token, provider, deprecated) {\n            if (deprecated === void 0) { deprecated = false; }\n            var def = null;\n            if (typeof token !== 'string' && (def = core.ɵgetInjectableDef(token)) && def.providedIn === 'root') {\n                if (provider.useFactory) {\n                    this._rootProviderOverrides.push({ provide: token, useFactory: provider.useFactory, deps: provider.deps || [] });\n                }\n                else {\n                    this._rootProviderOverrides.push({ provide: token, useValue: provider.useValue });\n                }\n            }\n            var flags = 0;\n            var value;\n            if (provider.useFactory) {\n                flags |= 1024 /* TypeFactoryProvider */;\n                value = provider.useFactory;\n            }\n            else {\n                flags |= 256 /* TypeValueProvider */;\n                value = provider.useValue;\n            }\n            var deps = (provider.deps || []).map(function (dep) {\n                var depFlags = 0 /* None */;\n                var depToken;\n                if (Array.isArray(dep)) {\n                    dep.forEach(function (entry) {\n                        if (entry instanceof core.Optional) {\n                            depFlags |= 2 /* Optional */;\n                        }\n                        else if (entry instanceof core.SkipSelf) {\n                            depFlags |= 1 /* SkipSelf */;\n                        }\n                        else {\n                            depToken = entry;\n                        }\n                    });\n                }\n                else {\n                    depToken = dep;\n                }\n                return [depFlags, depToken];\n            });\n            core.ɵoverrideProvider({ token: token, flags: flags, deps: deps, value: value, deprecatedBehavior: deprecated });\n        };\n        TestBedViewEngine.prototype.overrideTemplateUsingTestingModule = function (component, template) {\n            this._assertNotInstantiated('overrideTemplateUsingTestingModule', 'override template');\n            var OverrideComponent = /** @class */ (function () {\n                function OverrideComponent() {\n                }\n                OverrideComponent = __decorate([\n                    core.Component({ selector: 'empty', template: template, jit: true })\n                ], OverrideComponent);\n                return OverrideComponent;\n            }());\n            this._templateOverrides.push({ component: component, templateOf: OverrideComponent });\n        };\n        TestBedViewEngine.prototype.createComponent = function (component) {\n            var _this = this;\n            this._initIfNeeded();\n            var componentFactory = this._compiler.getComponentFactory(component);\n            if (!componentFactory) {\n                throw new Error(\"Cannot create the component \" + core.ɵstringify(component) + \" as it was not imported into the testing module!\");\n            }\n            // TODO: Don't cast as `InjectionToken<boolean>`, declared type is boolean[]\n            var noNgZone = this.inject(ComponentFixtureNoNgZone, false);\n            // TODO: Don't cast as `InjectionToken<boolean>`, declared type is boolean[]\n            var autoDetect = this.inject(ComponentFixtureAutoDetect, false);\n            var ngZone = noNgZone ? null : this.inject(core.NgZone, null);\n            var testComponentRenderer = this.inject(TestComponentRenderer);\n            var rootElId = \"root\" + _nextRootElementId$1++;\n            testComponentRenderer.insertRootElement(rootElId);\n            var initComponent = function () {\n                var componentRef = componentFactory.create(core.Injector.NULL, [], \"#\" + rootElId, _this._moduleRef);\n                return new ComponentFixture(componentRef, ngZone, autoDetect);\n            };\n            var fixture = !ngZone ? initComponent() : ngZone.run(initComponent);\n            this._activeFixtures.push(fixture);\n            return fixture;\n        };\n        return TestBedViewEngine;\n    }());\n    /**\n     * @description\n     * Configures and initializes environment for unit testing and provides methods for\n     * creating components and services in unit tests.\n     *\n     * `TestBed` is the primary api for writing unit tests for Angular applications and libraries.\n     *\n     * Note: Use `TestBed` in tests. It will be set to either `TestBedViewEngine` or `TestBedRender3`\n     * according to the compiler used.\n     *\n     * @publicApi\n     */\n    var TestBed = core.ɵivyEnabled ? TestBedRender3 : TestBedViewEngine;\n    /**\n     * Returns a singleton of the applicable `TestBed`.\n     *\n     * It will be either an instance of `TestBedViewEngine` or `TestBedRender3`.\n     *\n     * @publicApi\n     */\n    var getTestBed = core.ɵivyEnabled ? _getTestBedRender3 : _getTestBedViewEngine;\n    var testBed$1;\n    function _getTestBedViewEngine() {\n        return testBed$1 = testBed$1 || new TestBedViewEngine();\n    }\n    /**\n     * Allows injecting dependencies in `beforeEach()` and `it()`.\n     *\n     * Example:\n     *\n     * ```\n     * beforeEach(inject([Dependency, AClass], (dep, object) => {\n     *   // some code that uses `dep` and `object`\n     *   // ...\n     * }));\n     *\n     * it('...', inject([AClass], (object) => {\n     *   object.doSomething();\n     *   expect(...);\n     * })\n     * ```\n     *\n     * Notes:\n     * - inject is currently a function because of some Traceur limitation the syntax should\n     * eventually\n     *   becomes `it('...', @Inject (object: AClass, async: AsyncTestCompleter) => { ... });`\n     *\n     * @publicApi\n     */\n    function inject(tokens, fn) {\n        var testBed = getTestBed();\n        if (tokens.indexOf(AsyncTestCompleter) >= 0) {\n            // Not using an arrow function to preserve context passed from call site\n            return function () {\n                var _this = this;\n                // Return an async test method that returns a Promise if AsyncTestCompleter is one of\n                // the injected tokens.\n                return testBed.compileComponents().then(function () {\n                    var completer = testBed.inject(AsyncTestCompleter);\n                    testBed.execute(tokens, fn, _this);\n                    return completer.promise;\n                });\n            };\n        }\n        else {\n            // Not using an arrow function to preserve context passed from call site\n            return function () { return testBed.execute(tokens, fn, this); };\n        }\n    }\n    /**\n     * @publicApi\n     */\n    var InjectSetupWrapper = /** @class */ (function () {\n        function InjectSetupWrapper(_moduleDef) {\n            this._moduleDef = _moduleDef;\n        }\n        InjectSetupWrapper.prototype._addModule = function () {\n            var moduleDef = this._moduleDef();\n            if (moduleDef) {\n                getTestBed().configureTestingModule(moduleDef);\n            }\n        };\n        InjectSetupWrapper.prototype.inject = function (tokens, fn) {\n            var self = this;\n            // Not using an arrow function to preserve context passed from call site\n            return function () {\n                self._addModule();\n                return inject(tokens, fn).call(this);\n            };\n        };\n        return InjectSetupWrapper;\n    }());\n    function withModule(moduleDef, fn) {\n        if (fn) {\n            // Not using an arrow function to preserve context passed from call site\n            return function () {\n                var testBed = getTestBed();\n                if (moduleDef) {\n                    testBed.configureTestingModule(moduleDef);\n                }\n                return fn.apply(this);\n            };\n        }\n        return new InjectSetupWrapper(function () { return moduleDef; });\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var _global$1 = (typeof window === 'undefined' ? global : window);\n    // Reset the test providers and the fake async zone before each test.\n    if (_global$1.beforeEach) {\n        _global$1.beforeEach(function () {\n            TestBed.resetTestingModule();\n            resetFakeAsyncZone();\n        });\n    }\n    // TODO(juliemr): remove this, only used because we need to export something to have compilation\n    // work.\n    var __core_private_testing_placeholder__ = '';\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // This file only reexports content of the `src` folder. Keep it that way.\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.ɵangular_packages_core_testing_testing_b = TestBedRender3;\n    exports.ɵangular_packages_core_testing_testing_c = _getTestBedRender3;\n    exports.ɵangular_packages_core_testing_testing_a = TestBedViewEngine;\n    exports.TestBed = TestBed;\n    exports.getTestBed = getTestBed;\n    exports.inject = inject;\n    exports.InjectSetupWrapper = InjectSetupWrapper;\n    exports.withModule = withModule;\n    exports.ɵMetadataOverrider = MetadataOverrider;\n    exports.async = async;\n    exports.ComponentFixture = ComponentFixture;\n    exports.resetFakeAsyncZone = resetFakeAsyncZone;\n    exports.fakeAsync = fakeAsync;\n    exports.tick = tick;\n    exports.flush = flush;\n    exports.discardPeriodicTasks = discardPeriodicTasks;\n    exports.flushMicrotasks = flushMicrotasks;\n    exports.TestComponentRenderer = TestComponentRenderer;\n    exports.ComponentFixtureAutoDetect = ComponentFixtureAutoDetect;\n    exports.ComponentFixtureNoNgZone = ComponentFixtureNoNgZone;\n    exports.__core_private_testing_placeholder__ = __core_private_testing_placeholder__;\n    exports.ɵTestingCompiler = TestingCompiler;\n    exports.ɵTestingCompilerFactory = TestingCompilerFactory;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=core-testing.umd.js.map\n"]}