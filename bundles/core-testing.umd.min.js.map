{"version":3,"sources":["packages/core/core-testing.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","core","testing","compiler","this","_global","window","runInTestZone","fn","context","finishCallback","failCallback","currentZone","Zone","current","AsyncTestZoneSpec","undefined","Error","ProxyZoneSpec","proxyZoneSpec","get","assertPresent","proxyZone","getZoneWith","previousDelegate","getDelegate","parent","run","testZoneSpec","setDelegate","error","runGuarded","ComponentFixture","componentRef","ngZone","_autoDetect","_this","_isStable","_isDestroyed","_resolve","_promise","_onUnstableSubscription","_onStableSubscription","_onMicrotaskEmptySubscription","_onErrorSubscription","changeDetectorRef","elementRef","location","debugElement","getDebugNode","nativeElement","componentInstance","instance","runOutsideAngular","onUnstable","subscribe","next","onMicrotaskEmpty","detectChanges","onStable","scheduleMicroTask","hasPendingMacrotasks","onError","prototype","_tick","checkNoChanges","autoDetectChanges","autoDetect","isStable","whenStable","Promise","resolve","res","_getRenderer","_renderer","injector","RendererFactory2","whenRenderingDone","renderer","destroy","unsubscribe","_Zone","FakeAsyncTestZoneSpec","_fakeAsyncTestZoneSpec","resetFakeAsyncZoneFallback","resetDelegate","_inFakeAsyncCall","_getFakeAsyncZoneSpec","flushMicrotasksFallback","flushMicrotasks","_Zone$1","fakeAsyncTestModule","__symbol__","resetFakeAsyncZone","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__values","o","m","Symbol","iterator","value","done","__read","e","ar","push","__spread","concat","AsyncTestCompleter","rej","_reject","fail","stackTrace","enumerable","configurable","componentResourceResolutionQueue","Map","componentDefPendingResolution","Set","clearResolutionOfComponentResourcesQueue","old","unwrapResponse","response","text","_nextReferenceId","MetadataOverrider","_references","overrideMetadata","metadataClass","oldMetadata","override","props","_valueProps","obj","keys","forEach","prop","startsWith","proto","getPrototypeOf","protoProp","set","remove","add","ɵstringify","setMetadata","metadata","removeMetadata","references","removeObjects","_loop_1","removeValue","_propHashKey","_loop_2","propValue","filter","has","addMetadata","addValue","propName","JSON","stringify","_serializeReference","ref","id","testBed","reflection","ɵReflectionCapabilities","OverrideResolver","overrides","resolved","setOverrides","clear","_a","_b","type","getAnnotation","annotations","annotation","Directive","Component","Pipe","NgModule","overrider_1","DirectiveResolver","_super","ComponentResolver","PipeResolver","NgModuleResolver","TestComponentRenderer","insertRootElement","rootElementId","ComponentFixtureAutoDetect","InjectionToken","ComponentFixtureNoNgZone","_nextRootElementId","EMPTY_ARRAY","UNDEFINED","TestBedRender3","platform","ngModule","_moduleOverrides","_componentOverrides","_directiveOverrides","_pipeOverrides","_providerOverrides","_compilerProviders","_rootProviderOverrides","_providerOverridesByToken","_templateOverrides","_resolvers","_providers","_compilerOptions","_declarations","_imports","_schemas","_activeFixtures","_compilerInjector","_moduleRef","_testModuleType","_instantiated","_globalCompilationChecked","_originalComponentResolutionQueue","_initialNgDefs","initTestEnvironment","aotSummaries","_getTestBedRender3","resetTestEnvironment","configureCompiler","config","configureTestingModule","moduleDef","compileComponents","overrideModule","overrideComponent","component","overrideDirective","directive","overridePipe","pipe","overrideTemplate","template","templateUrl","overrideTemplateUsingTestingModule","overrideProvider","token","provider","deprecatedOverrideProvider","notFoundValue","Injector","THROW_IF_NOT_FOUND","createComponent","resetTestingModule","_checkGlobalCompilationFinished","ɵresetCompiledComponents","fixture","console","stacktrace","descriptor","_restoreComponentResolutionQueue","useJit","providers","_c","_d","_assertNotInstantiated","declarations","imports","schemas","_clearComponentResolutionQueue","resolvers","_getResolvers","flatten","resolveForwardRef","componentOverrides","providerOverrides","hasAsyncResources","declaration","ɵNG_COMPONENT_DEF","isComponentDefPendingResolution","_hasTypeOverrides","_hasTemplateOverrides","_storeNgDef","ɵcompileComponent","componentNeedsResolution","styleUrls","_hasProviderOverrides","_patchDefWithProviderOverrides","resourceLoader_1","overrideComponents","overrideFn","resolveComponentResources","resourceResolver","componentResolved","urlMap","cachedResourceResolve","url","promise","resp","then","promises","styles","styleOffset","styleUrl","index","style","splice","indexOf","fullyResolved","all","componentDefResolved","delete","compilerInjector","ResourceLoader","_initIfNeeded","result","execute","tokens","params","map","injectableDef","providerDef","useFactory","provide","deps","useValue","ɵgetInjectableDef","providedIn","overridesForToken","testComponentRenderer","rootElId","componentDef","ngComponentDef","noNgZone","NgZone","componentFactory","ɵRender3ComponentFactory","initComponent","NULL","_createTestModule","_compileNgModule","ɵRender3NgModuleRef","ApplicationInitStatus","runInitializers","currentDef","_getProviderOverrides","methodName","methodDescription","rootProviderOverrides","RootScopeModule","jit","enableLongStackTrace","Compiler","R3TestCompiler","ErrorHandler","useClass","R3TestErrorHandler","DynamicTestModule","COMPILER_OPTIONS","opts","CompilerModule","CompilerModuleFactory","ɵNgModuleFactory","restoreComponentResolutionQueue","queue","_","_getProvidersOverrides","some","_getMetaWithOverrides","meta","field","def","providersResolver","resolver_1","processProvidersFn_1","ngDef","_getModuleResolver","moduleType","ɵNG_MODULE_DEF","ɵNG_INJECTOR_DEF","ɵcompileNgModuleDefs","declaredComponents","metadata_1","ɵNG_DIRECTIVE_DEF","metadata_2","ɵcompileDirective","ɵNG_PIPE_DEF","ɵcompilePipe","transitiveScope","ɵtransitiveScopesFor","calcTransitiveScopesFor","cmp","scope","ɵpatchComponentDefWithScope","_getComponentFactories","maybeUnwrapFn","Function","ngModuleDef","reduce","factories","ɵflushModuleScopingQueueAsMuchAsPossible","values","mapFn","out","isArray","compileModuleSync","compileModuleAsync","compileModuleAndAllComponentsSync","ngModuleFactory","componentFactories","ModuleWithComponentFactories","compileModuleAndAllComponentsAsync","clearCache","clearCacheFor","getModuleId","handleError","unimplemented","testBed$1","TestingCompiler","loadAotSummaries","summaries","getComponentFactory","getComponentFromError","Injectable","TestingCompilerFactory","UNDEFINED$1","_nextRootElementId$1","TestBedViewEngine","_compiler","_moduleFactory","_testEnvAotSummaries","_aotSummaries","_isRoot","_getTestBedViewEngine","getTestBed","ɵclearOverrides","_createCompilerAndModule","moduleAndComponentFactories","e_1","errorCompType","compFactory","templateOf","ɵoverrideComponentView","e_1_1","return","ngZoneInjector","name","e_2","TestBed","entry","rootScopeImports","ɵAPP_ROOT","compilerFactory","createTestingCompiler","e_2_1","overrideProviderImpl","deprecated","flags","dep","depToken","depFlags","Optional","SkipSelf","ɵoverrideProvider","deprecatedBehavior","OverrideComponent","selector","ɵivyEnabled","inject","completer","InjectSetupWrapper","_moduleDef","_addModule","_global$1","beforeEach","ɵangular_packages_core_testing_testing_b","ɵangular_packages_core_testing_testing_c","ɵangular_packages_core_testing_testing_a","withModule","ɵMetadataOverrider","async","reject","asyncTest","asyncFallback","jasmine","err","fakeAsync","fakeAsyncFallback","args","_i","lastProxyZoneSpec","pendingPeriodicTimers","pendingTimers","tick","millis","tickFallback","flush","maxTurns","flushFallback","discardPeriodicTasks","discardPeriodicTasksFallback","__core_private_testing_placeholder__","ɵTestingCompiler","ɵTestingCompilerFactory"],"mappings":"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","sourcesContent":["/**\n * @license Angular v8.0.0-beta.9+15.sha-d6e27a4.with-local-changes\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/compiler')) :\n    typeof define === 'function' && define.amd ? define('@angular/core/testing', ['exports', '@angular/core', '@angular/compiler'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.core = global.ng.core || {}, global.ng.core.testing = {}), global.ng.core, global.ng.compiler));\n}(this, function (exports, core, compiler) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var _global = (typeof window === 'undefined' ? global : window);\n    /**\n     * Wraps a test function in an asynchronous test zone. The test will automatically\n     * complete when all asynchronous calls within this zone are done. Can be used\n     * to wrap an {@link inject} call.\n     *\n     * Example:\n     *\n     * ```\n     * it('...', async(inject([AClass], (object) => {\n     *   object.doSomething.then(() => {\n     *     expect(...);\n     *   })\n     * });\n     * ```\n     *\n     *\n     */\n    function asyncFallback(fn) {\n        // If we're running using the Jasmine test framework, adapt to call the 'done'\n        // function when asynchronous activity is finished.\n        if (_global.jasmine) {\n            // Not using an arrow function to preserve context passed from call site\n            return function (done) {\n                if (!done) {\n                    // if we run beforeEach in @angular/core/testing/testing_internal then we get no done\n                    // fake it here and assume sync.\n                    done = function () { };\n                    done.fail = function (e) { throw e; };\n                }\n                runInTestZone(fn, this, done, function (err) {\n                    if (typeof err === 'string') {\n                        return done.fail(new Error(err));\n                    }\n                    else {\n                        done.fail(err);\n                    }\n                });\n            };\n        }\n        // Otherwise, return a promise which will resolve when asynchronous activity\n        // is finished. This will be correctly consumed by the Mocha framework with\n        // it('...', async(myFn)); or can be used in a custom framework.\n        // Not using an arrow function to preserve context passed from call site\n        return function () {\n            var _this = this;\n            return new Promise(function (finishCallback, failCallback) {\n                runInTestZone(fn, _this, finishCallback, failCallback);\n            });\n        };\n    }\n    function runInTestZone(fn, context, finishCallback, failCallback) {\n        var currentZone = Zone.current;\n        var AsyncTestZoneSpec = Zone['AsyncTestZoneSpec'];\n        if (AsyncTestZoneSpec === undefined) {\n            throw new Error('AsyncTestZoneSpec is needed for the async() test helper but could not be found. ' +\n                'Please make sure that your environment includes zone.js/dist/async-test.js');\n        }\n        var ProxyZoneSpec = Zone['ProxyZoneSpec'];\n        if (ProxyZoneSpec === undefined) {\n            throw new Error('ProxyZoneSpec is needed for the async() test helper but could not be found. ' +\n                'Please make sure that your environment includes zone.js/dist/proxy.js');\n        }\n        var proxyZoneSpec = ProxyZoneSpec.get();\n        ProxyZoneSpec.assertPresent();\n        // We need to create the AsyncTestZoneSpec outside the ProxyZone.\n        // If we do it in ProxyZone then we will get to infinite recursion.\n        var proxyZone = Zone.current.getZoneWith('ProxyZoneSpec');\n        var previousDelegate = proxyZoneSpec.getDelegate();\n        proxyZone.parent.run(function () {\n            var testZoneSpec = new AsyncTestZoneSpec(function () {\n                // Need to restore the original zone.\n                currentZone.run(function () {\n                    if (proxyZoneSpec.getDelegate() == testZoneSpec) {\n                        // Only reset the zone spec if it's sill this one. Otherwise, assume it's OK.\n                        proxyZoneSpec.setDelegate(previousDelegate);\n                    }\n                    finishCallback();\n                });\n            }, function (error) {\n                // Need to restore the original zone.\n                currentZone.run(function () {\n                    if (proxyZoneSpec.getDelegate() == testZoneSpec) {\n                        // Only reset the zone spec if it's sill this one. Otherwise, assume it's OK.\n                        proxyZoneSpec.setDelegate(previousDelegate);\n                    }\n                    failCallback(error);\n                });\n            }, 'test');\n            proxyZoneSpec.setDelegate(testZoneSpec);\n        });\n        return Zone.current.runGuarded(fn, context);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Wraps a test function in an asynchronous test zone. The test will automatically\n     * complete when all asynchronous calls within this zone are done. Can be used\n     * to wrap an {@link inject} call.\n     *\n     * Example:\n     *\n     * ```\n     * it('...', async(inject([AClass], (object) => {\n     *   object.doSomething.then(() => {\n     *     expect(...);\n     *   })\n     * });\n     * ```\n     *\n     * @publicApi\n     */\n    function async(fn) {\n        var _Zone = typeof Zone !== 'undefined' ? Zone : null;\n        if (!_Zone) {\n            return function () {\n                return Promise.reject('Zone is needed for the async() test helper but could not be found. ' +\n                    'Please make sure that your environment includes zone.js/dist/zone.js');\n            };\n        }\n        var asyncTest = _Zone && _Zone[_Zone.__symbol__('asyncTest')];\n        if (typeof asyncTest === 'function') {\n            return asyncTest(fn);\n        }\n        // not using new version of zone.js\n        // TODO @JiaLiPassion, remove this after all library updated to\n        // newest version of zone.js(0.8.25)\n        return asyncFallback(fn);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Fixture for debugging and testing a component.\n     *\n     * @publicApi\n     */\n    var ComponentFixture = /** @class */ (function () {\n        function ComponentFixture(componentRef, ngZone, _autoDetect) {\n            var _this = this;\n            this.componentRef = componentRef;\n            this.ngZone = ngZone;\n            this._autoDetect = _autoDetect;\n            this._isStable = true;\n            this._isDestroyed = false;\n            this._resolve = null;\n            this._promise = null;\n            this._onUnstableSubscription = null;\n            this._onStableSubscription = null;\n            this._onMicrotaskEmptySubscription = null;\n            this._onErrorSubscription = null;\n            this.changeDetectorRef = componentRef.changeDetectorRef;\n            this.elementRef = componentRef.location;\n            this.debugElement = core.getDebugNode(this.elementRef.nativeElement);\n            this.componentInstance = componentRef.instance;\n            this.nativeElement = this.elementRef.nativeElement;\n            this.componentRef = componentRef;\n            this.ngZone = ngZone;\n            if (ngZone) {\n                // Create subscriptions outside the NgZone so that the callbacks run oustide\n                // of NgZone.\n                ngZone.runOutsideAngular(function () {\n                    _this._onUnstableSubscription =\n                        ngZone.onUnstable.subscribe({ next: function () { _this._isStable = false; } });\n                    _this._onMicrotaskEmptySubscription = ngZone.onMicrotaskEmpty.subscribe({\n                        next: function () {\n                            if (_this._autoDetect) {\n                                // Do a change detection run with checkNoChanges set to true to check\n                                // there are no changes on the second run.\n                                _this.detectChanges(true);\n                            }\n                        }\n                    });\n                    _this._onStableSubscription = ngZone.onStable.subscribe({\n                        next: function () {\n                            _this._isStable = true;\n                            // Check whether there is a pending whenStable() completer to resolve.\n                            if (_this._promise !== null) {\n                                // If so check whether there are no pending macrotasks before resolving.\n                                // Do this check in the next tick so that ngZone gets a chance to update the state of\n                                // pending macrotasks.\n                                scheduleMicroTask(function () {\n                                    if (!ngZone.hasPendingMacrotasks) {\n                                        if (_this._promise !== null) {\n                                            _this._resolve(true);\n                                            _this._resolve = null;\n                                            _this._promise = null;\n                                        }\n                                    }\n                                });\n                            }\n                        }\n                    });\n                    _this._onErrorSubscription =\n                        ngZone.onError.subscribe({ next: function (error) { throw error; } });\n                });\n            }\n        }\n        ComponentFixture.prototype._tick = function (checkNoChanges) {\n            this.changeDetectorRef.detectChanges();\n            if (checkNoChanges) {\n                this.checkNoChanges();\n            }\n        };\n        /**\n         * Trigger a change detection cycle for the component.\n         */\n        ComponentFixture.prototype.detectChanges = function (checkNoChanges) {\n            var _this = this;\n            if (checkNoChanges === void 0) { checkNoChanges = true; }\n            if (this.ngZone != null) {\n                // Run the change detection inside the NgZone so that any async tasks as part of the change\n                // detection are captured by the zone and can be waited for in isStable.\n                this.ngZone.run(function () { _this._tick(checkNoChanges); });\n            }\n            else {\n                // Running without zone. Just do the change detection.\n                this._tick(checkNoChanges);\n            }\n        };\n        /**\n         * Do a change detection run to make sure there were no changes.\n         */\n        ComponentFixture.prototype.checkNoChanges = function () { this.changeDetectorRef.checkNoChanges(); };\n        /**\n         * Set whether the fixture should autodetect changes.\n         *\n         * Also runs detectChanges once so that any existing change is detected.\n         */\n        ComponentFixture.prototype.autoDetectChanges = function (autoDetect) {\n            if (autoDetect === void 0) { autoDetect = true; }\n            if (this.ngZone == null) {\n                throw new Error('Cannot call autoDetectChanges when ComponentFixtureNoNgZone is set');\n            }\n            this._autoDetect = autoDetect;\n            this.detectChanges();\n        };\n        /**\n         * Return whether the fixture is currently stable or has async tasks that have not been completed\n         * yet.\n         */\n        ComponentFixture.prototype.isStable = function () { return this._isStable && !this.ngZone.hasPendingMacrotasks; };\n        /**\n         * Get a promise that resolves when the fixture is stable.\n         *\n         * This can be used to resume testing after events have triggered asynchronous activity or\n         * asynchronous change detection.\n         */\n        ComponentFixture.prototype.whenStable = function () {\n            var _this = this;\n            if (this.isStable()) {\n                return Promise.resolve(false);\n            }\n            else if (this._promise !== null) {\n                return this._promise;\n            }\n            else {\n                this._promise = new Promise(function (res) { _this._resolve = res; });\n                return this._promise;\n            }\n        };\n        ComponentFixture.prototype._getRenderer = function () {\n            if (this._renderer === undefined) {\n                this._renderer = this.componentRef.injector.get(core.RendererFactory2, null);\n            }\n            return this._renderer;\n        };\n        /**\n          * Get a promise that resolves when the ui state is stable following animations.\n          */\n        ComponentFixture.prototype.whenRenderingDone = function () {\n            var renderer = this._getRenderer();\n            if (renderer && renderer.whenRenderingDone) {\n                return renderer.whenRenderingDone();\n            }\n            return this.whenStable();\n        };\n        /**\n         * Trigger component destruction.\n         */\n        ComponentFixture.prototype.destroy = function () {\n            if (!this._isDestroyed) {\n                this.componentRef.destroy();\n                if (this._onUnstableSubscription != null) {\n                    this._onUnstableSubscription.unsubscribe();\n                    this._onUnstableSubscription = null;\n                }\n                if (this._onStableSubscription != null) {\n                    this._onStableSubscription.unsubscribe();\n                    this._onStableSubscription = null;\n                }\n                if (this._onMicrotaskEmptySubscription != null) {\n                    this._onMicrotaskEmptySubscription.unsubscribe();\n                    this._onMicrotaskEmptySubscription = null;\n                }\n                if (this._onErrorSubscription != null) {\n                    this._onErrorSubscription.unsubscribe();\n                    this._onErrorSubscription = null;\n                }\n                this._isDestroyed = true;\n            }\n        };\n        return ComponentFixture;\n    }());\n    function scheduleMicroTask(fn) {\n        Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * fakeAsync has been moved to zone.js\n     * this file is for fallback in case old version of zone.js is used\n     */\n    var _Zone = typeof Zone !== 'undefined' ? Zone : null;\n    var FakeAsyncTestZoneSpec = _Zone && _Zone['FakeAsyncTestZoneSpec'];\n    var ProxyZoneSpec = _Zone && _Zone['ProxyZoneSpec'];\n    var _fakeAsyncTestZoneSpec = null;\n    /**\n     * Clears out the shared fake async zone for a test.\n     * To be called in a global `beforeEach`.\n     *\n     * @publicApi\n     */\n    function resetFakeAsyncZoneFallback() {\n        _fakeAsyncTestZoneSpec = null;\n        // in node.js testing we may not have ProxyZoneSpec in which case there is nothing to reset.\n        ProxyZoneSpec && ProxyZoneSpec.assertPresent().resetDelegate();\n    }\n    var _inFakeAsyncCall = false;\n    /**\n     * Wraps a function to be executed in the fakeAsync zone:\n     * - microtasks are manually executed by calling `flushMicrotasks()`,\n     * - timers are synchronous, `tick()` simulates the asynchronous passage of time.\n     *\n     * If there are any pending timers at the end of the function, an exception will be thrown.\n     *\n     * Can be used to wrap inject() calls.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example core/testing/ts/fake_async.ts region='basic'}\n     *\n     * @param fn\n     * @returns The function wrapped to be executed in the fakeAsync zone\n     *\n     * @publicApi\n     */\n    function fakeAsyncFallback(fn) {\n        // Not using an arrow function to preserve context passed from call site\n        return function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            var proxyZoneSpec = ProxyZoneSpec.assertPresent();\n            if (_inFakeAsyncCall) {\n                throw new Error('fakeAsync() calls can not be nested');\n            }\n            _inFakeAsyncCall = true;\n            try {\n                if (!_fakeAsyncTestZoneSpec) {\n                    if (proxyZoneSpec.getDelegate() instanceof FakeAsyncTestZoneSpec) {\n                        throw new Error('fakeAsync() calls can not be nested');\n                    }\n                    _fakeAsyncTestZoneSpec = new FakeAsyncTestZoneSpec();\n                }\n                var res = void 0;\n                var lastProxyZoneSpec = proxyZoneSpec.getDelegate();\n                proxyZoneSpec.setDelegate(_fakeAsyncTestZoneSpec);\n                try {\n                    res = fn.apply(this, args);\n                    flushMicrotasksFallback();\n                }\n                finally {\n                    proxyZoneSpec.setDelegate(lastProxyZoneSpec);\n                }\n                if (_fakeAsyncTestZoneSpec.pendingPeriodicTimers.length > 0) {\n                    throw new Error(_fakeAsyncTestZoneSpec.pendingPeriodicTimers.length + \" \" +\n                        \"periodic timer(s) still in the queue.\");\n                }\n                if (_fakeAsyncTestZoneSpec.pendingTimers.length > 0) {\n                    throw new Error(_fakeAsyncTestZoneSpec.pendingTimers.length + \" timer(s) still in the queue.\");\n                }\n                return res;\n            }\n            finally {\n                _inFakeAsyncCall = false;\n                resetFakeAsyncZoneFallback();\n            }\n        };\n    }\n    function _getFakeAsyncZoneSpec() {\n        if (_fakeAsyncTestZoneSpec == null) {\n            throw new Error('The code should be running in the fakeAsync zone to call this function');\n        }\n        return _fakeAsyncTestZoneSpec;\n    }\n    /**\n     * Simulates the asynchronous passage of time for the timers in the fakeAsync zone.\n     *\n     * The microtasks queue is drained at the very start of this function and after any timer callback\n     * has been executed.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example core/testing/ts/fake_async.ts region='basic'}\n     *\n     * @publicApi\n     */\n    function tickFallback(millis) {\n        if (millis === void 0) { millis = 0; }\n        _getFakeAsyncZoneSpec().tick(millis);\n    }\n    /**\n     * Simulates the asynchronous passage of time for the timers in the fakeAsync zone by\n     * draining the macrotask queue until it is empty. The returned value is the milliseconds\n     * of time that would have been elapsed.\n     *\n     * @param maxTurns\n     * @returns The simulated time elapsed, in millis.\n     *\n     * @publicApi\n     */\n    function flushFallback(maxTurns) {\n        return _getFakeAsyncZoneSpec().flush(maxTurns);\n    }\n    /**\n     * Discard all remaining periodic tasks.\n     *\n     * @publicApi\n     */\n    function discardPeriodicTasksFallback() {\n        var zoneSpec = _getFakeAsyncZoneSpec();\n        zoneSpec.pendingPeriodicTimers.length = 0;\n    }\n    /**\n     * Flush any pending microtasks.\n     *\n     * @publicApi\n     */\n    function flushMicrotasksFallback() {\n        _getFakeAsyncZoneSpec().flushMicrotasks();\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var _Zone$1 = typeof Zone !== 'undefined' ? Zone : null;\n    var fakeAsyncTestModule = _Zone$1 && _Zone$1[_Zone$1.__symbol__('fakeAsyncTest')];\n    /**\n     * Clears out the shared fake async zone for a test.\n     * To be called in a global `beforeEach`.\n     *\n     * @publicApi\n     */\n    function resetFakeAsyncZone() {\n        if (fakeAsyncTestModule) {\n            return fakeAsyncTestModule.resetFakeAsyncZone();\n        }\n        else {\n            return resetFakeAsyncZoneFallback();\n        }\n    }\n    /**\n     * Wraps a function to be executed in the fakeAsync zone:\n     * - microtasks are manually executed by calling `flushMicrotasks()`,\n     * - timers are synchronous, `tick()` simulates the asynchronous passage of time.\n     *\n     * If there are any pending timers at the end of the function, an exception will be thrown.\n     *\n     * Can be used to wrap inject() calls.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example core/testing/ts/fake_async.ts region='basic'}\n     *\n     * @param fn\n     * @returns The function wrapped to be executed in the fakeAsync zone\n     *\n     * @publicApi\n     */\n    function fakeAsync(fn) {\n        if (fakeAsyncTestModule) {\n            return fakeAsyncTestModule.fakeAsync(fn);\n        }\n        else {\n            return fakeAsyncFallback(fn);\n        }\n    }\n    /**\n     * Simulates the asynchronous passage of time for the timers in the fakeAsync zone.\n     *\n     * The microtasks queue is drained at the very start of this function and after any timer callback\n     * has been executed.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example core/testing/ts/fake_async.ts region='basic'}\n     *\n     * @publicApi\n     */\n    function tick(millis) {\n        if (millis === void 0) { millis = 0; }\n        if (fakeAsyncTestModule) {\n            return fakeAsyncTestModule.tick(millis);\n        }\n        else {\n            return tickFallback(millis);\n        }\n    }\n    /**\n     * Simulates the asynchronous passage of time for the timers in the fakeAsync zone by\n     * draining the macrotask queue until it is empty. The returned value is the milliseconds\n     * of time that would have been elapsed.\n     *\n     * @param maxTurns\n     * @returns The simulated time elapsed, in millis.\n     *\n     * @publicApi\n     */\n    function flush(maxTurns) {\n        if (fakeAsyncTestModule) {\n            return fakeAsyncTestModule.flush(maxTurns);\n        }\n        else {\n            return flushFallback(maxTurns);\n        }\n    }\n    /**\n     * Discard all remaining periodic tasks.\n     *\n     * @publicApi\n     */\n    function discardPeriodicTasks() {\n        if (fakeAsyncTestModule) {\n            return fakeAsyncTestModule.discardPeriodicTasks();\n        }\n        else {\n            discardPeriodicTasksFallback();\n        }\n    }\n    /**\n     * Flush any pending microtasks.\n     *\n     * @publicApi\n     */\n    function flushMicrotasks() {\n        if (fakeAsyncTestModule) {\n            return fakeAsyncTestModule.flushMicrotasks();\n        }\n        else {\n            return flushMicrotasksFallback();\n        }\n    }\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\r\n\r\n    function __decorate(decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    }\r\n\r\n    function __values(o) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n        if (m) return m.call(o);\r\n        return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n    }\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\r\n\r\n    function __spread() {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Injectable completer that allows signaling completion of an asynchronous test. Used internally.\n     */\n    var AsyncTestCompleter = /** @class */ (function () {\n        function AsyncTestCompleter() {\n            var _this = this;\n            this._promise = new Promise(function (res, rej) {\n                _this._resolve = res;\n                _this._reject = rej;\n            });\n        }\n        AsyncTestCompleter.prototype.done = function (value) { this._resolve(value); };\n        AsyncTestCompleter.prototype.fail = function (error, stackTrace) { this._reject(error); };\n        Object.defineProperty(AsyncTestCompleter.prototype, \"promise\", {\n            get: function () { return this._promise; },\n            enumerable: true,\n            configurable: true\n        });\n        return AsyncTestCompleter;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Used to resolve resource URLs on `@Component` when used with JIT compilation.\n     *\n     * Example:\n     * ```\n     * @Component({\n     *   selector: 'my-comp',\n     *   templateUrl: 'my-comp.html', // This requires asynchronous resolution\n     * })\n     * class MyComponent{\n     * }\n     *\n     * // Calling `renderComponent` will fail because `renderComponent` is a synchronous process\n     * // and `MyComponent`'s `@Component.templateUrl` needs to be resolved asynchronously.\n     *\n     * // Calling `resolveComponentResources()` will resolve `@Component.templateUrl` into\n     * // `@Component.template`, which allows `renderComponent` to proceed in a synchronous manner.\n     *\n     * // Use browser's `fetch()` function as the default resource resolution strategy.\n     * resolveComponentResources(fetch).then(() => {\n     *   // After resolution all URLs have been converted into `template` strings.\n     *   renderComponent(MyComponent);\n     * });\n     *\n     * ```\n     *\n     * NOTE: In AOT the resolution happens during compilation, and so there should be no need\n     * to call this method outside JIT mode.\n     *\n     * @param resourceResolver a function which is responsible for returning a `Promise` to the\n     * contents of the resolved URL. Browser's `fetch()` method is a good default implementation.\n     */\n    function resolveComponentResources(resourceResolver) {\n        // Store all promises which are fetching the resources.\n        var componentResolved = [];\n        // Cache so that we don't fetch the same resource more than once.\n        var urlMap = new Map();\n        function cachedResourceResolve(url) {\n            var promise = urlMap.get(url);\n            if (!promise) {\n                var resp = resourceResolver(url);\n                urlMap.set(url, promise = resp.then(unwrapResponse));\n            }\n            return promise;\n        }\n        componentResourceResolutionQueue.forEach(function (component, type) {\n            var promises = [];\n            if (component.templateUrl) {\n                promises.push(cachedResourceResolve(component.templateUrl).then(function (template) {\n                    component.template = template;\n                }));\n            }\n            var styleUrls = component.styleUrls;\n            var styles = component.styles || (component.styles = []);\n            var styleOffset = component.styles.length;\n            styleUrls && styleUrls.forEach(function (styleUrl, index) {\n                styles.push(''); // pre-allocate array.\n                promises.push(cachedResourceResolve(styleUrl).then(function (style) {\n                    styles[styleOffset + index] = style;\n                    styleUrls.splice(styleUrls.indexOf(styleUrl), 1);\n                    if (styleUrls.length == 0) {\n                        component.styleUrls = undefined;\n                    }\n                }));\n            });\n            var fullyResolved = Promise.all(promises).then(function () { return componentDefResolved(type); });\n            componentResolved.push(fullyResolved);\n        });\n        clearResolutionOfComponentResourcesQueue();\n        return Promise.all(componentResolved).then(function () { return undefined; });\n    }\n    var componentResourceResolutionQueue = new Map();\n    // Track when existing ngComponentDef for a Type is waiting on resources.\n    var componentDefPendingResolution = new Set();\n    function isComponentDefPendingResolution(type) {\n        return componentDefPendingResolution.has(type);\n    }\n    function componentNeedsResolution(component) {\n        return !!((component.templateUrl && !component.template) ||\n            component.styleUrls && component.styleUrls.length);\n    }\n    function clearResolutionOfComponentResourcesQueue() {\n        var old = componentResourceResolutionQueue;\n        componentResourceResolutionQueue = new Map();\n        return old;\n    }\n    function restoreComponentResolutionQueue(queue) {\n        componentDefPendingResolution.clear();\n        queue.forEach(function (_, type) { return componentDefPendingResolution.add(type); });\n        componentResourceResolutionQueue = queue;\n    }\n    function unwrapResponse(response) {\n        return typeof response == 'string' ? response : response.text();\n    }\n    function componentDefResolved(type) {\n        componentDefPendingResolution.delete(type);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var _nextReferenceId = 0;\n    var MetadataOverrider = /** @class */ (function () {\n        function MetadataOverrider() {\n            this._references = new Map();\n        }\n        /**\n         * Creates a new instance for the given metadata class\n         * based on an old instance and overrides.\n         */\n        MetadataOverrider.prototype.overrideMetadata = function (metadataClass, oldMetadata, override) {\n            var props = {};\n            if (oldMetadata) {\n                _valueProps(oldMetadata).forEach(function (prop) { return props[prop] = oldMetadata[prop]; });\n            }\n            if (override.set) {\n                if (override.remove || override.add) {\n                    throw new Error(\"Cannot set and add/remove \" + core.ɵstringify(metadataClass) + \" at the same time!\");\n                }\n                setMetadata(props, override.set);\n            }\n            if (override.remove) {\n                removeMetadata(props, override.remove, this._references);\n            }\n            if (override.add) {\n                addMetadata(props, override.add);\n            }\n            return new metadataClass(props);\n        };\n        return MetadataOverrider;\n    }());\n    function removeMetadata(metadata, remove, references) {\n        var removeObjects = new Set();\n        var _loop_1 = function (prop) {\n            var removeValue = remove[prop];\n            if (removeValue instanceof Array) {\n                removeValue.forEach(function (value) { removeObjects.add(_propHashKey(prop, value, references)); });\n            }\n            else {\n                removeObjects.add(_propHashKey(prop, removeValue, references));\n            }\n        };\n        for (var prop in remove) {\n            _loop_1(prop);\n        }\n        var _loop_2 = function (prop) {\n            var propValue = metadata[prop];\n            if (propValue instanceof Array) {\n                metadata[prop] = propValue.filter(function (value) { return !removeObjects.has(_propHashKey(prop, value, references)); });\n            }\n            else {\n                if (removeObjects.has(_propHashKey(prop, propValue, references))) {\n                    metadata[prop] = undefined;\n                }\n            }\n        };\n        for (var prop in metadata) {\n            _loop_2(prop);\n        }\n    }\n    function addMetadata(metadata, add) {\n        for (var prop in add) {\n            var addValue = add[prop];\n            var propValue = metadata[prop];\n            if (propValue != null && propValue instanceof Array) {\n                metadata[prop] = propValue.concat(addValue);\n            }\n            else {\n                metadata[prop] = addValue;\n            }\n        }\n    }\n    function setMetadata(metadata, set) {\n        for (var prop in set) {\n            metadata[prop] = set[prop];\n        }\n    }\n    function _propHashKey(propName, propValue, references) {\n        var replacer = function (key, value) {\n            if (typeof value === 'function') {\n                value = _serializeReference(value, references);\n            }\n            return value;\n        };\n        return propName + \":\" + JSON.stringify(propValue, replacer);\n    }\n    function _serializeReference(ref, references) {\n        var id = references.get(ref);\n        if (!id) {\n            id = \"\" + core.ɵstringify(ref) + _nextReferenceId++;\n            references.set(ref, id);\n        }\n        return id;\n    }\n    function _valueProps(obj) {\n        var props = [];\n        // regular public props\n        Object.keys(obj).forEach(function (prop) {\n            if (!prop.startsWith('_')) {\n                props.push(prop);\n            }\n        });\n        // getters\n        var proto = obj;\n        while (proto = Object.getPrototypeOf(proto)) {\n            Object.keys(proto).forEach(function (protoProp) {\n                var desc = Object.getOwnPropertyDescriptor(proto, protoProp);\n                if (!protoProp.startsWith('_') && desc && 'get' in desc) {\n                    props.push(protoProp);\n                }\n            });\n        }\n        return props;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var reflection = new core.ɵReflectionCapabilities();\n    /**\n     * Allows to override ivy metadata for tests (via the `TestBed`).\n     */\n    var OverrideResolver = /** @class */ (function () {\n        function OverrideResolver() {\n            this.overrides = new Map();\n            this.resolved = new Map();\n        }\n        OverrideResolver.prototype.setOverrides = function (overrides) {\n            var _this = this;\n            this.overrides.clear();\n            overrides.forEach(function (_a) {\n                var _b = __read(_a, 2), type = _b[0], override = _b[1];\n                var overrides = _this.overrides.get(type) || [];\n                overrides.push(override);\n                _this.overrides.set(type, overrides);\n            });\n        };\n        OverrideResolver.prototype.getAnnotation = function (type) {\n            var annotations = reflection.annotations(type);\n            // Try to find the nearest known Type annotation and make sure that this annotation is an\n            // instance of the type we are looking for, so we can use it for resolution. Note: there might\n            // be multiple known annotations found due to the fact that Components can extend Directives (so\n            // both Directive and Component annotations would be present), so we always check if the known\n            // annotation has the right type.\n            for (var i = annotations.length - 1; i >= 0; i--) {\n                var annotation = annotations[i];\n                var isKnownType = annotation instanceof core.Directive || annotation instanceof core.Component ||\n                    annotation instanceof core.Pipe || annotation instanceof core.NgModule;\n                if (isKnownType) {\n                    return annotation instanceof this.type ? annotation : null;\n                }\n            }\n            return null;\n        };\n        OverrideResolver.prototype.resolve = function (type) {\n            var _this = this;\n            var resolved = this.resolved.get(type) || null;\n            if (!resolved) {\n                resolved = this.getAnnotation(type);\n                if (resolved) {\n                    var overrides = this.overrides.get(type);\n                    if (overrides) {\n                        var overrider_1 = new MetadataOverrider();\n                        overrides.forEach(function (override) {\n                            resolved = overrider_1.overrideMetadata(_this.type, resolved, override);\n                        });\n                    }\n                }\n                this.resolved.set(type, resolved);\n            }\n            return resolved;\n        };\n        return OverrideResolver;\n    }());\n    var DirectiveResolver = /** @class */ (function (_super) {\n        __extends(DirectiveResolver, _super);\n        function DirectiveResolver() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        Object.defineProperty(DirectiveResolver.prototype, \"type\", {\n            get: function () { return core.Directive; },\n            enumerable: true,\n            configurable: true\n        });\n        return DirectiveResolver;\n    }(OverrideResolver));\n    var ComponentResolver = /** @class */ (function (_super) {\n        __extends(ComponentResolver, _super);\n        function ComponentResolver() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        Object.defineProperty(ComponentResolver.prototype, \"type\", {\n            get: function () { return core.Component; },\n            enumerable: true,\n            configurable: true\n        });\n        return ComponentResolver;\n    }(OverrideResolver));\n    var PipeResolver = /** @class */ (function (_super) {\n        __extends(PipeResolver, _super);\n        function PipeResolver() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        Object.defineProperty(PipeResolver.prototype, \"type\", {\n            get: function () { return core.Pipe; },\n            enumerable: true,\n            configurable: true\n        });\n        return PipeResolver;\n    }(OverrideResolver));\n    var NgModuleResolver = /** @class */ (function (_super) {\n        __extends(NgModuleResolver, _super);\n        function NgModuleResolver() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        Object.defineProperty(NgModuleResolver.prototype, \"type\", {\n            get: function () { return core.NgModule; },\n            enumerable: true,\n            configurable: true\n        });\n        return NgModuleResolver;\n    }(OverrideResolver));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * An abstract class for inserting the root test component element in a platform independent way.\n     *\n     * @publicApi\n     */\n    var TestComponentRenderer = /** @class */ (function () {\n        function TestComponentRenderer() {\n        }\n        TestComponentRenderer.prototype.insertRootElement = function (rootElementId) { };\n        return TestComponentRenderer;\n    }());\n    /**\n     * @publicApi\n     */\n    var ComponentFixtureAutoDetect = new core.InjectionToken('ComponentFixtureAutoDetect');\n    /**\n     * @publicApi\n     */\n    var ComponentFixtureNoNgZone = new core.InjectionToken('ComponentFixtureNoNgZone');\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var _nextRootElementId = 0;\n    var EMPTY_ARRAY = [];\n    var UNDEFINED = Symbol('UNDEFINED');\n    /**\n     * @description\n     * Configures and initializes environment for unit testing and provides methods for\n     * creating components and services in unit tests.\n     *\n     * TestBed is the primary api for writing unit tests for Angular applications and libraries.\n     *\n     * Note: Use `TestBed` in tests. It will be set to either `TestBedViewEngine` or `TestBedRender3`\n     * according to the compiler used.\n     */\n    var TestBedRender3 = /** @class */ (function () {\n        function TestBedRender3() {\n            // Properties\n            this.platform = null;\n            this.ngModule = null;\n            // metadata overrides\n            this._moduleOverrides = [];\n            this._componentOverrides = [];\n            this._directiveOverrides = [];\n            this._pipeOverrides = [];\n            this._providerOverrides = [];\n            this._compilerProviders = [];\n            this._rootProviderOverrides = [];\n            this._providerOverridesByToken = new Map();\n            this._templateOverrides = new Map();\n            this._resolvers = null;\n            // test module configuration\n            this._providers = [];\n            this._compilerOptions = [];\n            this._declarations = [];\n            this._imports = [];\n            this._schemas = [];\n            this._activeFixtures = [];\n            this._compilerInjector = null;\n            this._moduleRef = null;\n            this._testModuleType = null;\n            this._instantiated = false;\n            this._globalCompilationChecked = false;\n            this._originalComponentResolutionQueue = null;\n            // Map that keeps initial version of component/directive/pipe defs in case\n            // we compile a Type again, thus overriding respective static fields. This is\n            // required to make sure we restore defs to their initial states between test runs\n            this._initialNgDefs = new Map();\n        }\n        /**\n         * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n         * angular module. These are common to every test in the suite.\n         *\n         * This may only be called once, to set up the common providers for the current test\n         * suite on the current platform. If you absolutely need to change the providers,\n         * first use `resetTestEnvironment`.\n         *\n         * Test modules and platforms for individual platforms are available from\n         * '@angular/<platform_name>/testing'.\n         *\n         * @publicApi\n         */\n        TestBedRender3.initTestEnvironment = function (ngModule, platform, aotSummaries) {\n            var testBed = _getTestBedRender3();\n            testBed.initTestEnvironment(ngModule, platform, aotSummaries);\n            return testBed;\n        };\n        /**\n         * Reset the providers for the test injector.\n         *\n         * @publicApi\n         */\n        TestBedRender3.resetTestEnvironment = function () { _getTestBedRender3().resetTestEnvironment(); };\n        TestBedRender3.configureCompiler = function (config) {\n            _getTestBedRender3().configureCompiler(config);\n            return TestBedRender3;\n        };\n        /**\n         * Allows overriding default providers, directives, pipes, modules of the test injector,\n         * which are defined in test_injector.js\n         */\n        TestBedRender3.configureTestingModule = function (moduleDef) {\n            _getTestBedRender3().configureTestingModule(moduleDef);\n            return TestBedRender3;\n        };\n        /**\n         * Compile components with a `templateUrl` for the test's NgModule.\n         * It is necessary to call this function\n         * as fetching urls is asynchronous.\n         */\n        TestBedRender3.compileComponents = function () { return _getTestBedRender3().compileComponents(); };\n        TestBedRender3.overrideModule = function (ngModule, override) {\n            _getTestBedRender3().overrideModule(ngModule, override);\n            return TestBedRender3;\n        };\n        TestBedRender3.overrideComponent = function (component, override) {\n            _getTestBedRender3().overrideComponent(component, override);\n            return TestBedRender3;\n        };\n        TestBedRender3.overrideDirective = function (directive, override) {\n            _getTestBedRender3().overrideDirective(directive, override);\n            return TestBedRender3;\n        };\n        TestBedRender3.overridePipe = function (pipe, override) {\n            _getTestBedRender3().overridePipe(pipe, override);\n            return TestBedRender3;\n        };\n        TestBedRender3.overrideTemplate = function (component, template) {\n            _getTestBedRender3().overrideComponent(component, { set: { template: template, templateUrl: null } });\n            return TestBedRender3;\n        };\n        /**\n         * Overrides the template of the given component, compiling the template\n         * in the context of the TestingModule.\n         *\n         * Note: This works for JIT and AOTed components as well.\n         */\n        TestBedRender3.overrideTemplateUsingTestingModule = function (component, template) {\n            _getTestBedRender3().overrideTemplateUsingTestingModule(component, template);\n            return TestBedRender3;\n        };\n        TestBedRender3.prototype.overrideTemplateUsingTestingModule = function (component, template) {\n            if (this._instantiated) {\n                throw new Error('Cannot override template when the test module has already been instantiated');\n            }\n            this._templateOverrides.set(component, template);\n        };\n        TestBedRender3.overrideProvider = function (token, provider) {\n            _getTestBedRender3().overrideProvider(token, provider);\n            return TestBedRender3;\n        };\n        TestBedRender3.deprecatedOverrideProvider = function (token, provider) {\n            _getTestBedRender3().deprecatedOverrideProvider(token, provider);\n            return TestBedRender3;\n        };\n        TestBedRender3.get = function (token, notFoundValue) {\n            if (notFoundValue === void 0) { notFoundValue = core.Injector.THROW_IF_NOT_FOUND; }\n            return _getTestBedRender3().get(token, notFoundValue);\n        };\n        TestBedRender3.createComponent = function (component) {\n            return _getTestBedRender3().createComponent(component);\n        };\n        TestBedRender3.resetTestingModule = function () {\n            _getTestBedRender3().resetTestingModule();\n            return TestBedRender3;\n        };\n        /**\n         * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n         * angular module. These are common to every test in the suite.\n         *\n         * This may only be called once, to set up the common providers for the current test\n         * suite on the current platform. If you absolutely need to change the providers,\n         * first use `resetTestEnvironment`.\n         *\n         * Test modules and platforms for individual platforms are available from\n         * '@angular/<platform_name>/testing'.\n         *\n         * @publicApi\n         */\n        TestBedRender3.prototype.initTestEnvironment = function (ngModule, platform, aotSummaries) {\n            if (this.platform || this.ngModule) {\n                throw new Error('Cannot set base providers because it has already been called');\n            }\n            this.platform = platform;\n            this.ngModule = ngModule;\n        };\n        /**\n         * Reset the providers for the test injector.\n         *\n         * @publicApi\n         */\n        TestBedRender3.prototype.resetTestEnvironment = function () {\n            this.resetTestingModule();\n            this.platform = null;\n            this.ngModule = null;\n        };\n        TestBedRender3.prototype.resetTestingModule = function () {\n            this._checkGlobalCompilationFinished();\n            core.ɵresetCompiledComponents();\n            // reset metadata overrides\n            this._moduleOverrides = [];\n            this._componentOverrides = [];\n            this._directiveOverrides = [];\n            this._pipeOverrides = [];\n            this._providerOverrides = [];\n            this._rootProviderOverrides = [];\n            this._providerOverridesByToken.clear();\n            this._templateOverrides.clear();\n            this._resolvers = null;\n            // reset test module config\n            this._providers = [];\n            this._compilerOptions = [];\n            this._compilerProviders = [];\n            this._declarations = [];\n            this._imports = [];\n            this._schemas = [];\n            this._moduleRef = null;\n            this._testModuleType = null;\n            this._compilerInjector = null;\n            this._instantiated = false;\n            this._activeFixtures.forEach(function (fixture) {\n                try {\n                    fixture.destroy();\n                }\n                catch (e) {\n                    console.error('Error during cleanup of component', {\n                        component: fixture.componentInstance,\n                        stacktrace: e,\n                    });\n                }\n            });\n            this._activeFixtures = [];\n            // restore initial component/directive/pipe defs\n            this._initialNgDefs.forEach(function (value, type) {\n                var _a = __read(value, 2), prop = _a[0], descriptor = _a[1];\n                if (!descriptor) {\n                    // Delete operations are generally undesirable since they have performance implications on\n                    // objects they were applied to. In this particular case, situations where this code is\n                    // invoked should be quite rare to cause any noticable impact, since it's applied only to\n                    // some test cases (for example when class with no annotations extends some @Component) when\n                    // we need to clear 'ngComponentDef' field on a given class to restore its original state\n                    // (before applying overrides and running tests).\n                    delete type[prop];\n                }\n                else {\n                    Object.defineProperty(type, prop, descriptor);\n                }\n            });\n            this._initialNgDefs.clear();\n            this._restoreComponentResolutionQueue();\n        };\n        TestBedRender3.prototype.configureCompiler = function (config) {\n            var _a, _b;\n            if (config.useJit != null) {\n                throw new Error('the Render3 compiler JiT mode is not configurable !');\n            }\n            if (config.providers) {\n                (_a = this._providerOverrides).push.apply(_a, __spread(config.providers));\n                (_b = this._compilerProviders).push.apply(_b, __spread(config.providers));\n            }\n        };\n        TestBedRender3.prototype.configureTestingModule = function (moduleDef) {\n            var _a, _b, _c, _d;\n            this._assertNotInstantiated('R3TestBed.configureTestingModule', 'configure the test module');\n            if (moduleDef.providers) {\n                (_a = this._providers).push.apply(_a, __spread(moduleDef.providers));\n            }\n            if (moduleDef.declarations) {\n                (_b = this._declarations).push.apply(_b, __spread(moduleDef.declarations));\n            }\n            if (moduleDef.imports) {\n                (_c = this._imports).push.apply(_c, __spread(moduleDef.imports));\n            }\n            if (moduleDef.schemas) {\n                (_d = this._schemas).push.apply(_d, __spread(moduleDef.schemas));\n            }\n        };\n        TestBedRender3.prototype.compileComponents = function () {\n            var _this = this;\n            this._clearComponentResolutionQueue();\n            var resolvers = this._getResolvers();\n            var declarations = flatten(this._declarations || EMPTY_ARRAY, core.resolveForwardRef);\n            var componentOverrides = [];\n            var providerOverrides = [];\n            var hasAsyncResources = false;\n            // Compile the components declared by this module\n            // TODO(FW-1178): `compileComponents` should not duplicate `_compileNgModule` logic\n            declarations.forEach(function (declaration) {\n                var component = resolvers.component.resolve(declaration);\n                if (component) {\n                    if (!declaration.hasOwnProperty(core.ɵNG_COMPONENT_DEF) ||\n                        isComponentDefPendingResolution(declaration) || //\n                        // Compiler provider overrides (like ResourceLoader) might affect the outcome of\n                        // compilation, so we trigger `compileComponent` in case we have compilers overrides.\n                        _this._compilerProviders.length > 0 ||\n                        _this._hasTypeOverrides(declaration, _this._componentOverrides) ||\n                        _this._hasTemplateOverrides(declaration)) {\n                        _this._storeNgDef(core.ɵNG_COMPONENT_DEF, declaration);\n                        // We make a copy of the metadata to ensure that we don't mutate the original metadata\n                        var metadata = __assign({}, component);\n                        core.ɵcompileComponent(declaration, metadata);\n                        componentOverrides.push([declaration, metadata]);\n                        hasAsyncResources = hasAsyncResources || componentNeedsResolution(component);\n                    }\n                    else if (_this._hasProviderOverrides(component.providers)) {\n                        // Queue provider override operations, since fetching ngComponentDef (to patch it) might\n                        // trigger re-compilation, which will fail because component resources are not yet fully\n                        // resolved at this moment. The queue is drained once all resources are resolved.\n                        providerOverrides.push(function () { return _this._patchDefWithProviderOverrides(declaration, core.ɵNG_COMPONENT_DEF); });\n                    }\n                }\n            });\n            var overrideComponents = function () {\n                componentOverrides.forEach(function (override) {\n                    // Override the existing metadata, ensuring that the resolved resources\n                    // are only available until the next TestBed reset (when `resetTestingModule` is called)\n                    _this.overrideComponent(override[0], { set: override[1] });\n                });\n                providerOverrides.forEach(function (overrideFn) { return overrideFn(); });\n            };\n            // If the component has no async resources (templateUrl, styleUrls), we can finish\n            // synchronously. This is important so that users who mistakenly treat `compileComponents`\n            // as synchronous don't encounter an error, as ViewEngine was tolerant of this.\n            if (!hasAsyncResources) {\n                overrideComponents();\n                return Promise.resolve();\n            }\n            else {\n                var resourceLoader_1;\n                return resolveComponentResources(function (url) {\n                    if (!resourceLoader_1) {\n                        resourceLoader_1 = _this.compilerInjector.get(compiler.ResourceLoader);\n                    }\n                    return Promise.resolve(resourceLoader_1.get(url));\n                })\n                    .then(overrideComponents);\n            }\n        };\n        TestBedRender3.prototype.get = function (token, notFoundValue) {\n            if (notFoundValue === void 0) { notFoundValue = core.Injector.THROW_IF_NOT_FOUND; }\n            this._initIfNeeded();\n            if (token === TestBedRender3) {\n                return this;\n            }\n            var result = this._moduleRef.injector.get(token, UNDEFINED);\n            return result === UNDEFINED ? this.compilerInjector.get(token, notFoundValue) : result;\n        };\n        TestBedRender3.prototype.execute = function (tokens, fn, context) {\n            var _this = this;\n            this._initIfNeeded();\n            var params = tokens.map(function (t) { return _this.get(t); });\n            return fn.apply(context, params);\n        };\n        TestBedRender3.prototype.overrideModule = function (ngModule, override) {\n            this._assertNotInstantiated('overrideModule', 'override module metadata');\n            this._moduleOverrides.push([ngModule, override]);\n        };\n        TestBedRender3.prototype.overrideComponent = function (component, override) {\n            this._assertNotInstantiated('overrideComponent', 'override component metadata');\n            this._componentOverrides.push([component, override]);\n        };\n        TestBedRender3.prototype.overrideDirective = function (directive, override) {\n            this._assertNotInstantiated('overrideDirective', 'override directive metadata');\n            this._directiveOverrides.push([directive, override]);\n        };\n        TestBedRender3.prototype.overridePipe = function (pipe, override) {\n            this._assertNotInstantiated('overridePipe', 'override pipe metadata');\n            this._pipeOverrides.push([pipe, override]);\n        };\n        /**\n         * Overwrites all providers for the given token with the given provider definition.\n         */\n        TestBedRender3.prototype.overrideProvider = function (token, provider) {\n            var providerDef = provider.useFactory ?\n                { provide: token, useFactory: provider.useFactory, deps: provider.deps || [] } :\n                { provide: token, useValue: provider.useValue };\n            var injectableDef;\n            var isRoot = (typeof token !== 'string' && (injectableDef = core.ɵgetInjectableDef(token)) &&\n                injectableDef.providedIn === 'root');\n            var overridesBucket = isRoot ? this._rootProviderOverrides : this._providerOverrides;\n            overridesBucket.push(providerDef);\n            // keep all overrides grouped by token as well for fast lookups using token\n            var overridesForToken = this._providerOverridesByToken.get(token) || [];\n            overridesForToken.push(providerDef);\n            this._providerOverridesByToken.set(token, overridesForToken);\n        };\n        TestBedRender3.prototype.deprecatedOverrideProvider = function (token, provider) {\n            // HACK: This is NOT the correct implementation for deprecatedOverrideProvider.\n            // To implement it in a backward compatible way, we would need to record some state\n            // so we know to prevent eager instantiation of NgModules. However, we don't plan\n            // to implement this at all since the API is deprecated and scheduled for removal\n            // in V8. This hack is here temporarily for Ivy testing until we transition apps\n            // inside Google to the overrideProvider API. At that point, we will be able to\n            // remove this method entirely. In the meantime, we can use overrideProvider to\n            // test apps with Ivy that don't care about eager instantiation. This fixes 85%\n            // of cases in our blueprint.\n            this.overrideProvider(token, provider);\n        };\n        TestBedRender3.prototype.createComponent = function (type) {\n            var _this = this;\n            this._initIfNeeded();\n            var testComponentRenderer = this.get(TestComponentRenderer);\n            var rootElId = \"root\" + _nextRootElementId++;\n            testComponentRenderer.insertRootElement(rootElId);\n            var componentDef = type.ngComponentDef;\n            if (!componentDef) {\n                throw new Error(\"It looks like '\" + core.ɵstringify(type) + \"' has not been IVY compiled - it has no 'ngComponentDef' field\");\n            }\n            var noNgZone = this.get(ComponentFixtureNoNgZone, false);\n            var autoDetect = this.get(ComponentFixtureAutoDetect, false);\n            var ngZone = noNgZone ? null : this.get(core.NgZone, null);\n            var componentFactory = new core.ɵRender3ComponentFactory(componentDef);\n            var initComponent = function () {\n                var componentRef = componentFactory.create(core.Injector.NULL, [], \"#\" + rootElId, _this._moduleRef);\n                return new ComponentFixture(componentRef, ngZone, autoDetect);\n            };\n            var fixture = ngZone ? ngZone.run(initComponent) : initComponent();\n            this._activeFixtures.push(fixture);\n            return fixture;\n        };\n        // internal methods\n        TestBedRender3.prototype._initIfNeeded = function () {\n            this._checkGlobalCompilationFinished();\n            if (this._instantiated) {\n                return;\n            }\n            this._resolvers = this._getResolvers();\n            this._testModuleType = this._createTestModule();\n            this._compileNgModule(this._testModuleType);\n            var parentInjector = this.platform.injector;\n            this._moduleRef = new core.ɵRender3NgModuleRef(this._testModuleType, parentInjector);\n            // ApplicationInitStatus.runInitializers() is marked @internal\n            // to core. Cast it to any before accessing it.\n            this._moduleRef.injector.get(core.ApplicationInitStatus).runInitializers();\n            this._instantiated = true;\n        };\n        TestBedRender3.prototype._storeNgDef = function (prop, type) {\n            if (!this._initialNgDefs.has(type)) {\n                var currentDef = Object.getOwnPropertyDescriptor(type, prop);\n                this._initialNgDefs.set(type, [prop, currentDef]);\n            }\n        };\n        // get overrides for a specific provider (if any)\n        TestBedRender3.prototype._getProviderOverrides = function (provider) {\n            var token = provider && typeof provider === 'object' && provider.hasOwnProperty('provide') ?\n                provider.provide :\n                provider;\n            return this._providerOverridesByToken.get(token) || [];\n        };\n        // creates resolvers taking overrides into account\n        TestBedRender3.prototype._getResolvers = function () {\n            var module = new NgModuleResolver();\n            module.setOverrides(this._moduleOverrides);\n            var component = new ComponentResolver();\n            component.setOverrides(this._componentOverrides);\n            var directive = new DirectiveResolver();\n            directive.setOverrides(this._directiveOverrides);\n            var pipe = new PipeResolver();\n            pipe.setOverrides(this._pipeOverrides);\n            return { module: module, component: component, directive: directive, pipe: pipe };\n        };\n        TestBedRender3.prototype._assertNotInstantiated = function (methodName, methodDescription) {\n            if (this._instantiated) {\n                throw new Error(\"Cannot \" + methodDescription + \" when the test module has already been instantiated. \" +\n                    (\"Make sure you are not using `inject` before `\" + methodName + \"`.\"));\n            }\n        };\n        TestBedRender3.prototype._createTestModule = function () {\n            var _this = this;\n            var rootProviderOverrides = this._rootProviderOverrides;\n            var RootScopeModule = /** @class */ (function () {\n                function RootScopeModule() {\n                }\n                RootScopeModule = __decorate([\n                    core.NgModule({\n                        providers: __spread(rootProviderOverrides),\n                        jit: true,\n                    })\n                ], RootScopeModule);\n                return RootScopeModule;\n            }());\n            var ngZone = new core.NgZone({ enableLongStackTrace: true });\n            var providers = __spread([\n                { provide: core.NgZone, useValue: ngZone },\n                { provide: core.Compiler, useFactory: function () { return new R3TestCompiler(_this); } },\n                { provide: core.ErrorHandler, useClass: R3TestErrorHandler }\n            ], this._providers, this._providerOverrides);\n            var declarations = this._declarations;\n            var imports = [RootScopeModule, this.ngModule, this._imports];\n            var schemas = this._schemas;\n            var DynamicTestModule = /** @class */ (function () {\n                function DynamicTestModule() {\n                }\n                DynamicTestModule = __decorate([\n                    core.NgModule({ providers: providers, declarations: declarations, imports: imports, schemas: schemas, jit: true })\n                ], DynamicTestModule);\n                return DynamicTestModule;\n            }());\n            return DynamicTestModule;\n        };\n        Object.defineProperty(TestBedRender3.prototype, \"compilerInjector\", {\n            get: function () {\n                if (this._compilerInjector !== null) {\n                    return this._compilerInjector;\n                }\n                var providers = [];\n                var compilerOptions = this.platform.injector.get(core.COMPILER_OPTIONS);\n                compilerOptions.forEach(function (opts) {\n                    if (opts.providers) {\n                        providers.push(opts.providers);\n                    }\n                });\n                providers.push.apply(providers, __spread(this._compilerProviders));\n                // TODO(ocombe): make this work with an Injector directly instead of creating a module for it\n                var CompilerModule = /** @class */ (function () {\n                    function CompilerModule() {\n                    }\n                    CompilerModule = __decorate([\n                        core.NgModule({ providers: providers })\n                    ], CompilerModule);\n                    return CompilerModule;\n                }());\n                var CompilerModuleFactory = new core.ɵNgModuleFactory(CompilerModule);\n                this._compilerInjector = CompilerModuleFactory.create(this.platform.injector).injector;\n                return this._compilerInjector;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Clears current components resolution queue, but stores the state of the queue, so we can\n         * restore it later. Clearing the queue is required before we try to compile components (via\n         * `TestBed.compileComponents`), so that component defs are in sync with the resolution queue.\n         */\n        TestBedRender3.prototype._clearComponentResolutionQueue = function () {\n            var _this = this;\n            if (this._originalComponentResolutionQueue === null) {\n                this._originalComponentResolutionQueue = new Map();\n            }\n            clearResolutionOfComponentResourcesQueue().forEach(function (value, key) { return _this._originalComponentResolutionQueue.set(key, value); });\n        };\n        /**\n         * Restores component resolution queue to the previously saved state. This operation is performed\n         * as a part of restoring the state after completion of the current set of tests (that might\n         * potentially mutate the state).\n         */\n        TestBedRender3.prototype._restoreComponentResolutionQueue = function () {\n            if (this._originalComponentResolutionQueue !== null) {\n                restoreComponentResolutionQueue(this._originalComponentResolutionQueue);\n                this._originalComponentResolutionQueue = null;\n            }\n        };\n        // TODO(FW-1179): define better types for all Provider-related operations, avoid using `any`.\n        TestBedRender3.prototype._getProvidersOverrides = function (providers) {\n            var _this = this;\n            if (!providers || !providers.length)\n                return [];\n            // There are two flattening operations here. The inner flatten() operates on the metadata's\n            // providers and applies a mapping function which retrieves overrides for each incoming\n            // provider. The outer flatten() then flattens the produced overrides array. If this is not\n            // done, the array can contain other empty arrays (e.g. `[[], []]`) which leak into the\n            // providers array and contaminate any error messages that might be generated.\n            return flatten(flatten(providers, function (provider) { return _this._getProviderOverrides(provider); }));\n        };\n        TestBedRender3.prototype._hasProviderOverrides = function (providers) {\n            return this._getProvidersOverrides(providers).length > 0;\n        };\n        TestBedRender3.prototype._hasTypeOverrides = function (type, overrides) {\n            return overrides.some(function (override) { return override[0] === type; });\n        };\n        TestBedRender3.prototype._hasTemplateOverrides = function (type) { return this._templateOverrides.has(type); };\n        TestBedRender3.prototype._getMetaWithOverrides = function (meta, type) {\n            var overrides = {};\n            if (meta.providers && meta.providers.length) {\n                var providerOverrides = this._getProvidersOverrides(meta.providers);\n                if (providerOverrides.length) {\n                    overrides.providers = __spread(meta.providers, providerOverrides);\n                }\n            }\n            var hasTemplateOverride = !!type && this._templateOverrides.has(type);\n            if (hasTemplateOverride) {\n                overrides.template = this._templateOverrides.get(type);\n            }\n            return Object.keys(overrides).length ? __assign({}, meta, overrides) : meta;\n        };\n        TestBedRender3.prototype._patchDefWithProviderOverrides = function (declaration, field) {\n            var _this = this;\n            var def = declaration[field];\n            if (def && def.providersResolver) {\n                this._storeNgDef(field, declaration);\n                var resolver_1 = def.providersResolver;\n                var processProvidersFn_1 = function (providers) {\n                    var overrides = _this._getProvidersOverrides(providers);\n                    return __spread(providers, overrides);\n                };\n                def.providersResolver = function (ngDef) { return resolver_1(ngDef, processProvidersFn_1); };\n            }\n        };\n        /**\n         * @internal\n         */\n        TestBedRender3.prototype._getModuleResolver = function () { return this._resolvers.module; };\n        /**\n         * @internal\n         */\n        TestBedRender3.prototype._compileNgModule = function (moduleType) {\n            var _this = this;\n            var ngModule = this._resolvers.module.resolve(moduleType);\n            if (ngModule === null) {\n                throw new Error(core.ɵstringify(moduleType) + \" has no @NgModule annotation\");\n            }\n            this._storeNgDef(core.ɵNG_MODULE_DEF, moduleType);\n            this._storeNgDef(core.ɵNG_INJECTOR_DEF, moduleType);\n            var metadata = this._getMetaWithOverrides(ngModule);\n            core.ɵcompileNgModuleDefs(moduleType, metadata);\n            var declarations = flatten(ngModule.declarations || EMPTY_ARRAY, core.resolveForwardRef);\n            var declaredComponents = [];\n            // Compile the components, directives and pipes declared by this module\n            declarations.forEach(function (declaration) {\n                var component = _this._resolvers.component.resolve(declaration);\n                if (component) {\n                    if (!declaration.hasOwnProperty(core.ɵNG_COMPONENT_DEF) ||\n                        _this._hasTypeOverrides(declaration, _this._componentOverrides) ||\n                        _this._hasTemplateOverrides(declaration)) {\n                        _this._storeNgDef(core.ɵNG_COMPONENT_DEF, declaration);\n                        var metadata_1 = _this._getMetaWithOverrides(component, declaration);\n                        core.ɵcompileComponent(declaration, metadata_1);\n                    }\n                    else if (_this._hasProviderOverrides(component.providers)) {\n                        _this._patchDefWithProviderOverrides(declaration, core.ɵNG_COMPONENT_DEF);\n                    }\n                    declaredComponents.push(declaration);\n                    return;\n                }\n                var directive = _this._resolvers.directive.resolve(declaration);\n                if (directive) {\n                    if (!declaration.hasOwnProperty(core.ɵNG_DIRECTIVE_DEF) ||\n                        _this._hasTypeOverrides(declaration, _this._directiveOverrides)) {\n                        _this._storeNgDef(core.ɵNG_DIRECTIVE_DEF, declaration);\n                        var metadata_2 = _this._getMetaWithOverrides(directive);\n                        core.ɵcompileDirective(declaration, metadata_2);\n                    }\n                    else if (_this._hasProviderOverrides(directive.providers)) {\n                        _this._patchDefWithProviderOverrides(declaration, core.ɵNG_DIRECTIVE_DEF);\n                    }\n                    return;\n                }\n                var pipe = _this._resolvers.pipe.resolve(declaration);\n                if (pipe) {\n                    if (!declaration.hasOwnProperty(core.ɵNG_PIPE_DEF) ||\n                        _this._hasTypeOverrides(declaration, _this._pipeOverrides)) {\n                        _this._storeNgDef(core.ɵNG_PIPE_DEF, declaration);\n                        core.ɵcompilePipe(declaration, pipe);\n                    }\n                    return;\n                }\n            });\n            // Compile transitive modules, components, directives and pipes\n            var calcTransitiveScopesFor = function (moduleType) { return core.ɵtransitiveScopesFor(moduleType, function (ngModule) { return _this._compileNgModule(ngModule); }); };\n            var transitiveScope = calcTransitiveScopesFor(moduleType);\n            declaredComponents.forEach(function (cmp) {\n                var scope = _this._templateOverrides.has(cmp) ?\n                    // if we have template override via `TestBed.overrideTemplateUsingTestingModule` -\n                    // define Component scope as TestingModule scope, instead of the scope of NgModule\n                    // where this Component was declared\n                    // TODO: This is only a partial fix. Should be fixed completely with FW-1178 refactor.\n                    core.ɵtransitiveScopesFor(_this._testModuleType) :\n                    transitiveScope;\n                core.ɵpatchComponentDefWithScope(cmp.ngComponentDef, scope);\n            });\n        };\n        /**\n         * @internal\n         */\n        TestBedRender3.prototype._getComponentFactories = function (moduleType) {\n            var _this = this;\n            return maybeUnwrapFn(moduleType.ngModuleDef.declarations).reduce(function (factories, declaration) {\n                var componentDef = declaration.ngComponentDef;\n                componentDef && factories.push(new core.ɵRender3ComponentFactory(componentDef, _this._moduleRef));\n                return factories;\n            }, []);\n        };\n        /**\n         * Check whether the module scoping queue should be flushed, and flush it if needed.\n         *\n         * When the TestBed is reset, it clears the JIT module compilation queue, cancelling any\n         * in-progress module compilation. This creates a potential hazard - the very first time the\n         * TestBed is initialized (or if it's reset without being initialized), there may be pending\n         * compilations of modules declared in global scope. These compilations should be finished.\n         *\n         * To ensure that globally declared modules have their components scoped properly, this function\n         * is called whenever TestBed is initialized or reset. The _first_ time that this happens, prior\n         * to any other operations, the scoping queue is flushed.\n         */\n        TestBedRender3.prototype._checkGlobalCompilationFinished = function () {\n            // !this._instantiated should not be necessary, but is left in as an additional guard that\n            // compilations queued in tests (after instantiation) are never flushed accidentally.\n            if (!this._globalCompilationChecked && !this._instantiated) {\n                core.ɵflushModuleScopingQueueAsMuchAsPossible();\n            }\n            this._globalCompilationChecked = true;\n        };\n        return TestBedRender3;\n    }());\n    var testBed;\n    function _getTestBedRender3() {\n        return testBed = testBed || new TestBedRender3();\n    }\n    function flatten(values, mapFn) {\n        var out = [];\n        values.forEach(function (value) {\n            if (Array.isArray(value)) {\n                out.push.apply(out, __spread(flatten(value, mapFn)));\n            }\n            else {\n                out.push(mapFn ? mapFn(value) : value);\n            }\n        });\n        return out;\n    }\n    var R3TestCompiler = /** @class */ (function () {\n        function R3TestCompiler(testBed) {\n            this.testBed = testBed;\n        }\n        R3TestCompiler.prototype.compileModuleSync = function (moduleType) {\n            this.testBed._compileNgModule(moduleType);\n            return new core.ɵNgModuleFactory(moduleType);\n        };\n        R3TestCompiler.prototype.compileModuleAsync = function (moduleType) {\n            return Promise.resolve(this.compileModuleSync(moduleType));\n        };\n        R3TestCompiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {\n            var ngModuleFactory = this.compileModuleSync(moduleType);\n            var componentFactories = this.testBed._getComponentFactories(moduleType);\n            return new core.ModuleWithComponentFactories(ngModuleFactory, componentFactories);\n        };\n        R3TestCompiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {\n            return Promise.resolve(this.compileModuleAndAllComponentsSync(moduleType));\n        };\n        R3TestCompiler.prototype.clearCache = function () { };\n        R3TestCompiler.prototype.clearCacheFor = function (type) { };\n        R3TestCompiler.prototype.getModuleId = function (moduleType) {\n            var meta = this.testBed._getModuleResolver().resolve(moduleType);\n            return meta && meta.id || undefined;\n        };\n        return R3TestCompiler;\n    }());\n    /** Error handler used for tests. Rethrows errors rather than logging them out. */\n    var R3TestErrorHandler = /** @class */ (function (_super) {\n        __extends(R3TestErrorHandler, _super);\n        function R3TestErrorHandler() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        R3TestErrorHandler.prototype.handleError = function (error) { throw error; };\n        return R3TestErrorHandler;\n    }(core.ErrorHandler));\n    /**\n     * Unwrap a value which might be behind a closure (for forward declaration reasons).\n     */\n    function maybeUnwrapFn(value) {\n        if (value instanceof Function) {\n            return value();\n        }\n        else {\n            return value;\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function unimplemented() {\n        throw Error('unimplemented');\n    }\n    /**\n     * Special interface to the compiler only used by testing\n     *\n     * @publicApi\n     */\n    var TestingCompiler = /** @class */ (function (_super) {\n        __extends(TestingCompiler, _super);\n        function TestingCompiler() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        Object.defineProperty(TestingCompiler.prototype, \"injector\", {\n            get: function () { throw unimplemented(); },\n            enumerable: true,\n            configurable: true\n        });\n        TestingCompiler.prototype.overrideModule = function (module, overrides) {\n            throw unimplemented();\n        };\n        TestingCompiler.prototype.overrideDirective = function (directive, overrides) {\n            throw unimplemented();\n        };\n        TestingCompiler.prototype.overrideComponent = function (component, overrides) {\n            throw unimplemented();\n        };\n        TestingCompiler.prototype.overridePipe = function (directive, overrides) {\n            throw unimplemented();\n        };\n        /**\n         * Allows to pass the compile summary from AOT compilation to the JIT compiler,\n         * so that it can use the code generated by AOT.\n         */\n        TestingCompiler.prototype.loadAotSummaries = function (summaries) { throw unimplemented(); };\n        /**\n         * Gets the component factory for the given component.\n         * This assumes that the component has been compiled before calling this call using\n         * `compileModuleAndAllComponents*`.\n         */\n        TestingCompiler.prototype.getComponentFactory = function (component) { throw unimplemented(); };\n        /**\n         * Returns the component type that is stored in the given error.\n         * This can be used for errors created by compileModule...\n         */\n        TestingCompiler.prototype.getComponentFromError = function (error) { throw unimplemented(); };\n        TestingCompiler = __decorate([\n            core.Injectable()\n        ], TestingCompiler);\n        return TestingCompiler;\n    }(core.Compiler));\n    /**\n     * A factory for creating a Compiler\n     *\n     * @publicApi\n     */\n    var TestingCompilerFactory = /** @class */ (function () {\n        function TestingCompilerFactory() {\n        }\n        return TestingCompilerFactory;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var UNDEFINED$1 = new Object();\n    var _nextRootElementId$1 = 0;\n    /**\n     * @description\n     * Configures and initializes environment for unit testing and provides methods for\n     * creating components and services in unit tests.\n     *\n     * `TestBed` is the primary api for writing unit tests for Angular applications and libraries.\n     *\n     * Note: Use `TestBed` in tests. It will be set to either `TestBedViewEngine` or `TestBedRender3`\n     * according to the compiler used.\n     */\n    var TestBedViewEngine = /** @class */ (function () {\n        function TestBedViewEngine() {\n            this._instantiated = false;\n            this._compiler = null;\n            this._moduleRef = null;\n            this._moduleFactory = null;\n            this._compilerOptions = [];\n            this._moduleOverrides = [];\n            this._componentOverrides = [];\n            this._directiveOverrides = [];\n            this._pipeOverrides = [];\n            this._providers = [];\n            this._declarations = [];\n            this._imports = [];\n            this._schemas = [];\n            this._activeFixtures = [];\n            this._testEnvAotSummaries = function () { return []; };\n            this._aotSummaries = [];\n            this._templateOverrides = [];\n            this._isRoot = true;\n            this._rootProviderOverrides = [];\n            this.platform = null;\n            this.ngModule = null;\n        }\n        /**\n         * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n         * angular module. These are common to every test in the suite.\n         *\n         * This may only be called once, to set up the common providers for the current test\n         * suite on the current platform. If you absolutely need to change the providers,\n         * first use `resetTestEnvironment`.\n         *\n         * Test modules and platforms for individual platforms are available from\n         * '@angular/<platform_name>/testing'.\n         */\n        TestBedViewEngine.initTestEnvironment = function (ngModule, platform, aotSummaries) {\n            var testBed = _getTestBedViewEngine();\n            testBed.initTestEnvironment(ngModule, platform, aotSummaries);\n            return testBed;\n        };\n        /**\n         * Reset the providers for the test injector.\n         */\n        TestBedViewEngine.resetTestEnvironment = function () { _getTestBedViewEngine().resetTestEnvironment(); };\n        TestBedViewEngine.resetTestingModule = function () {\n            _getTestBedViewEngine().resetTestingModule();\n            return TestBedViewEngine;\n        };\n        /**\n         * Allows overriding default compiler providers and settings\n         * which are defined in test_injector.js\n         */\n        TestBedViewEngine.configureCompiler = function (config) {\n            _getTestBedViewEngine().configureCompiler(config);\n            return TestBedViewEngine;\n        };\n        /**\n         * Allows overriding default providers, directives, pipes, modules of the test injector,\n         * which are defined in test_injector.js\n         */\n        TestBedViewEngine.configureTestingModule = function (moduleDef) {\n            _getTestBedViewEngine().configureTestingModule(moduleDef);\n            return TestBedViewEngine;\n        };\n        /**\n         * Compile components with a `templateUrl` for the test's NgModule.\n         * It is necessary to call this function\n         * as fetching urls is asynchronous.\n         */\n        TestBedViewEngine.compileComponents = function () { return getTestBed().compileComponents(); };\n        TestBedViewEngine.overrideModule = function (ngModule, override) {\n            _getTestBedViewEngine().overrideModule(ngModule, override);\n            return TestBedViewEngine;\n        };\n        TestBedViewEngine.overrideComponent = function (component, override) {\n            _getTestBedViewEngine().overrideComponent(component, override);\n            return TestBedViewEngine;\n        };\n        TestBedViewEngine.overrideDirective = function (directive, override) {\n            _getTestBedViewEngine().overrideDirective(directive, override);\n            return TestBedViewEngine;\n        };\n        TestBedViewEngine.overridePipe = function (pipe, override) {\n            _getTestBedViewEngine().overridePipe(pipe, override);\n            return TestBedViewEngine;\n        };\n        TestBedViewEngine.overrideTemplate = function (component, template) {\n            _getTestBedViewEngine().overrideComponent(component, { set: { template: template, templateUrl: null } });\n            return TestBedViewEngine;\n        };\n        /**\n         * Overrides the template of the given component, compiling the template\n         * in the context of the TestingModule.\n         *\n         * Note: This works for JIT and AOTed components as well.\n         */\n        TestBedViewEngine.overrideTemplateUsingTestingModule = function (component, template) {\n            _getTestBedViewEngine().overrideTemplateUsingTestingModule(component, template);\n            return TestBedViewEngine;\n        };\n        TestBedViewEngine.overrideProvider = function (token, provider) {\n            _getTestBedViewEngine().overrideProvider(token, provider);\n            return TestBedViewEngine;\n        };\n        TestBedViewEngine.deprecatedOverrideProvider = function (token, provider) {\n            _getTestBedViewEngine().deprecatedOverrideProvider(token, provider);\n            return TestBedViewEngine;\n        };\n        TestBedViewEngine.get = function (token, notFoundValue) {\n            if (notFoundValue === void 0) { notFoundValue = core.Injector.THROW_IF_NOT_FOUND; }\n            return _getTestBedViewEngine().get(token, notFoundValue);\n        };\n        TestBedViewEngine.createComponent = function (component) {\n            return _getTestBedViewEngine().createComponent(component);\n        };\n        /**\n         * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n         * angular module. These are common to every test in the suite.\n         *\n         * This may only be called once, to set up the common providers for the current test\n         * suite on the current platform. If you absolutely need to change the providers,\n         * first use `resetTestEnvironment`.\n         *\n         * Test modules and platforms for individual platforms are available from\n         * '@angular/<platform_name>/testing'.\n         */\n        TestBedViewEngine.prototype.initTestEnvironment = function (ngModule, platform, aotSummaries) {\n            if (this.platform || this.ngModule) {\n                throw new Error('Cannot set base providers because it has already been called');\n            }\n            this.platform = platform;\n            this.ngModule = ngModule;\n            if (aotSummaries) {\n                this._testEnvAotSummaries = aotSummaries;\n            }\n        };\n        /**\n         * Reset the providers for the test injector.\n         */\n        TestBedViewEngine.prototype.resetTestEnvironment = function () {\n            this.resetTestingModule();\n            this.platform = null;\n            this.ngModule = null;\n            this._testEnvAotSummaries = function () { return []; };\n        };\n        TestBedViewEngine.prototype.resetTestingModule = function () {\n            core.ɵclearOverrides();\n            this._aotSummaries = [];\n            this._templateOverrides = [];\n            this._compiler = null;\n            this._moduleOverrides = [];\n            this._componentOverrides = [];\n            this._directiveOverrides = [];\n            this._pipeOverrides = [];\n            this._isRoot = true;\n            this._rootProviderOverrides = [];\n            this._moduleRef = null;\n            this._moduleFactory = null;\n            this._compilerOptions = [];\n            this._providers = [];\n            this._declarations = [];\n            this._imports = [];\n            this._schemas = [];\n            this._instantiated = false;\n            this._activeFixtures.forEach(function (fixture) {\n                try {\n                    fixture.destroy();\n                }\n                catch (e) {\n                    console.error('Error during cleanup of component', {\n                        component: fixture.componentInstance,\n                        stacktrace: e,\n                    });\n                }\n            });\n            this._activeFixtures = [];\n        };\n        TestBedViewEngine.prototype.configureCompiler = function (config) {\n            this._assertNotInstantiated('TestBed.configureCompiler', 'configure the compiler');\n            this._compilerOptions.push(config);\n        };\n        TestBedViewEngine.prototype.configureTestingModule = function (moduleDef) {\n            var _a, _b, _c, _d;\n            this._assertNotInstantiated('TestBed.configureTestingModule', 'configure the test module');\n            if (moduleDef.providers) {\n                (_a = this._providers).push.apply(_a, __spread(moduleDef.providers));\n            }\n            if (moduleDef.declarations) {\n                (_b = this._declarations).push.apply(_b, __spread(moduleDef.declarations));\n            }\n            if (moduleDef.imports) {\n                (_c = this._imports).push.apply(_c, __spread(moduleDef.imports));\n            }\n            if (moduleDef.schemas) {\n                (_d = this._schemas).push.apply(_d, __spread(moduleDef.schemas));\n            }\n            if (moduleDef.aotSummaries) {\n                this._aotSummaries.push(moduleDef.aotSummaries);\n            }\n        };\n        TestBedViewEngine.prototype.compileComponents = function () {\n            var _this = this;\n            if (this._moduleFactory || this._instantiated) {\n                return Promise.resolve(null);\n            }\n            var moduleType = this._createCompilerAndModule();\n            return this._compiler.compileModuleAndAllComponentsAsync(moduleType)\n                .then(function (moduleAndComponentFactories) {\n                _this._moduleFactory = moduleAndComponentFactories.ngModuleFactory;\n            });\n        };\n        TestBedViewEngine.prototype._initIfNeeded = function () {\n            var e_1, _a;\n            if (this._instantiated) {\n                return;\n            }\n            if (!this._moduleFactory) {\n                try {\n                    var moduleType = this._createCompilerAndModule();\n                    this._moduleFactory =\n                        this._compiler.compileModuleAndAllComponentsSync(moduleType).ngModuleFactory;\n                }\n                catch (e) {\n                    var errorCompType = this._compiler.getComponentFromError(e);\n                    if (errorCompType) {\n                        throw new Error(\"This test module uses the component \" + core.ɵstringify(errorCompType) + \" which is using a \\\"templateUrl\\\" or \\\"styleUrls\\\", but they were never compiled. \" +\n                            \"Please call \\\"TestBed.compileComponents\\\" before your test.\");\n                    }\n                    else {\n                        throw e;\n                    }\n                }\n            }\n            try {\n                for (var _b = __values(this._templateOverrides), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var _d = _c.value, component = _d.component, templateOf = _d.templateOf;\n                    var compFactory = this._compiler.getComponentFactory(templateOf);\n                    core.ɵoverrideComponentView(component, compFactory);\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            var ngZone = new core.NgZone({ enableLongStackTrace: true });\n            var providers = [{ provide: core.NgZone, useValue: ngZone }];\n            var ngZoneInjector = core.Injector.create({\n                providers: providers,\n                parent: this.platform.injector,\n                name: this._moduleFactory.moduleType.name\n            });\n            this._moduleRef = this._moduleFactory.create(ngZoneInjector);\n            // ApplicationInitStatus.runInitializers() is marked @internal to core. So casting to any\n            // before accessing it.\n            this._moduleRef.injector.get(core.ApplicationInitStatus).runInitializers();\n            this._instantiated = true;\n        };\n        TestBedViewEngine.prototype._createCompilerAndModule = function () {\n            var _this = this;\n            var e_2, _a;\n            var providers = this._providers.concat([{ provide: TestBed, useValue: this }]);\n            var declarations = __spread(this._declarations, this._templateOverrides.map(function (entry) { return entry.templateOf; }));\n            var rootScopeImports = [];\n            var rootProviderOverrides = this._rootProviderOverrides;\n            if (this._isRoot) {\n                var RootScopeModule = /** @class */ (function () {\n                    function RootScopeModule() {\n                    }\n                    RootScopeModule = __decorate([\n                        core.NgModule({\n                            providers: __spread(rootProviderOverrides),\n                            jit: true,\n                        })\n                    ], RootScopeModule);\n                    return RootScopeModule;\n                }());\n                rootScopeImports.push(RootScopeModule);\n            }\n            providers.push({ provide: core.ɵAPP_ROOT, useValue: this._isRoot });\n            var imports = [rootScopeImports, this.ngModule, this._imports];\n            var schemas = this._schemas;\n            var DynamicTestModule = /** @class */ (function () {\n                function DynamicTestModule() {\n                }\n                DynamicTestModule = __decorate([\n                    core.NgModule({ providers: providers, declarations: declarations, imports: imports, schemas: schemas, jit: true })\n                ], DynamicTestModule);\n                return DynamicTestModule;\n            }());\n            var compilerFactory = this.platform.injector.get(TestingCompilerFactory);\n            this._compiler = compilerFactory.createTestingCompiler(this._compilerOptions);\n            try {\n                for (var _b = __values(__spread([this._testEnvAotSummaries], this._aotSummaries)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var summary = _c.value;\n                    this._compiler.loadAotSummaries(summary);\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n            this._moduleOverrides.forEach(function (entry) { return _this._compiler.overrideModule(entry[0], entry[1]); });\n            this._componentOverrides.forEach(function (entry) { return _this._compiler.overrideComponent(entry[0], entry[1]); });\n            this._directiveOverrides.forEach(function (entry) { return _this._compiler.overrideDirective(entry[0], entry[1]); });\n            this._pipeOverrides.forEach(function (entry) { return _this._compiler.overridePipe(entry[0], entry[1]); });\n            return DynamicTestModule;\n        };\n        TestBedViewEngine.prototype._assertNotInstantiated = function (methodName, methodDescription) {\n            if (this._instantiated) {\n                throw new Error(\"Cannot \" + methodDescription + \" when the test module has already been instantiated. \" +\n                    (\"Make sure you are not using `inject` before `\" + methodName + \"`.\"));\n            }\n        };\n        TestBedViewEngine.prototype.get = function (token, notFoundValue) {\n            if (notFoundValue === void 0) { notFoundValue = core.Injector.THROW_IF_NOT_FOUND; }\n            this._initIfNeeded();\n            if (token === TestBed) {\n                return this;\n            }\n            // Tests can inject things from the ng module and from the compiler,\n            // but the ng module can't inject things from the compiler and vice versa.\n            var result = this._moduleRef.injector.get(token, UNDEFINED$1);\n            return result === UNDEFINED$1 ? this._compiler.injector.get(token, notFoundValue) : result;\n        };\n        TestBedViewEngine.prototype.execute = function (tokens, fn, context) {\n            var _this = this;\n            this._initIfNeeded();\n            var params = tokens.map(function (t) { return _this.get(t); });\n            return fn.apply(context, params);\n        };\n        TestBedViewEngine.prototype.overrideModule = function (ngModule, override) {\n            this._assertNotInstantiated('overrideModule', 'override module metadata');\n            this._moduleOverrides.push([ngModule, override]);\n        };\n        TestBedViewEngine.prototype.overrideComponent = function (component, override) {\n            this._assertNotInstantiated('overrideComponent', 'override component metadata');\n            this._componentOverrides.push([component, override]);\n        };\n        TestBedViewEngine.prototype.overrideDirective = function (directive, override) {\n            this._assertNotInstantiated('overrideDirective', 'override directive metadata');\n            this._directiveOverrides.push([directive, override]);\n        };\n        TestBedViewEngine.prototype.overridePipe = function (pipe, override) {\n            this._assertNotInstantiated('overridePipe', 'override pipe metadata');\n            this._pipeOverrides.push([pipe, override]);\n        };\n        TestBedViewEngine.prototype.overrideProvider = function (token, provider) {\n            this.overrideProviderImpl(token, provider);\n        };\n        TestBedViewEngine.prototype.deprecatedOverrideProvider = function (token, provider) {\n            this.overrideProviderImpl(token, provider, /* deprecated */ true);\n        };\n        TestBedViewEngine.prototype.overrideProviderImpl = function (token, provider, deprecated) {\n            if (deprecated === void 0) { deprecated = false; }\n            var def = null;\n            if (typeof token !== 'string' && (def = core.ɵgetInjectableDef(token)) && def.providedIn === 'root') {\n                if (provider.useFactory) {\n                    this._rootProviderOverrides.push({ provide: token, useFactory: provider.useFactory, deps: provider.deps || [] });\n                }\n                else {\n                    this._rootProviderOverrides.push({ provide: token, useValue: provider.useValue });\n                }\n            }\n            var flags = 0;\n            var value;\n            if (provider.useFactory) {\n                flags |= 1024 /* TypeFactoryProvider */;\n                value = provider.useFactory;\n            }\n            else {\n                flags |= 256 /* TypeValueProvider */;\n                value = provider.useValue;\n            }\n            var deps = (provider.deps || []).map(function (dep) {\n                var depFlags = 0 /* None */;\n                var depToken;\n                if (Array.isArray(dep)) {\n                    dep.forEach(function (entry) {\n                        if (entry instanceof core.Optional) {\n                            depFlags |= 2 /* Optional */;\n                        }\n                        else if (entry instanceof core.SkipSelf) {\n                            depFlags |= 1 /* SkipSelf */;\n                        }\n                        else {\n                            depToken = entry;\n                        }\n                    });\n                }\n                else {\n                    depToken = dep;\n                }\n                return [depFlags, depToken];\n            });\n            core.ɵoverrideProvider({ token: token, flags: flags, deps: deps, value: value, deprecatedBehavior: deprecated });\n        };\n        TestBedViewEngine.prototype.overrideTemplateUsingTestingModule = function (component, template) {\n            this._assertNotInstantiated('overrideTemplateUsingTestingModule', 'override template');\n            var OverrideComponent = /** @class */ (function () {\n                function OverrideComponent() {\n                }\n                OverrideComponent = __decorate([\n                    core.Component({ selector: 'empty', template: template, jit: true })\n                ], OverrideComponent);\n                return OverrideComponent;\n            }());\n            this._templateOverrides.push({ component: component, templateOf: OverrideComponent });\n        };\n        TestBedViewEngine.prototype.createComponent = function (component) {\n            var _this = this;\n            this._initIfNeeded();\n            var componentFactory = this._compiler.getComponentFactory(component);\n            if (!componentFactory) {\n                throw new Error(\"Cannot create the component \" + core.ɵstringify(component) + \" as it was not imported into the testing module!\");\n            }\n            var noNgZone = this.get(ComponentFixtureNoNgZone, false);\n            var autoDetect = this.get(ComponentFixtureAutoDetect, false);\n            var ngZone = noNgZone ? null : this.get(core.NgZone, null);\n            var testComponentRenderer = this.get(TestComponentRenderer);\n            var rootElId = \"root\" + _nextRootElementId$1++;\n            testComponentRenderer.insertRootElement(rootElId);\n            var initComponent = function () {\n                var componentRef = componentFactory.create(core.Injector.NULL, [], \"#\" + rootElId, _this._moduleRef);\n                return new ComponentFixture(componentRef, ngZone, autoDetect);\n            };\n            var fixture = !ngZone ? initComponent() : ngZone.run(initComponent);\n            this._activeFixtures.push(fixture);\n            return fixture;\n        };\n        return TestBedViewEngine;\n    }());\n    /**\n     * @description\n     * Configures and initializes environment for unit testing and provides methods for\n     * creating components and services in unit tests.\n     *\n     * `TestBed` is the primary api for writing unit tests for Angular applications and libraries.\n     *\n     * Note: Use `TestBed` in tests. It will be set to either `TestBedViewEngine` or `TestBedRender3`\n     * according to the compiler used.\n     *\n     * @publicApi\n     */\n    var TestBed = core.ɵivyEnabled ? TestBedRender3 : TestBedViewEngine;\n    /**\n     * Returns a singleton of the applicable `TestBed`.\n     *\n     * It will be either an instance of `TestBedViewEngine` or `TestBedRender3`.\n     *\n     * @publicApi\n     */\n    var getTestBed = core.ɵivyEnabled ? _getTestBedRender3 : _getTestBedViewEngine;\n    var testBed$1;\n    function _getTestBedViewEngine() {\n        return testBed$1 = testBed$1 || new TestBedViewEngine();\n    }\n    /**\n     * Allows injecting dependencies in `beforeEach()` and `it()`.\n     *\n     * Example:\n     *\n     * ```\n     * beforeEach(inject([Dependency, AClass], (dep, object) => {\n     *   // some code that uses `dep` and `object`\n     *   // ...\n     * }));\n     *\n     * it('...', inject([AClass], (object) => {\n     *   object.doSomething();\n     *   expect(...);\n     * })\n     * ```\n     *\n     * Notes:\n     * - inject is currently a function because of some Traceur limitation the syntax should\n     * eventually\n     *   becomes `it('...', @Inject (object: AClass, async: AsyncTestCompleter) => { ... });`\n     *\n     * @publicApi\n     */\n    function inject(tokens, fn) {\n        var testBed = getTestBed();\n        if (tokens.indexOf(AsyncTestCompleter) >= 0) {\n            // Not using an arrow function to preserve context passed from call site\n            return function () {\n                var _this = this;\n                // Return an async test method that returns a Promise if AsyncTestCompleter is one of\n                // the injected tokens.\n                return testBed.compileComponents().then(function () {\n                    var completer = testBed.get(AsyncTestCompleter);\n                    testBed.execute(tokens, fn, _this);\n                    return completer.promise;\n                });\n            };\n        }\n        else {\n            // Not using an arrow function to preserve context passed from call site\n            return function () { return testBed.execute(tokens, fn, this); };\n        }\n    }\n    /**\n     * @publicApi\n     */\n    var InjectSetupWrapper = /** @class */ (function () {\n        function InjectSetupWrapper(_moduleDef) {\n            this._moduleDef = _moduleDef;\n        }\n        InjectSetupWrapper.prototype._addModule = function () {\n            var moduleDef = this._moduleDef();\n            if (moduleDef) {\n                getTestBed().configureTestingModule(moduleDef);\n            }\n        };\n        InjectSetupWrapper.prototype.inject = function (tokens, fn) {\n            var self = this;\n            // Not using an arrow function to preserve context passed from call site\n            return function () {\n                self._addModule();\n                return inject(tokens, fn).call(this);\n            };\n        };\n        return InjectSetupWrapper;\n    }());\n    function withModule(moduleDef, fn) {\n        if (fn) {\n            // Not using an arrow function to preserve context passed from call site\n            return function () {\n                var testBed = getTestBed();\n                if (moduleDef) {\n                    testBed.configureTestingModule(moduleDef);\n                }\n                return fn.apply(this);\n            };\n        }\n        return new InjectSetupWrapper(function () { return moduleDef; });\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var _global$1 = (typeof window === 'undefined' ? global : window);\n    // Reset the test providers and the fake async zone before each test.\n    if (_global$1.beforeEach) {\n        _global$1.beforeEach(function () {\n            TestBed.resetTestingModule();\n            resetFakeAsyncZone();\n        });\n    }\n    // TODO(juliemr): remove this, only used because we need to export something to have compilation\n    // work.\n    var __core_private_testing_placeholder__ = '';\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // This file only reexports content of the `src` folder. Keep it that way.\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.ɵangular_packages_core_testing_testing_b = TestBedRender3;\n    exports.ɵangular_packages_core_testing_testing_c = _getTestBedRender3;\n    exports.ɵangular_packages_core_testing_testing_a = TestBedViewEngine;\n    exports.TestBed = TestBed;\n    exports.getTestBed = getTestBed;\n    exports.inject = inject;\n    exports.InjectSetupWrapper = InjectSetupWrapper;\n    exports.withModule = withModule;\n    exports.ɵMetadataOverrider = MetadataOverrider;\n    exports.async = async;\n    exports.ComponentFixture = ComponentFixture;\n    exports.resetFakeAsyncZone = resetFakeAsyncZone;\n    exports.fakeAsync = fakeAsync;\n    exports.tick = tick;\n    exports.flush = flush;\n    exports.discardPeriodicTasks = discardPeriodicTasks;\n    exports.flushMicrotasks = flushMicrotasks;\n    exports.TestComponentRenderer = TestComponentRenderer;\n    exports.ComponentFixtureAutoDetect = ComponentFixtureAutoDetect;\n    exports.ComponentFixtureNoNgZone = ComponentFixtureNoNgZone;\n    exports.__core_private_testing_placeholder__ = __core_private_testing_placeholder__;\n    exports.ɵTestingCompiler = TestingCompiler;\n    exports.ɵTestingCompilerFactory = TestingCompilerFactory;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=core-testing.umd.js.map\n"]}