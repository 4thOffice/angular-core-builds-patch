{"version":3,"sources":["packages/core/core.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","core","rxjs","operators","this","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__values","o","m","Symbol","iterator","next","value","done","__read","r","e","ar","push","error","__spread","concat","ANNOTATIONS","PARAMETERS","PROP_METADATA","makeDecorator","name","props","parentClass","additionalProcessing","typeFn","metaCtor","makeMetadataCtor","DecoratorFactory","_a","args","_i","annotationInstance","bind","TypeDecorator","cls","defineProperty","ngMetadataName","annotationCls","ctor","values","propName","makeParamDecorator","ParamDecoratorFactory","ParamDecorator","annotation","unusedKey","index","parameters","makePropDecorator","PropDecoratorFactory","decoratorInstance","PropDecorator","target","meta","unshift","InjectFlags","Inject","token","Optional","Self","SkipSelf","Host","Attribute","attributeName","getClosureSafeProperty","objWithPropertyToExtract","key","Error","fillProperties","source","ɵɵdefineInjectable","opts","providedIn","undefined","defineInjectable","ɵɵdefineInjector","options","providers","imports","getInjectableDef","type","getOwnDefinition","NG_PROV_DEF","NG_INJECTABLE_DEF","def","getInjectorDef","NG_INJ_DEF","NG_INJECTOR_DEF","ɵprov","ɵinj","NG_PROV_DEF_FALLBACK","ɵprovFallback","ngInjectableDef","ngInjectorDef","stringify","isArray","map","join","overriddenName","res","toString","newLineIndex","indexOf","substring","__forward_ref__","forwardRef","forwardRefFn","resolveForwardRef","isForwardRef","fn","R3ResolvedDependencyType","R3FactoryTarget","ViewEncapsulation","__globalThis","globalThis","__window","window","__self","WorkerGlobalScope","__global","_global","getCompilerFacade","globalNg","ɵcompilerFacade","_injectImplementation","NG_COMP_DEF","ɵcmp","NG_DIR_DEF","ɵdir","NG_PIPE_DEF","ɵpipe","NG_MOD_DEF","ɵmod","NG_LOC_ID_DEF","ɵloc","NG_FACTORY_DEF","ɵfac","NG_ELEMENT_ID","__NG_ELEMENT_ID__","InjectionToken","_desc","INJECTOR","THROW_IF_NOT_FOUND","NG_TEMP_TOKEN_PATH","NG_TOKEN_PATH","NEW_LINE","NO_NEW_LINE","SOURCE","USE_VALUE","provide","String","useValue","_currentInjector","setCurrentInjector","injector","former","setInjectImplementation","impl","previous","injectInjectorOnly","flags","Default","injectRootLimpMode","get","ɵɵinject","ɵɵinvalidFactoryDep","inject","notFoundValue","injectableDef","injectArgs","types","arg","j","NullInjector","catchInjectorError","injectorErrorName","tokenPath","message","formatError","text","obj","charAt","substr","context","parts","JSON","replace","ChangeDetectionStrategy","ChangeDetectorStatus","angularCoreDiEnv","ɵɵgetFactoryOf","getFactoryOf","typeAny","NgModuleRef","NgModuleFactory","addAllToArray","items","arr","flatten","list","dst","item","slice","deepForEach","input","forEach","addToArray","splice","removeFromArray","pop","newArray","size","assertDefined","actual","msg","throwError","expected","comparison","noSideEffects","ɵChangeDetectorStatus","EMPTY_OBJ","EMPTY_ARRAY","_renderCompCount","ɵɵdefineComponent","componentDefinition","typePrototype","declaredInputs","providersResolver","decls","vars","template","consts","ngContentSelectors","hostBindings","contentQueries","inputs","outputs","exportAs","onChanges","onInit","ngOnInit","doCheck","ngDoCheck","afterContentInit","ngAfterContentInit","afterContentChecked","ngAfterContentChecked","afterViewInit","ngAfterViewInit","afterViewChecked","ngAfterViewChecked","onDestroy","ngOnDestroy","onPush","changeDetection","OnPush","directiveDefs","pipeDefs","selectors","viewQuery","features","data","encapsulation","Emulated","id","styles","_","setInput","schemas","tView","directiveTypes","directives","feature","pipeTypes","pipes","invertObject","extractDirectiveDef","extractPipeDef","ɵɵsetComponentScope","getComponentDef","getDirectiveDef","getPipeDef","autoRegisterModuleById","ɵɵdefineNgModule","bootstrap","declarations","transitiveCompileScopes","ɵɵsetNgModuleScope","scope","ngModuleDef","getNgModuleDef","secondary","newLookup","minifiedKey","publicName","declaredName","ɵɵdefineDirective","ɵɵdefinePipe","pipeDef","pure","getFactoryDef","throwNotFound","HOST","TVIEW","FLAGS","PARENT","NEXT","QUERIES","T_HOST","CLEANUP","CONTEXT","INJECTOR$1","RENDERER_FACTORY","RENDERER","SANITIZER","CHILD_HEAD","CHILD_TAIL","DECLARATION_VIEW","DECLARATION_COMPONENT_VIEW","DECLARATION_LCONTAINER","PREORDER_HOOK_FLAGS","HEADER_OFFSET","TYPE","ACTIVE_INDEX","MOVED_VIEWS","NATIVE","VIEW_REFS","CONTAINER_HEADER_OFFSET","isLView","isLContainer","isContentQueryHost","tNode","isComponentHost","isDirectiveHost","isComponentDef","isRootView","instructionState","lFrame","createLFrame","bindingsEnabled","elementExitFn","checkNoChangesMode","setCurrentDirectiveDef","currentDirectiveDef","getBindingsEnabled","ɵɵenableBindings","ɵɵdisableBindings","getLView","lView","hasActiveElementFlag","flag","selectedIndex","setActiveHostElement","elementIndex","executeElementExitFn","setSelectedIndex","activeDirectiveId","setElementExitFn","setActiveElementFlag","getActiveDirectiveId","incrementActiveDirectiveId","ɵɵrestoreView","viewToRestore","contextLView","getPreviousOrParentTNode","previousOrParentTNode","setPreviousOrParentTNode","_isParent","isParent","getIsParent","setIsNotParent","getCheckNoChangesMode","setCheckNoChangesMode","mode","getBindingRoot","bindingRootIndex","bindingStartIndex","getBindingIndex","bindingIndex","setBindingIndex","nextBindingIndex","incrementBindingIndex","count","setBindingRoot","getCurrentQueryIndex","currentQueryIndex","setCurrentQueryIndex","enterDI","newView","newLFrame","allocLFrame","leaveDI","leaveView","enterView","elementDepthCount","currentNamespace","currentSanitizer","currentLFrame","childLFrame","child","parent","leaveViewProcessExit","getSelectedIndex","ɵɵnamespaceSVG","ɵɵnamespaceMathML","ɵɵnamespaceHTML","namespaceHTMLInternal","setCurrentStyleSanitizer","sanitizer","getCurrentStyleSanitizer","registerPostOrderHooks","directiveStart","end","directiveEnd","directiveDef","contentHooks","contentCheckHooks","viewHooks","viewCheckHooks","destroyHooks","executeCheckHooks","hooks","nodeIndex","callHooks","executeInitAndCheckHooks","initPhase","incrementInitPhaseFlags","currentView","currentNodeIndex","nodeIndexLimit","lastNodeIndexFound","callHook","isInitHook","hook","directive","RendererStyleFlags3","TNODE","PARENT_INJECTOR","INJECTOR_BLOOM_PARENT_SIZE","NO_PARENT_INJECTOR","NodeInjectorFactory","isViewProvider","injectImplementation","resolving","canSeeViewProviders","injectImpl","DOCUMENT","getDocument","document","isProceduralRenderer","renderer","domRendererFactory3","createRenderer","hostElement","rendererType","setUpAttributes","native","attrs","isProc","namespaceURI","attrName","attrVal","setAttribute","setAttributeNS","isAnimationProp","setProperty","isNameOnlyAttributeMarker","marker","charCodeAt","hasParentInjector","parentLocation","getParentInjectorIndex","getParentInjectorViewOffset","getParentInjectorView","location","startView","viewOffset","parentView","renderStringify","stringifyForError","defaultScheduler","requestAnimationFrame","setTimeout","ɵɵresolveWindow","element","ownerDocument","defaultView","ɵɵresolveDocument","ɵɵresolveBody","body","maybeUnwrapFn","Function","SafeValueImpl","changingThisBreaksApplicationSecurity","SafeHtmlImpl","_super","getTypeName","SafeStyleImpl","SafeScriptImpl","SafeUrlImpl","SafeResourceUrlImpl","unwrapSafeValue","allowSanitizationBypassAndThrow","actualType","getSanitizationBypassType","NO_CHANGE","MAP_BASED_ENTRY_PROP_NAME","TEMPLATE_DIRECTIVE_INDEX","DEFAULT_BINDING_VALUE","DEFAULT_BINDING_INDEX","DEFAULT_TOTAL_SOURCES","DEFAULT_GUARD_MASK_VALUE","allocStylingMapArray","hasConfig","allowDirectStyling","isClassBased","firstUpdatePass","allow","hasOnlyMapOrPropsFlag","patchConfig","getProp","isSanitizationRequired","getPropConfig","getGuardMask","isHostBinding","getValuesCount","getTotalSources","getBindingValue","offset","getDefaultValue","setValue","getValue","getPropValuesStartPosition","startPosition","hasValueChanged","a","compareValueA","compareValueB","is","isStylingValueDefined","concatString","separator","hyphenate","v","toLowerCase","getStylingMapArray","isStylingContext","getInitialStylingValue","hasClassInput","hasStyleInput","getMapProp","MAP_DIRTY_VALUE","setMapValue","getMapValue","forceStylesAsString","hyphenateProps","str","keys","prop","propLabel","isHostStylingActive","directiveOrSourceId","stylingMapToString","attrValue","addItemToStylingMap","stylingMapArr","allowOverwrite","propAtIndex","applied","normalizeIntoStylingMap","bindingValue","newValues","normalizeProps","allValuesTrue","splitOnWhitespace","array","start","foundChar","selectClassBasedInputName","includeViewProviders","setIncludeViewProviders","oldValue","BLOOM_MASK","BLOOM_SIZE","nextNgElementId","getOrCreateNodeInjectorForNode","hostView","existingInjectorIndex","getInjectorIndex","firstCreatePass","injectorIndex","insertBloom","blueprint","parentLoc","getParentInjectorLocation","parentIndex","parentLView","parentData","footer","view","hostTNode","diPublicInInjector","bloomAdd","bloomBit","mask","b6","b5","tData","getOrCreateInjectable","bloomHash","bloomHashBitOrFactory","tokenId","NodeInjector","previousTView","hostTElementNode","shouldSearchParent","bloomHasToken","instance","searchTokensOnInjector","NOT_FOUND","moduleInjector","previousInjectImplementation","currentTView","injectableIdx","locateDirectiveOrProvider","getNodeInjectable","canAccessViewProviders","isHostSpecialCase","nodeProviderIndexes","providerIndexes","tInjectables","injectablesStart","directivesStart","cptViewProvidersCount","endIndex","providerTokenOrDef","dirDef","isFactory","previousIncludeViewProviders","registerPreOrderHooks","directiveIndex","preOrderHooks","preOrderCheckHooks","injectorView","isFirstHostTNode","_tNode","_lView","injectorDef","ɵɵgetInheritedFactory","proto","getPrototypeOf","ERROR_DEBUG_CONTEXT","ERROR_ORIGINAL_ERROR","ERROR_LOGGER","getDebugContext","getOriginalError","defaultErrorLogger","console","ErrorHandler","_console","handleError","originalError","_findOriginalError","_findContext","errorLogger","getErrorLogger","_devMode","_runModeLocked","isDevMode","InertBodyHelper","defaultDoc","inertDocument","implementation","createHTMLDocument","inertBodyElement","inertHtml","createElement","appendChild","innerHTML","querySelector","getInertBodyElement","isDOMParserAvailable","DOMParser","getInertBodyElement_DOMParser","getInertBodyElement_InertDocument","getInertBodyElement_XHR","html","encodeURI","xhr","XMLHttpRequest","responseType","open","send","response","removeChild","firstChild","parseFromString","templateEl","inertBody","documentMode","stripCustomNsAttrs","el","elAttrs","attributes","removeAttribute","childNode","nodeType","Node","ELEMENT_NODE","nextSibling","SAFE_URL_PATTERN","DATA_URL_PATTERN","_sanitizeUrl","url","match","warn","sanitizeSrcset","srcset","split","trim","tagSet","tags","e_1","_b","_c","e_1_1","return","merge","e_2","sets","sets_1","sets_1_1","e_2_1","inertBodyHelper","SecurityContext","VOID_ELEMENTS","OPTIONAL_END_TAG_BLOCK_ELEMENTS","OPTIONAL_END_TAG_INLINE_ELEMENTS","OPTIONAL_END_TAG_ELEMENTS","BLOCK_ELEMENTS","INLINE_ELEMENTS","VALID_ELEMENTS","URI_ATTRS","SRCSET_ATTRS","HTML_ATTRS","ARIA_ATTRS","VALID_ATTRS","SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS","SanitizingHtmlSerializer","sanitizedSomething","buf","sanitizeChildren","current","traverseContent","startElement","TEXT_NODE","chars","nodeValue","endElement","checkClobberedElement","parentNode","tagName","nodeName","elAttr","lower","encodeEntities","node","nextNode","compareDocumentPosition","DOCUMENT_POSITION_CONTAINED_BY","outerHTML","SURROGATE_PAIR_REGEXP","NON_ALPHANUMERIC_REGEXP","_sanitizeHtml","unsafeHtmlInput","unsafeHtml","mXSSAttempts","parsedHtml","safeHtml","getTemplateContent","parent_1","isTemplateElement","content","SAFE_STYLE_VALUE","RegExp","URL_RE","_sanitizeStyle","urlMatch","hasBalancedQuotes","outsideSingle","outsideDouble","c","ɵɵsanitizeHtml","getSanitizer","sanitize","HTML","ɵɵsanitizeStyle","unsafeStyle","STYLE","ɵɵsanitizeUrl","unsafeUrl","URL","ɵɵsanitizeResourceUrl","unsafeResourceUrl","RESOURCE_URL","ɵɵsanitizeScript","unsafeScript","SCRIPT","ɵɵsanitizeUrlOrResourceUrl","tag","getUrlSanitizer","ɵɵdefaultStyleSanitizer","doSanitizeValue","CAMEL_CASE_REGEXP","normalizeDebugBindingValue","MONKEY_PATCH_KEY_NAME","unwrapRNode","getNativeByIndex","getNativeByTNode","getNativeByTNodeOrNull","getTNode","load","getComponentLViewByIndex","slotValue","readPatchedData","readPatchedLView","isCreationMode","getConstant","resetPreOrderHookFlags","getLContainerActiveIndex","lContainer","getLContext","mpValue","component","isComponentInstance","findViaComponent","isDirectiveInstance","findViaDirective","directiveInstance","directiveIndexEnd","traverseNextElement","getDirectivesAtNodeIndex","findViaNativeElement","existingCtx","createLContext","attachPatchData","rElement","parentContext","localRefs","getComponentViewByInstance","componentInstance","componentIndices","components","elementComponentIndex","includeComponents","directiveStartIndex","throwMultipleComponentError","throwMixedMultiProviderError","NG_TEMPLATE_SELECTOR","isCssClassMatching","nodeClassAttrVal","cssClassToMatch","nodeClassesLen","matchIndex","matchEndIdx","hasTagAndTypeMatch","currentSelector","isProjectionMode","isNodeMatchingSelector","selector","nodeAttrs","nameOnlyMarkerIdx","getNameOnlyMarkerIndex","skipToNextSelector","isPositive","selectorAttrValue","classes","attrIndexInNode","findAttrIndexInNode","nodeAttrValue","compareAgainstClassName","isInlineTemplate","bindingsMode","maybeAttrName","matchTemplateAttribute","isNodeMatchingSelectorList","isSelectorInSelectorList","selectorListLoop","currentSelectorInList","maybeWrapInNotSelector","isNegativeMode","chunk","stringifyCSSSelector","result","currentChunk","valueOrMarker","_state","sourceIndex","classesBitMask","classesIndex","stylesBitMask","stylesIndex","lastDirectClassMap","lastDirectStyleMap","BIT_MASK_START_VALUE","INDEX_START_VALUE","getStylingState","VALUE_IS_EXTERNALLY_MODIFIED","STYLING_INDEX_FOR_MAP_BINDING","updateClassViaContext","forceUpdate","isMapBased","state","countIndex","updateBindingData","updateStyleViaContext","sanitizationRequired","counterIndex","hostBindingsMode","hostBindingsFlag","registerBinding","changed","renderHostBindingsAsStale","bindingsStart","valuesCount","itemsPerRow","found","valuesEnd","i_1","stylingMap","countId","totalSources","addNewSourceColumn","collisionFlag","isBindingIndexValue","entriesPerRow","allocateNewContextEntry","addBindingIntoContext","totalBindingsPerEntry","bitIndex","setGuardMask","maskValue","setDefaultValue","insertOffset","syncContextInitialStyling","updateInitialStylingOnContext","initialStyling","hasInitialStyling","applyStylingViaContext","bindingData","bitMaskValue","applyStylingFn","bitMask","normalizeBitMaskValue","stylingMapsSyncFn","applyAllValues","getStylingMapsSyncFn","_activeStylingMapApplyFn","totalBindingsToVisit","mapsMode","valueApplied","defaultValue","valueAppliedWithinMap","writeStylingValueDirectly","initialValue","valueToApply","objectToClassName","setClassName","setStyleAttr","applyStylingValue","applyFn","findAndApplyMapValue","setStyle","nativeStyle","DashCase","style","removeStyle","removeProperty","setClass","className","classList","addClass","add","removeClass","remove","renderStylingMap","stylingValues","getLViewParent","getRootContext","viewOrComponent","getRootView","componentOrLView","ɵɵadvance","delta","selectIndexInternal","ɵɵselect","ELEMENT_MARKER","COMMENT_MARKER","activateStylingMapFeature","setStylingMapsSyncFn","syncStylingMap","targetProp","targetPropValueWasApplied","runTheSyncAlgorithm","loopUntilEnd","innerSyncStylingMap","currentMapIndex","mapsLimit","recurseInnerMaps","checkValuesOnly","cursor","getCurrentSyncCursor","mapIndex","MAP_CURSORS","iteratedTooFar","isTargetPropMatched","valueIsDefined","innerMode","resolveInnerMapMode","isValueAllowedToBeApplied","bindingIndexToApply","setCurrentSyncCursor","indexValue","resetSyncCursors","currentMode","doApplyValue","TStylingContextDebug","_isClassBased","buildConfig","enumerable","configurable","totalColumns","entries","templateBitMask","hostBindingsBitMask","bindingsStartPosition","sources","printSources","output","prefix","bindingsBySource","isDefaultColumn","getTypeFromColumn","binding","sort","entry","toUpperCase","repeat","tab","log","printTable","table","totalProps","Math","floor","tpl mask","generateBitString","host mask","leftPad","max","pad","times","NodeStylingDebug","_data","_sanitizer","_debugContext","overrideSanitizer","config","hasMapBindings","_convertMapBindingsToStylingMapArrays","_mapValues","limit","mockElement","mapFn","hasPropBindings","hasCollisions","hasTemplateBindings","hasHostBindings","processTNodeChildren","template_","toDebug","debug","toHtml","includeChildren","isTextNode","textContent","toDebugNodes","debugNodes","tNodeCursor","buildDebugNode","rawValue","componentLViewDebug","readLViewValue","nodes","TView","queries","expandoStartIndex","expandoInstructions","staticViewQueries","staticContentQueries","cleanup","directiveRegistry","pipeRegistry","TNode","tView_","propertyBindings","localNames","initialInputs","tViews","projectionNext","projection","type_","LViewDebug","_raw_lView","__raw__flags__","initPhaseState","creationMode","firstViewPass","checkAlways","dirty","attached","destroyed","isRoot","indexWithinInitPhase","childViews","childHead","LContainerDebug","_raw_lContainer","I18NDebugItem","__raw_opCode","I18nMutateOpCodesDebug","__raw_opCodes","__lView","results","opCode","commentValue","code","I18nUpdateOpCodesDebug","icus","checkBit","skipCodes","tIcuIndex","tIcu","sanitizeFn","_CLEAN_PROMISE","Promise","resolve","refreshContentQueries","directiveDefIdx","elementCreate","namespace","createElementNS","createLView","host","tHostNode","rendererFactory","getOrCreateTNode","adjustedIndex","createTNodeAtIndex","createTNode","assignTViewNodeToLView","tParentNode","renderView","executeViewQueryFn","templateFn","executeTemplate","renderChildComponents","hostLView","renderComponent","refreshView","hooksInitPhaseCompleted","refreshDynamicEmbeddedViews","viewOrContainer","activeIndexFlag","embeddedLView","embeddedTView","refreshTransplantedViews","setHostBindings","currentDirectiveIndex","currentElementIndex","instruction","providerCount","refreshChildComponents","refreshComponent","renderComponentOrTemplate","normalExecutionPath","creationModeIsActive","begin","rf","prevSelectedIndex","executeContentQueries","createDirectivesInstances","instantiateAllDirectives","isComponent","addComponentLogic","setInputsFromAttrs","invokeDirectivesHostBindings","viewData","expando","invokeHostBindingsInCreationMode","saveResolvedLocalsInData","localRefExtractor","localIndex","getOrCreateTComponentView","createTView","viewIndex","initialViewLength","createViewBlueprint","fill","locateHostElement","elementOrSelector","selectRootElement","ShadowDom","tParent","generatePropertyAliases","inputAliasMap","propStore","internalName","elementPropertyInternal","nativeOnly","loadRendererFn","dataValue","inputData","setInputsForProperty","markDirtyIfOnPush","childComponentLView","mapPropName","resolveDirectives","findDirectiveMatches","registry","matches","markAsComponentHost","exportsMap","","hasDirectives","initNodeFlags","generateExpandoInstructionBlock","preOrderHooksFound","preOrderCheckHooksFound","baseResolveDirective","saveNameToExportMap","initializeInputAndOutputAliases","defs","tNodeAttrs","inputsFromAttrs","inputsStore","outputsStore","directiveInputs","generateInitialInputs","cacheMatchingLocalNames","previousExpandoLength","directiveCount","numberOfDirectives","directiveFactory","nodeInjectorFactory","componentView","addToViewTree","elementAttributeInternal","strValue","initialInputData","privateName","inputsToStore","createLContainer","hostNative","declaredComponentLView","movedViews","movedLView","insertedComponentLView","movedTView","componentHostIdx","viewAttachedToChangeDetector","syncViewWithBlueprint","componentTView","lViewOrLContainer","markViewDirty","tickRootContext","rootContext","rootComponent","detectChangesInternal","detectChangesInRootView","viewQueryFn","CLEAN_PROMISE","getCleanup","getTViewCleanup","loadComponentRenderer","errorHandler","textBindingInternal","renderInitialStyling","append","getLContainer","embeddedView","container","getContainerRenderParent","tViewNode","nativeParentNode","applyToElementOrContainer","action","lNodeToHandle","beforeNode","rNode","nativeAppendChild","nativeInsertBefore","nativeRemoveNode","destroyNode","applyContainer","renderParent","anchor","applyView","createTextNode","createText","addRemoveViewFromContainer","insertMode","insertView","indexInContainer","containerLength","declarationLContainer","trackMovedView","declarationContainer","lQueries","detachMovedView","declaredViewIndex","detachView","removeIndex","viewToDetach","removedLView","removeView","detachedView","destroyLView","destroyViewTree","rootView","cleanUpView","firstView","getParentState","executeOnDestroys","removeListeners","tCleanup","lCleanup","idxOrTargetGetter","useCaptureOrSubIdx","removeEventListener","unsubscribe","destroy","getRenderParent","parentTNode","Native","insertBefore","nativeAppendOrInsertBefore","getNativeAnchorNode","getBeforeNodeForView","childEl","childTNode","anchorNode","viewIndexInContainer","nextViewIndex","firstTNodeOfView","getFirstNativeNode","tNodeType","elIcuContainerChild","rNodeOrLContainer","componentHost","firstProjectedTNode","isHostElement","nativeParent","nativeRemoveChild","applyNodes","isProjection","rawSlotValue","applyProjectionRecursive","applyProjection","tProjectionNode","componentLView","nodeToProjectOrRNodes","R3ElementRef","R3TemplateRef","R3ViewContainerRef","ViewRef","_cdRefInjectingView","_appRef","_viewContainerRef","_tViewNode","collectNativeNodes","lNode","lViewInAContainer","lViewFirstChildTNode","firstProjectedNode","detach","callback","storeCleanupFn","cleanupFn","markForCheck","reattach","detectChanges","checkNoChanges","checkNoChangesInternal","attachToViewContainerRef","vcRef","detachFromAppRef","renderDetachView","attachToAppRef","appRef","RootViewRef","_view","_this","checkNoChangesInRootView","createElementRef","ElementRefToken","ElementRef","createTemplateRef","TemplateRefToken","TemplateRef","_declarationView","_declarationTContainer","elementRef","createEmbeddedView","declarationViewLQueries","viewRef","createContainerRef","ViewContainerRefToken","ViewContainerRef","_lContainer","_hostTNode","_hostView","getParentInjectorTNode","startTNode","parentTNode_1","clear","templateRef","insert","createComponent","componentFactory","projectableNodes","ngModuleRef","contextInjector","parentInjector","ngModule","componentRef","allocateContainerIfNeeded","viewAttachedToContainer","prevIdx","prevLContainer","prevVCRef","adjustedIdx","_adjustIndex","move","newIndex","viewRefsArr","shift","setLContainerActiveIndex","commentNode","createComment","nativeNextSibling","injectChangeDetectorRef","isPipe","createViewRef","ChangeDetectorRef","SWITCH_CHANGE_DETECTOR_REF_FACTORY","SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__","Type","isType","DELEGATE_CTOR","INHERITED_CLASS","INHERITED_CLASS_WITH_CTOR","INHERITED_CLASS_WITH_DELEGATE_CTOR","ReflectionCapabilities","reflect","_reflect","isReflectionEnabled","_zipTypesAndAnnotations","paramTypes","paramAnnotations","_ownParameters","parentCtor","isDelegateCtor","typeStr","test","tsickleCtorParams","ctorParameters","paramTypes_1","ctorParam","paramAnnotations_1","convertTsickleDecoratorIntoMetadata","decorators","getOwnMetadata","getParentCtor","_ownAnnotations","typeOrFunc","annotations","ownAnnotations","_ownPropMetadata","propMetadata","propDecorators","propDecorators_1","propMetadata_1","parentPropMetadata_1","ownPropMetadata","hasLifecycleHook","lcProperty","guards","getter","setter","method","importUri","resourceUri","resolveIdentifier","moduleUrl","members","runtime","resolveEnum","enumIdentifier","decoratorInvocations","decoratorInvocation","parentProto","getReflect","reflectDependencies","convertDependencies","deps","compiler","dep","reflectDependency","optional","resolved","Token","skipSelf","setTokenAndResolvedType","param","Invalid","USE_VALUE$1","isUseClassProvider","useClass","isUseFactoryProvider","useFactory","getInjectableMetadata","srcMeta","compilerMeta","typeArgumentCount","userDeps","isUseValueProvider","isUseExistingProvider","useExisting","Injectable","SWITCH_COMPILE_INJECTABLE","SWITCH_COMPILE_INJECTABLE__POST_R3__","compileInjectable","ngFactoryDef","metadata","compileFactory","injectFn","Pipe","INJECTOR_SCOPE","NOT_YET","CIRCULAR","EMPTY_ARRAY$2","NULL_INJECTOR","getNullInjector","createInjector","defType","additionalProviders","R3Injector","records","Map","injectorDefTypes","Set","_destroyed","dedupStack","provider","processProvider","processInjectorType","set","makeRecord","record","assertNotDestroyed","service","previousInjector","couldBeInjectableType","injectableDefInScope","injectableDefOrInjectorDefFactory","hydrate","tokens","defOrWrappedDef","parents","isDuplicate","importTypesWithProviders_1","imported","_loop_1","ngModule_1","defProviders","injectorType_1","ngModuleType","isTypeProvider","providerToRecord","isValueProvider","providerToFactory","multi","existing","multiRecord_1","throwCyclicDependencyError","hasOnDestroy","has","getUndecoratedInjectableFactory","paramLength","inheritedInjectableDef","getInheritedInjectableDef","typeName","isFactoryProvider","isExistingProvider","classRef_1","throwInvalidProviderError","ngModuleDetail","hasDeps","INJECTOR_IMPL__POST_R3__","INJECTOR_IMPL","Injector","NULL","IDENT","EMPTY","CIRCULAR$1","MULTI_PROVIDER_FN","resolveProvider","computeDeps","providerDeps","staticError","useNew","multiProviderMixError","constructResolvingPath","findFirstClosedCycle","reverse","k","injectionError","constructResolvingMessage","errMsg","wrappedError","addKey","injectors","noAnnotationError","params","signature","ii","parameter","StaticInjector","_records","recursivelyProcessProviders","resolvedProvider","multiProvider","lastInjector","tryResolveToken","resolveToken","NO_NEW_LINE$1","depRecords","depRecord","childRecord","ReflectiveKey","displayName","_globalKeyRegistry","numberOfKeys","KeyRegistry","_allKeys","newKey","reflector","Reflector","reflectionCapabilities","updateCapabilities","caps","identifier","ReflectiveDependency","visibility","fromKey","_EMPTY_LIST","ResolvedReflectiveProvider_","resolvedFactories","resolvedFactory","ResolvedReflectiveFactory","dependencies","resolveReflectiveFactory","factoryFn","resolvedDeps","_dependenciesFor","aliasInstance","constructDependencies","params_1","_extractToken","resolveReflectiveProvider","some","_createDependency","paramMetadata","Query","UNDEFINED","ReflectiveInjector","resolveReflectiveProviders","resolvedProviderMap","mergeResolvedReflectiveProviders","normalizedProvidersMap","_normalizeProviders","invalidProviderError","from","resolveAndCreate","ResolvedReflectiveProviders","fromResolvedProviders","ReflectiveInjector_","_providers","_parent","_constructionCounter","len","keyIds","objs","_getByKey","resolveAndCreateChild","createChildFromResolved","inj","resolveAndInstantiate","instantiateResolved","_instantiateProvider","getProviderAtIndex","outOfBoundsError","_new","_getMaxNumberOfObjects","cyclicDependencyError","_instantiate","_getByReflectiveDependency","instantiationError","originalException","originalStack","first","INJECTOR_KEY","_getByKeySelf","_getByKeyDefault","_getObjByKeyId","keyId","_throwOrNull","noProviderError","inj_","_mapProviders","ANALYZE_FOR_ENTRY_COMPONENTS","ContentChildren","isViewQuery","descendants","ContentChild","ViewChildren","ViewChild","resolveComponentResources","resourceResolver","componentResolved","urlMap","cachedResourceResolve","promise","resp","then","unwrapResponse","componentResourceResolutionQueue","promises","templateUrl","styleUrls","styleOffset","styleUrl","fullyResolved","all","componentDefResolved","componentDefPendingResolution","delete","clearResolutionOfComponentResourcesQueue","componentNeedsResolution","old","ɵɵallocHostVars","queueHostBindingForCheck","hostVars","getCurrentDirectiveDef","prefillHostVars","totalHostVars","_symbolIterator","getSymbolIterator","Symbol_1","getOwnPropertyNames","looseIdentical","isNaN","devModeEqual$1","isListLikeIterableA","isListLikeIterable$1","isListLikeIterableB","areIterablesEqual$1","comparator","iterator1","iterator2","item1","item2","WrappedValue","wrapped","wrap","unwrap","isWrapped","isJsObject$1","updateBinding","getBinding","bindingUpdated","bindingUpdated2","exp1","exp2","different","bindingUpdated3","exp3","bindingUpdated4","exp4","ɵɵattribute","interpolationV","isBindingUpdated","interpolation1","v0","suffix","interpolation2","i0","v1","interpolation3","i1","v2","interpolation4","i2","v3","interpolation5","i3","v4","interpolation6","i4","v5","interpolation7","i5","v6","interpolation8","i6","v7","ɵɵattributeInterpolate1","interpolatedValue","ɵɵattributeInterpolate2","ɵɵattributeInterpolate3","ɵɵattributeInterpolate4","ɵɵattributeInterpolate5","ɵɵattributeInterpolate6","ɵɵattributeInterpolate7","ɵɵattributeInterpolate8","ɵɵattributeInterpolateV","interpolated","markDirty","scheduleTick","res_1","nothingScheduled","clean","scheduler","playerHandler","flushPlayers","ɵɵcontainer","containerInternal","comment","ɵɵtemplate","attrsIndex","localRefsIndex","templateFirstCreatePass","tViewConsts","embeddedTViewNode","ɵɵcontainerRefreshStart","ɵɵcontainerRefreshEnd","nextIndex","store","ɵɵreference","getContextLView","ɵɵdirectiveInject","ɵɵinjectAttribute","attrNameToInject","injectAttributeImpl","attrsLength","ɵɵinvalidFactory","ɵɵstyleSanitizer","ɵɵstyleProp","stylePropInternal","patchHostStylingFlag","isHostStyling","stylingProp","resolveStylePropValue","resolvedValue","ɵɵclassProp","updated","getClassesContext","getStylesContext","sanitizerToUse","applyStylingValueDirectly","getRenderer","stylingApply","ɵɵstyleMap","hasDirectiveInput","updateDirectiveInputValue","ɵɵclassMap","classMapInternal","valueHasChanged","applyStylingMapDirectly","bindingValueContainsInitial","hasInitial","cachedValueIndex","cachedValue","writeToAttrDirectly","checkIfExternallyModified","cssText","removeStylingValues","isStylingMapArray","initialStyles","newValue","inputName","normalizeStylingDirectiveInputValue","forceClassesAsString","flushStyling","classesContext","stylesContext","styleSanitizer","resetStylingState","resetCurrentStyleSanitizer","registerInitialStylingOnTNode","startIndex","hasAdditionalInitialStyling","attr","updateRawValueOnContext","getContext","allocTStylingContext","ɵɵelementStart","getNamespace","elementStartFirstCreatePass","elementStart","getElementDepthCount","increaseElementDepthCount","ɵɵelementEnd","decreaseElementDepthCount","elementEnd","setDirectiveStylingInput","ɵɵelement","ɵɵelementHostAttrs","hostElementIndex","lastAttrIndex","stylingInputs","ɵɵelementContainerStart","elementContainerStartFirstCreatePass","ɵɵelementContainerEnd","ɵɵelementContainer","ɵɵembeddedViewStart","viewBlockId","containerTNode","viewToRender","scanForView","startIdx","viewAtPositionId","setIsParent","getOrCreateEmbeddedTView","containerTViews","ɵɵembeddedViewEnd","viewHost","ɵɵgetCurrentView","isPromise","isObservable","subscribe","ɵɵlistener","eventName","listenerFn","useCapture","eventTargetResolver","listenerInternal","ɵɵcomponentHostSyntheticListener","isTNodeDirectiveHost","processOutputs","lCleanupIndex","existingListener","findExistingListener","tNodeIdx","cleanupEventName","listenerIdxInLCleanup","__ngLastListenerFn__","__ngNextListenerFn__","wrapListener","listen","addEventListener","propsLength","subscription","idx","executeListenerWithErrorHandling","wrapWithPreventDefault","wrapListenerIn_markDirtyAndPreventDefault","nextListenerFn","preventDefault","returnValue","ɵɵnextContext","level","nextContextImpl","walkUpViews","nestingLevel","matchingProjectionSlotIndex","projectionSlots","wildcardNgContentIndex","ngProjectAsAttrVal","getProjectAsAttrValue","ngProjectAsAttrIdx","ɵɵprojectionDef","componentNode","projectionHeads","tails","componentChild","slotIndex","delayProjection","setDelayProjection","ɵɵprojection","selectorIndex","ɵɵproperty","ɵɵpropertyInterpolate","ɵɵpropertyInterpolate1","ɵɵpropertyInterpolate2","ɵɵpropertyInterpolate3","ɵɵpropertyInterpolate4","ɵɵpropertyInterpolate5","ɵɵpropertyInterpolate6","ɵɵpropertyInterpolate7","ɵɵpropertyInterpolate8","ɵɵpropertyInterpolateV","ɵɵtext","ɵɵtextInterpolate","ɵɵtextInterpolate1","ɵɵtextInterpolate2","ɵɵtextInterpolate3","ɵɵtextInterpolate4","ɵɵtextInterpolate5","ɵɵtextInterpolate6","ɵɵtextInterpolate7","ɵɵtextInterpolate8","ɵɵtextInterpolateV","ɵɵclassMapInterpolate1","ɵɵclassMapInterpolate2","ɵɵclassMapInterpolate3","ɵɵclassMapInterpolate4","ɵɵclassMapInterpolate5","ɵɵclassMapInterpolate6","ɵɵclassMapInterpolate7","ɵɵclassMapInterpolate8","ɵɵclassMapInterpolateV","ɵɵstylePropInterpolate1","valueSuffix","ɵɵstylePropInterpolate2","ɵɵstylePropInterpolate3","ɵɵstylePropInterpolate4","ɵɵstylePropInterpolate5","ɵɵstylePropInterpolate6","ɵɵstylePropInterpolate7","ɵɵstylePropInterpolate8","ɵɵstylePropInterpolateV","ɵɵhostProperty","ɵɵupdateSyntheticHostBinding","getComponent","loadLContext","getComponentAtNodeIndex","getContext$1","getViewComponent","getRootComponents","getInjector","getDirectives","throwOnNotFound","getHostElement","isBrowserEvents","listener","getListeners","lContext","listeners","firstParam","secondParam","name_1","listenerElement","useCaptureOrIndx","sortListeners","getDebugNode","debugNode","loadLContextFromNode","valueInLView","GLOBAL_PUBLISH_EXPANDO_KEY","_published","publishGlobalUtil","COMPILED","createRootComponentView","createRootComponent","componentDef","hostFeatures","instantiateRootComponent","rootTNode","createRootContext","LifecycleHooksFeature","rootTView","dirIndex","getSuperType","ɵɵInheritDefinitionFeature","definition","superType","shouldInheritFields","superDef","writeableDef","maybeUnwrapEmpty","superHostBindings","inheritHostBindings","superViewQuery","superContentQueries","inheritViewQuery","inheritContentQueries","ngInherit","prevViewQuery","ctx","prevContentQueries","prevHostBindings","COPY_DIRECTIVE_FIELDS","COPY_COMPONENT_FIELDS","ɵɵCopyDefinitionFeature","defAny","COPY_DIRECTIVE_FIELDS_1","COPY_DIRECTIVE_FIELDS_1_1","field","COPY_COMPONENT_FIELDS_1","COPY_COMPONENT_FIELDS_1_1","SimpleChange","previousValue","currentValue","firstChange","isFirstChange","ɵɵNgOnChangesFeature","NgOnChangesFeatureImpl","ngOnChanges","ngOnChangesSetInput","wrapOnChanges","wrapOnChangesHook_inPreviousChangesStorage","simpleChangesStore","getSimpleChangesStore","setSimpleChangesStore","SIMPLE_CHANGES_STORE","previousChange","resolveProvider$1","lInjectablesBlueprint","providerFactory","beginIndex","isClassProvider","existingFactoryIndex","existingProvidersFactoryIndex","existingViewProvidersFactoryIndex","doesViewProvidersFactoryExist","multiFactory","f","componentProviders","multiFactoryAdd","multiViewProvidersFactoryResolver","multiProvidersFactoryResolver","isComponentProvider","lData","multiResolve","factories","componentCount","multiProviders","ɵɵProvidersFeature","viewProviders","processProvidersFn","ComponentRef","ComponentFactory","noComponentFactoryError","ERROR_COMPONENT","RendererStyleFlags2","_NullComponentFactoryResolver","resolveComponentFactory","ComponentFactoryResolver","CodegenComponentFactoryResolver","_ngModule","_factories","componentType","ComponentFactoryBoundToModule","rootSelectorOrNode","nativeElement","SWITCH_ELEMENT_REF_FACTORY","SWITCH_ELEMENT_REF_FACTORY__POST_R3__","injectElementRef","RendererFactory2","Version","Renderer2","SWITCH_RENDERER2_FACTORY","SWITCH_RENDERER2_FACTORY__POST_R3__","injectRenderer2","nodeAtIndex","getOrCreateRenderer2","Sanitizer","VERSION","full","major","minor","patch","DefaultIterableDifferFactory","supports","trackByFn","DefaultIterableDiffer","trackByIdentity","_linkedRecords","_unlinkedRecords","_previousItHead","_itHead","_itTail","_additionsHead","_additionsTail","_movesHead","_movesTail","_removalsHead","_removalsTail","_identityChangesHead","_identityChangesTail","_trackByFn","forEachItem","_next","forEachOperation","nextIt","nextRemove","addRemoveOffset","moveOffsets","currentIndex","getPreviousIndex","adjPreviousIndex","_nextRemoved","previousIndex","localMovePreviousIndex","localCurrentIndex","forEachPreviousItem","_nextPrevious","forEachAddedItem","_nextAdded","forEachMovedItem","_nextMoved","forEachRemovedItem","forEachIdentityChange","_nextIdentityChange","diff","collection","check","_reset","itemTrackBy","mayBeDirty","index_1","trackById","_verifyReinsertion","_addIdentityChange","_mismatch","iterateListLike$1","_truncate","isDirty","nextRecord","previousRecord","_prev","_remove","_moveAfter","_reinsertAfter","_addAfter","IterableChangeRecord_","reinsertRecord","_addToMoves","_addToRemovals","_unlink","prevRecord","prev","_prevRemoved","_insertAfter","_DuplicateMap","put","toIndex","_prevDup","_nextDup","_DuplicateItemRecordList","_head","_tail","atOrAfterIndex","duplicates","recordList","moveOffset","DefaultKeyValueDifferFactory","DefaultKeyValueDiffer","_mapHead","_appendAfter","_previousMapHead","_changesHead","_changesTail","forEachChangedItem","_nextChanged","_forEach","_maybeAddToChanges","_getOrCreateRecordForKey","_insertBeforeOrAppend","before","record_1","KeyValueChangeRecord_","_addToAdditions","_addToChanges","IterableDiffers","copied","extend","find","iterable","getTypeNameForDebugging","KeyValueDiffers","kv","keyValDiff","defaultIterableDiffers","defaultKeyValueDiffers","SWITCH_TEMPLATE_REF_FACTORY","SWITCH_TEMPLATE_REF_FACTORY__POST_R3__","injectTemplateRef","SWITCH_VIEW_CONTAINER_REF_FACTORY","SWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__","injectViewContainerRef","expressionChangedAfterItHasBeenCheckedError","currValue","isFirstCheck","viewDebugError","err","_addDebugContext","logError","viewDestroyedError","shiftInitState","priorInitState","newInitState","initState","initIndex","shouldCallLifecycleInitHook","asTextData","asElementData","asProviderData","asPureExpressionData","asQueryList","Services","setCurrentNode","createRootView","createComponentView","createNgModuleRef","overrideProvider","overrideComponentView","clearOverrides","checkAndUpdateView","checkNoChangesView","destroyView","resolveDep","createDebugContext","handleEvent","updateDirectives","updateRenderer","dirtyParentQueries","NOOP","_tokenKeyCache","tokenKey","_renderCompCount$1","checkBinding","bindingIdx","oldValues","checkAndUpdateBinding","checkBindingNoChanges","bindingName","bindings","markParentViewsForCheck","currView","viewContainerParent","markParentViewsForCheckProjectedViews","endView","dispatchEvent","event","root","declaredViewContainer","parentNodeDef","viewParentEl","renderNode","renderElement","renderText","isComponentView","isEmbeddedView","filterQueryId","queryId","splitMatchedQueriesDsl","matchedQueriesDsl","matchedQueries","matchedQueryIds","references","valueType","splitDepsDsl","sourceName","getParentRenderElement","renderHost","componentRendererType","DEFINITION_CACHE","WeakMap","resolveDefinition","visitRootRenderNodes","lastRenderRootNode","visitSiblingRenderNodes","nodeDef","visitRenderNode","childCount","visitProjectedRenderNodes","ngContentIndex","compView","hostElDef","projectedNodes","execRenderNodeAction","ngContent","rn","bindingFlags","embeddedViews","viewContainer","_embeddedViews","NS_PREFIX_RE","splitNamespace","calcBindingFlags","_toStringWithNull","UNDEFINED_VALUE","InjectorRefTokenKey","INJECTORRefTokenKey","NgModuleRefTokenKey","resolveNgModuleDep","depDef","tokenKey_1","providerDef","_def","providersByKey","providerInstance","_createProviderInstance","targetsModule","moduleTransitivelyPresent","modules","injectable","_createClass","depValues","_callFactory","detachEmbeddedView","elementData","renderDetachView$1","renderAttachEmbeddedView","prevView","prevRenderNode","EMPTY_CONTEXT","getComponentViewDefinitionFactory","viewDefFactory","ComponentFactory_","_inputs","_outputs","inputsArr","templateName","outputsArr","viewDef","componentNodeIndex","componentProvider","ComponentRef_","ViewRef_","_viewRef","_component","_elDef","changeDetectorRef","Injector_","createViewContainerData","elDef","elData","ViewContainerRef_","ref","viewRef_","attachEmbeddedView","attachProjectedView","vcElementData","dvcElementData","projectedViews","_projectedViews","markNodeAsProjectedTemplate","nodeFlags","childFlags","moveEmbeddedView","oldViewIndex","newViewIndex","createChangeDetectorRef","rootRenderNodes","renderNodes","fs","disposables","createTemplateData","TemplateRef_","_parentView","createInjector$1","moduleType","bootstrapComponents","NgModuleRef_","_moduleType","_bootstrapComponents","_destroyListeners","initNgModule","provDef","injectFlags","callNgModuleLifecycle","lifecycles","Renderer2TokenKey","ElementRefTokenKey","ViewContainerRefTokenKey","TemplateRefTokenKey","ChangeDetectorRefTokenKey","InjectorRefTokenKey$1","INJECTORRefTokenKey$1","checkIndex","depDefs","outputIndex","directChildFlags","childMatchedQueries","query","createProviderInstance","_createProviderInstance$1","createPipeInstance","createClass","createDirectiveInstance","outputObservable","eventHandlerClosure","allowPrivateServices","callFactory","NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR","searchView","findCompView","providerDef_1","allProviders","publicProviders","providerData","updateProp","changes","nonMinifiedName","callLifecycleHooksChildrenFirst","callProviderLifecycles","callElementProvidersLifecycles","ComponentFactoryResolver$1","ComponentFactory$1","toRefArray","nonMinified","SCHEDULER","stringifyCSSSelectorList","selectorList","isBoundToModule","rootViewInjector","createChainedInjector","hostRNode","rootFlags","isIsolated","tElementNode","rootLView","nodesforSlot","ComponentRef$1","LocaleDataIndex","_rootLView","destroyCbs","u","localeEn","plural","abs","LOCALE_DATA","findLocaleData","locale","normalizedLocale","normalizeLocale","getLocaleData","parentLocale","getLocalePluralCase","ɵLocaleDataIndex","PluralCase","common","locales","MARKER","ICU_BLOCK_REGEXP","SUBTEMPLATE_REGEXP","PH_REGEXP","BINDING_REGEXP","ICU_REGEXP","ROOT_TEMPLATE_ID","PP_MULTI_VALUE_PLACEHOLDERS_REGEXP","PP_PLACEHOLDERS_REGEXP","PP_ICU_VARS_REGEXP","PP_ICU_PLACEHOLDERS_REGEXP","PP_ICUS_REGEXP","PP_CLOSE_TEMPLATE_REGEXP","PP_TEMPLATE_ID_REGEXP","extractParts","pattern","prevPos","braceStack","braces","lastIndex","exec","pos","block","parseICUBlock","substring_1","cases","icuType","mainBinding","parseInt","blocks","removeInnerTemplateTranslation","tagMatched","inTemplate","generateBindingUpdateOpCodes","destinationNode","updateOpCodes","textParts","textValue","toMaskBit","getBindingMask","icuExpression","valueArr","i18nIndexStack","i18nIndexStackPointer","min","i18nVarsCount","parentIndexStack","ɵɵi18nStart","subTemplateIndex","i18nStartFirstPass","parentIndexPointer","createOpCodes","icuExpressions","msgParts","replaceNgsp","NGSP_UNICODE_REGEXP","getTranslationForTemplate","search","phIndex","icuNodeIndex","icuStart","hasBinding","textNodeIndex","allocExpando","numSlotsToAlloc","update","appendI18nNode","previousTNode","ɵɵi18nPostprocess","replacements","matches_1","templateIdsStack_1","phs","tmpl","placeholders","placeholder","templateId","isCloseTemplateTag","currentTemplateId","_type","_idx","ɵɵi18nEnd","i18nEndFirstPass","rootIndex","tI18n","lastCreatedNode","visitedNodes","readCreateOpCodes","removeNode","createDynamicNodeAtIndex","currentTNode","textRNode","destinationNodeIndex","elementNodeIndex","commentNodeIndex","commentRNode","activeCaseIndex","tagNameValue","markAsDetached","removedPhTNode","removedPhRNode","ɵɵi18n","ɵɵi18nAttributes","i18nAttributesFirstPass","previousElementIndex","changeMask","shiftsCounter","ɵɵi18nExp","ɵɵi18nApply","readUpdateOpCodes","bindingsStartIndex","bypassCheckBit","caseCreated","icuTNode","removeCodes","removeOpCode","activeIndex","caseIndex","getCaseIndex","resolvedCase","getPluralCase","getLocaleId","LOCALE_ID","tIcus","createCodes","updateCodes","childIcus","nestedIcus","icuIndex","icuCase","parseIcuCase","opCodes","parseNodes","currentNode","nestedIcusToCreate","lowerAttrName","COMMENT_NODE","NESTED_ICU","nestedIcuIndex","nestedIcu","nestedIcuNodeIndex","nestTIcuIndex","setLocaleId","localeId","assertSameOrNotExisting","incoming","registerNgModuleType","COMPONENT_FACTORY_RESOLVER","NgModuleRef$1","ngLocaleIdDef","getNgLocaleIdDef","_r3Injector","NgModuleFactory$1","ɵɵpureFunction0","slotOffset","pureFn","thisArg","ɵɵpureFunction1","exp","pureFunction1Internal","ɵɵpureFunction2","pureFunction2Internal","ɵɵpureFunction3","pureFunction3Internal","ɵɵpureFunction4","pureFunction4Internal","ɵɵpureFunction5","exp5","ɵɵpureFunction6","exp6","ɵɵpureFunction7","exp7","ɵɵpureFunction8","exp8","ɵɵpureFunctionV","exps","pureFunctionVInternal","bindingRoot","ɵɵpipe","pipeName","getPipeDef$1","pipeInstance","ɵɵpipeBind1","unwrapValue$1","isPure","transform","ɵɵpipeBind2","ɵɵpipeBind3","ɵɵpipeBind4","ɵɵpipeBindV","EventEmitter","isAsync","__isAsync","emit","generatorOrNext","complete","schedulerFn","errorFn","completeFn","sink","Subscription","Subject","symbolIterator","_results","QueryList","symbol","filter","reduce","init","toArray","reset","resultsTree","last","notifyOnChanges","setDirty","LQuery_","queryList","clone","LQueries_","tQueries","noOfInheritedQueries","viewLQueries","tQuery","getByIndex","indexInDeclarationView","dirtyQueriesWithMatches","getTQuery","TQueryMetadata_","predicate","isStatic","read","TQueries_","queriesForTemplateRef","childQueryIndex","tqueryClone","track","tquery","TQuery_","crossesNgTemplate","_appliesToNextNode","_declarationNodeIndex","isApplyingToNode","matchTNode","addMatch","matchTNodeWithReadOption","getIdxOfMatchingSelector","typePredicate","nodeMatchIdx","directiveOrProviderIdx","matchIdx","createResultForNode","matchingIdx","createResultByTNodeType","createSpecialToken","materializeViewResults","queryIndex","lQuery","tViewData","tQueryMatches","matchedNodeIdx","ɵɵqueryRefresh","collectQueryResults","lViewResults","embeddedLViews","i_2","ɵɵstaticViewQuery","descend","viewQueryInternal","ɵɵviewQuery","createTQuery","createLQuery","ɵɵcontentQuery","contentQueryInternal","ɵɵstaticContentQuery","saveContentQueryAndDirectiveIndex","tViewContentQueries","ɵɵloadQuery","loadQueryInternal","storeCleanupWithContext","ɵɵtemplateRefExtractor","ɵɵinjectPipeChangeDetectorRef","angularCoreEnv","EMPTY_ARRAY$4","moduleQueue","flushingModuleQueue","flushModuleScopingQueueAsMuchAsPossible","every","isResolvedDeclaration","setScopeOnDeclaredComponents","declaration","compileNgModule","compileNgModuleDefs","enqueueModuleForDelayedScoping","allowDuplicateDeclarationsInRoot","expandModuleWithProviders","compileInjector","transitiveScopes","transitiveScopesFor","patchComponentDefWithScope","ngSelectorScope","compilation","dir","pipe","forceRecalc","isNgModule","scopes","exported","declared","importedType","importedScope","exportedType","exportedScope","isModuleWithProviders","compileComponent","ngComponentDef","maybeQueueResolutionOfComponentResources","addDirectiveFactoryDef","directiveMetadata","typeSourceSpan","createParseSourceSpan","preserveWhitespaces","animations","interpolation","usesInheritance","addDirectiveDefToUndecoratedParents","hasSelectorScope","compileDirective","ngDirectiveDef","getDirectiveMetadata","sourceMapUrl","facade","Directive","extendsDirectlyFromObject","extractQueriesMetadata","isContentQuery","lifecycle","usesOnChanges","splitByComma","viewQueries","objPrototype","shouldAddAbstractDirective","isQueryAnn","queriesMeta","annotations_1","ann","isInputAnnotation","convertToR3QueryMetadata","propertyName","static","piece","LIFECYCLE_HOOKS","hookName","metadataName","compilePipe","ngPipeDef","getPipeMetadata","SWITCH_COMPILE_DIRECTIVE","Component","SWITCH_COMPILE_COMPONENT","SWITCH_COMPILE_PIPE","Input","bindingPropertyName","Output","HostBinding","hostPropertyName","HostListener","SWITCH_COMPILE_COMPONENT__POST_R3__","SWITCH_COMPILE_DIRECTIVE__POST_R3__","SWITCH_COMPILE_PIPE__POST_R3__","NgModule","SWITCH_COMPILE_NGMODULE","SWITCH_COMPILE_NGMODULE__POST_R3__","APP_INITIALIZER","ApplicationInitStatus","appInits","initialized","donePromise","rej","reject","runInitializers","asyncInitPromises","initResult","catch","ApplicationInitStatus_Factory","APP_ID","APP_ID_RANDOM_PROVIDER","_appIdRandomProviderFactory","_randomChar","fromCharCode","random","MissingTranslationStrategy","PLATFORM_INITIALIZER","PLATFORM_ID","APP_BOOTSTRAP_LISTENER","PACKAGE_ROOT_URL","Console","Console_Factory","LOCALE_ID$1","DEFAULT_CURRENCY_CODE","TRANSLATIONS","TRANSLATIONS_FORMAT","ModuleWithComponentFactories","ngModuleFactory","componentFactories","Compiler_compileModuleSync__POST_R3__","Compiler_compileModuleSync","Compiler_compileModuleAsync__POST_R3__","Compiler_compileModuleAsync","Compiler_compileModuleAndAllComponentsSync__POST_R3__","Compiler_compileModuleAndAllComponentsSync","Compiler_compileModuleAndAllComponentsAsync__POST_R3__","Compiler_compileModuleAndAllComponentsAsync","Compiler","compileModuleSync","compileModuleAsync","compileModuleAndAllComponentsSync","compileModuleAndAllComponentsAsync","clearCache","clearCacheFor","getModuleId","Compiler_Factory","COMPILER_OPTIONS","CompilerFactory","scheduleMicroTask","Zone","NgZone","enableLongStackTrace","shouldCoalesceEventChangeDetection","hasPendingMacrotasks","hasPendingMicrotasks","isStable","onUnstable","onMicrotaskEmpty","onStable","onError","assertZonePatched","_nesting","_outer","_inner","fork","lastRequestAnimationFrameId","nativeRequestAnimationFrame","getNativeRequestAnimationFrame","nativeCancelAnimationFrame","unpatchedRequestAnimationFrame","__symbol__","unpatchedCancelAnimationFrame","forkInnerZoneWithAngularBehavior","zone","maybeDelayChangeDetection","delayChangeDetectionForEvents","updateMicroTaskStatus","checkStable","properties","isAngularZone","onInvokeTask","delegate","task","applyThis","applyArgs","onEnter","invokeTask","onLeave","onInvoke","invoke","onHasTask","hasTaskState","hasTask","change","_hasPendingMicrotasks","microTask","macroTask","onHandleError","runOutsideAngular","isInAngularZone","assertInAngularZone","assertNotInAngularZone","run","runTask","scheduleEventTask","EMPTY_PAYLOAD","noop$1","cancelTask","runGuarded","_platform","NoopNgZone","Testability","_ngZone","_pendingCount","_isZoneStable","_didWork","_callbacks","taskTrackingZone","_watchAngularEvents","_runCallbacksIfReady","increasePendingRequestCount","decreasePendingRequestCount","cb","clearTimeout","timeoutId","doneCb","pending_1","getPendingTasks","updateCb","macroTasks","creationLocation","addCallback","timeout","whenStable","getPendingRequestCount","findProviders","using","exactMatch","Testability_Factory","TestabilityRegistry","_applications","_testabilityGetter","addToWindow","registerApplication","testability","unregisterApplication","unregisterAllApplications","getTestability","elem","getAllTestabilities","getAllRootElements","findTestabilityInTree","findInAncestors","TestabilityRegistry_Factory","_NoopGetTestability","compileNgModuleFactory","compileNgModuleFactory__POST_R3__","moduleFactory","isComponentResourceResolutionQueueEmpty","compilerProviders","_mergeArrays","part","resourceLoader","ResourceLoader","publishDefaultGlobalUtils$1","publishDefaultGlobalUtils__POST_R3__","isBoundToModule__POST_R3__","cf","ALLOW_MULTIPLE_PLATFORMS","NgProbeToken","createPlatform","PlatformRef","inits","createPlatformFactory","parentPlatformFactory","desc","extraProviders","platform","getPlatform","injectedProviders","assertPlatform","requiredToken","_injector","_modules","bootstrapModuleFactory","ngZone","getNgZone","ngZoneOption","ngZoneEventCoalescing","ngZoneInjector","moduleRef","exceptionHandler","_callAndReportToErrorHandler","initStatus","_moduleDoBootstrap","bootstrapModule","compilerOptions","optionsReducer","ApplicationRef","ngDoBootstrap","PlatformRef_Factory","_zone","_exceptionHandler","_componentFactoryResolver","_initStatus","_bootstrapListeners","_views","_runningTick","_enforceNoNewChanges","_stable","componentTypes","tick","isCurrentlyStable","Observable","observer","stableSub","unstableSub","share","componentOrFactory","compRef","_unloadComponent","_loadComponent","_d","_e","_f","attachView","ApplicationRef_Factory","NgModuleFactoryLoader","getModuleFactory__POST_R3__","getRegisteredNgModuleType","noModuleError","getModuleFactory","SystemJsNgModuleLoaderConfig","DEFAULT_CONFIG","factoryPathPrefix","factoryPathSuffix","SystemJsNgModuleLoader","_compiler","_config","path","loadAndCompile","exportName","System","import","checkNotEmpty","loadFactory","factoryClassSuffix","SystemJsNgModuleLoader_Factory","modulePath","ViewRef$1","EmbeddedViewRef","DebugEventListener","DebugNode__PRE_R3__","nativeNode","DebugElement__PRE_R3__","addChild","providerTokens","childNodes","childIndex","insertChildrenAfter","newChildren","siblingIndex","refChild","newChild","refIndex","queryAll","_queryElementChildren","queryAllNodes","_queryNodeChildren","triggerEventHandler","eventObj","DebugNode__POST_R3__","DebugElement__POST_R3__","getLocalRefs","discoverLocalRefs","getInjectionTokens","copyDomProperties","NodePrototype","descriptors","getOwnPropertyDescriptors","startsWith","isPrimitiveValue","collectPropertyBindings","bindingIndexes","metadataParts","lowercaseTNodeAttrs","eAttrs","lowercaseName","children","getDebugNode__POST_R3__","_queryAllR3","invokedListeners","eventListeners","unwrappedListener","parentElement","elementsOnly","_queryNodeChildrenR3","_queryNativeNodeDescendants","rootNativeNode","_addQueryMatchR3","nodeOrContainer","_queryNodeChildrenInContainerR3","head","head_1","head_1_1","nextTNode","nextLView","childView","getDebugNode$1","_nativeNodeToDebugNode","NG_DEBUG_PROPERTY","indexDebugNode","ViewAction","DebugNode","DebugElement","platformCore","APPLICATION_MODULE_PROVIDERS","zoneSchedulerFactory","queue","_iterableDiffersFactory","_keyValueDiffersFactory","_localeFactory","getGlobalLocale","$localize","ApplicationModule","ApplicationModule_Factory","selectorOrNode","ns","parentEl","listenToElementOutputs","handleEventClosure","renderEventHandlerClosure","listenTarget","listenerView","disposable","checkAndUpdateElementValue","setElementAttribute","securityContext","renderValue","setElementClass","setElementStyle","unit","setElementProperty","queryIds","nodeMatchedQueries","tplDef","filterId","checkAndUpdateQuery","elementDef","calcQueryValues","notify","boundValue","bindingType","queryDef","getQueryValue","dvc","projectedView","queryValueType","appendNgContent","_pureExpressionDef","propertyNames","_addInterpolationPart","isNgContainer","validateNode","nodeCount","parentEnd","anchorDef","createView","initView","createViewNodes","compRenderer","outputCount","bindingCount","nodeData","compViewDef","execComponentViewsAction","CreateViewNodes","execQueriesAction","markProjectedViewsForCheck","execEmbeddedViewsAction","CheckNoChanges","CheckAndUpdate","callInit","checkAndUpdateNode","argStyle","v8","v9","checkAndUpdateNodeInline","checkAndUpdateElementInline","bindLen","checkAndUpdateTextInline","checkAndUpdateDirectiveInline","checkAndUpdatePureExpressionInline","checkAndUpdateNodeDynamic","checkAndUpdateElementDynamic","checkAndUpdateTextDynamic","checkAndUpdateDirectiveDynamic","checkAndUpdatePureExpressionDynamic","checkNoChangesNode","checkNoChangesNodeInline","checkNoChangesNodeDynamic","checkNoChangesQuery","Destroy","detachProjectedView","destroyViewNodes","callViewAction","viewState","execProjectedViewsAction","CheckNoChangesProjectedViews","CheckAndUpdateProjectedViews","queryFlags","staticDynamicQueryFlag","checkType","initServicesIfNeeded","services","createDebugServices","debugSetCurrentNode","debugCreateRootView","debugCreateEmbeddedView","debugCreateComponentView","debugCreateNgModuleRef","debugOverrideProvider","debugOverrideComponentView","debugClearOverrides","debugCheckAndUpdateView","debugCheckNoChangesView","debugDestroyView","DebugContext_","debugHandleEvent","debugUpdateDirectives","debugUpdateRenderer","createProdServices","createProdRootView","prodCheckAndUpdateNode","prodCheckNoChangesNode","elInjector","createRootData","DebugRendererFactory2","defWithOverride","applyProviderOverridesToView","callWithDebugContext","DebugAction","viewDefOverrides","applyProviderOverridesToNgModule","calcHasOverrides","hasOverrides","hasDeprecatedOverrides","providerOverrides","override","deprecatedBehavior","providerOverridesWithScope","applyProviderOverrides","moduleSet_1","_currentAction","_currentView","_currentNodeIndex","comp","compFactory","hostViewDef","elementIndicesWithOverwrittenProviders","findElementIndicesWithOverwrittenProviders","elIndicesWithOverwrittenProviders","lastElementDef","applyProviderOverridesToElement","elIndex","nextDirectiveWithBinding","debugCheckDirectivesFn","debugCheckAndUpdateNode","debugCheckNoChangesNode","nextRenderNodeWithBinding","debugCheckRenderNodeFn","givenValues","bindingValues","camelCaseToDashCase","elView","elOrCompView","childDef","collectReferences","findHostElement","logViewDef","logNodeIndex","renderNodeIndex","getRenderNodeIndex","currRenderNodeIndex","nodeLogger","refName","oldAction","oldView","oldNodeIndex","isViewDebugError","viewWrappedDebugError","getCurrentDebugContext","renderData","DebugRenderer2","whenRenderingDone","debugContextFactory","removeDebugNodeFromIndex","debugCtx","debugEl","debugChildEl","debugRefEl","oldChild","preserveContent","NgModuleFactory_","_ngModuleDefFactory","cloneNgModuleDefinition","CUSTOM_ELEMENTS_SCHEMA","NO_ERRORS_SCHEMA","asNativeElements","debugEls","destroyPlatform","enableProdMode","setTestabilityGetter","ɵALLOW_MULTIPLE_PLATFORMS","ɵAPP_ID_RANDOM_PROVIDER","ɵCodegenComponentFactoryResolver","ɵCompiler_compileModuleAndAllComponentsAsync__POST_R3__","ɵCompiler_compileModuleAndAllComponentsSync__POST_R3__","ɵCompiler_compileModuleAsync__POST_R3__","ɵCompiler_compileModuleSync__POST_R3__","ɵComponentFactory","ɵConsole","ɵDEFAULT_LOCALE_ID","ɵEMPTY_ARRAY","ɵEMPTY_MAP","ɵINJECTOR_IMPL__POST_R3__","ɵINJECTOR_SCOPE","ɵLifecycleHooksFeature","ɵNG_COMP_DEF","ɵNG_DIR_DEF","ɵNG_ELEMENT_ID","ɵNG_INJ_DEF","ɵNG_MOD_DEF","ɵNG_PIPE_DEF","ɵNG_PROV_DEF","ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR","ɵNO_CHANGE","ɵNgModuleFactory","ɵNoopNgZone","ɵReflectionCapabilities","ɵRender3ComponentFactory","ɵRender3ComponentRef","ɵRender3NgModuleRef","ɵSWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__","ɵSWITCH_COMPILE_COMPONENT__POST_R3__","ɵSWITCH_COMPILE_DIRECTIVE__POST_R3__","ɵSWITCH_COMPILE_INJECTABLE__POST_R3__","ɵSWITCH_COMPILE_NGMODULE__POST_R3__","ɵSWITCH_COMPILE_PIPE__POST_R3__","ɵSWITCH_ELEMENT_REF_FACTORY__POST_R3__","ɵSWITCH_IVY_ENABLED__POST_R3__","ɵSWITCH_RENDERER2_FACTORY__POST_R3__","ɵSWITCH_TEMPLATE_REF_FACTORY__POST_R3__","ɵSWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__","ɵ_sanitizeHtml","ɵ_sanitizeStyle","ɵ_sanitizeUrl","ɵallowSanitizationBypassAndThrow","ɵand","templateFactory","ɵbypassSanitizationTrustHtml","bypassSanitizationTrustHtml","trustedHtml","ɵbypassSanitizationTrustResourceUrl","bypassSanitizationTrustResourceUrl","trustedResourceUrl","ɵbypassSanitizationTrustScript","bypassSanitizationTrustScript","trustedScript","ɵbypassSanitizationTrustStyle","bypassSanitizationTrustStyle","trustedStyle","ɵbypassSanitizationTrustUrl","bypassSanitizationTrustUrl","trustedUrl","ɵccf","createComponentFactory","ɵclearOverrides","ɵclearResolutionOfComponentResourcesQueue","ɵcmf","createNgModuleFactory","defFactory","ɵcompileComponent","ɵcompileDirective","ɵcompileNgModule","ɵcompileNgModuleDefs","ɵcompileNgModuleFactory__POST_R3__","ɵcompilePipe","ɵcreateInjector","ɵcrt","createRendererType2","ɵdefaultIterableDiffers","ɵdefaultKeyValueDiffers","ɵdetectChanges","ɵdevModeEqual","ɵdid","outputDefs","ɵeld","namespaceAndName","fixedAttrs","bindingDefs","suffixOrSecurityContext","ns_1","resolveRendererType2","isFilled","None","ɵfindLocaleData","ɵflushModuleScopingQueueAsMuchAsPossible","ɵgetComponentViewDefinitionFactory","ɵgetDebugNode__POST_R3__","ɵgetDirectives","ɵgetHostElement","ɵgetInjectableDef","ɵgetLContext","ɵgetLocalePluralCase","ɵgetModuleFactory__POST_R3__","ɵgetSanitizationBypassType","ɵglobal","ɵinitServicesIfNeeded","ɵinlineInterpolate","inlineInterpolate","valueCount","c0","a1","c1","a2","c2","a3","c3","a4","c4","a5","c5","a6","c6","a7","c7","a8","c8","a9","c9","ɵinterpolate","interpolate","constAndInterp","ɵisBoundToModule__POST_R3__","ɵisDefaultChangeDetectionStrategy","isDefaultChangeDetectionStrategy","changeDetectionStrategy","ɵisListLikeIterable","ɵisObservable","ɵisPromise","ɵivyEnabled","ɵlooseIdentical","ɵmakeDecorator","ɵmarkDirty","moduleDef","ɵmpd","moduleProvideDef","ɵncd","ngContentDef","ɵnov","ɵoverrideComponentView","ɵoverrideProvider","ɵpad","pureArrayDef","argCount","ɵpatchComponentDefWithScope","ɵpid","ɵpod","pureObjectDef","propToIndex","nbKeys","ɵppd","purePipeDef","ɵprd","ɵpublishDefaultGlobalUtils","publishDefaultGlobalUtils","ɵpublishGlobalUtil","ɵqud","ɵregisterLocaleData","registerLocaleData","extraData","LocaleId","ExtraData","ɵregisterModuleFactory","registerModuleFactory","ɵregisterNgModuleType","ɵrenderComponent","renderComponent$1","ɵresetCompiledComponents","resetCompiledComponents","ɵresolveComponentResources","ɵsetClassMetadata","setClassMetadata","clazz","parentPrototype","parentConstructor","ɵsetCurrentInjector","ɵsetDocument","setDocument","ɵsetLocaleId","ɵstore","ɵstringify","ɵted","textDef","staticText","ɵtransitiveScopesFor","ɵunregisterLocaleData","unregisterAllLocaleData","ɵunv","unwrapValue","nodeIdx","globalBindingIdx","ɵunwrapSafeValue","ɵvid","viewBindingCount","viewDisposableCount","viewNodeFlags","viewRootNodeFlags","viewMatchedQueries","currentParent","currentRenderParent","currentElementHasPublicProviders","currentElementHasPrivateProviders","newParent","rootNodeFlags","ɵwhenRendered","whenRendered"],"mappings":"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","sourcesContent":["/**\n * @license Angular v9.0.0-rc.1+728.sha-17e98e1\n * (c) 2010-2020 Google LLC. https://angular.io/\n * License: MIT\n */\n\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs'), require('rxjs/operators')) :\n    typeof define === 'function' && define.amd ? define('@angular/core', ['exports', 'rxjs', 'rxjs/operators'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.core = {}), global.rxjs, global.rxjs.operators));\n}(this, (function (exports, rxjs, operators) { 'use strict';\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\r\n\r\n    function __rest(s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                    t[p[i]] = s[p[i]];\r\n            }\r\n        return t;\r\n    }\r\n\r\n    function __decorate(decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    }\r\n\r\n    function __param(paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    }\r\n\r\n    function __metadata(metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    }\r\n\r\n    function __awaiter(thisArg, _arguments, P, generator) {\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    }\r\n\r\n    function __generator(thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    }\r\n\r\n    function __exportStar(m, exports) {\r\n        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n    }\r\n\r\n    function __values(o) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n        if (m) return m.call(o);\r\n        return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n    }\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\r\n\r\n    function __spread() {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    }\r\n\r\n    function __spreadArrays() {\r\n        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n        for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n                r[k] = a[j];\r\n        return r;\r\n    };\r\n\r\n    function __await(v) {\r\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n    }\r\n\r\n    function __asyncGenerator(thisArg, _arguments, generator) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n        return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n        function fulfill(value) { resume(\"next\", value); }\r\n        function reject(value) { resume(\"throw\", value); }\r\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n    }\r\n\r\n    function __asyncDelegator(o) {\r\n        var i, p;\r\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n    }\r\n\r\n    function __asyncValues(o) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var m = o[Symbol.asyncIterator], i;\r\n        return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n    }\r\n\r\n    function __makeTemplateObject(cooked, raw) {\r\n        if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n        return cooked;\r\n    };\r\n\r\n    function __importStar(mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n        result.default = mod;\r\n        return result;\r\n    }\r\n\r\n    function __importDefault(mod) {\r\n        return (mod && mod.__esModule) ? mod : { default: mod };\r\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var ANNOTATIONS = '__annotations__';\n    var PARAMETERS = '__parameters__';\n    var PROP_METADATA = '__prop__metadata__';\n    /**\n     * @suppress {globalThis}\n     */\n    function makeDecorator(name, props, parentClass, additionalProcessing, typeFn) {\n        var metaCtor = makeMetadataCtor(props);\n        function DecoratorFactory() {\n            var _a;\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            if (this instanceof DecoratorFactory) {\n                metaCtor.call.apply(metaCtor, __spread([this], args));\n                return this;\n            }\n            var annotationInstance = new ((_a = DecoratorFactory).bind.apply(_a, __spread([void 0], args)))();\n            return function TypeDecorator(cls) {\n                if (typeFn)\n                    typeFn.apply(void 0, __spread([cls], args));\n                // Use of Object.defineProperty is important since it creates non-enumerable property which\n                // prevents the property is copied during subclassing.\n                var annotations = cls.hasOwnProperty(ANNOTATIONS) ?\n                    cls[ANNOTATIONS] :\n                    Object.defineProperty(cls, ANNOTATIONS, { value: [] })[ANNOTATIONS];\n                annotations.push(annotationInstance);\n                if (additionalProcessing)\n                    additionalProcessing(cls);\n                return cls;\n            };\n        }\n        if (parentClass) {\n            DecoratorFactory.prototype = Object.create(parentClass.prototype);\n        }\n        DecoratorFactory.prototype.ngMetadataName = name;\n        DecoratorFactory.annotationCls = DecoratorFactory;\n        return DecoratorFactory;\n    }\n    function makeMetadataCtor(props) {\n        return function ctor() {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            if (props) {\n                var values = props.apply(void 0, __spread(args));\n                for (var propName in values) {\n                    this[propName] = values[propName];\n                }\n            }\n        };\n    }\n    function makeParamDecorator(name, props, parentClass) {\n        var metaCtor = makeMetadataCtor(props);\n        function ParamDecoratorFactory() {\n            var _a;\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            if (this instanceof ParamDecoratorFactory) {\n                metaCtor.apply(this, args);\n                return this;\n            }\n            var annotationInstance = new ((_a = ParamDecoratorFactory).bind.apply(_a, __spread([void 0], args)))();\n            ParamDecorator.annotation = annotationInstance;\n            return ParamDecorator;\n            function ParamDecorator(cls, unusedKey, index) {\n                // Use of Object.defineProperty is important since it creates non-enumerable property which\n                // prevents the property is copied during subclassing.\n                var parameters = cls.hasOwnProperty(PARAMETERS) ?\n                    cls[PARAMETERS] :\n                    Object.defineProperty(cls, PARAMETERS, { value: [] })[PARAMETERS];\n                // there might be gaps if some in between parameters do not have annotations.\n                // we pad with nulls.\n                while (parameters.length <= index) {\n                    parameters.push(null);\n                }\n                (parameters[index] = parameters[index] || []).push(annotationInstance);\n                return cls;\n            }\n        }\n        if (parentClass) {\n            ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);\n        }\n        ParamDecoratorFactory.prototype.ngMetadataName = name;\n        ParamDecoratorFactory.annotationCls = ParamDecoratorFactory;\n        return ParamDecoratorFactory;\n    }\n    function makePropDecorator(name, props, parentClass, additionalProcessing) {\n        var metaCtor = makeMetadataCtor(props);\n        function PropDecoratorFactory() {\n            var _a;\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            if (this instanceof PropDecoratorFactory) {\n                metaCtor.apply(this, args);\n                return this;\n            }\n            var decoratorInstance = new ((_a = PropDecoratorFactory).bind.apply(_a, __spread([void 0], args)))();\n            function PropDecorator(target, name) {\n                var constructor = target.constructor;\n                // Use of Object.defineProperty is important since it creates non-enumerable property which\n                // prevents the property is copied during subclassing.\n                var meta = constructor.hasOwnProperty(PROP_METADATA) ?\n                    constructor[PROP_METADATA] :\n                    Object.defineProperty(constructor, PROP_METADATA, { value: {} })[PROP_METADATA];\n                meta[name] = meta.hasOwnProperty(name) && meta[name] || [];\n                meta[name].unshift(decoratorInstance);\n                if (additionalProcessing)\n                    additionalProcessing.apply(void 0, __spread([target, name], args));\n            }\n            return PropDecorator;\n        }\n        if (parentClass) {\n            PropDecoratorFactory.prototype = Object.create(parentClass.prototype);\n        }\n        PropDecoratorFactory.prototype.ngMetadataName = name;\n        PropDecoratorFactory.annotationCls = PropDecoratorFactory;\n        return PropDecoratorFactory;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Inject decorator and metadata.\n     *\n     * @Annotation\n     * @publicApi\n     */\n    var Inject = makeParamDecorator('Inject', function (token) { return ({ token: token }); });\n    /**\n     * Optional decorator and metadata.\n     *\n     * @Annotation\n     * @publicApi\n     */\n    var Optional = makeParamDecorator('Optional');\n    /**\n     * Self decorator and metadata.\n     *\n     * @Annotation\n     * @publicApi\n     */\n    var Self = makeParamDecorator('Self');\n    /**\n     * SkipSelf decorator and metadata.\n     *\n     * @Annotation\n     * @publicApi\n     */\n    var SkipSelf = makeParamDecorator('SkipSelf');\n    /**\n     * Host decorator and metadata.\n     *\n     * @Annotation\n     * @publicApi\n     */\n    var Host = makeParamDecorator('Host');\n    /**\n     * Attribute decorator and metadata.\n     *\n     * @Annotation\n     * @publicApi\n     */\n    var Attribute = makeParamDecorator('Attribute', function (attributeName) { return ({ attributeName: attributeName }); });\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    (function (InjectFlags) {\n        // TODO(alxhub): make this 'const' when ngc no longer writes exports of it into ngfactory files.\n        /** Check self and check parent injector if needed */\n        InjectFlags[InjectFlags[\"Default\"] = 0] = \"Default\";\n        /**\n         * Specifies that an injector should retrieve a dependency from any injector until reaching the\n         * host element of the current component. (Only used with Element Injector)\n         */\n        InjectFlags[InjectFlags[\"Host\"] = 1] = \"Host\";\n        /** Don't ascend to ancestors of the node requesting injection. */\n        InjectFlags[InjectFlags[\"Self\"] = 2] = \"Self\";\n        /** Skip the node that is requesting injection. */\n        InjectFlags[InjectFlags[\"SkipSelf\"] = 4] = \"SkipSelf\";\n        /** Inject `defaultValue` instead if token not found. */\n        InjectFlags[InjectFlags[\"Optional\"] = 8] = \"Optional\";\n    })(exports.InjectFlags || (exports.InjectFlags = {}));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function getClosureSafeProperty(objWithPropertyToExtract) {\n        for (var key in objWithPropertyToExtract) {\n            if (objWithPropertyToExtract[key] === getClosureSafeProperty) {\n                return key;\n            }\n        }\n        throw Error('Could not find renamed property on target object.');\n    }\n    /**\n     * Sets properties on a target object from a source object, but only if\n     * the property doesn't already exist on the target object.\n     * @param target The target to set properties on\n     * @param source The source of the property keys and values to set\n     */\n    function fillProperties(target, source) {\n        for (var key in source) {\n            if (source.hasOwnProperty(key) && !target.hasOwnProperty(key)) {\n                target[key] = source[key];\n            }\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Construct an `InjectableDef` which defines how a token will be constructed by the DI system, and\n     * in which injectors (if any) it will be available.\n     *\n     * This should be assigned to a static `ɵprov` field on a type, which will then be an\n     * `InjectableType`.\n     *\n     * Options:\n     * * `providedIn` determines which injectors will include the injectable, by either associating it\n     *   with an `@NgModule` or other `InjectorType`, or by specifying that this injectable should be\n     *   provided in the `'root'` injector, which will be the application-level injector in most apps.\n     * * `factory` gives the zero argument function which will create an instance of the injectable.\n     *   The factory can call `inject` to access the `Injector` and request injection of dependencies.\n     *\n     * @codeGenApi\n     */\n    function ɵɵdefineInjectable(opts) {\n        return {\n            token: opts.token, providedIn: opts.providedIn || null, factory: opts.factory,\n            value: undefined,\n        };\n    }\n    /**\n     * @deprecated in v8, delete after v10. This API should be used only be generated code, and that\n     * code should now use ɵɵdefineInjectable instead.\n     * @publicApi\n     */\n    var defineInjectable = ɵɵdefineInjectable;\n    /**\n     * Construct an `InjectorDef` which configures an injector.\n     *\n     * This should be assigned to a static injector def (`ɵinj`) field on a type, which will then be an\n     * `InjectorType`.\n     *\n     * Options:\n     *\n     * * `factory`: an `InjectorType` is an instantiable type, so a zero argument `factory` function to\n     *   create the type must be provided. If that factory function needs to inject arguments, it can\n     *   use the `inject` function.\n     * * `providers`: an optional array of providers to add to the injector. Each provider must\n     *   either have a factory or point to a type which has a `ɵprov` static property (the\n     *   type must be an `InjectableType`).\n     * * `imports`: an optional array of imports of other `InjectorType`s or `InjectorTypeWithModule`s\n     *   whose providers will also be added to the injector. Locally provided types will override\n     *   providers from imports.\n     *\n     * @publicApi\n     */\n    function ɵɵdefineInjector(options) {\n        return {\n            factory: options.factory, providers: options.providers || [], imports: options.imports || [],\n        };\n    }\n    /**\n     * Read the injectable def (`ɵprov`) for `type` in a way which is immune to accidentally reading\n     * inherited value.\n     *\n     * @param type A type which may have its own (non-inherited) `ɵprov`.\n     */\n    function getInjectableDef(type) {\n        return getOwnDefinition(type, type[NG_PROV_DEF]) ||\n            getOwnDefinition(type, type[NG_INJECTABLE_DEF]);\n    }\n    /**\n     * Return `def` only if it is defined directly on `type` and is not inherited from a base\n     * class of `type`.\n     *\n     * The function `Object.hasOwnProperty` is not sufficient to distinguish this case because in older\n     * browsers (e.g. IE10) static property inheritance is implemented by copying the properties.\n     *\n     * Instead, the definition's `token` is compared to the `type`, and if they don't match then the\n     * property was not defined directly on the type itself, and was likely inherited. The definition\n     * is only returned if the `type` matches the `def.token`.\n     */\n    function getOwnDefinition(type, def) {\n        return def && def.token === type ? def : null;\n    }\n    /**\n     * Read the injectable def (`ɵprov`) for `type` or read the `ɵprov` from one of its ancestors.\n     *\n     * @param type A type which may have `ɵprov`, via inheritance.\n     *\n     * @deprecated Will be removed in v10, where an error will occur in the scenario if we find the\n     * `ɵprov` on an ancestor only.\n     */\n    function getInheritedInjectableDef(type) {\n        // See `jit/injectable.ts#compileInjectable` for context on NG_PROV_DEF_FALLBACK.\n        var def = type && (type[NG_PROV_DEF] || type[NG_INJECTABLE_DEF] ||\n            (type[NG_PROV_DEF_FALLBACK] && type[NG_PROV_DEF_FALLBACK]()));\n        if (def) {\n            var typeName = getTypeName(type);\n            // TODO(FW-1307): Re-add ngDevMode when closure can handle it\n            // ngDevMode &&\n            console.warn(\"DEPRECATED: DI is instantiating a token \\\"\" + typeName + \"\\\" that inherits its @Injectable decorator but does not provide one itself.\\n\" +\n                (\"This will become an error in v10. Please add @Injectable() to the \\\"\" + typeName + \"\\\" class.\"));\n            return def;\n        }\n        else {\n            return null;\n        }\n    }\n    /** Gets the name of a type, accounting for some cross-browser differences. */\n    function getTypeName(type) {\n        // `Function.prototype.name` behaves differently between IE and other browsers. In most browsers\n        // it'll always return the name of the function itself, no matter how many other functions it\n        // inherits from. On IE the function doesn't have its own `name` property, but it takes it from\n        // the lowest level in the prototype chain. E.g. if we have `class Foo extends Parent` most\n        // browsers will evaluate `Foo.name` to `Foo` while IE will return `Parent`. We work around\n        // the issue by converting the function to a string and parsing its name out that way via a regex.\n        if (type.hasOwnProperty('name')) {\n            return type.name;\n        }\n        var match = ('' + type).match(/^function\\s*([^\\s(]+)/);\n        return match === null ? '' : match[1];\n    }\n    /**\n     * Read the injector def type in a way which is immune to accidentally reading inherited value.\n     *\n     * @param type type which may have an injector def (`ɵinj`)\n     */\n    function getInjectorDef(type) {\n        return type && (type.hasOwnProperty(NG_INJ_DEF) || type.hasOwnProperty(NG_INJECTOR_DEF)) ?\n            type[NG_INJ_DEF] :\n            null;\n    }\n    var NG_PROV_DEF = getClosureSafeProperty({ ɵprov: getClosureSafeProperty });\n    var NG_INJ_DEF = getClosureSafeProperty({ ɵinj: getClosureSafeProperty });\n    // On IE10 properties defined via `defineProperty` won't be inherited by child classes,\n    // which will break inheriting the injectable definition from a grandparent through an\n    // undecorated parent class. We work around it by defining a fallback method which will be\n    // used to retrieve the definition. This should only be a problem in JIT mode, because in\n    // AOT TypeScript seems to have a workaround for static properties. When inheriting from an\n    // undecorated parent is no longer supported in v10, this can safely be removed.\n    var NG_PROV_DEF_FALLBACK = getClosureSafeProperty({ ɵprovFallback: getClosureSafeProperty });\n    // We need to keep these around so we can read off old defs if new defs are unavailable\n    var NG_INJECTABLE_DEF = getClosureSafeProperty({ ngInjectableDef: getClosureSafeProperty });\n    var NG_INJECTOR_DEF = getClosureSafeProperty({ ngInjectorDef: getClosureSafeProperty });\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function stringify(token) {\n        if (typeof token === 'string') {\n            return token;\n        }\n        if (Array.isArray(token)) {\n            return '[' + token.map(stringify).join(', ') + ']';\n        }\n        if (token == null) {\n            return '' + token;\n        }\n        if (token.overriddenName) {\n            return \"\" + token.overriddenName;\n        }\n        if (token.name) {\n            return \"\" + token.name;\n        }\n        var res = token.toString();\n        if (res == null) {\n            return '' + res;\n        }\n        var newLineIndex = res.indexOf('\\n');\n        return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __forward_ref__ = getClosureSafeProperty({ __forward_ref__: getClosureSafeProperty });\n    /**\n     * Allows to refer to references which are not yet defined.\n     *\n     * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\n     * DI is declared, but not yet defined. It is also used when the `token` which we use when creating\n     * a query is not yet defined.\n     *\n     * @usageNotes\n     * ### Example\n     * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\n     * @publicApi\n     */\n    function forwardRef(forwardRefFn) {\n        forwardRefFn.__forward_ref__ = forwardRef;\n        forwardRefFn.toString = function () { return stringify(this()); };\n        return forwardRefFn;\n    }\n    /**\n     * Lazily retrieves the reference value from a forwardRef.\n     *\n     * Acts as the identity function when given a non-forward-ref value.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\n     *\n     * @see `forwardRef`\n     * @publicApi\n     */\n    function resolveForwardRef(type) {\n        return isForwardRef(type) ? type() : type;\n    }\n    /** Checks whether a function is wrapped by a `forwardRef`. */\n    function isForwardRef(fn) {\n        return typeof fn === 'function' && fn.hasOwnProperty(__forward_ref__) &&\n            fn.__forward_ref__ === forwardRef;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __globalThis = typeof globalThis !== 'undefined' && globalThis;\n    var __window = typeof window !== 'undefined' && window;\n    var __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n        self instanceof WorkerGlobalScope && self;\n    var __global = typeof global !== 'undefined' && global;\n    // Always use __globalThis if available, which is the spec-defined global variable across all\n    // environments, then fallback to __global first, because in Node tests both __global and\n    // __window may be defined and _global should be __global in that case.\n    var _global = __globalThis || __global || __window || __self;\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var R3ResolvedDependencyType;\n    (function (R3ResolvedDependencyType) {\n        R3ResolvedDependencyType[R3ResolvedDependencyType[\"Token\"] = 0] = \"Token\";\n        R3ResolvedDependencyType[R3ResolvedDependencyType[\"Attribute\"] = 1] = \"Attribute\";\n        R3ResolvedDependencyType[R3ResolvedDependencyType[\"ChangeDetectorRef\"] = 2] = \"ChangeDetectorRef\";\n        R3ResolvedDependencyType[R3ResolvedDependencyType[\"Invalid\"] = 3] = \"Invalid\";\n    })(R3ResolvedDependencyType || (R3ResolvedDependencyType = {}));\n    var R3FactoryTarget;\n    (function (R3FactoryTarget) {\n        R3FactoryTarget[R3FactoryTarget[\"Directive\"] = 0] = \"Directive\";\n        R3FactoryTarget[R3FactoryTarget[\"Component\"] = 1] = \"Component\";\n        R3FactoryTarget[R3FactoryTarget[\"Injectable\"] = 2] = \"Injectable\";\n        R3FactoryTarget[R3FactoryTarget[\"Pipe\"] = 3] = \"Pipe\";\n        R3FactoryTarget[R3FactoryTarget[\"NgModule\"] = 4] = \"NgModule\";\n    })(R3FactoryTarget || (R3FactoryTarget = {}));\n    var ViewEncapsulation;\n    (function (ViewEncapsulation) {\n        ViewEncapsulation[ViewEncapsulation[\"Emulated\"] = 0] = \"Emulated\";\n        ViewEncapsulation[ViewEncapsulation[\"Native\"] = 1] = \"Native\";\n        ViewEncapsulation[ViewEncapsulation[\"None\"] = 2] = \"None\";\n        ViewEncapsulation[ViewEncapsulation[\"ShadowDom\"] = 3] = \"ShadowDom\";\n    })(ViewEncapsulation || (ViewEncapsulation = {}));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function getCompilerFacade() {\n        var globalNg = _global['ng'];\n        if (!globalNg || !globalNg.ɵcompilerFacade) {\n            throw new Error(\"Angular JIT compilation failed: '@angular/compiler' not loaded!\\n\" +\n                \"  - JIT compilation is discouraged for production use-cases! Consider AOT mode instead.\\n\" +\n                \"  - Did you bootstrap using '@angular/platform-browser-dynamic' or '@angular/platform-server'?\\n\" +\n                \"  - Alternatively provide the compiler with 'import \\\"@angular/compiler\\\";' before bootstrapping.\");\n        }\n        return globalNg.ɵcompilerFacade;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var NG_COMP_DEF = getClosureSafeProperty({ ɵcmp: getClosureSafeProperty });\n    var NG_DIR_DEF = getClosureSafeProperty({ ɵdir: getClosureSafeProperty });\n    var NG_PIPE_DEF = getClosureSafeProperty({ ɵpipe: getClosureSafeProperty });\n    var NG_MOD_DEF = getClosureSafeProperty({ ɵmod: getClosureSafeProperty });\n    var NG_LOC_ID_DEF = getClosureSafeProperty({ ɵloc: getClosureSafeProperty });\n    var NG_FACTORY_DEF = getClosureSafeProperty({ ɵfac: getClosureSafeProperty });\n    /**\n     * If a directive is diPublic, bloomAdd sets a property on the type with this constant as\n     * the key and the directive's unique ID as the value. This allows us to map directives to their\n     * bloom filter bit for DI.\n     */\n    // TODO(misko): This is wrong. The NG_ELEMENT_ID should never be minified.\n    var NG_ELEMENT_ID = getClosureSafeProperty({ __NG_ELEMENT_ID__: getClosureSafeProperty });\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function ngDevModeResetPerfCounters() {\n        var locationString = typeof location !== 'undefined' ? location.toString() : '';\n        var newCounters = {\n            namedConstructors: locationString.indexOf('ngDevMode=namedConstructors') != -1,\n            firstCreatePass: 0,\n            tNode: 0,\n            tView: 0,\n            rendererCreateTextNode: 0,\n            rendererSetText: 0,\n            rendererCreateElement: 0,\n            rendererAddEventListener: 0,\n            rendererSetAttribute: 0,\n            rendererRemoveAttribute: 0,\n            rendererSetProperty: 0,\n            rendererSetClassName: 0,\n            rendererAddClass: 0,\n            rendererRemoveClass: 0,\n            rendererSetStyle: 0,\n            rendererRemoveStyle: 0,\n            rendererDestroy: 0,\n            rendererDestroyNode: 0,\n            rendererMoveNode: 0,\n            rendererRemoveNode: 0,\n            rendererAppendChild: 0,\n            rendererInsertBefore: 0,\n            rendererCreateComment: 0,\n            styleMap: 0,\n            styleMapCacheMiss: 0,\n            classMap: 0,\n            classMapCacheMiss: 0,\n            styleProp: 0,\n            stylePropCacheMiss: 0,\n            classProp: 0,\n            classPropCacheMiss: 0,\n            flushStyling: 0,\n            classesApplied: 0,\n            stylesApplied: 0,\n        };\n        // Make sure to refer to ngDevMode as ['ngDevMode'] for closure.\n        var allowNgDevModeTrue = locationString.indexOf('ngDevMode=false') === -1;\n        _global['ngDevMode'] = allowNgDevModeTrue && newCounters;\n        return newCounters;\n    }\n    /**\n     * This function checks to see if the `ngDevMode` has been set. If yes,\n     * then we honor it, otherwise we default to dev mode with additional checks.\n     *\n     * The idea is that unless we are doing production build where we explicitly\n     * set `ngDevMode == false` we should be helping the developer by providing\n     * as much early warning and errors as possible.\n     *\n     * `ɵɵdefineComponent` is guaranteed to have been called before any component template functions\n     * (and thus Ivy instructions), so a single initialization there is sufficient to ensure ngDevMode\n     * is defined for the entire instruction set.\n     *\n     * When using checking `ngDevMode` on toplevel, always init it before referencing it\n     * (e.g. `((typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode())`), otherwise you can\n     *  get a `ReferenceError` like in https://github.com/angular/angular/issues/31595.\n     *\n     * Details on possible values for `ngDevMode` can be found on its docstring.\n     *\n     * NOTE:\n     * - changes to the `ngDevMode` name must be synced with `compiler-cli/src/tooling.ts`.\n     */\n    function initNgDevMode() {\n        // The below checks are to ensure that calling `initNgDevMode` multiple times does not\n        // reset the counters.\n        // If the `ngDevMode` is not an object, then it means we have not created the perf counters\n        // yet.\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (typeof ngDevMode !== 'object') {\n                ngDevModeResetPerfCounters();\n            }\n            return !!ngDevMode;\n        }\n        return false;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Creates a token that can be used in a DI Provider.\n     *\n     * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a\n     * runtime representation) such as when injecting an interface, callable type, array or\n     * parameterized type.\n     *\n     * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by\n     * the `Injector`. This provides additional level of type safety.\n     *\n     * ```\n     * interface MyInterface {...}\n     * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));\n     * // myInterface is inferred to be MyInterface.\n     * ```\n     *\n     * When creating an `InjectionToken`, you can optionally specify a factory function which returns\n     * (possibly by creating) a default value of the parameterized type `T`. This sets up the\n     * `InjectionToken` using this factory as a provider as if it was defined explicitly in the\n     * application's root injector. If the factory function, which takes zero arguments, needs to inject\n     * dependencies, it can do so using the `inject` function. See below for an example.\n     *\n     * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which\n     * overrides the above behavior and marks the token as belonging to a particular `@NgModule`. As\n     * mentioned above, `'root'` is the default value for `providedIn`.\n     *\n     * @usageNotes\n     * ### Basic Example\n     *\n     * ### Plain InjectionToken\n     *\n     * {@example core/di/ts/injector_spec.ts region='InjectionToken'}\n     *\n     * ### Tree-shakable InjectionToken\n     *\n     * {@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}\n     *\n     *\n     * @publicApi\n     */\n    var InjectionToken = /** @class */ (function () {\n        function InjectionToken(_desc, options) {\n            this._desc = _desc;\n            /** @internal */\n            this.ngMetadataName = 'InjectionToken';\n            this.ɵprov = undefined;\n            if (typeof options == 'number') {\n                // This is a special hack to assign __NG_ELEMENT_ID__ to this instance.\n                // __NG_ELEMENT_ID__ is Used by Ivy to determine bloom filter id.\n                // We are using it to assign `-1` which is used to identify `Injector`.\n                this.__NG_ELEMENT_ID__ = options;\n            }\n            else if (options !== undefined) {\n                this.ɵprov = ɵɵdefineInjectable({\n                    token: this,\n                    providedIn: options.providedIn || 'root',\n                    factory: options.factory,\n                });\n            }\n        }\n        InjectionToken.prototype.toString = function () { return \"InjectionToken \" + this._desc; };\n        return InjectionToken;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * An InjectionToken that gets the current `Injector` for `createInjector()`-style injectors.\n     *\n     * Requesting this token instead of `Injector` allows `StaticInjector` to be tree-shaken from a\n     * project.\n     *\n     * @publicApi\n     */\n    var INJECTOR = new InjectionToken('INJECTOR', -1 // `-1` is used by Ivy DI system as special value to recognize it as `Injector`.\n    );\n    var _THROW_IF_NOT_FOUND = {};\n    var THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n    var NG_TEMP_TOKEN_PATH = 'ngTempTokenPath';\n    var NG_TOKEN_PATH = 'ngTokenPath';\n    var NEW_LINE = /\\n/gm;\n    var NO_NEW_LINE = 'ɵ';\n    var SOURCE = '__source';\n    var USE_VALUE = getClosureSafeProperty({ provide: String, useValue: getClosureSafeProperty });\n    /**\n     * Current injector value used by `inject`.\n     * - `undefined`: it is an error to call `inject`\n     * - `null`: `inject` can be called but there is no injector (limp-mode).\n     * - Injector instance: Use the injector for resolution.\n     */\n    var _currentInjector = undefined;\n    function setCurrentInjector(injector) {\n        var former = _currentInjector;\n        _currentInjector = injector;\n        return former;\n    }\n    /**\n     * Current implementation of inject.\n     *\n     * By default, it is `injectInjectorOnly`, which makes it `Injector`-only aware. It can be changed\n     * to `directiveInject`, which brings in the `NodeInjector` system of ivy. It is designed this\n     * way for two reasons:\n     *  1. `Injector` should not depend on ivy logic.\n     *  2. To maintain tree shake-ability we don't want to bring in unnecessary code.\n     */\n    var _injectImplementation;\n    /**\n     * Sets the current inject implementation.\n     */\n    function setInjectImplementation(impl) {\n        var previous = _injectImplementation;\n        _injectImplementation = impl;\n        return previous;\n    }\n    function injectInjectorOnly(token, flags) {\n        if (flags === void 0) { flags = exports.InjectFlags.Default; }\n        if (_currentInjector === undefined) {\n            throw new Error(\"inject() must be called from an injection context\");\n        }\n        else if (_currentInjector === null) {\n            return injectRootLimpMode(token, undefined, flags);\n        }\n        else {\n            return _currentInjector.get(token, flags & exports.InjectFlags.Optional ? null : undefined, flags);\n        }\n    }\n    function ɵɵinject(token, flags) {\n        if (flags === void 0) { flags = exports.InjectFlags.Default; }\n        return (_injectImplementation || injectInjectorOnly)(resolveForwardRef(token), flags);\n    }\n    /**\n     * Throws an error indicating that a factory function could not be generated by the compiler for a\n     * particular class.\n     *\n     * This instruction allows the actual error message to be optimized away when ngDevMode is turned\n     * off, saving bytes of generated code while still providing a good experience in dev mode.\n     *\n     * The name of the class is not mentioned here, but will be in the generated factory function name\n     * and thus in the stack trace.\n     *\n     * @codeGenApi\n     */\n    function ɵɵinvalidFactoryDep(index) {\n        var msg = ngDevMode ?\n            \"This constructor is not compatible with Angular Dependency Injection because its dependency at index \" + index + \" of the parameter list is invalid.\\nThis can happen if the dependency type is a primitive like a string or if an ancestor of this class is missing an Angular decorator.\\n\\nPlease check that 1) the type for the parameter at index \" + index + \" is correct and 2) the correct Angular decorators are defined for this class and its ancestors.\" :\n            'invalid';\n        throw new Error(msg);\n    }\n    /**\n     * Injects a token from the currently active injector.\n     *\n     * Must be used in the context of a factory function such as one defined for an\n     * `InjectionToken`. Throws an error if not called from such a context.\n     *\n     * Within such a factory function, using this function to request injection of a dependency\n     * is faster and more type-safe than providing an additional array of dependencies\n     * (as has been common with `useFactory` providers).\n     *\n     * @param token The injection token for the dependency to be injected.\n     * @param flags Optional flags that control how injection is executed.\n     * The flags correspond to injection strategies that can be specified with\n     * parameter decorators `@Host`, `@Self`, `@SkipSef`, and `@Optional`.\n     * @returns True if injection is successful, null otherwise.\n     *\n     * @usageNotes\n     *\n     * ### Example\n     *\n     * {@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}\n     *\n     * @publicApi\n     */\n    var inject = ɵɵinject;\n    /**\n     * Injects `root` tokens in limp mode.\n     *\n     * If no injector exists, we can still inject tree-shakable providers which have `providedIn` set to\n     * `\"root\"`. This is known as the limp mode injection. In such case the value is stored in the\n     * `InjectableDef`.\n     */\n    function injectRootLimpMode(token, notFoundValue, flags) {\n        var injectableDef = getInjectableDef(token);\n        if (injectableDef && injectableDef.providedIn == 'root') {\n            return injectableDef.value === undefined ? injectableDef.value = injectableDef.factory() :\n                injectableDef.value;\n        }\n        if (flags & exports.InjectFlags.Optional)\n            return null;\n        if (notFoundValue !== undefined)\n            return notFoundValue;\n        throw new Error(\"Injector: NOT_FOUND [\" + stringify(token) + \"]\");\n    }\n    function injectArgs(types) {\n        var args = [];\n        for (var i = 0; i < types.length; i++) {\n            var arg = resolveForwardRef(types[i]);\n            if (Array.isArray(arg)) {\n                if (arg.length === 0) {\n                    throw new Error('Arguments array must have arguments.');\n                }\n                var type = undefined;\n                var flags = exports.InjectFlags.Default;\n                for (var j = 0; j < arg.length; j++) {\n                    var meta = arg[j];\n                    if (meta instanceof Optional || meta.ngMetadataName === 'Optional' || meta === Optional) {\n                        flags |= exports.InjectFlags.Optional;\n                    }\n                    else if (meta instanceof SkipSelf || meta.ngMetadataName === 'SkipSelf' || meta === SkipSelf) {\n                        flags |= exports.InjectFlags.SkipSelf;\n                    }\n                    else if (meta instanceof Self || meta.ngMetadataName === 'Self' || meta === Self) {\n                        flags |= exports.InjectFlags.Self;\n                    }\n                    else if (meta instanceof Inject || meta === Inject) {\n                        type = meta.token;\n                    }\n                    else {\n                        type = meta;\n                    }\n                }\n                args.push(ɵɵinject(type, flags));\n            }\n            else {\n                args.push(ɵɵinject(arg));\n            }\n        }\n        return args;\n    }\n    var NullInjector = /** @class */ (function () {\n        function NullInjector() {\n        }\n        NullInjector.prototype.get = function (token, notFoundValue) {\n            if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }\n            if (notFoundValue === THROW_IF_NOT_FOUND) {\n                // Intentionally left behind: With dev tools open the debugger will stop here. There is no\n                // reason why correctly written application should cause this exception.\n                // TODO(misko): uncomment the next line once `ngDevMode` works with closure.\n                // if (ngDevMode) debugger;\n                var error = new Error(\"NullInjectorError: No provider for \" + stringify(token) + \"!\");\n                error.name = 'NullInjectorError';\n                throw error;\n            }\n            return notFoundValue;\n        };\n        return NullInjector;\n    }());\n    function catchInjectorError(e, token, injectorErrorName, source) {\n        var tokenPath = e[NG_TEMP_TOKEN_PATH];\n        if (token[SOURCE]) {\n            tokenPath.unshift(token[SOURCE]);\n        }\n        e.message = formatError('\\n' + e.message, tokenPath, injectorErrorName, source);\n        e[NG_TOKEN_PATH] = tokenPath;\n        e[NG_TEMP_TOKEN_PATH] = null;\n        throw e;\n    }\n    function formatError(text, obj, injectorErrorName, source) {\n        if (source === void 0) { source = null; }\n        text = text && text.charAt(0) === '\\n' && text.charAt(1) == NO_NEW_LINE ? text.substr(2) : text;\n        var context = stringify(obj);\n        if (Array.isArray(obj)) {\n            context = obj.map(stringify).join(' -> ');\n        }\n        else if (typeof obj === 'object') {\n            var parts = [];\n            for (var key in obj) {\n                if (obj.hasOwnProperty(key)) {\n                    var value = obj[key];\n                    parts.push(key + ':' + (typeof value === 'string' ? JSON.stringify(value) : stringify(value)));\n                }\n            }\n            context = \"{\" + parts.join(', ') + \"}\";\n        }\n        return \"\" + injectorErrorName + (source ? '(' + source + ')' : '') + \"[\" + context + \"]: \" + text.replace(NEW_LINE, '\\n  ');\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A mapping of the @angular/core API surface used in generated expressions to the actual symbols.\n     *\n     * This should be kept up to date with the public exports of @angular/core.\n     */\n    var angularCoreDiEnv = {\n        'ɵɵdefineInjectable': ɵɵdefineInjectable,\n        'ɵɵdefineInjector': ɵɵdefineInjector,\n        'ɵɵinject': ɵɵinject,\n        'ɵɵgetFactoryOf': getFactoryOf,\n        'ɵɵinvalidFactoryDep': ɵɵinvalidFactoryDep,\n    };\n    function getFactoryOf(type) {\n        var typeAny = type;\n        if (isForwardRef(type)) {\n            return (function () {\n                var factory = getFactoryOf(resolveForwardRef(typeAny));\n                return factory ? factory() : null;\n            });\n        }\n        var def = getInjectableDef(typeAny) || getInjectorDef(typeAny);\n        if (!def || def.factory === undefined) {\n            return null;\n        }\n        return def.factory;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Represents an instance of an NgModule created via a {@link NgModuleFactory}.\n     *\n     * `NgModuleRef` provides access to the NgModule Instance as well other objects related to this\n     * NgModule Instance.\n     *\n     * @publicApi\n     */\n    var NgModuleRef = /** @class */ (function () {\n        function NgModuleRef() {\n        }\n        return NgModuleRef;\n    }());\n    /**\n     * @publicApi\n     */\n    var NgModuleFactory = /** @class */ (function () {\n        function NgModuleFactory() {\n        }\n        return NgModuleFactory;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n    * Equivalent to ES6 spread, add each item to an array.\n    *\n    * @param items The items to add\n    * @param arr The array to which you want to add the items\n    */\n    function addAllToArray(items, arr) {\n        for (var i = 0; i < items.length; i++) {\n            arr.push(items[i]);\n        }\n    }\n    /**\n     * Flattens an array.\n     */\n    function flatten(list, dst) {\n        if (dst === undefined)\n            dst = list;\n        for (var i = 0; i < list.length; i++) {\n            var item = list[i];\n            if (Array.isArray(item)) {\n                // we need to inline it.\n                if (dst === list) {\n                    // Our assumption that the list was already flat was wrong and\n                    // we need to clone flat since we need to write to it.\n                    dst = list.slice(0, i);\n                }\n                flatten(item, dst);\n            }\n            else if (dst !== list) {\n                dst.push(item);\n            }\n        }\n        return dst;\n    }\n    function deepForEach(input, fn) {\n        input.forEach(function (value) { return Array.isArray(value) ? deepForEach(value, fn) : fn(value); });\n    }\n    function addToArray(arr, index, value) {\n        // perf: array.push is faster than array.splice!\n        if (index >= arr.length) {\n            arr.push(value);\n        }\n        else {\n            arr.splice(index, 0, value);\n        }\n    }\n    function removeFromArray(arr, index) {\n        // perf: array.pop is faster than array.splice!\n        if (index >= arr.length - 1) {\n            return arr.pop();\n        }\n        else {\n            return arr.splice(index, 1)[0];\n        }\n    }\n    function newArray(size, value) {\n        var list = [];\n        for (var i = 0; i < size; i++) {\n            list.push(value);\n        }\n        return list;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function assertNumber(actual, msg) {\n        if (typeof actual != 'number') {\n            throwError(msg, typeof actual, 'number', '===');\n        }\n    }\n    function assertString(actual, msg) {\n        if (typeof actual != 'string') {\n            throwError(msg, actual === null ? 'null' : typeof actual, 'string', '===');\n        }\n    }\n    function assertEqual(actual, expected, msg) {\n        if (actual != expected) {\n            throwError(msg, actual, expected, '==');\n        }\n    }\n    function assertNotEqual(actual, expected, msg) {\n        if (actual == expected) {\n            throwError(msg, actual, expected, '!=');\n        }\n    }\n    function assertSame(actual, expected, msg) {\n        if (actual !== expected) {\n            throwError(msg, actual, expected, '===');\n        }\n    }\n    function assertNotSame(actual, expected, msg) {\n        if (actual === expected) {\n            throwError(msg, actual, expected, '!==');\n        }\n    }\n    function assertLessThan(actual, expected, msg) {\n        if (actual >= expected) {\n            throwError(msg, actual, expected, '<');\n        }\n    }\n    function assertLessThanOrEqual(actual, expected, msg) {\n        if (actual > expected) {\n            throwError(msg, actual, expected, '<=');\n        }\n    }\n    function assertGreaterThan(actual, expected, msg) {\n        if (actual <= expected) {\n            throwError(msg, actual, expected, '>');\n        }\n    }\n    function assertNotDefined(actual, msg) {\n        if (actual != null) {\n            throwError(msg, actual, null, '==');\n        }\n    }\n    function assertDefined(actual, msg) {\n        if (actual == null) {\n            throwError(msg, actual, null, '!=');\n        }\n    }\n    function throwError(msg, actual, expected, comparison) {\n        // tslint:disable-next-line\n        debugger; // Left intentionally for better debugger experience.\n        throw new Error(\"ASSERTION ERROR: \" + msg +\n            (comparison == null ? '' : \" [Expected=> \" + expected + \" \" + comparison + \" \" + actual + \" <=Actual]\"));\n    }\n    function assertDomNode(node) {\n        // If we're in a worker, `Node` will not be defined.\n        assertEqual((typeof Node !== 'undefined' && node instanceof Node) ||\n            (typeof node === 'object' && node != null &&\n                node.constructor.name === 'WebWorkerRenderNode'), true, \"The provided value must be an instance of a DOM Node but got \" + stringify(node));\n    }\n    function assertDataInRange(arr, index) {\n        var maxLen = arr ? arr.length : 0;\n        assertLessThan(index, maxLen, \"Index expected to be less than \" + maxLen + \" but got \" + index);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    (function (ChangeDetectionStrategy) {\n        /**\n         * Use the `CheckOnce` strategy, meaning that automatic change detection is deactivated\n         * until reactivated by setting the strategy to `Default` (`CheckAlways`).\n         * Change detection can still be explicitly invoked.\n         * This strategy applies to all child directives and cannot be overridden.\n         */\n        ChangeDetectionStrategy[ChangeDetectionStrategy[\"OnPush\"] = 0] = \"OnPush\";\n        /**\n         * Use the default `CheckAlways` strategy, in which change detection is automatic until\n         * explicitly deactivated.\n         */\n        ChangeDetectionStrategy[ChangeDetectionStrategy[\"Default\"] = 1] = \"Default\";\n    })(exports.ChangeDetectionStrategy || (exports.ChangeDetectionStrategy = {}));\n    (function (ChangeDetectorStatus) {\n        /**\n         * A state in which, after calling `detectChanges()`, the change detector\n         * state becomes `Checked`, and must be explicitly invoked or reactivated.\n         */\n        ChangeDetectorStatus[ChangeDetectorStatus[\"CheckOnce\"] = 0] = \"CheckOnce\";\n        /**\n         * A state in which change detection is skipped until the change detector mode\n         * becomes `CheckOnce`.\n         */\n        ChangeDetectorStatus[ChangeDetectorStatus[\"Checked\"] = 1] = \"Checked\";\n        /**\n         * A state in which change detection continues automatically until explicitly\n         * deactivated.\n         */\n        ChangeDetectorStatus[ChangeDetectorStatus[\"CheckAlways\"] = 2] = \"CheckAlways\";\n        /**\n         * A state in which a change detector sub tree is not a part of the main tree and\n         * should be skipped.\n         */\n        ChangeDetectorStatus[ChangeDetectorStatus[\"Detached\"] = 3] = \"Detached\";\n        /**\n         * Indicates that the change detector encountered an error checking a binding\n         * or calling a directive lifecycle method and is now in an inconsistent state. Change\n         * detectors in this state do not detect changes.\n         */\n        ChangeDetectorStatus[ChangeDetectorStatus[\"Errored\"] = 4] = \"Errored\";\n        /**\n         * Indicates that the change detector has been destroyed.\n         */\n        ChangeDetectorStatus[ChangeDetectorStatus[\"Destroyed\"] = 5] = \"Destroyed\";\n    })(exports.ɵChangeDetectorStatus || (exports.ɵChangeDetectorStatus = {}));\n    /**\n     * Reports whether a given strategy is currently the default for change detection.\n     * @param changeDetectionStrategy The strategy to check.\n     * @returns True if the given strategy is the current default, false otherwise.\n     * @see `ChangeDetectorStatus`\n     * @see `ChangeDetectorRef`\n     */\n    function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {\n        return changeDetectionStrategy == null ||\n            changeDetectionStrategy === exports.ChangeDetectionStrategy.Default;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    (function (ViewEncapsulation) {\n        /**\n         * Emulate `Native` scoping of styles by adding an attribute containing surrogate id to the Host\n         * Element and pre-processing the style rules provided via {@link Component#styles styles} or\n         * {@link Component#styleUrls styleUrls}, and adding the new Host Element attribute to all\n         * selectors.\n         *\n         * This is the default option.\n         */\n        ViewEncapsulation[ViewEncapsulation[\"Emulated\"] = 0] = \"Emulated\";\n        /**\n         * @deprecated v6.1.0 - use {ViewEncapsulation.ShadowDom} instead.\n         * Use the native encapsulation mechanism of the renderer.\n         *\n         * For the DOM this means using the deprecated [Shadow DOM\n         * v0](https://w3c.github.io/webcomponents/spec/shadow/) and\n         * creating a ShadowRoot for Component's Host Element.\n         */\n        ViewEncapsulation[ViewEncapsulation[\"Native\"] = 1] = \"Native\";\n        /**\n         * Don't provide any template or style encapsulation.\n         */\n        ViewEncapsulation[ViewEncapsulation[\"None\"] = 2] = \"None\";\n        /**\n         * Use Shadow DOM to encapsulate styles.\n         *\n         * For the DOM this means using modern [Shadow\n         * DOM](https://w3c.github.io/webcomponents/spec/shadow/) and\n         * creating a ShadowRoot for Component's Host Element.\n         */\n        ViewEncapsulation[ViewEncapsulation[\"ShadowDom\"] = 3] = \"ShadowDom\";\n    })(exports.ViewEncapsulation || (exports.ViewEncapsulation = {}));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Convince closure compiler that the wrapped function has no side-effects.\n     *\n     * Closure compiler always assumes that `toString` has no side-effects. We use this quirk to\n     * allow us to execute a function but have closure compiler mark the call as no-side-effects.\n     * It is important that the return value for the `noSideEffects` function be assigned\n     * to something which is retained otherwise the call to `noSideEffects` will be removed by closure\n     * compiler.\n     */\n    function noSideEffects(fn) {\n        return '' + { toString: fn };\n    }\n\n    /**\n    * @license\n    * Copyright Google Inc. All Rights Reserved.\n    *\n    * Use of this source code is governed by an MIT-style license that can be\n    * found in the LICENSE file at https://angular.io/license\n    */\n    /**\n     * This file contains reuseable \"empty\" symbols that can be used as default return values\n     * in different parts of the rendering code. Because the same symbols are returned, this\n     * allows for identity checks against these values to be consistently used by the framework\n     * code.\n     */\n    var EMPTY_OBJ = {};\n    var EMPTY_ARRAY = [];\n    // freezing the values prevents any code from accidentally inserting new values in\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode()) {\n        // These property accesses can be ignored because ngDevMode will be set to false\n        // when optimizing code and the whole if statement will be dropped.\n        // tslint:disable-next-line:no-toplevel-property-access\n        Object.freeze(EMPTY_OBJ);\n        // tslint:disable-next-line:no-toplevel-property-access\n        Object.freeze(EMPTY_ARRAY);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var _renderCompCount = 0;\n    /**\n     * Create a component definition object.\n     *\n     *\n     * # Example\n     * ```\n     * class MyDirective {\n     *   // Generated by Angular Template Compiler\n     *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n     *   static ɵcmp = defineComponent({\n     *     ...\n     *   });\n     * }\n     * ```\n     * @codeGenApi\n     */\n    function ɵɵdefineComponent(componentDefinition) {\n        // Initialize ngDevMode. This must be the first statement in ɵɵdefineComponent.\n        // See the `initNgDevMode` docstring for more information.\n        (typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode();\n        var type = componentDefinition.type;\n        var typePrototype = type.prototype;\n        var declaredInputs = {};\n        var def = {\n            type: type,\n            providersResolver: null,\n            decls: componentDefinition.decls,\n            vars: componentDefinition.vars,\n            factory: null,\n            template: componentDefinition.template || null,\n            consts: componentDefinition.consts || null,\n            ngContentSelectors: componentDefinition.ngContentSelectors,\n            hostBindings: componentDefinition.hostBindings || null,\n            contentQueries: componentDefinition.contentQueries || null,\n            declaredInputs: declaredInputs,\n            inputs: null,\n            outputs: null,\n            exportAs: componentDefinition.exportAs || null,\n            onChanges: null,\n            onInit: typePrototype.ngOnInit || null,\n            doCheck: typePrototype.ngDoCheck || null,\n            afterContentInit: typePrototype.ngAfterContentInit || null,\n            afterContentChecked: typePrototype.ngAfterContentChecked || null,\n            afterViewInit: typePrototype.ngAfterViewInit || null,\n            afterViewChecked: typePrototype.ngAfterViewChecked || null,\n            onDestroy: typePrototype.ngOnDestroy || null,\n            onPush: componentDefinition.changeDetection === exports.ChangeDetectionStrategy.OnPush,\n            directiveDefs: null,\n            pipeDefs: null,\n            selectors: componentDefinition.selectors || EMPTY_ARRAY,\n            viewQuery: componentDefinition.viewQuery || null,\n            features: componentDefinition.features || null,\n            data: componentDefinition.data || {},\n            // TODO(misko): convert ViewEncapsulation into const enum so that it can be used directly in the\n            // next line. Also `None` should be 0 not 2.\n            encapsulation: componentDefinition.encapsulation || exports.ViewEncapsulation.Emulated,\n            id: 'c',\n            styles: componentDefinition.styles || EMPTY_ARRAY,\n            _: null,\n            setInput: null,\n            schemas: componentDefinition.schemas || null,\n            tView: null,\n        };\n        def._ = noSideEffects(function () {\n            var directiveTypes = componentDefinition.directives;\n            var feature = componentDefinition.features;\n            var pipeTypes = componentDefinition.pipes;\n            def.id += _renderCompCount++;\n            def.inputs = invertObject(componentDefinition.inputs, declaredInputs),\n                def.outputs = invertObject(componentDefinition.outputs),\n                feature && feature.forEach(function (fn) { return fn(def); });\n            def.directiveDefs = directiveTypes ?\n                function () { return (typeof directiveTypes === 'function' ? directiveTypes() : directiveTypes)\n                    .map(extractDirectiveDef); } :\n                null;\n            def.pipeDefs = pipeTypes ?\n                function () { return (typeof pipeTypes === 'function' ? pipeTypes() : pipeTypes).map(extractPipeDef); } :\n                null;\n        });\n        return def;\n    }\n    /**\n     * @codeGenApi\n     */\n    function ɵɵsetComponentScope(type, directives, pipes) {\n        var def = type.ɵcmp;\n        def.directiveDefs = function () { return directives.map(extractDirectiveDef); };\n        def.pipeDefs = function () { return pipes.map(extractPipeDef); };\n    }\n    function extractDirectiveDef(type) {\n        var def = getComponentDef(type) || getDirectiveDef(type);\n        if (ngDevMode && !def) {\n            throw new Error(\"'\" + type.name + \"' is neither 'ComponentType' or 'DirectiveType'.\");\n        }\n        return def;\n    }\n    function extractPipeDef(type) {\n        var def = getPipeDef(type);\n        if (ngDevMode && !def) {\n            throw new Error(\"'\" + type.name + \"' is not a 'PipeType'.\");\n        }\n        return def;\n    }\n    var autoRegisterModuleById = {};\n    /**\n     * @codeGenApi\n     */\n    function ɵɵdefineNgModule(def) {\n        var res = {\n            type: def.type,\n            bootstrap: def.bootstrap || EMPTY_ARRAY,\n            declarations: def.declarations || EMPTY_ARRAY,\n            imports: def.imports || EMPTY_ARRAY,\n            exports: def.exports || EMPTY_ARRAY,\n            transitiveCompileScopes: null,\n            schemas: def.schemas || null,\n            id: def.id || null,\n        };\n        if (def.id != null) {\n            noSideEffects(function () { autoRegisterModuleById[def.id] = def.type; });\n        }\n        return res;\n    }\n    /**\n     * Adds the module metadata that is necessary to compute the module's transitive scope to an\n     * existing module definition.\n     *\n     * Scope metadata of modules is not used in production builds, so calls to this function can be\n     * marked pure to tree-shake it from the bundle, allowing for all referenced declarations\n     * to become eligible for tree-shaking as well.\n     *\n     * @codeGenApi\n     */\n    function ɵɵsetNgModuleScope(type, scope) {\n        return noSideEffects(function () {\n            var ngModuleDef = getNgModuleDef(type, true);\n            ngModuleDef.declarations = scope.declarations || EMPTY_ARRAY;\n            ngModuleDef.imports = scope.imports || EMPTY_ARRAY;\n            ngModuleDef.exports = scope.exports || EMPTY_ARRAY;\n        });\n    }\n    /**\n     * Inverts an inputs or outputs lookup such that the keys, which were the\n     * minified keys, are part of the values, and the values are parsed so that\n     * the publicName of the property is the new key\n     *\n     * e.g. for\n     *\n     * ```\n     * class Comp {\n     *   @Input()\n     *   propName1: string;\n     *\n     *   @Input('publicName2')\n     *   declaredPropName2: number;\n     * }\n     * ```\n     *\n     * will be serialized as\n     *\n     * ```\n     * {\n     *   propName1: 'propName1',\n     *   declaredPropName2: ['publicName2', 'declaredPropName2'],\n     * }\n     * ```\n     *\n     * which is than translated by the minifier as:\n     *\n     * ```\n     * {\n     *   minifiedPropName1: 'propName1',\n     *   minifiedPropName2: ['publicName2', 'declaredPropName2'],\n     * }\n     * ```\n     *\n     * becomes: (public name => minifiedName)\n     *\n     * ```\n     * {\n     *  'propName1': 'minifiedPropName1',\n     *  'publicName2': 'minifiedPropName2',\n     * }\n     * ```\n     *\n     * Optionally the function can take `secondary` which will result in: (public name => declared name)\n     *\n     * ```\n     * {\n     *  'propName1': 'propName1',\n     *  'publicName2': 'declaredPropName2',\n     * }\n     * ```\n     *\n\n     */\n    function invertObject(obj, secondary) {\n        if (obj == null)\n            return EMPTY_OBJ;\n        var newLookup = {};\n        for (var minifiedKey in obj) {\n            if (obj.hasOwnProperty(minifiedKey)) {\n                var publicName = obj[minifiedKey];\n                var declaredName = publicName;\n                if (Array.isArray(publicName)) {\n                    declaredName = publicName[1];\n                    publicName = publicName[0];\n                }\n                newLookup[publicName] = minifiedKey;\n                if (secondary) {\n                    (secondary[publicName] = declaredName);\n                }\n            }\n        }\n        return newLookup;\n    }\n    /**\n     * Create a directive definition object.\n     *\n     * # Example\n     * ```ts\n     * class MyDirective {\n     *   // Generated by Angular Template Compiler\n     *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n     *   static ɵdir = ɵɵdefineDirective({\n     *     ...\n     *   });\n     * }\n     * ```\n     *\n     * @codeGenApi\n     */\n    var ɵɵdefineDirective = ɵɵdefineComponent;\n    /**\n     * Create a pipe definition object.\n     *\n     * # Example\n     * ```\n     * class MyPipe implements PipeTransform {\n     *   // Generated by Angular Template Compiler\n     *   static ɵpipe = definePipe({\n     *     ...\n     *   });\n     * }\n     * ```\n     * @param pipeDef Pipe definition generated by the compiler\n     *\n     * @codeGenApi\n     */\n    function ɵɵdefinePipe(pipeDef) {\n        return {\n            type: pipeDef.type,\n            name: pipeDef.name,\n            factory: null,\n            pure: pipeDef.pure !== false,\n            onDestroy: pipeDef.type.prototype.ngOnDestroy || null\n        };\n    }\n    /**\n     * The following getter methods retrieve the definition form the type. Currently the retrieval\n     * honors inheritance, but in the future we may change the rule to require that definitions are\n     * explicit. This would require some sort of migration strategy.\n     */\n    function getComponentDef(type) {\n        return type[NG_COMP_DEF] || null;\n    }\n    function getDirectiveDef(type) {\n        return type[NG_DIR_DEF] || null;\n    }\n    function getPipeDef(type) {\n        return type[NG_PIPE_DEF] || null;\n    }\n    function getFactoryDef(type, throwNotFound) {\n        var hasFactoryDef = type.hasOwnProperty(NG_FACTORY_DEF);\n        if (!hasFactoryDef && throwNotFound === true && ngDevMode) {\n            throw new Error(\"Type \" + stringify(type) + \" does not have '\\u0275fac' property.\");\n        }\n        return hasFactoryDef ? type[NG_FACTORY_DEF] : null;\n    }\n    function getNgModuleDef(type, throwNotFound) {\n        var ngModuleDef = type[NG_MOD_DEF] || null;\n        if (!ngModuleDef && throwNotFound === true) {\n            throw new Error(\"Type \" + stringify(type) + \" does not have '\\u0275mod' property.\");\n        }\n        return ngModuleDef;\n    }\n    function getNgLocaleIdDef(type) {\n        return type[NG_LOC_ID_DEF] || null;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // Below are constants for LView indices to help us look up LView members\n    // without having to remember the specific indices.\n    // Uglify will inline these when minifying so there shouldn't be a cost.\n    var HOST = 0;\n    var TVIEW = 1;\n    var FLAGS = 2;\n    var PARENT = 3;\n    var NEXT = 4;\n    var QUERIES = 5;\n    var T_HOST = 6;\n    var CLEANUP = 7;\n    var CONTEXT = 8;\n    var INJECTOR$1 = 9;\n    var RENDERER_FACTORY = 10;\n    var RENDERER = 11;\n    var SANITIZER = 12;\n    var CHILD_HEAD = 13;\n    var CHILD_TAIL = 14;\n    var DECLARATION_VIEW = 15;\n    var DECLARATION_COMPONENT_VIEW = 16;\n    var DECLARATION_LCONTAINER = 17;\n    var PREORDER_HOOK_FLAGS = 18;\n    /** Size of LView's header. Necessary to adjust for it when setting slots.  */\n    var HEADER_OFFSET = 19;\n    // Note: This hack is necessary so we don't erroneously get a circular dependency\n    // failure based on types.\n    var unusedValueExportToPlacateAjd = 1;\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Special location which allows easy identification of type. If we have an array which was\n     * retrieved from the `LView` and that array has `true` at `TYPE` location, we know it is\n     * `LContainer`.\n     */\n    var TYPE = 1;\n    /**\n     * Below are constants for LContainer indices to help us look up LContainer members\n     * without having to remember the specific indices.\n     * Uglify will inline these when minifying so there shouldn't be a cost.\n     */\n    var ACTIVE_INDEX = 2;\n    // PARENT and NEXT are indices 3 and 4\n    // As we already have these constants in LView, we don't need to re-create them.\n    var MOVED_VIEWS = 5;\n    // T_HOST is index 6\n    // We already have this constants in LView, we don't need to re-create it.\n    var NATIVE = 7;\n    var VIEW_REFS = 8;\n    /**\n     * Size of LContainer's header. Represents the index after which all views in the\n     * container will be inserted. We need to keep a record of current views so we know\n     * which views are already in the DOM (and don't need to be re-added) and so we can\n     * remove views from the DOM when they are no longer required.\n     */\n    var CONTAINER_HEADER_OFFSET = 9;\n    // Note: This hack is necessary so we don't erroneously get a circular dependency\n    // failure based on types.\n    var unusedValueExportToPlacateAjd$1 = 1;\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n    * True if `value` is `LView`.\n    * @param value wrapped value of `RNode`, `LView`, `LContainer`\n    */\n    function isLView(value) {\n        return Array.isArray(value) && typeof value[TYPE] === 'object';\n    }\n    /**\n     * True if `value` is `LContainer`.\n     * @param value wrapped value of `RNode`, `LView`, `LContainer`\n     */\n    function isLContainer(value) {\n        return Array.isArray(value) && value[TYPE] === true;\n    }\n    function isContentQueryHost(tNode) {\n        return (tNode.flags & 8 /* hasContentQuery */) !== 0;\n    }\n    function isComponentHost(tNode) {\n        return (tNode.flags & 2 /* isComponentHost */) === 2 /* isComponentHost */;\n    }\n    function isDirectiveHost(tNode) {\n        return (tNode.flags & 1 /* isDirectiveHost */) === 1 /* isDirectiveHost */;\n    }\n    function isComponentDef(def) {\n        return def.template !== null;\n    }\n    function isRootView(target) {\n        return (target[FLAGS] & 512 /* IsRoot */) !== 0;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function assertTNodeForLView(tNode, lView) {\n        tNode.hasOwnProperty('tView_') && assertEqual(tNode.tView_, lView[TVIEW], 'This TNode does not belong to this LView.');\n    }\n    function assertComponentType(actual, msg) {\n        if (msg === void 0) { msg = 'Type passed in is not ComponentType, it does not have \\'ɵcmp\\' property.'; }\n        if (!getComponentDef(actual)) {\n            throwError(msg);\n        }\n    }\n    function assertNgModuleType(actual, msg) {\n        if (msg === void 0) { msg = 'Type passed in is not NgModuleType, it does not have \\'ɵmod\\' property.'; }\n        if (!getNgModuleDef(actual)) {\n            throwError(msg);\n        }\n    }\n    function assertPreviousIsParent(isParent) {\n        assertEqual(isParent, true, 'previousOrParentTNode should be a parent');\n    }\n    function assertHasParent(tNode) {\n        assertDefined(tNode, 'previousOrParentTNode should exist!');\n        assertDefined(tNode.parent, 'previousOrParentTNode should have a parent');\n    }\n    function assertDataNext(lView, index, arr) {\n        if (arr == null)\n            arr = lView;\n        assertEqual(arr.length, index, \"index \" + index + \" expected to be at the end of arr (length \" + arr.length + \")\");\n    }\n    function assertLContainerOrUndefined(value) {\n        value && assertEqual(isLContainer(value), true, 'Expecting LContainer or undefined or null');\n    }\n    function assertLContainer(value) {\n        assertDefined(value, 'LContainer must be defined');\n        assertEqual(isLContainer(value), true, 'Expecting LContainer');\n    }\n    function assertLViewOrUndefined(value) {\n        value && assertEqual(isLView(value), true, 'Expecting LView or undefined or null');\n    }\n    function assertLView(value) {\n        assertDefined(value, 'LView must be defined');\n        assertEqual(isLView(value), true, 'Expecting LView');\n    }\n    function assertFirstCreatePass(tView, errMessage) {\n        assertEqual(tView.firstCreatePass, true, errMessage || 'Should only be called in first create pass.');\n    }\n    /**\n     * This is a basic sanity check that an object is probably a directive def. DirectiveDef is\n     * an interface, so we can't do a direct instanceof check.\n     */\n    function assertDirectiveDef(obj) {\n        if (obj.type === undefined || obj.selectors == undefined || obj.inputs === undefined) {\n            throwError(\"Expected a DirectiveDef/ComponentDef and this object does not seem to have the expected shape.\");\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var instructionState = {\n        lFrame: createLFrame(null),\n        bindingsEnabled: true,\n        elementExitFn: null,\n        checkNoChangesMode: false,\n    };\n    function getElementDepthCount() {\n        return instructionState.lFrame.elementDepthCount;\n    }\n    function increaseElementDepthCount() {\n        instructionState.lFrame.elementDepthCount++;\n    }\n    function decreaseElementDepthCount() {\n        instructionState.lFrame.elementDepthCount--;\n    }\n    function getCurrentDirectiveDef() {\n        return instructionState.lFrame.currentDirectiveDef;\n    }\n    function setCurrentDirectiveDef(def) {\n        instructionState.lFrame.currentDirectiveDef = def;\n    }\n    function getBindingsEnabled() {\n        return instructionState.bindingsEnabled;\n    }\n    /**\n     * Enables directive matching on elements.\n     *\n     *  * Example:\n     * ```\n     * <my-comp my-directive>\n     *   Should match component / directive.\n     * </my-comp>\n     * <div ngNonBindable>\n     *   <!-- ɵɵdisableBindings() -->\n     *   <my-comp my-directive>\n     *     Should not match component / directive because we are in ngNonBindable.\n     *   </my-comp>\n     *   <!-- ɵɵenableBindings() -->\n     * </div>\n     * ```\n     *\n     * @codeGenApi\n     */\n    function ɵɵenableBindings() {\n        instructionState.bindingsEnabled = true;\n    }\n    /**\n     * Disables directive matching on element.\n     *\n     *  * Example:\n     * ```\n     * <my-comp my-directive>\n     *   Should match component / directive.\n     * </my-comp>\n     * <div ngNonBindable>\n     *   <!-- ɵɵdisableBindings() -->\n     *   <my-comp my-directive>\n     *     Should not match component / directive because we are in ngNonBindable.\n     *   </my-comp>\n     *   <!-- ɵɵenableBindings() -->\n     * </div>\n     * ```\n     *\n     * @codeGenApi\n     */\n    function ɵɵdisableBindings() {\n        instructionState.bindingsEnabled = false;\n    }\n    /**\n     * Return the current LView.\n     *\n     * The return value can be `null` if the method is called outside of template. This can happen if\n     * directive is instantiated by module injector (rather than by node injector.)\n     */\n    function getLView() {\n        // TODO(misko): the return value should be `LView|null` but doing so breaks a lot of code.\n        var lFrame = instructionState.lFrame;\n        return lFrame === null ? null : lFrame.lView;\n    }\n    /**\n     * Determines whether or not a flag is currently set for the active element.\n     */\n    function hasActiveElementFlag(flag) {\n        return (instructionState.lFrame.selectedIndex & flag) === flag;\n    }\n    /**\n     * Sets a flag is for the active element.\n     */\n    function setActiveElementFlag(flag) {\n        instructionState.lFrame.selectedIndex |= flag;\n    }\n    /**\n     * Sets the active directive host element and resets the directive id value\n     * (when the provided elementIndex value has changed).\n     *\n     * @param elementIndex the element index value for the host element where\n     *                     the directive/component instance lives\n     */\n    function setActiveHostElement(elementIndex) {\n        if (hasActiveElementFlag(1 /* RunExitFn */)) {\n            executeElementExitFn();\n        }\n        setSelectedIndex(elementIndex === null ? -1 : elementIndex);\n        instructionState.lFrame.activeDirectiveId = 0;\n    }\n    function executeElementExitFn() {\n        instructionState.elementExitFn();\n        instructionState.lFrame.selectedIndex &= ~1 /* RunExitFn */;\n    }\n    /**\n     * Queues a function to be run once the element is \"exited\" in CD.\n     *\n     * Change detection will focus on an element either when the `advance()`\n     * instruction is called or when the template or host bindings instruction\n     * code is invoked. The element is then \"exited\" when the next element is\n     * selected or when change detection for the template or host bindings is\n     * complete. When this occurs (the element change operation) then an exit\n     * function will be invoked if it has been set. This function can be used\n     * to assign that exit function.\n     *\n     * @param fn\n     */\n    function setElementExitFn(fn) {\n        setActiveElementFlag(1 /* RunExitFn */);\n        if (instructionState.elementExitFn === null) {\n            instructionState.elementExitFn = fn;\n        }\n        ngDevMode &&\n            assertEqual(instructionState.elementExitFn, fn, 'Expecting to always get the same function');\n    }\n    /**\n     * Returns the current id value of the current directive.\n     *\n     * For example we have an element that has two directives on it:\n     * <div dir-one dir-two></div>\n     *\n     * dirOne->hostBindings() (id == 1)\n     * dirTwo->hostBindings() (id == 2)\n     *\n     * Note that this is only active when `hostBinding` functions are being processed.\n     *\n     * Note that directive id values are specific to an element (this means that\n     * the same id value could be present on another element with a completely\n     * different set of directives).\n     */\n    function getActiveDirectiveId() {\n        return instructionState.lFrame.activeDirectiveId;\n    }\n    /**\n     * Increments the current directive id value.\n     *\n     * For example we have an element that has two directives on it:\n     * <div dir-one dir-two></div>\n     *\n     * dirOne->hostBindings() (index = 1)\n     * // increment\n     * dirTwo->hostBindings() (index = 2)\n     *\n     * Depending on whether or not a previous directive had any inherited\n     * directives present, that value will be incremented in addition\n     * to the id jumping up by one.\n     *\n     * Note that this is only active when `hostBinding` functions are being processed.\n     *\n     * Note that directive id values are specific to an element (this means that\n     * the same id value could be present on another element with a completely\n     * different set of directives).\n     */\n    function incrementActiveDirectiveId() {\n        // Each directive gets a uniqueId value that is the same for both\n        // create and update calls when the hostBindings function is called. The\n        // directive uniqueId is not set anywhere--it is just incremented between\n        // each hostBindings call and is useful for helping instruction code\n        // uniquely determine which directive is currently active when executed.\n        instructionState.lFrame.activeDirectiveId += 1;\n    }\n    /**\n     * Restores `contextViewData` to the given OpaqueViewState instance.\n     *\n     * Used in conjunction with the getCurrentView() instruction to save a snapshot\n     * of the current view and restore it when listeners are invoked. This allows\n     * walking the declaration view tree in listeners to get vars from parent views.\n     *\n     * @param viewToRestore The OpaqueViewState instance to restore.\n     *\n     * @codeGenApi\n     */\n    function ɵɵrestoreView(viewToRestore) {\n        instructionState.lFrame.contextLView = viewToRestore;\n    }\n    function getPreviousOrParentTNode() {\n        return instructionState.lFrame.previousOrParentTNode;\n    }\n    function setPreviousOrParentTNode(tNode, _isParent) {\n        instructionState.lFrame.previousOrParentTNode = tNode;\n        instructionState.lFrame.isParent = _isParent;\n    }\n    function getIsParent() {\n        return instructionState.lFrame.isParent;\n    }\n    function setIsNotParent() {\n        instructionState.lFrame.isParent = false;\n    }\n    function setIsParent() {\n        instructionState.lFrame.isParent = true;\n    }\n    function getContextLView() {\n        return instructionState.lFrame.contextLView;\n    }\n    function getCheckNoChangesMode() {\n        return instructionState.checkNoChangesMode;\n    }\n    function setCheckNoChangesMode(mode) {\n        instructionState.checkNoChangesMode = mode;\n    }\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    function getBindingRoot() {\n        var lFrame = instructionState.lFrame;\n        var index = lFrame.bindingRootIndex;\n        if (index === -1) {\n            var lView = lFrame.lView;\n            index = lFrame.bindingRootIndex = lView[TVIEW].bindingStartIndex;\n        }\n        return index;\n    }\n    function getBindingIndex() {\n        return instructionState.lFrame.bindingIndex;\n    }\n    function setBindingIndex(value) {\n        return instructionState.lFrame.bindingIndex = value;\n    }\n    function nextBindingIndex() {\n        return instructionState.lFrame.bindingIndex++;\n    }\n    function incrementBindingIndex(count) {\n        var lFrame = instructionState.lFrame;\n        var index = lFrame.bindingIndex;\n        lFrame.bindingIndex = lFrame.bindingIndex + count;\n        return index;\n    }\n    /**\n     * Set a new binding root index so that host template functions can execute.\n     *\n     * Bindings inside the host template are 0 index. But because we don't know ahead of time\n     * how many host bindings we have we can't pre-compute them. For this reason they are all\n     * 0 index and we just shift the root so that they match next available location in the LView.\n     * @param value\n     */\n    function setBindingRoot(value) {\n        instructionState.lFrame.bindingRootIndex = value;\n    }\n    function getCurrentQueryIndex() {\n        return instructionState.lFrame.currentQueryIndex;\n    }\n    function setCurrentQueryIndex(value) {\n        instructionState.lFrame.currentQueryIndex = value;\n    }\n    /**\n     * This is a light weight version of the `enterView` which is needed by the DI system.\n     * @param newView\n     * @param tNode\n     */\n    function enterDI(newView, tNode) {\n        ngDevMode && assertLViewOrUndefined(newView);\n        var newLFrame = allocLFrame();\n        instructionState.lFrame = newLFrame;\n        newLFrame.previousOrParentTNode = tNode;\n        newLFrame.lView = newView;\n        if (ngDevMode) {\n            // resetting for safety in dev mode only.\n            newLFrame.isParent = DEV_MODE_VALUE;\n            newLFrame.selectedIndex = DEV_MODE_VALUE;\n            newLFrame.contextLView = DEV_MODE_VALUE;\n            newLFrame.elementDepthCount = DEV_MODE_VALUE;\n            newLFrame.currentNamespace = DEV_MODE_VALUE;\n            newLFrame.currentSanitizer = DEV_MODE_VALUE;\n            newLFrame.currentDirectiveDef = DEV_MODE_VALUE;\n            newLFrame.activeDirectiveId = DEV_MODE_VALUE;\n            newLFrame.bindingRootIndex = DEV_MODE_VALUE;\n            newLFrame.currentQueryIndex = DEV_MODE_VALUE;\n        }\n    }\n    var DEV_MODE_VALUE = 'Value indicating that DI is trying to read value which it should not need to know about.';\n    /**\n     * This is a light weight version of the `leaveView` which is needed by the DI system.\n     *\n     * Because the implementation is same it is only an alias\n     */\n    var leaveDI = leaveView;\n    /**\n     * Swap the current lView with a new lView.\n     *\n     * For performance reasons we store the lView in the top level of the module.\n     * This way we minimize the number of properties to read. Whenever a new view\n     * is entered we have to store the lView for later, and when the view is\n     * exited the state has to be restored\n     *\n     * @param newView New lView to become active\n     * @param tNode Element to which the View is a child of\n     * @returns the previously active lView;\n     */\n    function enterView(newView, tNode) {\n        ngDevMode && assertLViewOrUndefined(newView);\n        var newLFrame = allocLFrame();\n        instructionState.lFrame = newLFrame;\n        newLFrame.previousOrParentTNode = tNode;\n        newLFrame.isParent = true;\n        newLFrame.lView = newView;\n        newLFrame.selectedIndex = 0;\n        newLFrame.contextLView = newView;\n        newLFrame.elementDepthCount = 0;\n        newLFrame.currentNamespace = null;\n        newLFrame.currentSanitizer = null;\n        newLFrame.currentDirectiveDef = null;\n        newLFrame.activeDirectiveId = 0;\n        newLFrame.bindingRootIndex = -1;\n        newLFrame.bindingIndex = newView === null ? -1 : newView[TVIEW].bindingStartIndex;\n        newLFrame.currentQueryIndex = 0;\n    }\n    /**\n     * Allocates next free LFrame. This function tries to reuse the `LFrame`s to lower memory pressure.\n     */\n    function allocLFrame() {\n        var currentLFrame = instructionState.lFrame;\n        var childLFrame = currentLFrame === null ? null : currentLFrame.child;\n        var newLFrame = childLFrame === null ? createLFrame(currentLFrame) : childLFrame;\n        return newLFrame;\n    }\n    function createLFrame(parent) {\n        var lFrame = {\n            previousOrParentTNode: null,\n            isParent: true,\n            lView: null,\n            selectedIndex: 0,\n            contextLView: null,\n            elementDepthCount: 0,\n            currentNamespace: null,\n            currentSanitizer: null,\n            currentDirectiveDef: null,\n            activeDirectiveId: 0,\n            bindingRootIndex: -1,\n            bindingIndex: -1,\n            currentQueryIndex: 0,\n            parent: parent,\n            child: null,\n        };\n        parent !== null && (parent.child = lFrame); // link the new LFrame for reuse.\n        return lFrame;\n    }\n    function leaveViewProcessExit() {\n        if (hasActiveElementFlag(1 /* RunExitFn */)) {\n            executeElementExitFn();\n        }\n        leaveView();\n    }\n    function leaveView() {\n        instructionState.lFrame = instructionState.lFrame.parent;\n    }\n    function nextContextImpl(level) {\n        var contextLView = instructionState.lFrame.contextLView =\n            walkUpViews(level, instructionState.lFrame.contextLView);\n        return contextLView[CONTEXT];\n    }\n    function walkUpViews(nestingLevel, currentView) {\n        while (nestingLevel > 0) {\n            ngDevMode && assertDefined(currentView[DECLARATION_VIEW], 'Declaration view should be defined if nesting level is greater than 0.');\n            currentView = currentView[DECLARATION_VIEW];\n            nestingLevel--;\n        }\n        return currentView;\n    }\n    /**\n     * Gets the most recent index passed to {@link select}\n     *\n     * Used with {@link property} instruction (and more in the future) to identify the index in the\n     * current `LView` to act on.\n     */\n    function getSelectedIndex() {\n        return instructionState.lFrame.selectedIndex >> 1 /* Size */;\n    }\n    /**\n     * Sets the most recent index passed to {@link select}\n     *\n     * Used with {@link property} instruction (and more in the future) to identify the index in the\n     * current `LView` to act on.\n     *\n     * (Note that if an \"exit function\" was set earlier (via `setElementExitFn()`) then that will be\n     * run if and when the provided `index` value is different from the current selected index value.)\n     */\n    function setSelectedIndex(index) {\n        instructionState.lFrame.selectedIndex = index << 1 /* Size */;\n    }\n    /**\n     * Sets the namespace used to create elements to `'http://www.w3.org/2000/svg'` in global state.\n     *\n     * @codeGenApi\n     */\n    function ɵɵnamespaceSVG() {\n        instructionState.lFrame.currentNamespace = 'http://www.w3.org/2000/svg';\n    }\n    /**\n     * Sets the namespace used to create elements to `'http://www.w3.org/1998/MathML/'` in global state.\n     *\n     * @codeGenApi\n     */\n    function ɵɵnamespaceMathML() {\n        instructionState.lFrame.currentNamespace = 'http://www.w3.org/1998/MathML/';\n    }\n    /**\n     * Sets the namespace used to create elements to `null`, which forces element creation to use\n     * `createElement` rather than `createElementNS`.\n     *\n     * @codeGenApi\n     */\n    function ɵɵnamespaceHTML() {\n        namespaceHTMLInternal();\n    }\n    /**\n     * Sets the namespace used to create elements to `null`, which forces element creation to use\n     * `createElement` rather than `createElementNS`.\n     */\n    function namespaceHTMLInternal() {\n        instructionState.lFrame.currentNamespace = null;\n    }\n    function getNamespace() {\n        return instructionState.lFrame.currentNamespace;\n    }\n    function setCurrentStyleSanitizer(sanitizer) {\n        instructionState.lFrame.currentSanitizer = sanitizer;\n    }\n    function resetCurrentStyleSanitizer() {\n        setCurrentStyleSanitizer(null);\n    }\n    function getCurrentStyleSanitizer() {\n        // TODO(misko): This should throw when there is no LView, but it turns out we can get here from\n        // `NodeStyleDebug` hence we return `null`. This should be fixed\n        var lFrame = instructionState.lFrame;\n        return lFrame === null ? null : lFrame.currentSanitizer;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Adds all directive lifecycle hooks from the given `DirectiveDef` to the given `TView`.\n     *\n     * Must be run *only* on the first template pass.\n     *\n     * Sets up the pre-order hooks on the provided `tView`,\n     * see {@link HookData} for details about the data structure.\n     *\n     * @param directiveIndex The index of the directive in LView\n     * @param directiveDef The definition containing the hooks to setup in tView\n     * @param tView The current TView\n     */\n    function registerPreOrderHooks(directiveIndex, directiveDef, tView) {\n        ngDevMode && assertFirstCreatePass(tView);\n        var onChanges = directiveDef.onChanges, onInit = directiveDef.onInit, doCheck = directiveDef.doCheck;\n        if (onChanges) {\n            (tView.preOrderHooks || (tView.preOrderHooks = [])).push(directiveIndex, onChanges);\n            (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = [])).push(directiveIndex, onChanges);\n        }\n        if (onInit) {\n            (tView.preOrderHooks || (tView.preOrderHooks = [])).push(-directiveIndex, onInit);\n        }\n        if (doCheck) {\n            (tView.preOrderHooks || (tView.preOrderHooks = [])).push(directiveIndex, doCheck);\n            (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = [])).push(directiveIndex, doCheck);\n        }\n    }\n    /**\n     *\n     * Loops through the directives on the provided `tNode` and queues hooks to be\n     * run that are not initialization hooks.\n     *\n     * Should be executed during `elementEnd()` and similar to\n     * preserve hook execution order. Content, view, and destroy hooks for projected\n     * components and directives must be called *before* their hosts.\n     *\n     * Sets up the content, view, and destroy hooks on the provided `tView`,\n     * see {@link HookData} for details about the data structure.\n     *\n     * NOTE: This does not set up `onChanges`, `onInit` or `doCheck`, those are set up\n     * separately at `elementStart`.\n     *\n     * @param tView The current TView\n     * @param tNode The TNode whose directives are to be searched for hooks to queue\n     */\n    function registerPostOrderHooks(tView, tNode) {\n        ngDevMode && assertFirstCreatePass(tView);\n        // It's necessary to loop through the directives at elementEnd() (rather than processing in\n        // directiveCreate) so we can preserve the current hook order. Content, view, and destroy\n        // hooks for projected components and directives must be called *before* their hosts.\n        for (var i = tNode.directiveStart, end = tNode.directiveEnd; i < end; i++) {\n            var directiveDef = tView.data[i];\n            if (directiveDef.afterContentInit) {\n                (tView.contentHooks || (tView.contentHooks = [])).push(-i, directiveDef.afterContentInit);\n            }\n            if (directiveDef.afterContentChecked) {\n                (tView.contentHooks || (tView.contentHooks = [])).push(i, directiveDef.afterContentChecked);\n                (tView.contentCheckHooks || (tView.contentCheckHooks = [])).push(i, directiveDef.afterContentChecked);\n            }\n            if (directiveDef.afterViewInit) {\n                (tView.viewHooks || (tView.viewHooks = [])).push(-i, directiveDef.afterViewInit);\n            }\n            if (directiveDef.afterViewChecked) {\n                (tView.viewHooks || (tView.viewHooks = [])).push(i, directiveDef.afterViewChecked);\n                (tView.viewCheckHooks || (tView.viewCheckHooks = [])).push(i, directiveDef.afterViewChecked);\n            }\n            if (directiveDef.onDestroy != null) {\n                (tView.destroyHooks || (tView.destroyHooks = [])).push(i, directiveDef.onDestroy);\n            }\n        }\n    }\n    /**\n     * Executing hooks requires complex logic as we need to deal with 2 constraints.\n     *\n     * 1. Init hooks (ngOnInit, ngAfterContentInit, ngAfterViewInit) must all be executed once and only\n     * once, across many change detection cycles. This must be true even if some hooks throw, or if\n     * some recursively trigger a change detection cycle.\n     * To solve that, it is required to track the state of the execution of these init hooks.\n     * This is done by storing and maintaining flags in the view: the {@link InitPhaseState},\n     * and the index within that phase. They can be seen as a cursor in the following structure:\n     * [[onInit1, onInit2], [afterContentInit1], [afterViewInit1, afterViewInit2, afterViewInit3]]\n     * They are are stored as flags in LView[FLAGS].\n     *\n     * 2. Pre-order hooks can be executed in batches, because of the select instruction.\n     * To be able to pause and resume their execution, we also need some state about the hook's array\n     * that is being processed:\n     * - the index of the next hook to be executed\n     * - the number of init hooks already found in the processed part of the  array\n     * They are are stored as flags in LView[PREORDER_HOOK_FLAGS].\n     */\n    /**\n     * Executes pre-order check hooks ( OnChanges, DoChanges) given a view where all the init hooks were\n     * executed once. This is a light version of executeInitAndCheckPreOrderHooks where we can skip read\n     * / write of the init-hooks related flags.\n     * @param lView The LView where hooks are defined\n     * @param hooks Hooks to be run\n     * @param nodeIndex 3 cases depending on the value:\n     * - undefined: all hooks from the array should be executed (post-order case)\n     * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\n     * flushing the remaining hooks)\n     * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n     * case, when executing select(number))\n     */\n    function executeCheckHooks(lView, hooks, nodeIndex) {\n        callHooks(lView, hooks, 3 /* InitPhaseCompleted */, nodeIndex);\n    }\n    /**\n     * Executes post-order init and check hooks (one of AfterContentInit, AfterContentChecked,\n     * AfterViewInit, AfterViewChecked) given a view where there are pending init hooks to be executed.\n     * @param lView The LView where hooks are defined\n     * @param hooks Hooks to be run\n     * @param initPhase A phase for which hooks should be run\n     * @param nodeIndex 3 cases depending on the value:\n     * - undefined: all hooks from the array should be executed (post-order case)\n     * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\n     * flushing the remaining hooks)\n     * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n     * case, when executing select(number))\n     */\n    function executeInitAndCheckHooks(lView, hooks, initPhase, nodeIndex) {\n        ngDevMode && assertNotEqual(initPhase, 3 /* InitPhaseCompleted */, 'Init pre-order hooks should not be called more than once');\n        if ((lView[FLAGS] & 3 /* InitPhaseStateMask */) === initPhase) {\n            callHooks(lView, hooks, initPhase, nodeIndex);\n        }\n    }\n    function incrementInitPhaseFlags(lView, initPhase) {\n        ngDevMode &&\n            assertNotEqual(initPhase, 3 /* InitPhaseCompleted */, 'Init hooks phase should not be incremented after all init hooks have been run.');\n        var flags = lView[FLAGS];\n        if ((flags & 3 /* InitPhaseStateMask */) === initPhase) {\n            flags &= 1023 /* IndexWithinInitPhaseReset */;\n            flags += 1 /* InitPhaseStateIncrementer */;\n            lView[FLAGS] = flags;\n        }\n    }\n    /**\n     * Calls lifecycle hooks with their contexts, skipping init hooks if it's not\n     * the first LView pass\n     *\n     * @param currentView The current view\n     * @param arr The array in which the hooks are found\n     * @param initPhaseState the current state of the init phase\n     * @param currentNodeIndex 3 cases depending on the value:\n     * - undefined: all hooks from the array should be executed (post-order case)\n     * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\n     * flushing the remaining hooks)\n     * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n     * case, when executing select(number))\n     */\n    function callHooks(currentView, arr, initPhase, currentNodeIndex) {\n        ngDevMode && assertEqual(getCheckNoChangesMode(), false, 'Hooks should never be run in the check no changes mode.');\n        var startIndex = currentNodeIndex !== undefined ?\n            (currentView[PREORDER_HOOK_FLAGS] & 65535 /* IndexOfTheNextPreOrderHookMaskMask */) :\n            0;\n        var nodeIndexLimit = currentNodeIndex != null ? currentNodeIndex : -1;\n        var lastNodeIndexFound = 0;\n        for (var i = startIndex; i < arr.length; i++) {\n            var hook = arr[i + 1];\n            if (typeof hook === 'number') {\n                lastNodeIndexFound = arr[i];\n                if (currentNodeIndex != null && lastNodeIndexFound >= currentNodeIndex) {\n                    break;\n                }\n            }\n            else {\n                var isInitHook = arr[i] < 0;\n                if (isInitHook)\n                    currentView[PREORDER_HOOK_FLAGS] += 65536 /* NumberOfInitHooksCalledIncrementer */;\n                if (lastNodeIndexFound < nodeIndexLimit || nodeIndexLimit == -1) {\n                    callHook(currentView, initPhase, arr, i);\n                    currentView[PREORDER_HOOK_FLAGS] =\n                        (currentView[PREORDER_HOOK_FLAGS] & 4294901760 /* NumberOfInitHooksCalledMask */) + i +\n                            2;\n                }\n                i++;\n            }\n        }\n    }\n    /**\n     * Execute one hook against the current `LView`.\n     *\n     * @param currentView The current view\n     * @param initPhaseState the current state of the init phase\n     * @param arr The array in which the hooks are found\n     * @param i The current index within the hook data array\n     */\n    function callHook(currentView, initPhase, arr, i) {\n        var isInitHook = arr[i] < 0;\n        var hook = arr[i + 1];\n        var directiveIndex = isInitHook ? -arr[i] : arr[i];\n        var directive = currentView[directiveIndex];\n        if (isInitHook) {\n            var indexWithintInitPhase = currentView[FLAGS] >> 10 /* IndexWithinInitPhaseShift */;\n            // The init phase state must be always checked here as it may have been recursively\n            // updated\n            if (indexWithintInitPhase <\n                (currentView[PREORDER_HOOK_FLAGS] >> 16 /* NumberOfInitHooksCalledShift */) &&\n                (currentView[FLAGS] & 3 /* InitPhaseStateMask */) === initPhase) {\n                currentView[FLAGS] += 1024 /* IndexWithinInitPhaseIncrementer */;\n                hook.call(directive);\n            }\n        }\n        else {\n            hook.call(directive);\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var TNODE = 8;\n    var PARENT_INJECTOR = 8;\n    var INJECTOR_BLOOM_PARENT_SIZE = 9;\n    var NO_PARENT_INJECTOR = -1;\n    /**\n     * Each injector is saved in 9 contiguous slots in `LView` and 9 contiguous slots in\n     * `TView.data`. This allows us to store information about the current node's tokens (which\n     * can be shared in `TView`) as well as the tokens of its ancestor nodes (which cannot be\n     * shared, so they live in `LView`).\n     *\n     * Each of these slots (aside from the last slot) contains a bloom filter. This bloom filter\n     * determines whether a directive is available on the associated node or not. This prevents us\n     * from searching the directives array at this level unless it's probable the directive is in it.\n     *\n     * See: https://en.wikipedia.org/wiki/Bloom_filter for more about bloom filters.\n     *\n     * Because all injectors have been flattened into `LView` and `TViewData`, they cannot typed\n     * using interfaces as they were previously. The start index of each `LInjector` and `TInjector`\n     * will differ based on where it is flattened into the main array, so it's not possible to know\n     * the indices ahead of time and save their types here. The interfaces are still included here\n     * for documentation purposes.\n     *\n     * export interface LInjector extends Array<any> {\n     *\n     *    // Cumulative bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)\n     *    [0]: number;\n     *\n     *    // Cumulative bloom for directive IDs 32-63\n     *    [1]: number;\n     *\n     *    // Cumulative bloom for directive IDs 64-95\n     *    [2]: number;\n     *\n     *    // Cumulative bloom for directive IDs 96-127\n     *    [3]: number;\n     *\n     *    // Cumulative bloom for directive IDs 128-159\n     *    [4]: number;\n     *\n     *    // Cumulative bloom for directive IDs 160 - 191\n     *    [5]: number;\n     *\n     *    // Cumulative bloom for directive IDs 192 - 223\n     *    [6]: number;\n     *\n     *    // Cumulative bloom for directive IDs 224 - 255\n     *    [7]: number;\n     *\n     *    // We need to store a reference to the injector's parent so DI can keep looking up\n     *    // the injector tree until it finds the dependency it's looking for.\n     *    [PARENT_INJECTOR]: number;\n     * }\n     *\n     * export interface TInjector extends Array<any> {\n     *\n     *    // Shared node bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)\n     *    [0]: number;\n     *\n     *    // Shared node bloom for directive IDs 32-63\n     *    [1]: number;\n     *\n     *    // Shared node bloom for directive IDs 64-95\n     *    [2]: number;\n     *\n     *    // Shared node bloom for directive IDs 96-127\n     *    [3]: number;\n     *\n     *    // Shared node bloom for directive IDs 128-159\n     *    [4]: number;\n     *\n     *    // Shared node bloom for directive IDs 160 - 191\n     *    [5]: number;\n     *\n     *    // Shared node bloom for directive IDs 192 - 223\n     *    [6]: number;\n     *\n     *    // Shared node bloom for directive IDs 224 - 255\n     *    [7]: number;\n     *\n     *    // Necessary to find directive indices for a particular node.\n     *    [TNODE]: TElementNode|TElementContainerNode|TContainerNode;\n     *  }\n     */\n    /**\n    * Factory for creating instances of injectors in the NodeInjector.\n    *\n    * This factory is complicated by the fact that it can resolve `multi` factories as well.\n    *\n    * NOTE: Some of the fields are optional which means that this class has two hidden classes.\n    * - One without `multi` support (most common)\n    * - One with `multi` values, (rare).\n    *\n    * Since VMs can cache up to 4 inline hidden classes this is OK.\n    *\n    * - Single factory: Only `resolving` and `factory` is defined.\n    * - `providers` factory: `componentProviders` is a number and `index = -1`.\n    * - `viewProviders` factory: `componentProviders` is a number and `index` points to `providers`.\n    */\n    var NodeInjectorFactory = /** @class */ (function () {\n        function NodeInjectorFactory(\n        /**\n         * Factory to invoke in order to create a new instance.\n         */\n        factory, \n        /**\n         * Set to `true` if the token is declared in `viewProviders` (or if it is component).\n         */\n        isViewProvider, injectImplementation) {\n            this.factory = factory;\n            /**\n             * Marker set to true during factory invocation to see if we get into recursive loop.\n             * Recursive loop causes an error to be displayed.\n             */\n            this.resolving = false;\n            this.canSeeViewProviders = isViewProvider;\n            this.injectImpl = injectImplementation;\n        }\n        return NodeInjectorFactory;\n    }());\n    function isFactory(obj) {\n        return obj instanceof NodeInjectorFactory;\n    }\n    // Note: This hack is necessary so we don't erroneously get a circular dependency\n    // failure based on types.\n    var unusedValueExportToPlacateAjd$2 = 1;\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function assertNodeType(tNode, type) {\n        assertDefined(tNode, 'should be called with a TNode');\n        assertEqual(tNode.type, type, \"should be a \" + typeName(type));\n    }\n    function assertNodeOfPossibleTypes(tNode) {\n        var types = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            types[_i - 1] = arguments[_i];\n        }\n        assertDefined(tNode, 'should be called with a TNode');\n        var found = types.some(function (type) { return tNode.type === type; });\n        assertEqual(found, true, \"Should be one of \" + types.map(typeName).join(', ') + \" but got \" + typeName(tNode.type));\n    }\n    function typeName(type) {\n        if (type == 1 /* Projection */)\n            return 'Projection';\n        if (type == 0 /* Container */)\n            return 'Container';\n        if (type == 5 /* IcuContainer */)\n            return 'IcuContainer';\n        if (type == 2 /* View */)\n            return 'View';\n        if (type == 3 /* Element */)\n            return 'Element';\n        if (type == 4 /* ElementContainer */)\n            return 'ElementContainer';\n        return '<unknown>';\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Most of the use of `document` in Angular is from within the DI system so it is possible to simply\n     * inject the `DOCUMENT` token and are done.\n     *\n     * Ivy is special because it does not rely upon the DI and must get hold of the document some other\n     * way.\n     *\n     * The solution is to define `getDocument()` and `setDocument()` top-level functions for ivy.\n     * Wherever ivy needs the global document, it calls `getDocument()` instead.\n     *\n     * When running ivy outside of a browser environment, it is necessary to call `setDocument()` to\n     * tell ivy what the global `document` is.\n     *\n     * Angular does this for us in each of the standard platforms (`Browser`, `Server`, and `WebWorker`)\n     * by calling `setDocument()` when providing the `DOCUMENT` token.\n     */\n    var DOCUMENT = undefined;\n    /**\n     * Tell ivy what the `document` is for this platform.\n     *\n     * It is only necessary to call this if the current platform is not a browser.\n     *\n     * @param document The object representing the global `document` in this environment.\n     */\n    function setDocument(document) {\n        DOCUMENT = document;\n    }\n    /**\n     * Access the object that represents the `document` for this platform.\n     *\n     * Ivy calls this whenever it needs to access the `document` object.\n     * For example to create the renderer or to do sanitization.\n     */\n    function getDocument() {\n        if (DOCUMENT !== undefined) {\n            return DOCUMENT;\n        }\n        else if (typeof document !== 'undefined') {\n            return document;\n        }\n        // No \"document\" can be found. This should only happen if we are running ivy outside Angular and\n        // the current platform is not a browser. Since this is not a supported scenario at the moment\n        // this should not happen in Angular apps.\n        // Once we support running ivy outside of Angular we will need to publish `setDocument()` as a\n        // public API. Meanwhile we just return `undefined` and let the application fail.\n        return undefined;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // TODO: cleanup once the code is merged in angular/angular\n    var RendererStyleFlags3;\n    (function (RendererStyleFlags3) {\n        RendererStyleFlags3[RendererStyleFlags3[\"Important\"] = 1] = \"Important\";\n        RendererStyleFlags3[RendererStyleFlags3[\"DashCase\"] = 2] = \"DashCase\";\n    })(RendererStyleFlags3 || (RendererStyleFlags3 = {}));\n    /** Returns whether the `renderer` is a `ProceduralRenderer3` */\n    function isProceduralRenderer(renderer) {\n        return !!(renderer.listen);\n    }\n    var domRendererFactory3 = {\n        createRenderer: function (hostElement, rendererType) { return getDocument(); }\n    };\n    // Note: This hack is necessary so we don't erroneously get a circular dependency\n    // failure based on types.\n    var unusedValueExportToPlacateAjd$3 = 1;\n\n    /**\n     * Assigns all attribute values to the provided element via the inferred renderer.\n     *\n     * This function accepts two forms of attribute entries:\n     *\n     * default: (key, value):\n     *  attrs = [key1, value1, key2, value2]\n     *\n     * namespaced: (NAMESPACE_MARKER, uri, name, value)\n     *  attrs = [NAMESPACE_MARKER, uri, name, value, NAMESPACE_MARKER, uri, name, value]\n     *\n     * The `attrs` array can contain a mix of both the default and namespaced entries.\n     * The \"default\" values are set without a marker, but if the function comes across\n     * a marker value then it will attempt to set a namespaced value. If the marker is\n     * not of a namespaced value then the function will quit and return the index value\n     * where it stopped during the iteration of the attrs array.\n     *\n     * See [AttributeMarker] to understand what the namespace marker value is.\n     *\n     * Note that this instruction does not support assigning style and class values to\n     * an element. See `elementStart` and `elementHostAttrs` to learn how styling values\n     * are applied to an element.\n     * @param renderer The renderer to be used\n     * @param native The element that the attributes will be assigned to\n     * @param attrs The attribute array of values that will be assigned to the element\n     * @returns the index value that was last accessed in the attributes array\n     */\n    function setUpAttributes(renderer, native, attrs) {\n        var isProc = isProceduralRenderer(renderer);\n        var i = 0;\n        while (i < attrs.length) {\n            var value = attrs[i];\n            if (typeof value === 'number') {\n                // only namespaces are supported. Other value types (such as style/class\n                // entries) are not supported in this function.\n                if (value !== 0 /* NamespaceURI */) {\n                    break;\n                }\n                // we just landed on the marker value ... therefore\n                // we should skip to the next entry\n                i++;\n                var namespaceURI = attrs[i++];\n                var attrName = attrs[i++];\n                var attrVal = attrs[i++];\n                ngDevMode && ngDevMode.rendererSetAttribute++;\n                isProc ?\n                    renderer.setAttribute(native, attrName, attrVal, namespaceURI) :\n                    native.setAttributeNS(namespaceURI, attrName, attrVal);\n            }\n            else {\n                // attrName is string;\n                var attrName = value;\n                var attrVal = attrs[++i];\n                // Standard attributes\n                ngDevMode && ngDevMode.rendererSetAttribute++;\n                if (isAnimationProp(attrName)) {\n                    if (isProc) {\n                        renderer.setProperty(native, attrName, attrVal);\n                    }\n                }\n                else {\n                    isProc ?\n                        renderer.setAttribute(native, attrName, attrVal) :\n                        native.setAttribute(attrName, attrVal);\n                }\n                i++;\n            }\n        }\n        // another piece of code may iterate over the same attributes array. Therefore\n        // it may be helpful to return the exact spot where the attributes array exited\n        // whether by running into an unsupported marker or if all the static values were\n        // iterated over.\n        return i;\n    }\n    /**\n     * Test whether the given value is a marker that indicates that the following\n     * attribute values in a `TAttributes` array are only the names of attributes,\n     * and not name-value pairs.\n     * @param marker The attribute marker to test.\n     * @returns true if the marker is a \"name-only\" marker (e.g. `Bindings`, `Template` or `I18n`).\n     */\n    function isNameOnlyAttributeMarker(marker) {\n        return marker === 3 /* Bindings */ || marker === 4 /* Template */ ||\n            marker === 6 /* I18n */;\n    }\n    function isAnimationProp(name) {\n        // Perf note: accessing charCodeAt to check for the first character of a string is faster as\n        // compared to accessing a character at index 0 (ex. name[0]). The main reason for this is that\n        // charCodeAt doesn't allocate memory to return a substring.\n        return name.charCodeAt(0) === 64; // @\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /// Parent Injector Utils ///////////////////////////////////////////////////////////////\n    function hasParentInjector(parentLocation) {\n        return parentLocation !== NO_PARENT_INJECTOR;\n    }\n    function getParentInjectorIndex(parentLocation) {\n        return parentLocation & 32767 /* InjectorIndexMask */;\n    }\n    function getParentInjectorViewOffset(parentLocation) {\n        return parentLocation >> 16 /* ViewOffsetShift */;\n    }\n    /**\n     * Unwraps a parent injector location number to find the view offset from the current injector,\n     * then walks up the declaration view tree until the view is found that contains the parent\n     * injector.\n     *\n     * @param location The location of the parent injector, which contains the view offset\n     * @param startView The LView instance from which to start walking up the view tree\n     * @returns The LView instance that contains the parent injector\n     */\n    function getParentInjectorView(location, startView) {\n        var viewOffset = getParentInjectorViewOffset(location);\n        var parentView = startView;\n        // For most cases, the parent injector can be found on the host node (e.g. for component\n        // or container), but we must keep the loop here to support the rarer case of deeply nested\n        // <ng-template> tags or inline views, where the parent injector might live many views\n        // above the child injector.\n        while (viewOffset > 0) {\n            parentView = parentView[DECLARATION_VIEW];\n            viewOffset--;\n        }\n        return parentView;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Used for stringify render output in Ivy.\n     * Important! This function is very performance-sensitive and we should\n     * be extra careful not to introduce megamorphic reads in it.\n     */\n    function renderStringify(value) {\n        if (typeof value === 'string')\n            return value;\n        if (value == null)\n            return '';\n        return '' + value;\n    }\n    /**\n     * Used to stringify a value so that it can be displayed in an error message.\n     * Important! This function contains a megamorphic read and should only be\n     * used for error messages.\n     */\n    function stringifyForError(value) {\n        if (typeof value === 'function')\n            return value.name || value.toString();\n        if (typeof value === 'object' && value != null && typeof value.type === 'function') {\n            return value.type.name || value.type.toString();\n        }\n        return renderStringify(value);\n    }\n    var defaultScheduler = (function () {\n        return (typeof requestAnimationFrame !== 'undefined' && requestAnimationFrame || // browser only\n            setTimeout // everything else\n        ).bind(_global);\n    })();\n    /**\n     *\n     * @codeGenApi\n     */\n    function ɵɵresolveWindow(element) {\n        return { name: 'window', target: element.ownerDocument.defaultView };\n    }\n    /**\n     *\n     * @codeGenApi\n     */\n    function ɵɵresolveDocument(element) {\n        return { name: 'document', target: element.ownerDocument };\n    }\n    /**\n     *\n     * @codeGenApi\n     */\n    function ɵɵresolveBody(element) {\n        return { name: 'body', target: element.ownerDocument.body };\n    }\n    /**\n     * The special delimiter we use to separate property names, prefixes, and suffixes\n     * in property binding metadata. See storeBindingMetadata().\n     *\n     * We intentionally use the Unicode \"REPLACEMENT CHARACTER\" (U+FFFD) as a delimiter\n     * because it is a very uncommon character that is unlikely to be part of a user's\n     * property names or interpolation strings. If it is in fact used in a property\n     * binding, DebugElement.properties will not return the correct value for that\n     * binding. However, there should be no runtime effect for real applications.\n     *\n     * This character is typically rendered as a question mark inside of a diamond.\n     * See https://en.wikipedia.org/wiki/Specials_(Unicode_block)\n     *\n     */\n    var INTERPOLATION_DELIMITER = \"\\uFFFD\";\n    /**\n     * Unwrap a value which might be behind a closure (for forward declaration reasons).\n     */\n    function maybeUnwrapFn(value) {\n        if (value instanceof Function) {\n            return value();\n        }\n        else {\n            return value;\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var SafeValueImpl = /** @class */ (function () {\n        function SafeValueImpl(changingThisBreaksApplicationSecurity) {\n            this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;\n        }\n        SafeValueImpl.prototype.toString = function () {\n            return \"SafeValue must use [property]=binding: \" + this.changingThisBreaksApplicationSecurity +\n                \" (see http://g.co/ng/security#xss)\";\n        };\n        return SafeValueImpl;\n    }());\n    var SafeHtmlImpl = /** @class */ (function (_super) {\n        __extends(SafeHtmlImpl, _super);\n        function SafeHtmlImpl() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        SafeHtmlImpl.prototype.getTypeName = function () { return \"HTML\" /* Html */; };\n        return SafeHtmlImpl;\n    }(SafeValueImpl));\n    var SafeStyleImpl = /** @class */ (function (_super) {\n        __extends(SafeStyleImpl, _super);\n        function SafeStyleImpl() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        SafeStyleImpl.prototype.getTypeName = function () { return \"Style\" /* Style */; };\n        return SafeStyleImpl;\n    }(SafeValueImpl));\n    var SafeScriptImpl = /** @class */ (function (_super) {\n        __extends(SafeScriptImpl, _super);\n        function SafeScriptImpl() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        SafeScriptImpl.prototype.getTypeName = function () { return \"Script\" /* Script */; };\n        return SafeScriptImpl;\n    }(SafeValueImpl));\n    var SafeUrlImpl = /** @class */ (function (_super) {\n        __extends(SafeUrlImpl, _super);\n        function SafeUrlImpl() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        SafeUrlImpl.prototype.getTypeName = function () { return \"URL\" /* Url */; };\n        return SafeUrlImpl;\n    }(SafeValueImpl));\n    var SafeResourceUrlImpl = /** @class */ (function (_super) {\n        __extends(SafeResourceUrlImpl, _super);\n        function SafeResourceUrlImpl() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        SafeResourceUrlImpl.prototype.getTypeName = function () { return \"ResourceURL\" /* ResourceUrl */; };\n        return SafeResourceUrlImpl;\n    }(SafeValueImpl));\n    function unwrapSafeValue(value) {\n        return value instanceof SafeValueImpl ? value.changingThisBreaksApplicationSecurity :\n            value;\n    }\n    function allowSanitizationBypassAndThrow(value, type) {\n        var actualType = getSanitizationBypassType(value);\n        if (actualType != null && actualType !== type) {\n            // Allow ResourceURLs in URL contexts, they are strictly more trusted.\n            if (actualType === \"ResourceURL\" /* ResourceUrl */ && type === \"URL\" /* Url */)\n                return true;\n            throw new Error(\"Required a safe \" + type + \", got a \" + actualType + \" (see http://g.co/ng/security#xss)\");\n        }\n        return actualType === type;\n    }\n    function getSanitizationBypassType(value) {\n        return value instanceof SafeValueImpl && value.getTypeName() || null;\n    }\n    /**\n     * Mark `html` string as trusted.\n     *\n     * This function wraps the trusted string in `String` and brands it in a way which makes it\n     * recognizable to {@link htmlSanitizer} to be trusted implicitly.\n     *\n     * @param trustedHtml `html` string which needs to be implicitly trusted.\n     * @returns a `html` which has been branded to be implicitly trusted.\n     */\n    function bypassSanitizationTrustHtml(trustedHtml) {\n        return new SafeHtmlImpl(trustedHtml);\n    }\n    /**\n     * Mark `style` string as trusted.\n     *\n     * This function wraps the trusted string in `String` and brands it in a way which makes it\n     * recognizable to {@link styleSanitizer} to be trusted implicitly.\n     *\n     * @param trustedStyle `style` string which needs to be implicitly trusted.\n     * @returns a `style` hich has been branded to be implicitly trusted.\n     */\n    function bypassSanitizationTrustStyle(trustedStyle) {\n        return new SafeStyleImpl(trustedStyle);\n    }\n    /**\n     * Mark `script` string as trusted.\n     *\n     * This function wraps the trusted string in `String` and brands it in a way which makes it\n     * recognizable to {@link scriptSanitizer} to be trusted implicitly.\n     *\n     * @param trustedScript `script` string which needs to be implicitly trusted.\n     * @returns a `script` which has been branded to be implicitly trusted.\n     */\n    function bypassSanitizationTrustScript(trustedScript) {\n        return new SafeScriptImpl(trustedScript);\n    }\n    /**\n     * Mark `url` string as trusted.\n     *\n     * This function wraps the trusted string in `String` and brands it in a way which makes it\n     * recognizable to {@link urlSanitizer} to be trusted implicitly.\n     *\n     * @param trustedUrl `url` string which needs to be implicitly trusted.\n     * @returns a `url`  which has been branded to be implicitly trusted.\n     */\n    function bypassSanitizationTrustUrl(trustedUrl) {\n        return new SafeUrlImpl(trustedUrl);\n    }\n    /**\n     * Mark `url` string as trusted.\n     *\n     * This function wraps the trusted string in `String` and brands it in a way which makes it\n     * recognizable to {@link resourceUrlSanitizer} to be trusted implicitly.\n     *\n     * @param trustedResourceUrl `url` string which needs to be implicitly trusted.\n     * @returns a `url` which has been branded to be implicitly trusted.\n     */\n    function bypassSanitizationTrustResourceUrl(trustedResourceUrl) {\n        return new SafeResourceUrlImpl(trustedResourceUrl);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** A special value which designates that a value has not changed. */\n    var NO_CHANGE = {};\n\n    /**\n    * @license\n    * Copyright Google Inc. All Rights Reserved.\n    *\n    * Use of this source code is governed by an MIT-style license that can be\n    * found in the LICENSE file at https://angular.io/license\n    */\n    var MAP_BASED_ENTRY_PROP_NAME = '[MAP]';\n    var TEMPLATE_DIRECTIVE_INDEX = 0;\n    /**\n     * Default fallback value for a styling binding.\n     *\n     * A value of `null` is used here which signals to the styling algorithm that\n     * the styling value is not present. This way if there are no other values\n     * detected then it will be removed once the style/class property is dirty and\n     * diffed within the styling algorithm present in `flushStyling`.\n     */\n    var DEFAULT_BINDING_VALUE = null;\n    var DEFAULT_BINDING_INDEX = 0;\n    var DEFAULT_TOTAL_SOURCES = 1;\n    // The first bit value reflects a map-based binding value's bit.\n    // The reason why it's always activated for every entry in the map\n    // is so that if any map-binding values update then all other prop\n    // based bindings will pass the guard check automatically without\n    // any extra code or flags.\n    var DEFAULT_GUARD_MASK_VALUE = 1;\n    /**\n     * Creates a new instance of the `TStylingContext`.\n     *\n     * The `TStylingContext` is used as a manifest of all style or all class bindings on\n     * an element. Because it is a T-level data-structure, it is only created once per\n     * tNode for styles and for classes. This function allocates a new instance of a\n     * `TStylingContext` with the initial values (see `interfaces.ts` for more info).\n     */\n    function allocTStylingContext(initialStyling, hasDirectives) {\n        initialStyling = initialStyling || allocStylingMapArray(null);\n        return [\n            DEFAULT_TOTAL_SOURCES,\n            initialStyling,\n        ];\n    }\n    function allocStylingMapArray(value) {\n        return [value];\n    }\n    function hasConfig(tNode, flag) {\n        return (tNode.flags & flag) !== 0;\n    }\n    /**\n     * Determines whether or not to apply styles/classes directly or via context resolution.\n     *\n     * There are three cases that are matched here:\n     * 1. there are no directives present AND `ngDevMode` is falsy\n     * 2. the `firstUpdatePass` has not already run (which means that\n     *    there are more bindings to register and, therefore, direct\n     *    style/class application is not yet possible)\n     * 3. There are no collisions (i.e. properties with more than one binding) across multiple\n     *    sources (i.e. template + directive, directive + directive, directive + component)\n     */\n    function allowDirectStyling(tNode, isClassBased, firstUpdatePass) {\n        var allow = false;\n        // if no directives are present then we do not need populate a context at all. This\n        // is because duplicate prop bindings cannot be registered through the template. If\n        // and when this happens we can safely apply the value directly without context\n        // resolution...\n        var hasDirectives = hasConfig(tNode, 128 /* hasHostBindings */);\n        if (!hasDirectives) {\n            // `ngDevMode` is required to be checked here because tests/debugging rely on the context being\n            // populated. If things are in production mode then there is no need to build a context\n            // therefore the direct apply can be allowed (even on the first update).\n            allow = ngDevMode ? !firstUpdatePass : true;\n        }\n        else if (!firstUpdatePass) {\n            var duplicateStylingFlag = isClassBased ? 8192 /* hasDuplicateClassBindings */ : 262144 /* hasDuplicateStyleBindings */;\n            var hasDuplicates = hasConfig(tNode, duplicateStylingFlag);\n            var hasOnlyMapOrPropsFlag = isClassBased ? 1536 /* hasClassPropAndMapBindings */ :\n                49152 /* hasStylePropAndMapBindings */;\n            var hasOnlyMapsOrOnlyProps = (tNode.flags & hasOnlyMapOrPropsFlag) !== hasOnlyMapOrPropsFlag;\n            allow = !hasDuplicates && hasOnlyMapsOrOnlyProps;\n        }\n        return allow;\n    }\n    function patchConfig(tNode, flag) {\n        tNode.flags |= flag;\n    }\n    function getProp(context, index) {\n        return context[index + 3 /* PropOffset */];\n    }\n    function getPropConfig(context, index) {\n        return context[index + 0 /* ConfigOffset */] &\n            1 /* Mask */;\n    }\n    function isSanitizationRequired(context, index) {\n        return (getPropConfig(context, index) & 1 /* SanitizationRequired */) !==\n            0;\n    }\n    function getGuardMask(context, index, isHostBinding) {\n        var position = index + (isHostBinding ? 2 /* HostBindingsBitGuardOffset */ :\n            1 /* TemplateBitGuardOffset */);\n        return context[position];\n    }\n    function setGuardMask(context, index, maskValue, isHostBinding) {\n        var position = index + (isHostBinding ? 2 /* HostBindingsBitGuardOffset */ :\n            1 /* TemplateBitGuardOffset */);\n        context[position] = maskValue;\n    }\n    function getValuesCount(context) {\n        return getTotalSources(context) + 1;\n    }\n    function getTotalSources(context) {\n        return context[0 /* TotalSourcesPosition */];\n    }\n    function getBindingValue(context, index, offset) {\n        return context[index + 4 /* BindingsStartOffset */ + offset];\n    }\n    function getDefaultValue(context, index) {\n        return context[index + 4 /* BindingsStartOffset */ + getTotalSources(context)];\n    }\n    function setDefaultValue(context, index, value) {\n        return context[index + 4 /* BindingsStartOffset */ + getTotalSources(context)] =\n            value;\n    }\n    function setValue(data, bindingIndex, value) {\n        data[bindingIndex] = value;\n    }\n    function getValue(data, bindingIndex) {\n        return bindingIndex !== 0 ? data[bindingIndex] : null;\n    }\n    function getPropValuesStartPosition(context, tNode, isClassBased) {\n        var startPosition = 2 /* ValuesStartPosition */;\n        var flag = isClassBased ? 512 /* hasClassMapBindings */ : 16384 /* hasStyleMapBindings */;\n        if (hasConfig(tNode, flag)) {\n            startPosition += 4 /* BindingsStartOffset */ + getValuesCount(context);\n        }\n        return startPosition;\n    }\n    function hasValueChangedUnwrapSafeValue(a, b) {\n        return hasValueChanged(unwrapSafeValue(a), unwrapSafeValue(b));\n    }\n    function hasValueChanged(a, b) {\n        if (b === NO_CHANGE)\n            return false;\n        var compareValueA = Array.isArray(a) ? a[0 /* RawValuePosition */] : a;\n        var compareValueB = Array.isArray(b) ? b[0 /* RawValuePosition */] : b;\n        return !Object.is(compareValueA, compareValueB);\n    }\n    /**\n     * Determines whether the provided styling value is truthy or falsy.\n     */\n    function isStylingValueDefined(value) {\n        // the reason why null is compared against is because\n        // a CSS class value that is set to `false` must be\n        // respected (otherwise it would be treated as falsy).\n        // Empty string values are because developers usually\n        // set a value to an empty string to remove it.\n        return value != null && value !== '';\n    }\n    function concatString(a, b, separator) {\n        if (separator === void 0) { separator = ' '; }\n        return a + ((b.length && a.length) ? separator : '') + b;\n    }\n    function hyphenate(value) {\n        return value.replace(/[a-z][A-Z]/g, function (v) { return v.charAt(0) + '-' + v.charAt(1); }).toLowerCase();\n    }\n    /**\n     * Returns an instance of `StylingMapArray`.\n     *\n     * This function is designed to find an instance of `StylingMapArray` in case it is stored\n     * inside of an instance of `TStylingContext`. When a styling context is created it\n     * will copy over an initial styling values from the tNode (which are stored as a\n     * `StylingMapArray` on the `tNode.classes` or `tNode.styles` values).\n     */\n    function getStylingMapArray(value) {\n        return isStylingContext(value) ?\n            value[1 /* InitialStylingValuePosition */] :\n            value;\n    }\n    function isStylingContext(value) {\n        // the StylingMapArray is in the format of [initial, prop, string, prop, string]\n        // and this is the defining value to distinguish between arrays\n        return Array.isArray(value) && value.length >= 2 /* ValuesStartPosition */ &&\n            typeof value[1] !== 'string';\n    }\n    function isStylingMapArray(value) {\n        // the StylingMapArray is in the format of [initial, prop, string, prop, string]\n        // and this is the defining value to distinguish between arrays\n        return Array.isArray(value) &&\n            (typeof value[1 /* ValuesStartPosition */] === 'string');\n    }\n    function getInitialStylingValue(context) {\n        var map = getStylingMapArray(context);\n        return map && map[0 /* RawValuePosition */] || '';\n    }\n    function hasClassInput(tNode) {\n        return (tNode.flags & 16 /* hasClassInput */) !== 0;\n    }\n    function hasStyleInput(tNode) {\n        return (tNode.flags & 32 /* hasStyleInput */) !== 0;\n    }\n    function getMapProp(map, index) {\n        return map[index + 0 /* PropOffset */];\n    }\n    var MAP_DIRTY_VALUE = typeof ngDevMode !== 'undefined' && ngDevMode ? {} : { MAP_DIRTY_VALUE: true };\n    function setMapAsDirty(map) {\n        map[0 /* RawValuePosition */] = MAP_DIRTY_VALUE;\n    }\n    function setMapValue(map, index, value) {\n        map[index + 1 /* ValueOffset */] = value;\n    }\n    function getMapValue(map, index) {\n        return map[index + 1 /* ValueOffset */];\n    }\n    function forceClassesAsString(classes) {\n        if (classes && typeof classes !== 'string') {\n            classes = Object.keys(classes).join(' ');\n        }\n        return classes || '';\n    }\n    function forceStylesAsString(styles, hyphenateProps) {\n        if (typeof styles == 'string')\n            return styles;\n        var str = '';\n        if (styles) {\n            var props = Object.keys(styles);\n            for (var i = 0; i < props.length; i++) {\n                var prop = props[i];\n                var propLabel = hyphenateProps ? hyphenate(prop) : prop;\n                var value = styles[prop];\n                if (value !== null) {\n                    str = concatString(str, propLabel + \":\" + value, ';');\n                }\n            }\n        }\n        return str;\n    }\n    function isHostStylingActive(directiveOrSourceId) {\n        return directiveOrSourceId !== TEMPLATE_DIRECTIVE_INDEX;\n    }\n    /**\n     * Converts the provided styling map array into a string.\n     *\n     * Classes => `one two three`\n     * Styles => `prop:value; prop2:value2`\n     */\n    function stylingMapToString(map, isClassBased) {\n        var str = '';\n        for (var i = 1 /* ValuesStartPosition */; i < map.length; i += 2 /* TupleSize */) {\n            var prop = getMapProp(map, i);\n            var value = getMapValue(map, i);\n            var attrValue = concatString(prop, isClassBased ? '' : value, ':');\n            str = concatString(str, attrValue, isClassBased ? ' ' : '; ');\n        }\n        return str;\n    }\n    /**\n     * Converts the provided styling map array into a key value map.\n     */\n    function stylingMapToStringMap(map) {\n        var stringMap = {};\n        if (map) {\n            for (var i = 1 /* ValuesStartPosition */; i < map.length; i += 2 /* TupleSize */) {\n                var prop = getMapProp(map, i);\n                var value = getMapValue(map, i);\n                stringMap[prop] = value;\n            }\n        }\n        return stringMap;\n    }\n    /**\n     * Inserts the provided item into the provided styling array at the right spot.\n     *\n     * The `StylingMapArray` type is a sorted key/value array of entries. This means\n     * that when a new entry is inserted it must be placed at the right spot in the\n     * array. This function figures out exactly where to place it.\n     */\n    function addItemToStylingMap(stylingMapArr, prop, value, allowOverwrite) {\n        for (var j = 1 /* ValuesStartPosition */; j < stylingMapArr.length; j += 2 /* TupleSize */) {\n            var propAtIndex = getMapProp(stylingMapArr, j);\n            if (prop <= propAtIndex) {\n                var applied = false;\n                if (propAtIndex === prop) {\n                    var valueAtIndex = stylingMapArr[j];\n                    if (allowOverwrite || !isStylingValueDefined(valueAtIndex)) {\n                        applied = true;\n                        setMapValue(stylingMapArr, j, value);\n                    }\n                }\n                else {\n                    applied = true;\n                    stylingMapArr.splice(j, 0, prop, value);\n                }\n                return applied;\n            }\n        }\n        stylingMapArr.push(prop, value);\n        return true;\n    }\n    /**\n     * Used to convert a {key:value} map into a `StylingMapArray` array.\n     *\n     * This function will either generate a new `StylingMapArray` instance\n     * or it will patch the provided `newValues` map value into an\n     * existing `StylingMapArray` value (this only happens if `bindingValue`\n     * is an instance of `StylingMapArray`).\n     *\n     * If a new key/value map is provided with an old `StylingMapArray`\n     * value then all properties will be overwritten with their new\n     * values or with `null`. This means that the array will never\n     * shrink in size (but it will also not be created and thrown\n     * away whenever the `{key:value}` map entries change).\n     */\n    function normalizeIntoStylingMap(bindingValue, newValues, normalizeProps) {\n        var stylingMapArr = Array.isArray(bindingValue) ? bindingValue : allocStylingMapArray(null);\n        stylingMapArr[0 /* RawValuePosition */] = newValues;\n        // because the new values may not include all the properties\n        // that the old ones had, all values are set to `null` before\n        // the new values are applied. This way, when flushed, the\n        // styling algorithm knows exactly what style/class values\n        // to remove from the element (since they are `null`).\n        for (var j = 1 /* ValuesStartPosition */; j < stylingMapArr.length; j += 2 /* TupleSize */) {\n            setMapValue(stylingMapArr, j, null);\n        }\n        var props = null;\n        var map;\n        var allValuesTrue = false;\n        if (typeof newValues === 'string') { // [class] bindings allow string values\n            props = splitOnWhitespace(newValues);\n            allValuesTrue = props !== null;\n        }\n        else {\n            props = newValues ? Object.keys(newValues) : null;\n            map = newValues;\n        }\n        if (props) {\n            for (var i = 0; i < props.length; i++) {\n                var prop = props[i];\n                var newProp = normalizeProps ? hyphenate(prop) : prop;\n                var value = allValuesTrue ? true : map[prop];\n                addItemToStylingMap(stylingMapArr, newProp, value, true);\n            }\n        }\n        return stylingMapArr;\n    }\n    function splitOnWhitespace(text) {\n        var array = null;\n        var length = text.length;\n        var start = 0;\n        var foundChar = false;\n        for (var i = 0; i < length; i++) {\n            var char = text.charCodeAt(i);\n            if (char <= 32 /*' '*/) {\n                if (foundChar) {\n                    if (array === null)\n                        array = [];\n                    array.push(text.substring(start, i));\n                    foundChar = false;\n                }\n                start = i + 1;\n            }\n            else {\n                foundChar = true;\n            }\n        }\n        if (foundChar) {\n            if (array === null)\n                array = [];\n            array.push(text.substring(start, length));\n            foundChar = false;\n        }\n        return array;\n    }\n    // TODO (matsko|AndrewKushnir): refactor this once we figure out how to generate separate\n    // `input('class') + classMap()` instructions.\n    function selectClassBasedInputName(inputs) {\n        return inputs.hasOwnProperty('class') ? 'class' : 'className';\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Defines if the call to `inject` should include `viewProviders` in its resolution.\n     *\n     * This is set to true when we try to instantiate a component. This value is reset in\n     * `getNodeInjectable` to a value which matches the declaration location of the token about to be\n     * instantiated. This is done so that if we are injecting a token which was declared outside of\n     * `viewProviders` we don't accidentally pull `viewProviders` in.\n     *\n     * Example:\n     *\n     * ```\n     * @Injectable()\n     * class MyService {\n     *   constructor(public value: String) {}\n     * }\n     *\n     * @Component({\n     *   providers: [\n     *     MyService,\n     *     {provide: String, value: 'providers' }\n     *   ]\n     *   viewProviders: [\n     *     {provide: String, value: 'viewProviders'}\n     *   ]\n     * })\n     * class MyComponent {\n     *   constructor(myService: MyService, value: String) {\n     *     // We expect that Component can see into `viewProviders`.\n     *     expect(value).toEqual('viewProviders');\n     *     // `MyService` was not declared in `viewProviders` hence it can't see it.\n     *     expect(myService.value).toEqual('providers');\n     *   }\n     * }\n     *\n     * ```\n     */\n    var includeViewProviders = true;\n    function setIncludeViewProviders(v) {\n        var oldValue = includeViewProviders;\n        includeViewProviders = v;\n        return oldValue;\n    }\n    /**\n     * The number of slots in each bloom filter (used by DI). The larger this number, the fewer\n     * directives that will share slots, and thus, the fewer false positives when checking for\n     * the existence of a directive.\n     */\n    var BLOOM_SIZE = 256;\n    var BLOOM_MASK = BLOOM_SIZE - 1;\n    /** Counter used to generate unique IDs for directives. */\n    var nextNgElementId = 0;\n    /**\n     * Registers this directive as present in its node's injector by flipping the directive's\n     * corresponding bit in the injector's bloom filter.\n     *\n     * @param injectorIndex The index of the node injector where this token should be registered\n     * @param tView The TView for the injector's bloom filters\n     * @param type The directive token to register\n     */\n    function bloomAdd(injectorIndex, tView, type) {\n        ngDevMode && assertEqual(tView.firstCreatePass, true, 'expected firstCreatePass to be true');\n        var id = typeof type !== 'string' ? type[NG_ELEMENT_ID] : type.charCodeAt(0) || 0;\n        // Set a unique ID on the directive type, so if something tries to inject the directive,\n        // we can easily retrieve the ID and hash it into the bloom bit that should be checked.\n        if (id == null) {\n            id = type[NG_ELEMENT_ID] = nextNgElementId++;\n        }\n        // We only have BLOOM_SIZE (256) slots in our bloom filter (8 buckets * 32 bits each),\n        // so all unique IDs must be modulo-ed into a number from 0 - 255 to fit into the filter.\n        var bloomBit = id & BLOOM_MASK;\n        // Create a mask that targets the specific bit associated with the directive.\n        // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\n        // to bit positions 0 - 31 in a 32 bit integer.\n        var mask = 1 << bloomBit;\n        // Use the raw bloomBit number to determine which bloom filter bucket we should check\n        // e.g: bf0 = [0 - 31], bf1 = [32 - 63], bf2 = [64 - 95], bf3 = [96 - 127], etc\n        var b7 = bloomBit & 0x80;\n        var b6 = bloomBit & 0x40;\n        var b5 = bloomBit & 0x20;\n        var tData = tView.data;\n        if (b7) {\n            b6 ? (b5 ? (tData[injectorIndex + 7] |= mask) : (tData[injectorIndex + 6] |= mask)) :\n                (b5 ? (tData[injectorIndex + 5] |= mask) : (tData[injectorIndex + 4] |= mask));\n        }\n        else {\n            b6 ? (b5 ? (tData[injectorIndex + 3] |= mask) : (tData[injectorIndex + 2] |= mask)) :\n                (b5 ? (tData[injectorIndex + 1] |= mask) : (tData[injectorIndex] |= mask));\n        }\n    }\n    /**\n     * Creates (or gets an existing) injector for a given element or container.\n     *\n     * @param tNode for which an injector should be retrieved / created.\n     * @param hostView View where the node is stored\n     * @returns Node injector\n     */\n    function getOrCreateNodeInjectorForNode(tNode, hostView) {\n        var existingInjectorIndex = getInjectorIndex(tNode, hostView);\n        if (existingInjectorIndex !== -1) {\n            return existingInjectorIndex;\n        }\n        var tView = hostView[TVIEW];\n        if (tView.firstCreatePass) {\n            tNode.injectorIndex = hostView.length;\n            insertBloom(tView.data, tNode); // foundation for node bloom\n            insertBloom(hostView, null); // foundation for cumulative bloom\n            insertBloom(tView.blueprint, null);\n        }\n        var parentLoc = getParentInjectorLocation(tNode, hostView);\n        var injectorIndex = tNode.injectorIndex;\n        // If a parent injector can't be found, its location is set to -1.\n        // In that case, we don't need to set up a cumulative bloom\n        if (hasParentInjector(parentLoc)) {\n            var parentIndex = getParentInjectorIndex(parentLoc);\n            var parentLView = getParentInjectorView(parentLoc, hostView);\n            var parentData = parentLView[TVIEW].data;\n            // Creates a cumulative bloom filter that merges the parent's bloom filter\n            // and its own cumulative bloom (which contains tokens for all ancestors)\n            for (var i = 0; i < 8; i++) {\n                hostView[injectorIndex + i] = parentLView[parentIndex + i] | parentData[parentIndex + i];\n            }\n        }\n        hostView[injectorIndex + PARENT_INJECTOR] = parentLoc;\n        return injectorIndex;\n    }\n    function insertBloom(arr, footer) {\n        arr.push(0, 0, 0, 0, 0, 0, 0, 0, footer);\n    }\n    function getInjectorIndex(tNode, hostView) {\n        if (tNode.injectorIndex === -1 ||\n            // If the injector index is the same as its parent's injector index, then the index has been\n            // copied down from the parent node. No injector has been created yet on this node.\n            (tNode.parent && tNode.parent.injectorIndex === tNode.injectorIndex) ||\n            // After the first template pass, the injector index might exist but the parent values\n            // might not have been calculated yet for this instance\n            hostView[tNode.injectorIndex + PARENT_INJECTOR] == null) {\n            return -1;\n        }\n        else {\n            return tNode.injectorIndex;\n        }\n    }\n    /**\n     * Finds the index of the parent injector, with a view offset if applicable. Used to set the\n     * parent injector initially.\n     *\n     * Returns a combination of number of `ViewData` we have to go up and index in that `Viewdata`\n     */\n    function getParentInjectorLocation(tNode, view) {\n        if (tNode.parent && tNode.parent.injectorIndex !== -1) {\n            return tNode.parent.injectorIndex; // ViewOffset is 0\n        }\n        // For most cases, the parent injector index can be found on the host node (e.g. for component\n        // or container), so this loop will be skipped, but we must keep the loop here to support\n        // the rarer case of deeply nested <ng-template> tags or inline views.\n        var hostTNode = view[T_HOST];\n        var viewOffset = 1;\n        while (hostTNode && hostTNode.injectorIndex === -1) {\n            view = view[DECLARATION_VIEW];\n            hostTNode = view ? view[T_HOST] : null;\n            viewOffset++;\n        }\n        return hostTNode ?\n            hostTNode.injectorIndex | (viewOffset << 16 /* ViewOffsetShift */) :\n            -1;\n    }\n    /**\n     * Makes a type or an injection token public to the DI system by adding it to an\n     * injector's bloom filter.\n     *\n     * @param di The node injector in which a directive will be added\n     * @param token The type or the injection token to be made public\n     */\n    function diPublicInInjector(injectorIndex, tView, token) {\n        bloomAdd(injectorIndex, tView, token);\n    }\n    /**\n     * Inject static attribute value into directive constructor.\n     *\n     * This method is used with `factory` functions which are generated as part of\n     * `defineDirective` or `defineComponent`. The method retrieves the static value\n     * of an attribute. (Dynamic attributes are not supported since they are not resolved\n     *  at the time of injection and can change over time.)\n     *\n     * # Example\n     * Given:\n     * ```\n     * @Component(...)\n     * class MyComponent {\n     *   constructor(@Attribute('title') title: string) { ... }\n     * }\n     * ```\n     * When instantiated with\n     * ```\n     * <my-component title=\"Hello\"></my-component>\n     * ```\n     *\n     * Then factory method generated is:\n     * ```\n     * MyComponent.ɵcmp = defineComponent({\n     *   factory: () => new MyComponent(injectAttribute('title'))\n     *   ...\n     * })\n     * ```\n     *\n     * @publicApi\n     */\n    function injectAttributeImpl(tNode, attrNameToInject) {\n        ngDevMode && assertNodeOfPossibleTypes(tNode, 0 /* Container */, 3 /* Element */, 4 /* ElementContainer */);\n        ngDevMode && assertDefined(tNode, 'expecting tNode');\n        if (attrNameToInject === 'class') {\n            return getInitialStylingValue(tNode.classes);\n        }\n        if (attrNameToInject === 'style') {\n            return getInitialStylingValue(tNode.styles);\n        }\n        var attrs = tNode.attrs;\n        if (attrs) {\n            var attrsLength = attrs.length;\n            var i = 0;\n            while (i < attrsLength) {\n                var value = attrs[i];\n                // If we hit a `Bindings` or `Template` marker then we are done.\n                if (isNameOnlyAttributeMarker(value))\n                    break;\n                // Skip namespaced attributes\n                if (value === 0 /* NamespaceURI */) {\n                    // we skip the next two values\n                    // as namespaced attributes looks like\n                    // [..., AttributeMarker.NamespaceURI, 'http://someuri.com/test', 'test:exist',\n                    // 'existValue', ...]\n                    i = i + 2;\n                }\n                else if (typeof value === 'number') {\n                    // Skip to the first value of the marked attribute.\n                    i++;\n                    while (i < attrsLength && typeof attrs[i] === 'string') {\n                        i++;\n                    }\n                }\n                else if (value === attrNameToInject) {\n                    return attrs[i + 1];\n                }\n                else {\n                    i = i + 2;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Returns the value associated to the given token from the NodeInjectors => ModuleInjector.\n     *\n     * Look for the injector providing the token by walking up the node injector tree and then\n     * the module injector tree.\n     *\n     * This function patches `token` with `__NG_ELEMENT_ID__` which contains the id for the bloom\n     * filter. Negative values are reserved for special objects.\n     *   - `-1` is reserved for injecting `Injector` (implemented by `NodeInjector`)\n     *\n     * @param tNode The Node where the search for the injector should start\n     * @param lView The `LView` that contains the `tNode`\n     * @param token The token to look for\n     * @param flags Injection flags\n     * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`\n     * @returns the value from the injector, `null` when not found, or `notFoundValue` if provided\n     */\n    function getOrCreateInjectable(tNode, lView, token, flags, notFoundValue) {\n        if (flags === void 0) { flags = exports.InjectFlags.Default; }\n        if (tNode !== null) {\n            var bloomHash = bloomHashBitOrFactory(token);\n            // If the ID stored here is a function, this is a special object like ElementRef or TemplateRef\n            // so just call the factory function to create it.\n            if (typeof bloomHash === 'function') {\n                enterDI(lView, tNode);\n                try {\n                    var value = bloomHash();\n                    if (value == null && !(flags & exports.InjectFlags.Optional)) {\n                        throw new Error(\"No provider for \" + stringifyForError(token) + \"!\");\n                    }\n                    else {\n                        return value;\n                    }\n                }\n                finally {\n                    leaveDI();\n                }\n            }\n            else if (typeof bloomHash == 'number') {\n                if (bloomHash === -1) {\n                    // `-1` is a special value used to identify `Injector` types.\n                    return new NodeInjector(tNode, lView);\n                }\n                // If the token has a bloom hash, then it is a token which could be in NodeInjector.\n                // A reference to the previous injector TView that was found while climbing the element\n                // injector tree. This is used to know if viewProviders can be accessed on the current\n                // injector.\n                var previousTView = null;\n                var injectorIndex = getInjectorIndex(tNode, lView);\n                var parentLocation = NO_PARENT_INJECTOR;\n                var hostTElementNode = flags & exports.InjectFlags.Host ? lView[DECLARATION_COMPONENT_VIEW][T_HOST] : null;\n                // If we should skip this injector, or if there is no injector on this node, start by\n                // searching\n                // the parent injector.\n                if (injectorIndex === -1 || flags & exports.InjectFlags.SkipSelf) {\n                    parentLocation = injectorIndex === -1 ? getParentInjectorLocation(tNode, lView) :\n                        lView[injectorIndex + PARENT_INJECTOR];\n                    if (!shouldSearchParent(flags, false)) {\n                        injectorIndex = -1;\n                    }\n                    else {\n                        previousTView = lView[TVIEW];\n                        injectorIndex = getParentInjectorIndex(parentLocation);\n                        lView = getParentInjectorView(parentLocation, lView);\n                    }\n                }\n                // Traverse up the injector tree until we find a potential match or until we know there\n                // *isn't* a match.\n                while (injectorIndex !== -1) {\n                    parentLocation = lView[injectorIndex + PARENT_INJECTOR];\n                    // Check the current injector. If it matches, see if it contains token.\n                    var tView = lView[TVIEW];\n                    if (bloomHasToken(bloomHash, injectorIndex, tView.data)) {\n                        // At this point, we have an injector which *may* contain the token, so we step through\n                        // the providers and directives associated with the injector's corresponding node to get\n                        // the instance.\n                        var instance = searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode);\n                        if (instance !== NOT_FOUND) {\n                            return instance;\n                        }\n                    }\n                    if (shouldSearchParent(flags, lView[TVIEW].data[injectorIndex + TNODE] === hostTElementNode) &&\n                        bloomHasToken(bloomHash, injectorIndex, lView)) {\n                        // The def wasn't found anywhere on this node, so it was a false positive.\n                        // Traverse up the tree and continue searching.\n                        previousTView = tView;\n                        injectorIndex = getParentInjectorIndex(parentLocation);\n                        lView = getParentInjectorView(parentLocation, lView);\n                    }\n                    else {\n                        // If we should not search parent OR If the ancestor bloom filter value does not have the\n                        // bit corresponding to the directive we can give up on traversing up to find the specific\n                        // injector.\n                        injectorIndex = -1;\n                    }\n                }\n            }\n        }\n        if (flags & exports.InjectFlags.Optional && notFoundValue === undefined) {\n            // This must be set or the NullInjector will throw for optional deps\n            notFoundValue = null;\n        }\n        if ((flags & (exports.InjectFlags.Self | exports.InjectFlags.Host)) === 0) {\n            var moduleInjector = lView[INJECTOR$1];\n            // switch to `injectInjectorOnly` implementation for module injector, since module injector\n            // should not have access to Component/Directive DI scope (that may happen through\n            // `directiveInject` implementation)\n            var previousInjectImplementation = setInjectImplementation(undefined);\n            try {\n                if (moduleInjector) {\n                    return moduleInjector.get(token, notFoundValue, flags & exports.InjectFlags.Optional);\n                }\n                else {\n                    return injectRootLimpMode(token, notFoundValue, flags & exports.InjectFlags.Optional);\n                }\n            }\n            finally {\n                setInjectImplementation(previousInjectImplementation);\n            }\n        }\n        if (flags & exports.InjectFlags.Optional) {\n            return notFoundValue;\n        }\n        else {\n            throw new Error(\"NodeInjector: NOT_FOUND [\" + stringifyForError(token) + \"]\");\n        }\n    }\n    var NOT_FOUND = {};\n    function searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode) {\n        var currentTView = lView[TVIEW];\n        var tNode = currentTView.data[injectorIndex + TNODE];\n        // First, we need to determine if view providers can be accessed by the starting element.\n        // There are two possibities\n        var canAccessViewProviders = previousTView == null ?\n            // 1) This is the first invocation `previousTView == null` which means that we are at the\n            // `TNode` of where injector is starting to look. In such a case the only time we are allowed\n            // to look into the ViewProviders is if:\n            // - we are on a component\n            // - AND the injector set `includeViewProviders` to true (implying that the token can see\n            // ViewProviders because it is the Component or a Service which itself was declared in\n            // ViewProviders)\n            (isComponentHost(tNode) && includeViewProviders) :\n            // 2) `previousTView != null` which means that we are now walking across the parent nodes.\n            // In such a case we are only allowed to look into the ViewProviders if:\n            // - We just crossed from child View to Parent View `previousTView != currentTView`\n            // - AND the parent TNode is an Element.\n            // This means that we just came from the Component's View and therefore are allowed to see\n            // into the ViewProviders.\n            (previousTView != currentTView && (tNode.type === 3 /* Element */));\n        // This special case happens when there is a @host on the inject and when we are searching\n        // on the host element node.\n        var isHostSpecialCase = (flags & exports.InjectFlags.Host) && hostTElementNode === tNode;\n        var injectableIdx = locateDirectiveOrProvider(tNode, currentTView, token, canAccessViewProviders, isHostSpecialCase);\n        if (injectableIdx !== null) {\n            return getNodeInjectable(lView, currentTView, injectableIdx, tNode);\n        }\n        else {\n            return NOT_FOUND;\n        }\n    }\n    /**\n     * Searches for the given token among the node's directives and providers.\n     *\n     * @param tNode TNode on which directives are present.\n     * @param tView The tView we are currently processing\n     * @param token Provider token or type of a directive to look for.\n     * @param canAccessViewProviders Whether view providers should be considered.\n     * @param isHostSpecialCase Whether the host special case applies.\n     * @returns Index of a found directive or provider, or null when none found.\n     */\n    function locateDirectiveOrProvider(tNode, tView, token, canAccessViewProviders, isHostSpecialCase) {\n        var nodeProviderIndexes = tNode.providerIndexes;\n        var tInjectables = tView.data;\n        var injectablesStart = nodeProviderIndexes & 65535 /* ProvidersStartIndexMask */;\n        var directivesStart = tNode.directiveStart;\n        var directiveEnd = tNode.directiveEnd;\n        var cptViewProvidersCount = nodeProviderIndexes >> 16 /* CptViewProvidersCountShift */;\n        var startingIndex = canAccessViewProviders ? injectablesStart : injectablesStart + cptViewProvidersCount;\n        // When the host special case applies, only the viewProviders and the component are visible\n        var endIndex = isHostSpecialCase ? injectablesStart + cptViewProvidersCount : directiveEnd;\n        for (var i = startingIndex; i < endIndex; i++) {\n            var providerTokenOrDef = tInjectables[i];\n            if (i < directivesStart && token === providerTokenOrDef ||\n                i >= directivesStart && providerTokenOrDef.type === token) {\n                return i;\n            }\n        }\n        if (isHostSpecialCase) {\n            var dirDef = tInjectables[directivesStart];\n            if (dirDef && isComponentDef(dirDef) && dirDef.type === token) {\n                return directivesStart;\n            }\n        }\n        return null;\n    }\n    /**\n    * Retrieve or instantiate the injectable from the `LView` at particular `index`.\n    *\n    * This function checks to see if the value has already been instantiated and if so returns the\n    * cached `injectable`. Otherwise if it detects that the value is still a factory it\n    * instantiates the `injectable` and caches the value.\n    */\n    function getNodeInjectable(lView, tView, index, tNode) {\n        var value = lView[index];\n        var tData = tView.data;\n        if (isFactory(value)) {\n            var factory = value;\n            if (factory.resolving) {\n                throw new Error(\"Circular dep for \" + stringifyForError(tData[index]));\n            }\n            var previousIncludeViewProviders = setIncludeViewProviders(factory.canSeeViewProviders);\n            factory.resolving = true;\n            var previousInjectImplementation = void 0;\n            if (factory.injectImpl) {\n                previousInjectImplementation = setInjectImplementation(factory.injectImpl);\n            }\n            enterDI(lView, tNode);\n            try {\n                value = lView[index] = factory.factory(undefined, tData, lView, tNode);\n                // This code path is hit for both directives and providers.\n                // For perf reasons, we want to avoid searching for hooks on providers.\n                // It does no harm to try (the hooks just won't exist), but the extra\n                // checks are unnecessary and this is a hot path. So we check to see\n                // if the index of the dependency is in the directive range for this\n                // tNode. If it's not, we know it's a provider and skip hook registration.\n                if (tView.firstCreatePass && index >= tNode.directiveStart) {\n                    ngDevMode && assertDirectiveDef(tData[index]);\n                    registerPreOrderHooks(index, tData[index], tView);\n                }\n            }\n            finally {\n                if (factory.injectImpl)\n                    setInjectImplementation(previousInjectImplementation);\n                setIncludeViewProviders(previousIncludeViewProviders);\n                factory.resolving = false;\n                leaveDI();\n            }\n        }\n        return value;\n    }\n    /**\n     * Returns the bit in an injector's bloom filter that should be used to determine whether or not\n     * the directive might be provided by the injector.\n     *\n     * When a directive is public, it is added to the bloom filter and given a unique ID that can be\n     * retrieved on the Type. When the directive isn't public or the token is not a directive `null`\n     * is returned as the node injector can not possibly provide that token.\n     *\n     * @param token the injection token\n     * @returns the matching bit to check in the bloom filter or `null` if the token is not known.\n     *   When the returned value is negative then it represents special values such as `Injector`.\n     */\n    function bloomHashBitOrFactory(token) {\n        ngDevMode && assertDefined(token, 'token must be defined');\n        if (typeof token === 'string') {\n            return token.charCodeAt(0) || 0;\n        }\n        var tokenId = token[NG_ELEMENT_ID];\n        // Negative token IDs are used for special objects such as `Injector`\n        return (typeof tokenId === 'number' && tokenId > 0) ? tokenId & BLOOM_MASK : tokenId;\n    }\n    function bloomHasToken(bloomHash, injectorIndex, injectorView) {\n        // Create a mask that targets the specific bit associated with the directive we're looking for.\n        // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\n        // to bit positions 0 - 31 in a 32 bit integer.\n        var mask = 1 << bloomHash;\n        var b7 = bloomHash & 0x80;\n        var b6 = bloomHash & 0x40;\n        var b5 = bloomHash & 0x20;\n        // Our bloom filter size is 256 bits, which is eight 32-bit bloom filter buckets:\n        // bf0 = [0 - 31], bf1 = [32 - 63], bf2 = [64 - 95], bf3 = [96 - 127], etc.\n        // Get the bloom filter value from the appropriate bucket based on the directive's bloomBit.\n        var value;\n        if (b7) {\n            value = b6 ? (b5 ? injectorView[injectorIndex + 7] : injectorView[injectorIndex + 6]) :\n                (b5 ? injectorView[injectorIndex + 5] : injectorView[injectorIndex + 4]);\n        }\n        else {\n            value = b6 ? (b5 ? injectorView[injectorIndex + 3] : injectorView[injectorIndex + 2]) :\n                (b5 ? injectorView[injectorIndex + 1] : injectorView[injectorIndex]);\n        }\n        // If the bloom filter value has the bit corresponding to the directive's bloomBit flipped on,\n        // this injector is a potential match.\n        return !!(value & mask);\n    }\n    /** Returns true if flags prevent parent injector from being searched for tokens */\n    function shouldSearchParent(flags, isFirstHostTNode) {\n        return !(flags & exports.InjectFlags.Self) && !(flags & exports.InjectFlags.Host && isFirstHostTNode);\n    }\n    var NodeInjector = /** @class */ (function () {\n        function NodeInjector(_tNode, _lView) {\n            this._tNode = _tNode;\n            this._lView = _lView;\n        }\n        NodeInjector.prototype.get = function (token, notFoundValue) {\n            return getOrCreateInjectable(this._tNode, this._lView, token, undefined, notFoundValue);\n        };\n        return NodeInjector;\n    }());\n    /**\n     * @codeGenApi\n     */\n    function ɵɵgetFactoryOf(type) {\n        var typeAny = type;\n        if (isForwardRef(type)) {\n            return (function () {\n                var factory = ɵɵgetFactoryOf(resolveForwardRef(typeAny));\n                return factory ? factory() : null;\n            });\n        }\n        var factory = getFactoryDef(typeAny);\n        if (factory === null) {\n            var injectorDef = getInjectorDef(typeAny);\n            factory = injectorDef && injectorDef.factory;\n        }\n        return factory || null;\n    }\n    /**\n     * @codeGenApi\n     */\n    function ɵɵgetInheritedFactory(type) {\n        var proto = Object.getPrototypeOf(type.prototype).constructor;\n        var factory = proto[NG_FACTORY_DEF] || ɵɵgetFactoryOf(proto);\n        if (factory !== null) {\n            return factory;\n        }\n        else {\n            // There is no factory defined. Either this was improper usage of inheritance\n            // (no Angular decorator on the superclass) or there is no constructor at all\n            // in the inheritance chain. Since the two cases cannot be distinguished, the\n            // latter has to be assumed.\n            return function (t) { return new t(); };\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var ERROR_TYPE = 'ngType';\n    var ERROR_DEBUG_CONTEXT = 'ngDebugContext';\n    var ERROR_ORIGINAL_ERROR = 'ngOriginalError';\n    var ERROR_LOGGER = 'ngErrorLogger';\n    function wrappedError(message, originalError) {\n        var msg = message + \" caused by: \" + (originalError instanceof Error ? originalError.message : originalError);\n        var error = Error(msg);\n        error[ERROR_ORIGINAL_ERROR] = originalError;\n        return error;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function getType(error) {\n        return error[ERROR_TYPE];\n    }\n    function getDebugContext(error) {\n        return error[ERROR_DEBUG_CONTEXT];\n    }\n    function getOriginalError(error) {\n        return error[ERROR_ORIGINAL_ERROR];\n    }\n    function getErrorLogger(error) {\n        return error[ERROR_LOGGER] || defaultErrorLogger;\n    }\n    function defaultErrorLogger(console) {\n        var values = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            values[_i - 1] = arguments[_i];\n        }\n        console.error.apply(console, __spread(values));\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Provides a hook for centralized exception handling.\n     *\n     * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n     * intercept error handling, write a custom exception handler that replaces this default as\n     * appropriate for your app.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```\n     * class MyErrorHandler implements ErrorHandler {\n     *   handleError(error) {\n     *     // do something with the exception\n     *   }\n     * }\n     *\n     * @NgModule({\n     *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n     * })\n     * class MyModule {}\n     * ```\n     *\n     * @publicApi\n     */\n    var ErrorHandler = /** @class */ (function () {\n        function ErrorHandler() {\n            /**\n             * @internal\n             */\n            this._console = console;\n        }\n        ErrorHandler.prototype.handleError = function (error) {\n            var originalError = this._findOriginalError(error);\n            var context = this._findContext(error);\n            // Note: Browser consoles show the place from where console.error was called.\n            // We can use this to give users additional information about the error.\n            var errorLogger = getErrorLogger(error);\n            errorLogger(this._console, \"ERROR\", error);\n            if (originalError) {\n                errorLogger(this._console, \"ORIGINAL ERROR\", originalError);\n            }\n            if (context) {\n                errorLogger(this._console, 'ERROR CONTEXT', context);\n            }\n        };\n        /** @internal */\n        ErrorHandler.prototype._findContext = function (error) {\n            if (error) {\n                return getDebugContext(error) ? getDebugContext(error) :\n                    this._findContext(getOriginalError(error));\n            }\n            return null;\n        };\n        /** @internal */\n        ErrorHandler.prototype._findOriginalError = function (error) {\n            var e = getOriginalError(error);\n            while (e && getOriginalError(e)) {\n                e = getOriginalError(e);\n            }\n            return e;\n        };\n        return ErrorHandler;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Defines a schema that allows an NgModule to contain the following:\n     * - Non-Angular elements named with dash case (`-`).\n     * - Element properties named with dash case (`-`).\n     * Dash case is the naming convention for custom elements.\n     *\n     * @publicApi\n     */\n    var CUSTOM_ELEMENTS_SCHEMA = {\n        name: 'custom-elements'\n    };\n    /**\n     * Defines a schema that allows any property on any element.\n     *\n     * @publicApi\n     */\n    var NO_ERRORS_SCHEMA = {\n        name: 'no-errors-schema'\n    };\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * This file is used to control if the default rendering pipeline should be `ViewEngine` or `Ivy`.\n     *\n     * For more information on how to run and debug tests with either Ivy or View Engine (legacy),\n     * please see [BAZEL.md](./docs/BAZEL.md).\n     */\n    var _devMode = true;\n    var _runModeLocked = false;\n    /**\n     * Returns whether Angular is in development mode. After called once,\n     * the value is locked and won't change any more.\n     *\n     * By default, this is true, unless a user calls `enableProdMode` before calling this.\n     *\n     * @publicApi\n     */\n    function isDevMode() {\n        _runModeLocked = true;\n        return _devMode;\n    }\n    /**\n     * Disable Angular's development mode, which turns off assertions and other\n     * checks within the framework.\n     *\n     * One important assertion this disables verifies that a change detection pass\n     * does not result in additional changes to any bindings (also known as\n     * unidirectional data flow).\n     *\n     * @publicApi\n     */\n    function enableProdMode() {\n        if (_runModeLocked) {\n            throw new Error('Cannot enable prod mode after platform setup.');\n        }\n        _devMode = false;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * This helper class is used to get hold of an inert tree of DOM elements containing dirty HTML\n     * that needs sanitizing.\n     * Depending upon browser support we must use one of three strategies for doing this.\n     * Support: Safari 10.x -> XHR strategy\n     * Support: Firefox -> DomParser strategy\n     * Default: InertDocument strategy\n     */\n    var InertBodyHelper = /** @class */ (function () {\n        function InertBodyHelper(defaultDoc) {\n            this.defaultDoc = defaultDoc;\n            this.inertDocument = this.defaultDoc.implementation.createHTMLDocument('sanitization-inert');\n            var inertBodyElement = this.inertDocument.body;\n            if (inertBodyElement == null) {\n                // usually there should be only one body element in the document, but IE doesn't have any, so\n                // we need to create one.\n                var inertHtml = this.inertDocument.createElement('html');\n                this.inertDocument.appendChild(inertHtml);\n                inertBodyElement = this.inertDocument.createElement('body');\n                inertHtml.appendChild(inertBodyElement);\n            }\n            inertBodyElement.innerHTML = '<svg><g onload=\"this.parentNode.remove()\"></g></svg>';\n            if (inertBodyElement.querySelector && !inertBodyElement.querySelector('svg')) {\n                // We just hit the Safari 10.1 bug - which allows JS to run inside the SVG G element\n                // so use the XHR strategy.\n                this.getInertBodyElement = this.getInertBodyElement_XHR;\n                return;\n            }\n            inertBodyElement.innerHTML = '<svg><p><style><img src=\"</style><img src=x onerror=alert(1)//\">';\n            if (inertBodyElement.querySelector && inertBodyElement.querySelector('svg img')) {\n                // We just hit the Firefox bug - which prevents the inner img JS from being sanitized\n                // so use the DOMParser strategy, if it is available.\n                // If the DOMParser is not available then we are not in Firefox (Server/WebWorker?) so we\n                // fall through to the default strategy below.\n                if (isDOMParserAvailable()) {\n                    this.getInertBodyElement = this.getInertBodyElement_DOMParser;\n                    return;\n                }\n            }\n            // None of the bugs were hit so it is safe for us to use the default InertDocument strategy\n            this.getInertBodyElement = this.getInertBodyElement_InertDocument;\n        }\n        /**\n         * Use XHR to create and fill an inert body element (on Safari 10.1)\n         * See\n         * https://github.com/cure53/DOMPurify/blob/a992d3a75031cb8bb032e5ea8399ba972bdf9a65/src/purify.js#L439-L449\n         */\n        InertBodyHelper.prototype.getInertBodyElement_XHR = function (html) {\n            // We add these extra elements to ensure that the rest of the content is parsed as expected\n            // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\n            // `<head>` tag.\n            html = '<body><remove></remove>' + html + '</body>';\n            try {\n                html = encodeURI(html);\n            }\n            catch (_a) {\n                return null;\n            }\n            var xhr = new XMLHttpRequest();\n            xhr.responseType = 'document';\n            xhr.open('GET', 'data:text/html;charset=utf-8,' + html, false);\n            xhr.send(undefined);\n            var body = xhr.response.body;\n            body.removeChild(body.firstChild);\n            return body;\n        };\n        /**\n         * Use DOMParser to create and fill an inert body element (on Firefox)\n         * See https://github.com/cure53/DOMPurify/releases/tag/0.6.7\n         *\n         */\n        InertBodyHelper.prototype.getInertBodyElement_DOMParser = function (html) {\n            // We add these extra elements to ensure that the rest of the content is parsed as expected\n            // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\n            // `<head>` tag.\n            html = '<body><remove></remove>' + html + '</body>';\n            try {\n                var body = new window\n                    .DOMParser()\n                    .parseFromString(html, 'text/html')\n                    .body;\n                body.removeChild(body.firstChild);\n                return body;\n            }\n            catch (_a) {\n                return null;\n            }\n        };\n        /**\n         * Use an HTML5 `template` element, if supported, or an inert body element created via\n         * `createHtmlDocument` to create and fill an inert DOM element.\n         * This is the default sane strategy to use if the browser does not require one of the specialised\n         * strategies above.\n         */\n        InertBodyHelper.prototype.getInertBodyElement_InertDocument = function (html) {\n            // Prefer using <template> element if supported.\n            var templateEl = this.inertDocument.createElement('template');\n            if ('content' in templateEl) {\n                templateEl.innerHTML = html;\n                return templateEl;\n            }\n            // Note that previously we used to do something like `this.inertDocument.body.innerHTML = html`\n            // and we returned the inert `body` node. This was changed, because IE seems to treat setting\n            // `innerHTML` on an inserted element differently, compared to one that hasn't been inserted\n            // yet. In particular, IE appears to split some of the text into multiple text nodes rather\n            // than keeping them in a single one which ends up messing with Ivy's i18n parsing further\n            // down the line. This has been worked around by creating a new inert `body` and using it as\n            // the root node in which we insert the HTML.\n            var inertBody = this.inertDocument.createElement('body');\n            inertBody.innerHTML = html;\n            // Support: IE 9-11 only\n            // strip custom-namespaced attributes on IE<=11\n            if (this.defaultDoc.documentMode) {\n                this.stripCustomNsAttrs(inertBody);\n            }\n            return inertBody;\n        };\n        /**\n         * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'\n         * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g.\n         * 'ns1:xlink:foo').\n         *\n         * This is undesirable since we don't want to allow any of these custom attributes. This method\n         * strips them all.\n         */\n        InertBodyHelper.prototype.stripCustomNsAttrs = function (el) {\n            var elAttrs = el.attributes;\n            // loop backwards so that we can support removals.\n            for (var i = elAttrs.length - 1; 0 < i; i--) {\n                var attrib = elAttrs.item(i);\n                var attrName = attrib.name;\n                if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {\n                    el.removeAttribute(attrName);\n                }\n            }\n            var childNode = el.firstChild;\n            while (childNode) {\n                if (childNode.nodeType === Node.ELEMENT_NODE)\n                    this.stripCustomNsAttrs(childNode);\n                childNode = childNode.nextSibling;\n            }\n        };\n        return InertBodyHelper;\n    }());\n    /**\n     * We need to determine whether the DOMParser exists in the global context.\n     * The try-catch is because, on some browsers, trying to access this property\n     * on window can actually throw an error.\n     *\n     * @suppress {uselessCode}\n     */\n    function isDOMParserAvailable() {\n        try {\n            return !!window.DOMParser;\n        }\n        catch (_a) {\n            return false;\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A pattern that recognizes a commonly useful subset of URLs that are safe.\n     *\n     * This regular expression matches a subset of URLs that will not cause script\n     * execution if used in URL context within a HTML document. Specifically, this\n     * regular expression matches if (comment from here on and regex copied from\n     * Soy's EscapingConventions):\n     * (1) Either an allowed protocol (http, https, mailto or ftp).\n     * (2) or no protocol.  A protocol must be followed by a colon. The below\n     *     allows that by allowing colons only after one of the characters [/?#].\n     *     A colon after a hash (#) must be in the fragment.\n     *     Otherwise, a colon after a (?) must be in a query.\n     *     Otherwise, a colon after a single solidus (/) must be in a path.\n     *     Otherwise, a colon after a double solidus (//) must be in the authority\n     *     (before port).\n     *\n     * The pattern disallows &, used in HTML entity declarations before\n     * one of the characters in [/?#]. This disallows HTML entities used in the\n     * protocol name, which should never happen, e.g. \"h&#116;tp\" for \"http\".\n     * It also disallows HTML entities in the first path part of a relative path,\n     * e.g. \"foo&lt;bar/baz\".  Our existing escaping functions should not produce\n     * that. More importantly, it disallows masking of a colon,\n     * e.g. \"javascript&#58;...\".\n     *\n     * This regular expression was taken from the Closure sanitization library.\n     */\n    var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;\n    /* A pattern that matches safe srcset values */\n    var SAFE_SRCSET_PATTERN = /^(?:(?:https?|file):|[^&:/?#]*(?:[/?#]|$))/gi;\n    /** A pattern that matches safe data URLs. Only matches image, video and audio types. */\n    var DATA_URL_PATTERN = /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\\/]+=*$/i;\n    function _sanitizeUrl(url) {\n        url = String(url);\n        if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN))\n            return url;\n        if (isDevMode()) {\n            console.warn(\"WARNING: sanitizing unsafe URL value \" + url + \" (see http://g.co/ng/security#xss)\");\n        }\n        return 'unsafe:' + url;\n    }\n    function sanitizeSrcset(srcset) {\n        srcset = String(srcset);\n        return srcset.split(',').map(function (srcset) { return _sanitizeUrl(srcset.trim()); }).join(', ');\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function tagSet(tags) {\n        var e_1, _a;\n        var res = {};\n        try {\n            for (var _b = __values(tags.split(',')), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var t = _c.value;\n                res[t] = true;\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return res;\n    }\n    function merge() {\n        var e_2, _a;\n        var sets = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            sets[_i] = arguments[_i];\n        }\n        var res = {};\n        try {\n            for (var sets_1 = __values(sets), sets_1_1 = sets_1.next(); !sets_1_1.done; sets_1_1 = sets_1.next()) {\n                var s = sets_1_1.value;\n                for (var v in s) {\n                    if (s.hasOwnProperty(v))\n                        res[v] = true;\n                }\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (sets_1_1 && !sets_1_1.done && (_a = sets_1.return)) _a.call(sets_1);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n        return res;\n    }\n    // Good source of info about elements and attributes\n    // http://dev.w3.org/html5/spec/Overview.html#semantics\n    // http://simon.html5.org/html-elements\n    // Safe Void Elements - HTML5\n    // http://dev.w3.org/html5/spec/Overview.html#void-elements\n    var VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');\n    // Elements that you can, intentionally, leave open (and which close themselves)\n    // http://dev.w3.org/html5/spec/Overview.html#optional-tags\n    var OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');\n    var OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');\n    var OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);\n    // Safe Block Elements - HTML5\n    var BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' +\n        'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +\n        'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));\n    // Inline Elements - HTML5\n    var INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' +\n        'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' +\n        'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));\n    var VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);\n    // Attributes that have href and hence need to be sanitized\n    var URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');\n    // Attributes that have special href set hence need to be sanitized\n    var SRCSET_ATTRS = tagSet('srcset');\n    var HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' +\n        'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' +\n        'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' +\n        'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' +\n        'valign,value,vspace,width');\n    // Accessibility attributes as per WAI-ARIA 1.1 (W3C Working Draft 14 December 2018)\n    var ARIA_ATTRS = tagSet('aria-activedescendant,aria-atomic,aria-autocomplete,aria-busy,aria-checked,aria-colcount,aria-colindex,' +\n        'aria-colspan,aria-controls,aria-current,aria-describedby,aria-details,aria-disabled,aria-dropeffect,' +\n        'aria-errormessage,aria-expanded,aria-flowto,aria-grabbed,aria-haspopup,aria-hidden,aria-invalid,' +\n        'aria-keyshortcuts,aria-label,aria-labelledby,aria-level,aria-live,aria-modal,aria-multiline,' +\n        'aria-multiselectable,aria-orientation,aria-owns,aria-placeholder,aria-posinset,aria-pressed,aria-readonly,' +\n        'aria-relevant,aria-required,aria-roledescription,aria-rowcount,aria-rowindex,aria-rowspan,aria-selected,' +\n        'aria-setsize,aria-sort,aria-valuemax,aria-valuemin,aria-valuenow,aria-valuetext');\n    // NB: This currently consciously doesn't support SVG. SVG sanitization has had several security\n    // issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via\n    // innerHTML is required, SVG attributes should be added here.\n    // NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those\n    // can be sanitized, but they increase security surface area without a legitimate use case, so they\n    // are left out here.\n    var VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS, ARIA_ATTRS);\n    // Elements whose content should not be traversed/preserved, if the elements themselves are invalid.\n    //\n    // Typically, `<invalid>Some content</invalid>` would traverse (and in this case preserve)\n    // `Some content`, but strip `invalid-element` opening/closing tags. For some elements, though, we\n    // don't want to preserve the content, if the elements themselves are going to be removed.\n    var SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS = tagSet('script,style,template');\n    /**\n     * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe\n     * attributes.\n     */\n    var SanitizingHtmlSerializer = /** @class */ (function () {\n        function SanitizingHtmlSerializer() {\n            // Explicitly track if something was stripped, to avoid accidentally warning of sanitization just\n            // because characters were re-encoded.\n            this.sanitizedSomething = false;\n            this.buf = [];\n        }\n        SanitizingHtmlSerializer.prototype.sanitizeChildren = function (el) {\n            // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.\n            // However this code never accesses properties off of `document` before deleting its contents\n            // again, so it shouldn't be vulnerable to DOM clobbering.\n            var current = el.firstChild;\n            var traverseContent = true;\n            while (current) {\n                if (current.nodeType === Node.ELEMENT_NODE) {\n                    traverseContent = this.startElement(current);\n                }\n                else if (current.nodeType === Node.TEXT_NODE) {\n                    this.chars(current.nodeValue);\n                }\n                else {\n                    // Strip non-element, non-text nodes.\n                    this.sanitizedSomething = true;\n                }\n                if (traverseContent && current.firstChild) {\n                    current = current.firstChild;\n                    continue;\n                }\n                while (current) {\n                    // Leaving the element. Walk up and to the right, closing tags as we go.\n                    if (current.nodeType === Node.ELEMENT_NODE) {\n                        this.endElement(current);\n                    }\n                    var next = this.checkClobberedElement(current, current.nextSibling);\n                    if (next) {\n                        current = next;\n                        break;\n                    }\n                    current = this.checkClobberedElement(current, current.parentNode);\n                }\n            }\n            return this.buf.join('');\n        };\n        /**\n         * Sanitizes an opening element tag (if valid) and returns whether the element's contents should\n         * be traversed. Element content must always be traversed (even if the element itself is not\n         * valid/safe), unless the element is one of `SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS`.\n         *\n         * @param element The element to sanitize.\n         * @return True if the element's contents should be traversed.\n         */\n        SanitizingHtmlSerializer.prototype.startElement = function (element) {\n            var tagName = element.nodeName.toLowerCase();\n            if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\n                this.sanitizedSomething = true;\n                return !SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS.hasOwnProperty(tagName);\n            }\n            this.buf.push('<');\n            this.buf.push(tagName);\n            var elAttrs = element.attributes;\n            for (var i = 0; i < elAttrs.length; i++) {\n                var elAttr = elAttrs.item(i);\n                var attrName = elAttr.name;\n                var lower = attrName.toLowerCase();\n                if (!VALID_ATTRS.hasOwnProperty(lower)) {\n                    this.sanitizedSomething = true;\n                    continue;\n                }\n                var value = elAttr.value;\n                // TODO(martinprobst): Special case image URIs for data:image/...\n                if (URI_ATTRS[lower])\n                    value = _sanitizeUrl(value);\n                if (SRCSET_ATTRS[lower])\n                    value = sanitizeSrcset(value);\n                this.buf.push(' ', attrName, '=\"', encodeEntities(value), '\"');\n            }\n            this.buf.push('>');\n            return true;\n        };\n        SanitizingHtmlSerializer.prototype.endElement = function (current) {\n            var tagName = current.nodeName.toLowerCase();\n            if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {\n                this.buf.push('</');\n                this.buf.push(tagName);\n                this.buf.push('>');\n            }\n        };\n        SanitizingHtmlSerializer.prototype.chars = function (chars) { this.buf.push(encodeEntities(chars)); };\n        SanitizingHtmlSerializer.prototype.checkClobberedElement = function (node, nextNode) {\n            if (nextNode &&\n                (node.compareDocumentPosition(nextNode) &\n                    Node.DOCUMENT_POSITION_CONTAINED_BY) === Node.DOCUMENT_POSITION_CONTAINED_BY) {\n                throw new Error(\"Failed to sanitize html because the element is clobbered: \" + node.outerHTML);\n            }\n            return nextNode;\n        };\n        return SanitizingHtmlSerializer;\n    }());\n    // Regular Expressions for parsing tags and attributes\n    var SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n    // ! to ~ is the ASCII range.\n    var NON_ALPHANUMERIC_REGEXP = /([^\\#-~ |!])/g;\n    /**\n     * Escapes all potentially dangerous characters, so that the\n     * resulting string can be safely inserted into attribute or\n     * element text.\n     * @param value\n     */\n    function encodeEntities(value) {\n        return value.replace(/&/g, '&amp;')\n            .replace(SURROGATE_PAIR_REGEXP, function (match) {\n            var hi = match.charCodeAt(0);\n            var low = match.charCodeAt(1);\n            return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';\n        })\n            .replace(NON_ALPHANUMERIC_REGEXP, function (match) { return '&#' + match.charCodeAt(0) + ';'; })\n            .replace(/</g, '&lt;')\n            .replace(/>/g, '&gt;');\n    }\n    var inertBodyHelper;\n    /**\n     * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to\n     * the DOM in a browser environment.\n     */\n    function _sanitizeHtml(defaultDoc, unsafeHtmlInput) {\n        var inertBodyElement = null;\n        try {\n            inertBodyHelper = inertBodyHelper || new InertBodyHelper(defaultDoc);\n            // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).\n            var unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';\n            inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n            // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser\n            // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.\n            var mXSSAttempts = 5;\n            var parsedHtml = unsafeHtml;\n            do {\n                if (mXSSAttempts === 0) {\n                    throw new Error('Failed to sanitize html because the input is unstable');\n                }\n                mXSSAttempts--;\n                unsafeHtml = parsedHtml;\n                parsedHtml = inertBodyElement.innerHTML;\n                inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n            } while (unsafeHtml !== parsedHtml);\n            var sanitizer = new SanitizingHtmlSerializer();\n            var safeHtml = sanitizer.sanitizeChildren(getTemplateContent(inertBodyElement) || inertBodyElement);\n            if (isDevMode() && sanitizer.sanitizedSomething) {\n                console.warn('WARNING: sanitizing HTML stripped some content, see http://g.co/ng/security#xss');\n            }\n            return safeHtml;\n        }\n        finally {\n            // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.\n            if (inertBodyElement) {\n                var parent_1 = getTemplateContent(inertBodyElement) || inertBodyElement;\n                while (parent_1.firstChild) {\n                    parent_1.removeChild(parent_1.firstChild);\n                }\n            }\n        }\n    }\n    function getTemplateContent(el) {\n        return 'content' in el /** Microsoft/TypeScript#21517 */ && isTemplateElement(el) ?\n            el.content :\n            null;\n    }\n    function isTemplateElement(el) {\n        return el.nodeType === Node.ELEMENT_NODE && el.nodeName === 'TEMPLATE';\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    (function (SecurityContext) {\n        SecurityContext[SecurityContext[\"NONE\"] = 0] = \"NONE\";\n        SecurityContext[SecurityContext[\"HTML\"] = 1] = \"HTML\";\n        SecurityContext[SecurityContext[\"STYLE\"] = 2] = \"STYLE\";\n        SecurityContext[SecurityContext[\"SCRIPT\"] = 3] = \"SCRIPT\";\n        SecurityContext[SecurityContext[\"URL\"] = 4] = \"URL\";\n        SecurityContext[SecurityContext[\"RESOURCE_URL\"] = 5] = \"RESOURCE_URL\";\n    })(exports.SecurityContext || (exports.SecurityContext = {}));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Regular expression for safe style values.\n     *\n     * Quotes (\" and ') are allowed, but a check must be done elsewhere to ensure they're balanced.\n     *\n     * ',' allows multiple values to be assigned to the same property (e.g. background-attachment or\n     * font-family) and hence could allow multiple values to get injected, but that should pose no risk\n     * of XSS.\n     *\n     * The function expression checks only for XSS safety, not for CSS validity.\n     *\n     * This regular expression was taken from the Closure sanitization library, and augmented for\n     * transformation values.\n     */\n    var VALUES = '[-,.\"\\'%_!# a-zA-Z0-9]+';\n    var TRANSFORMATION_FNS = '(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|Z|3d)?';\n    var COLOR_FNS = '(?:rgb|hsl)a?';\n    var GRADIENTS = '(?:repeating-)?(?:linear|radial)-gradient';\n    var CSS3_FNS = '(?:attr|calc|var)';\n    var FN_ARGS = '\\\\([-0-9.%, #a-zA-Z]+\\\\)';\n    var SAFE_STYLE_VALUE = new RegExp(\"^(\" + VALUES + \"|\" +\n        (\"(?:\" + TRANSFORMATION_FNS + \"|\" + COLOR_FNS + \"|\" + GRADIENTS + \"|\" + CSS3_FNS + \")\") +\n        (FN_ARGS + \")$\"), 'g');\n    /**\n     * Matches a `url(...)` value with an arbitrary argument as long as it does\n     * not contain parentheses.\n     *\n     * The URL value still needs to be sanitized separately.\n     *\n     * `url(...)` values are a very common use case, e.g. for `background-image`. With carefully crafted\n     * CSS style rules, it is possible to construct an information leak with `url` values in CSS, e.g.\n     * by observing whether scroll bars are displayed, or character ranges used by a font face\n     * definition.\n     *\n     * Angular only allows binding CSS values (as opposed to entire CSS rules), so it is unlikely that\n     * binding a URL value without further cooperation from the page will cause an information leak, and\n     * if so, it is just a leak, not a full blown XSS vulnerability.\n     *\n     * Given the common use case, low likelihood of attack vector, and low impact of an attack, this\n     * code is permissive and allows URLs that sanitize otherwise.\n     */\n    var URL_RE = /^url\\(([^)]+)\\)$/;\n    /**\n     * Checks that quotes (\" and ') are properly balanced inside a string. Assumes\n     * that neither escape (\\) nor any other character that could result in\n     * breaking out of a string parsing context are allowed;\n     * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.\n     *\n     * This code was taken from the Closure sanitization library.\n     */\n    function hasBalancedQuotes(value) {\n        var outsideSingle = true;\n        var outsideDouble = true;\n        for (var i = 0; i < value.length; i++) {\n            var c = value.charAt(i);\n            if (c === '\\'' && outsideDouble) {\n                outsideSingle = !outsideSingle;\n            }\n            else if (c === '\"' && outsideSingle) {\n                outsideDouble = !outsideDouble;\n            }\n        }\n        return outsideSingle && outsideDouble;\n    }\n    /**\n     * Sanitizes the given untrusted CSS style property value (i.e. not an entire object, just a single\n     * value) and returns a value that is safe to use in a browser environment.\n     */\n    function _sanitizeStyle(value) {\n        value = String(value).trim(); // Make sure it's actually a string.\n        if (!value)\n            return '';\n        // Single url(...) values are supported, but only for URLs that sanitize cleanly. See above for\n        // reasoning behind this.\n        var urlMatch = value.match(URL_RE);\n        if ((urlMatch && _sanitizeUrl(urlMatch[1]) === urlMatch[1]) ||\n            value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {\n            return value; // Safe style values.\n        }\n        if (isDevMode()) {\n            console.warn(\"WARNING: sanitizing unsafe style value \" + value + \" (see http://g.co/ng/security#xss).\");\n        }\n        return 'unsafe';\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * An `html` sanitizer which converts untrusted `html` **string** into trusted string by removing\n     * dangerous content.\n     *\n     * This method parses the `html` and locates potentially dangerous content (such as urls and\n     * javascript) and removes it.\n     *\n     * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustHtml}.\n     *\n     * @param unsafeHtml untrusted `html`, typically from the user.\n     * @returns `html` string which is safe to display to user, because all of the dangerous javascript\n     * and urls have been removed.\n     *\n     * @publicApi\n     */\n    function ɵɵsanitizeHtml(unsafeHtml) {\n        var sanitizer = getSanitizer();\n        if (sanitizer) {\n            return sanitizer.sanitize(exports.SecurityContext.HTML, unsafeHtml) || '';\n        }\n        if (allowSanitizationBypassAndThrow(unsafeHtml, \"HTML\" /* Html */)) {\n            return unwrapSafeValue(unsafeHtml);\n        }\n        return _sanitizeHtml(getDocument(), renderStringify(unsafeHtml));\n    }\n    /**\n     * A `style` sanitizer which converts untrusted `style` **string** into trusted string by removing\n     * dangerous content.\n     *\n     * This method parses the `style` and locates potentially dangerous content (such as urls and\n     * javascript) and removes it.\n     *\n     * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustStyle}.\n     *\n     * @param unsafeStyle untrusted `style`, typically from the user.\n     * @returns `style` string which is safe to bind to the `style` properties, because all of the\n     * dangerous javascript and urls have been removed.\n     *\n     * @publicApi\n     */\n    function ɵɵsanitizeStyle(unsafeStyle) {\n        var sanitizer = getSanitizer();\n        if (sanitizer) {\n            return sanitizer.sanitize(exports.SecurityContext.STYLE, unsafeStyle) || '';\n        }\n        if (allowSanitizationBypassAndThrow(unsafeStyle, \"Style\" /* Style */)) {\n            return unwrapSafeValue(unsafeStyle);\n        }\n        return _sanitizeStyle(renderStringify(unsafeStyle));\n    }\n    /**\n     * A `url` sanitizer which converts untrusted `url` **string** into trusted string by removing\n     * dangerous\n     * content.\n     *\n     * This method parses the `url` and locates potentially dangerous content (such as javascript) and\n     * removes it.\n     *\n     * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustUrl}.\n     *\n     * @param unsafeUrl untrusted `url`, typically from the user.\n     * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n     * all of the dangerous javascript has been removed.\n     *\n     * @publicApi\n     */\n    function ɵɵsanitizeUrl(unsafeUrl) {\n        var sanitizer = getSanitizer();\n        if (sanitizer) {\n            return sanitizer.sanitize(exports.SecurityContext.URL, unsafeUrl) || '';\n        }\n        if (allowSanitizationBypassAndThrow(unsafeUrl, \"URL\" /* Url */)) {\n            return unwrapSafeValue(unsafeUrl);\n        }\n        return _sanitizeUrl(renderStringify(unsafeUrl));\n    }\n    /**\n     * A `url` sanitizer which only lets trusted `url`s through.\n     *\n     * This passes only `url`s marked trusted by calling {@link bypassSanitizationTrustResourceUrl}.\n     *\n     * @param unsafeResourceUrl untrusted `url`, typically from the user.\n     * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n     * only trusted `url`s have been allowed to pass.\n     *\n     * @publicApi\n     */\n    function ɵɵsanitizeResourceUrl(unsafeResourceUrl) {\n        var sanitizer = getSanitizer();\n        if (sanitizer) {\n            return sanitizer.sanitize(exports.SecurityContext.RESOURCE_URL, unsafeResourceUrl) || '';\n        }\n        if (allowSanitizationBypassAndThrow(unsafeResourceUrl, \"ResourceURL\" /* ResourceUrl */)) {\n            return unwrapSafeValue(unsafeResourceUrl);\n        }\n        throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');\n    }\n    /**\n     * A `script` sanitizer which only lets trusted javascript through.\n     *\n     * This passes only `script`s marked trusted by calling {@link\n     * bypassSanitizationTrustScript}.\n     *\n     * @param unsafeScript untrusted `script`, typically from the user.\n     * @returns `url` string which is safe to bind to the `<script>` element such as `<img src>`,\n     * because only trusted `scripts` have been allowed to pass.\n     *\n     * @publicApi\n     */\n    function ɵɵsanitizeScript(unsafeScript) {\n        var sanitizer = getSanitizer();\n        if (sanitizer) {\n            return sanitizer.sanitize(exports.SecurityContext.SCRIPT, unsafeScript) || '';\n        }\n        if (allowSanitizationBypassAndThrow(unsafeScript, \"Script\" /* Script */)) {\n            return unwrapSafeValue(unsafeScript);\n        }\n        throw new Error('unsafe value used in a script context');\n    }\n    /**\n     * Detects which sanitizer to use for URL property, based on tag name and prop name.\n     *\n     * The rules are based on the RESOURCE_URL context config from\n     * `packages/compiler/src/schema/dom_security_schema.ts`.\n     * If tag and prop names don't match Resource URL schema, use URL sanitizer.\n     */\n    function getUrlSanitizer(tag, prop) {\n        if ((prop === 'src' && (tag === 'embed' || tag === 'frame' || tag === 'iframe' ||\n            tag === 'media' || tag === 'script')) ||\n            (prop === 'href' && (tag === 'base' || tag === 'link'))) {\n            return ɵɵsanitizeResourceUrl;\n        }\n        return ɵɵsanitizeUrl;\n    }\n    /**\n     * Sanitizes URL, selecting sanitizer function based on tag and property names.\n     *\n     * This function is used in case we can't define security context at compile time, when only prop\n     * name is available. This happens when we generate host bindings for Directives/Components. The\n     * host element is unknown at compile time, so we defer calculation of specific sanitizer to\n     * runtime.\n     *\n     * @param unsafeUrl untrusted `url`, typically from the user.\n     * @param tag target element tag name.\n     * @param prop name of the property that contains the value.\n     * @returns `url` string which is safe to bind.\n     *\n     * @publicApi\n     */\n    function ɵɵsanitizeUrlOrResourceUrl(unsafeUrl, tag, prop) {\n        return getUrlSanitizer(tag, prop)(unsafeUrl);\n    }\n    /**\n     * The default style sanitizer will handle sanitization for style properties by\n     * sanitizing any CSS property that can include a `url` value (usually image-based properties)\n     *\n     * @publicApi\n     */\n    var ɵɵdefaultStyleSanitizer = function (prop, value, mode) {\n        mode = mode || 3 /* ValidateAndSanitize */;\n        var doSanitizeValue = true;\n        if (mode & 1 /* ValidateProperty */) {\n            doSanitizeValue = prop === 'background-image' || prop === 'background' ||\n                prop === 'border-image' || prop === 'filter' || prop === 'list-style' ||\n                prop === 'list-style-image' || prop === 'clip-path';\n        }\n        if (mode & 2 /* SanitizeOnly */) {\n            return doSanitizeValue ? ɵɵsanitizeStyle(value) : unwrapSafeValue(value);\n        }\n        else {\n            return doSanitizeValue;\n        }\n    };\n    function validateAgainstEventProperties(name) {\n        if (name.toLowerCase().startsWith('on')) {\n            var msg = \"Binding to event property '\" + name + \"' is disallowed for security reasons, \" +\n                (\"please use (\" + name.slice(2) + \")=...\") +\n                (\"\\nIf '\" + name + \"' is a directive input, make sure the directive is imported by the\") +\n                \" current module.\";\n            throw new Error(msg);\n        }\n    }\n    function validateAgainstEventAttributes(name) {\n        if (name.toLowerCase().startsWith('on')) {\n            var msg = \"Binding to event attribute '\" + name + \"' is disallowed for security reasons, \" +\n                (\"please use (\" + name.slice(2) + \")=...\");\n            throw new Error(msg);\n        }\n    }\n    function getSanitizer() {\n        var lView = getLView();\n        return lView && lView[SANITIZER];\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * THIS FILE CONTAINS CODE WHICH SHOULD BE TREE SHAKEN AND NEVER CALLED FROM PRODUCTION CODE!!!\n     */\n    /**\n     * Creates an `Array` construction with a given name. This is useful when\n     * looking for memory consumption to see what time of array it is.\n     *\n     *\n     * @param name Name to give to the constructor\n     * @returns A subclass of `Array` if possible. This can only be done in\n     *          environments which support `class` construct.\n     */\n    function createNamedArrayType(name) {\n        // This should never be called in prod mode, so let's verify that is the case.\n        if (ngDevMode) {\n            try {\n                // We need to do it this way so that TypeScript does not down-level the below code.\n                var FunctionConstructor = createNamedArrayType.constructor;\n                return (new FunctionConstructor('Array', \"return class \" + name + \" extends Array{}\"))(Array);\n            }\n            catch (e) {\n                // If it does not work just give up and fall back to regular Array.\n                return Array;\n            }\n        }\n        else {\n            throw new Error('Looks like we are in \\'prod mode\\', but we are creating a named Array type, which is wrong! Check your code');\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function normalizeDebugBindingName(name) {\n        // Attribute names with `$` (eg `x-y$`) are valid per spec, but unsupported by some browsers\n        name = camelCaseToDashCase(name.replace(/[$@]/g, '_'));\n        return \"ng-reflect-\" + name;\n    }\n    var CAMEL_CASE_REGEXP = /([A-Z])/g;\n    function camelCaseToDashCase(input) {\n        return input.replace(CAMEL_CASE_REGEXP, function () {\n            var m = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                m[_i] = arguments[_i];\n            }\n            return '-' + m[1].toLowerCase();\n        });\n    }\n    function normalizeDebugBindingValue(value) {\n        try {\n            // Limit the size of the value as otherwise the DOM just gets polluted.\n            return value != null ? value.toString().slice(0, 30) : value;\n        }\n        catch (e) {\n            return '[ERROR] Exception while trying to serialize the value';\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * This property will be monkey-patched on elements, components and directives\n     */\n    var MONKEY_PATCH_KEY_NAME = '__ngContext__';\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * For efficiency reasons we often put several different data types (`RNode`, `LView`, `LContainer`)\n     * in same location in `LView`. This is because we don't want to pre-allocate space for it\n     * because the storage is sparse. This file contains utilities for dealing with such data types.\n     *\n     * How do we know what is stored at a given location in `LView`.\n     * - `Array.isArray(value) === false` => `RNode` (The normal storage value)\n     * - `Array.isArray(value) === true` => then the `value[0]` represents the wrapped value.\n     *   - `typeof value[TYPE] === 'object'` => `LView`\n     *      - This happens when we have a component at a given location\n     *   - `typeof value[TYPE] === true` => `LContainer`\n     *      - This happens when we have `LContainer` binding at a given location.\n     *\n     *\n     * NOTE: it is assumed that `Array.isArray` and `typeof` operations are very efficient.\n     */\n    /**\n     * Returns `RNode`.\n     * @param value wrapped value of `RNode`, `LView`, `LContainer`\n     */\n    function unwrapRNode(value) {\n        while (Array.isArray(value)) {\n            value = value[HOST];\n        }\n        return value;\n    }\n    /**\n     * Returns `LView` or `null` if not found.\n     * @param value wrapped value of `RNode`, `LView`, `LContainer`\n     */\n    function unwrapLView(value) {\n        while (Array.isArray(value)) {\n            // This check is same as `isLView()` but we don't call at as we don't want to call\n            // `Array.isArray()` twice and give JITer more work for inlining.\n            if (typeof value[TYPE] === 'object')\n                return value;\n            value = value[HOST];\n        }\n        return null;\n    }\n    /**\n     * Returns `LContainer` or `null` if not found.\n     * @param value wrapped value of `RNode`, `LView`, `LContainer`\n     */\n    function unwrapLContainer(value) {\n        while (Array.isArray(value)) {\n            // This check is same as `isLContainer()` but we don't call at as we don't want to call\n            // `Array.isArray()` twice and give JITer more work for inlining.\n            if (value[TYPE] === true)\n                return value;\n            value = value[HOST];\n        }\n        return null;\n    }\n    /**\n     * Retrieves an element value from the provided `viewData`, by unwrapping\n     * from any containers, component views, or style contexts.\n     */\n    function getNativeByIndex(index, lView) {\n        return unwrapRNode(lView[index + HEADER_OFFSET]);\n    }\n    /**\n     * Retrieve an `RNode` for a given `TNode` and `LView`.\n     *\n     * This function guarantees in dev mode to retrieve a non-null `RNode`.\n     *\n     * @param tNode\n     * @param lView\n     */\n    function getNativeByTNode(tNode, lView) {\n        ngDevMode && assertTNodeForLView(tNode, lView);\n        ngDevMode && assertDataInRange(lView, tNode.index);\n        var node = unwrapRNode(lView[tNode.index]);\n        ngDevMode && !isProceduralRenderer(lView[RENDERER]) && assertDomNode(node);\n        return node;\n    }\n    /**\n     * Retrieve an `RNode` or `null` for a given `TNode` and `LView`.\n     *\n     * Some `TNode`s don't have associated `RNode`s. For example `Projection`\n     *\n     * @param tNode\n     * @param lView\n     */\n    function getNativeByTNodeOrNull(tNode, lView) {\n        var index = tNode.index;\n        if (index !== -1) {\n            ngDevMode && assertTNodeForLView(tNode, lView);\n            var node = unwrapRNode(lView[index]);\n            ngDevMode && node !== null && !isProceduralRenderer(lView[RENDERER]) && assertDomNode(node);\n            return node;\n        }\n        return null;\n    }\n    function getTNode(index, view) {\n        ngDevMode && assertGreaterThan(index, -1, 'wrong index for TNode');\n        ngDevMode && assertLessThan(index, view[TVIEW].data.length, 'wrong index for TNode');\n        return view[TVIEW].data[index + HEADER_OFFSET];\n    }\n    /** Retrieves a value from any `LView` or `TData`. */\n    function load(view, index) {\n        ngDevMode && assertDataInRange(view, index + HEADER_OFFSET);\n        return view[index + HEADER_OFFSET];\n    }\n    function getComponentLViewByIndex(nodeIndex, hostView) {\n        // Could be an LView or an LContainer. If LContainer, unwrap to find LView.\n        ngDevMode && assertDataInRange(hostView, nodeIndex);\n        var slotValue = hostView[nodeIndex];\n        var lView = isLView(slotValue) ? slotValue : slotValue[HOST];\n        return lView;\n    }\n    /**\n     * Returns the monkey-patch value data present on the target (which could be\n     * a component, directive or a DOM node).\n     */\n    function readPatchedData(target) {\n        ngDevMode && assertDefined(target, 'Target expected');\n        return target[MONKEY_PATCH_KEY_NAME] || null;\n    }\n    function readPatchedLView(target) {\n        var value = readPatchedData(target);\n        if (value) {\n            return Array.isArray(value) ? value : value.lView;\n        }\n        return null;\n    }\n    /** Checks whether a given view is in creation mode */\n    function isCreationMode(view) {\n        return (view[FLAGS] & 4 /* CreationMode */) === 4 /* CreationMode */;\n    }\n    /**\n     * Returns a boolean for whether the view is attached to the change detection tree.\n     *\n     * Note: This determines whether a view should be checked, not whether it's inserted\n     * into a container. For that, you'll want `viewAttachedToContainer` below.\n     */\n    function viewAttachedToChangeDetector(view) {\n        return (view[FLAGS] & 128 /* Attached */) === 128 /* Attached */;\n    }\n    /** Returns a boolean for whether the view is attached to a container. */\n    function viewAttachedToContainer(view) {\n        return isLContainer(view[PARENT]);\n    }\n    /** Returns a constant from `TConstants` instance. */\n    function getConstant(consts, index) {\n        return consts === null || index == null ? null : consts[index];\n    }\n    /**\n     * Resets the pre-order hook flags of the view.\n     * @param lView the LView on which the flags are reset\n     */\n    function resetPreOrderHookFlags(lView) {\n        lView[PREORDER_HOOK_FLAGS] = 0;\n    }\n    function getLContainerActiveIndex(lContainer) {\n        return lContainer[ACTIVE_INDEX] >> 1 /* SHIFT */;\n    }\n    function setLContainerActiveIndex(lContainer, index) {\n        lContainer[ACTIVE_INDEX] = index << 1 /* SHIFT */;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Returns the matching `LContext` data for a given DOM node, directive or component instance.\n     *\n     * This function will examine the provided DOM element, component, or directive instance\\'s\n     * monkey-patched property to derive the `LContext` data. Once called then the monkey-patched\n     * value will be that of the newly created `LContext`.\n     *\n     * If the monkey-patched value is the `LView` instance then the context value for that\n     * target will be created and the monkey-patch reference will be updated. Therefore when this\n     * function is called it may mutate the provided element\\'s, component\\'s or any of the associated\n     * directive\\'s monkey-patch values.\n     *\n     * If the monkey-patch value is not detected then the code will walk up the DOM until an element\n     * is found which contains a monkey-patch reference. When that occurs then the provided element\n     * will be updated with a new context (which is then returned). If the monkey-patch value is not\n     * detected for a component/directive instance then it will throw an error (all components and\n     * directives should be automatically monkey-patched by ivy).\n     *\n     * @param target Component, Directive or DOM Node.\n     */\n    function getLContext(target) {\n        var mpValue = readPatchedData(target);\n        if (mpValue) {\n            // only when it's an array is it considered an LView instance\n            // ... otherwise it's an already constructed LContext instance\n            if (Array.isArray(mpValue)) {\n                var lView = mpValue;\n                var nodeIndex = void 0;\n                var component = undefined;\n                var directives = undefined;\n                if (isComponentInstance(target)) {\n                    nodeIndex = findViaComponent(lView, target);\n                    if (nodeIndex == -1) {\n                        throw new Error('The provided component was not found in the application');\n                    }\n                    component = target;\n                }\n                else if (isDirectiveInstance(target)) {\n                    nodeIndex = findViaDirective(lView, target);\n                    if (nodeIndex == -1) {\n                        throw new Error('The provided directive was not found in the application');\n                    }\n                    directives = getDirectivesAtNodeIndex(nodeIndex, lView, false);\n                }\n                else {\n                    nodeIndex = findViaNativeElement(lView, target);\n                    if (nodeIndex == -1) {\n                        return null;\n                    }\n                }\n                // the goal is not to fill the entire context full of data because the lookups\n                // are expensive. Instead, only the target data (the element, component, container, ICU\n                // expression or directive details) are filled into the context. If called multiple times\n                // with different target values then the missing target data will be filled in.\n                var native = unwrapRNode(lView[nodeIndex]);\n                var existingCtx = readPatchedData(native);\n                var context = (existingCtx && !Array.isArray(existingCtx)) ?\n                    existingCtx :\n                    createLContext(lView, nodeIndex, native);\n                // only when the component has been discovered then update the monkey-patch\n                if (component && context.component === undefined) {\n                    context.component = component;\n                    attachPatchData(context.component, context);\n                }\n                // only when the directives have been discovered then update the monkey-patch\n                if (directives && context.directives === undefined) {\n                    context.directives = directives;\n                    for (var i = 0; i < directives.length; i++) {\n                        attachPatchData(directives[i], context);\n                    }\n                }\n                attachPatchData(context.native, context);\n                mpValue = context;\n            }\n        }\n        else {\n            var rElement = target;\n            ngDevMode && assertDomNode(rElement);\n            // if the context is not found then we need to traverse upwards up the DOM\n            // to find the nearest element that has already been monkey patched with data\n            var parent_1 = rElement;\n            while (parent_1 = parent_1.parentNode) {\n                var parentContext = readPatchedData(parent_1);\n                if (parentContext) {\n                    var lView = void 0;\n                    if (Array.isArray(parentContext)) {\n                        lView = parentContext;\n                    }\n                    else {\n                        lView = parentContext.lView;\n                    }\n                    // the edge of the app was also reached here through another means\n                    // (maybe because the DOM was changed manually).\n                    if (!lView) {\n                        return null;\n                    }\n                    var index = findViaNativeElement(lView, rElement);\n                    if (index >= 0) {\n                        var native = unwrapRNode(lView[index]);\n                        var context = createLContext(lView, index, native);\n                        attachPatchData(native, context);\n                        mpValue = context;\n                        break;\n                    }\n                }\n            }\n        }\n        return mpValue || null;\n    }\n    /**\n     * Creates an empty instance of a `LContext` context\n     */\n    function createLContext(lView, nodeIndex, native) {\n        return {\n            lView: lView,\n            nodeIndex: nodeIndex,\n            native: native,\n            component: undefined,\n            directives: undefined,\n            localRefs: undefined,\n        };\n    }\n    /**\n     * Takes a component instance and returns the view for that component.\n     *\n     * @param componentInstance\n     * @returns The component's view\n     */\n    function getComponentViewByInstance(componentInstance) {\n        var lView = readPatchedData(componentInstance);\n        var view;\n        if (Array.isArray(lView)) {\n            var nodeIndex = findViaComponent(lView, componentInstance);\n            view = getComponentLViewByIndex(nodeIndex, lView);\n            var context = createLContext(lView, nodeIndex, view[HOST]);\n            context.component = componentInstance;\n            attachPatchData(componentInstance, context);\n            attachPatchData(context.native, context);\n        }\n        else {\n            var context = lView;\n            view = getComponentLViewByIndex(context.nodeIndex, context.lView);\n        }\n        return view;\n    }\n    /**\n     * Assigns the given data to the given target (which could be a component,\n     * directive or DOM node instance) using monkey-patching.\n     */\n    function attachPatchData(target, data) {\n        target[MONKEY_PATCH_KEY_NAME] = data;\n    }\n    function isComponentInstance(instance) {\n        return instance && instance.constructor && instance.constructor.ɵcmp;\n    }\n    function isDirectiveInstance(instance) {\n        return instance && instance.constructor && instance.constructor.ɵdir;\n    }\n    /**\n     * Locates the element within the given LView and returns the matching index\n     */\n    function findViaNativeElement(lView, target) {\n        var tNode = lView[TVIEW].firstChild;\n        while (tNode) {\n            var native = getNativeByTNodeOrNull(tNode, lView);\n            if (native === target) {\n                return tNode.index;\n            }\n            tNode = traverseNextElement(tNode);\n        }\n        return -1;\n    }\n    /**\n     * Locates the next tNode (child, sibling or parent).\n     */\n    function traverseNextElement(tNode) {\n        if (tNode.child) {\n            return tNode.child;\n        }\n        else if (tNode.next) {\n            return tNode.next;\n        }\n        else {\n            // Let's take the following template: <div><span>text</span></div><component/>\n            // After checking the text node, we need to find the next parent that has a \"next\" TNode,\n            // in this case the parent `div`, so that we can find the component.\n            while (tNode.parent && !tNode.parent.next) {\n                tNode = tNode.parent;\n            }\n            return tNode.parent && tNode.parent.next;\n        }\n    }\n    /**\n     * Locates the component within the given LView and returns the matching index\n     */\n    function findViaComponent(lView, componentInstance) {\n        var componentIndices = lView[TVIEW].components;\n        if (componentIndices) {\n            for (var i = 0; i < componentIndices.length; i++) {\n                var elementComponentIndex = componentIndices[i];\n                var componentView = getComponentLViewByIndex(elementComponentIndex, lView);\n                if (componentView[CONTEXT] === componentInstance) {\n                    return elementComponentIndex;\n                }\n            }\n        }\n        else {\n            var rootComponentView = getComponentLViewByIndex(HEADER_OFFSET, lView);\n            var rootComponent = rootComponentView[CONTEXT];\n            if (rootComponent === componentInstance) {\n                // we are dealing with the root element here therefore we know that the\n                // element is the very first element after the HEADER data in the lView\n                return HEADER_OFFSET;\n            }\n        }\n        return -1;\n    }\n    /**\n     * Locates the directive within the given LView and returns the matching index\n     */\n    function findViaDirective(lView, directiveInstance) {\n        // if a directive is monkey patched then it will (by default)\n        // have a reference to the LView of the current view. The\n        // element bound to the directive being search lives somewhere\n        // in the view data. We loop through the nodes and check their\n        // list of directives for the instance.\n        var tNode = lView[TVIEW].firstChild;\n        while (tNode) {\n            var directiveIndexStart = tNode.directiveStart;\n            var directiveIndexEnd = tNode.directiveEnd;\n            for (var i = directiveIndexStart; i < directiveIndexEnd; i++) {\n                if (lView[i] === directiveInstance) {\n                    return tNode.index;\n                }\n            }\n            tNode = traverseNextElement(tNode);\n        }\n        return -1;\n    }\n    /**\n     * Returns a list of directives extracted from the given view based on the\n     * provided list of directive index values.\n     *\n     * @param nodeIndex The node index\n     * @param lView The target view data\n     * @param includeComponents Whether or not to include components in returned directives\n     */\n    function getDirectivesAtNodeIndex(nodeIndex, lView, includeComponents) {\n        var tNode = lView[TVIEW].data[nodeIndex];\n        var directiveStartIndex = tNode.directiveStart;\n        if (directiveStartIndex == 0)\n            return EMPTY_ARRAY;\n        var directiveEndIndex = tNode.directiveEnd;\n        if (!includeComponents && tNode.flags & 2 /* isComponentHost */)\n            directiveStartIndex++;\n        return lView.slice(directiveStartIndex, directiveEndIndex);\n    }\n    function getComponentAtNodeIndex(nodeIndex, lView) {\n        var tNode = lView[TVIEW].data[nodeIndex];\n        var directiveStartIndex = tNode.directiveStart;\n        return tNode.flags & 2 /* isComponentHost */ ? lView[directiveStartIndex] : null;\n    }\n    /**\n     * Returns a map of local references (local reference name => element or directive instance) that\n     * exist on a given element.\n     */\n    function discoverLocalRefs(lView, nodeIndex) {\n        var tNode = lView[TVIEW].data[nodeIndex];\n        if (tNode && tNode.localNames) {\n            var result = {};\n            var localIndex = tNode.index + 1;\n            for (var i = 0; i < tNode.localNames.length; i += 2) {\n                result[tNode.localNames[i]] = lView[localIndex];\n                localIndex++;\n            }\n            return result;\n        }\n        return null;\n    }\n\n    /** Called when directives inject each other (creating a circular dependency) */\n    function throwCyclicDependencyError(token) {\n        throw new Error(\"Cannot instantiate cyclic dependency! \" + token);\n    }\n    /** Called when there are multiple component selectors that match a given node */\n    function throwMultipleComponentError(tNode) {\n        throw new Error(\"Multiple components match node with tagname \" + tNode.tagName);\n    }\n    function throwMixedMultiProviderError() {\n        throw new Error(\"Cannot mix multi providers and regular providers\");\n    }\n    function throwInvalidProviderError(ngModuleType, providers, provider) {\n        var ngModuleDetail = '';\n        if (ngModuleType && providers) {\n            var providerDetail = providers.map(function (v) { return v == provider ? '?' + provider + '?' : '...'; });\n            ngModuleDetail =\n                \" - only instances of Provider and Type are allowed, got: [\" + providerDetail.join(', ') + \"]\";\n        }\n        throw new Error(\"Invalid provider for the NgModule '\" + stringify(ngModuleType) + \"'\" + ngModuleDetail);\n    }\n    /** Throws an ExpressionChangedAfterChecked error if checkNoChanges mode is on. */\n    function throwErrorIfNoChangesMode(creationMode, oldValue, currValue, propName) {\n        var field = propName ? \" for '\" + propName + \"'\" : '';\n        var msg = \"ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value\" + field + \": '\" + oldValue + \"'. Current value: '\" + currValue + \"'.\";\n        if (creationMode) {\n            msg +=\n                \" It seems like the view has been created after its parent and its children have been dirty checked.\" +\n                    \" Has it been created in a change detection hook?\";\n        }\n        // TODO: include debug context, see `viewDebugError` function in\n        // `packages/core/src/view/errors.ts` for reference.\n        throw new Error(msg);\n    }\n    function constructDetailsForInterpolation(lView, rootIndex, expressionIndex, meta, changedValue) {\n        var _a = __read(meta.split(INTERPOLATION_DELIMITER)), propName = _a[0], prefix = _a[1], chunks = _a.slice(2);\n        var oldValue = prefix, newValue = prefix;\n        for (var i = 0; i < chunks.length; i++) {\n            var slotIdx = rootIndex + i;\n            oldValue += \"\" + lView[slotIdx] + chunks[i];\n            newValue += \"\" + (slotIdx === expressionIndex ? changedValue : lView[slotIdx]) + chunks[i];\n        }\n        return { propName: propName, oldValue: oldValue, newValue: newValue };\n    }\n    /**\n     * Constructs an object that contains details for the ExpressionChangedAfterItHasBeenCheckedError:\n     * - property name (for property bindings or interpolations)\n     * - old and new values, enriched using information from metadata\n     *\n     * More information on the metadata storage format can be found in `storePropertyBindingMetadata`\n     * function description.\n     */\n    function getExpressionChangedErrorDetails(lView, bindingIndex, oldValue, newValue) {\n        var tData = lView[TVIEW].data;\n        var metadata = tData[bindingIndex];\n        if (typeof metadata === 'string') {\n            // metadata for property interpolation\n            if (metadata.indexOf(INTERPOLATION_DELIMITER) > -1) {\n                return constructDetailsForInterpolation(lView, bindingIndex, bindingIndex, metadata, newValue);\n            }\n            // metadata for property binding\n            return { propName: metadata, oldValue: oldValue, newValue: newValue };\n        }\n        // metadata is not available for this expression, check if this expression is a part of the\n        // property interpolation by going from the current binding index left and look for a string that\n        // contains INTERPOLATION_DELIMITER, the layout in tView.data for this case will look like this:\n        // [..., 'id�Prefix � and � suffix', null, null, null, ...]\n        if (metadata === null) {\n            var idx = bindingIndex - 1;\n            while (typeof tData[idx] !== 'string' && tData[idx + 1] === null) {\n                idx--;\n            }\n            var meta = tData[idx];\n            if (typeof meta === 'string') {\n                var matches = meta.match(new RegExp(INTERPOLATION_DELIMITER, 'g'));\n                // first interpolation delimiter separates property name from interpolation parts (in case of\n                // property interpolations), so we subtract one from total number of found delimiters\n                if (matches && (matches.length - 1) > bindingIndex - idx) {\n                    return constructDetailsForInterpolation(lView, idx, bindingIndex, meta, newValue);\n                }\n            }\n        }\n        return { propName: undefined, oldValue: oldValue, newValue: newValue };\n    }\n\n    // Note: This hack is necessary so we don't erroneously get a circular dependency\n    // failure based on types.\n    var unusedValueExportToPlacateAjd$4 = 1;\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // Note: This hack is necessary so we don't erroneously get a circular dependency\n    // failure based on types.\n    var unusedValueExportToPlacateAjd$5 = 1;\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var unusedValueToPlacateAjd = unusedValueExportToPlacateAjd$4 + unusedValueExportToPlacateAjd$5;\n    var NG_TEMPLATE_SELECTOR = 'ng-template';\n    function isCssClassMatching(nodeClassAttrVal, cssClassToMatch) {\n        var nodeClassesLen = nodeClassAttrVal.length;\n        // we lowercase the class attribute value to be able to match\n        // selectors without case-sensitivity\n        // (selectors are already in lowercase when generated)\n        var matchIndex = nodeClassAttrVal.toLowerCase().indexOf(cssClassToMatch);\n        var matchEndIdx = matchIndex + cssClassToMatch.length;\n        if (matchIndex === -1 // no match\n            || (matchIndex > 0 && nodeClassAttrVal[matchIndex - 1] !== ' ') // no space before\n            ||\n                (matchEndIdx < nodeClassesLen && nodeClassAttrVal[matchEndIdx] !== ' ')) // no space after\n         {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Function that checks whether a given tNode matches tag-based selector and has a valid type.\n     *\n     * Matching can be performed in 2 modes: projection mode (when we project nodes) and regular\n     * directive matching mode:\n     * - in the \"directive matching\" mode we do _not_ take TContainer's tagName into account if it is\n     * different from NG_TEMPLATE_SELECTOR (value different from NG_TEMPLATE_SELECTOR indicates that a\n     * tag name was extracted from * syntax so we would match the same directive twice);\n     * - in the \"projection\" mode, we use a tag name potentially extracted from the * syntax processing\n     * (applicable to TNodeType.Container only).\n     */\n    function hasTagAndTypeMatch(tNode, currentSelector, isProjectionMode) {\n        var tagNameToCompare = tNode.type === 0 /* Container */ && !isProjectionMode ?\n            NG_TEMPLATE_SELECTOR :\n            tNode.tagName;\n        return currentSelector === tagNameToCompare;\n    }\n    /**\n     * A utility function to match an Ivy node static data against a simple CSS selector\n     *\n     * @param node static data of the node to match\n     * @param selector The selector to try matching against the node.\n     * @param isProjectionMode if `true` we are matching for content projection, otherwise we are doing\n     * directive matching.\n     * @returns true if node matches the selector.\n     */\n    function isNodeMatchingSelector(tNode, selector, isProjectionMode) {\n        ngDevMode && assertDefined(selector[0], 'Selector should have a tag name');\n        var mode = 4 /* ELEMENT */;\n        var nodeAttrs = tNode.attrs || [];\n        // Find the index of first attribute that has no value, only a name.\n        var nameOnlyMarkerIdx = getNameOnlyMarkerIndex(nodeAttrs);\n        // When processing \":not\" selectors, we skip to the next \":not\" if the\n        // current one doesn't match\n        var skipToNextSelector = false;\n        for (var i = 0; i < selector.length; i++) {\n            var current = selector[i];\n            if (typeof current === 'number') {\n                // If we finish processing a :not selector and it hasn't failed, return false\n                if (!skipToNextSelector && !isPositive(mode) && !isPositive(current)) {\n                    return false;\n                }\n                // If we are skipping to the next :not() and this mode flag is positive,\n                // it's a part of the current :not() selector, and we should keep skipping\n                if (skipToNextSelector && isPositive(current))\n                    continue;\n                skipToNextSelector = false;\n                mode = current | (mode & 1 /* NOT */);\n                continue;\n            }\n            if (skipToNextSelector)\n                continue;\n            if (mode & 4 /* ELEMENT */) {\n                mode = 2 /* ATTRIBUTE */ | mode & 1 /* NOT */;\n                if (current !== '' && !hasTagAndTypeMatch(tNode, current, isProjectionMode) ||\n                    current === '' && selector.length === 1) {\n                    if (isPositive(mode))\n                        return false;\n                    skipToNextSelector = true;\n                }\n            }\n            else {\n                var selectorAttrValue = mode & 8 /* CLASS */ ? current : selector[++i];\n                // special case for matching against classes when a tNode has been instantiated with\n                // class and style values as separate attribute values (e.g. ['title', CLASS, 'foo'])\n                if ((mode & 8 /* CLASS */) && tNode.classes) {\n                    if (!isCssClassMatching(getInitialStylingValue(tNode.classes), selectorAttrValue)) {\n                        if (isPositive(mode))\n                            return false;\n                        skipToNextSelector = true;\n                    }\n                    continue;\n                }\n                var isInlineTemplate = tNode.type == 0 /* Container */ && tNode.tagName !== NG_TEMPLATE_SELECTOR;\n                var attrName = (mode & 8 /* CLASS */) ? 'class' : current;\n                var attrIndexInNode = findAttrIndexInNode(attrName, nodeAttrs, isInlineTemplate, isProjectionMode);\n                if (attrIndexInNode === -1) {\n                    if (isPositive(mode))\n                        return false;\n                    skipToNextSelector = true;\n                    continue;\n                }\n                if (selectorAttrValue !== '') {\n                    var nodeAttrValue = void 0;\n                    if (attrIndexInNode > nameOnlyMarkerIdx) {\n                        nodeAttrValue = '';\n                    }\n                    else {\n                        ngDevMode && assertNotEqual(nodeAttrs[attrIndexInNode], 0 /* NamespaceURI */, 'We do not match directives on namespaced attributes');\n                        // we lowercase the attribute value to be able to match\n                        // selectors without case-sensitivity\n                        // (selectors are already in lowercase when generated)\n                        nodeAttrValue = nodeAttrs[attrIndexInNode + 1].toLowerCase();\n                    }\n                    var compareAgainstClassName = mode & 8 /* CLASS */ ? nodeAttrValue : null;\n                    if (compareAgainstClassName &&\n                        !isCssClassMatching(compareAgainstClassName, selectorAttrValue) ||\n                        mode & 2 /* ATTRIBUTE */ && selectorAttrValue !== nodeAttrValue) {\n                        if (isPositive(mode))\n                            return false;\n                        skipToNextSelector = true;\n                    }\n                }\n            }\n        }\n        return isPositive(mode) || skipToNextSelector;\n    }\n    function isPositive(mode) {\n        return (mode & 1 /* NOT */) === 0;\n    }\n    /**\n     * Examines the attribute's definition array for a node to find the index of the\n     * attribute that matches the given `name`.\n     *\n     * NOTE: This will not match namespaced attributes.\n     *\n     * Attribute matching depends upon `isInlineTemplate` and `isProjectionMode`.\n     * The following table summarizes which types of attributes we attempt to match:\n     *\n     * ===========================================================================================================\n     * Modes                   | Normal Attributes | Bindings Attributes | Template Attributes | I18n\n     * Attributes\n     * ===========================================================================================================\n     * Inline + Projection     | YES               | YES                 | NO                  | YES\n     * -----------------------------------------------------------------------------------------------------------\n     * Inline + Directive      | NO                | NO                  | YES                 | NO\n     * -----------------------------------------------------------------------------------------------------------\n     * Non-inline + Projection | YES               | YES                 | NO                  | YES\n     * -----------------------------------------------------------------------------------------------------------\n     * Non-inline + Directive  | YES               | YES                 | NO                  | YES\n     * ===========================================================================================================\n     *\n     * @param name the name of the attribute to find\n     * @param attrs the attribute array to examine\n     * @param isInlineTemplate true if the node being matched is an inline template (e.g. `*ngFor`)\n     * rather than a manually expanded template node (e.g `<ng-template>`).\n     * @param isProjectionMode true if we are matching against content projection otherwise we are\n     * matching against directives.\n     */\n    function findAttrIndexInNode(name, attrs, isInlineTemplate, isProjectionMode) {\n        if (attrs === null)\n            return -1;\n        var i = 0;\n        if (isProjectionMode || !isInlineTemplate) {\n            var bindingsMode = false;\n            while (i < attrs.length) {\n                var maybeAttrName = attrs[i];\n                if (maybeAttrName === name) {\n                    return i;\n                }\n                else if (maybeAttrName === 3 /* Bindings */ || maybeAttrName === 6 /* I18n */) {\n                    bindingsMode = true;\n                }\n                else if (maybeAttrName === 1 /* Classes */ || maybeAttrName === 2 /* Styles */) {\n                    var value = attrs[++i];\n                    // We should skip classes here because we have a separate mechanism for\n                    // matching classes in projection mode.\n                    while (typeof value === 'string') {\n                        value = attrs[++i];\n                    }\n                    continue;\n                }\n                else if (maybeAttrName === 4 /* Template */) {\n                    // We do not care about Template attributes in this scenario.\n                    break;\n                }\n                else if (maybeAttrName === 0 /* NamespaceURI */) {\n                    // Skip the whole namespaced attribute and value. This is by design.\n                    i += 4;\n                    continue;\n                }\n                // In binding mode there are only names, rather than name-value pairs.\n                i += bindingsMode ? 1 : 2;\n            }\n            // We did not match the attribute\n            return -1;\n        }\n        else {\n            return matchTemplateAttribute(attrs, name);\n        }\n    }\n    function isNodeMatchingSelectorList(tNode, selector, isProjectionMode) {\n        if (isProjectionMode === void 0) { isProjectionMode = false; }\n        for (var i = 0; i < selector.length; i++) {\n            if (isNodeMatchingSelector(tNode, selector[i], isProjectionMode)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    function getProjectAsAttrValue(tNode) {\n        var nodeAttrs = tNode.attrs;\n        if (nodeAttrs != null) {\n            var ngProjectAsAttrIdx = nodeAttrs.indexOf(5 /* ProjectAs */);\n            // only check for ngProjectAs in attribute names, don't accidentally match attribute's value\n            // (attribute names are stored at even indexes)\n            if ((ngProjectAsAttrIdx & 1) === 0) {\n                return nodeAttrs[ngProjectAsAttrIdx + 1];\n            }\n        }\n        return null;\n    }\n    function getNameOnlyMarkerIndex(nodeAttrs) {\n        for (var i = 0; i < nodeAttrs.length; i++) {\n            var nodeAttr = nodeAttrs[i];\n            if (isNameOnlyAttributeMarker(nodeAttr)) {\n                return i;\n            }\n        }\n        return nodeAttrs.length;\n    }\n    function matchTemplateAttribute(attrs, name) {\n        var i = attrs.indexOf(4 /* Template */);\n        if (i > -1) {\n            i++;\n            while (i < attrs.length) {\n                if (attrs[i] === name)\n                    return i;\n                i++;\n            }\n        }\n        return -1;\n    }\n    /**\n     * Checks whether a selector is inside a CssSelectorList\n     * @param selector Selector to be checked.\n     * @param list List in which to look for the selector.\n     */\n    function isSelectorInSelectorList(selector, list) {\n        selectorListLoop: for (var i = 0; i < list.length; i++) {\n            var currentSelectorInList = list[i];\n            if (selector.length !== currentSelectorInList.length) {\n                continue;\n            }\n            for (var j = 0; j < selector.length; j++) {\n                if (selector[j] !== currentSelectorInList[j]) {\n                    continue selectorListLoop;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n    function maybeWrapInNotSelector(isNegativeMode, chunk) {\n        return isNegativeMode ? ':not(' + chunk.trim() + ')' : chunk;\n    }\n    function stringifyCSSSelector(selector) {\n        var result = selector[0];\n        var i = 1;\n        var mode = 2 /* ATTRIBUTE */;\n        var currentChunk = '';\n        var isNegativeMode = false;\n        while (i < selector.length) {\n            var valueOrMarker = selector[i];\n            if (typeof valueOrMarker === 'string') {\n                if (mode & 2 /* ATTRIBUTE */) {\n                    var attrValue = selector[++i];\n                    currentChunk +=\n                        '[' + valueOrMarker + (attrValue.length > 0 ? '=\"' + attrValue + '\"' : '') + ']';\n                }\n                else if (mode & 8 /* CLASS */) {\n                    currentChunk += '.' + valueOrMarker;\n                }\n                else if (mode & 4 /* ELEMENT */) {\n                    currentChunk += ' ' + valueOrMarker;\n                }\n            }\n            else {\n                //\n                // Append current chunk to the final result in case we come across SelectorFlag, which\n                // indicates that the previous section of a selector is over. We need to accumulate content\n                // between flags to make sure we wrap the chunk later in :not() selector if needed, e.g.\n                // ```\n                //  ['', Flags.CLASS, '.classA', Flags.CLASS | Flags.NOT, '.classB', '.classC']\n                // ```\n                // should be transformed to `.classA :not(.classB .classC)`.\n                //\n                // Note: for negative selector part, we accumulate content between flags until we find the\n                // next negative flag. This is needed to support a case where `:not()` rule contains more than\n                // one chunk, e.g. the following selector:\n                // ```\n                //  ['', Flags.ELEMENT | Flags.NOT, 'p', Flags.CLASS, 'foo', Flags.CLASS | Flags.NOT, 'bar']\n                // ```\n                // should be stringified to `:not(p.foo) :not(.bar)`\n                //\n                if (currentChunk !== '' && !isPositive(valueOrMarker)) {\n                    result += maybeWrapInNotSelector(isNegativeMode, currentChunk);\n                    currentChunk = '';\n                }\n                mode = valueOrMarker;\n                // According to CssSelector spec, once we come across `SelectorFlags.NOT` flag, the negative\n                // mode is maintained for remaining chunks of a selector.\n                isNegativeMode = isNegativeMode || !isPositive(mode);\n            }\n            i++;\n        }\n        if (currentChunk !== '') {\n            result += maybeWrapInNotSelector(isNegativeMode, currentChunk);\n        }\n        return result;\n    }\n    /**\n     * Generates string representation of CSS selector in parsed form.\n     *\n     * ComponentDef and DirectiveDef are generated with the selector in parsed form to avoid doing\n     * additional parsing at runtime (for example, for directive matching). However in some cases (for\n     * example, while bootstrapping a component), a string version of the selector is required to query\n     * for the host element on the page. This function takes the parsed form of a selector and returns\n     * its string representation.\n     *\n     * @param selectorList selector in parsed form\n     * @returns string representation of a given selector\n     */\n    function stringifyCSSSelectorList(selectorList) {\n        return selectorList.map(stringifyCSSSelector).join(',');\n    }\n\n    // these values will get filled in the very first time this is accessed...\n    var _state = {\n        element: null,\n        directiveIndex: -1,\n        sourceIndex: -1,\n        classesBitMask: -1,\n        classesIndex: -1,\n        stylesBitMask: -1,\n        stylesIndex: -1,\n        lastDirectClassMap: null,\n        lastDirectStyleMap: null,\n    };\n    var BIT_MASK_START_VALUE = 0;\n    // the `0` start value is reserved for [map]-based entries\n    var INDEX_START_VALUE = 1;\n    /**\n     * Returns (or instantiates) the styling state for the given element.\n     *\n     * Styling state is accessed and processed each time a style or class binding\n     * is evaluated.\n     *\n     * If and when the provided `element` doesn't match the current element in the\n     * state then this means that styling was recently cleared or the element has\n     * changed in change detection. In both cases the styling state is fully reset.\n     *\n     * If and when the provided `directiveIndex` doesn't match the current directive\n     * index in the state then this means that a new source has introduced itself into\n     * the styling code (or, in other words, another directive or component has started\n     * to apply its styling host bindings to the element).\n     */\n    function getStylingState(element, directiveIndex) {\n        if (_state.element !== element) {\n            _state.element = element;\n            _state.directiveIndex = directiveIndex;\n            _state.sourceIndex = directiveIndex === TEMPLATE_DIRECTIVE_INDEX ? 0 : 1;\n            _state.classesBitMask = BIT_MASK_START_VALUE;\n            _state.classesIndex = INDEX_START_VALUE;\n            _state.stylesBitMask = BIT_MASK_START_VALUE;\n            _state.stylesIndex = INDEX_START_VALUE;\n            _state.lastDirectClassMap = null;\n            _state.lastDirectStyleMap = null;\n        }\n        else if (_state.directiveIndex !== directiveIndex) {\n            _state.directiveIndex = directiveIndex;\n            _state.sourceIndex++;\n        }\n        return _state;\n    }\n    /**\n     * Clears the styling state so that it can be used by another element's styling code.\n     */\n    function resetStylingState() {\n        _state.element = null;\n    }\n\n    /**\n    * @license\n    * Copyright Google Inc. All Rights Reserved.\n    *\n    * Use of this source code is governed by an MIT-style license that can be\n    * found in the LICENSE file at https://angular.io/license\n    */\n    var VALUE_IS_EXTERNALLY_MODIFIED = {};\n    /**\n     * --------\n     *\n     * This file contains the core logic for styling in Angular.\n     *\n     * All styling bindings (i.e. `[style]`, `[style.prop]`, `[class]` and `[class.name]`)\n     * will have their values be applied through the logic in this file.\n     *\n     * When a binding is encountered (e.g. `<div [style.width]=\"w\">`) then\n     * the binding data will be populated into a `TStylingContext` data-structure.\n     * There is only one `TStylingContext` per `TStylingNode` and each element instance\n     * will update its style/class binding values in concert with the styling\n     * context.\n     *\n     * To learn more about the algorithm see `TStylingContext`.\n     *\n     * --------\n     */\n    /**\n     * The guard/update mask bit index location for map-based bindings.\n     *\n     * All map-based bindings (i.e. `[style]` and `[class]` )\n     */\n    var STYLING_INDEX_FOR_MAP_BINDING = 0;\n    /**\n     * Visits a class-based binding and updates the new value (if changed).\n     *\n     * This function is called each time a class-based styling instruction\n     * is executed. It's important that it's always called (even if the value\n     * has not changed) so that the inner counter index value is incremented.\n     * This way, each instruction is always guaranteed to get the same counter\n     * state each time it's called (which then allows the `TStylingContext`\n     * and the bit mask values to be in sync).\n     */\n    function updateClassViaContext(context, tNode, data, element, directiveIndex, prop, bindingIndex, value, forceUpdate, firstUpdatePass) {\n        var isMapBased = !prop;\n        var state = getStylingState(element, directiveIndex);\n        var countIndex = isMapBased ? STYLING_INDEX_FOR_MAP_BINDING : state.classesIndex++;\n        // even if the initial value is a `NO_CHANGE` value (e.g. interpolation or [ngClass])\n        // then we still need to register the binding within the context so that the context\n        // is aware of the binding even if things change after the first update pass.\n        if (firstUpdatePass || value !== NO_CHANGE) {\n            var updated = updateBindingData(context, tNode, data, countIndex, state.sourceIndex, prop, bindingIndex, value, forceUpdate, false, firstUpdatePass, true);\n            if (updated || forceUpdate) {\n                // We flip the bit in the bitMask to reflect that the binding\n                // at the `index` slot has changed. This identifies to the flushing\n                // phase that the bindings for this particular CSS class need to be\n                // applied again because on or more of the bindings for the CSS\n                // class have changed.\n                state.classesBitMask |= 1 << countIndex;\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Visits a style-based binding and updates the new value (if changed).\n     *\n     * This function is called each time a style-based styling instruction\n     * is executed. It's important that it's always called (even if the value\n     * has not changed) so that the inner counter index value is incremented.\n     * This way, each instruction is always guaranteed to get the same counter\n     * state each time it's called (which then allows the `TStylingContext`\n     * and the bit mask values to be in sync).\n     */\n    function updateStyleViaContext(context, tNode, data, element, directiveIndex, prop, bindingIndex, value, sanitizer, forceUpdate, firstUpdatePass) {\n        var isMapBased = !prop;\n        var state = getStylingState(element, directiveIndex);\n        var countIndex = isMapBased ? STYLING_INDEX_FOR_MAP_BINDING : state.stylesIndex++;\n        // even if the initial value is a `NO_CHANGE` value (e.g. interpolation or [ngStyle])\n        // then we still need to register the binding within the context so that the context\n        // is aware of the binding even if things change after the first update pass.\n        if (firstUpdatePass || value !== NO_CHANGE) {\n            var sanitizationRequired = isMapBased ?\n                true :\n                (sanitizer ? sanitizer(prop, null, 1 /* ValidateProperty */) : false);\n            var updated = updateBindingData(context, tNode, data, countIndex, state.sourceIndex, prop, bindingIndex, value, forceUpdate, sanitizationRequired, firstUpdatePass, false);\n            if (updated || forceUpdate) {\n                // We flip the bit in the bitMask to reflect that the binding\n                // at the `index` slot has changed. This identifies to the flushing\n                // phase that the bindings for this particular property need to be\n                // applied again because on or more of the bindings for the CSS\n                // property have changed.\n                state.stylesBitMask |= 1 << countIndex;\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Called each time a binding value has changed within the provided `TStylingContext`.\n     *\n     * This function is designed to be called from `updateStyleBinding` and `updateClassBinding`.\n     * If called during the first update pass, the binding will be registered in the context.\n     *\n     * This function will also update binding slot in the provided `LStylingData` with the\n     * new binding entry (if it has changed).\n     *\n     * @returns whether or not the binding value was updated in the `LStylingData`.\n     */\n    function updateBindingData(context, tNode, data, counterIndex, sourceIndex, prop, bindingIndex, value, forceUpdate, sanitizationRequired, firstUpdatePass, isClassBased) {\n        var hostBindingsMode = isHostStylingActive(sourceIndex);\n        var hostBindingsFlag = isClassBased ? 4096 /* hasHostClassBindings */ : 131072 /* hasHostStyleBindings */;\n        if (firstUpdatePass) {\n            // this will only happen during the first update pass of the\n            // context. The reason why we can't use `tView.firstCreatePass`\n            // here is because its not guaranteed to be true when the first\n            // update pass is executed (remember that all styling instructions\n            // are run in the update phase, and, as a result, are no more\n            // styling instructions that are run in the creation phase).\n            registerBinding(context, tNode, counterIndex, sourceIndex, prop, bindingIndex, sanitizationRequired, isClassBased);\n        }\n        var changed = forceUpdate || hasValueChanged(data[bindingIndex], value);\n        if (changed) {\n            setValue(data, bindingIndex, value);\n            var doSetValuesAsStale = hasConfig(tNode, hostBindingsFlag) && !hostBindingsMode && (prop ? !value : true);\n            if (doSetValuesAsStale) {\n                renderHostBindingsAsStale(context, tNode, data, prop, isClassBased);\n            }\n        }\n        return changed;\n    }\n    /**\n     * Iterates over all host-binding values for the given `prop` value in the context and sets their\n     * corresponding binding values to `null`.\n     *\n     * Whenever a template binding changes its value to `null`, all host-binding values should be\n     * re-applied\n     * to the element when the host bindings are evaluated. This may not always happen in the event\n     * that none of the bindings changed within the host bindings code. For this reason this function\n     * is expected to be called each time a template binding becomes falsy or when a map-based template\n     * binding changes.\n     */\n    function renderHostBindingsAsStale(context, tNode, data, prop, isClassBased) {\n        var valuesCount = getValuesCount(context);\n        var hostBindingsFlag = isClassBased ? 4096 /* hasHostClassBindings */ : 131072 /* hasHostStyleBindings */;\n        if (prop !== null && hasConfig(tNode, hostBindingsFlag)) {\n            var itemsPerRow = 4 /* BindingsStartOffset */ + valuesCount;\n            var i = 2 /* ValuesStartPosition */;\n            var found = false;\n            while (i < context.length) {\n                if (getProp(context, i) === prop) {\n                    found = true;\n                    break;\n                }\n                i += itemsPerRow;\n            }\n            if (found) {\n                var bindingsStart = i + 4 /* BindingsStartOffset */;\n                var valuesStart = bindingsStart + 1; // the first column is template bindings\n                var valuesEnd = bindingsStart + valuesCount - 1;\n                for (var i_1 = valuesStart; i_1 < valuesEnd; i_1++) {\n                    var bindingIndex = context[i_1];\n                    if (bindingIndex !== 0) {\n                        setValue(data, bindingIndex, null);\n                    }\n                }\n            }\n        }\n        var mapBindingsFlag = isClassBased ? 512 /* hasClassMapBindings */ : 16384 /* hasStyleMapBindings */;\n        if (hasConfig(tNode, mapBindingsFlag)) {\n            var bindingsStart = 2 /* ValuesStartPosition */ + 4 /* BindingsStartOffset */;\n            var valuesStart = bindingsStart + 1; // the first column is template bindings\n            var valuesEnd = bindingsStart + valuesCount - 1;\n            for (var i = valuesStart; i < valuesEnd; i++) {\n                var stylingMap = getValue(data, context[i]);\n                if (stylingMap) {\n                    setMapAsDirty(stylingMap);\n                }\n            }\n        }\n    }\n    /**\n     * Registers the provided binding (prop + bindingIndex) into the context.\n     *\n     * It is needed because it will either update or insert a styling property\n     * into the context at the correct spot.\n     *\n     * When called, one of two things will happen:\n     *\n     * 1) If the property already exists in the context then it will just add\n     *    the provided `bindingValue` to the end of the binding sources region\n     *    for that particular property.\n     *\n     *    - If the binding value is a number then it will be added as a new\n     *      binding index source next to the other binding sources for the property.\n     *\n     *    - Otherwise, if the binding value is a string/boolean/null type then it will\n     *      replace the default value for the property if the default value is `null`.\n     *\n     * 2) If the property does not exist then it will be inserted into the context.\n     *    The styling context relies on all properties being stored in alphabetical\n     *    order, so it knows exactly where to store it.\n     *\n     *    When inserted, a default `null` value is created for the property which exists\n     *    as the default value for the binding. If the bindingValue property is inserted\n     *    and it is either a string, number or null value then that will replace the default\n     *    value.\n     *\n     * Note that this function is also used for map-based styling bindings. They are treated\n     * much the same as prop-based bindings, but, their property name value is set as `[MAP]`.\n     */\n    function registerBinding(context, tNode, countId, sourceIndex, prop, bindingValue, sanitizationRequired, isClassBased) {\n        var found = false;\n        prop = prop || MAP_BASED_ENTRY_PROP_NAME;\n        var totalSources = getTotalSources(context);\n        // if a new source is detected then a new column needs to be allocated into\n        // the styling context. The column is basically a new allocation of binding\n        // sources that will be available to each property.\n        while (totalSources <= sourceIndex) {\n            addNewSourceColumn(context);\n            totalSources++;\n        }\n        var collisionFlag = isClassBased ? 8192 /* hasDuplicateClassBindings */ : 262144 /* hasDuplicateStyleBindings */;\n        var isBindingIndexValue = typeof bindingValue === 'number';\n        var entriesPerRow = 4 /* BindingsStartOffset */ + getValuesCount(context);\n        var i = 2 /* ValuesStartPosition */;\n        // all style/class bindings are sorted by property name\n        while (i < context.length) {\n            var p = getProp(context, i);\n            if (prop <= p) {\n                if (prop < p) {\n                    allocateNewContextEntry(context, i, prop, sanitizationRequired);\n                }\n                else if (isBindingIndexValue) {\n                    patchConfig(tNode, collisionFlag);\n                }\n                addBindingIntoContext(context, i, bindingValue, countId, sourceIndex);\n                found = true;\n                break;\n            }\n            i += entriesPerRow;\n        }\n        if (!found) {\n            allocateNewContextEntry(context, context.length, prop, sanitizationRequired);\n            addBindingIntoContext(context, i, bindingValue, countId, sourceIndex);\n        }\n    }\n    /**\n     * Inserts a new row into the provided `TStylingContext` and assigns the provided `prop` value as\n     * the property entry.\n     */\n    function allocateNewContextEntry(context, index, prop, sanitizationRequired) {\n        var config = sanitizationRequired ? 1 /* SanitizationRequired */ :\n            0 /* Default */;\n        context.splice(index, 0, config, // 1) config value\n        DEFAULT_GUARD_MASK_VALUE, // 2) template bit mask\n        DEFAULT_GUARD_MASK_VALUE, // 3) host bindings bit mask\n        prop);\n        index += 4; // the 4 values above\n        // 5...) default binding index for the template value\n        // depending on how many sources already exist in the context,\n        // multiple default index entries may need to be inserted for\n        // the new value in the context.\n        var totalBindingsPerEntry = getTotalSources(context);\n        for (var i = 0; i < totalBindingsPerEntry; i++) {\n            context.splice(index, 0, DEFAULT_BINDING_INDEX);\n            index++;\n        }\n        // 6) default binding value for the new entry\n        context.splice(index, 0, DEFAULT_BINDING_VALUE);\n    }\n    /**\n     * Inserts a new binding value into a styling property tuple in the `TStylingContext`.\n     *\n     * A bindingValue is inserted into a context during the first update pass\n     * of a template or host bindings function. When this occurs, two things\n     * happen:\n     *\n     * - If the bindingValue value is a number then it is treated as a bindingIndex\n     *   value (a index in the `LView`) and it will be inserted next to the other\n     *   binding index entries.\n     *\n     * - Otherwise the binding value will update the default value for the property\n     *   and this will only happen if the default value is `null`.\n     */\n    function addBindingIntoContext(context, index, bindingValue, bitIndex, sourceIndex) {\n        if (typeof bindingValue === 'number') {\n            var hostBindingsMode = isHostStylingActive(sourceIndex);\n            var cellIndex = index + 4 /* BindingsStartOffset */ + sourceIndex;\n            context[cellIndex] = bindingValue;\n            var updatedBitMask = getGuardMask(context, index, hostBindingsMode) | (1 << bitIndex);\n            setGuardMask(context, index, updatedBitMask, hostBindingsMode);\n        }\n        else if (bindingValue !== null && getDefaultValue(context, index) === null) {\n            setDefaultValue(context, index, bindingValue);\n        }\n    }\n    /**\n     * Registers a new column into the provided `TStylingContext`.\n     *\n     * If and when a new source is detected then a new column needs to\n     * be allocated into the styling context. The column is basically\n     * a new allocation of binding sources that will be available to each\n     * property.\n     *\n     * Each column that exists in the styling context resembles a styling\n     * source. A styling source an either be the template or one or more\n     * components or directives all containing styling host bindings.\n     */\n    function addNewSourceColumn(context) {\n        // we use -1 here because we want to insert right before the last value (the default value)\n        var insertOffset = 4 /* BindingsStartOffset */ + getValuesCount(context) - 1;\n        var index = 2 /* ValuesStartPosition */;\n        while (index < context.length) {\n            index += insertOffset;\n            context.splice(index++, 0, DEFAULT_BINDING_INDEX);\n            // the value was inserted just before the default value, but the\n            // next entry in the context starts just after it. Therefore++.\n            index++;\n        }\n        context[0 /* TotalSourcesPosition */]++;\n    }\n    /**\n     * Applies all pending style and class bindings to the provided element.\n     *\n     * This function will attempt to flush styling via the provided `classesContext`\n     * and `stylesContext` context values. This function is designed to be run from\n     * the internal `stylingApply` function (which is scheduled to run at the very\n     * end of change detection for an element if one or more style/class bindings\n     * were processed) and will rely on any state values that are set from when\n     * any of the styling bindings executed.\n     *\n     * This function is designed to be called twice: one when change detection has\n     * processed an element within the template bindings (i.e. just as `advance()`\n     * is called) and when host bindings have been processed. In both cases the\n     * styles and classes in both contexts will be applied to the element, but the\n     * algorithm will selectively decide which bindings to run depending on the\n     * columns in the context. The provided `directiveIndex` value will help the\n     * algorithm determine which bindings to apply: either the template bindings or\n     * the host bindings (see `applyStylingToElement` for more information).\n     *\n     * Note that once this function is called all temporary styling state data\n     * (i.e. the `bitMask` and `counter` values for styles and classes will be cleared).\n     */\n    function flushStyling(renderer, data, tNode, classesContext, stylesContext, element, directiveIndex, styleSanitizer, firstUpdatePass) {\n        ngDevMode && ngDevMode.flushStyling++;\n        var state = getStylingState(element, directiveIndex);\n        var hostBindingsMode = isHostStylingActive(state.sourceIndex);\n        if (stylesContext) {\n            firstUpdatePass && syncContextInitialStyling(stylesContext, tNode, false);\n            if (state.stylesBitMask !== 0) {\n                applyStylingViaContext(stylesContext, tNode, renderer, element, data, state.stylesBitMask, setStyle, styleSanitizer, hostBindingsMode, false);\n            }\n        }\n        if (classesContext) {\n            firstUpdatePass && syncContextInitialStyling(classesContext, tNode, true);\n            if (state.classesBitMask !== 0) {\n                applyStylingViaContext(classesContext, tNode, renderer, element, data, state.classesBitMask, setClass, null, hostBindingsMode, true);\n            }\n        }\n        resetStylingState();\n    }\n    /**\n     * Registers all static styling values into the context as default values.\n     *\n     * Static styles are stored on the `tNode.styles` and `tNode.classes`\n     * properties as instances of `StylingMapArray`. When an instance of\n     * `TStylingContext` is assigned to `tNode.styles` and `tNode.classes`\n     * then the existing initial styling values are copied into the the\n     * `InitialStylingValuePosition` slot.\n     *\n     * Because all static styles/classes are collected and registered on\n     * the initial styling array each time a directive is instantiated,\n     * the context may not yet know about the static values. When this\n     * function is called it will copy over all the static style/class\n     * values from the initial styling array into the context as default\n     * values for each of the matching entries in the context.\n     *\n     * Let's imagine the following example:\n     *\n     * ```html\n     * <div style=\"color:red\"\n     *     [style.color]=\"myColor\"\n     *     dir-that-has-static-height>\n     *   ...\n     * </div>\n     * ```\n     *\n     * When the code above is processed, the underlying element/styling\n     * instructions will create an instance of `TStylingContext` for\n     * the `tNode.styles` property. Here's what that looks like:\n     *\n     * ```typescript\n     * tNode.styles = [\n     *   // ...\n     *   // initial styles\n     *   ['color:red; height:200px', 'color', 'red', 'height', '200px'],\n     *\n     *   0, 0b1, 0b0, 'color', 20, null, // [style.color] binding\n     * ]\n     * ```\n     *\n     * After this function is called it will balance out the context with\n     * the static `color` and `height` values and set them as defaults within\n     * the context:\n     *\n     * ```typescript\n     * tNode.styles = [\n     *   // ...\n     *   // initial styles\n     *   ['color:red; height:200px', 'color', 'red', 'height', '200px'],\n     *\n     *   0, 0b1, 0b0, 'color', 20, 'red',\n     *   0, 0b0, 0b0, 'height', 0, '200px',\n     * ]\n     * ```\n     */\n    function syncContextInitialStyling(context, tNode, isClassBased) {\n        // the TStylingContext always has initial style/class values which are\n        // stored in styling array format.\n        updateInitialStylingOnContext(context, tNode, getStylingMapArray(context), isClassBased);\n    }\n    /**\n     * Registers all initial styling entries into the provided context.\n     *\n     * This function will iterate over all entries in the provided `initialStyling` ar}ray and register\n     * them as default (initial) values in the provided context. Initial styling values in a context are\n     * the default values that are to be applied unless overwritten by a binding.\n     *\n     * The reason why this function exists and isn't a part of the context construction is because\n     * host binding is evaluated at a later stage after the element is created. This means that\n     * if a directive or component contains any initial styling code (i.e. `<div class=\"foo\">`)\n     * then that initial styling data can only be applied once the styling for that element\n     * is first applied (at the end of the update phase). Once that happens then the context will\n     * update itself with the complete initial styling for the element.\n     */\n    function updateInitialStylingOnContext(context, tNode, initialStyling, isClassBased) {\n        // `-1` is used here because all initial styling data is not a apart\n        // of a binding (since it's static)\n        var COUNT_ID_FOR_STYLING = -1;\n        var hasInitialStyling = false;\n        for (var i = 1 /* ValuesStartPosition */; i < initialStyling.length; i += 2 /* TupleSize */) {\n            var value = getMapValue(initialStyling, i);\n            if (value) {\n                var prop = getMapProp(initialStyling, i);\n                registerBinding(context, tNode, COUNT_ID_FOR_STYLING, 0, prop, value, false, isClassBased);\n                hasInitialStyling = true;\n            }\n        }\n        if (hasInitialStyling) {\n            patchConfig(tNode, 256 /* hasInitialStyling */);\n        }\n    }\n    /**\n     * Runs through the provided styling context and applies each value to\n     * the provided element (via the renderer) if one or more values are present.\n     *\n     * This function will iterate over all entries present in the provided\n     * `TStylingContext` array (both prop-based and map-based bindings).-\n     *\n     * Each entry, within the `TStylingContext` array, is stored alphabetically\n     * and this means that each prop/value entry will be applied in order\n     * (so long as it is marked dirty in the provided `bitMask` value).\n     *\n     * If there are any map-based entries present (which are applied to the\n     * element via the `[style]` and `[class]` bindings) then those entries\n     * will be applied as well. However, the code for that is not a part of\n     * this function. Instead, each time a property is visited, then the\n     * code below will call an external function called `stylingMapsSyncFn`\n     * and, if present, it will keep the application of styling values in\n     * map-based bindings up to sync with the application of prop-based\n     * bindings.\n     *\n     * Visit `styling/map_based_bindings.ts` to learn more about how the\n     * algorithm works for map-based styling bindings.\n     *\n     * Note that this function is not designed to be called in isolation (use\n     * the `flushStyling` function so that it can call this function for both\n     * the styles and classes contexts).\n     */\n    function applyStylingViaContext(context, tNode, renderer, element, bindingData, bitMaskValue, applyStylingFn, sanitizer, hostBindingsMode, isClassBased) {\n        var bitMask = normalizeBitMaskValue(bitMaskValue);\n        var stylingMapsSyncFn = null;\n        var applyAllValues = false;\n        var mapBindingsFlag = isClassBased ? 512 /* hasClassMapBindings */ : 16384 /* hasStyleMapBindings */;\n        if (hasConfig(tNode, mapBindingsFlag)) {\n            stylingMapsSyncFn = getStylingMapsSyncFn();\n            var mapsGuardMask = getGuardMask(context, 2 /* ValuesStartPosition */, hostBindingsMode);\n            applyAllValues = (bitMask & mapsGuardMask) !== 0;\n        }\n        var valuesCount = getValuesCount(context);\n        var totalBindingsToVisit = 1;\n        var mapsMode = applyAllValues ? 1 /* ApplyAllValues */ : 0 /* TraverseValues */;\n        if (hostBindingsMode) {\n            mapsMode |= 8 /* RecurseInnerMaps */;\n            totalBindingsToVisit = valuesCount - 1;\n        }\n        var i = getPropValuesStartPosition(context, tNode, isClassBased);\n        while (i < context.length) {\n            var guardMask = getGuardMask(context, i, hostBindingsMode);\n            if (bitMask & guardMask) {\n                var valueApplied = false;\n                var prop = getProp(context, i);\n                var defaultValue = getDefaultValue(context, i);\n                // Part 1: Visit the `[styling.prop]` value\n                for (var j = 0; j < totalBindingsToVisit; j++) {\n                    var bindingIndex = getBindingValue(context, i, j);\n                    if (!valueApplied && bindingIndex !== 0) {\n                        var value = getValue(bindingData, bindingIndex);\n                        if (isStylingValueDefined(value)) {\n                            var checkValueOnly = hostBindingsMode && j === 0;\n                            if (!checkValueOnly) {\n                                var finalValue = sanitizer && isSanitizationRequired(context, i) ?\n                                    sanitizer(prop, value, 2 /* SanitizeOnly */) :\n                                    unwrapSafeValue(value);\n                                applyStylingFn(renderer, element, prop, finalValue, bindingIndex);\n                            }\n                            valueApplied = true;\n                        }\n                    }\n                    // Part 2: Visit the `[style]` or `[class]` map-based value\n                    if (stylingMapsSyncFn) {\n                        // determine whether or not to apply the target property or to skip it\n                        var mode = mapsMode | (valueApplied ? 4 /* SkipTargetProp */ :\n                            2 /* ApplyTargetProp */);\n                        // the first column in the context (when `j == 0`) is special-cased for\n                        // template bindings. If and when host bindings are being processed then\n                        // the first column will still be iterated over, but the values will only\n                        // be checked against (not applied). If and when this happens we need to\n                        // notify the map-based syncing code to know not to apply the values it\n                        // comes across in the very first map-based binding (which is also located\n                        // in column zero).\n                        if (hostBindingsMode && j === 0) {\n                            mode |= 16 /* CheckValuesOnly */;\n                        }\n                        var valueAppliedWithinMap = stylingMapsSyncFn(context, renderer, element, bindingData, j, applyStylingFn, sanitizer, mode, prop, defaultValue);\n                        valueApplied = valueApplied || valueAppliedWithinMap;\n                    }\n                }\n                // Part 3: apply the default value (e.g. `<div style=\"width:200\">` => `200px` gets applied)\n                // if the value has not yet been applied then a truthy value does not exist in the\n                // prop-based or map-based bindings code. If and when this happens, just apply the\n                // default value (even if the default value is `null`).\n                if (!valueApplied) {\n                    applyStylingFn(renderer, element, prop, defaultValue);\n                }\n            }\n            i += 4 /* BindingsStartOffset */ + valuesCount;\n        }\n        // the map-based styling entries may have not applied all their\n        // values. For this reason, one more call to the sync function\n        // needs to be issued at the end.\n        if (stylingMapsSyncFn) {\n            if (hostBindingsMode) {\n                mapsMode |= 16 /* CheckValuesOnly */;\n            }\n            stylingMapsSyncFn(context, renderer, element, bindingData, 0, applyStylingFn, sanitizer, mapsMode);\n        }\n    }\n    /**\n     * Applies the provided styling map to the element directly (without context resolution).\n     *\n     * This function is designed to be run from the styling instructions and will be called\n     * automatically. This function is intended to be used for performance reasons in the\n     * event that there is no need to apply styling via context resolution.\n     *\n     * This function has three different cases that can occur (for each item in the map):\n     *\n     * - Case 1: Attempt to apply the current value in the map to the element (if it's `non null`).\n     *\n     * - Case 2: If a map value fails to be applied then the algorithm will find a matching entry in\n     *           the initial values present in the context and attempt to apply that.\n     *\n     * - Default Case: If the initial value cannot be applied then a default value of `null` will be\n     *                 applied (which will remove the style/class value from the element).\n     *\n     * See `allowDirectStylingApply` to learn the logic used to determine whether any style/class\n     * bindings can be directly applied.\n     *\n     * @returns whether or not the styling map was applied to the element.\n     */\n    function applyStylingMapDirectly(renderer, context, tNode, element, data, bindingIndex, value, isClassBased, sanitizer, forceUpdate, bindingValueContainsInitial) {\n        var oldValue = getValue(data, bindingIndex);\n        if (forceUpdate || hasValueChanged(oldValue, value)) {\n            var hasInitial = hasConfig(tNode, 256 /* hasInitialStyling */);\n            var initialValue = hasInitial && !bindingValueContainsInitial ? getInitialStylingValue(context) : null;\n            setValue(data, bindingIndex, value);\n            // the cached value is the last snapshot of the style or class\n            // attribute value and is used in the if statement below to\n            // keep track of internal/external changes.\n            var cachedValueIndex = bindingIndex + 1;\n            var cachedValue = getValue(data, cachedValueIndex);\n            if (cachedValue === NO_CHANGE) {\n                cachedValue = initialValue;\n            }\n            cachedValue = typeof cachedValue !== 'string' ? '' : cachedValue;\n            // If a class/style value was modified externally then the styling\n            // fast pass cannot guarantee that the external values are retained.\n            // When this happens, the algorithm will bail out and not write to\n            // the style or className attribute directly.\n            var propBindingsFlag = isClassBased ? 1024 /* hasClassPropBindings */ : 32768 /* hasStylePropBindings */;\n            var writeToAttrDirectly = !hasConfig(tNode, propBindingsFlag);\n            if (writeToAttrDirectly &&\n                checkIfExternallyModified(element, cachedValue, isClassBased)) {\n                writeToAttrDirectly = false;\n                if (oldValue !== VALUE_IS_EXTERNALLY_MODIFIED) {\n                    // direct styling will reset the attribute entirely each time,\n                    // and, for this reason, if the algorithm decides it cannot\n                    // write to the class/style attributes directly then it must\n                    // reset all the previous style/class values before it starts\n                    // to apply values in the non-direct way.\n                    removeStylingValues(renderer, element, oldValue, isClassBased);\n                    // this will instruct the algorithm not to apply class or style\n                    // values directly anymore.\n                    setValue(data, cachedValueIndex, VALUE_IS_EXTERNALLY_MODIFIED);\n                }\n            }\n            if (writeToAttrDirectly) {\n                var initialValue_1 = hasInitial && !bindingValueContainsInitial ? getInitialStylingValue(context) : null;\n                var valueToApply = writeStylingValueDirectly(renderer, element, value, isClassBased, initialValue_1);\n                setValue(data, cachedValueIndex, valueToApply || null);\n            }\n            else {\n                var applyFn = isClassBased ? setClass : setStyle;\n                var map = normalizeIntoStylingMap(oldValue, value, !isClassBased);\n                var initialStyles = hasInitial ? getStylingMapArray(context) : null;\n                for (var i = 1 /* ValuesStartPosition */; i < map.length; i += 2 /* TupleSize */) {\n                    var prop = getMapProp(map, i);\n                    var value_1 = getMapValue(map, i);\n                    // case 1: apply the map value (if it exists)\n                    var applied = applyStylingValue(renderer, element, prop, value_1, applyFn, bindingIndex, sanitizer);\n                    // case 2: apply the initial value (if it exists)\n                    if (!applied && initialStyles) {\n                        applied = findAndApplyMapValue(renderer, element, applyFn, initialStyles, prop, bindingIndex, sanitizer);\n                    }\n                    // default case: apply `null` to remove the value\n                    if (!applied) {\n                        applyFn(renderer, element, prop, null, bindingIndex);\n                    }\n                }\n                var state = getStylingState(element, TEMPLATE_DIRECTIVE_INDEX);\n                if (isClassBased) {\n                    state.lastDirectClassMap = map;\n                }\n                else {\n                    state.lastDirectStyleMap = map;\n                }\n            }\n        }\n    }\n    function writeStylingValueDirectly(renderer, element, value, isClassBased, initialValue) {\n        var valueToApply;\n        if (isClassBased) {\n            valueToApply = typeof value === 'string' ? value : objectToClassName(value);\n            if (initialValue !== null) {\n                valueToApply = concatString(initialValue, valueToApply, ' ');\n            }\n            setClassName(renderer, element, valueToApply);\n        }\n        else {\n            valueToApply = forceStylesAsString(value, true);\n            if (initialValue !== null) {\n                valueToApply = initialValue + ';' + valueToApply;\n            }\n            setStyleAttr(renderer, element, valueToApply);\n        }\n        return valueToApply;\n    }\n    /**\n     * Applies the provided styling prop/value to the element directly (without context resolution).\n     *\n     * This function is designed to be run from the styling instructions and will be called\n     * automatically. This function is intended to be used for performance reasons in the\n     * event that there is no need to apply styling via context resolution.\n     *\n     * This function has four different cases that can occur:\n     *\n     * - Case 1: Apply the provided prop/value (style or class) entry to the element\n     *           (if it is `non null`).\n     *\n     * - Case 2: If value does not get applied (because its `null` or `undefined`) then the algorithm\n     *           will check to see if a styling map value was applied to the element as well just\n     *           before this (via `styleMap` or `classMap`). If and when a map is present then the\n      *          algorithm will find the matching property in the map and apply its value.\n      *\n     * - Case 3: If a map value fails to be applied then the algorithm will check to see if there\n     *           are any initial values present and attempt to apply a matching value based on\n     *           the target prop.\n     *\n     * - Default Case: If a matching initial value cannot be applied then a default value\n     *                 of `null` will be applied (which will remove the style/class value\n     *                 from the element).\n     *\n     * See `allowDirectStylingApply` to learn the logic used to determine whether any style/class\n     * bindings can be directly applied.\n     *\n     * @returns whether or not the prop/value styling was applied to the element.\n     */\n    function applyStylingValueDirectly(renderer, context, tNode, element, data, bindingIndex, prop, value, isClassBased, sanitizer) {\n        var applied = false;\n        if (hasValueChanged(data[bindingIndex], value)) {\n            setValue(data, bindingIndex, value);\n            var applyFn = isClassBased ? setClass : setStyle;\n            // case 1: apply the provided value (if it exists)\n            applied = applyStylingValue(renderer, element, prop, value, applyFn, bindingIndex, sanitizer);\n            // case 2: find the matching property in a styling map and apply the detected value\n            var mapBindingsFlag = isClassBased ? 512 /* hasClassMapBindings */ : 16384 /* hasStyleMapBindings */;\n            if (!applied && hasConfig(tNode, mapBindingsFlag)) {\n                var state = getStylingState(element, TEMPLATE_DIRECTIVE_INDEX);\n                var map = isClassBased ? state.lastDirectClassMap : state.lastDirectStyleMap;\n                applied = map ?\n                    findAndApplyMapValue(renderer, element, applyFn, map, prop, bindingIndex, sanitizer) :\n                    false;\n            }\n            // case 3: apply the initial value (if it exists)\n            if (!applied && hasConfig(tNode, 256 /* hasInitialStyling */)) {\n                var map = getStylingMapArray(context);\n                applied =\n                    map ? findAndApplyMapValue(renderer, element, applyFn, map, prop, bindingIndex) : false;\n            }\n            // default case: apply `null` to remove the value\n            if (!applied) {\n                applyFn(renderer, element, prop, null, bindingIndex);\n            }\n        }\n        return applied;\n    }\n    function applyStylingValue(renderer, element, prop, value, applyFn, bindingIndex, sanitizer) {\n        var valueToApply = unwrapSafeValue(value);\n        if (isStylingValueDefined(valueToApply)) {\n            valueToApply =\n                sanitizer ? sanitizer(prop, value, 3 /* ValidateAndSanitize */) : valueToApply;\n            applyFn(renderer, element, prop, valueToApply, bindingIndex);\n            return true;\n        }\n        return false;\n    }\n    function findAndApplyMapValue(renderer, element, applyFn, map, prop, bindingIndex, sanitizer) {\n        for (var i = 1 /* ValuesStartPosition */; i < map.length; i += 2 /* TupleSize */) {\n            var p = getMapProp(map, i);\n            if (p === prop) {\n                var valueToApply = getMapValue(map, i);\n                valueToApply = sanitizer ?\n                    sanitizer(prop, valueToApply, 3 /* ValidateAndSanitize */) :\n                    valueToApply;\n                applyFn(renderer, element, prop, valueToApply, bindingIndex);\n                return true;\n            }\n            if (p > prop) {\n                break;\n            }\n        }\n        return false;\n    }\n    function normalizeBitMaskValue(value) {\n        // if pass => apply all values (-1 implies that all bits are flipped to true)\n        if (value === true)\n            return -1;\n        // if pass => skip all values\n        if (value === false)\n            return 0;\n        // return the bit mask value as is\n        return value;\n    }\n    var _activeStylingMapApplyFn = null;\n    function getStylingMapsSyncFn() {\n        return _activeStylingMapApplyFn;\n    }\n    function setStylingMapsSyncFn(fn) {\n        _activeStylingMapApplyFn = fn;\n    }\n    /**\n     * Assigns a style value to a style property for the given element.\n     */\n    var setStyle = function (renderer, native, prop, value) {\n        if (renderer !== null) {\n            // Use `isStylingValueDefined` to account for falsy values that should be bound like 0.\n            if (isStylingValueDefined(value)) {\n                // opacity, z-index and flexbox all have number values\n                // and these need to be converted into strings so that\n                // they can be assigned properly.\n                value = value.toString();\n                ngDevMode && ngDevMode.rendererSetStyle++;\n                if (isProceduralRenderer(renderer)) {\n                    renderer.setStyle(native, prop, value, RendererStyleFlags3.DashCase);\n                }\n                else {\n                    // The reason why native style may be `null` is either because\n                    // it's a container element or it's a part of a test\n                    // environment that doesn't have styling. In either\n                    // case it's safe not to apply styling to the element.\n                    var nativeStyle = native.style;\n                    if (nativeStyle != null) {\n                        nativeStyle.setProperty(prop, value);\n                    }\n                }\n            }\n            else {\n                ngDevMode && ngDevMode.rendererRemoveStyle++;\n                if (isProceduralRenderer(renderer)) {\n                    renderer.removeStyle(native, prop, RendererStyleFlags3.DashCase);\n                }\n                else {\n                    var nativeStyle = native.style;\n                    if (nativeStyle != null) {\n                        nativeStyle.removeProperty(prop);\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * Adds/removes the provided className value to the provided element.\n     */\n    var setClass = function (renderer, native, className, value) {\n        if (renderer !== null && className !== '') {\n            if (value) {\n                ngDevMode && ngDevMode.rendererAddClass++;\n                if (isProceduralRenderer(renderer)) {\n                    renderer.addClass(native, className);\n                }\n                else {\n                    // the reason why classList may be `null` is either because\n                    // it's a container element or it's a part of a test\n                    // environment that doesn't have styling. In either\n                    // case it's safe not to apply styling to the element.\n                    var classList = native.classList;\n                    if (classList != null) {\n                        classList.add(className);\n                    }\n                }\n            }\n            else {\n                ngDevMode && ngDevMode.rendererRemoveClass++;\n                if (isProceduralRenderer(renderer)) {\n                    renderer.removeClass(native, className);\n                }\n                else {\n                    var classList = native.classList;\n                    if (classList != null) {\n                        classList.remove(className);\n                    }\n                }\n            }\n        }\n    };\n    var setClassName = function (renderer, native, className) {\n        if (renderer !== null) {\n            if (isProceduralRenderer(renderer)) {\n                renderer.setAttribute(native, 'class', className);\n            }\n            else {\n                native.className = className;\n            }\n        }\n    };\n    var setStyleAttr = function (renderer, native, value) {\n        if (renderer !== null) {\n            if (isProceduralRenderer(renderer)) {\n                renderer.setAttribute(native, 'style', value);\n            }\n            else {\n                native.setAttribute('style', value);\n            }\n        }\n    };\n    /**\n     * Iterates over all provided styling entries and renders them on the element.\n     *\n     * This function is used alongside a `StylingMapArray` entry. This entry is not\n     * the same as the `TStylingContext` and is only really used when an element contains\n     * initial styling values (e.g. `<div style=\"width:200px\">`), but no style/class bindings\n     * are present. If and when that happens then this function will be called to render all\n     * initial styling values on an element.\n     */\n    function renderStylingMap(renderer, element, stylingValues, isClassBased) {\n        var stylingMapArr = getStylingMapArray(stylingValues);\n        if (stylingMapArr) {\n            for (var i = 1 /* ValuesStartPosition */; i < stylingMapArr.length; i += 2 /* TupleSize */) {\n                var prop = getMapProp(stylingMapArr, i);\n                var value = getMapValue(stylingMapArr, i);\n                if (isClassBased) {\n                    setClass(renderer, element, prop, value, null);\n                }\n                else {\n                    setStyle(renderer, element, prop, value, null);\n                }\n            }\n        }\n    }\n    function objectToClassName(obj) {\n        var str = '';\n        if (obj) {\n            for (var key in obj) {\n                var value = obj[key];\n                if (value) {\n                    str += (str.length ? ' ' : '') + key;\n                }\n            }\n        }\n        return str;\n    }\n    /**\n     * Determines whether or not an element style/className value has changed since the last update.\n     *\n     * This function helps Angular determine if a style or class attribute value was\n     * modified by an external plugin or API outside of the style binding code. This\n     * means any JS code that adds/removes class/style values on an element outside\n     * of Angular's styling binding algorithm.\n     *\n     * @returns true when the value was modified externally.\n     */\n    function checkIfExternallyModified(element, cachedValue, isClassBased) {\n        // this means it was checked before and there is no reason\n        // to compare the style/class values again. Either that or\n        // web workers are being used.\n        if (_global.Node === 'undefined' || cachedValue === VALUE_IS_EXTERNALLY_MODIFIED)\n            return true;\n        // comparing the DOM value against the cached value is the best way to\n        // see if something has changed.\n        var currentValue = (isClassBased ? element.className : (element.style && element.style.cssText)) || '';\n        return currentValue !== (cachedValue || '');\n    }\n    /**\n     * Removes provided styling values from the element\n     */\n    function removeStylingValues(renderer, element, values, isClassBased) {\n        var arr;\n        if (isStylingMapArray(values)) {\n            arr = values;\n        }\n        else {\n            arr = normalizeIntoStylingMap(null, values, !isClassBased);\n        }\n        var applyFn = isClassBased ? setClass : setStyle;\n        for (var i = 1 /* ValuesStartPosition */; i < arr.length; i += 2 /* TupleSize */) {\n            var value = getMapValue(arr, i);\n            if (value) {\n                var prop = getMapProp(arr, i);\n                applyFn(renderer, element, prop, null);\n            }\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Gets the parent LView of the passed LView, if the PARENT is an LContainer, will get the parent of\n     * that LContainer, which is an LView\n     * @param lView the lView whose parent to get\n     */\n    function getLViewParent(lView) {\n        ngDevMode && assertLView(lView);\n        var parent = lView[PARENT];\n        return isLContainer(parent) ? parent[PARENT] : parent;\n    }\n    /**\n     * Retrieve the root view from any component or `LView` by walking the parent `LView` until\n     * reaching the root `LView`.\n     *\n     * @param componentOrLView any component or `LView`\n     */\n    function getRootView(componentOrLView) {\n        ngDevMode && assertDefined(componentOrLView, 'component');\n        var lView = isLView(componentOrLView) ? componentOrLView : readPatchedLView(componentOrLView);\n        while (lView && !(lView[FLAGS] & 512 /* IsRoot */)) {\n            lView = getLViewParent(lView);\n        }\n        ngDevMode && assertLView(lView);\n        return lView;\n    }\n    /**\n     * Returns the `RootContext` instance that is associated with\n     * the application where the target is situated. It does this by walking the parent views until it\n     * gets to the root view, then getting the context off of that.\n     *\n     * @param viewOrComponent the `LView` or component to get the root context for.\n     */\n    function getRootContext(viewOrComponent) {\n        var rootView = getRootView(viewOrComponent);\n        ngDevMode &&\n            assertDefined(rootView[CONTEXT], 'RootView has no context. Perhaps it is disconnected?');\n        return rootView[CONTEXT];\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Advances to an element for later binding instructions.\n     *\n     * Used in conjunction with instructions like {@link property} to act on elements with specified\n     * indices, for example those created with {@link element} or {@link elementStart}.\n     *\n     * ```ts\n     * (rf: RenderFlags, ctx: any) => {\n      *   if (rf & 1) {\n      *     text(0, 'Hello');\n      *     text(1, 'Goodbye')\n      *     element(2, 'div');\n      *   }\n      *   if (rf & 2) {\n      *     advance(2); // Advance twice to the <div>.\n      *     property('title', 'test');\n      *   }\n      *  }\n      * ```\n      * @param delta Number of elements to advance forwards by.\n      *\n      * @codeGenApi\n      */\n    function ɵɵadvance(delta) {\n        ngDevMode && assertGreaterThan(delta, 0, 'Can only advance forward');\n        selectIndexInternal(getLView(), getSelectedIndex() + delta, getCheckNoChangesMode());\n    }\n    /**\n     * Selects an element for later binding instructions.\n     * @deprecated No longer being generated, but still used in unit tests.\n     * @codeGenApi\n     */\n    function ɵɵselect(index) {\n        selectIndexInternal(getLView(), index, getCheckNoChangesMode());\n    }\n    function selectIndexInternal(lView, index, checkNoChangesMode) {\n        ngDevMode && assertGreaterThan(index, -1, 'Invalid index');\n        ngDevMode && assertDataInRange(lView, index + HEADER_OFFSET);\n        if (hasActiveElementFlag(1 /* RunExitFn */)) {\n            executeElementExitFn();\n        }\n        // Flush the initial hooks for elements in the view that have been added up to this point.\n        // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n        if (!checkNoChangesMode) {\n            var hooksInitPhaseCompleted = (lView[FLAGS] & 3 /* InitPhaseStateMask */) === 3 /* InitPhaseCompleted */;\n            if (hooksInitPhaseCompleted) {\n                var preOrderCheckHooks = lView[TVIEW].preOrderCheckHooks;\n                if (preOrderCheckHooks !== null) {\n                    executeCheckHooks(lView, preOrderCheckHooks, index);\n                }\n            }\n            else {\n                var preOrderHooks = lView[TVIEW].preOrderHooks;\n                if (preOrderHooks !== null) {\n                    executeInitAndCheckHooks(lView, preOrderHooks, 0 /* OnInitHooksToBeRun */, index);\n                }\n            }\n        }\n        // We must set the selected index *after* running the hooks, because hooks may have side-effects\n        // that cause other template functions to run, thus updating the selected index, which is global\n        // state. If we run `setSelectedIndex` *before* we run the hooks, in some cases the selected index\n        // will be altered by the time we leave the `ɵɵadvance` instruction.\n        setSelectedIndex(index);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Marks that the next string is for element.\n     *\n     * See `I18nMutateOpCodes` documentation.\n     */\n    var ELEMENT_MARKER = {\n        marker: 'element'\n    };\n    /**\n     * Marks that the next string is for comment.\n     *\n     * See `I18nMutateOpCodes` documentation.\n     */\n    var COMMENT_MARKER = {\n        marker: 'comment'\n    };\n    // Note: This hack is necessary so we don't erroneously get a circular dependency\n    // failure based on types.\n    var unusedValueExportToPlacateAjd$6 = 1;\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function attachDebugObject(obj, debug) {\n        Object.defineProperty(obj, 'debug', { value: debug, enumerable: false });\n    }\n\n    /**\n    * @license\n    * Copyright Google Inc. All Rights Reserved.\n    *\n    * Use of this source code is governed by an MIT-style license that can be\n    * found in the LICENSE file at https://angular.io/license\n    */\n    /**\n     * --------\n     *\n     * This file contains the algorithm logic for applying map-based bindings\n     * such as `[style]` and `[class]`.\n     *\n     * --------\n     */\n    /**\n     * Enables support for map-based styling bindings (e.g. `[style]` and `[class]` bindings).\n     */\n    function activateStylingMapFeature() {\n        setStylingMapsSyncFn(syncStylingMap);\n    }\n    /**\n     * Used to apply styling values presently within any map-based bindings on an element.\n     *\n     * Angular supports map-based styling bindings which can be applied via the\n     * `[style]` and `[class]` bindings which can be placed on any HTML element.\n     * These bindings can work independently, together or alongside prop-based\n     * styling bindings (e.g. `<div [style]=\"x\" [style.width]=\"w\">`).\n     *\n     * If a map-based styling binding is detected by the compiler, the following\n     * AOT code is produced:\n     *\n     * ```typescript\n     * styleMap(ctx.styles); // styles = {key:value}\n     * classMap(ctx.classes); // classes = {key:value}|string\n     * ```\n     *\n     * If and when either of the instructions above are evaluated, then the code\n     * present in this file is included into the bundle. The mechanism used, to\n     * activate support for map-based bindings at runtime is possible via the\n     * `activeStylingMapFeature` function (which is also present in this file).\n     *\n     * # The Algorithm\n     * Whenever a map-based binding updates (which is when the identity of the\n     * map-value changes) then the map is iterated over and a `StylingMapArray` array\n     * is produced. The `StylingMapArray` instance is stored in the binding location\n     * where the `BINDING_INDEX` is situated when the `styleMap()` or `classMap()`\n     * instruction were called. Once the binding changes, then the internal `bitMask`\n     * value is marked as dirty.\n     *\n     * Styling values are applied once CD exits the element (which happens when\n     * the `advance(n)` instruction is called or the template function exits). When\n     * this occurs, all prop-based bindings are applied. If a map-based binding is\n     * present then a special flushing function (called a sync function) is made\n     * available and it will be called each time a styling property is flushed.\n     *\n     * The flushing algorithm is designed to apply styling for a property (which is\n     * a CSS property or a className value) one by one. If map-based bindings\n     * are present, then the flushing algorithm will keep calling the maps styling\n     * sync function each time a property is visited. This way, the flushing\n     * behavior of map-based bindings will always be at the same property level\n     * as the current prop-based property being iterated over (because everything\n     * is alphabetically sorted).\n     *\n     * Let's imagine we have the following HTML template code:\n     *\n     * ```html\n     * <div [style]=\"{width:'100px', height:'200px', 'z-index':'10'}\"\n     *      [style.width.px]=\"200\">...</div>\n     * ```\n     *\n     * When CD occurs, both the `[style]` and `[style.width]` bindings\n     * are evaluated. Then when the styles are flushed on screen, the\n     * following operations happen:\n     *\n     * 1. `[style.width]` is attempted to be written to the element.\n     *\n     * 2.  Once that happens, the algorithm instructs the map-based\n     *     entries (`[style]` in this case) to \"catch up\" and apply\n     *     all values up to the `width` value. When this happens the\n     *     `height` value is applied to the element (since it is\n     *     alphabetically situated before the `width` property).\n     *\n     * 3. Since there are no more prop-based entries anymore, the\n     *    loop exits and then, just before the flushing ends, it\n     *    instructs all map-based bindings to \"finish up\" applying\n     *    their values.\n     *\n     * 4. The only remaining value within the map-based entries is\n     *    the `z-index` value (`width` got skipped because it was\n     *    successfully applied via the prop-based `[style.width]`\n     *    binding). Since all map-based entries are told to \"finish up\",\n     *    the `z-index` value is iterated over and it is then applied\n     *    to the element.\n     *\n     * The most important thing to take note of here is that prop-based\n     * bindings are evaluated in order alongside map-based bindings.\n     * This allows all styling across an element to be applied in O(n)\n     * time (a similar algorithm is that of the array merge algorithm\n     * in merge sort).\n     */\n    var syncStylingMap = function (context, renderer, element, data, sourceIndex, applyStylingFn, sanitizer, mode, targetProp, defaultValue) {\n        var targetPropValueWasApplied = false;\n        // once the map-based styling code is activate it is never deactivated. For this reason a\n        // check to see if the current styling context has any map based bindings is required.\n        var totalMaps = getValuesCount(context);\n        if (totalMaps) {\n            var runTheSyncAlgorithm = true;\n            var loopUntilEnd = !targetProp;\n            // If the code is told to finish up (run until the end), but the mode\n            // hasn't been flagged to apply values (it only traverses values) then\n            // there is no point in iterating over the array because nothing will\n            // be applied to the element.\n            if (loopUntilEnd && (mode & 1 /* ApplyAllValues */) === 0) {\n                runTheSyncAlgorithm = false;\n                targetPropValueWasApplied = true;\n            }\n            if (runTheSyncAlgorithm) {\n                targetPropValueWasApplied = innerSyncStylingMap(context, renderer, element, data, applyStylingFn, sanitizer, mode, targetProp || null, sourceIndex, defaultValue || null);\n            }\n            if (loopUntilEnd) {\n                resetSyncCursors();\n            }\n        }\n        return targetPropValueWasApplied;\n    };\n    /**\n     * Recursive function designed to apply map-based styling to an element one map at a time.\n     *\n     * This function is designed to be called from the `syncStylingMap` function and will\n     * apply map-based styling data one map at a time to the provided `element`.\n     *\n     * This function is recursive and it will call itself if a follow-up map value is to be\n     * processed. To learn more about how the algorithm works, see `syncStylingMap`.\n     */\n    function innerSyncStylingMap(context, renderer, element, data, applyStylingFn, sanitizer, mode, targetProp, currentMapIndex, defaultValue) {\n        var totalMaps = getValuesCount(context) - 1; // maps have no default value\n        var mapsLimit = totalMaps - 1;\n        var recurseInnerMaps = currentMapIndex < mapsLimit && (mode & 8 /* RecurseInnerMaps */) !== 0;\n        var checkValuesOnly = (mode & 16 /* CheckValuesOnly */) !== 0;\n        if (checkValuesOnly) {\n            // inner modes do not check values ever (that can only happen\n            // when sourceIndex === 0)\n            mode &= ~16 /* CheckValuesOnly */;\n        }\n        var targetPropValueWasApplied = false;\n        if (currentMapIndex <= mapsLimit) {\n            var cursor = getCurrentSyncCursor(currentMapIndex);\n            var bindingIndex = getBindingValue(context, 2 /* ValuesStartPosition */, currentMapIndex);\n            var stylingMapArr = getValue(data, bindingIndex);\n            if (stylingMapArr) {\n                while (cursor < stylingMapArr.length) {\n                    var prop = getMapProp(stylingMapArr, cursor);\n                    var iteratedTooFar = targetProp && prop > targetProp;\n                    var isTargetPropMatched = !iteratedTooFar && prop === targetProp;\n                    var value = getMapValue(stylingMapArr, cursor);\n                    var valueIsDefined = isStylingValueDefined(value);\n                    // the recursive code is designed to keep applying until\n                    // it reaches or goes past the target prop. If and when\n                    // this happens then it will stop processing values, but\n                    // all other map values must also catch up to the same\n                    // point. This is why a recursive call is still issued\n                    // even if the code has iterated too far.\n                    var innerMode = iteratedTooFar ? mode : resolveInnerMapMode(mode, valueIsDefined, isTargetPropMatched);\n                    var innerProp = iteratedTooFar ? targetProp : prop;\n                    var valueApplied = recurseInnerMaps ?\n                        innerSyncStylingMap(context, renderer, element, data, applyStylingFn, sanitizer, innerMode, innerProp, currentMapIndex + 1, defaultValue) :\n                        false;\n                    if (iteratedTooFar) {\n                        if (!targetPropValueWasApplied) {\n                            targetPropValueWasApplied = valueApplied;\n                        }\n                        break;\n                    }\n                    if (!valueApplied && isValueAllowedToBeApplied(mode, isTargetPropMatched)) {\n                        valueApplied = true;\n                        if (!checkValuesOnly) {\n                            var useDefault = isTargetPropMatched && !valueIsDefined;\n                            var bindingIndexToApply = isTargetPropMatched ? bindingIndex : null;\n                            var finalValue = void 0;\n                            if (useDefault) {\n                                finalValue = defaultValue;\n                            }\n                            else {\n                                finalValue = sanitizer ?\n                                    sanitizer(prop, value, 3 /* ValidateAndSanitize */) :\n                                    (value ? unwrapSafeValue(value) : null);\n                            }\n                            applyStylingFn(renderer, element, prop, finalValue, bindingIndexToApply);\n                        }\n                    }\n                    targetPropValueWasApplied = valueApplied && isTargetPropMatched;\n                    cursor += 2 /* TupleSize */;\n                }\n                setCurrentSyncCursor(currentMapIndex, cursor);\n                // this is a fallback case in the event that the styling map is `null` for this\n                // binding but there are other map-based bindings that need to be evaluated\n                // afterwards. If the `prop` value is falsy then the intention is to cycle\n                // through all of the properties in the remaining maps as well. If the current\n                // styling map is too short then there are no values to iterate over. In either\n                // case the follow-up maps need to be iterated over.\n                if (recurseInnerMaps &&\n                    (stylingMapArr.length === 1 /* ValuesStartPosition */ || !targetProp)) {\n                    targetPropValueWasApplied = innerSyncStylingMap(context, renderer, element, data, applyStylingFn, sanitizer, mode, targetProp, currentMapIndex + 1, defaultValue);\n                }\n            }\n            else if (recurseInnerMaps) {\n                targetPropValueWasApplied = innerSyncStylingMap(context, renderer, element, data, applyStylingFn, sanitizer, mode, targetProp, currentMapIndex + 1, defaultValue);\n            }\n        }\n        return targetPropValueWasApplied;\n    }\n    /**\n     * Used to determine the mode for the inner recursive call.\n     *\n     * If an inner map is iterated on then this is done so for one\n     * of two reasons:\n     *\n     * - value is being applied:\n     *   if the value is being applied from this current styling\n     *   map then there is no need to apply it in a deeper map\n     *   (i.e. the `SkipTargetProp` flag is set)\n     *\n     * - value is being not applied:\n     *   apply the value if it is found in a deeper map.\n     *   (i.e. the `SkipTargetProp` flag is unset)\n     *\n     * When these reasons are encountered the flags will for the\n     * inner map mode will be configured.\n     */\n    function resolveInnerMapMode(currentMode, valueIsDefined, isTargetPropMatched) {\n        var innerMode = currentMode;\n        // the statements below figures out whether or not an inner styling map\n        // is allowed to apply its value or not. The main thing to keep note\n        // of is that if the target prop isn't matched then its expected that\n        // all values before it are allowed to be applied so long as \"apply all values\"\n        // is set to true.\n        var applyAllValues = currentMode & 1 /* ApplyAllValues */;\n        var applyTargetProp = currentMode & 2 /* ApplyTargetProp */;\n        var allowInnerApply = !valueIsDefined && (isTargetPropMatched ? applyTargetProp : applyAllValues);\n        if (allowInnerApply) {\n            // case 1: set the mode to apply the targeted prop value if it\n            // ends up being encountered in another map value\n            innerMode |= 2 /* ApplyTargetProp */;\n            innerMode &= ~4 /* SkipTargetProp */;\n        }\n        else {\n            // case 2: set the mode to skip the targeted prop value if it\n            // ends up being encountered in another map value\n            innerMode |= 4 /* SkipTargetProp */;\n            innerMode &= ~2 /* ApplyTargetProp */;\n        }\n        return innerMode;\n    }\n    /**\n     * Decides whether or not a prop/value entry will be applied to an element.\n     *\n     * To determine whether or not a value is to be applied,\n     * the following procedure is evaluated:\n     *\n     * First check to see the current `mode` status:\n     *  1. If the mode value permits all props to be applied then allow.\n     *    - But do not allow if the current prop is set to be skipped.\n     *  2. Otherwise if the current prop is permitted then allow.\n     */\n    function isValueAllowedToBeApplied(mode, isTargetPropMatched) {\n        var doApplyValue = (mode & 1 /* ApplyAllValues */) !== 0;\n        if (!doApplyValue) {\n            if (mode & 2 /* ApplyTargetProp */) {\n                doApplyValue = isTargetPropMatched;\n            }\n        }\n        else if ((mode & 4 /* SkipTargetProp */) && isTargetPropMatched) {\n            doApplyValue = false;\n        }\n        return doApplyValue;\n    }\n    /**\n     * Used to keep track of concurrent cursor values for multiple map-based styling bindings present on\n     * an element.\n     */\n    var MAP_CURSORS = [];\n    /**\n     * Used to reset the state of each cursor value being used to iterate over map-based styling\n     * bindings.\n     */\n    function resetSyncCursors() {\n        for (var i = 0; i < MAP_CURSORS.length; i++) {\n            MAP_CURSORS[i] = 1 /* ValuesStartPosition */;\n        }\n    }\n    /**\n     * Returns an active cursor value at a given mapIndex location.\n     */\n    function getCurrentSyncCursor(mapIndex) {\n        if (mapIndex >= MAP_CURSORS.length) {\n            MAP_CURSORS.push(1 /* ValuesStartPosition */);\n        }\n        return MAP_CURSORS[mapIndex];\n    }\n    /**\n     * Sets a cursor value at a given mapIndex location.\n     */\n    function setCurrentSyncCursor(mapIndex, indexValue) {\n        MAP_CURSORS[mapIndex] = indexValue;\n    }\n\n    /**\n     * Instantiates and attaches an instance of `TStylingContextDebug` to the provided context\n     */\n    function attachStylingDebugObject(context, tNode, isClassBased) {\n        var debug = new TStylingContextDebug(context, tNode, isClassBased);\n        attachDebugObject(context, debug);\n        return debug;\n    }\n    /**\n     * A human-readable debug summary of the styling data present within `TStylingContext`.\n     *\n     * This class is designed to be used within testing code or when an\n     * application has `ngDevMode` activated.\n     */\n    var TStylingContextDebug = /** @class */ (function () {\n        function TStylingContextDebug(context, _tNode, _isClassBased) {\n            this.context = context;\n            this._tNode = _tNode;\n            this._isClassBased = _isClassBased;\n        }\n        Object.defineProperty(TStylingContextDebug.prototype, \"config\", {\n            get: function () { return buildConfig(this._tNode, this._isClassBased); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(TStylingContextDebug.prototype, \"entries\", {\n            /**\n             * Returns a detailed summary of each styling entry in the context.\n             *\n             * See `DebugStylingContextEntry`.\n             */\n            get: function () {\n                var context = this.context;\n                var totalColumns = getValuesCount(context);\n                var entries = {};\n                var start = getPropValuesStartPosition(context, this._tNode, this._isClassBased);\n                var i = start;\n                while (i < context.length) {\n                    var prop = getProp(context, i);\n                    var templateBitMask = getGuardMask(context, i, false);\n                    var hostBindingsBitMask = getGuardMask(context, i, true);\n                    var defaultValue = getDefaultValue(context, i);\n                    var sanitizationRequired = isSanitizationRequired(context, i);\n                    var bindingsStartPosition = i + 4 /* BindingsStartOffset */;\n                    var sources = [];\n                    for (var j = 0; j < totalColumns; j++) {\n                        var bindingIndex = context[bindingsStartPosition + j];\n                        if (bindingIndex !== 0) {\n                            sources.push(bindingIndex);\n                        }\n                    }\n                    entries[prop] = {\n                        prop: prop,\n                        templateBitMask: templateBitMask,\n                        hostBindingsBitMask: hostBindingsBitMask,\n                        sanitizationRequired: sanitizationRequired,\n                        valuesCount: sources.length, defaultValue: defaultValue, sources: sources,\n                    };\n                    i += 4 /* BindingsStartOffset */ + totalColumns;\n                }\n                return entries;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Prints a detailed summary of each styling source grouped together with each binding index in\n         * the context.\n         */\n        TStylingContextDebug.prototype.printSources = function () {\n            var output = '\\n';\n            var context = this.context;\n            var prefix = this._isClassBased ? 'class' : 'style';\n            var bindingsBySource = [];\n            var totalColumns = getValuesCount(context);\n            var itemsPerRow = 4 /* BindingsStartOffset */ + totalColumns;\n            for (var i = 0; i < totalColumns; i++) {\n                var isDefaultColumn = i === totalColumns - 1;\n                var hostBindingsMode = i !== TEMPLATE_DIRECTIVE_INDEX;\n                var type = getTypeFromColumn(i, totalColumns);\n                var entries = [];\n                var j = 2 /* ValuesStartPosition */;\n                while (j < context.length) {\n                    var value = getBindingValue(context, j, i);\n                    if (isDefaultColumn || value > 0) {\n                        var bitMask = getGuardMask(context, j, hostBindingsMode);\n                        var bindingIndex = isDefaultColumn ? -1 : value;\n                        var prop = getProp(context, j);\n                        var isMapBased = prop === MAP_BASED_ENTRY_PROP_NAME;\n                        var binding = \"\" + prefix + (isMapBased ? '' : '.' + prop);\n                        entries.push({ binding: binding, value: value, bindingIndex: bindingIndex, bitMask: bitMask });\n                    }\n                    j += itemsPerRow;\n                }\n                bindingsBySource.push({ type: type, entries: entries.sort(function (a, b) { return a.bindingIndex - b.bindingIndex; }) });\n            }\n            bindingsBySource.forEach(function (entry) {\n                output += \"[\" + entry.type.toUpperCase() + \"]\\n\";\n                output += repeat('-', entry.type.length + 2) + '\\n';\n                var tab = '  ';\n                entry.entries.forEach(function (entry) {\n                    var isDefault = typeof entry.value !== 'number';\n                    var value = entry.value;\n                    if (!isDefault || value !== null) {\n                        output += tab + \"[\" + entry.binding + \"] = `\" + value + \"`\";\n                        output += '\\n';\n                    }\n                });\n                output += '\\n';\n            });\n            /* tslint:disable */\n            console.log(output);\n        };\n        /**\n         * Prints a detailed table of the entire styling context.\n         */\n        TStylingContextDebug.prototype.printTable = function () {\n            // IE (not Edge) is the only browser that doesn't support this feature. Because\n            // these debugging tools are not apart of the core of Angular (they are just\n            // extra tools) we can skip-out on older browsers.\n            if (!console.table) {\n                throw new Error('This feature is not supported in your browser');\n            }\n            var context = this.context;\n            var table = [];\n            var totalColumns = getValuesCount(context);\n            var itemsPerRow = 4 /* BindingsStartOffset */ + totalColumns;\n            var totalProps = Math.floor(context.length / itemsPerRow);\n            var i = 2 /* ValuesStartPosition */;\n            while (i < context.length) {\n                var prop = getProp(context, i);\n                var isMapBased = prop === MAP_BASED_ENTRY_PROP_NAME;\n                var entry = {\n                    prop: prop,\n                    'tpl mask': generateBitString(getGuardMask(context, i, false), isMapBased, totalProps),\n                    'host mask': generateBitString(getGuardMask(context, i, true), isMapBased, totalProps),\n                };\n                for (var j = 0; j < totalColumns; j++) {\n                    var key = getTypeFromColumn(j, totalColumns);\n                    var value = getBindingValue(context, i, j);\n                    entry[key] = value;\n                }\n                i += itemsPerRow;\n                table.push(entry);\n            }\n            /* tslint:disable */\n            console.table(table);\n        };\n        return TStylingContextDebug;\n    }());\n    function generateBitString(value, isMapBased, totalProps) {\n        if (isMapBased || value > 1) {\n            return \"0b\" + leftPad(value.toString(2), totalProps, '0');\n        }\n        return null;\n    }\n    function leftPad(value, max, pad) {\n        return repeat(pad, max - value.length) + value;\n    }\n    function getTypeFromColumn(index, totalColumns) {\n        if (index === TEMPLATE_DIRECTIVE_INDEX) {\n            return 'template';\n        }\n        else if (index === totalColumns - 1) {\n            return 'defaults';\n        }\n        else {\n            return \"dir #\" + index;\n        }\n    }\n    function repeat(c, times) {\n        var s = '';\n        for (var i = 0; i < times; i++) {\n            s += c;\n        }\n        return s;\n    }\n    /**\n     * A human-readable debug summary of the styling data present for a `DebugNode` instance.\n     *\n     * This class is designed to be used within testing code or when an\n     * application has `ngDevMode` activated.\n     */\n    var NodeStylingDebug = /** @class */ (function () {\n        function NodeStylingDebug(context, _tNode, _data, _isClassBased) {\n            this._tNode = _tNode;\n            this._data = _data;\n            this._isClassBased = _isClassBased;\n            this._sanitizer = null;\n            this._debugContext = isStylingContext(context) ?\n                new TStylingContextDebug(context, _tNode, _isClassBased) :\n                context;\n        }\n        Object.defineProperty(NodeStylingDebug.prototype, \"context\", {\n            get: function () { return this._debugContext; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Overrides the sanitizer used to process styles.\n         */\n        NodeStylingDebug.prototype.overrideSanitizer = function (sanitizer) { this._sanitizer = sanitizer; };\n        Object.defineProperty(NodeStylingDebug.prototype, \"summary\", {\n            /**\n             * Returns a detailed summary of each styling entry in the context and\n             * what their runtime representation is.\n             *\n             * See `LStylingSummary`.\n             */\n            get: function () {\n                var entries = {};\n                var config = this.config;\n                var data = this._data;\n                // the direct pass code doesn't convert [style] or [class] values\n                // into StylingMapArray instances. For this reason, the values\n                // need to be converted ahead of time since the styling debug\n                // relies on context resolution to figure out what styling\n                // values have been added/removed on the element.\n                if (config.allowDirectStyling && config.hasMapBindings) {\n                    data = data.concat([]); // make a copy\n                    this._convertMapBindingsToStylingMapArrays(data);\n                }\n                this._mapValues(data, function (prop, value, bindingIndex) {\n                    entries[prop] = { prop: prop, value: value, bindingIndex: bindingIndex };\n                });\n                return entries;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NodeStylingDebug.prototype, \"config\", {\n            get: function () { return buildConfig(this._tNode, this._isClassBased); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NodeStylingDebug.prototype, \"values\", {\n            /**\n             * Returns a key/value map of all the styles/classes that were last applied to the element.\n             */\n            get: function () {\n                var entries = {};\n                var config = this.config;\n                var data = this._data;\n                // the direct pass code doesn't convert [style] or [class] values\n                // into StylingMapArray instances. For this reason, the values\n                // need to be converted ahead of time since the styling debug\n                // relies on context resolution to figure out what styling\n                // values have been added/removed on the element.\n                if (config.allowDirectStyling && config.hasMapBindings) {\n                    data = data.concat([]); // make a copy\n                    this._convertMapBindingsToStylingMapArrays(data);\n                }\n                this._mapValues(data, function (prop, value) { entries[prop] = value; });\n                return entries;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        NodeStylingDebug.prototype._convertMapBindingsToStylingMapArrays = function (data) {\n            var context = this.context.context;\n            var limit = getPropValuesStartPosition(context, this._tNode, this._isClassBased);\n            for (var i = 2 /* ValuesStartPosition */ + 4 /* BindingsStartOffset */; i < limit; i++) {\n                var bindingIndex = context[i];\n                var bindingValue = bindingIndex !== 0 ? getValue(data, bindingIndex) : null;\n                if (bindingValue && !Array.isArray(bindingValue)) {\n                    var stylingMapArray = normalizeIntoStylingMap(null, bindingValue, !this._isClassBased);\n                    setValue(data, bindingIndex, stylingMapArray);\n                }\n            }\n        };\n        NodeStylingDebug.prototype._mapValues = function (data, fn) {\n            // there is no need to store/track an element instance. The\n            // element is only used when the styling algorithm attempts to\n            // style the value (and we mock out the stylingApplyFn anyway).\n            var mockElement = {};\n            var mapBindingsFlag = this._isClassBased ? 512 /* hasClassMapBindings */ : 16384 /* hasStyleMapBindings */;\n            var hasMaps = hasConfig(this._tNode, mapBindingsFlag);\n            if (hasMaps) {\n                activateStylingMapFeature();\n            }\n            var mapFn = function (renderer, element, prop, value, bindingIndex) { return fn(prop, value, bindingIndex || null); };\n            var sanitizer = this._isClassBased ? null : (this._sanitizer || getCurrentStyleSanitizer());\n            // run the template bindings\n            applyStylingViaContext(this.context.context, this._tNode, null, mockElement, data, true, mapFn, sanitizer, false, this._isClassBased);\n            // and also the host bindings\n            applyStylingViaContext(this.context.context, this._tNode, null, mockElement, data, true, mapFn, sanitizer, true, this._isClassBased);\n        };\n        return NodeStylingDebug;\n    }());\n    function buildConfig(tNode, isClassBased) {\n        var hasMapBindings = hasConfig(tNode, isClassBased ? 512 /* hasClassMapBindings */ : 16384 /* hasStyleMapBindings */);\n        var hasPropBindings = hasConfig(tNode, isClassBased ? 1024 /* hasClassPropBindings */ : 32768 /* hasStylePropBindings */);\n        var hasCollisions = hasConfig(tNode, isClassBased ? 8192 /* hasDuplicateClassBindings */ : 262144 /* hasDuplicateStyleBindings */);\n        var hasTemplateBindings = hasConfig(tNode, isClassBased ? 2048 /* hasTemplateClassBindings */ : 65536 /* hasTemplateStyleBindings */);\n        var hasHostBindings = hasConfig(tNode, isClassBased ? 4096 /* hasHostClassBindings */ : 131072 /* hasHostStyleBindings */);\n        // `firstTemplatePass` here is false because the context has already been constructed\n        // directly within the behavior of the debugging tools (outside of style/class debugging,\n        // the context is constructed during the first template pass).\n        var allowDirectStyling$1 = allowDirectStyling(tNode, isClassBased, false);\n        return {\n            hasMapBindings: hasMapBindings,\n            hasPropBindings: hasPropBindings,\n            hasCollisions: hasCollisions,\n            hasTemplateBindings: hasTemplateBindings,\n            hasHostBindings: hasHostBindings,\n            allowDirectStyling: allowDirectStyling$1,\n        };\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var NG_DEV_MODE = ((typeof ngDevMode === 'undefined' || !!ngDevMode) && initNgDevMode());\n    /*\n     * This file contains conditionally attached classes which provide human readable (debug) level\n     * information for `LView`, `LContainer` and other internal data structures. These data structures\n     * are stored internally as array which makes it very difficult during debugging to reason about the\n     * current state of the system.\n     *\n     * Patching the array with extra property does change the array's hidden class' but it does not\n     * change the cost of access, therefore this patching should not have significant if any impact in\n     * `ngDevMode` mode. (see: https://jsperf.com/array-vs-monkey-patch-array)\n     *\n     * So instead of seeing:\n     * ```\n     * Array(30) [Object, 659, null, …]\n     * ```\n     *\n     * You get to see:\n     * ```\n     * LViewDebug {\n     *   views: [...],\n     *   flags: {attached: true, ...}\n     *   nodes: [\n     *     {html: '<div id=\"123\">', ..., nodes: [\n     *       {html: '<span>', ..., nodes: null}\n     *     ]}\n     *   ]\n     * }\n     * ```\n     */\n    var LVIEW_COMPONENT_CACHE;\n    var LVIEW_EMBEDDED_CACHE;\n    var LVIEW_ROOT;\n    /**\n     * This function clones a blueprint and creates LView.\n     *\n     * Simple slice will keep the same type, and we need it to be LView\n     */\n    function cloneToLViewFromTViewBlueprint(tView) {\n        var debugTView = tView;\n        var lView = getLViewToClone(debugTView.type, tView.template && tView.template.name);\n        return lView.concat(tView.blueprint);\n    }\n    function getLViewToClone(type, name) {\n        switch (type) {\n            case 0 /* Root */:\n                if (LVIEW_ROOT === undefined)\n                    LVIEW_ROOT = new (createNamedArrayType('LRootView'))();\n                return LVIEW_ROOT;\n            case 1 /* Component */:\n                if (LVIEW_COMPONENT_CACHE === undefined)\n                    LVIEW_COMPONENT_CACHE = new Map();\n                var componentArray = LVIEW_COMPONENT_CACHE.get(name);\n                if (componentArray === undefined) {\n                    componentArray = new (createNamedArrayType('LComponentView' + nameSuffix(name)))();\n                    LVIEW_COMPONENT_CACHE.set(name, componentArray);\n                }\n                return componentArray;\n            case 2 /* Embedded */:\n                if (LVIEW_EMBEDDED_CACHE === undefined)\n                    LVIEW_EMBEDDED_CACHE = new Map();\n                var embeddedArray = LVIEW_EMBEDDED_CACHE.get(name);\n                if (embeddedArray === undefined) {\n                    embeddedArray = new (createNamedArrayType('LEmbeddedView' + nameSuffix(name)))();\n                    LVIEW_EMBEDDED_CACHE.set(name, embeddedArray);\n                }\n                return embeddedArray;\n        }\n        throw new Error('unreachable code');\n    }\n    function nameSuffix(text) {\n        if (text == null)\n            return '';\n        var index = text.lastIndexOf('_Template');\n        return '_' + (index === -1 ? text : text.substr(0, index));\n    }\n    /**\n     * This class is a debug version of Object literal so that we can have constructor name show up\n     * in\n     * debug tools in ngDevMode.\n     */\n    var TViewConstructor = /** @class */ (function () {\n        function TView(type, //\n        id, //\n        blueprint, //\n        template, //\n        queries, //\n        viewQuery, //\n        node, //\n        data, //\n        bindingStartIndex, //\n        expandoStartIndex, //\n        expandoInstructions, //\n        firstCreatePass, //\n        firstUpdatePass, //\n        staticViewQueries, //\n        staticContentQueries, //\n        preOrderHooks, //\n        preOrderCheckHooks, //\n        contentHooks, //\n        contentCheckHooks, //\n        viewHooks, //\n        viewCheckHooks, //\n        destroyHooks, //\n        cleanup, //\n        contentQueries, //\n        components, //\n        directiveRegistry, //\n        pipeRegistry, //\n        firstChild, //\n        schemas, //\n        consts) {\n            this.type = type;\n            this.id = id;\n            this.blueprint = blueprint;\n            this.template = template;\n            this.queries = queries;\n            this.viewQuery = viewQuery;\n            this.node = node;\n            this.data = data;\n            this.bindingStartIndex = bindingStartIndex;\n            this.expandoStartIndex = expandoStartIndex;\n            this.expandoInstructions = expandoInstructions;\n            this.firstCreatePass = firstCreatePass;\n            this.firstUpdatePass = firstUpdatePass;\n            this.staticViewQueries = staticViewQueries;\n            this.staticContentQueries = staticContentQueries;\n            this.preOrderHooks = preOrderHooks;\n            this.preOrderCheckHooks = preOrderCheckHooks;\n            this.contentHooks = contentHooks;\n            this.contentCheckHooks = contentCheckHooks;\n            this.viewHooks = viewHooks;\n            this.viewCheckHooks = viewCheckHooks;\n            this.destroyHooks = destroyHooks;\n            this.cleanup = cleanup;\n            this.contentQueries = contentQueries;\n            this.components = components;\n            this.directiveRegistry = directiveRegistry;\n            this.pipeRegistry = pipeRegistry;\n            this.firstChild = firstChild;\n            this.schemas = schemas;\n            this.consts = consts;\n        }\n        Object.defineProperty(TView.prototype, \"template_\", {\n            get: function () {\n                var buf = [];\n                processTNodeChildren(this.firstChild, buf);\n                return buf.join('');\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return TView;\n    }());\n    var TNodeConstructor = /** @class */ (function () {\n        function TNode(tView_, //\n        type, //\n        index, //\n        injectorIndex, //\n        directiveStart, //\n        directiveEnd, //\n        propertyBindings, //\n        flags, //\n        providerIndexes, //\n        tagName, //\n        attrs, //\n        localNames, //\n        initialInputs, //\n        inputs, //\n        outputs, //\n        tViews, //\n        next, //\n        projectionNext, //\n        child, //\n        parent, //\n        projection, //\n        styles, //\n        classes) {\n            this.tView_ = tView_;\n            this.type = type;\n            this.index = index;\n            this.injectorIndex = injectorIndex;\n            this.directiveStart = directiveStart;\n            this.directiveEnd = directiveEnd;\n            this.propertyBindings = propertyBindings;\n            this.flags = flags;\n            this.providerIndexes = providerIndexes;\n            this.tagName = tagName;\n            this.attrs = attrs;\n            this.localNames = localNames;\n            this.initialInputs = initialInputs;\n            this.inputs = inputs;\n            this.outputs = outputs;\n            this.tViews = tViews;\n            this.next = next;\n            this.projectionNext = projectionNext;\n            this.child = child;\n            this.parent = parent;\n            this.projection = projection;\n            this.styles = styles;\n            this.classes = classes;\n        }\n        Object.defineProperty(TNode.prototype, \"type_\", {\n            get: function () {\n                switch (this.type) {\n                    case 0 /* Container */:\n                        return 'TNodeType.Container';\n                    case 3 /* Element */:\n                        return 'TNodeType.Element';\n                    case 4 /* ElementContainer */:\n                        return 'TNodeType.ElementContainer';\n                    case 5 /* IcuContainer */:\n                        return 'TNodeType.IcuContainer';\n                    case 1 /* Projection */:\n                        return 'TNodeType.Projection';\n                    case 2 /* View */:\n                        return 'TNodeType.View';\n                    default:\n                        return 'TNodeType.???';\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(TNode.prototype, \"flags_\", {\n            get: function () {\n                var flags = [];\n                if (this.flags & 16 /* hasClassInput */)\n                    flags.push('TNodeFlags.hasClassInput');\n                if (this.flags & 8 /* hasContentQuery */)\n                    flags.push('TNodeFlags.hasContentQuery');\n                if (this.flags & 32 /* hasStyleInput */)\n                    flags.push('TNodeFlags.hasStyleInput');\n                if (this.flags & 256 /* hasInitialStyling */)\n                    flags.push('TNodeFlags.hasInitialStyling');\n                if (this.flags & 128 /* hasHostBindings */)\n                    flags.push('TNodeFlags.hasHostBindings');\n                if (this.flags & 2 /* isComponentHost */)\n                    flags.push('TNodeFlags.isComponentHost');\n                if (this.flags & 1 /* isDirectiveHost */)\n                    flags.push('TNodeFlags.isDirectiveHost');\n                if (this.flags & 64 /* isDetached */)\n                    flags.push('TNodeFlags.isDetached');\n                if (this.flags & 4 /* isProjected */)\n                    flags.push('TNodeFlags.isProjected');\n                return flags.join('|');\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(TNode.prototype, \"template_\", {\n            get: function () {\n                var buf = [];\n                buf.push('<', this.tagName || this.type_);\n                if (this.attrs) {\n                    for (var i = 0; i < this.attrs.length;) {\n                        var attrName = this.attrs[i++];\n                        if (typeof attrName == 'number') {\n                            break;\n                        }\n                        var attrValue = this.attrs[i++];\n                        buf.push(' ', attrName, '=\"', attrValue, '\"');\n                    }\n                }\n                buf.push('>');\n                processTNodeChildren(this.child, buf);\n                buf.push('</', this.tagName || this.type_, '>');\n                return buf.join('');\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return TNode;\n    }());\n    function processTNodeChildren(tNode, buf) {\n        while (tNode) {\n            buf.push(tNode.template_);\n            tNode = tNode.next;\n        }\n    }\n    var TViewData = NG_DEV_MODE && createNamedArrayType('TViewData') || null;\n    var TVIEWDATA_EMPTY; // can't initialize here or it will not be tree shaken, because `LView`\n    // constructor could have side-effects.\n    /**\n     * This function clones a blueprint and creates TData.\n     *\n     * Simple slice will keep the same type, and we need it to be TData\n     */\n    function cloneToTViewData(list) {\n        if (TVIEWDATA_EMPTY === undefined)\n            TVIEWDATA_EMPTY = new TViewData();\n        return TVIEWDATA_EMPTY.concat(list);\n    }\n    var LViewBlueprint = NG_DEV_MODE && createNamedArrayType('LViewBlueprint') || null;\n    var MatchesArray = NG_DEV_MODE && createNamedArrayType('MatchesArray') || null;\n    var TViewComponents = NG_DEV_MODE && createNamedArrayType('TViewComponents') || null;\n    var TNodeLocalNames = NG_DEV_MODE && createNamedArrayType('TNodeLocalNames') || null;\n    var TNodeInitialInputs = NG_DEV_MODE && createNamedArrayType('TNodeInitialInputs') || null;\n    var TNodeInitialData = NG_DEV_MODE && createNamedArrayType('TNodeInitialData') || null;\n    var LCleanup = NG_DEV_MODE && createNamedArrayType('LCleanup') || null;\n    var TCleanup = NG_DEV_MODE && createNamedArrayType('TCleanup') || null;\n    function attachLViewDebug(lView) {\n        attachDebugObject(lView, new LViewDebug(lView));\n    }\n    function attachLContainerDebug(lContainer) {\n        attachDebugObject(lContainer, new LContainerDebug(lContainer));\n    }\n    function toDebug(obj) {\n        if (obj) {\n            var debug = obj.debug;\n            assertDefined(debug, 'Object does not have a debug representation.');\n            return debug;\n        }\n        else {\n            return obj;\n        }\n    }\n    /**\n     * Use this method to unwrap a native element in `LView` and convert it into HTML for easier\n     * reading.\n     *\n     * @param value possibly wrapped native DOM node.\n     * @param includeChildren If `true` then the serialized HTML form will include child elements\n     * (same\n     * as `outerHTML`). If `false` then the serialized HTML form will only contain the element\n     * itself\n     * (will not serialize child elements).\n     */\n    function toHtml(value, includeChildren) {\n        if (includeChildren === void 0) { includeChildren = false; }\n        var node = unwrapRNode(value);\n        if (node) {\n            var isTextNode = node.nodeType === Node.TEXT_NODE;\n            var outerHTML = (isTextNode ? node.textContent : node.outerHTML) || '';\n            if (includeChildren || isTextNode) {\n                return outerHTML;\n            }\n            else {\n                var innerHTML = '>' + node.innerHTML + '<';\n                return (outerHTML.split(innerHTML)[0]) + '>';\n            }\n        }\n        else {\n            return null;\n        }\n    }\n    var LViewDebug = /** @class */ (function () {\n        function LViewDebug(_raw_lView) {\n            this._raw_lView = _raw_lView;\n        }\n        Object.defineProperty(LViewDebug.prototype, \"flags\", {\n            /**\n             * Flags associated with the `LView` unpacked into a more readable state.\n             */\n            get: function () {\n                var flags = this._raw_lView[FLAGS];\n                return {\n                    __raw__flags__: flags,\n                    initPhaseState: flags & 3 /* InitPhaseStateMask */,\n                    creationMode: !!(flags & 4 /* CreationMode */),\n                    firstViewPass: !!(flags & 8 /* FirstLViewPass */),\n                    checkAlways: !!(flags & 16 /* CheckAlways */),\n                    dirty: !!(flags & 64 /* Dirty */),\n                    attached: !!(flags & 128 /* Attached */),\n                    destroyed: !!(flags & 256 /* Destroyed */),\n                    isRoot: !!(flags & 512 /* IsRoot */),\n                    indexWithinInitPhase: flags >> 10 /* IndexWithinInitPhaseShift */,\n                };\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LViewDebug.prototype, \"parent\", {\n            get: function () { return toDebug(this._raw_lView[PARENT]); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LViewDebug.prototype, \"host\", {\n            get: function () { return toHtml(this._raw_lView[HOST], true); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LViewDebug.prototype, \"html\", {\n            get: function () { return (this.nodes || []).map(function (node) { return toHtml(node.native, true); }).join(''); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LViewDebug.prototype, \"context\", {\n            get: function () { return this._raw_lView[CONTEXT]; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LViewDebug.prototype, \"nodes\", {\n            /**\n             * The tree of nodes associated with the current `LView`. The nodes have been normalized into\n             * a\n             * tree structure with relevant details pulled out for readability.\n             */\n            get: function () {\n                var lView = this._raw_lView;\n                var tNode = lView[TVIEW].firstChild;\n                return toDebugNodes(tNode, lView);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LViewDebug.prototype, \"tView\", {\n            get: function () { return this._raw_lView[TVIEW]; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LViewDebug.prototype, \"cleanup\", {\n            get: function () { return this._raw_lView[CLEANUP]; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LViewDebug.prototype, \"injector\", {\n            get: function () { return this._raw_lView[INJECTOR$1]; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LViewDebug.prototype, \"rendererFactory\", {\n            get: function () { return this._raw_lView[RENDERER_FACTORY]; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LViewDebug.prototype, \"renderer\", {\n            get: function () { return this._raw_lView[RENDERER]; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LViewDebug.prototype, \"sanitizer\", {\n            get: function () { return this._raw_lView[SANITIZER]; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LViewDebug.prototype, \"childHead\", {\n            get: function () { return toDebug(this._raw_lView[CHILD_HEAD]); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LViewDebug.prototype, \"next\", {\n            get: function () { return toDebug(this._raw_lView[NEXT]); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LViewDebug.prototype, \"childTail\", {\n            get: function () { return toDebug(this._raw_lView[CHILD_TAIL]); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LViewDebug.prototype, \"declarationView\", {\n            get: function () { return toDebug(this._raw_lView[DECLARATION_VIEW]); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LViewDebug.prototype, \"queries\", {\n            get: function () { return this._raw_lView[QUERIES]; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LViewDebug.prototype, \"tHost\", {\n            get: function () { return this._raw_lView[T_HOST]; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LViewDebug.prototype, \"childViews\", {\n            /**\n             * Normalized view of child views (and containers) attached at this location.\n             */\n            get: function () {\n                var childViews = [];\n                var child = this.childHead;\n                while (child) {\n                    childViews.push(child);\n                    child = child.next;\n                }\n                return childViews;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return LViewDebug;\n    }());\n    /**\n     * Turns a flat list of nodes into a tree by walking the associated `TNode` tree.\n     *\n     * @param tNode\n     * @param lView\n     */\n    function toDebugNodes(tNode, lView) {\n        if (tNode) {\n            var debugNodes = [];\n            var tNodeCursor = tNode;\n            while (tNodeCursor) {\n                debugNodes.push(buildDebugNode(tNodeCursor, lView, tNodeCursor.index));\n                tNodeCursor = tNodeCursor.next;\n            }\n            return debugNodes;\n        }\n        else {\n            return null;\n        }\n    }\n    function buildDebugNode(tNode, lView, nodeIndex) {\n        var rawValue = lView[nodeIndex];\n        var native = unwrapRNode(rawValue);\n        var componentLViewDebug = toDebug(readLViewValue(rawValue));\n        var styles = isStylingContext(tNode.styles) ?\n            new NodeStylingDebug(tNode.styles, tNode, lView, false) :\n            null;\n        var classes = isStylingContext(tNode.classes) ?\n            new NodeStylingDebug(tNode.classes, tNode, lView, true) :\n            null;\n        return {\n            html: toHtml(native),\n            native: native, styles: styles, classes: classes,\n            nodes: toDebugNodes(tNode.child, lView),\n            component: componentLViewDebug,\n        };\n    }\n    var LContainerDebug = /** @class */ (function () {\n        function LContainerDebug(_raw_lContainer) {\n            this._raw_lContainer = _raw_lContainer;\n        }\n        Object.defineProperty(LContainerDebug.prototype, \"activeIndex\", {\n            get: function () { return getLContainerActiveIndex(this._raw_lContainer); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LContainerDebug.prototype, \"hasTransplantedViews\", {\n            get: function () {\n                return (this._raw_lContainer[ACTIVE_INDEX] & 1 /* HAS_TRANSPLANTED_VIEWS */) ===\n                    1 /* HAS_TRANSPLANTED_VIEWS */;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LContainerDebug.prototype, \"views\", {\n            get: function () {\n                return this._raw_lContainer.slice(CONTAINER_HEADER_OFFSET)\n                    .map(toDebug);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LContainerDebug.prototype, \"parent\", {\n            get: function () { return toDebug(this._raw_lContainer[PARENT]); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LContainerDebug.prototype, \"movedViews\", {\n            get: function () { return this._raw_lContainer[MOVED_VIEWS]; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LContainerDebug.prototype, \"host\", {\n            get: function () { return this._raw_lContainer[HOST]; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LContainerDebug.prototype, \"native\", {\n            get: function () { return this._raw_lContainer[NATIVE]; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LContainerDebug.prototype, \"next\", {\n            get: function () { return toDebug(this._raw_lContainer[NEXT]); },\n            enumerable: true,\n            configurable: true\n        });\n        return LContainerDebug;\n    }());\n    /**\n     * Return an `LView` value if found.\n     *\n     * @param value `LView` if any\n     */\n    function readLViewValue(value) {\n        while (Array.isArray(value)) {\n            // This check is not quite right, as it does not take into account `StylingContext`\n            // This is why it is in debug, not in util.ts\n            if (value.length >= HEADER_OFFSET - 1)\n                return value;\n            value = value[HOST];\n        }\n        return null;\n    }\n    var I18NDebugItem = /** @class */ (function () {\n        function I18NDebugItem(__raw_opCode, _lView, nodeIndex, type) {\n            this.__raw_opCode = __raw_opCode;\n            this._lView = _lView;\n            this.nodeIndex = nodeIndex;\n            this.type = type;\n        }\n        Object.defineProperty(I18NDebugItem.prototype, \"tNode\", {\n            get: function () { return getTNode(this.nodeIndex, this._lView); },\n            enumerable: true,\n            configurable: true\n        });\n        return I18NDebugItem;\n    }());\n    /**\n     * Turns a list of \"Create\" & \"Update\" OpCodes into a human-readable list of operations for\n     * debugging purposes.\n     * @param mutateOpCodes mutation opCodes to read\n     * @param updateOpCodes update opCodes to read\n     * @param icus list of ICU expressions\n     * @param lView The view the opCodes are acting on\n     */\n    function attachI18nOpCodesDebug(mutateOpCodes, updateOpCodes, icus, lView) {\n        attachDebugObject(mutateOpCodes, new I18nMutateOpCodesDebug(mutateOpCodes, lView));\n        attachDebugObject(updateOpCodes, new I18nUpdateOpCodesDebug(updateOpCodes, icus, lView));\n        if (icus) {\n            icus.forEach(function (icu) {\n                icu.create.forEach(function (icuCase) { attachDebugObject(icuCase, new I18nMutateOpCodesDebug(icuCase, lView)); });\n                icu.update.forEach(function (icuCase) {\n                    attachDebugObject(icuCase, new I18nUpdateOpCodesDebug(icuCase, icus, lView));\n                });\n            });\n        }\n    }\n    var I18nMutateOpCodesDebug = /** @class */ (function () {\n        function I18nMutateOpCodesDebug(__raw_opCodes, __lView) {\n            this.__raw_opCodes = __raw_opCodes;\n            this.__lView = __lView;\n        }\n        Object.defineProperty(I18nMutateOpCodesDebug.prototype, \"operations\", {\n            /**\n             * A list of operation information about how the OpCodes will act on the view.\n             */\n            get: function () {\n                var _a = this, __lView = _a.__lView, __raw_opCodes = _a.__raw_opCodes;\n                var results = [];\n                for (var i = 0; i < __raw_opCodes.length; i++) {\n                    var opCode = __raw_opCodes[i];\n                    var result = void 0;\n                    if (typeof opCode === 'string') {\n                        result = {\n                            __raw_opCode: opCode,\n                            type: 'Create Text Node',\n                            nodeIndex: __raw_opCodes[++i],\n                            text: opCode,\n                        };\n                    }\n                    if (typeof opCode === 'number') {\n                        switch (opCode & 7 /* MASK_OPCODE */) {\n                            case 1 /* AppendChild */:\n                                var destinationNodeIndex = opCode >>> 17 /* SHIFT_PARENT */;\n                                result = new I18NDebugItem(opCode, __lView, destinationNodeIndex, 'AppendChild');\n                                break;\n                            case 0 /* Select */:\n                                var nodeIndex = opCode >>> 3 /* SHIFT_REF */;\n                                result = new I18NDebugItem(opCode, __lView, nodeIndex, 'Select');\n                                break;\n                            case 5 /* ElementEnd */:\n                                var elementIndex = opCode >>> 3 /* SHIFT_REF */;\n                                result = new I18NDebugItem(opCode, __lView, elementIndex, 'ElementEnd');\n                                break;\n                            case 4 /* Attr */:\n                                elementIndex = opCode >>> 3 /* SHIFT_REF */;\n                                result = new I18NDebugItem(opCode, __lView, elementIndex, 'Attr');\n                                result['attrName'] = __raw_opCodes[++i];\n                                result['attrValue'] = __raw_opCodes[++i];\n                                break;\n                        }\n                    }\n                    if (!result) {\n                        switch (opCode) {\n                            case COMMENT_MARKER:\n                                result = {\n                                    __raw_opCode: opCode,\n                                    type: 'COMMENT_MARKER',\n                                    commentValue: __raw_opCodes[++i],\n                                    nodeIndex: __raw_opCodes[++i],\n                                };\n                                break;\n                            case ELEMENT_MARKER:\n                                result = {\n                                    __raw_opCode: opCode,\n                                    type: 'ELEMENT_MARKER',\n                                };\n                                break;\n                        }\n                    }\n                    if (!result) {\n                        result = {\n                            __raw_opCode: opCode,\n                            type: 'Unknown Op Code',\n                            code: opCode,\n                        };\n                    }\n                    results.push(result);\n                }\n                return results;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return I18nMutateOpCodesDebug;\n    }());\n    var I18nUpdateOpCodesDebug = /** @class */ (function () {\n        function I18nUpdateOpCodesDebug(__raw_opCodes, icus, __lView) {\n            this.__raw_opCodes = __raw_opCodes;\n            this.icus = icus;\n            this.__lView = __lView;\n        }\n        Object.defineProperty(I18nUpdateOpCodesDebug.prototype, \"operations\", {\n            /**\n             * A list of operation information about how the OpCodes will act on the view.\n             */\n            get: function () {\n                var _a = this, __lView = _a.__lView, __raw_opCodes = _a.__raw_opCodes, icus = _a.icus;\n                var results = [];\n                for (var i = 0; i < __raw_opCodes.length; i++) {\n                    // bit code to check if we should apply the next update\n                    var checkBit = __raw_opCodes[i];\n                    // Number of opCodes to skip until next set of update codes\n                    var skipCodes = __raw_opCodes[++i];\n                    var value = '';\n                    for (var j = i + 1; j <= (i + skipCodes); j++) {\n                        var opCode = __raw_opCodes[j];\n                        if (typeof opCode === 'string') {\n                            value += opCode;\n                        }\n                        else if (typeof opCode == 'number') {\n                            if (opCode < 0) {\n                                // It's a binding index whose value is negative\n                                // We cannot know the value of the binding so we only show the index\n                                value += \"\\uFFFD\" + (-opCode - 1) + \"\\uFFFD\";\n                            }\n                            else {\n                                var nodeIndex = opCode >>> 2 /* SHIFT_REF */;\n                                var tIcuIndex = void 0;\n                                var tIcu = void 0;\n                                switch (opCode & 3 /* MASK_OPCODE */) {\n                                    case 1 /* Attr */:\n                                        var attrName = __raw_opCodes[++j];\n                                        var sanitizeFn = __raw_opCodes[++j];\n                                        results.push({\n                                            __raw_opCode: opCode,\n                                            checkBit: checkBit,\n                                            type: 'Attr',\n                                            attrValue: value, attrName: attrName, sanitizeFn: sanitizeFn,\n                                        });\n                                        break;\n                                    case 0 /* Text */:\n                                        results.push({\n                                            __raw_opCode: opCode,\n                                            checkBit: checkBit,\n                                            type: 'Text', nodeIndex: nodeIndex,\n                                            text: value,\n                                        });\n                                        break;\n                                    case 2 /* IcuSwitch */:\n                                        tIcuIndex = __raw_opCodes[++j];\n                                        tIcu = icus[tIcuIndex];\n                                        var result = new I18NDebugItem(opCode, __lView, nodeIndex, 'IcuSwitch');\n                                        result['tIcuIndex'] = tIcuIndex;\n                                        result['checkBit'] = checkBit;\n                                        result['mainBinding'] = value;\n                                        result['tIcu'] = tIcu;\n                                        results.push(result);\n                                        break;\n                                    case 3 /* IcuUpdate */:\n                                        tIcuIndex = __raw_opCodes[++j];\n                                        tIcu = icus[tIcuIndex];\n                                        result = new I18NDebugItem(opCode, __lView, nodeIndex, 'IcuUpdate');\n                                        result['tIcuIndex'] = tIcuIndex;\n                                        result['checkBit'] = checkBit;\n                                        result['tIcu'] = tIcu;\n                                        results.push(result);\n                                        break;\n                                }\n                            }\n                        }\n                    }\n                    i += skipCodes;\n                }\n                return results;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return I18nUpdateOpCodesDebug;\n    }());\n\n    /**\n     * A permanent marker promise which signifies that the current CD tree is\n     * clean.\n     */\n    var _CLEAN_PROMISE = (function () { return Promise.resolve(null); })();\n    /** Sets the host bindings for the current view. */\n    function setHostBindings(tView, lView) {\n        var selectedIndex = getSelectedIndex();\n        try {\n            var expandoInstructions = tView.expandoInstructions;\n            if (expandoInstructions !== null) {\n                var bindingRootIndex = setBindingIndex(tView.expandoStartIndex);\n                setBindingRoot(bindingRootIndex);\n                var currentDirectiveIndex = -1;\n                var currentElementIndex = -1;\n                for (var i = 0; i < expandoInstructions.length; i++) {\n                    var instruction = expandoInstructions[i];\n                    if (typeof instruction === 'number') {\n                        if (instruction <= 0) {\n                            // Negative numbers mean that we are starting new EXPANDO block and need to update\n                            // the current element and directive index.\n                            currentElementIndex = -instruction;\n                            setActiveHostElement(currentElementIndex);\n                            // Injector block and providers are taken into account.\n                            var providerCount = expandoInstructions[++i];\n                            bindingRootIndex += INJECTOR_BLOOM_PARENT_SIZE + providerCount;\n                            currentDirectiveIndex = bindingRootIndex;\n                        }\n                        else {\n                            // This is either the injector size (so the binding root can skip over directives\n                            // and get to the first set of host bindings on this node) or the host var count\n                            // (to get to the next set of host bindings on this node).\n                            bindingRootIndex += instruction;\n                        }\n                        setBindingRoot(bindingRootIndex);\n                    }\n                    else {\n                        // If it's not a number, it's a host binding function that needs to be executed.\n                        if (instruction !== null) {\n                            // Each directive gets a uniqueId value that is the same for both\n                            // create and update calls when the hostBindings function is called. The\n                            // directive uniqueId is not set anywhere--it is just incremented between\n                            // each hostBindings call and is useful for helping instruction code\n                            // uniquely determine which directive is currently active when executed.\n                            // It is important that this be called first before the actual instructions\n                            // are run because this way the first directive ID value is not zero.\n                            incrementActiveDirectiveId();\n                            setBindingIndex(bindingRootIndex);\n                            var hostCtx = unwrapRNode(lView[currentDirectiveIndex]);\n                            instruction(2 /* Update */, hostCtx, currentElementIndex);\n                        }\n                        currentDirectiveIndex++;\n                    }\n                }\n            }\n        }\n        finally {\n            setActiveHostElement(selectedIndex);\n        }\n    }\n    /** Refreshes all content queries declared by directives in a given view */\n    function refreshContentQueries(tView, lView) {\n        var contentQueries = tView.contentQueries;\n        if (contentQueries !== null) {\n            for (var i = 0; i < contentQueries.length; i += 2) {\n                var queryStartIdx = contentQueries[i];\n                var directiveDefIdx = contentQueries[i + 1];\n                if (directiveDefIdx !== -1) {\n                    var directiveDef = tView.data[directiveDefIdx];\n                    ngDevMode &&\n                        assertDefined(directiveDef.contentQueries, 'contentQueries function should be defined');\n                    setCurrentQueryIndex(queryStartIdx);\n                    directiveDef.contentQueries(2 /* Update */, lView[directiveDefIdx], directiveDefIdx);\n                }\n            }\n        }\n    }\n    /** Refreshes child components in the current view (update mode). */\n    function refreshChildComponents(hostLView, components) {\n        for (var i = 0; i < components.length; i++) {\n            refreshComponent(hostLView, components[i]);\n        }\n    }\n    /** Renders child components in the current view (creation mode). */\n    function renderChildComponents(hostLView, components) {\n        for (var i = 0; i < components.length; i++) {\n            renderComponent(hostLView, components[i]);\n        }\n    }\n    /**\n     * Creates a native element from a tag name, using a renderer.\n     * @param name the tag name\n     * @param renderer A renderer to use\n     * @returns the element created\n     */\n    function elementCreate(name, renderer, namespace) {\n        if (isProceduralRenderer(renderer)) {\n            return renderer.createElement(name, namespace);\n        }\n        else {\n            return namespace === null ? renderer.createElement(name) :\n                renderer.createElementNS(namespace, name);\n        }\n    }\n    function createLView(parentLView, tView, context, flags, host, tHostNode, rendererFactory, renderer, sanitizer, injector) {\n        var lView = ngDevMode ? cloneToLViewFromTViewBlueprint(tView) : tView.blueprint.slice();\n        lView[HOST] = host;\n        lView[FLAGS] = flags | 4 /* CreationMode */ | 128 /* Attached */ | 8 /* FirstLViewPass */;\n        resetPreOrderHookFlags(lView);\n        lView[PARENT] = lView[DECLARATION_VIEW] = parentLView;\n        lView[CONTEXT] = context;\n        lView[RENDERER_FACTORY] = (rendererFactory || parentLView && parentLView[RENDERER_FACTORY]);\n        ngDevMode && assertDefined(lView[RENDERER_FACTORY], 'RendererFactory is required');\n        lView[RENDERER] = (renderer || parentLView && parentLView[RENDERER]);\n        ngDevMode && assertDefined(lView[RENDERER], 'Renderer is required');\n        lView[SANITIZER] = sanitizer || parentLView && parentLView[SANITIZER] || null;\n        lView[INJECTOR$1] = injector || parentLView && parentLView[INJECTOR$1] || null;\n        lView[T_HOST] = tHostNode;\n        ngDevMode && assertEqual(tView.type == 2 /* Embedded */ ? parentLView !== null : true, true, 'Embedded views must have parentLView');\n        lView[DECLARATION_COMPONENT_VIEW] =\n            tView.type == 2 /* Embedded */ ? parentLView[DECLARATION_COMPONENT_VIEW] : lView;\n        ngDevMode && attachLViewDebug(lView);\n        return lView;\n    }\n    function getOrCreateTNode(tView, tHostNode, index, type, name, attrs) {\n        // Keep this function short, so that the VM will inline it.\n        var adjustedIndex = index + HEADER_OFFSET;\n        var tNode = tView.data[adjustedIndex] ||\n            createTNodeAtIndex(tView, tHostNode, adjustedIndex, type, name, attrs);\n        setPreviousOrParentTNode(tNode, true);\n        return tNode;\n    }\n    function createTNodeAtIndex(tView, tHostNode, adjustedIndex, type, name, attrs) {\n        var previousOrParentTNode = getPreviousOrParentTNode();\n        var isParent = getIsParent();\n        var parent = isParent ? previousOrParentTNode : previousOrParentTNode && previousOrParentTNode.parent;\n        // Parents cannot cross component boundaries because components will be used in multiple places,\n        // so it's only set if the view is the same.\n        var parentInSameView = parent && parent !== tHostNode;\n        var tParentNode = parentInSameView ? parent : null;\n        var tNode = tView.data[adjustedIndex] =\n            createTNode(tView, tParentNode, type, adjustedIndex, name, attrs);\n        // Assign a pointer to the first child node of a given view. The first node is not always the one\n        // at index 0, in case of i18n, index 0 can be the instruction `i18nStart` and the first node has\n        // the index 1 or more, so we can't just check node index.\n        if (tView.firstChild === null) {\n            tView.firstChild = tNode;\n        }\n        if (previousOrParentTNode) {\n            if (isParent && previousOrParentTNode.child == null &&\n                (tNode.parent !== null || previousOrParentTNode.type === 2 /* View */)) {\n                // We are in the same view, which means we are adding content node to the parent view.\n                previousOrParentTNode.child = tNode;\n            }\n            else if (!isParent) {\n                previousOrParentTNode.next = tNode;\n            }\n        }\n        return tNode;\n    }\n    function assignTViewNodeToLView(tView, tParentNode, index, lView) {\n        // View nodes are not stored in data because they can be added / removed at runtime (which\n        // would cause indices to change). Their TNodes are instead stored in tView.node.\n        var tNode = tView.node;\n        if (tNode == null) {\n            ngDevMode && tParentNode &&\n                assertNodeOfPossibleTypes(tParentNode, 3 /* Element */, 0 /* Container */);\n            tView.node = tNode = createTNode(tView, tParentNode, //\n            2 /* View */, index, null, null);\n        }\n        return lView[T_HOST] = tNode;\n    }\n    /**\n     * When elements are created dynamically after a view blueprint is created (e.g. through\n     * i18nApply() or ComponentFactory.create), we need to adjust the blueprint for future\n     * template passes.\n     *\n     * @param view The LView containing the blueprint to adjust\n     * @param numSlotsToAlloc The number of slots to alloc in the LView, should be >0\n     */\n    function allocExpando(view, numSlotsToAlloc) {\n        ngDevMode && assertGreaterThan(numSlotsToAlloc, 0, 'The number of slots to alloc should be greater than 0');\n        if (numSlotsToAlloc > 0) {\n            var tView = view[TVIEW];\n            if (tView.firstCreatePass) {\n                for (var i = 0; i < numSlotsToAlloc; i++) {\n                    tView.blueprint.push(null);\n                    tView.data.push(null);\n                    view.push(null);\n                }\n                // We should only increment the expando start index if there aren't already directives\n                // and injectors saved in the \"expando\" section\n                if (!tView.expandoInstructions) {\n                    tView.expandoStartIndex += numSlotsToAlloc;\n                }\n                else {\n                    // Since we're adding the dynamic nodes into the expando section, we need to let the host\n                    // bindings know that they should skip x slots\n                    tView.expandoInstructions.push(numSlotsToAlloc);\n                }\n            }\n        }\n    }\n    //////////////////////////\n    //// Render\n    //////////////////////////\n    /**\n     * Processes a view in the creation mode. This includes a number of steps in a specific order:\n     * - creating view query functions (if any);\n     * - executing a template function in the creation mode;\n     * - updating static queries (if any);\n     * - creating child components defined in a given view.\n     */\n    function renderView(lView, tView, context) {\n        ngDevMode && assertEqual(isCreationMode(lView), true, 'Should be run in creation mode');\n        enterView(lView, lView[T_HOST]);\n        try {\n            var viewQuery = tView.viewQuery;\n            if (viewQuery !== null) {\n                executeViewQueryFn(1 /* Create */, viewQuery, context);\n            }\n            // Execute a template associated with this view, if it exists. A template function might not be\n            // defined for the root component views.\n            var templateFn = tView.template;\n            if (templateFn !== null) {\n                executeTemplate(lView, templateFn, 1 /* Create */, context);\n            }\n            // This needs to be set before children are processed to support recursive components.\n            // This must be set to false immediately after the first creation run because in an\n            // ngFor loop, all the views will be created together before update mode runs and turns\n            // off firstCreatePass. If we don't set it here, instances will perform directive\n            // matching, etc again and again.\n            if (tView.firstCreatePass) {\n                tView.firstCreatePass = false;\n            }\n            // We resolve content queries specifically marked as `static` in creation mode. Dynamic\n            // content queries are resolved during change detection (i.e. update mode), after embedded\n            // views are refreshed (see block above).\n            if (tView.staticContentQueries) {\n                refreshContentQueries(tView, lView);\n            }\n            // We must materialize query results before child components are processed\n            // in case a child component has projected a container. The LContainer needs\n            // to exist so the embedded views are properly attached by the container.\n            if (tView.staticViewQueries) {\n                executeViewQueryFn(2 /* Update */, tView.viewQuery, context);\n            }\n            // Render child component views.\n            var components = tView.components;\n            if (components !== null) {\n                renderChildComponents(lView, components);\n            }\n        }\n        finally {\n            lView[FLAGS] &= ~4 /* CreationMode */;\n            leaveView();\n        }\n    }\n    /**\n     * Processes a view in update mode. This includes a number of steps in a specific order:\n     * - executing a template function in update mode;\n     * - executing hooks;\n     * - refreshing queries;\n     * - setting host bindings;\n     * - refreshing child (embedded and component) views.\n     */\n    function refreshView(lView, tView, templateFn, context) {\n        ngDevMode && assertEqual(isCreationMode(lView), false, 'Should be run in update mode');\n        var flags = lView[FLAGS];\n        if ((flags & 256 /* Destroyed */) === 256 /* Destroyed */)\n            return;\n        enterView(lView, lView[T_HOST]);\n        var checkNoChangesMode = getCheckNoChangesMode();\n        try {\n            resetPreOrderHookFlags(lView);\n            setBindingIndex(tView.bindingStartIndex);\n            if (templateFn !== null) {\n                executeTemplate(lView, templateFn, 2 /* Update */, context);\n            }\n            var hooksInitPhaseCompleted = (flags & 3 /* InitPhaseStateMask */) === 3 /* InitPhaseCompleted */;\n            // execute pre-order hooks (OnInit, OnChanges, DoCheck)\n            // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n            if (!checkNoChangesMode) {\n                if (hooksInitPhaseCompleted) {\n                    var preOrderCheckHooks = tView.preOrderCheckHooks;\n                    if (preOrderCheckHooks !== null) {\n                        executeCheckHooks(lView, preOrderCheckHooks, null);\n                    }\n                }\n                else {\n                    var preOrderHooks = tView.preOrderHooks;\n                    if (preOrderHooks !== null) {\n                        executeInitAndCheckHooks(lView, preOrderHooks, 0 /* OnInitHooksToBeRun */, null);\n                    }\n                    incrementInitPhaseFlags(lView, 0 /* OnInitHooksToBeRun */);\n                }\n            }\n            refreshDynamicEmbeddedViews(lView);\n            // Content query results must be refreshed before content hooks are called.\n            if (tView.contentQueries !== null) {\n                refreshContentQueries(tView, lView);\n            }\n            // execute content hooks (AfterContentInit, AfterContentChecked)\n            // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n            if (!checkNoChangesMode) {\n                if (hooksInitPhaseCompleted) {\n                    var contentCheckHooks = tView.contentCheckHooks;\n                    if (contentCheckHooks !== null) {\n                        executeCheckHooks(lView, contentCheckHooks);\n                    }\n                }\n                else {\n                    var contentHooks = tView.contentHooks;\n                    if (contentHooks !== null) {\n                        executeInitAndCheckHooks(lView, contentHooks, 1 /* AfterContentInitHooksToBeRun */);\n                    }\n                    incrementInitPhaseFlags(lView, 1 /* AfterContentInitHooksToBeRun */);\n                }\n            }\n            setHostBindings(tView, lView);\n            // Refresh child component views.\n            var components = tView.components;\n            if (components !== null) {\n                refreshChildComponents(lView, components);\n            }\n            // View queries must execute after refreshing child components because a template in this view\n            // could be inserted in a child component. If the view query executes before child component\n            // refresh, the template might not yet be inserted.\n            var viewQuery = tView.viewQuery;\n            if (viewQuery !== null) {\n                executeViewQueryFn(2 /* Update */, viewQuery, context);\n            }\n            // execute view hooks (AfterViewInit, AfterViewChecked)\n            // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n            if (!checkNoChangesMode) {\n                if (hooksInitPhaseCompleted) {\n                    var viewCheckHooks = tView.viewCheckHooks;\n                    if (viewCheckHooks !== null) {\n                        executeCheckHooks(lView, viewCheckHooks);\n                    }\n                }\n                else {\n                    var viewHooks = tView.viewHooks;\n                    if (viewHooks !== null) {\n                        executeInitAndCheckHooks(lView, viewHooks, 2 /* AfterViewInitHooksToBeRun */);\n                    }\n                    incrementInitPhaseFlags(lView, 2 /* AfterViewInitHooksToBeRun */);\n                }\n            }\n        }\n        finally {\n            if (tView.firstUpdatePass === true) {\n                tView.firstUpdatePass = false;\n            }\n            // Do not reset the dirty state when running in check no changes mode. We don't want components\n            // to behave differently depending on whether check no changes is enabled or not. For example:\n            // Marking an OnPush component as dirty from within the `ngAfterViewInit` hook in order to\n            // refresh a `NgClass` binding should work. If we would reset the dirty state in the check\n            // no changes cycle, the component would be not be dirty for the next update pass. This would\n            // be different in production mode where the component dirty state is not reset.\n            if (!checkNoChangesMode) {\n                lView[FLAGS] &= ~(64 /* Dirty */ | 8 /* FirstLViewPass */);\n            }\n            leaveViewProcessExit();\n        }\n    }\n    function renderComponentOrTemplate(hostView, templateFn, context) {\n        var rendererFactory = hostView[RENDERER_FACTORY];\n        var normalExecutionPath = !getCheckNoChangesMode();\n        var creationModeIsActive = isCreationMode(hostView);\n        try {\n            if (normalExecutionPath && !creationModeIsActive && rendererFactory.begin) {\n                rendererFactory.begin();\n            }\n            var tView = hostView[TVIEW];\n            if (creationModeIsActive) {\n                renderView(hostView, tView, context);\n            }\n            refreshView(hostView, tView, templateFn, context);\n        }\n        finally {\n            if (normalExecutionPath && !creationModeIsActive && rendererFactory.end) {\n                rendererFactory.end();\n            }\n        }\n    }\n    function executeTemplate(lView, templateFn, rf, context) {\n        var prevSelectedIndex = getSelectedIndex();\n        try {\n            setActiveHostElement(null);\n            if (rf & 2 /* Update */ && lView.length > HEADER_OFFSET) {\n                // When we're updating, inherently select 0 so we don't\n                // have to generate that instruction for most update blocks.\n                selectIndexInternal(lView, 0, getCheckNoChangesMode());\n            }\n            templateFn(rf, context);\n        }\n        finally {\n            if (hasActiveElementFlag(1 /* RunExitFn */)) {\n                executeElementExitFn();\n            }\n            setSelectedIndex(prevSelectedIndex);\n        }\n    }\n    //////////////////////////\n    //// Element\n    //////////////////////////\n    function executeContentQueries(tView, tNode, lView) {\n        if (isContentQueryHost(tNode)) {\n            var start = tNode.directiveStart;\n            var end = tNode.directiveEnd;\n            for (var directiveIndex = start; directiveIndex < end; directiveIndex++) {\n                var def = tView.data[directiveIndex];\n                if (def.contentQueries) {\n                    def.contentQueries(1 /* Create */, lView[directiveIndex], directiveIndex);\n                }\n            }\n        }\n    }\n    /**\n     * Creates directive instances.\n     */\n    function createDirectivesInstances(tView, lView, tNode) {\n        if (!getBindingsEnabled())\n            return;\n        instantiateAllDirectives(tView, lView, tNode, getNativeByTNode(tNode, lView));\n        if ((tNode.flags & 128 /* hasHostBindings */) === 128 /* hasHostBindings */) {\n            invokeDirectivesHostBindings(tView, lView, tNode);\n        }\n    }\n    /**\n     * Takes a list of local names and indices and pushes the resolved local variable values\n     * to LView in the same order as they are loaded in the template with load().\n     */\n    function saveResolvedLocalsInData(viewData, tNode, localRefExtractor) {\n        if (localRefExtractor === void 0) { localRefExtractor = getNativeByTNode; }\n        var localNames = tNode.localNames;\n        if (localNames !== null) {\n            var localIndex = tNode.index + 1;\n            for (var i = 0; i < localNames.length; i += 2) {\n                var index = localNames[i + 1];\n                var value = index === -1 ?\n                    localRefExtractor(tNode, viewData) :\n                    viewData[index];\n                viewData[localIndex++] = value;\n            }\n        }\n    }\n    /**\n     * Gets TView from a template function or creates a new TView\n     * if it doesn't already exist.\n     *\n     * @param def ComponentDef\n     * @returns TView\n     */\n    function getOrCreateTComponentView(def) {\n        return def.tView ||\n            (def.tView = createTView(1 /* Component */, -1, def.template, def.decls, def.vars, def.directiveDefs, def.pipeDefs, def.viewQuery, def.schemas, def.consts));\n    }\n    /**\n     * Creates a TView instance\n     *\n     * @param viewIndex The viewBlockId for inline views, or -1 if it's a component/dynamic\n     * @param templateFn Template function\n     * @param decls The number of nodes, local refs, and pipes in this template\n     * @param directives Registry of directives for this view\n     * @param pipes Registry of pipes for this view\n     * @param viewQuery View queries for this view\n     * @param schemas Schemas for this view\n     * @param consts Constants for this view\n     */\n    function createTView(type, viewIndex, templateFn, decls, vars, directives, pipes, viewQuery, schemas, consts) {\n        ngDevMode && ngDevMode.tView++;\n        var bindingStartIndex = HEADER_OFFSET + decls;\n        // This length does not yet contain host bindings from child directives because at this point,\n        // we don't know which directives are active on this template. As soon as a directive is matched\n        // that has a host binding, we will update the blueprint with that def's hostVars count.\n        var initialViewLength = bindingStartIndex + vars;\n        var blueprint = createViewBlueprint(bindingStartIndex, initialViewLength);\n        return blueprint[TVIEW] = ngDevMode ?\n            new TViewConstructor(type, viewIndex, // id: number,\n            blueprint, // blueprint: LView,\n            templateFn, // template: ComponentTemplate<{}>|null,\n            null, // queries: TQueries|null\n            viewQuery, // viewQuery: ViewQueriesFunction<{}>|null,\n            null, // node: TViewNode|TElementNode|null,\n            cloneToTViewData(blueprint).fill(null, bindingStartIndex), // data: TData,\n            bindingStartIndex, // bindingStartIndex: number,\n            initialViewLength, // expandoStartIndex: number,\n            null, // expandoInstructions: ExpandoInstructions|null,\n            true, // firstCreatePass: boolean,\n            true, // firstUpdatePass: boolean,\n            false, // staticViewQueries: boolean,\n            false, // staticContentQueries: boolean,\n            null, // preOrderHooks: HookData|null,\n            null, // preOrderCheckHooks: HookData|null,\n            null, // contentHooks: HookData|null,\n            null, // contentCheckHooks: HookData|null,\n            null, // viewHooks: HookData|null,\n            null, // viewCheckHooks: HookData|null,\n            null, // destroyHooks: HookData|null,\n            null, // cleanup: any[]|null,\n            null, // contentQueries: number[]|null,\n            null, // components: number[]|null,\n            typeof directives === 'function' ?\n                directives() :\n                directives, // directiveRegistry: DirectiveDefList|null,\n            typeof pipes === 'function' ? pipes() : pipes, // pipeRegistry: PipeDefList|null,\n            null, // firstChild: TNode|null,\n            schemas, // schemas: SchemaMetadata[]|null,\n            consts) : // consts: TConstants|null\n            {\n                type: type,\n                id: viewIndex,\n                blueprint: blueprint,\n                template: templateFn,\n                queries: null,\n                viewQuery: viewQuery,\n                node: null,\n                data: blueprint.slice().fill(null, bindingStartIndex),\n                bindingStartIndex: bindingStartIndex,\n                expandoStartIndex: initialViewLength,\n                expandoInstructions: null,\n                firstCreatePass: true,\n                firstUpdatePass: true,\n                staticViewQueries: false,\n                staticContentQueries: false,\n                preOrderHooks: null,\n                preOrderCheckHooks: null,\n                contentHooks: null,\n                contentCheckHooks: null,\n                viewHooks: null,\n                viewCheckHooks: null,\n                destroyHooks: null,\n                cleanup: null,\n                contentQueries: null,\n                components: null,\n                directiveRegistry: typeof directives === 'function' ? directives() : directives,\n                pipeRegistry: typeof pipes === 'function' ? pipes() : pipes,\n                firstChild: null,\n                schemas: schemas,\n                consts: consts,\n            };\n    }\n    function createViewBlueprint(bindingStartIndex, initialViewLength) {\n        var blueprint = ngDevMode ? new LViewBlueprint() : [];\n        for (var i = 0; i < initialViewLength; i++) {\n            blueprint.push(i < bindingStartIndex ? null : NO_CHANGE);\n        }\n        return blueprint;\n    }\n    function createError(text, token) {\n        return new Error(\"Renderer: \" + text + \" [\" + stringifyForError(token) + \"]\");\n    }\n    function assertHostNodeExists(rElement, elementOrSelector) {\n        if (!rElement) {\n            if (typeof elementOrSelector === 'string') {\n                throw createError('Host node with selector not found:', elementOrSelector);\n            }\n            else {\n                throw createError('Host node is required:', elementOrSelector);\n            }\n        }\n    }\n    /**\n     * Locates the host native element, used for bootstrapping existing nodes into rendering pipeline.\n     *\n     * @param rendererFactory Factory function to create renderer instance.\n     * @param elementOrSelector Render element or CSS selector to locate the element.\n     * @param encapsulation View Encapsulation defined for component that requests host element.\n     */\n    function locateHostElement(rendererFactory, elementOrSelector, encapsulation) {\n        var renderer = rendererFactory.createRenderer(null, null);\n        if (isProceduralRenderer(renderer)) {\n            // When using native Shadow DOM, do not clear host element to allow native slot projection\n            var preserveContent = encapsulation === exports.ViewEncapsulation.ShadowDom;\n            return renderer.selectRootElement(elementOrSelector, preserveContent);\n        }\n        var rElement = typeof elementOrSelector === 'string' ?\n            renderer.querySelector(elementOrSelector) :\n            elementOrSelector;\n        ngDevMode && assertHostNodeExists(rElement, elementOrSelector);\n        // Always clear host element's content when Renderer3 is in use. For procedural renderer case we\n        // make it depend on whether ShadowDom encapsulation is used (in which case the content should be\n        // preserved to allow native slot projection). ShadowDom encapsulation requires procedural\n        // renderer, and procedural renderer case is handled above.\n        rElement.textContent = '';\n        return rElement;\n    }\n    /**\n     * Saves context for this cleanup function in LView.cleanupInstances.\n     *\n     * On the first template pass, saves in TView:\n     * - Cleanup function\n     * - Index of context we just saved in LView.cleanupInstances\n     */\n    function storeCleanupWithContext(lView, context, cleanupFn) {\n        var lCleanup = getCleanup(lView);\n        lCleanup.push(context);\n        if (lView[TVIEW].firstCreatePass) {\n            getTViewCleanup(lView).push(cleanupFn, lCleanup.length - 1);\n        }\n    }\n    /**\n     * Saves the cleanup function itself in LView.cleanupInstances.\n     *\n     * This is necessary for functions that are wrapped with their contexts, like in renderer2\n     * listeners.\n     *\n     * On the first template pass, the index of the cleanup function is saved in TView.\n     */\n    function storeCleanupFn(view, cleanupFn) {\n        getCleanup(view).push(cleanupFn);\n        if (view[TVIEW].firstCreatePass) {\n            getTViewCleanup(view).push(view[CLEANUP].length - 1, null);\n        }\n    }\n    /**\n     * Constructs a TNode object from the arguments.\n     *\n     * @param tView `TView` to which this `TNode` belongs (used only in `ngDevMode`)\n     * @param type The type of the node\n     * @param adjustedIndex The index of the TNode in TView.data, adjusted for HEADER_OFFSET\n     * @param tagName The tag name of the node\n     * @param attrs The attributes defined on this node\n     * @param tViews Any TViews attached to this node\n     * @returns the TNode object\n     */\n    function createTNode(tView, tParent, type, adjustedIndex, tagName, attrs) {\n        ngDevMode && ngDevMode.tNode++;\n        var injectorIndex = tParent ? tParent.injectorIndex : -1;\n        return ngDevMode ? new TNodeConstructor(tView, // tView_: TView\n        type, // type: TNodeType\n        adjustedIndex, // index: number\n        injectorIndex, // injectorIndex: number\n        -1, // directiveStart: number\n        -1, // directiveEnd: number\n        null, // propertyBindings: number[]|null\n        0, // flags: TNodeFlags\n        0, // providerIndexes: TNodeProviderIndexes\n        tagName, // tagName: string|null\n        attrs, // attrs: (string|AttributeMarker|(string|SelectorFlags)[])[]|null\n        null, // localNames: (string|number)[]|null\n        undefined, // initialInputs: (string[]|null)[]|null|undefined\n        null, // inputs: PropertyAliases|null\n        null, // outputs: PropertyAliases|null\n        null, // tViews: ITView|ITView[]|null\n        null, // next: ITNode|null\n        null, // projectionNext: ITNode|null\n        null, // child: ITNode|null\n        tParent, // parent: TElementNode|TContainerNode|null\n        null, // projection: number|(ITNode|RNode[])[]|null\n        null, // styles: TStylingContext|null\n        null) :\n            {\n                type: type,\n                index: adjustedIndex,\n                injectorIndex: injectorIndex,\n                directiveStart: -1,\n                directiveEnd: -1,\n                propertyBindings: null,\n                flags: 0,\n                providerIndexes: 0,\n                tagName: tagName,\n                attrs: attrs,\n                localNames: null,\n                initialInputs: undefined,\n                inputs: null,\n                outputs: null,\n                tViews: null,\n                next: null,\n                projectionNext: null,\n                child: null,\n                parent: tParent,\n                projection: null,\n                styles: null,\n                classes: null,\n            };\n    }\n    function generatePropertyAliases(inputAliasMap, directiveDefIdx, propStore) {\n        for (var publicName in inputAliasMap) {\n            if (inputAliasMap.hasOwnProperty(publicName)) {\n                propStore = propStore === null ? {} : propStore;\n                var internalName = inputAliasMap[publicName];\n                if (propStore.hasOwnProperty(publicName)) {\n                    propStore[publicName].push(directiveDefIdx, internalName);\n                }\n                else {\n                    (propStore[publicName] = [directiveDefIdx, internalName]);\n                }\n            }\n        }\n        return propStore;\n    }\n    /**\n     * Initializes data structures required to work with directive outputs and outputs.\n     * Initialization is done for all directives matched on a given TNode.\n     */\n    function initializeInputAndOutputAliases(tView, tNode) {\n        ngDevMode && assertFirstCreatePass(tView);\n        var start = tNode.directiveStart;\n        var end = tNode.directiveEnd;\n        var defs = tView.data;\n        var tNodeAttrs = tNode.attrs;\n        var inputsFromAttrs = ngDevMode ? new TNodeInitialInputs() : [];\n        var inputsStore = null;\n        var outputsStore = null;\n        for (var i = start; i < end; i++) {\n            var directiveDef = defs[i];\n            var directiveInputs = directiveDef.inputs;\n            inputsFromAttrs.push(tNodeAttrs !== null ? generateInitialInputs(directiveInputs, tNodeAttrs) : null);\n            inputsStore = generatePropertyAliases(directiveInputs, i, inputsStore);\n            outputsStore = generatePropertyAliases(directiveDef.outputs, i, outputsStore);\n        }\n        if (inputsStore !== null) {\n            if (inputsStore.hasOwnProperty('class') || inputsStore.hasOwnProperty('className')) {\n                tNode.flags |= 16 /* hasClassInput */;\n            }\n            if (inputsStore.hasOwnProperty('style')) {\n                tNode.flags |= 32 /* hasStyleInput */;\n            }\n        }\n        tNode.initialInputs = inputsFromAttrs;\n        tNode.inputs = inputsStore;\n        tNode.outputs = outputsStore;\n    }\n    /**\n     * Mapping between attributes names that don't correspond to their element property names.\n     *\n     * Performance note: this function is written as a series of if checks (instead of, say, a property\n     * object lookup) for performance reasons - the series of `if` checks seems to be the fastest way of\n     * mapping property names. Do NOT change without benchmarking.\n     *\n     * Note: this mapping has to be kept in sync with the equally named mapping in the template\n     * type-checking machinery of ngtsc.\n     */\n    function mapPropName(name) {\n        if (name === 'class')\n            return 'className';\n        if (name === 'for')\n            return 'htmlFor';\n        if (name === 'formaction')\n            return 'formAction';\n        if (name === 'innerHtml')\n            return 'innerHTML';\n        if (name === 'readonly')\n            return 'readOnly';\n        if (name === 'tabindex')\n            return 'tabIndex';\n        return name;\n    }\n    function elementPropertyInternal(lView, index, propName, value, sanitizer, nativeOnly, loadRendererFn) {\n        ngDevMode && assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');\n        var element = getNativeByIndex(index, lView);\n        var tNode = getTNode(index, lView);\n        var inputData = tNode.inputs;\n        var dataValue;\n        if (!nativeOnly && inputData != null && (dataValue = inputData[propName])) {\n            setInputsForProperty(lView, dataValue, propName, value);\n            if (isComponentHost(tNode))\n                markDirtyIfOnPush(lView, index + HEADER_OFFSET);\n            if (ngDevMode) {\n                setNgReflectProperties(lView, element, tNode.type, dataValue, value);\n            }\n        }\n        else if (tNode.type === 3 /* Element */) {\n            propName = mapPropName(propName);\n            if (ngDevMode) {\n                validateAgainstEventProperties(propName);\n                if (!validateProperty(lView, element, propName, tNode)) {\n                    // Return here since we only log warnings for unknown properties.\n                    warnAboutUnknownProperty(propName, tNode);\n                    return;\n                }\n                ngDevMode.rendererSetProperty++;\n            }\n            var renderer = loadRendererFn ? loadRendererFn(tNode, lView) : lView[RENDERER];\n            // It is assumed that the sanitizer is only added when the compiler determines that the\n            // property is risky, so sanitization can be done without further checks.\n            value = sanitizer != null ? sanitizer(value, tNode.tagName || '', propName) : value;\n            if (isProceduralRenderer(renderer)) {\n                renderer.setProperty(element, propName, value);\n            }\n            else if (!isAnimationProp(propName)) {\n                element.setProperty ? element.setProperty(propName, value) :\n                    element[propName] = value;\n            }\n        }\n        else if (tNode.type === 0 /* Container */) {\n            // If the node is a container and the property didn't\n            // match any of the inputs or schemas we should throw.\n            if (ngDevMode && !matchingSchemas(lView, tNode.tagName)) {\n                warnAboutUnknownProperty(propName, tNode);\n            }\n        }\n    }\n    /** If node is an OnPush component, marks its LView dirty. */\n    function markDirtyIfOnPush(lView, viewIndex) {\n        ngDevMode && assertLView(lView);\n        var childComponentLView = getComponentLViewByIndex(viewIndex, lView);\n        if (!(childComponentLView[FLAGS] & 16 /* CheckAlways */)) {\n            childComponentLView[FLAGS] |= 64 /* Dirty */;\n        }\n    }\n    function setNgReflectProperty(lView, element, type, attrName, value) {\n        var _a;\n        var renderer = lView[RENDERER];\n        attrName = normalizeDebugBindingName(attrName);\n        var debugValue = normalizeDebugBindingValue(value);\n        if (type === 3 /* Element */) {\n            if (value == null) {\n                isProceduralRenderer(renderer) ? renderer.removeAttribute(element, attrName) :\n                    element.removeAttribute(attrName);\n            }\n            else {\n                isProceduralRenderer(renderer) ?\n                    renderer.setAttribute(element, attrName, debugValue) :\n                    element.setAttribute(attrName, debugValue);\n            }\n        }\n        else {\n            var textContent = \"bindings=\" + JSON.stringify((_a = {}, _a[attrName] = debugValue, _a), null, 2);\n            if (isProceduralRenderer(renderer)) {\n                renderer.setValue(element, textContent);\n            }\n            else {\n                element.textContent = textContent;\n            }\n        }\n    }\n    function setNgReflectProperties(lView, element, type, dataValue, value) {\n        if (type === 3 /* Element */ || type === 0 /* Container */) {\n            /**\n             * dataValue is an array containing runtime input or output names for the directives:\n             * i+0: directive instance index\n             * i+1: privateName\n             *\n             * e.g. [0, 'change', 'change-minified']\n             * we want to set the reflected property with the privateName: dataValue[i+1]\n             */\n            for (var i = 0; i < dataValue.length; i += 2) {\n                setNgReflectProperty(lView, element, type, dataValue[i + 1], value);\n            }\n        }\n    }\n    function validateProperty(hostView, element, propName, tNode) {\n        // The property is considered valid if the element matches the schema, it exists on the element\n        // or it is synthetic, and we are in a browser context (web worker nodes should be skipped).\n        if (matchingSchemas(hostView, tNode.tagName) || propName in element ||\n            isAnimationProp(propName)) {\n            return true;\n        }\n        // Note: `typeof Node` returns 'function' in most browsers, but on IE it is 'object' so we\n        // need to account for both here, while being careful for `typeof null` also returning 'object'.\n        return typeof Node === 'undefined' || Node === null || !(element instanceof Node);\n    }\n    function matchingSchemas(hostView, tagName) {\n        var schemas = hostView[TVIEW].schemas;\n        if (schemas !== null) {\n            for (var i = 0; i < schemas.length; i++) {\n                var schema = schemas[i];\n                if (schema === NO_ERRORS_SCHEMA ||\n                    schema === CUSTOM_ELEMENTS_SCHEMA && tagName && tagName.indexOf('-') > -1) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    /**\n     * Logs a warning that a property is not supported on an element.\n     * @param propName Name of the invalid property.\n     * @param tNode Node on which we encountered the property.\n     */\n    function warnAboutUnknownProperty(propName, tNode) {\n        console.warn(\"Can't bind to '\" + propName + \"' since it isn't a known property of '\" + tNode.tagName + \"'.\");\n    }\n    /**\n     * Instantiate a root component.\n     */\n    function instantiateRootComponent(tView, lView, def) {\n        var rootTNode = getPreviousOrParentTNode();\n        if (tView.firstCreatePass) {\n            if (def.providersResolver)\n                def.providersResolver(def);\n            generateExpandoInstructionBlock(tView, rootTNode, 1);\n            baseResolveDirective(tView, lView, def);\n        }\n        var directive = getNodeInjectable(lView, tView, lView.length - 1, rootTNode);\n        attachPatchData(directive, lView);\n        var native = getNativeByTNode(rootTNode, lView);\n        if (native) {\n            attachPatchData(native, lView);\n        }\n        return directive;\n    }\n    /**\n     * Resolve the matched directives on a node.\n     */\n    function resolveDirectives(tView, lView, tNode, localRefs) {\n        // Please make sure to have explicit type for `exportsMap`. Inferred type triggers bug in\n        // tsickle.\n        ngDevMode && assertFirstCreatePass(tView);\n        if (!getBindingsEnabled())\n            return false;\n        var directives = findDirectiveMatches(tView, lView, tNode);\n        var exportsMap = localRefs === null ? null : { '': -1 };\n        var hasDirectives = false;\n        if (directives !== null) {\n            hasDirectives = true;\n            initNodeFlags(tNode, tView.data.length, directives.length);\n            // When the same token is provided by several directives on the same node, some rules apply in\n            // the viewEngine:\n            // - viewProviders have priority over providers\n            // - the last directive in NgModule.declarations has priority over the previous one\n            // So to match these rules, the order in which providers are added in the arrays is very\n            // important.\n            for (var i = 0; i < directives.length; i++) {\n                var def = directives[i];\n                if (def.providersResolver)\n                    def.providersResolver(def);\n            }\n            generateExpandoInstructionBlock(tView, tNode, directives.length);\n            var preOrderHooksFound = false;\n            var preOrderCheckHooksFound = false;\n            for (var i = 0; i < directives.length; i++) {\n                var def = directives[i];\n                baseResolveDirective(tView, lView, def);\n                saveNameToExportMap(tView.data.length - 1, def, exportsMap);\n                if (def.contentQueries !== null)\n                    tNode.flags |= 8 /* hasContentQuery */;\n                if (def.hostBindings !== null)\n                    tNode.flags |= 128 /* hasHostBindings */;\n                // Only push a node index into the preOrderHooks array if this is the first\n                // pre-order hook found on this node.\n                if (!preOrderHooksFound && (def.onChanges || def.onInit || def.doCheck)) {\n                    // We will push the actual hook function into this array later during dir instantiation.\n                    // We cannot do it now because we must ensure hooks are registered in the same\n                    // order that directives are created (i.e. injection order).\n                    (tView.preOrderHooks || (tView.preOrderHooks = [])).push(tNode.index - HEADER_OFFSET);\n                    preOrderHooksFound = true;\n                }\n                if (!preOrderCheckHooksFound && (def.onChanges || def.doCheck)) {\n                    (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = [])).push(tNode.index - HEADER_OFFSET);\n                    preOrderCheckHooksFound = true;\n                }\n            }\n            initializeInputAndOutputAliases(tView, tNode);\n        }\n        if (exportsMap)\n            cacheMatchingLocalNames(tNode, localRefs, exportsMap);\n        return hasDirectives;\n    }\n    /**\n     * Instantiate all the directives that were previously resolved on the current node.\n     */\n    function instantiateAllDirectives(tView, lView, tNode, native) {\n        var start = tNode.directiveStart;\n        var end = tNode.directiveEnd;\n        if (!tView.firstCreatePass) {\n            getOrCreateNodeInjectorForNode(tNode, lView);\n        }\n        attachPatchData(native, lView);\n        var initialInputs = tNode.initialInputs;\n        for (var i = start; i < end; i++) {\n            var def = tView.data[i];\n            var isComponent = isComponentDef(def);\n            if (isComponent) {\n                ngDevMode && assertNodeOfPossibleTypes(tNode, 3 /* Element */);\n                addComponentLogic(lView, tNode, def);\n            }\n            var directive = getNodeInjectable(lView, tView, i, tNode);\n            attachPatchData(directive, lView);\n            if (initialInputs !== null) {\n                setInputsFromAttrs(lView, i - start, directive, def, tNode, initialInputs);\n            }\n            if (isComponent) {\n                var componentView = getComponentLViewByIndex(tNode.index, lView);\n                componentView[CONTEXT] = directive;\n            }\n        }\n    }\n    function invokeDirectivesHostBindings(tView, viewData, tNode) {\n        var start = tNode.directiveStart;\n        var end = tNode.directiveEnd;\n        var expando = tView.expandoInstructions;\n        var firstCreatePass = tView.firstCreatePass;\n        var elementIndex = tNode.index - HEADER_OFFSET;\n        try {\n            setActiveHostElement(elementIndex);\n            for (var i = start; i < end; i++) {\n                var def = tView.data[i];\n                var directive = viewData[i];\n                if (def.hostBindings) {\n                    // It is important that this be called first before the actual instructions\n                    // are run because this way the first directive ID value is not zero.\n                    incrementActiveDirectiveId();\n                    invokeHostBindingsInCreationMode(def, expando, directive, tNode, firstCreatePass);\n                }\n                else if (firstCreatePass) {\n                    expando.push(null);\n                }\n            }\n        }\n        finally {\n            setActiveHostElement(null);\n        }\n    }\n    function invokeHostBindingsInCreationMode(def, expando, directive, tNode, firstCreatePass) {\n        var previousExpandoLength = expando.length;\n        setCurrentDirectiveDef(def);\n        var elementIndex = tNode.index - HEADER_OFFSET;\n        def.hostBindings(1 /* Create */, directive, elementIndex);\n        setCurrentDirectiveDef(null);\n        // `hostBindings` function may or may not contain `allocHostVars` call\n        // (e.g. it may not if it only contains host listeners), so we need to check whether\n        // `expandoInstructions` has changed and if not - we still push `hostBindings` to\n        // expando block, to make sure we execute it for DI cycle\n        if (previousExpandoLength === expando.length && firstCreatePass) {\n            expando.push(def.hostBindings);\n        }\n    }\n    /**\n    * Generates a new block in TView.expandoInstructions for this node.\n    *\n    * Each expando block starts with the element index (turned negative so we can distinguish\n    * it from the hostVar count) and the directive count. See more in VIEW_DATA.md.\n    */\n    function generateExpandoInstructionBlock(tView, tNode, directiveCount) {\n        ngDevMode && assertEqual(tView.firstCreatePass, true, 'Expando block should only be generated on first create pass.');\n        // Important: In JS `-x` and `0-x` is not the same! If `x===0` then `-x` will produce `-0` which\n        // requires non standard math arithmetic and it can prevent VM optimizations.\n        // `0-0` will always produce `0` and will not cause a potential deoptimization in VM.\n        var elementIndex = HEADER_OFFSET - tNode.index;\n        var providerStartIndex = tNode.providerIndexes & 65535 /* ProvidersStartIndexMask */;\n        var providerCount = tView.data.length - providerStartIndex;\n        (tView.expandoInstructions || (tView.expandoInstructions = [])).push(elementIndex, providerCount, directiveCount);\n    }\n    /**\n    * Matches the current node against all available selectors.\n    * If a component is matched (at most one), it is returned in first position in the array.\n    */\n    function findDirectiveMatches(tView, viewData, tNode) {\n        ngDevMode && assertFirstCreatePass(tView);\n        ngDevMode && assertNodeOfPossibleTypes(tNode, 3 /* Element */, 4 /* ElementContainer */, 0 /* Container */);\n        var registry = tView.directiveRegistry;\n        var matches = null;\n        if (registry) {\n            for (var i = 0; i < registry.length; i++) {\n                var def = registry[i];\n                if (isNodeMatchingSelectorList(tNode, def.selectors, /* isProjectionMode */ false)) {\n                    matches || (matches = ngDevMode ? new MatchesArray() : []);\n                    diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, viewData), tView, def.type);\n                    if (isComponentDef(def)) {\n                        if (tNode.flags & 2 /* isComponentHost */)\n                            throwMultipleComponentError(tNode);\n                        markAsComponentHost(tView, tNode);\n                        // The component is always stored first with directives after.\n                        matches.unshift(def);\n                    }\n                    else {\n                        matches.push(def);\n                    }\n                }\n            }\n        }\n        return matches;\n    }\n    /**\n     * Marks a given TNode as a component's host. This consists of:\n     * - setting appropriate TNode flags;\n     * - storing index of component's host element so it will be queued for view refresh during CD.\n    */\n    function markAsComponentHost(tView, hostTNode) {\n        ngDevMode && assertFirstCreatePass(tView);\n        hostTNode.flags |= 2 /* isComponentHost */;\n        (tView.components || (tView.components = ngDevMode ? new TViewComponents() : [])).push(hostTNode.index);\n    }\n    /** Caches local names and their matching directive indices for query and template lookups. */\n    function cacheMatchingLocalNames(tNode, localRefs, exportsMap) {\n        if (localRefs) {\n            var localNames = tNode.localNames =\n                ngDevMode ? new TNodeLocalNames() : [];\n            // Local names must be stored in tNode in the same order that localRefs are defined\n            // in the template to ensure the data is loaded in the same slots as their refs\n            // in the template (for template queries).\n            for (var i = 0; i < localRefs.length; i += 2) {\n                var index = exportsMap[localRefs[i + 1]];\n                if (index == null)\n                    throw new Error(\"Export of name '\" + localRefs[i + 1] + \"' not found!\");\n                localNames.push(localRefs[i], index);\n            }\n        }\n    }\n    /**\n    * Builds up an export map as directives are created, so local refs can be quickly mapped\n    * to their directive instances.\n    */\n    function saveNameToExportMap(index, def, exportsMap) {\n        if (exportsMap) {\n            if (def.exportAs) {\n                for (var i = 0; i < def.exportAs.length; i++) {\n                    exportsMap[def.exportAs[i]] = index;\n                }\n            }\n            if (isComponentDef(def))\n                exportsMap[''] = index;\n        }\n    }\n    /**\n     * Initializes the flags on the current node, setting all indices to the initial index,\n     * the directive count to 0, and adding the isComponent flag.\n     * @param index the initial index\n     */\n    function initNodeFlags(tNode, index, numberOfDirectives) {\n        ngDevMode && assertNotEqual(numberOfDirectives, tNode.directiveEnd - tNode.directiveStart, 'Reached the max number of directives');\n        tNode.flags |= 1 /* isDirectiveHost */;\n        // When the first directive is created on a node, save the index\n        tNode.directiveStart = index;\n        tNode.directiveEnd = index + numberOfDirectives;\n        tNode.providerIndexes = index;\n    }\n    function baseResolveDirective(tView, viewData, def) {\n        tView.data.push(def);\n        var directiveFactory = def.factory || (def.factory = getFactoryDef(def.type, true));\n        var nodeInjectorFactory = new NodeInjectorFactory(directiveFactory, isComponentDef(def), null);\n        tView.blueprint.push(nodeInjectorFactory);\n        viewData.push(nodeInjectorFactory);\n    }\n    function addComponentLogic(lView, hostTNode, def) {\n        var native = getNativeByTNode(hostTNode, lView);\n        var tView = getOrCreateTComponentView(def);\n        // Only component views should be added to the view tree directly. Embedded views are\n        // accessed through their containers because they may be removed / re-added later.\n        var rendererFactory = lView[RENDERER_FACTORY];\n        var componentView = addToViewTree(lView, createLView(lView, tView, null, def.onPush ? 64 /* Dirty */ : 16 /* CheckAlways */, native, hostTNode, rendererFactory, rendererFactory.createRenderer(native, def)));\n        // Component view will always be created before any injected LContainers,\n        // so this is a regular element, wrap it with the component view\n        lView[hostTNode.index] = componentView;\n    }\n    function elementAttributeInternal(index, name, value, lView, sanitizer, namespace) {\n        ngDevMode && assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');\n        ngDevMode && validateAgainstEventAttributes(name);\n        var element = getNativeByIndex(index, lView);\n        var renderer = lView[RENDERER];\n        if (value == null) {\n            ngDevMode && ngDevMode.rendererRemoveAttribute++;\n            isProceduralRenderer(renderer) ? renderer.removeAttribute(element, name, namespace) :\n                element.removeAttribute(name);\n        }\n        else {\n            ngDevMode && ngDevMode.rendererSetAttribute++;\n            var tNode = getTNode(index, lView);\n            var strValue = sanitizer == null ? renderStringify(value) : sanitizer(value, tNode.tagName || '', name);\n            if (isProceduralRenderer(renderer)) {\n                renderer.setAttribute(element, name, strValue, namespace);\n            }\n            else {\n                namespace ? element.setAttributeNS(namespace, name, strValue) :\n                    element.setAttribute(name, strValue);\n            }\n        }\n    }\n    /**\n     * Sets initial input properties on directive instances from attribute data\n     *\n     * @param lView Current LView that is being processed.\n     * @param directiveIndex Index of the directive in directives array\n     * @param instance Instance of the directive on which to set the initial inputs\n     * @param def The directive def that contains the list of inputs\n     * @param tNode The static data for this node\n     */\n    function setInputsFromAttrs(lView, directiveIndex, instance, def, tNode, initialInputData) {\n        var initialInputs = initialInputData[directiveIndex];\n        if (initialInputs !== null) {\n            var setInput = def.setInput;\n            for (var i = 0; i < initialInputs.length;) {\n                var publicName = initialInputs[i++];\n                var privateName = initialInputs[i++];\n                var value = initialInputs[i++];\n                if (setInput !== null) {\n                    def.setInput(instance, value, publicName, privateName);\n                }\n                else {\n                    instance[privateName] = value;\n                }\n                if (ngDevMode) {\n                    var nativeElement = getNativeByTNode(tNode, lView);\n                    setNgReflectProperty(lView, nativeElement, tNode.type, privateName, value);\n                }\n            }\n        }\n    }\n    /**\n     * Generates initialInputData for a node and stores it in the template's static storage\n     * so subsequent template invocations don't have to recalculate it.\n     *\n     * initialInputData is an array containing values that need to be set as input properties\n     * for directives on this node, but only once on creation. We need this array to support\n     * the case where you set an @Input property of a directive using attribute-like syntax.\n     * e.g. if you have a `name` @Input, you can set it once like this:\n     *\n     * <my-component name=\"Bess\"></my-component>\n     *\n     * @param inputs The list of inputs from the directive def\n     * @param attrs The static attrs on this node\n     */\n    function generateInitialInputs(inputs, attrs) {\n        var inputsToStore = null;\n        var i = 0;\n        while (i < attrs.length) {\n            var attrName = attrs[i];\n            if (attrName === 0 /* NamespaceURI */) {\n                // We do not allow inputs on namespaced attributes.\n                i += 4;\n                continue;\n            }\n            else if (attrName === 5 /* ProjectAs */) {\n                // Skip over the `ngProjectAs` value.\n                i += 2;\n                continue;\n            }\n            // If we hit any other attribute markers, we're done anyway. None of those are valid inputs.\n            if (typeof attrName === 'number')\n                break;\n            if (inputs.hasOwnProperty(attrName)) {\n                if (inputsToStore === null)\n                    inputsToStore = [];\n                inputsToStore.push(attrName, inputs[attrName], attrs[i + 1]);\n            }\n            i += 2;\n        }\n        return inputsToStore;\n    }\n    //////////////////////////\n    //// ViewContainer & View\n    //////////////////////////\n    // Not sure why I need to do `any` here but TS complains later.\n    var LContainerArray = ((typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode()) &&\n        createNamedArrayType('LContainer');\n    /**\n     * Creates a LContainer, either from a container instruction, or for a ViewContainerRef.\n     *\n     * @param hostNative The host element for the LContainer\n     * @param hostTNode The host TNode for the LContainer\n     * @param currentView The parent view of the LContainer\n     * @param native The native comment element\n     * @param isForViewContainerRef Optional a flag indicating the ViewContainerRef case\n     * @returns LContainer\n     */\n    function createLContainer(hostNative, currentView, native, tNode) {\n        ngDevMode && assertLView(currentView);\n        ngDevMode && !isProceduralRenderer(currentView[RENDERER]) && assertDomNode(native);\n        // https://jsperf.com/array-literal-vs-new-array-really\n        var lContainer = new (ngDevMode ? LContainerArray : Array)(hostNative, // host native\n        true, // Boolean `true` in this position signifies that this is an `LContainer`\n        -1 /* DYNAMIC_EMBEDDED_VIEWS_ONLY */ << 1 /* SHIFT */, // active index\n        currentView, // parent\n        null, // next\n        null, // queries\n        tNode, // t_host\n        native, // native,\n        null);\n        ngDevMode && attachLContainerDebug(lContainer);\n        return lContainer;\n    }\n    /**\n     * Goes over dynamic embedded views (ones created through ViewContainerRef APIs) and refreshes\n     * them by executing an associated template function.\n     */\n    function refreshDynamicEmbeddedViews(lView) {\n        var viewOrContainer = lView[CHILD_HEAD];\n        while (viewOrContainer !== null) {\n            // Note: viewOrContainer can be an LView or an LContainer instance, but here we are only\n            // interested in LContainer\n            var activeIndexFlag = void 0;\n            if (isLContainer(viewOrContainer) &&\n                (activeIndexFlag = viewOrContainer[ACTIVE_INDEX]) >> 1 /* SHIFT */ ===\n                    -1 /* DYNAMIC_EMBEDDED_VIEWS_ONLY */) {\n                for (var i = CONTAINER_HEADER_OFFSET; i < viewOrContainer.length; i++) {\n                    var embeddedLView = viewOrContainer[i];\n                    var embeddedTView = embeddedLView[TVIEW];\n                    ngDevMode && assertDefined(embeddedTView, 'TView must be allocated');\n                    refreshView(embeddedLView, embeddedTView, embeddedTView.template, embeddedLView[CONTEXT]);\n                }\n                if ((activeIndexFlag & 1 /* HAS_TRANSPLANTED_VIEWS */) !== 0) {\n                    // We should only CD moved views if the component where they were inserted does not match\n                    // the component where they were declared and insertion is on-push. Moved views also\n                    // contains intra component moves, or check-always which need to be skipped.\n                    refreshTransplantedViews(viewOrContainer, lView[DECLARATION_COMPONENT_VIEW]);\n                }\n            }\n            viewOrContainer = viewOrContainer[NEXT];\n        }\n    }\n    /**\n     * Refresh transplanted LViews.\n     *\n     * See: `ActiveIndexFlag.HAS_TRANSPLANTED_VIEWS` and `LView[DECLARATION_COMPONENT_VIEW]` for\n     * explanation of transplanted views.\n     *\n     * @param lContainer The `LContainer` which has transplanted views.\n     * @param declaredComponentLView The `lContainer` parent component `LView`.\n     */\n    function refreshTransplantedViews(lContainer, declaredComponentLView) {\n        var movedViews = lContainer[MOVED_VIEWS];\n        ngDevMode && assertDefined(movedViews, 'Transplanted View flags set but missing MOVED_VIEWS');\n        for (var i = 0; i < movedViews.length; i++) {\n            var movedLView = movedViews[i];\n            var insertionLContainer = movedLView[PARENT];\n            ngDevMode && assertLContainer(insertionLContainer);\n            var insertedComponentLView = insertionLContainer[PARENT][DECLARATION_COMPONENT_VIEW];\n            ngDevMode && assertDefined(insertedComponentLView, 'Missing LView');\n            // Check if we have a transplanted view by compering declaration and insertion location.\n            if (insertedComponentLView !== declaredComponentLView) {\n                // Yes the `LView` is transplanted.\n                // Here we would like to know if the component is `OnPush`. We don't have\n                // explicit `OnPush` flag instead we set `CheckAlways` to false (which is `OnPush`)\n                // Not to be confused with `ManualOnPush` which is used with wether a DOM event\n                // should automatically mark a view as dirty.\n                var insertionComponentIsOnPush = (insertedComponentLView[FLAGS] & 16 /* CheckAlways */) === 0;\n                if (insertionComponentIsOnPush) {\n                    // Here we know that the template has been transplanted across components and is\n                    // on-push (not just moved within a component). If the insertion is marked dirty, then\n                    // there is no need to CD here as we will do it again later when we get to insertion\n                    // point.\n                    var movedTView = movedLView[TVIEW];\n                    ngDevMode && assertDefined(movedTView, 'TView must be allocated');\n                    refreshView(movedLView, movedTView, movedTView.template, movedLView[CONTEXT]);\n                }\n            }\n        }\n    }\n    /////////////\n    /**\n     * Refreshes components by entering the component view and processing its bindings, queries, etc.\n     *\n     * @param componentHostIdx  Element index in LView[] (adjusted for HEADER_OFFSET)\n     */\n    function refreshComponent(hostLView, componentHostIdx) {\n        ngDevMode && assertEqual(isCreationMode(hostLView), false, 'Should be run in update mode');\n        var componentView = getComponentLViewByIndex(componentHostIdx, hostLView);\n        // Only attached components that are CheckAlways or OnPush and dirty should be refreshed\n        if (viewAttachedToChangeDetector(componentView) &&\n            componentView[FLAGS] & (16 /* CheckAlways */ | 64 /* Dirty */)) {\n            var tView = componentView[TVIEW];\n            refreshView(componentView, tView, tView.template, componentView[CONTEXT]);\n        }\n    }\n    function renderComponent(hostLView, componentHostIdx) {\n        ngDevMode && assertEqual(isCreationMode(hostLView), true, 'Should be run in creation mode');\n        var componentView = getComponentLViewByIndex(componentHostIdx, hostLView);\n        syncViewWithBlueprint(componentView);\n        renderView(componentView, componentView[TVIEW], componentView[CONTEXT]);\n    }\n    /**\n     * Syncs an LView instance with its blueprint if they have gotten out of sync.\n     *\n     * Typically, blueprints and their view instances should always be in sync, so the loop here\n     * will be skipped. However, consider this case of two components side-by-side:\n     *\n     * App template:\n     * ```\n     * <comp></comp>\n     * <comp></comp>\n     * ```\n     *\n     * The following will happen:\n     * 1. App template begins processing.\n     * 2. First <comp> is matched as a component and its LView is created.\n     * 3. Second <comp> is matched as a component and its LView is created.\n     * 4. App template completes processing, so it's time to check child templates.\n     * 5. First <comp> template is checked. It has a directive, so its def is pushed to blueprint.\n     * 6. Second <comp> template is checked. Its blueprint has been updated by the first\n     * <comp> template, but its LView was created before this update, so it is out of sync.\n     *\n     * Note that embedded views inside ngFor loops will never be out of sync because these views\n     * are processed as soon as they are created.\n     *\n     * @param componentView The view to sync\n     */\n    function syncViewWithBlueprint(componentView) {\n        var componentTView = componentView[TVIEW];\n        for (var i = componentView.length; i < componentTView.blueprint.length; i++) {\n            componentView.push(componentTView.blueprint[i]);\n        }\n    }\n    /**\n     * Adds LView or LContainer to the end of the current view tree.\n     *\n     * This structure will be used to traverse through nested views to remove listeners\n     * and call onDestroy callbacks.\n     *\n     * @param lView The view where LView or LContainer should be added\n     * @param adjustedHostIndex Index of the view's host node in LView[], adjusted for header\n     * @param lViewOrLContainer The LView or LContainer to add to the view tree\n     * @returns The state passed in\n     */\n    function addToViewTree(lView, lViewOrLContainer) {\n        // TODO(benlesh/misko): This implementation is incorrect, because it always adds the LContainer\n        // to\n        // the end of the queue, which means if the developer retrieves the LContainers from RNodes out\n        // of\n        // order, the change detection will run out of order, as the act of retrieving the the\n        // LContainer\n        // from the RNode is what adds it to the queue.\n        if (lView[CHILD_HEAD]) {\n            lView[CHILD_TAIL][NEXT] = lViewOrLContainer;\n        }\n        else {\n            lView[CHILD_HEAD] = lViewOrLContainer;\n        }\n        lView[CHILD_TAIL] = lViewOrLContainer;\n        return lViewOrLContainer;\n    }\n    ///////////////////////////////\n    //// Change detection\n    ///////////////////////////////\n    /**\n     * Marks current view and all ancestors dirty.\n     *\n     * Returns the root view because it is found as a byproduct of marking the view tree\n     * dirty, and can be used by methods that consume markViewDirty() to easily schedule\n     * change detection. Otherwise, such methods would need to traverse up the view tree\n     * an additional time to get the root view and schedule a tick on it.\n     *\n     * @param lView The starting LView to mark dirty\n     * @returns the root LView\n     */\n    function markViewDirty(lView) {\n        while (lView) {\n            lView[FLAGS] |= 64 /* Dirty */;\n            var parent_1 = getLViewParent(lView);\n            // Stop traversing up as soon as you find a root view that wasn't attached to any container\n            if (isRootView(lView) && !parent_1) {\n                return lView;\n            }\n            // continue otherwise\n            lView = parent_1;\n        }\n        return null;\n    }\n    /**\n     * Used to schedule change detection on the whole application.\n     *\n     * Unlike `tick`, `scheduleTick` coalesces multiple calls into one change detection run.\n     * It is usually called indirectly by calling `markDirty` when the view needs to be\n     * re-rendered.\n     *\n     * Typically `scheduleTick` uses `requestAnimationFrame` to coalesce multiple\n     * `scheduleTick` requests. The scheduling function can be overridden in\n     * `renderComponent`'s `scheduler` option.\n     */\n    function scheduleTick(rootContext, flags) {\n        var nothingScheduled = rootContext.flags === 0 /* Empty */;\n        rootContext.flags |= flags;\n        if (nothingScheduled && rootContext.clean == _CLEAN_PROMISE) {\n            var res_1;\n            rootContext.clean = new Promise(function (r) { return res_1 = r; });\n            rootContext.scheduler(function () {\n                if (rootContext.flags & 1 /* DetectChanges */) {\n                    rootContext.flags &= ~1 /* DetectChanges */;\n                    tickRootContext(rootContext);\n                }\n                if (rootContext.flags & 2 /* FlushPlayers */) {\n                    rootContext.flags &= ~2 /* FlushPlayers */;\n                    var playerHandler = rootContext.playerHandler;\n                    if (playerHandler) {\n                        playerHandler.flushPlayers();\n                    }\n                }\n                rootContext.clean = _CLEAN_PROMISE;\n                res_1(null);\n            });\n        }\n    }\n    function tickRootContext(rootContext) {\n        for (var i = 0; i < rootContext.components.length; i++) {\n            var rootComponent = rootContext.components[i];\n            var lView = readPatchedLView(rootComponent);\n            var tView = lView[TVIEW];\n            renderComponentOrTemplate(lView, tView.template, rootComponent);\n        }\n    }\n    function detectChangesInternal(view, context) {\n        var rendererFactory = view[RENDERER_FACTORY];\n        if (rendererFactory.begin)\n            rendererFactory.begin();\n        try {\n            var tView = view[TVIEW];\n            refreshView(view, tView, tView.template, context);\n        }\n        catch (error) {\n            handleError(view, error);\n            throw error;\n        }\n        finally {\n            if (rendererFactory.end)\n                rendererFactory.end();\n        }\n    }\n    /**\n     * Synchronously perform change detection on a root view and its components.\n     *\n     * @param lView The view which the change detection should be performed on.\n     */\n    function detectChangesInRootView(lView) {\n        tickRootContext(lView[CONTEXT]);\n    }\n    function checkNoChangesInternal(view, context) {\n        setCheckNoChangesMode(true);\n        try {\n            detectChangesInternal(view, context);\n        }\n        finally {\n            setCheckNoChangesMode(false);\n        }\n    }\n    /**\n     * Checks the change detector on a root view and its components, and throws if any changes are\n     * detected.\n     *\n     * This is used in development mode to verify that running change detection doesn't\n     * introduce other changes.\n     *\n     * @param lView The view which the change detection should be checked on.\n     */\n    function checkNoChangesInRootView(lView) {\n        setCheckNoChangesMode(true);\n        try {\n            detectChangesInRootView(lView);\n        }\n        finally {\n            setCheckNoChangesMode(false);\n        }\n    }\n    function executeViewQueryFn(flags, viewQueryFn, component) {\n        ngDevMode && assertDefined(viewQueryFn, 'View queries function to execute must be defined.');\n        setCurrentQueryIndex(0);\n        viewQueryFn(flags, component);\n    }\n    ///////////////////////////////\n    //// Bindings & interpolations\n    ///////////////////////////////\n    /**\n     * Stores meta-data for a property binding to be used by TestBed's `DebugElement.properties`.\n     *\n     * In order to support TestBed's `DebugElement.properties` we need to save, for each binding:\n     * - a bound property name;\n     * - a static parts of interpolated strings;\n     *\n     * A given property metadata is saved at the binding's index in the `TView.data` (in other words, a\n     * property binding metadata will be stored in `TView.data` at the same index as a bound value in\n     * `LView`). Metadata are represented as `INTERPOLATION_DELIMITER`-delimited string with the\n     * following format:\n     * - `propertyName` for bound properties;\n     * - `propertyName�prefix�interpolation_static_part1�..interpolation_static_partN�suffix` for\n     * interpolated properties.\n     *\n     * @param tData `TData` where meta-data will be saved;\n     * @param nodeIndex index of a `TNode` that is a target of the binding;\n     * @param propertyName bound property name;\n     * @param bindingIndex binding index in `LView`\n     * @param interpolationParts static interpolation parts (for property interpolations)\n     */\n    function storePropertyBindingMetadata(tData, nodeIndex, propertyName, bindingIndex) {\n        var interpolationParts = [];\n        for (var _i = 4; _i < arguments.length; _i++) {\n            interpolationParts[_i - 4] = arguments[_i];\n        }\n        // Binding meta-data are stored only the first time a given property instruction is processed.\n        // Since we don't have a concept of the \"first update pass\" we need to check for presence of the\n        // binding meta-data to decide if one should be stored (or if was stored already).\n        if (tData[bindingIndex] === null) {\n            var tNode = tData[nodeIndex + HEADER_OFFSET];\n            if (tNode.inputs == null || !tNode.inputs[propertyName]) {\n                var propBindingIdxs = tNode.propertyBindings || (tNode.propertyBindings = []);\n                propBindingIdxs.push(bindingIndex);\n                var bindingMetadata = propertyName;\n                if (interpolationParts.length > 0) {\n                    bindingMetadata +=\n                        INTERPOLATION_DELIMITER + interpolationParts.join(INTERPOLATION_DELIMITER);\n                }\n                tData[bindingIndex] = bindingMetadata;\n            }\n        }\n    }\n    var CLEAN_PROMISE = _CLEAN_PROMISE;\n    function getCleanup(view) {\n        // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n        return view[CLEANUP] || (view[CLEANUP] = ngDevMode ? new LCleanup() : []);\n    }\n    function getTViewCleanup(view) {\n        return view[TVIEW].cleanup || (view[TVIEW].cleanup = ngDevMode ? new TCleanup() : []);\n    }\n    /**\n     * There are cases where the sub component's renderer needs to be included\n     * instead of the current renderer (see the componentSyntheticHost* instructions).\n     */\n    function loadComponentRenderer(tNode, lView) {\n        var componentLView = lView[tNode.index];\n        return componentLView[RENDERER];\n    }\n    /** Handles an error thrown in an LView. */\n    function handleError(lView, error) {\n        var injector = lView[INJECTOR$1];\n        var errorHandler = injector ? injector.get(ErrorHandler, null) : null;\n        errorHandler && errorHandler.handleError(error);\n    }\n    /**\n     * Set the inputs of directives at the current node to corresponding value.\n     *\n     * @param lView the `LView` which contains the directives.\n     * @param inputs mapping between the public \"input\" name and privately-known,\n     * possibly minified, property names to write to.\n     * @param value Value to set.\n     */\n    function setInputsForProperty(lView, inputs, publicName, value) {\n        var tView = lView[TVIEW];\n        for (var i = 0; i < inputs.length;) {\n            var index = inputs[i++];\n            var privateName = inputs[i++];\n            var instance = lView[index];\n            ngDevMode && assertDataInRange(lView, index);\n            var def = tView.data[index];\n            if (def.setInput !== null) {\n                def.setInput(instance, value, publicName, privateName);\n            }\n            else {\n                instance[privateName] = value;\n            }\n        }\n    }\n    /**\n     * Updates a text binding at a given index in a given LView.\n     */\n    function textBindingInternal(lView, index, value) {\n        ngDevMode && assertNotSame(value, NO_CHANGE, 'value should not be NO_CHANGE');\n        ngDevMode && assertDataInRange(lView, index + HEADER_OFFSET);\n        var element = getNativeByIndex(index, lView);\n        ngDevMode && assertDefined(element, 'native element should exist');\n        ngDevMode && ngDevMode.rendererSetText++;\n        var renderer = lView[RENDERER];\n        isProceduralRenderer(renderer) ? renderer.setValue(element, value) : element.textContent = value;\n    }\n    /**\n     * Renders all initial styling (class and style values) on to the element from the tNode.\n     *\n     * All initial styling data (i.e. any values extracted from the `style` or `class` attributes\n     * on an element) are collected into the `tNode.styles` and `tNode.classes` data structures.\n     * These values are populated during the creation phase of an element and are then later\n     * applied once the element is instantiated. This function applies each of the static\n     * style and class entries to the element.\n     */\n    function renderInitialStyling(renderer, native, tNode, append) {\n        if (tNode.classes !== null) {\n            if (append) {\n                renderStylingMap(renderer, native, tNode.classes, true);\n            }\n            else {\n                var classes = getInitialStylingValue(tNode.classes);\n                writeStylingValueDirectly(renderer, native, classes, true, null);\n            }\n        }\n        if (tNode.styles !== null) {\n            if (append) {\n                renderStylingMap(renderer, native, tNode.styles, false);\n            }\n            else {\n                var styles = getInitialStylingValue(tNode.styles);\n                writeStylingValueDirectly(renderer, native, styles, false, null);\n            }\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var unusedValueToPlacateAjd$1 = unusedValueExportToPlacateAjd$1 + unusedValueExportToPlacateAjd$4 + unusedValueExportToPlacateAjd$5 + unusedValueExportToPlacateAjd$3 + unusedValueExportToPlacateAjd;\n    function getLContainer(tNode, embeddedView) {\n        ngDevMode && assertLView(embeddedView);\n        var container = embeddedView[PARENT];\n        if (tNode.index === -1) {\n            // This is a dynamically created view inside a dynamic container.\n            // The parent isn't an LContainer if the embedded view hasn't been attached yet.\n            return isLContainer(container) ? container : null;\n        }\n        else {\n            ngDevMode && assertLContainer(container);\n            // This is a inline view node (e.g. embeddedViewStart)\n            return container;\n        }\n    }\n    /**\n     * Retrieves render parent for a given view.\n     * Might be null if a view is not yet attached to any container.\n     */\n    function getContainerRenderParent(tViewNode, view) {\n        var container = getLContainer(tViewNode, view);\n        return container ? nativeParentNode(view[RENDERER], container[NATIVE]) : null;\n    }\n    /**\n     * NOTE: for performance reasons, the possible actions are inlined within the function instead of\n     * being passed as an argument.\n     */\n    function applyToElementOrContainer(action, renderer, parent, lNodeToHandle, beforeNode) {\n        // If this slot was allocated for a text node dynamically created by i18n, the text node itself\n        // won't be created until i18nApply() in the update block, so this node should be skipped.\n        // For more info, see \"ICU expressions should work inside an ngTemplateOutlet inside an ngFor\"\n        // in `i18n_spec.ts`.\n        if (lNodeToHandle != null) {\n            var lContainer = void 0;\n            var isComponent = false;\n            // We are expecting an RNode, but in the case of a component or LContainer the `RNode` is\n            // wrapped in an array which needs to be unwrapped. We need to know if it is a component and if\n            // it has LContainer so that we can process all of those cases appropriately.\n            if (isLContainer(lNodeToHandle)) {\n                lContainer = lNodeToHandle;\n            }\n            else if (isLView(lNodeToHandle)) {\n                isComponent = true;\n                ngDevMode && assertDefined(lNodeToHandle[HOST], 'HOST must be defined for a component LView');\n                lNodeToHandle = lNodeToHandle[HOST];\n            }\n            var rNode = unwrapRNode(lNodeToHandle);\n            ngDevMode && !isProceduralRenderer(renderer) && assertDomNode(rNode);\n            if (action === 0 /* Create */ && parent !== null) {\n                if (beforeNode == null) {\n                    nativeAppendChild(renderer, parent, rNode);\n                }\n                else {\n                    nativeInsertBefore(renderer, parent, rNode, beforeNode || null);\n                }\n            }\n            else if (action === 1 /* Insert */ && parent !== null) {\n                nativeInsertBefore(renderer, parent, rNode, beforeNode || null);\n            }\n            else if (action === 2 /* Detach */) {\n                nativeRemoveNode(renderer, rNode, isComponent);\n            }\n            else if (action === 3 /* Destroy */) {\n                ngDevMode && ngDevMode.rendererDestroyNode++;\n                renderer.destroyNode(rNode);\n            }\n            if (lContainer != null) {\n                applyContainer(renderer, action, lContainer, parent, beforeNode);\n            }\n        }\n    }\n    function createTextNode(value, renderer) {\n        ngDevMode && ngDevMode.rendererCreateTextNode++;\n        ngDevMode && ngDevMode.rendererSetText++;\n        return isProceduralRenderer(renderer) ? renderer.createText(value) :\n            renderer.createTextNode(value);\n    }\n    function addRemoveViewFromContainer(lView, insertMode, beforeNode) {\n        var renderParent = getContainerRenderParent(lView[TVIEW].node, lView);\n        ngDevMode && assertNodeType(lView[TVIEW].node, 2 /* View */);\n        if (renderParent) {\n            var renderer = lView[RENDERER];\n            var action = insertMode ? 1 /* Insert */ : 2 /* Detach */;\n            applyView(renderer, action, lView, renderParent, beforeNode);\n        }\n    }\n    /**\n     * Detach a `LView` from the DOM by detaching its nodes.\n     *\n     * @param lView the `LView` to be detached.\n     */\n    function renderDetachView(lView) {\n        applyView(lView[RENDERER], 2 /* Detach */, lView, null, null);\n    }\n    /**\n     * Traverses down and up the tree of views and containers to remove listeners and\n     * call onDestroy callbacks.\n     *\n     * Notes:\n     *  - Because it's used for onDestroy calls, it needs to be bottom-up.\n     *  - Must process containers instead of their views to avoid splicing\n     *  when views are destroyed and re-added.\n     *  - Using a while loop because it's faster than recursion\n     *  - Destroy only called on movement to sibling or movement to parent (laterally or up)\n     *\n     *  @param rootView The view to destroy\n     */\n    function destroyViewTree(rootView) {\n        // If the view has no children, we can clean it up and return early.\n        var lViewOrLContainer = rootView[CHILD_HEAD];\n        if (!lViewOrLContainer) {\n            return cleanUpView(rootView);\n        }\n        while (lViewOrLContainer) {\n            var next = null;\n            if (isLView(lViewOrLContainer)) {\n                // If LView, traverse down to child.\n                next = lViewOrLContainer[CHILD_HEAD];\n            }\n            else {\n                ngDevMode && assertLContainer(lViewOrLContainer);\n                // If container, traverse down to its first LView.\n                var firstView = lViewOrLContainer[CONTAINER_HEADER_OFFSET];\n                if (firstView)\n                    next = firstView;\n            }\n            if (!next) {\n                // Only clean up view when moving to the side or up, as destroy hooks\n                // should be called in order from the bottom up.\n                while (lViewOrLContainer && !lViewOrLContainer[NEXT] && lViewOrLContainer !== rootView) {\n                    cleanUpView(lViewOrLContainer);\n                    lViewOrLContainer = getParentState(lViewOrLContainer, rootView);\n                }\n                cleanUpView(lViewOrLContainer || rootView);\n                next = lViewOrLContainer && lViewOrLContainer[NEXT];\n            }\n            lViewOrLContainer = next;\n        }\n    }\n    /**\n     * Inserts a view into a container.\n     *\n     * This adds the view to the container's array of active views in the correct\n     * position. It also adds the view's elements to the DOM if the container isn't a\n     * root node of another view (in that case, the view's elements will be added when\n     * the container's parent view is added later).\n     *\n     * @param lView The view to insert\n     * @param lContainer The container into which the view should be inserted\n     * @param index Which index in the container to insert the child view into\n     */\n    function insertView(lView, lContainer, index) {\n        ngDevMode && assertLView(lView);\n        ngDevMode && assertLContainer(lContainer);\n        var indexInContainer = CONTAINER_HEADER_OFFSET + index;\n        var containerLength = lContainer.length;\n        if (index > 0) {\n            // This is a new view, we need to add it to the children.\n            lContainer[indexInContainer - 1][NEXT] = lView;\n        }\n        if (index < containerLength - CONTAINER_HEADER_OFFSET) {\n            lView[NEXT] = lContainer[indexInContainer];\n            addToArray(lContainer, CONTAINER_HEADER_OFFSET + index, lView);\n        }\n        else {\n            lContainer.push(lView);\n            lView[NEXT] = null;\n        }\n        lView[PARENT] = lContainer;\n        // track views where declaration and insertion points are different\n        var declarationLContainer = lView[DECLARATION_LCONTAINER];\n        if (declarationLContainer !== null && lContainer !== declarationLContainer) {\n            trackMovedView(declarationLContainer, lView);\n        }\n        // notify query that a new view has been added\n        var lQueries = lView[QUERIES];\n        if (lQueries !== null) {\n            lQueries.insertView(lView[TVIEW]);\n        }\n        // Sets the attached flag\n        lView[FLAGS] |= 128 /* Attached */;\n    }\n    /**\n     * Track views created from the declaration container (TemplateRef) and inserted into a\n     * different LContainer.\n     */\n    function trackMovedView(declarationContainer, lView) {\n        ngDevMode && assertDefined(lView, 'LView required');\n        ngDevMode && assertLContainer(declarationContainer);\n        var movedViews = declarationContainer[MOVED_VIEWS];\n        var insertedLContainer = lView[PARENT];\n        ngDevMode && assertLContainer(insertedLContainer);\n        var insertedComponentLView = insertedLContainer[PARENT][DECLARATION_COMPONENT_VIEW];\n        ngDevMode && assertDefined(insertedComponentLView, 'Missing insertedComponentLView');\n        var insertedComponentIsOnPush = (insertedComponentLView[FLAGS] & 16 /* CheckAlways */) !== 16 /* CheckAlways */;\n        if (insertedComponentIsOnPush) {\n            var declaredComponentLView = lView[DECLARATION_COMPONENT_VIEW];\n            ngDevMode && assertDefined(declaredComponentLView, 'Missing declaredComponentLView');\n            if (declaredComponentLView !== insertedComponentLView) {\n                // At this point the declaration-component is not same as insertion-component and we are in\n                // on-push mode, this means that this is a transplanted view. Mark the declared lView as\n                // having\n                // transplanted views so that those views can participate in CD.\n                declarationContainer[ACTIVE_INDEX] |= 1 /* HAS_TRANSPLANTED_VIEWS */;\n            }\n        }\n        if (movedViews === null) {\n            declarationContainer[MOVED_VIEWS] = [lView];\n        }\n        else {\n            movedViews.push(lView);\n        }\n    }\n    function detachMovedView(declarationContainer, lView) {\n        ngDevMode && assertLContainer(declarationContainer);\n        ngDevMode && assertDefined(declarationContainer[MOVED_VIEWS], 'A projected view should belong to a non-empty projected views collection');\n        var movedViews = declarationContainer[MOVED_VIEWS];\n        var declaredViewIndex = movedViews.indexOf(lView);\n        movedViews.splice(declaredViewIndex, 1);\n    }\n    /**\n     * Detaches a view from a container.\n     *\n     * This method removes the view from the container's array of active views. It also\n     * removes the view's elements from the DOM.\n     *\n     * @param lContainer The container from which to detach a view\n     * @param removeIndex The index of the view to detach\n     * @returns Detached LView instance.\n     */\n    function detachView(lContainer, removeIndex) {\n        if (lContainer.length <= CONTAINER_HEADER_OFFSET)\n            return;\n        var indexInContainer = CONTAINER_HEADER_OFFSET + removeIndex;\n        var viewToDetach = lContainer[indexInContainer];\n        if (viewToDetach) {\n            var declarationLContainer = viewToDetach[DECLARATION_LCONTAINER];\n            if (declarationLContainer !== null && declarationLContainer !== lContainer) {\n                detachMovedView(declarationLContainer, viewToDetach);\n            }\n            if (removeIndex > 0) {\n                lContainer[indexInContainer - 1][NEXT] = viewToDetach[NEXT];\n            }\n            var removedLView = removeFromArray(lContainer, CONTAINER_HEADER_OFFSET + removeIndex);\n            addRemoveViewFromContainer(viewToDetach, false, null);\n            // notify query that a view has been removed\n            var lQueries = removedLView[QUERIES];\n            if (lQueries !== null) {\n                lQueries.detachView(removedLView[TVIEW]);\n            }\n            viewToDetach[PARENT] = null;\n            viewToDetach[NEXT] = null;\n            // Unsets the attached flag\n            viewToDetach[FLAGS] &= ~128 /* Attached */;\n        }\n        return viewToDetach;\n    }\n    /**\n     * Removes a view from a container, i.e. detaches it and then destroys the underlying LView.\n     *\n     * @param lContainer The container from which to remove a view\n     * @param removeIndex The index of the view to remove\n     */\n    function removeView(lContainer, removeIndex) {\n        var detachedView = detachView(lContainer, removeIndex);\n        detachedView && destroyLView(detachedView);\n    }\n    /**\n     * A standalone function which destroys an LView,\n     * conducting cleanup (e.g. removing listeners, calling onDestroys).\n     *\n     * @param lView The view to be destroyed.\n     */\n    function destroyLView(lView) {\n        if (!(lView[FLAGS] & 256 /* Destroyed */)) {\n            var renderer = lView[RENDERER];\n            if (isProceduralRenderer(renderer) && renderer.destroyNode) {\n                applyView(renderer, 3 /* Destroy */, lView, null, null);\n            }\n            destroyViewTree(lView);\n        }\n    }\n    /**\n     * Determines which LViewOrLContainer to jump to when traversing back up the\n     * tree in destroyViewTree.\n     *\n     * Normally, the view's parent LView should be checked, but in the case of\n     * embedded views, the container (which is the view node's parent, but not the\n     * LView's parent) needs to be checked for a possible next property.\n     *\n     * @param lViewOrLContainer The LViewOrLContainer for which we need a parent state\n     * @param rootView The rootView, so we don't propagate too far up the view tree\n     * @returns The correct parent LViewOrLContainer\n     */\n    function getParentState(lViewOrLContainer, rootView) {\n        var tNode;\n        if (isLView(lViewOrLContainer) && (tNode = lViewOrLContainer[T_HOST]) &&\n            tNode.type === 2 /* View */) {\n            // if it's an embedded view, the state needs to go up to the container, in case the\n            // container has a next\n            return getLContainer(tNode, lViewOrLContainer);\n        }\n        else {\n            // otherwise, use parent view for containers or component views\n            return lViewOrLContainer[PARENT] === rootView ? null : lViewOrLContainer[PARENT];\n        }\n    }\n    /**\n     * Calls onDestroys hooks for all directives and pipes in a given view and then removes all\n     * listeners. Listeners are removed as the last step so events delivered in the onDestroys hooks\n     * can be propagated to @Output listeners.\n     *\n     * @param view The LView to clean up\n     */\n    function cleanUpView(view) {\n        if (isLView(view) && !(view[FLAGS] & 256 /* Destroyed */)) {\n            // Usually the Attached flag is removed when the view is detached from its parent, however\n            // if it's a root view, the flag won't be unset hence why we're also removing on destroy.\n            view[FLAGS] &= ~128 /* Attached */;\n            // Mark the LView as destroyed *before* executing the onDestroy hooks. An onDestroy hook\n            // runs arbitrary user code, which could include its own `viewRef.destroy()` (or similar). If\n            // We don't flag the view as destroyed before the hooks, this could lead to an infinite loop.\n            // This also aligns with the ViewEngine behavior. It also means that the onDestroy hook is\n            // really more of an \"afterDestroy\" hook if you think about it.\n            view[FLAGS] |= 256 /* Destroyed */;\n            executeOnDestroys(view);\n            removeListeners(view);\n            var hostTNode = view[T_HOST];\n            // For component views only, the local renderer is destroyed as clean up time.\n            if (hostTNode && hostTNode.type === 3 /* Element */ && isProceduralRenderer(view[RENDERER])) {\n                ngDevMode && ngDevMode.rendererDestroy++;\n                view[RENDERER].destroy();\n            }\n            var declarationContainer = view[DECLARATION_LCONTAINER];\n            // we are dealing with an embedded view that is still inserted into a container\n            if (declarationContainer !== null && isLContainer(view[PARENT])) {\n                // and this is a projected view\n                if (declarationContainer !== view[PARENT]) {\n                    detachMovedView(declarationContainer, view);\n                }\n                // For embedded views still attached to a container: remove query result from this view.\n                var lQueries = view[QUERIES];\n                if (lQueries !== null) {\n                    lQueries.detachView(view[TVIEW]);\n                }\n            }\n        }\n    }\n    /** Removes listeners and unsubscribes from output subscriptions */\n    function removeListeners(lView) {\n        var tCleanup = lView[TVIEW].cleanup;\n        if (tCleanup !== null) {\n            var lCleanup = lView[CLEANUP];\n            for (var i = 0; i < tCleanup.length - 1; i += 2) {\n                if (typeof tCleanup[i] === 'string') {\n                    // This is a native DOM listener\n                    var idxOrTargetGetter = tCleanup[i + 1];\n                    var target = typeof idxOrTargetGetter === 'function' ?\n                        idxOrTargetGetter(lView) :\n                        unwrapRNode(lView[idxOrTargetGetter]);\n                    var listener = lCleanup[tCleanup[i + 2]];\n                    var useCaptureOrSubIdx = tCleanup[i + 3];\n                    if (typeof useCaptureOrSubIdx === 'boolean') {\n                        // native DOM listener registered with Renderer3\n                        target.removeEventListener(tCleanup[i], listener, useCaptureOrSubIdx);\n                    }\n                    else {\n                        if (useCaptureOrSubIdx >= 0) {\n                            // unregister\n                            lCleanup[useCaptureOrSubIdx]();\n                        }\n                        else {\n                            // Subscription\n                            lCleanup[-useCaptureOrSubIdx].unsubscribe();\n                        }\n                    }\n                    i += 2;\n                }\n                else {\n                    // This is a cleanup function that is grouped with the index of its context\n                    var context = lCleanup[tCleanup[i + 1]];\n                    tCleanup[i].call(context);\n                }\n            }\n            lView[CLEANUP] = null;\n        }\n    }\n    /** Calls onDestroy hooks for this view */\n    function executeOnDestroys(view) {\n        var tView = view[TVIEW];\n        var destroyHooks;\n        if (tView != null && (destroyHooks = tView.destroyHooks) != null) {\n            for (var i = 0; i < destroyHooks.length; i += 2) {\n                var context = view[destroyHooks[i]];\n                // Only call the destroy hook if the context has been requested.\n                if (!(context instanceof NodeInjectorFactory)) {\n                    destroyHooks[i + 1].call(context);\n                }\n            }\n        }\n    }\n    /**\n     * Returns a native element if a node can be inserted into the given parent.\n     *\n     * There are two reasons why we may not be able to insert a element immediately.\n     * - Projection: When creating a child content element of a component, we have to skip the\n     *   insertion because the content of a component will be projected.\n     *   `<component><content>delayed due to projection</content></component>`\n     * - Parent container is disconnected: This can happen when we are inserting a view into\n     *   parent container, which itself is disconnected. For example the parent container is part\n     *   of a View which has not be inserted or is made for projection but has not been inserted\n     *   into destination.\n     */\n    function getRenderParent(tNode, currentView) {\n        // Skip over element and ICU containers as those are represented by a comment node and\n        // can't be used as a render parent.\n        var parentTNode = tNode.parent;\n        while (parentTNode != null && (parentTNode.type === 4 /* ElementContainer */ ||\n            parentTNode.type === 5 /* IcuContainer */)) {\n            tNode = parentTNode;\n            parentTNode = tNode.parent;\n        }\n        // If the parent tNode is null, then we are inserting across views: either into an embedded view\n        // or a component view.\n        if (parentTNode == null) {\n            var hostTNode = currentView[T_HOST];\n            if (hostTNode.type === 2 /* View */) {\n                // We are inserting a root element of an embedded view We might delay insertion of children\n                // for a given view if it is disconnected. This might happen for 2 main reasons:\n                // - view is not inserted into any container(view was created but not inserted yet)\n                // - view is inserted into a container but the container itself is not inserted into the DOM\n                // (container might be part of projection or child of a view that is not inserted yet).\n                // In other words we can insert children of a given view if this view was inserted into a\n                // container and the container itself has its render parent determined.\n                return getContainerRenderParent(hostTNode, currentView);\n            }\n            else {\n                // We are inserting a root element of the component view into the component host element and\n                // it should always be eager.\n                ngDevMode && assertNodeOfPossibleTypes(hostTNode, 3 /* Element */);\n                return currentView[HOST];\n            }\n        }\n        else {\n            var isIcuCase = tNode && tNode.type === 5 /* IcuContainer */;\n            // If the parent of this node is an ICU container, then it is represented by comment node and we\n            // need to use it as an anchor. If it is projected then it's direct parent node is the renderer.\n            if (isIcuCase && tNode.flags & 4 /* isProjected */) {\n                return getNativeByTNode(tNode, currentView).parentNode;\n            }\n            ngDevMode && assertNodeType(parentTNode, 3 /* Element */);\n            if (parentTNode.flags & 2 /* isComponentHost */) {\n                var tData = currentView[TVIEW].data;\n                var tNode_1 = tData[parentTNode.index];\n                var encapsulation = tData[tNode_1.directiveStart].encapsulation;\n                // We've got a parent which is an element in the current view. We just need to verify if the\n                // parent element is not a component. Component's content nodes are not inserted immediately\n                // because they will be projected, and so doing insert at this point would be wasteful.\n                // Since the projection would then move it to its final destination. Note that we can't\n                // make this assumption when using the Shadow DOM, because the native projection placeholders\n                // (<content> or <slot>) have to be in place as elements are being inserted.\n                if (encapsulation !== exports.ViewEncapsulation.ShadowDom &&\n                    encapsulation !== exports.ViewEncapsulation.Native) {\n                    return null;\n                }\n            }\n            return getNativeByTNode(parentTNode, currentView);\n        }\n    }\n    /**\n     * Inserts a native node before another native node for a given parent using {@link Renderer3}.\n     * This is a utility function that can be used when native nodes were determined - it abstracts an\n     * actual renderer being used.\n     */\n    function nativeInsertBefore(renderer, parent, child, beforeNode) {\n        ngDevMode && ngDevMode.rendererInsertBefore++;\n        if (isProceduralRenderer(renderer)) {\n            renderer.insertBefore(parent, child, beforeNode);\n        }\n        else {\n            parent.insertBefore(child, beforeNode, true);\n        }\n    }\n    function nativeAppendChild(renderer, parent, child) {\n        ngDevMode && ngDevMode.rendererAppendChild++;\n        ngDevMode && assertDefined(parent, 'parent node must be defined');\n        if (isProceduralRenderer(renderer)) {\n            renderer.appendChild(parent, child);\n        }\n        else {\n            parent.appendChild(child);\n        }\n    }\n    function nativeAppendOrInsertBefore(renderer, parent, child, beforeNode) {\n        if (beforeNode !== null) {\n            nativeInsertBefore(renderer, parent, child, beforeNode);\n        }\n        else {\n            nativeAppendChild(renderer, parent, child);\n        }\n    }\n    /** Removes a node from the DOM given its native parent. */\n    function nativeRemoveChild(renderer, parent, child, isHostElement) {\n        if (isProceduralRenderer(renderer)) {\n            renderer.removeChild(parent, child, isHostElement);\n        }\n        else {\n            parent.removeChild(child);\n        }\n    }\n    /**\n     * Returns a native parent of a given native node.\n     */\n    function nativeParentNode(renderer, node) {\n        return (isProceduralRenderer(renderer) ? renderer.parentNode(node) : node.parentNode);\n    }\n    /**\n     * Returns a native sibling of a given native node.\n     */\n    function nativeNextSibling(renderer, node) {\n        return isProceduralRenderer(renderer) ? renderer.nextSibling(node) : node.nextSibling;\n    }\n    /**\n     * Finds a native \"anchor\" node for cases where we can't append a native child directly\n     * (`appendChild`) and need to use a reference (anchor) node for the `insertBefore` operation.\n     * @param parentTNode\n     * @param lView\n     */\n    function getNativeAnchorNode(parentTNode, lView) {\n        if (parentTNode.type === 2 /* View */) {\n            var lContainer = getLContainer(parentTNode, lView);\n            if (lContainer === null)\n                return null;\n            var index = lContainer.indexOf(lView, CONTAINER_HEADER_OFFSET) - CONTAINER_HEADER_OFFSET;\n            return getBeforeNodeForView(index, lContainer);\n        }\n        else if (parentTNode.type === 4 /* ElementContainer */ ||\n            parentTNode.type === 5 /* IcuContainer */) {\n            return getNativeByTNode(parentTNode, lView);\n        }\n        return null;\n    }\n    /**\n     * Appends the `child` native node (or a collection of nodes) to the `parent`.\n     *\n     * The element insertion might be delayed {@link canInsertNativeNode}.\n     *\n     * @param childEl The native child (or children) that should be appended\n     * @param childTNode The TNode of the child element\n     * @param currentView The current LView\n     * @returns Whether or not the child was appended\n     */\n    function appendChild(childEl, childTNode, currentView) {\n        var renderParent = getRenderParent(childTNode, currentView);\n        if (renderParent != null) {\n            var renderer = currentView[RENDERER];\n            var parentTNode = childTNode.parent || currentView[T_HOST];\n            var anchorNode = getNativeAnchorNode(parentTNode, currentView);\n            if (Array.isArray(childEl)) {\n                for (var i = 0; i < childEl.length; i++) {\n                    nativeAppendOrInsertBefore(renderer, renderParent, childEl[i], anchorNode);\n                }\n            }\n            else {\n                nativeAppendOrInsertBefore(renderer, renderParent, childEl, anchorNode);\n            }\n        }\n    }\n    /**\n     * Returns the first native node for a given LView, starting from the provided TNode.\n     *\n     * Native nodes are returned in the order in which those appear in the native tree (DOM).\n     */\n    function getFirstNativeNode(lView, tNode) {\n        if (tNode !== null) {\n            ngDevMode && assertNodeOfPossibleTypes(tNode, 3 /* Element */, 0 /* Container */, 4 /* ElementContainer */, 5 /* IcuContainer */, 1 /* Projection */);\n            var tNodeType = tNode.type;\n            if (tNodeType === 3 /* Element */) {\n                return getNativeByTNode(tNode, lView);\n            }\n            else if (tNodeType === 0 /* Container */) {\n                return getBeforeNodeForView(-1, lView[tNode.index]);\n            }\n            else if (tNodeType === 4 /* ElementContainer */ || tNodeType === 5 /* IcuContainer */) {\n                var elIcuContainerChild = tNode.child;\n                if (elIcuContainerChild !== null) {\n                    return getFirstNativeNode(lView, elIcuContainerChild);\n                }\n                else {\n                    var rNodeOrLContainer = lView[tNode.index];\n                    if (isLContainer(rNodeOrLContainer)) {\n                        return getBeforeNodeForView(-1, rNodeOrLContainer);\n                    }\n                    else {\n                        return unwrapRNode(rNodeOrLContainer);\n                    }\n                }\n            }\n            else {\n                var componentView = lView[DECLARATION_COMPONENT_VIEW];\n                var componentHost = componentView[T_HOST];\n                var parentView = getLViewParent(componentView);\n                var firstProjectedTNode = componentHost.projection[tNode.projection];\n                if (firstProjectedTNode != null) {\n                    return getFirstNativeNode(parentView, firstProjectedTNode);\n                }\n                else {\n                    return getFirstNativeNode(lView, tNode.next);\n                }\n            }\n        }\n        return null;\n    }\n    function getBeforeNodeForView(viewIndexInContainer, lContainer) {\n        var nextViewIndex = CONTAINER_HEADER_OFFSET + viewIndexInContainer + 1;\n        if (nextViewIndex < lContainer.length) {\n            var lView = lContainer[nextViewIndex];\n            var firstTNodeOfView = lView[TVIEW].firstChild;\n            if (firstTNodeOfView !== null) {\n                return getFirstNativeNode(lView, firstTNodeOfView);\n            }\n        }\n        return lContainer[NATIVE];\n    }\n    /**\n     * Removes a native node itself using a given renderer. To remove the node we are looking up its\n     * parent from the native tree as not all platforms / browsers support the equivalent of\n     * node.remove().\n     *\n     * @param renderer A renderer to be used\n     * @param rNode The native node that should be removed\n     * @param isHostElement A flag indicating if a node to be removed is a host of a component.\n     */\n    function nativeRemoveNode(renderer, rNode, isHostElement) {\n        var nativeParent = nativeParentNode(renderer, rNode);\n        if (nativeParent) {\n            nativeRemoveChild(renderer, nativeParent, rNode, isHostElement);\n        }\n    }\n    /**\n     * Performs the operation of `action` on the node. Typically this involves inserting or removing\n     * nodes on the LView or projection boundary.\n     */\n    function applyNodes(renderer, action, tNode, lView, renderParent, beforeNode, isProjection) {\n        while (tNode != null) {\n            ngDevMode && assertTNodeForLView(tNode, lView);\n            ngDevMode && assertNodeOfPossibleTypes(tNode, 0 /* Container */, 3 /* Element */, 4 /* ElementContainer */, 1 /* Projection */, 1 /* Projection */, 5 /* IcuContainer */);\n            var rawSlotValue = lView[tNode.index];\n            var tNodeType = tNode.type;\n            if (isProjection) {\n                if (action === 0 /* Create */) {\n                    rawSlotValue && attachPatchData(unwrapRNode(rawSlotValue), lView);\n                    tNode.flags |= 4 /* isProjected */;\n                }\n            }\n            if ((tNode.flags & 64 /* isDetached */) !== 64 /* isDetached */) {\n                if (tNodeType === 4 /* ElementContainer */ || tNodeType === 5 /* IcuContainer */) {\n                    applyNodes(renderer, action, tNode.child, lView, renderParent, beforeNode, false);\n                    applyToElementOrContainer(action, renderer, renderParent, rawSlotValue, beforeNode);\n                }\n                else if (tNodeType === 1 /* Projection */) {\n                    applyProjectionRecursive(renderer, action, lView, tNode, renderParent, beforeNode);\n                }\n                else {\n                    ngDevMode && assertNodeOfPossibleTypes(tNode, 3 /* Element */, 0 /* Container */);\n                    applyToElementOrContainer(action, renderer, renderParent, rawSlotValue, beforeNode);\n                }\n            }\n            tNode = isProjection ? tNode.projectionNext : tNode.next;\n        }\n    }\n    /**\n     * `applyView` performs operation on the view as specified in `action` (insert, detach, destroy)\n     *\n     * Inserting a view without projection or containers at top level is simple. Just iterate over the\n     * root nodes of the View, and for each node perform the `action`.\n     *\n     * Things get more complicated with containers and projections. That is because coming across:\n     * - Container: implies that we have to insert/remove/destroy the views of that container as well\n     *              which in turn can have their own Containers at the View roots.\n     * - Projection: implies that we have to insert/remove/destroy the nodes of the projection. The\n     *               complication is that the nodes we are projecting can themselves have Containers\n     *               or other Projections.\n     *\n     * As you can see this is a very recursive problem. Yes recursion is not most efficient but the\n     * code is complicated enough that trying to implemented with recursion becomes unmaintainable.\n     *\n     * @param renderer Renderer to use\n     * @param action action to perform (insert, detach, destroy)\n     * @param lView The LView which needs to be inserted, detached, destroyed.\n     * @param renderParent parent DOM element for insertion/removal.\n     * @param beforeNode Before which node the insertions should happen.\n     */\n    function applyView(renderer, action, lView, renderParent, beforeNode) {\n        var tView = lView[TVIEW];\n        ngDevMode && assertNodeType(tView.node, 2 /* View */);\n        var viewRootTNode = tView.node.child;\n        applyNodes(renderer, action, viewRootTNode, lView, renderParent, beforeNode, false);\n    }\n    /**\n     * `applyProjection` performs operation on the projection.\n     *\n     * Inserting a projection requires us to locate the projected nodes from the parent component. The\n     * complication is that those nodes themselves could be re-projected from their parent component.\n     *\n     * @param lView The LView which needs to be inserted, detached, destroyed.\n     * @param tProjectionNode node to project\n     */\n    function applyProjection(lView, tProjectionNode) {\n        var renderer = lView[RENDERER];\n        var renderParent = getRenderParent(tProjectionNode, lView);\n        var parentTNode = tProjectionNode.parent || lView[T_HOST];\n        var beforeNode = getNativeAnchorNode(parentTNode, lView);\n        applyProjectionRecursive(renderer, 0 /* Create */, lView, tProjectionNode, renderParent, beforeNode);\n    }\n    /**\n     * `applyProjectionRecursive` performs operation on the projection specified by `action` (insert,\n     * detach, destroy)\n     *\n     * Inserting a projection requires us to locate the projected nodes from the parent component. The\n     * complication is that those nodes themselves could be re-projected from their parent component.\n     *\n     * @param renderer Render to use\n     * @param action action to perform (insert, detach, destroy)\n     * @param lView The LView which needs to be inserted, detached, destroyed.\n     * @param tProjectionNode node to project\n     * @param renderParent parent DOM element for insertion/removal.\n     * @param beforeNode Before which node the insertions should happen.\n     */\n    function applyProjectionRecursive(renderer, action, lView, tProjectionNode, renderParent, beforeNode) {\n        var componentLView = lView[DECLARATION_COMPONENT_VIEW];\n        var componentNode = componentLView[T_HOST];\n        ngDevMode &&\n            assertEqual(typeof tProjectionNode.projection, 'number', 'expecting projection index');\n        var nodeToProjectOrRNodes = componentNode.projection[tProjectionNode.projection];\n        if (Array.isArray(nodeToProjectOrRNodes)) {\n            // This should not exist, it is a bit of a hack. When we bootstrap a top level node and we\n            // need to support passing projectable nodes, so we cheat and put them in the TNode\n            // of the Host TView. (Yes we put instance info at the T Level). We can get away with it\n            // because we know that that TView is not shared and therefore it will not be a problem.\n            // This should be refactored and cleaned up.\n            for (var i = 0; i < nodeToProjectOrRNodes.length; i++) {\n                var rNode = nodeToProjectOrRNodes[i];\n                applyToElementOrContainer(action, renderer, renderParent, rNode, beforeNode);\n            }\n        }\n        else {\n            var nodeToProject = nodeToProjectOrRNodes;\n            var projectedComponentLView = componentLView[PARENT];\n            applyNodes(renderer, action, nodeToProject, projectedComponentLView, renderParent, beforeNode, true);\n        }\n    }\n    /**\n     * `applyContainer` performs an operation on the container and its views as specified by\n     * `action` (insert, detach, destroy)\n     *\n     * Inserting a Container is complicated by the fact that the container may have Views which\n     * themselves have containers or projections.\n     *\n     * @param renderer Renderer to use\n     * @param action action to perform (insert, detach, destroy)\n     * @param lContainer The LContainer which needs to be inserted, detached, destroyed.\n     * @param renderParent parent DOM element for insertion/removal.\n     * @param beforeNode Before which node the insertions should happen.\n     */\n    function applyContainer(renderer, action, lContainer, renderParent, beforeNode) {\n        ngDevMode && assertLContainer(lContainer);\n        var anchor = lContainer[NATIVE]; // LContainer has its own before node.\n        var native = unwrapRNode(lContainer);\n        // An LContainer can be created dynamically on any node by injecting ViewContainerRef.\n        // Asking for a ViewContainerRef on an element will result in a creation of a separate anchor node\n        // (comment in the DOM) that will be different from the LContainer's host node. In this particular\n        // case we need to execute action on 2 nodes:\n        // - container's host node (this is done in the executeActionOnElementOrContainer)\n        // - container's host node (this is done here)\n        if (anchor !== native) {\n            // This is very strange to me (Misko). I would expect that the native is same as anchor. I don't\n            // see a reason why they should be different, but they are.\n            //\n            // If they are we need to process the second anchor as well.\n            applyToElementOrContainer(action, renderer, renderParent, anchor, beforeNode);\n        }\n        for (var i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n            var lView = lContainer[i];\n            applyView(renderer, action, lView, renderParent, anchor);\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Unwraps a parent injector location number to find the view offset from the current injector,\n     * then walks up the declaration view tree until the TNode of the parent injector is found.\n     *\n     * @param location The location of the parent injector, which contains the view offset\n     * @param startView The LView instance from which to start walking up the view tree\n     * @param startTNode The TNode instance of the starting element\n     * @returns The TNode of the parent injector\n     */\n    function getParentInjectorTNode(location, startView, startTNode) {\n        if (startTNode.parent && startTNode.parent.injectorIndex !== -1) {\n            // view offset is 0\n            var injectorIndex = startTNode.parent.injectorIndex;\n            var parentTNode_1 = startTNode.parent;\n            while (parentTNode_1.parent != null && injectorIndex == parentTNode_1.injectorIndex) {\n                parentTNode_1 = parentTNode_1.parent;\n            }\n            return parentTNode_1;\n        }\n        var viewOffset = getParentInjectorViewOffset(location);\n        // view offset is 1\n        var parentView = startView;\n        var parentTNode = startView[T_HOST];\n        // view offset is superior to 1\n        while (viewOffset > 1) {\n            parentView = parentView[DECLARATION_VIEW];\n            parentTNode = parentView[T_HOST];\n            viewOffset--;\n        }\n        return parentTNode;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var ViewRef = /** @class */ (function () {\n        function ViewRef(\n        /**\n         * This represents `LView` associated with the component when ViewRef is a ChangeDetectorRef.\n         *\n         * When ViewRef is created for a dynamic component, this also represents the `LView` for the\n         * component.\n         *\n         * For a \"regular\" ViewRef created for an embedded view, this is the `LView` for the embedded\n         * view.\n         *\n         * @internal\n         */\n        _lView, \n        /**\n         * This represents the `LView` associated with the point where `ChangeDetectorRef` was\n         * requested.\n         *\n         * This may be different from `_lView` if the `_cdRefInjectingView` is an embedded view.\n         */\n        _cdRefInjectingView) {\n            this._lView = _lView;\n            this._cdRefInjectingView = _cdRefInjectingView;\n            this._appRef = null;\n            this._viewContainerRef = null;\n            /**\n             * @internal\n             */\n            this._tViewNode = null;\n        }\n        Object.defineProperty(ViewRef.prototype, \"rootNodes\", {\n            get: function () {\n                if (this._lView[HOST] == null) {\n                    var tView = this._lView[T_HOST];\n                    return collectNativeNodes(this._lView, tView.child, []);\n                }\n                return [];\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ViewRef.prototype, \"context\", {\n            get: function () { return this._lView[CONTEXT]; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ViewRef.prototype, \"destroyed\", {\n            get: function () {\n                return (this._lView[FLAGS] & 256 /* Destroyed */) === 256 /* Destroyed */;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        ViewRef.prototype.destroy = function () {\n            if (this._appRef) {\n                this._appRef.detachView(this);\n            }\n            else if (this._viewContainerRef) {\n                var index = this._viewContainerRef.indexOf(this);\n                if (index > -1) {\n                    this._viewContainerRef.detach(index);\n                }\n                this._viewContainerRef = null;\n            }\n            destroyLView(this._lView);\n        };\n        ViewRef.prototype.onDestroy = function (callback) { storeCleanupFn(this._lView, callback); };\n        /**\n         * Marks a view and all of its ancestors dirty.\n         *\n         * It also triggers change detection by calling `scheduleTick` internally, which coalesces\n         * multiple `markForCheck` calls to into one change detection run.\n         *\n         * This can be used to ensure an {@link ChangeDetectionStrategy#OnPush OnPush} component is\n         * checked when it needs to be re-rendered but the two normal triggers haven't marked it\n         * dirty (i.e. inputs haven't changed and events haven't fired in the view).\n         *\n         * <!-- TODO: Add a link to a chapter on OnPush components -->\n         *\n         * @usageNotes\n         * ### Example\n         *\n         * ```typescript\n         * @Component({\n         *   selector: 'my-app',\n         *   template: `Number of ticks: {{numberOfTicks}}`\n         *   changeDetection: ChangeDetectionStrategy.OnPush,\n         * })\n         * class AppComponent {\n         *   numberOfTicks = 0;\n         *\n         *   constructor(private ref: ChangeDetectorRef) {\n         *     setInterval(() => {\n         *       this.numberOfTicks++;\n         *       // the following is required, otherwise the view will not be updated\n         *       this.ref.markForCheck();\n         *     }, 1000);\n         *   }\n         * }\n         * ```\n         */\n        ViewRef.prototype.markForCheck = function () { markViewDirty(this._cdRefInjectingView || this._lView); };\n        /**\n         * Detaches the view from the change detection tree.\n         *\n         * Detached views will not be checked during change detection runs until they are\n         * re-attached, even if they are dirty. `detach` can be used in combination with\n         * {@link ChangeDetectorRef#detectChanges detectChanges} to implement local change\n         * detection checks.\n         *\n         * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n         * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n         *\n         * @usageNotes\n         * ### Example\n         *\n         * The following example defines a component with a large list of readonly data.\n         * Imagine the data changes constantly, many times per second. For performance reasons,\n         * we want to check and update the list every five seconds. We can do that by detaching\n         * the component's change detector and doing a local check every five seconds.\n         *\n         * ```typescript\n         * class DataProvider {\n         *   // in a real application the returned data will be different every time\n         *   get data() {\n         *     return [1,2,3,4,5];\n         *   }\n         * }\n         *\n         * @Component({\n         *   selector: 'giant-list',\n         *   template: `\n         *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</li>\n         *   `,\n         * })\n         * class GiantList {\n         *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\n         *     ref.detach();\n         *     setInterval(() => {\n         *       this.ref.detectChanges();\n         *     }, 5000);\n         *   }\n         * }\n         *\n         * @Component({\n         *   selector: 'app',\n         *   providers: [DataProvider],\n         *   template: `\n         *     <giant-list><giant-list>\n         *   `,\n         * })\n         * class App {\n         * }\n         * ```\n         */\n        ViewRef.prototype.detach = function () { this._lView[FLAGS] &= ~128 /* Attached */; };\n        /**\n         * Re-attaches a view to the change detection tree.\n         *\n         * This can be used to re-attach views that were previously detached from the tree\n         * using {@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.\n         *\n         * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n         *\n         * @usageNotes\n         * ### Example\n         *\n         * The following example creates a component displaying `live` data. The component will detach\n         * its change detector from the main change detector tree when the component's live property\n         * is set to false.\n         *\n         * ```typescript\n         * class DataProvider {\n         *   data = 1;\n         *\n         *   constructor() {\n         *     setInterval(() => {\n         *       this.data = this.data * 2;\n         *     }, 500);\n         *   }\n         * }\n         *\n         * @Component({\n         *   selector: 'live-data',\n         *   inputs: ['live'],\n         *   template: 'Data: {{dataProvider.data}}'\n         * })\n         * class LiveData {\n         *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\n         *\n         *   set live(value) {\n         *     if (value) {\n         *       this.ref.reattach();\n         *     } else {\n         *       this.ref.detach();\n         *     }\n         *   }\n         * }\n         *\n         * @Component({\n         *   selector: 'my-app',\n         *   providers: [DataProvider],\n         *   template: `\n         *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\n         *     <live-data [live]=\"live\"><live-data>\n         *   `,\n         * })\n         * class AppComponent {\n         *   live = true;\n         * }\n         * ```\n         */\n        ViewRef.prototype.reattach = function () { this._lView[FLAGS] |= 128 /* Attached */; };\n        /**\n         * Checks the view and its children.\n         *\n         * This can also be used in combination with {@link ChangeDetectorRef#detach detach} to implement\n         * local change detection checks.\n         *\n         * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n         * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n         *\n         * @usageNotes\n         * ### Example\n         *\n         * The following example defines a component with a large list of readonly data.\n         * Imagine, the data changes constantly, many times per second. For performance reasons,\n         * we want to check and update the list every five seconds.\n         *\n         * We can do that by detaching the component's change detector and doing a local change detection\n         * check every five seconds.\n         *\n         * See {@link ChangeDetectorRef#detach detach} for more information.\n         */\n        ViewRef.prototype.detectChanges = function () { detectChangesInternal(this._lView, this.context); };\n        /**\n         * Checks the change detector and its children, and throws if any changes are detected.\n         *\n         * This is used in development mode to verify that running change detection doesn't\n         * introduce other changes.\n         */\n        ViewRef.prototype.checkNoChanges = function () { checkNoChangesInternal(this._lView, this.context); };\n        ViewRef.prototype.attachToViewContainerRef = function (vcRef) {\n            if (this._appRef) {\n                throw new Error('This view is already attached directly to the ApplicationRef!');\n            }\n            this._viewContainerRef = vcRef;\n        };\n        ViewRef.prototype.detachFromAppRef = function () {\n            this._appRef = null;\n            renderDetachView(this._lView);\n        };\n        ViewRef.prototype.attachToAppRef = function (appRef) {\n            if (this._viewContainerRef) {\n                throw new Error('This view is already attached to a ViewContainer!');\n            }\n            this._appRef = appRef;\n        };\n        return ViewRef;\n    }());\n    /** @internal */\n    var RootViewRef = /** @class */ (function (_super) {\n        __extends(RootViewRef, _super);\n        function RootViewRef(_view) {\n            var _this = _super.call(this, _view) || this;\n            _this._view = _view;\n            return _this;\n        }\n        RootViewRef.prototype.detectChanges = function () { detectChangesInRootView(this._view); };\n        RootViewRef.prototype.checkNoChanges = function () { checkNoChangesInRootView(this._view); };\n        Object.defineProperty(RootViewRef.prototype, \"context\", {\n            get: function () { return null; },\n            enumerable: true,\n            configurable: true\n        });\n        return RootViewRef;\n    }(ViewRef));\n    function collectNativeNodes(lView, tNode, result, isProjection) {\n        if (isProjection === void 0) { isProjection = false; }\n        while (tNode !== null) {\n            ngDevMode && assertNodeOfPossibleTypes(tNode, 3 /* Element */, 0 /* Container */, 1 /* Projection */, 4 /* ElementContainer */, 5 /* IcuContainer */);\n            var lNode = lView[tNode.index];\n            if (lNode !== null) {\n                result.push(unwrapRNode(lNode));\n            }\n            // A given lNode can represent either a native node or a LContainer (when it is a host of a\n            // ViewContainerRef). When we find a LContainer we need to descend into it to collect root nodes\n            // from the views in this container.\n            if (isLContainer(lNode)) {\n                for (var i = CONTAINER_HEADER_OFFSET; i < lNode.length; i++) {\n                    var lViewInAContainer = lNode[i];\n                    var lViewFirstChildTNode = lViewInAContainer[TVIEW].firstChild;\n                    if (lViewFirstChildTNode !== null) {\n                        collectNativeNodes(lViewInAContainer, lViewFirstChildTNode, result);\n                    }\n                }\n            }\n            var tNodeType = tNode.type;\n            if (tNodeType === 4 /* ElementContainer */ || tNodeType === 5 /* IcuContainer */) {\n                collectNativeNodes(lView, tNode.child, result);\n            }\n            else if (tNodeType === 1 /* Projection */) {\n                var componentView = lView[DECLARATION_COMPONENT_VIEW];\n                var componentHost = componentView[T_HOST];\n                var parentView = getLViewParent(componentView);\n                var firstProjectedNode = componentHost.projection[tNode.projection];\n                if (firstProjectedNode !== null && parentView !== null) {\n                    collectNativeNodes(parentView, firstProjectedNode, result, true);\n                }\n            }\n            tNode = isProjection ? tNode.projectionNext : tNode.next;\n        }\n        return result;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Creates an ElementRef from the most recent node.\n     *\n     * @returns The ElementRef instance to use\n     */\n    function injectElementRef(ElementRefToken) {\n        return createElementRef(ElementRefToken, getPreviousOrParentTNode(), getLView());\n    }\n    var R3ElementRef;\n    /**\n     * Creates an ElementRef given a node.\n     *\n     * @param ElementRefToken The ElementRef type\n     * @param tNode The node for which you'd like an ElementRef\n     * @param view The view to which the node belongs\n     * @returns The ElementRef instance to use\n     */\n    function createElementRef(ElementRefToken, tNode, view) {\n        if (!R3ElementRef) {\n            R3ElementRef = /** @class */ (function (_super) {\n                __extends(ElementRef, _super);\n                function ElementRef() {\n                    return _super !== null && _super.apply(this, arguments) || this;\n                }\n                return ElementRef;\n            }(ElementRefToken));\n        }\n        return new R3ElementRef(getNativeByTNode(tNode, view));\n    }\n    var R3TemplateRef;\n    /**\n     * Creates a TemplateRef given a node.\n     *\n     * @returns The TemplateRef instance to use\n     */\n    function injectTemplateRef(TemplateRefToken, ElementRefToken) {\n        return createTemplateRef(TemplateRefToken, ElementRefToken, getPreviousOrParentTNode(), getLView());\n    }\n    /**\n     * Creates a TemplateRef and stores it on the injector.\n     *\n     * @param TemplateRefToken The TemplateRef type\n     * @param ElementRefToken The ElementRef type\n     * @param hostTNode The node on which a TemplateRef is requested\n     * @param hostView The view to which the node belongs\n     * @returns The TemplateRef instance or null if we can't create a TemplateRef on a given node type\n     */\n    function createTemplateRef(TemplateRefToken, ElementRefToken, hostTNode, hostView) {\n        if (!R3TemplateRef) {\n            R3TemplateRef = /** @class */ (function (_super) {\n                __extends(TemplateRef, _super);\n                function TemplateRef(_declarationView, _declarationTContainer, elementRef) {\n                    var _this = _super.call(this) || this;\n                    _this._declarationView = _declarationView;\n                    _this._declarationTContainer = _declarationTContainer;\n                    _this.elementRef = elementRef;\n                    return _this;\n                }\n                TemplateRef.prototype.createEmbeddedView = function (context) {\n                    var embeddedTView = this._declarationTContainer.tViews;\n                    var lView = createLView(this._declarationView, embeddedTView, context, 16 /* CheckAlways */, null, embeddedTView.node);\n                    var declarationLContainer = this._declarationView[this._declarationTContainer.index];\n                    ngDevMode && assertLContainer(declarationLContainer);\n                    lView[DECLARATION_LCONTAINER] = declarationLContainer;\n                    var declarationViewLQueries = this._declarationView[QUERIES];\n                    if (declarationViewLQueries !== null) {\n                        lView[QUERIES] = declarationViewLQueries.createEmbeddedView(embeddedTView);\n                    }\n                    renderView(lView, embeddedTView, context);\n                    var viewRef = new ViewRef(lView);\n                    viewRef._tViewNode = lView[T_HOST];\n                    return viewRef;\n                };\n                return TemplateRef;\n            }(TemplateRefToken));\n        }\n        if (hostTNode.type === 0 /* Container */) {\n            ngDevMode && assertDefined(hostTNode.tViews, 'TView must be allocated');\n            return new R3TemplateRef(hostView, hostTNode, createElementRef(ElementRefToken, hostTNode, hostView));\n        }\n        else {\n            return null;\n        }\n    }\n    var R3ViewContainerRef;\n    /**\n     * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef\n     * already exists, retrieves the existing ViewContainerRef.\n     *\n     * @returns The ViewContainerRef instance to use\n     */\n    function injectViewContainerRef(ViewContainerRefToken, ElementRefToken) {\n        var previousTNode = getPreviousOrParentTNode();\n        return createContainerRef(ViewContainerRefToken, ElementRefToken, previousTNode, getLView());\n    }\n    /**\n     * Creates a ViewContainerRef and stores it on the injector.\n     *\n     * @param ViewContainerRefToken The ViewContainerRef type\n     * @param ElementRefToken The ElementRef type\n     * @param hostTNode The node that is requesting a ViewContainerRef\n     * @param hostView The view to which the node belongs\n     * @returns The ViewContainerRef instance to use\n     */\n    function createContainerRef(ViewContainerRefToken, ElementRefToken, hostTNode, hostView) {\n        if (!R3ViewContainerRef) {\n            R3ViewContainerRef = /** @class */ (function (_super) {\n                __extends(ViewContainerRef, _super);\n                function ViewContainerRef(_lContainer, _hostTNode, _hostView) {\n                    var _this = _super.call(this) || this;\n                    _this._lContainer = _lContainer;\n                    _this._hostTNode = _hostTNode;\n                    _this._hostView = _hostView;\n                    return _this;\n                }\n                Object.defineProperty(ViewContainerRef.prototype, \"element\", {\n                    get: function () {\n                        return createElementRef(ElementRefToken, this._hostTNode, this._hostView);\n                    },\n                    enumerable: true,\n                    configurable: true\n                });\n                Object.defineProperty(ViewContainerRef.prototype, \"injector\", {\n                    get: function () { return new NodeInjector(this._hostTNode, this._hostView); },\n                    enumerable: true,\n                    configurable: true\n                });\n                Object.defineProperty(ViewContainerRef.prototype, \"parentInjector\", {\n                    /** @deprecated No replacement */\n                    get: function () {\n                        var parentLocation = getParentInjectorLocation(this._hostTNode, this._hostView);\n                        var parentView = getParentInjectorView(parentLocation, this._hostView);\n                        var parentTNode = getParentInjectorTNode(parentLocation, this._hostView, this._hostTNode);\n                        return !hasParentInjector(parentLocation) || parentTNode == null ?\n                            new NodeInjector(null, this._hostView) :\n                            new NodeInjector(parentTNode, parentView);\n                    },\n                    enumerable: true,\n                    configurable: true\n                });\n                ViewContainerRef.prototype.clear = function () {\n                    while (this.length > 0) {\n                        this.remove(this.length - 1);\n                    }\n                };\n                ViewContainerRef.prototype.get = function (index) {\n                    return this._lContainer[VIEW_REFS] !== null && this._lContainer[VIEW_REFS][index] || null;\n                };\n                Object.defineProperty(ViewContainerRef.prototype, \"length\", {\n                    get: function () { return this._lContainer.length - CONTAINER_HEADER_OFFSET; },\n                    enumerable: true,\n                    configurable: true\n                });\n                ViewContainerRef.prototype.createEmbeddedView = function (templateRef, context, index) {\n                    var viewRef = templateRef.createEmbeddedView(context || {});\n                    this.insert(viewRef, index);\n                    return viewRef;\n                };\n                ViewContainerRef.prototype.createComponent = function (componentFactory, index, injector, projectableNodes, ngModuleRef) {\n                    var contextInjector = injector || this.parentInjector;\n                    if (!ngModuleRef && componentFactory.ngModule == null && contextInjector) {\n                        // DO NOT REFACTOR. The code here used to have a `value || undefined` expression\n                        // which seems to cause internal google apps to fail. This is documented in the\n                        // following internal bug issue: go/b/142967802\n                        var result = contextInjector.get(NgModuleRef, null);\n                        if (result) {\n                            ngModuleRef = result;\n                        }\n                    }\n                    var componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);\n                    this.insert(componentRef.hostView, index);\n                    return componentRef;\n                };\n                ViewContainerRef.prototype.insert = function (viewRef, index) {\n                    var lView = viewRef._lView;\n                    if (viewRef.destroyed) {\n                        throw new Error('Cannot insert a destroyed View in a ViewContainer!');\n                    }\n                    this.allocateContainerIfNeeded();\n                    if (viewAttachedToContainer(lView)) {\n                        // If view is already attached, detach it first so we clean up references appropriately.\n                        var prevIdx = this.indexOf(viewRef);\n                        // A view might be attached either to this or a different container. The `prevIdx` for\n                        // those cases will be:\n                        // equal to -1 for views attached to this ViewContainerRef\n                        // >= 0 for views attached to a different ViewContainerRef\n                        if (prevIdx !== -1) {\n                            this.detach(prevIdx);\n                        }\n                        else {\n                            var prevLContainer = lView[PARENT];\n                            ngDevMode && assertEqual(isLContainer(prevLContainer), true, 'An attached view should have its PARENT point to a container.');\n                            // We need to re-create a R3ViewContainerRef instance since those are not stored on\n                            // LView (nor anywhere else).\n                            var prevVCRef = new R3ViewContainerRef(prevLContainer, prevLContainer[T_HOST], prevLContainer[PARENT]);\n                            prevVCRef.detach(prevVCRef.indexOf(viewRef));\n                        }\n                    }\n                    var adjustedIdx = this._adjustIndex(index);\n                    insertView(lView, this._lContainer, adjustedIdx);\n                    var beforeNode = getBeforeNodeForView(adjustedIdx, this._lContainer);\n                    addRemoveViewFromContainer(lView, true, beforeNode);\n                    viewRef.attachToViewContainerRef(this);\n                    addToArray(this._lContainer[VIEW_REFS], adjustedIdx, viewRef);\n                    return viewRef;\n                };\n                ViewContainerRef.prototype.move = function (viewRef, newIndex) {\n                    if (viewRef.destroyed) {\n                        throw new Error('Cannot move a destroyed View in a ViewContainer!');\n                    }\n                    return this.insert(viewRef, newIndex);\n                };\n                ViewContainerRef.prototype.indexOf = function (viewRef) {\n                    var viewRefsArr = this._lContainer[VIEW_REFS];\n                    return viewRefsArr !== null ? viewRefsArr.indexOf(viewRef) : -1;\n                };\n                ViewContainerRef.prototype.remove = function (index) {\n                    this.allocateContainerIfNeeded();\n                    var adjustedIdx = this._adjustIndex(index, -1);\n                    removeView(this._lContainer, adjustedIdx);\n                    removeFromArray(this._lContainer[VIEW_REFS], adjustedIdx);\n                };\n                ViewContainerRef.prototype.detach = function (index) {\n                    this.allocateContainerIfNeeded();\n                    var adjustedIdx = this._adjustIndex(index, -1);\n                    var view = detachView(this._lContainer, adjustedIdx);\n                    var wasDetached = view && removeFromArray(this._lContainer[VIEW_REFS], adjustedIdx) != null;\n                    return wasDetached ? new ViewRef(view) : null;\n                };\n                ViewContainerRef.prototype._adjustIndex = function (index, shift) {\n                    if (shift === void 0) { shift = 0; }\n                    if (index == null) {\n                        return this.length + shift;\n                    }\n                    if (ngDevMode) {\n                        assertGreaterThan(index, -1, \"ViewRef index must be positive, got \" + index);\n                        // +1 because it's legal to insert at the end.\n                        assertLessThan(index, this.length + 1 + shift, 'index');\n                    }\n                    return index;\n                };\n                ViewContainerRef.prototype.allocateContainerIfNeeded = function () {\n                    if (this._lContainer[VIEW_REFS] === null) {\n                        this._lContainer[VIEW_REFS] = [];\n                    }\n                };\n                return ViewContainerRef;\n            }(ViewContainerRefToken));\n        }\n        ngDevMode && assertNodeOfPossibleTypes(hostTNode, 0 /* Container */, 3 /* Element */, 4 /* ElementContainer */);\n        var lContainer;\n        var slotValue = hostView[hostTNode.index];\n        if (isLContainer(slotValue)) {\n            // If the host is a container, we don't need to create a new LContainer\n            lContainer = slotValue;\n            setLContainerActiveIndex(lContainer, -1 /* DYNAMIC_EMBEDDED_VIEWS_ONLY */);\n        }\n        else {\n            var commentNode = void 0;\n            // If the host is an element container, the native host element is guaranteed to be a\n            // comment and we can reuse that comment as anchor element for the new LContainer.\n            // The comment node in question is already part of the DOM structure so we don't need to append\n            // it again.\n            if (hostTNode.type === 4 /* ElementContainer */) {\n                commentNode = unwrapRNode(slotValue);\n            }\n            else {\n                ngDevMode && ngDevMode.rendererCreateComment++;\n                commentNode = hostView[RENDERER].createComment(ngDevMode ? 'container' : '');\n                // A `ViewContainerRef` can be injected by the root (topmost / bootstrapped) component. In\n                // this case we can't use TView / TNode data structures to insert container's marker node\n                // (both a parent of a comment node and the comment node itself are not part of any view). In\n                // this specific case we use low-level DOM manipulation to insert container's marker (comment)\n                // node.\n                if (isRootView(hostView)) {\n                    var renderer = hostView[RENDERER];\n                    var hostNative = getNativeByTNode(hostTNode, hostView);\n                    var parentOfHostNative = nativeParentNode(renderer, hostNative);\n                    nativeInsertBefore(renderer, parentOfHostNative, commentNode, nativeNextSibling(renderer, hostNative));\n                }\n                else {\n                    appendChild(commentNode, hostTNode, hostView);\n                }\n            }\n            hostView[hostTNode.index] = lContainer =\n                createLContainer(slotValue, hostView, commentNode, hostTNode);\n            addToViewTree(hostView, lContainer);\n        }\n        return new R3ViewContainerRef(lContainer, hostTNode, hostView);\n    }\n    /** Returns a ChangeDetectorRef (a.k.a. a ViewRef) */\n    function injectChangeDetectorRef(isPipe) {\n        if (isPipe === void 0) { isPipe = false; }\n        return createViewRef(getPreviousOrParentTNode(), getLView(), isPipe);\n    }\n    /**\n     * Creates a ViewRef and stores it on the injector as ChangeDetectorRef (public alias).\n     *\n     * @param tNode The node that is requesting a ChangeDetectorRef\n     * @param lView The view to which the node belongs\n     * @param isPipe Whether the view is being injected into a pipe.\n     * @returns The ChangeDetectorRef to use\n     */\n    function createViewRef(tNode, lView, isPipe) {\n        // `isComponentView` will be true for Component and Directives (but not for Pipes).\n        // See https://github.com/angular/angular/pull/33072 for proper fix\n        var isComponentView = !isPipe && isComponentHost(tNode);\n        if (isComponentView) {\n            // The LView represents the location where the component is declared.\n            // Instead we want the LView for the component View and so we need to look it up.\n            var componentView = getComponentLViewByIndex(tNode.index, lView); // look down\n            return new ViewRef(componentView, componentView);\n        }\n        else if (tNode.type === 3 /* Element */ || tNode.type === 0 /* Container */ ||\n            tNode.type === 4 /* ElementContainer */ || tNode.type === 5 /* IcuContainer */) {\n            // The LView represents the location where the injection is requested from.\n            // We need to locate the containing LView (in case where the `lView` is an embedded view)\n            var hostComponentView = lView[DECLARATION_COMPONENT_VIEW]; // look up\n            return new ViewRef(hostComponentView, lView);\n        }\n        return null;\n    }\n    /** Returns a Renderer2 (or throws when application was bootstrapped with Renderer3) */\n    function getOrCreateRenderer2(view) {\n        var renderer = view[RENDERER];\n        if (isProceduralRenderer(renderer)) {\n            return renderer;\n        }\n        else {\n            throw new Error('Cannot inject Renderer2 when the application uses Renderer3!');\n        }\n    }\n    /** Injects a Renderer2 for the current component. */\n    function injectRenderer2() {\n        // We need the Renderer to be based on the component that it's being injected into, however since\n        // DI happens before we've entered its view, `getLView` will return the parent view instead.\n        var lView = getLView();\n        var tNode = getPreviousOrParentTNode();\n        var nodeAtIndex = getComponentLViewByIndex(tNode.index, lView);\n        return getOrCreateRenderer2(isLView(nodeAtIndex) ? nodeAtIndex : lView);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Base class for Angular Views, provides change detection functionality.\n     * A change-detection tree collects all views that are to be checked for changes.\n     * Use the methods to add and remove views from the tree, initiate change-detection,\n     * and explicitly mark views as _dirty_, meaning that they have changed and need to be rerendered.\n     *\n     * @usageNotes\n     *\n     * The following examples demonstrate how to modify default change-detection behavior\n     * to perform explicit detection when needed.\n     *\n     * ### Use `markForCheck()` with `CheckOnce` strategy\n     *\n     * The following example sets the `OnPush` change-detection strategy for a component\n     * (`CheckOnce`, rather than the default `CheckAlways`), then forces a second check\n     * after an interval. See [live demo](http://plnkr.co/edit/GC512b?p=preview).\n     *\n     * <code-example path=\"core/ts/change_detect/change-detection.ts\"\n     * region=\"mark-for-check\"></code-example>\n     *\n     * ### Detach change detector to limit how often check occurs\n     *\n     * The following example defines a component with a large list of read-only data\n     * that is expected to change constantly, many times per second.\n     * To improve performance, we want to check and update the list\n     * less often than the changes actually occur. To do that, we detach\n     * the component's change detector and perform an explicit local check every five seconds.\n     *\n     * <code-example path=\"core/ts/change_detect/change-detection.ts\" region=\"detach\"></code-example>\n     *\n     *\n     * ### Reattaching a detached component\n     *\n     * The following example creates a component displaying live data.\n     * The component detaches its change detector from the main change detector tree\n     * when the `live` property is set to false, and reattaches it when the property\n     * becomes true.\n     *\n     * <code-example path=\"core/ts/change_detect/change-detection.ts\" region=\"reattach\"></code-example>\n     *\n     * @publicApi\n     */\n    var ChangeDetectorRef = /** @class */ (function () {\n        function ChangeDetectorRef() {\n        }\n        /**\n         * @internal\n         * @nocollapse\n         */\n        ChangeDetectorRef.__NG_ELEMENT_ID__ = function () { return SWITCH_CHANGE_DETECTOR_REF_FACTORY(); };\n        return ChangeDetectorRef;\n    }());\n    var SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__ = injectChangeDetectorRef;\n    var SWITCH_CHANGE_DETECTOR_REF_FACTORY__PRE_R3__ = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n    };\n    var SWITCH_CHANGE_DETECTOR_REF_FACTORY = SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__;\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * @description\n     *\n     * Represents a type that a Component or other object is instances of.\n     *\n     * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by\n     * the `MyCustomComponent` constructor function.\n     *\n     * @publicApi\n     */\n    var Type = Function;\n    function isType(v) {\n        return typeof v === 'function';\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Attention: These regex has to hold even if the code is minified!\n     */\n    var DELEGATE_CTOR = /^function\\s+\\S+\\(\\)\\s*{[\\s\\S]+\\.apply\\(this,\\s*arguments\\)/;\n    var INHERITED_CLASS = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{/;\n    var INHERITED_CLASS_WITH_CTOR = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{[\\s\\S]*constructor\\s*\\(/;\n    var INHERITED_CLASS_WITH_DELEGATE_CTOR = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{[\\s\\S]*constructor\\s*\\(\\)\\s*{\\s+super\\(\\.\\.\\.arguments\\)/;\n    /**\n     * Determine whether a stringified type is a class which delegates its constructor\n     * to its parent.\n     *\n     * This is not trivial since compiled code can actually contain a constructor function\n     * even if the original source code did not. For instance, when the child class contains\n     * an initialized instance property.\n     */\n    function isDelegateCtor(typeStr) {\n        return DELEGATE_CTOR.test(typeStr) || INHERITED_CLASS_WITH_DELEGATE_CTOR.test(typeStr) ||\n            (INHERITED_CLASS.test(typeStr) && !INHERITED_CLASS_WITH_CTOR.test(typeStr));\n    }\n    var ReflectionCapabilities = /** @class */ (function () {\n        function ReflectionCapabilities(reflect) {\n            this._reflect = reflect || _global['Reflect'];\n        }\n        ReflectionCapabilities.prototype.isReflectionEnabled = function () { return true; };\n        ReflectionCapabilities.prototype.factory = function (t) { return function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            return new (t.bind.apply(t, __spread([void 0], args)))();\n        }; };\n        /** @internal */\n        ReflectionCapabilities.prototype._zipTypesAndAnnotations = function (paramTypes, paramAnnotations) {\n            var result;\n            if (typeof paramTypes === 'undefined') {\n                result = newArray(paramAnnotations.length);\n            }\n            else {\n                result = newArray(paramTypes.length);\n            }\n            for (var i = 0; i < result.length; i++) {\n                // TS outputs Object for parameters without types, while Traceur omits\n                // the annotations. For now we preserve the Traceur behavior to aid\n                // migration, but this can be revisited.\n                if (typeof paramTypes === 'undefined') {\n                    result[i] = [];\n                }\n                else if (paramTypes[i] && paramTypes[i] != Object) {\n                    result[i] = [paramTypes[i]];\n                }\n                else {\n                    result[i] = [];\n                }\n                if (paramAnnotations && paramAnnotations[i] != null) {\n                    result[i] = result[i].concat(paramAnnotations[i]);\n                }\n            }\n            return result;\n        };\n        ReflectionCapabilities.prototype._ownParameters = function (type, parentCtor) {\n            var typeStr = type.toString();\n            // If we have no decorators, we only have function.length as metadata.\n            // In that case, to detect whether a child class declared an own constructor or not,\n            // we need to look inside of that constructor to check whether it is\n            // just calling the parent.\n            // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439\n            // that sets 'design:paramtypes' to []\n            // if a class inherits from another class but has no ctor declared itself.\n            if (isDelegateCtor(typeStr)) {\n                return null;\n            }\n            // Prefer the direct API.\n            if (type.parameters && type.parameters !== parentCtor.parameters) {\n                return type.parameters;\n            }\n            // API of tsickle for lowering decorators to properties on the class.\n            var tsickleCtorParams = type.ctorParameters;\n            if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {\n                // Newer tsickle uses a function closure\n                // Retain the non-function case for compatibility with older tsickle\n                var ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;\n                var paramTypes_1 = ctorParameters.map(function (ctorParam) { return ctorParam && ctorParam.type; });\n                var paramAnnotations_1 = ctorParameters.map(function (ctorParam) {\n                    return ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators);\n                });\n                return this._zipTypesAndAnnotations(paramTypes_1, paramAnnotations_1);\n            }\n            // API for metadata created by invoking the decorators.\n            var paramAnnotations = type.hasOwnProperty(PARAMETERS) && type[PARAMETERS];\n            var paramTypes = this._reflect && this._reflect.getOwnMetadata &&\n                this._reflect.getOwnMetadata('design:paramtypes', type);\n            if (paramTypes || paramAnnotations) {\n                return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n            }\n            // If a class has no decorators, at least create metadata\n            // based on function.length.\n            // Note: We know that this is a real constructor as we checked\n            // the content of the constructor above.\n            return newArray(type.length);\n        };\n        ReflectionCapabilities.prototype.parameters = function (type) {\n            // Note: only report metadata if we have at least one class decorator\n            // to stay in sync with the static reflector.\n            if (!isType(type)) {\n                return [];\n            }\n            var parentCtor = getParentCtor(type);\n            var parameters = this._ownParameters(type, parentCtor);\n            if (!parameters && parentCtor !== Object) {\n                parameters = this.parameters(parentCtor);\n            }\n            return parameters || [];\n        };\n        ReflectionCapabilities.prototype._ownAnnotations = function (typeOrFunc, parentCtor) {\n            // Prefer the direct API.\n            if (typeOrFunc.annotations && typeOrFunc.annotations !== parentCtor.annotations) {\n                var annotations = typeOrFunc.annotations;\n                if (typeof annotations === 'function' && annotations.annotations) {\n                    annotations = annotations.annotations;\n                }\n                return annotations;\n            }\n            // API of tsickle for lowering decorators to properties on the class.\n            if (typeOrFunc.decorators && typeOrFunc.decorators !== parentCtor.decorators) {\n                return convertTsickleDecoratorIntoMetadata(typeOrFunc.decorators);\n            }\n            // API for metadata created by invoking the decorators.\n            if (typeOrFunc.hasOwnProperty(ANNOTATIONS)) {\n                return typeOrFunc[ANNOTATIONS];\n            }\n            return null;\n        };\n        ReflectionCapabilities.prototype.annotations = function (typeOrFunc) {\n            if (!isType(typeOrFunc)) {\n                return [];\n            }\n            var parentCtor = getParentCtor(typeOrFunc);\n            var ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];\n            var parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];\n            return parentAnnotations.concat(ownAnnotations);\n        };\n        ReflectionCapabilities.prototype._ownPropMetadata = function (typeOrFunc, parentCtor) {\n            // Prefer the direct API.\n            if (typeOrFunc.propMetadata &&\n                typeOrFunc.propMetadata !== parentCtor.propMetadata) {\n                var propMetadata = typeOrFunc.propMetadata;\n                if (typeof propMetadata === 'function' && propMetadata.propMetadata) {\n                    propMetadata = propMetadata.propMetadata;\n                }\n                return propMetadata;\n            }\n            // API of tsickle for lowering decorators to properties on the class.\n            if (typeOrFunc.propDecorators &&\n                typeOrFunc.propDecorators !== parentCtor.propDecorators) {\n                var propDecorators_1 = typeOrFunc.propDecorators;\n                var propMetadata_1 = {};\n                Object.keys(propDecorators_1).forEach(function (prop) {\n                    propMetadata_1[prop] = convertTsickleDecoratorIntoMetadata(propDecorators_1[prop]);\n                });\n                return propMetadata_1;\n            }\n            // API for metadata created by invoking the decorators.\n            if (typeOrFunc.hasOwnProperty(PROP_METADATA)) {\n                return typeOrFunc[PROP_METADATA];\n            }\n            return null;\n        };\n        ReflectionCapabilities.prototype.propMetadata = function (typeOrFunc) {\n            if (!isType(typeOrFunc)) {\n                return {};\n            }\n            var parentCtor = getParentCtor(typeOrFunc);\n            var propMetadata = {};\n            if (parentCtor !== Object) {\n                var parentPropMetadata_1 = this.propMetadata(parentCtor);\n                Object.keys(parentPropMetadata_1).forEach(function (propName) {\n                    propMetadata[propName] = parentPropMetadata_1[propName];\n                });\n            }\n            var ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);\n            if (ownPropMetadata) {\n                Object.keys(ownPropMetadata).forEach(function (propName) {\n                    var decorators = [];\n                    if (propMetadata.hasOwnProperty(propName)) {\n                        decorators.push.apply(decorators, __spread(propMetadata[propName]));\n                    }\n                    decorators.push.apply(decorators, __spread(ownPropMetadata[propName]));\n                    propMetadata[propName] = decorators;\n                });\n            }\n            return propMetadata;\n        };\n        ReflectionCapabilities.prototype.ownPropMetadata = function (typeOrFunc) {\n            if (!isType(typeOrFunc)) {\n                return {};\n            }\n            return this._ownPropMetadata(typeOrFunc, getParentCtor(typeOrFunc)) || {};\n        };\n        ReflectionCapabilities.prototype.hasLifecycleHook = function (type, lcProperty) {\n            return type instanceof Type && lcProperty in type.prototype;\n        };\n        ReflectionCapabilities.prototype.guards = function (type) { return {}; };\n        ReflectionCapabilities.prototype.getter = function (name) { return new Function('o', 'return o.' + name + ';'); };\n        ReflectionCapabilities.prototype.setter = function (name) {\n            return new Function('o', 'v', 'return o.' + name + ' = v;');\n        };\n        ReflectionCapabilities.prototype.method = function (name) {\n            var functionBody = \"if (!o.\" + name + \") throw new Error('\\\"\" + name + \"\\\" is undefined');\\n        return o.\" + name + \".apply(o, args);\";\n            return new Function('o', 'args', functionBody);\n        };\n        // There is not a concept of import uri in Js, but this is useful in developing Dart applications.\n        ReflectionCapabilities.prototype.importUri = function (type) {\n            // StaticSymbol\n            if (typeof type === 'object' && type['filePath']) {\n                return type['filePath'];\n            }\n            // Runtime type\n            return \"./\" + stringify(type);\n        };\n        ReflectionCapabilities.prototype.resourceUri = function (type) { return \"./\" + stringify(type); };\n        ReflectionCapabilities.prototype.resolveIdentifier = function (name, moduleUrl, members, runtime) {\n            return runtime;\n        };\n        ReflectionCapabilities.prototype.resolveEnum = function (enumIdentifier, name) { return enumIdentifier[name]; };\n        return ReflectionCapabilities;\n    }());\n    function convertTsickleDecoratorIntoMetadata(decoratorInvocations) {\n        if (!decoratorInvocations) {\n            return [];\n        }\n        return decoratorInvocations.map(function (decoratorInvocation) {\n            var decoratorType = decoratorInvocation.type;\n            var annotationCls = decoratorType.annotationCls;\n            var annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];\n            return new (annotationCls.bind.apply(annotationCls, __spread([void 0], annotationArgs)))();\n        });\n    }\n    function getParentCtor(ctor) {\n        var parentProto = ctor.prototype ? Object.getPrototypeOf(ctor.prototype) : null;\n        var parentCtor = parentProto ? parentProto.constructor : null;\n        // Note: We always use `Object` as the null value\n        // to simplify checking later on.\n        return parentCtor || Object;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var _reflect = null;\n    function getReflect() {\n        return (_reflect = _reflect || new ReflectionCapabilities());\n    }\n    function reflectDependencies(type) {\n        return convertDependencies(getReflect().parameters(type));\n    }\n    function convertDependencies(deps) {\n        var compiler = getCompilerFacade();\n        return deps.map(function (dep) { return reflectDependency(compiler, dep); });\n    }\n    function reflectDependency(compiler, dep) {\n        var meta = {\n            token: null,\n            host: false,\n            optional: false,\n            resolved: compiler.R3ResolvedDependencyType.Token,\n            self: false,\n            skipSelf: false,\n        };\n        function setTokenAndResolvedType(token) {\n            meta.resolved = compiler.R3ResolvedDependencyType.Token;\n            meta.token = token;\n        }\n        if (Array.isArray(dep) && dep.length > 0) {\n            for (var j = 0; j < dep.length; j++) {\n                var param = dep[j];\n                if (param === undefined) {\n                    // param may be undefined if type of dep is not set by ngtsc\n                    continue;\n                }\n                var proto = Object.getPrototypeOf(param);\n                if (param instanceof Optional || proto.ngMetadataName === 'Optional') {\n                    meta.optional = true;\n                }\n                else if (param instanceof SkipSelf || proto.ngMetadataName === 'SkipSelf') {\n                    meta.skipSelf = true;\n                }\n                else if (param instanceof Self || proto.ngMetadataName === 'Self') {\n                    meta.self = true;\n                }\n                else if (param instanceof Host || proto.ngMetadataName === 'Host') {\n                    meta.host = true;\n                }\n                else if (param instanceof Inject) {\n                    meta.token = param.token;\n                }\n                else if (param instanceof Attribute) {\n                    if (param.attributeName === undefined) {\n                        throw new Error(\"Attribute name must be defined.\");\n                    }\n                    meta.token = param.attributeName;\n                    meta.resolved = compiler.R3ResolvedDependencyType.Attribute;\n                }\n                else if (param === ChangeDetectorRef) {\n                    meta.token = param;\n                    meta.resolved = compiler.R3ResolvedDependencyType.ChangeDetectorRef;\n                }\n                else {\n                    setTokenAndResolvedType(param);\n                }\n            }\n        }\n        else if (dep === undefined || (Array.isArray(dep) && dep.length === 0)) {\n            meta.token = undefined;\n            meta.resolved = R3ResolvedDependencyType.Invalid;\n        }\n        else {\n            setTokenAndResolvedType(dep);\n        }\n        return meta;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Compile an Angular injectable according to its `Injectable` metadata, and patch the resulting\n     * injectable def (`ɵprov`) onto the injectable type.\n     */\n    function compileInjectable(type, srcMeta) {\n        var ngInjectableDef = null;\n        var ngFactoryDef = null;\n        // if NG_PROV_DEF is already defined on this class then don't overwrite it\n        if (!type.hasOwnProperty(NG_PROV_DEF)) {\n            Object.defineProperty(type, NG_PROV_DEF, {\n                get: function () {\n                    if (ngInjectableDef === null) {\n                        ngInjectableDef = getCompilerFacade().compileInjectable(angularCoreDiEnv, \"ng:///\" + type.name + \"/\\u0275prov.js\", getInjectableMetadata(type, srcMeta));\n                    }\n                    return ngInjectableDef;\n                },\n            });\n            // On IE10 properties defined via `defineProperty` won't be inherited by child classes,\n            // which will break inheriting the injectable definition from a grandparent through an\n            // undecorated parent class. We work around it by defining a method which should be used\n            // as a fallback. This should only be a problem in JIT mode, because in AOT TypeScript\n            // seems to have a workaround for static properties. When inheriting from an undecorated\n            // parent is no longer supported in v10, this can safely be removed.\n            if (!type.hasOwnProperty(NG_PROV_DEF_FALLBACK)) {\n                type[NG_PROV_DEF_FALLBACK] = function () { return type[NG_PROV_DEF]; };\n            }\n        }\n        // if NG_FACTORY_DEF is already defined on this class then don't overwrite it\n        if (!type.hasOwnProperty(NG_FACTORY_DEF)) {\n            Object.defineProperty(type, NG_FACTORY_DEF, {\n                get: function () {\n                    if (ngFactoryDef === null) {\n                        var metadata = getInjectableMetadata(type, srcMeta);\n                        var compiler = getCompilerFacade();\n                        ngFactoryDef = compiler.compileFactory(angularCoreDiEnv, \"ng:///\" + type.name + \"/\\u0275fac.js\", {\n                            name: metadata.name,\n                            type: metadata.type,\n                            typeArgumentCount: metadata.typeArgumentCount,\n                            deps: reflectDependencies(type),\n                            injectFn: 'inject',\n                            target: compiler.R3FactoryTarget.Pipe\n                        });\n                    }\n                    return ngFactoryDef;\n                },\n                // Leave this configurable so that the factories from directives or pipes can take precedence.\n                configurable: true\n            });\n        }\n    }\n    var USE_VALUE$1 = getClosureSafeProperty({ provide: String, useValue: getClosureSafeProperty });\n    function isUseClassProvider(meta) {\n        return meta.useClass !== undefined;\n    }\n    function isUseValueProvider(meta) {\n        return USE_VALUE$1 in meta;\n    }\n    function isUseFactoryProvider(meta) {\n        return meta.useFactory !== undefined;\n    }\n    function isUseExistingProvider(meta) {\n        return meta.useExisting !== undefined;\n    }\n    function getInjectableMetadata(type, srcMeta) {\n        // Allow the compilation of a class with a `@Injectable()` decorator without parameters\n        var meta = srcMeta || { providedIn: null };\n        var compilerMeta = {\n            name: type.name,\n            type: type,\n            typeArgumentCount: 0,\n            providedIn: meta.providedIn,\n            userDeps: undefined,\n        };\n        if ((isUseClassProvider(meta) || isUseFactoryProvider(meta)) && meta.deps !== undefined) {\n            compilerMeta.userDeps = convertDependencies(meta.deps);\n        }\n        if (isUseClassProvider(meta)) {\n            // The user explicitly specified useClass, and may or may not have provided deps.\n            compilerMeta.useClass = resolveForwardRef(meta.useClass);\n        }\n        else if (isUseValueProvider(meta)) {\n            // The user explicitly specified useValue.\n            compilerMeta.useValue = resolveForwardRef(meta.useValue);\n        }\n        else if (isUseFactoryProvider(meta)) {\n            // The user explicitly specified useFactory.\n            compilerMeta.useFactory = meta.useFactory;\n        }\n        else if (isUseExistingProvider(meta)) {\n            // The user explicitly specified useExisting.\n            compilerMeta.useExisting = resolveForwardRef(meta.useExisting);\n        }\n        return compilerMeta;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var USE_VALUE$2 = getClosureSafeProperty({ provide: String, useValue: getClosureSafeProperty });\n    var EMPTY_ARRAY$1 = [];\n    function convertInjectableProviderToFactory(type, provider) {\n        if (!provider) {\n            var reflectionCapabilities = new ReflectionCapabilities();\n            var deps_1 = reflectionCapabilities.parameters(type);\n            // TODO - convert to flags.\n            return function () { return new (type.bind.apply(type, __spread([void 0], injectArgs(deps_1))))(); };\n        }\n        if (USE_VALUE$2 in provider) {\n            var valueProvider_1 = provider;\n            return function () { return valueProvider_1.useValue; };\n        }\n        else if (provider.useExisting) {\n            var existingProvider_1 = provider;\n            return function () { return ɵɵinject(resolveForwardRef(existingProvider_1.useExisting)); };\n        }\n        else if (provider.useFactory) {\n            var factoryProvider_1 = provider;\n            return function () { return factoryProvider_1.useFactory.apply(factoryProvider_1, __spread(injectArgs(factoryProvider_1.deps || EMPTY_ARRAY$1))); };\n        }\n        else if (provider.useClass) {\n            var classProvider_1 = provider;\n            var deps_2 = provider.deps;\n            if (!deps_2) {\n                var reflectionCapabilities = new ReflectionCapabilities();\n                deps_2 = reflectionCapabilities.parameters(type);\n            }\n            return function () {\n                var _a;\n                return new ((_a = (resolveForwardRef(classProvider_1.useClass))).bind.apply(_a, __spread([void 0], injectArgs(deps_2))))();\n            };\n        }\n        else {\n            var deps_3 = provider.deps;\n            if (!deps_3) {\n                var reflectionCapabilities = new ReflectionCapabilities();\n                deps_3 = reflectionCapabilities.parameters(type);\n            }\n            return function () { return new (type.bind.apply(type, __spread([void 0], injectArgs(deps_3))))(); };\n        }\n    }\n\n    /**\n     * Injectable decorator and metadata.\n     *\n     * @Annotation\n     * @publicApi\n     */\n    var Injectable = makeDecorator('Injectable', undefined, undefined, undefined, function (type, meta) { return SWITCH_COMPILE_INJECTABLE(type, meta); });\n    /**\n     * Supports @Injectable() in JIT mode for Render2.\n     */\n    function render2CompileInjectable(injectableType, options) {\n        if (options && options.providedIn !== undefined && !getInjectableDef(injectableType)) {\n            injectableType.ɵprov = ɵɵdefineInjectable({\n                token: injectableType,\n                providedIn: options.providedIn,\n                factory: convertInjectableProviderToFactory(injectableType, options),\n            });\n        }\n    }\n    var SWITCH_COMPILE_INJECTABLE__POST_R3__ = compileInjectable;\n    var SWITCH_COMPILE_INJECTABLE__PRE_R3__ = render2CompileInjectable;\n    var SWITCH_COMPILE_INJECTABLE = SWITCH_COMPILE_INJECTABLE__POST_R3__;\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * An internal token whose presence in an injector indicates that the injector should treat itself\n     * as a root scoped injector when processing requests for unknown tokens which may indicate\n     * they are provided in the root scope.\n     */\n    var INJECTOR_SCOPE = new InjectionToken('Set Injector scope.');\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Marker which indicates that a value has not yet been created from the factory function.\n     */\n    var NOT_YET = {};\n    /**\n     * Marker which indicates that the factory function for a token is in the process of being called.\n     *\n     * If the injector is asked to inject a token with its value set to CIRCULAR, that indicates\n     * injection of a dependency has recursively attempted to inject the original token, and there is\n     * a circular dependency among the providers.\n     */\n    var CIRCULAR = {};\n    var EMPTY_ARRAY$2 = [];\n    /**\n     * A lazily initialized NullInjector.\n     */\n    var NULL_INJECTOR = undefined;\n    function getNullInjector() {\n        if (NULL_INJECTOR === undefined) {\n            NULL_INJECTOR = new NullInjector();\n        }\n        return NULL_INJECTOR;\n    }\n    /**\n     * Create a new `Injector` which is configured using a `defType` of `InjectorType<any>`s.\n     *\n     * @publicApi\n     */\n    function createInjector(defType, parent, additionalProviders, name) {\n        if (parent === void 0) { parent = null; }\n        if (additionalProviders === void 0) { additionalProviders = null; }\n        parent = parent || getNullInjector();\n        return new R3Injector(defType, additionalProviders, parent, name);\n    }\n    var R3Injector = /** @class */ (function () {\n        function R3Injector(def, additionalProviders, parent, source) {\n            var _this = this;\n            if (source === void 0) { source = null; }\n            this.parent = parent;\n            /**\n             * Map of tokens to records which contain the instances of those tokens.\n             * - `null` value implies that we don't have the record. Used by tree-shakable injectors\n             * to prevent further searches.\n             */\n            this.records = new Map();\n            /**\n             * The transitive set of `InjectorType`s which define this injector.\n             */\n            this.injectorDefTypes = new Set();\n            /**\n             * Set of values instantiated by this injector which contain `ngOnDestroy` lifecycle hooks.\n             */\n            this.onDestroy = new Set();\n            this._destroyed = false;\n            var dedupStack = [];\n            // Start off by creating Records for every provider declared in every InjectorType\n            // included transitively in additional providers then do the same for `def`. This order is\n            // important because `def` may include providers that override ones in additionalProviders.\n            additionalProviders && deepForEach(additionalProviders, function (provider) { return _this.processProvider(provider, def, additionalProviders); });\n            deepForEach([def], function (injectorDef) { return _this.processInjectorType(injectorDef, [], dedupStack); });\n            // Make sure the INJECTOR token provides this injector.\n            this.records.set(INJECTOR, makeRecord(undefined, this));\n            // Detect whether this injector has the APP_ROOT_SCOPE token and thus should provide\n            // any injectable scoped to APP_ROOT_SCOPE.\n            var record = this.records.get(INJECTOR_SCOPE);\n            this.scope = record != null ? record.value : null;\n            // Eagerly instantiate the InjectorType classes themselves.\n            this.injectorDefTypes.forEach(function (defType) { return _this.get(defType); });\n            // Source name, used for debugging\n            this.source = source || (typeof def === 'object' ? null : stringify(def));\n        }\n        Object.defineProperty(R3Injector.prototype, \"destroyed\", {\n            /**\n             * Flag indicating that this injector was previously destroyed.\n             */\n            get: function () { return this._destroyed; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Destroy the injector and release references to every instance or provider associated with it.\n         *\n         * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a\n         * hook was found.\n         */\n        R3Injector.prototype.destroy = function () {\n            this.assertNotDestroyed();\n            // Set destroyed = true first, in case lifecycle hooks re-enter destroy().\n            this._destroyed = true;\n            try {\n                // Call all the lifecycle hooks.\n                this.onDestroy.forEach(function (service) { return service.ngOnDestroy(); });\n            }\n            finally {\n                // Release all references.\n                this.records.clear();\n                this.onDestroy.clear();\n                this.injectorDefTypes.clear();\n            }\n        };\n        R3Injector.prototype.get = function (token, notFoundValue, flags) {\n            if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }\n            if (flags === void 0) { flags = exports.InjectFlags.Default; }\n            this.assertNotDestroyed();\n            // Set the injection context.\n            var previousInjector = setCurrentInjector(this);\n            try {\n                // Check for the SkipSelf flag.\n                if (!(flags & exports.InjectFlags.SkipSelf)) {\n                    // SkipSelf isn't set, check if the record belongs to this injector.\n                    var record = this.records.get(token);\n                    if (record === undefined) {\n                        // No record, but maybe the token is scoped to this injector. Look for an injectable\n                        // def with a scope matching this injector.\n                        var def = couldBeInjectableType(token) && getInjectableDef(token);\n                        if (def && this.injectableDefInScope(def)) {\n                            // Found an injectable def and it's scoped to this injector. Pretend as if it was here\n                            // all along.\n                            record = makeRecord(injectableDefOrInjectorDefFactory(token), NOT_YET);\n                        }\n                        else {\n                            record = null;\n                        }\n                        this.records.set(token, record);\n                    }\n                    // If a record was found, get the instance for it and return it.\n                    if (record != null /* NOT null || undefined */) {\n                        return this.hydrate(token, record);\n                    }\n                }\n                // Select the next injector based on the Self flag - if self is set, the next injector is\n                // the NullInjector, otherwise it's the parent.\n                var nextInjector = !(flags & exports.InjectFlags.Self) ? this.parent : getNullInjector();\n                // Set the notFoundValue based on the Optional flag - if optional is set and notFoundValue\n                // is undefined, the value is null, otherwise it's the notFoundValue.\n                notFoundValue = (flags & exports.InjectFlags.Optional) && notFoundValue === THROW_IF_NOT_FOUND ?\n                    null :\n                    notFoundValue;\n                return nextInjector.get(token, notFoundValue);\n            }\n            catch (e) {\n                if (e.name === 'NullInjectorError') {\n                    var path = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];\n                    path.unshift(stringify(token));\n                    if (previousInjector) {\n                        // We still have a parent injector, keep throwing\n                        throw e;\n                    }\n                    else {\n                        // Format & throw the final error message when we don't have any previous injector\n                        return catchInjectorError(e, token, 'R3InjectorError', this.source);\n                    }\n                }\n                else {\n                    throw e;\n                }\n            }\n            finally {\n                // Lastly, clean up the state by restoring the previous injector.\n                setCurrentInjector(previousInjector);\n            }\n        };\n        R3Injector.prototype.toString = function () {\n            var tokens = [], records = this.records;\n            records.forEach(function (v, token) { return tokens.push(stringify(token)); });\n            return \"R3Injector[\" + tokens.join(', ') + \"]\";\n        };\n        R3Injector.prototype.assertNotDestroyed = function () {\n            if (this._destroyed) {\n                throw new Error('Injector has already been destroyed.');\n            }\n        };\n        /**\n         * Add an `InjectorType` or `InjectorTypeWithProviders` and all of its transitive providers\n         * to this injector.\n         *\n         * If an `InjectorTypeWithProviders` that declares providers besides the type is specified,\n         * the function will return \"true\" to indicate that the providers of the type definition need\n         * to be processed. This allows us to process providers of injector types after all imports of\n         * an injector definition are processed. (following View Engine semantics: see FW-1349)\n         */\n        R3Injector.prototype.processInjectorType = function (defOrWrappedDef, parents, dedupStack) {\n            var _this = this;\n            defOrWrappedDef = resolveForwardRef(defOrWrappedDef);\n            if (!defOrWrappedDef)\n                return false;\n            // Either the defOrWrappedDef is an InjectorType (with injector def) or an\n            // InjectorDefTypeWithProviders (aka ModuleWithProviders). Detecting either is a megamorphic\n            // read, so care is taken to only do the read once.\n            // First attempt to read the injector def (`ɵinj`).\n            var def = getInjectorDef(defOrWrappedDef);\n            // If that's not present, then attempt to read ngModule from the InjectorDefTypeWithProviders.\n            var ngModule = (def == null) && defOrWrappedDef.ngModule || undefined;\n            // Determine the InjectorType. In the case where `defOrWrappedDef` is an `InjectorType`,\n            // then this is easy. In the case of an InjectorDefTypeWithProviders, then the definition type\n            // is the `ngModule`.\n            var defType = (ngModule === undefined) ? defOrWrappedDef : ngModule;\n            // Check for circular dependencies.\n            if (ngDevMode && parents.indexOf(defType) !== -1) {\n                var defName = stringify(defType);\n                throw new Error(\"Circular dependency in DI detected for type \" + defName + \". Dependency path: \" + parents.map(function (defType) { return stringify(defType); }).join(' > ') + \" > \" + defName + \".\");\n            }\n            // Check for multiple imports of the same module\n            var isDuplicate = dedupStack.indexOf(defType) !== -1;\n            // Finally, if defOrWrappedType was an `InjectorDefTypeWithProviders`, then the actual\n            // `InjectorDef` is on its `ngModule`.\n            if (ngModule !== undefined) {\n                def = getInjectorDef(ngModule);\n            }\n            // If no definition was found, it might be from exports. Remove it.\n            if (def == null) {\n                return false;\n            }\n            // Track the InjectorType and add a provider for it.\n            this.injectorDefTypes.add(defType);\n            this.records.set(defType, makeRecord(def.factory, NOT_YET));\n            // Add providers in the same way that @NgModule resolution did:\n            // First, include providers from any imports.\n            if (def.imports != null && !isDuplicate) {\n                // Before processing defType's imports, add it to the set of parents. This way, if it ends\n                // up deeply importing itself, this can be detected.\n                ngDevMode && parents.push(defType);\n                // Add it to the set of dedups. This way we can detect multiple imports of the same module\n                dedupStack.push(defType);\n                var importTypesWithProviders_1;\n                try {\n                    deepForEach(def.imports, function (imported) {\n                        if (_this.processInjectorType(imported, parents, dedupStack)) {\n                            if (importTypesWithProviders_1 === undefined)\n                                importTypesWithProviders_1 = [];\n                            // If the processed import is an injector type with providers, we store it in the\n                            // list of import types with providers, so that we can process those afterwards.\n                            importTypesWithProviders_1.push(imported);\n                        }\n                    });\n                }\n                finally {\n                    // Remove it from the parents set when finished.\n                    ngDevMode && parents.pop();\n                }\n                // Imports which are declared with providers (TypeWithProviders) need to be processed\n                // after all imported modules are processed. This is similar to how View Engine\n                // processes/merges module imports in the metadata resolver. See: FW-1349.\n                if (importTypesWithProviders_1 !== undefined) {\n                    var _loop_1 = function (i) {\n                        var _a = importTypesWithProviders_1[i], ngModule_1 = _a.ngModule, providers = _a.providers;\n                        deepForEach(providers, function (provider) { return _this.processProvider(provider, ngModule_1, providers || EMPTY_ARRAY$2); });\n                    };\n                    for (var i = 0; i < importTypesWithProviders_1.length; i++) {\n                        _loop_1(i);\n                    }\n                }\n            }\n            // Next, include providers listed on the definition itself.\n            var defProviders = def.providers;\n            if (defProviders != null && !isDuplicate) {\n                var injectorType_1 = defOrWrappedDef;\n                deepForEach(defProviders, function (provider) { return _this.processProvider(provider, injectorType_1, defProviders); });\n            }\n            return (ngModule !== undefined &&\n                defOrWrappedDef.providers !== undefined);\n        };\n        /**\n         * Process a `SingleProvider` and add it.\n         */\n        R3Injector.prototype.processProvider = function (provider, ngModuleType, providers) {\n            // Determine the token from the provider. Either it's its own token, or has a {provide: ...}\n            // property.\n            provider = resolveForwardRef(provider);\n            var token = isTypeProvider(provider) ? provider : resolveForwardRef(provider && provider.provide);\n            // Construct a `Record` for the provider.\n            var record = providerToRecord(provider, ngModuleType, providers);\n            if (!isTypeProvider(provider) && provider.multi === true) {\n                // If the provider indicates that it's a multi-provider, process it specially.\n                // First check whether it's been defined already.\n                var multiRecord_1 = this.records.get(token);\n                if (multiRecord_1) {\n                    // It has. Throw a nice error if\n                    if (multiRecord_1.multi === undefined) {\n                        throwMixedMultiProviderError();\n                    }\n                }\n                else {\n                    multiRecord_1 = makeRecord(undefined, NOT_YET, true);\n                    multiRecord_1.factory = function () { return injectArgs(multiRecord_1.multi); };\n                    this.records.set(token, multiRecord_1);\n                }\n                token = provider;\n                multiRecord_1.multi.push(provider);\n            }\n            else {\n                var existing = this.records.get(token);\n                if (existing && existing.multi !== undefined) {\n                    throwMixedMultiProviderError();\n                }\n            }\n            this.records.set(token, record);\n        };\n        R3Injector.prototype.hydrate = function (token, record) {\n            if (record.value === CIRCULAR) {\n                throwCyclicDependencyError(stringify(token));\n            }\n            else if (record.value === NOT_YET) {\n                record.value = CIRCULAR;\n                record.value = record.factory();\n            }\n            if (typeof record.value === 'object' && record.value && hasOnDestroy(record.value)) {\n                this.onDestroy.add(record.value);\n            }\n            return record.value;\n        };\n        R3Injector.prototype.injectableDefInScope = function (def) {\n            if (!def.providedIn) {\n                return false;\n            }\n            else if (typeof def.providedIn === 'string') {\n                return def.providedIn === 'any' || (def.providedIn === this.scope);\n            }\n            else {\n                return this.injectorDefTypes.has(def.providedIn);\n            }\n        };\n        return R3Injector;\n    }());\n    function injectableDefOrInjectorDefFactory(token) {\n        // Most tokens will have an injectable def directly on them, which specifies a factory directly.\n        var injectableDef = getInjectableDef(token);\n        var factory = injectableDef !== null ? injectableDef.factory : getFactoryDef(token);\n        if (factory !== null) {\n            return factory;\n        }\n        // If the token is an NgModule, it's also injectable but the factory is on its injector def\n        // (`ɵinj`)\n        var injectorDef = getInjectorDef(token);\n        if (injectorDef !== null) {\n            return injectorDef.factory;\n        }\n        // InjectionTokens should have an injectable def (ɵprov) and thus should be handled above.\n        // If it's missing that, it's an error.\n        if (token instanceof InjectionToken) {\n            throw new Error(\"Token \" + stringify(token) + \" is missing a \\u0275prov definition.\");\n        }\n        // Undecorated types can sometimes be created if they have no constructor arguments.\n        if (token instanceof Function) {\n            return getUndecoratedInjectableFactory(token);\n        }\n        // There was no way to resolve a factory for this token.\n        throw new Error('unreachable');\n    }\n    function getUndecoratedInjectableFactory(token) {\n        // If the token has parameters then it has dependencies that we cannot resolve implicitly.\n        var paramLength = token.length;\n        if (paramLength > 0) {\n            var args = newArray(paramLength, '?');\n            throw new Error(\"Can't resolve all parameters for \" + stringify(token) + \": (\" + args.join(', ') + \").\");\n        }\n        // The constructor function appears to have no parameters.\n        // This might be because it inherits from a super-class. In which case, use an injectable\n        // def from an ancestor if there is one.\n        // Otherwise this really is a simple class with no dependencies, so return a factory that\n        // just instantiates the zero-arg constructor.\n        var inheritedInjectableDef = getInheritedInjectableDef(token);\n        if (inheritedInjectableDef !== null) {\n            return function () { return inheritedInjectableDef.factory(token); };\n        }\n        else {\n            return function () { return new token(); };\n        }\n    }\n    function providerToRecord(provider, ngModuleType, providers) {\n        if (isValueProvider(provider)) {\n            return makeRecord(undefined, provider.useValue);\n        }\n        else {\n            var factory = providerToFactory(provider, ngModuleType, providers);\n            return makeRecord(factory, NOT_YET);\n        }\n    }\n    /**\n     * Converts a `SingleProvider` into a factory function.\n     *\n     * @param provider provider to convert to factory\n     */\n    function providerToFactory(provider, ngModuleType, providers) {\n        var factory = undefined;\n        if (isTypeProvider(provider)) {\n            return injectableDefOrInjectorDefFactory(resolveForwardRef(provider));\n        }\n        else {\n            if (isValueProvider(provider)) {\n                factory = function () { return resolveForwardRef(provider.useValue); };\n            }\n            else if (isFactoryProvider(provider)) {\n                factory = function () { return provider.useFactory.apply(provider, __spread(injectArgs(provider.deps || []))); };\n            }\n            else if (isExistingProvider(provider)) {\n                factory = function () { return ɵɵinject(resolveForwardRef(provider.useExisting)); };\n            }\n            else {\n                var classRef_1 = resolveForwardRef(provider &&\n                    (provider.useClass || provider.provide));\n                if (!classRef_1) {\n                    throwInvalidProviderError(ngModuleType, providers, provider);\n                }\n                if (hasDeps(provider)) {\n                    factory = function () { return new ((classRef_1).bind.apply((classRef_1), __spread([void 0], injectArgs(provider.deps))))(); };\n                }\n                else {\n                    return injectableDefOrInjectorDefFactory(classRef_1);\n                }\n            }\n        }\n        return factory;\n    }\n    function makeRecord(factory, value, multi) {\n        if (multi === void 0) { multi = false; }\n        return {\n            factory: factory,\n            value: value,\n            multi: multi ? [] : undefined,\n        };\n    }\n    function isValueProvider(value) {\n        return value !== null && typeof value == 'object' && USE_VALUE in value;\n    }\n    function isExistingProvider(value) {\n        return !!(value && value.useExisting);\n    }\n    function isFactoryProvider(value) {\n        return !!(value && value.useFactory);\n    }\n    function isTypeProvider(value) {\n        return typeof value === 'function';\n    }\n    function isClassProvider(value) {\n        return !!value.useClass;\n    }\n    function hasDeps(value) {\n        return !!value.deps;\n    }\n    function hasOnDestroy(value) {\n        return value !== null && typeof value === 'object' &&\n            typeof value.ngOnDestroy === 'function';\n    }\n    function couldBeInjectableType(value) {\n        return (typeof value === 'function') ||\n            (typeof value === 'object' && value instanceof InjectionToken);\n    }\n\n    function INJECTOR_IMPL__PRE_R3__(providers, parent, name) {\n        return new StaticInjector(providers, parent, name);\n    }\n    function INJECTOR_IMPL__POST_R3__(providers, parent, name) {\n        return createInjector({ name: name }, parent, providers, name);\n    }\n    var INJECTOR_IMPL = INJECTOR_IMPL__POST_R3__;\n    /**\n     * Concrete injectors implement this interface. Injectors are configured\n     * with [providers](guide/glossary#provider) that associate\n     * dependencies of various types with [injection tokens](guide/glossary#di-token).\n     *\n     * @see [\"DI Providers\"](guide/dependency-injection-providers).\n     * @see `StaticProvider`\n     *\n     * @usageNotes\n     *\n     *  The following example creates a service injector instance.\n     *\n     * {@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n     *\n     * ### Usage example\n     *\n     * {@example core/di/ts/injector_spec.ts region='Injector'}\n     *\n     * `Injector` returns itself when given `Injector` as a token:\n     *\n     * {@example core/di/ts/injector_spec.ts region='injectInjector'}\n     *\n     * @publicApi\n     */\n    var Injector = /** @class */ (function () {\n        function Injector() {\n        }\n        Injector.create = function (options, parent) {\n            if (Array.isArray(options)) {\n                return INJECTOR_IMPL(options, parent, '');\n            }\n            else {\n                return INJECTOR_IMPL(options.providers, options.parent, options.name || '');\n            }\n        };\n        Injector.THROW_IF_NOT_FOUND = THROW_IF_NOT_FOUND;\n        Injector.NULL = new NullInjector();\n        /** @nocollapse */\n        Injector.ɵprov = ɵɵdefineInjectable({\n            token: Injector,\n            providedIn: 'any',\n            factory: function () { return ɵɵinject(INJECTOR); },\n        });\n        /**\n         * @internal\n         * @nocollapse\n         */\n        Injector.__NG_ELEMENT_ID__ = -1;\n        return Injector;\n    }());\n    var IDENT = function (value) {\n        return value;\n    };\n    var EMPTY = [];\n    var CIRCULAR$1 = IDENT;\n    var MULTI_PROVIDER_FN = function () {\n        return Array.prototype.slice.call(arguments);\n    };\n    var NO_NEW_LINE$1 = 'ɵ';\n    var StaticInjector = /** @class */ (function () {\n        function StaticInjector(providers, parent, source) {\n            if (parent === void 0) { parent = Injector.NULL; }\n            if (source === void 0) { source = null; }\n            this.parent = parent;\n            this.source = source;\n            var records = this._records = new Map();\n            records.set(Injector, { token: Injector, fn: IDENT, deps: EMPTY, value: this, useNew: false });\n            records.set(INJECTOR, { token: INJECTOR, fn: IDENT, deps: EMPTY, value: this, useNew: false });\n            this.scope = recursivelyProcessProviders(records, providers);\n        }\n        StaticInjector.prototype.get = function (token, notFoundValue, flags) {\n            if (flags === void 0) { flags = exports.InjectFlags.Default; }\n            var records = this._records;\n            var record = records.get(token);\n            if (record === undefined) {\n                // This means we have never seen this record, see if it is tree shakable provider.\n                var injectableDef = getInjectableDef(token);\n                if (injectableDef) {\n                    var providedIn = injectableDef && injectableDef.providedIn;\n                    if (providedIn === 'any' || providedIn != null && providedIn === this.scope) {\n                        records.set(token, record = resolveProvider({ provide: token, useFactory: injectableDef.factory, deps: EMPTY }));\n                    }\n                }\n                if (record === undefined) {\n                    // Set record to null to make sure that we don't go through expensive lookup above again.\n                    records.set(token, null);\n                }\n            }\n            var lastInjector = setCurrentInjector(this);\n            try {\n                return tryResolveToken(token, record, records, this.parent, notFoundValue, flags);\n            }\n            catch (e) {\n                return catchInjectorError(e, token, 'StaticInjectorError', this.source);\n            }\n            finally {\n                setCurrentInjector(lastInjector);\n            }\n        };\n        StaticInjector.prototype.toString = function () {\n            var tokens = [], records = this._records;\n            records.forEach(function (v, token) { return tokens.push(stringify(token)); });\n            return \"StaticInjector[\" + tokens.join(', ') + \"]\";\n        };\n        return StaticInjector;\n    }());\n    function resolveProvider(provider) {\n        var deps = computeDeps(provider);\n        var fn = IDENT;\n        var value = EMPTY;\n        var useNew = false;\n        var provide = resolveForwardRef(provider.provide);\n        if (USE_VALUE in provider) {\n            // We need to use USE_VALUE in provider since provider.useValue could be defined as undefined.\n            value = provider.useValue;\n        }\n        else if (provider.useFactory) {\n            fn = provider.useFactory;\n        }\n        else if (provider.useExisting) {\n            // Just use IDENT\n        }\n        else if (provider.useClass) {\n            useNew = true;\n            fn = resolveForwardRef(provider.useClass);\n        }\n        else if (typeof provide == 'function') {\n            useNew = true;\n            fn = provide;\n        }\n        else {\n            throw staticError('StaticProvider does not have [useValue|useFactory|useExisting|useClass] or [provide] is not newable', provider);\n        }\n        return { deps: deps, fn: fn, useNew: useNew, value: value };\n    }\n    function multiProviderMixError(token) {\n        return staticError('Cannot mix multi providers and regular providers', token);\n    }\n    function recursivelyProcessProviders(records, provider) {\n        var scope = null;\n        if (provider) {\n            provider = resolveForwardRef(provider);\n            if (Array.isArray(provider)) {\n                // if we have an array recurse into the array\n                for (var i = 0; i < provider.length; i++) {\n                    scope = recursivelyProcessProviders(records, provider[i]) || scope;\n                }\n            }\n            else if (typeof provider === 'function') {\n                // Functions were supported in ReflectiveInjector, but are not here. For safety give useful\n                // error messages\n                throw staticError('Function/Class not supported', provider);\n            }\n            else if (provider && typeof provider === 'object' && provider.provide) {\n                // At this point we have what looks like a provider: {provide: ?, ....}\n                var token = resolveForwardRef(provider.provide);\n                var resolvedProvider = resolveProvider(provider);\n                if (provider.multi === true) {\n                    // This is a multi provider.\n                    var multiProvider = records.get(token);\n                    if (multiProvider) {\n                        if (multiProvider.fn !== MULTI_PROVIDER_FN) {\n                            throw multiProviderMixError(token);\n                        }\n                    }\n                    else {\n                        // Create a placeholder factory which will look up the constituents of the multi provider.\n                        records.set(token, multiProvider = {\n                            token: provider.provide,\n                            deps: [],\n                            useNew: false,\n                            fn: MULTI_PROVIDER_FN,\n                            value: EMPTY\n                        });\n                    }\n                    // Treat the provider as the token.\n                    token = provider;\n                    multiProvider.deps.push({ token: token, options: 6 /* Default */ });\n                }\n                var record = records.get(token);\n                if (record && record.fn == MULTI_PROVIDER_FN) {\n                    throw multiProviderMixError(token);\n                }\n                if (token === INJECTOR_SCOPE) {\n                    scope = resolvedProvider.value;\n                }\n                records.set(token, resolvedProvider);\n            }\n            else {\n                throw staticError('Unexpected provider', provider);\n            }\n        }\n        return scope;\n    }\n    function tryResolveToken(token, record, records, parent, notFoundValue, flags) {\n        try {\n            return resolveToken(token, record, records, parent, notFoundValue, flags);\n        }\n        catch (e) {\n            // ensure that 'e' is of type Error.\n            if (!(e instanceof Error)) {\n                e = new Error(e);\n            }\n            var path = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];\n            path.unshift(token);\n            if (record && record.value == CIRCULAR$1) {\n                // Reset the Circular flag.\n                record.value = EMPTY;\n            }\n            throw e;\n        }\n    }\n    function resolveToken(token, record, records, parent, notFoundValue, flags) {\n        var _a;\n        var value;\n        if (record && !(flags & exports.InjectFlags.SkipSelf)) {\n            // If we don't have a record, this implies that we don't own the provider hence don't know how\n            // to resolve it.\n            value = record.value;\n            if (value == CIRCULAR$1) {\n                throw Error(NO_NEW_LINE$1 + 'Circular dependency');\n            }\n            else if (value === EMPTY) {\n                record.value = CIRCULAR$1;\n                var obj = undefined;\n                var useNew = record.useNew;\n                var fn = record.fn;\n                var depRecords = record.deps;\n                var deps = EMPTY;\n                if (depRecords.length) {\n                    deps = [];\n                    for (var i = 0; i < depRecords.length; i++) {\n                        var depRecord = depRecords[i];\n                        var options = depRecord.options;\n                        var childRecord = options & 2 /* CheckSelf */ ? records.get(depRecord.token) : undefined;\n                        deps.push(tryResolveToken(\n                        // Current Token to resolve\n                        depRecord.token, \n                        // A record which describes how to resolve the token.\n                        // If undefined, this means we don't have such a record\n                        childRecord, \n                        // Other records we know about.\n                        records, \n                        // If we don't know how to resolve dependency and we should not check parent for it,\n                        // than pass in Null injector.\n                        !childRecord && !(options & 4 /* CheckParent */) ? Injector.NULL : parent, options & 1 /* Optional */ ? null : Injector.THROW_IF_NOT_FOUND, exports.InjectFlags.Default));\n                    }\n                }\n                record.value = value = useNew ? new ((_a = fn).bind.apply(_a, __spread([void 0], deps)))() : fn.apply(obj, deps);\n            }\n        }\n        else if (!(flags & exports.InjectFlags.Self)) {\n            value = parent.get(token, notFoundValue, exports.InjectFlags.Default);\n        }\n        else if (!(flags & exports.InjectFlags.Optional)) {\n            value = Injector.NULL.get(token, notFoundValue);\n        }\n        else {\n            value = Injector.NULL.get(token, typeof notFoundValue !== 'undefined' ? notFoundValue : null);\n        }\n        return value;\n    }\n    function computeDeps(provider) {\n        var deps = EMPTY;\n        var providerDeps = provider.deps;\n        if (providerDeps && providerDeps.length) {\n            deps = [];\n            for (var i = 0; i < providerDeps.length; i++) {\n                var options = 6 /* Default */;\n                var token = resolveForwardRef(providerDeps[i]);\n                if (Array.isArray(token)) {\n                    for (var j = 0, annotations = token; j < annotations.length; j++) {\n                        var annotation = annotations[j];\n                        if (annotation instanceof Optional || annotation == Optional) {\n                            options = options | 1 /* Optional */;\n                        }\n                        else if (annotation instanceof SkipSelf || annotation == SkipSelf) {\n                            options = options & ~2 /* CheckSelf */;\n                        }\n                        else if (annotation instanceof Self || annotation == Self) {\n                            options = options & ~4 /* CheckParent */;\n                        }\n                        else if (annotation instanceof Inject) {\n                            token = annotation.token;\n                        }\n                        else {\n                            token = resolveForwardRef(annotation);\n                        }\n                    }\n                }\n                deps.push({ token: token, options: options });\n            }\n        }\n        else if (provider.useExisting) {\n            var token = resolveForwardRef(provider.useExisting);\n            deps = [{ token: token, options: 6 /* Default */ }];\n        }\n        else if (!providerDeps && !(USE_VALUE in provider)) {\n            // useValue & useExisting are the only ones which are exempt from deps all others need it.\n            throw staticError('\\'deps\\' required', provider);\n        }\n        return deps;\n    }\n    function staticError(text, obj) {\n        return new Error(formatError(text, obj, 'StaticInjectorError'));\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function findFirstClosedCycle(keys) {\n        var res = [];\n        for (var i = 0; i < keys.length; ++i) {\n            if (res.indexOf(keys[i]) > -1) {\n                res.push(keys[i]);\n                return res;\n            }\n            res.push(keys[i]);\n        }\n        return res;\n    }\n    function constructResolvingPath(keys) {\n        if (keys.length > 1) {\n            var reversed = findFirstClosedCycle(keys.slice().reverse());\n            var tokenStrs = reversed.map(function (k) { return stringify(k.token); });\n            return ' (' + tokenStrs.join(' -> ') + ')';\n        }\n        return '';\n    }\n    function injectionError(injector, key, constructResolvingMessage, originalError) {\n        var keys = [key];\n        var errMsg = constructResolvingMessage(keys);\n        var error = (originalError ? wrappedError(errMsg, originalError) : Error(errMsg));\n        error.addKey = addKey;\n        error.keys = keys;\n        error.injectors = [injector];\n        error.constructResolvingMessage = constructResolvingMessage;\n        error[ERROR_ORIGINAL_ERROR] = originalError;\n        return error;\n    }\n    function addKey(injector, key) {\n        this.injectors.push(injector);\n        this.keys.push(key);\n        // Note: This updated message won't be reflected in the `.stack` property\n        this.message = this.constructResolvingMessage(this.keys);\n    }\n    /**\n     * Thrown when trying to retrieve a dependency by key from {@link Injector}, but the\n     * {@link Injector} does not have a {@link Provider} for the given key.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * class A {\n     *   constructor(b:B) {}\n     * }\n     *\n     * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n     * ```\n     */\n    function noProviderError(injector, key) {\n        return injectionError(injector, key, function (keys) {\n            var first = stringify(keys[0].token);\n            return \"No provider for \" + first + \"!\" + constructResolvingPath(keys);\n        });\n    }\n    /**\n     * Thrown when dependencies form a cycle.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * var injector = Injector.resolveAndCreate([\n     *   {provide: \"one\", useFactory: (two) => \"two\", deps: [[new Inject(\"two\")]]},\n     *   {provide: \"two\", useFactory: (one) => \"one\", deps: [[new Inject(\"one\")]]}\n     * ]);\n     *\n     * expect(() => injector.get(\"one\")).toThrowError();\n     * ```\n     *\n     * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.\n     */\n    function cyclicDependencyError(injector, key) {\n        return injectionError(injector, key, function (keys) {\n            return \"Cannot instantiate cyclic dependency!\" + constructResolvingPath(keys);\n        });\n    }\n    /**\n     * Thrown when a constructing type returns with an Error.\n     *\n     * The `InstantiationError` class contains the original error plus the dependency graph which caused\n     * this object to be instantiated.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * class A {\n     *   constructor() {\n     *     throw new Error('message');\n     *   }\n     * }\n     *\n     * var injector = Injector.resolveAndCreate([A]);\n\n     * try {\n     *   injector.get(A);\n     * } catch (e) {\n     *   expect(e instanceof InstantiationError).toBe(true);\n     *   expect(e.originalException.message).toEqual(\"message\");\n     *   expect(e.originalStack).toBeDefined();\n     * }\n     * ```\n     */\n    function instantiationError(injector, originalException, originalStack, key) {\n        return injectionError(injector, key, function (keys) {\n            var first = stringify(keys[0].token);\n            return originalException.message + \": Error during instantiation of \" + first + \"!\" + constructResolvingPath(keys) + \".\";\n        }, originalException);\n    }\n    /**\n     * Thrown when an object other then {@link Provider} (or `Type`) is passed to {@link Injector}\n     * creation.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * expect(() => Injector.resolveAndCreate([\"not a type\"])).toThrowError();\n     * ```\n     */\n    function invalidProviderError(provider) {\n        return Error(\"Invalid provider - only instances of Provider and Type are allowed, got: \" + provider);\n    }\n    /**\n     * Thrown when the class has no annotation information.\n     *\n     * Lack of annotation information prevents the {@link Injector} from determining which dependencies\n     * need to be injected into the constructor.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * class A {\n     *   constructor(b) {}\n     * }\n     *\n     * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n     * ```\n     *\n     * This error is also thrown when the class not marked with {@link Injectable} has parameter types.\n     *\n     * ```typescript\n     * class B {}\n     *\n     * class A {\n     *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.\n     * }\n     *\n     * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();\n     * ```\n     *\n     */\n    function noAnnotationError(typeOrFunc, params) {\n        var signature = [];\n        for (var i = 0, ii = params.length; i < ii; i++) {\n            var parameter = params[i];\n            if (!parameter || parameter.length == 0) {\n                signature.push('?');\n            }\n            else {\n                signature.push(parameter.map(stringify).join(' '));\n            }\n        }\n        return Error('Cannot resolve all parameters for \\'' + stringify(typeOrFunc) + '\\'(' +\n            signature.join(', ') + '). ' +\n            'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \\'' +\n            stringify(typeOrFunc) + '\\' is decorated with Injectable.');\n    }\n    /**\n     * Thrown when getting an object by index.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * class A {}\n     *\n     * var injector = Injector.resolveAndCreate([A]);\n     *\n     * expect(() => injector.getAt(100)).toThrowError();\n     * ```\n     *\n     */\n    function outOfBoundsError(index) {\n        return Error(\"Index \" + index + \" is out-of-bounds.\");\n    }\n    // TODO: add a working example after alpha38 is released\n    /**\n     * Thrown when a multi provider and a regular provider are bound to the same token.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * expect(() => Injector.resolveAndCreate([\n     *   { provide: \"Strings\", useValue: \"string1\", multi: true},\n     *   { provide: \"Strings\", useValue: \"string2\", multi: false}\n     * ])).toThrowError();\n     * ```\n     */\n    function mixingMultiProvidersWithRegularProvidersError(provider1, provider2) {\n        return Error(\"Cannot mix multi providers and regular providers, got: \" + provider1 + \" \" + provider2);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A unique object used for retrieving items from the {@link ReflectiveInjector}.\n     *\n     * Keys have:\n     * - a system-wide unique `id`.\n     * - a `token`.\n     *\n     * `Key` is used internally by {@link ReflectiveInjector} because its system-wide unique `id` allows\n     * the\n     * injector to store created objects in a more efficient way.\n     *\n     * `Key` should not be created directly. {@link ReflectiveInjector} creates keys automatically when\n     * resolving\n     * providers.\n     *\n     * @deprecated No replacement\n     * @publicApi\n     */\n    var ReflectiveKey = /** @class */ (function () {\n        /**\n         * Private\n         */\n        function ReflectiveKey(token, id) {\n            this.token = token;\n            this.id = id;\n            if (!token) {\n                throw new Error('Token must be defined!');\n            }\n            this.displayName = stringify(this.token);\n        }\n        /**\n         * Retrieves a `Key` for a token.\n         */\n        ReflectiveKey.get = function (token) {\n            return _globalKeyRegistry.get(resolveForwardRef(token));\n        };\n        Object.defineProperty(ReflectiveKey, \"numberOfKeys\", {\n            /**\n             * @returns the number of keys registered in the system.\n             */\n            get: function () { return _globalKeyRegistry.numberOfKeys; },\n            enumerable: true,\n            configurable: true\n        });\n        return ReflectiveKey;\n    }());\n    var KeyRegistry = /** @class */ (function () {\n        function KeyRegistry() {\n            this._allKeys = new Map();\n        }\n        KeyRegistry.prototype.get = function (token) {\n            if (token instanceof ReflectiveKey)\n                return token;\n            if (this._allKeys.has(token)) {\n                return this._allKeys.get(token);\n            }\n            var newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);\n            this._allKeys.set(token, newKey);\n            return newKey;\n        };\n        Object.defineProperty(KeyRegistry.prototype, \"numberOfKeys\", {\n            get: function () { return this._allKeys.size; },\n            enumerable: true,\n            configurable: true\n        });\n        return KeyRegistry;\n    }());\n    var _globalKeyRegistry = new KeyRegistry();\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Provides access to reflection data about symbols. Used internally by Angular\n     * to power dependency injection and compilation.\n     */\n    var Reflector = /** @class */ (function () {\n        function Reflector(reflectionCapabilities) {\n            this.reflectionCapabilities = reflectionCapabilities;\n        }\n        Reflector.prototype.updateCapabilities = function (caps) { this.reflectionCapabilities = caps; };\n        Reflector.prototype.factory = function (type) { return this.reflectionCapabilities.factory(type); };\n        Reflector.prototype.parameters = function (typeOrFunc) {\n            return this.reflectionCapabilities.parameters(typeOrFunc);\n        };\n        Reflector.prototype.annotations = function (typeOrFunc) {\n            return this.reflectionCapabilities.annotations(typeOrFunc);\n        };\n        Reflector.prototype.propMetadata = function (typeOrFunc) {\n            return this.reflectionCapabilities.propMetadata(typeOrFunc);\n        };\n        Reflector.prototype.hasLifecycleHook = function (type, lcProperty) {\n            return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);\n        };\n        Reflector.prototype.getter = function (name) { return this.reflectionCapabilities.getter(name); };\n        Reflector.prototype.setter = function (name) { return this.reflectionCapabilities.setter(name); };\n        Reflector.prototype.method = function (name) { return this.reflectionCapabilities.method(name); };\n        Reflector.prototype.importUri = function (type) { return this.reflectionCapabilities.importUri(type); };\n        Reflector.prototype.resourceUri = function (type) { return this.reflectionCapabilities.resourceUri(type); };\n        Reflector.prototype.resolveIdentifier = function (name, moduleUrl, members, runtime) {\n            return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, members, runtime);\n        };\n        Reflector.prototype.resolveEnum = function (identifier, name) {\n            return this.reflectionCapabilities.resolveEnum(identifier, name);\n        };\n        return Reflector;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * The {@link Reflector} used internally in Angular to access metadata\n     * about symbols.\n     */\n    var reflector = new Reflector(new ReflectionCapabilities());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * `Dependency` is used by the framework to extend DI.\n     * This is internal to Angular and should not be used directly.\n     */\n    var ReflectiveDependency = /** @class */ (function () {\n        function ReflectiveDependency(key, optional, visibility) {\n            this.key = key;\n            this.optional = optional;\n            this.visibility = visibility;\n        }\n        ReflectiveDependency.fromKey = function (key) {\n            return new ReflectiveDependency(key, false, null);\n        };\n        return ReflectiveDependency;\n    }());\n    var _EMPTY_LIST = [];\n    var ResolvedReflectiveProvider_ = /** @class */ (function () {\n        function ResolvedReflectiveProvider_(key, resolvedFactories, multiProvider) {\n            this.key = key;\n            this.resolvedFactories = resolvedFactories;\n            this.multiProvider = multiProvider;\n            this.resolvedFactory = this.resolvedFactories[0];\n        }\n        return ResolvedReflectiveProvider_;\n    }());\n    /**\n     * An internal resolved representation of a factory function created by resolving `Provider`.\n     * @publicApi\n     */\n    var ResolvedReflectiveFactory = /** @class */ (function () {\n        function ResolvedReflectiveFactory(\n        /**\n         * Factory function which can return an instance of an object represented by a key.\n         */\n        factory, \n        /**\n         * Arguments (dependencies) to the `factory` function.\n         */\n        dependencies) {\n            this.factory = factory;\n            this.dependencies = dependencies;\n        }\n        return ResolvedReflectiveFactory;\n    }());\n    /**\n     * Resolve a single provider.\n     */\n    function resolveReflectiveFactory(provider) {\n        var factoryFn;\n        var resolvedDeps;\n        if (provider.useClass) {\n            var useClass = resolveForwardRef(provider.useClass);\n            factoryFn = reflector.factory(useClass);\n            resolvedDeps = _dependenciesFor(useClass);\n        }\n        else if (provider.useExisting) {\n            factoryFn = function (aliasInstance) { return aliasInstance; };\n            resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];\n        }\n        else if (provider.useFactory) {\n            factoryFn = provider.useFactory;\n            resolvedDeps = constructDependencies(provider.useFactory, provider.deps);\n        }\n        else {\n            factoryFn = function () { return provider.useValue; };\n            resolvedDeps = _EMPTY_LIST;\n        }\n        return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);\n    }\n    /**\n     * Converts the `Provider` into `ResolvedProvider`.\n     *\n     * `Injector` internally only uses `ResolvedProvider`, `Provider` contains convenience provider\n     * syntax.\n     */\n    function resolveReflectiveProvider(provider) {\n        return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi || false);\n    }\n    /**\n     * Resolve a list of Providers.\n     */\n    function resolveReflectiveProviders(providers) {\n        var normalized = _normalizeProviders(providers, []);\n        var resolved = normalized.map(resolveReflectiveProvider);\n        var resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());\n        return Array.from(resolvedProviderMap.values());\n    }\n    /**\n     * Merges a list of ResolvedProviders into a list where each key is contained exactly once and\n     * multi providers have been merged.\n     */\n    function mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {\n        for (var i = 0; i < providers.length; i++) {\n            var provider = providers[i];\n            var existing = normalizedProvidersMap.get(provider.key.id);\n            if (existing) {\n                if (provider.multiProvider !== existing.multiProvider) {\n                    throw mixingMultiProvidersWithRegularProvidersError(existing, provider);\n                }\n                if (provider.multiProvider) {\n                    for (var j = 0; j < provider.resolvedFactories.length; j++) {\n                        existing.resolvedFactories.push(provider.resolvedFactories[j]);\n                    }\n                }\n                else {\n                    normalizedProvidersMap.set(provider.key.id, provider);\n                }\n            }\n            else {\n                var resolvedProvider = void 0;\n                if (provider.multiProvider) {\n                    resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);\n                }\n                else {\n                    resolvedProvider = provider;\n                }\n                normalizedProvidersMap.set(provider.key.id, resolvedProvider);\n            }\n        }\n        return normalizedProvidersMap;\n    }\n    function _normalizeProviders(providers, res) {\n        providers.forEach(function (b) {\n            if (b instanceof Type) {\n                res.push({ provide: b, useClass: b });\n            }\n            else if (b && typeof b == 'object' && b.provide !== undefined) {\n                res.push(b);\n            }\n            else if (Array.isArray(b)) {\n                _normalizeProviders(b, res);\n            }\n            else {\n                throw invalidProviderError(b);\n            }\n        });\n        return res;\n    }\n    function constructDependencies(typeOrFunc, dependencies) {\n        if (!dependencies) {\n            return _dependenciesFor(typeOrFunc);\n        }\n        else {\n            var params_1 = dependencies.map(function (t) { return [t]; });\n            return dependencies.map(function (t) { return _extractToken(typeOrFunc, t, params_1); });\n        }\n    }\n    function _dependenciesFor(typeOrFunc) {\n        var params = reflector.parameters(typeOrFunc);\n        if (!params)\n            return [];\n        if (params.some(function (p) { return p == null; })) {\n            throw noAnnotationError(typeOrFunc, params);\n        }\n        return params.map(function (p) { return _extractToken(typeOrFunc, p, params); });\n    }\n    function _extractToken(typeOrFunc, metadata, params) {\n        var token = null;\n        var optional = false;\n        if (!Array.isArray(metadata)) {\n            if (metadata instanceof Inject) {\n                return _createDependency(metadata.token, optional, null);\n            }\n            else {\n                return _createDependency(metadata, optional, null);\n            }\n        }\n        var visibility = null;\n        for (var i = 0; i < metadata.length; ++i) {\n            var paramMetadata = metadata[i];\n            if (paramMetadata instanceof Type) {\n                token = paramMetadata;\n            }\n            else if (paramMetadata instanceof Inject) {\n                token = paramMetadata.token;\n            }\n            else if (paramMetadata instanceof Optional) {\n                optional = true;\n            }\n            else if (paramMetadata instanceof Self || paramMetadata instanceof SkipSelf) {\n                visibility = paramMetadata;\n            }\n            else if (paramMetadata instanceof InjectionToken) {\n                token = paramMetadata;\n            }\n        }\n        token = resolveForwardRef(token);\n        if (token != null) {\n            return _createDependency(token, optional, visibility);\n        }\n        else {\n            throw noAnnotationError(typeOrFunc, params);\n        }\n    }\n    function _createDependency(token, optional, visibility) {\n        return new ReflectiveDependency(ReflectiveKey.get(token), optional, visibility);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // Threshold for the dynamic version\n    var UNDEFINED = {};\n    /**\n     * A ReflectiveDependency injection container used for instantiating objects and resolving\n     * dependencies.\n     *\n     * An `Injector` is a replacement for a `new` operator, which can automatically resolve the\n     * constructor dependencies.\n     *\n     * In typical use, application code asks for the dependencies in the constructor and they are\n     * resolved by the `Injector`.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example creates an `Injector` configured to create `Engine` and `Car`.\n     *\n     * ```typescript\n     * @Injectable()\n     * class Engine {\n     * }\n     *\n     * @Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n     * var car = injector.get(Car);\n     * expect(car instanceof Car).toBe(true);\n     * expect(car.engine instanceof Engine).toBe(true);\n     * ```\n     *\n     * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`\n     * resolve all of the object's dependencies automatically.\n     *\n     * @deprecated from v5 - slow and brings in a lot of code, Use `Injector.create` instead.\n     * @publicApi\n     */\n    var ReflectiveInjector = /** @class */ (function () {\n        function ReflectiveInjector() {\n        }\n        /**\n         * Turns an array of provider definitions into an array of resolved providers.\n         *\n         * A resolution is a process of flattening multiple nested arrays and converting individual\n         * providers into an array of `ResolvedReflectiveProvider`s.\n         *\n         * @usageNotes\n         * ### Example\n         *\n         * ```typescript\n         * @Injectable()\n         * class Engine {\n         * }\n         *\n         * @Injectable()\n         * class Car {\n         *   constructor(public engine:Engine) {}\n         * }\n         *\n         * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\n         *\n         * expect(providers.length).toEqual(2);\n         *\n         * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);\n         * expect(providers[0].key.displayName).toBe(\"Car\");\n         * expect(providers[0].dependencies.length).toEqual(1);\n         * expect(providers[0].factory).toBeDefined();\n         *\n         * expect(providers[1].key.displayName).toBe(\"Engine\");\n         * });\n         * ```\n         *\n         */\n        ReflectiveInjector.resolve = function (providers) {\n            return resolveReflectiveProviders(providers);\n        };\n        /**\n         * Resolves an array of providers and creates an injector from those providers.\n         *\n         * The passed-in providers can be an array of `Type`, `Provider`,\n         * or a recursive array of more providers.\n         *\n         * @usageNotes\n         * ### Example\n         *\n         * ```typescript\n         * @Injectable()\n         * class Engine {\n         * }\n         *\n         * @Injectable()\n         * class Car {\n         *   constructor(public engine:Engine) {}\n         * }\n         *\n         * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n         * expect(injector.get(Car) instanceof Car).toBe(true);\n         * ```\n         */\n        ReflectiveInjector.resolveAndCreate = function (providers, parent) {\n            var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n            return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);\n        };\n        /**\n         * Creates an injector from previously resolved providers.\n         *\n         * This API is the recommended way to construct injectors in performance-sensitive parts.\n         *\n         * @usageNotes\n         * ### Example\n         *\n         * ```typescript\n         * @Injectable()\n         * class Engine {\n         * }\n         *\n         * @Injectable()\n         * class Car {\n         *   constructor(public engine:Engine) {}\n         * }\n         *\n         * var providers = ReflectiveInjector.resolve([Car, Engine]);\n         * var injector = ReflectiveInjector.fromResolvedProviders(providers);\n         * expect(injector.get(Car) instanceof Car).toBe(true);\n         * ```\n         */\n        ReflectiveInjector.fromResolvedProviders = function (providers, parent) {\n            return new ReflectiveInjector_(providers, parent);\n        };\n        return ReflectiveInjector;\n    }());\n    var ReflectiveInjector_ = /** @class */ (function () {\n        /**\n         * Private\n         */\n        function ReflectiveInjector_(_providers, _parent) {\n            /** @internal */\n            this._constructionCounter = 0;\n            this._providers = _providers;\n            this.parent = _parent || null;\n            var len = _providers.length;\n            this.keyIds = [];\n            this.objs = [];\n            for (var i = 0; i < len; i++) {\n                this.keyIds[i] = _providers[i].key.id;\n                this.objs[i] = UNDEFINED;\n            }\n        }\n        ReflectiveInjector_.prototype.get = function (token, notFoundValue) {\n            if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }\n            return this._getByKey(ReflectiveKey.get(token), null, notFoundValue);\n        };\n        ReflectiveInjector_.prototype.resolveAndCreateChild = function (providers) {\n            var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n            return this.createChildFromResolved(ResolvedReflectiveProviders);\n        };\n        ReflectiveInjector_.prototype.createChildFromResolved = function (providers) {\n            var inj = new ReflectiveInjector_(providers);\n            inj.parent = this;\n            return inj;\n        };\n        ReflectiveInjector_.prototype.resolveAndInstantiate = function (provider) {\n            return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);\n        };\n        ReflectiveInjector_.prototype.instantiateResolved = function (provider) {\n            return this._instantiateProvider(provider);\n        };\n        ReflectiveInjector_.prototype.getProviderAtIndex = function (index) {\n            if (index < 0 || index >= this._providers.length) {\n                throw outOfBoundsError(index);\n            }\n            return this._providers[index];\n        };\n        /** @internal */\n        ReflectiveInjector_.prototype._new = function (provider) {\n            if (this._constructionCounter++ > this._getMaxNumberOfObjects()) {\n                throw cyclicDependencyError(this, provider.key);\n            }\n            return this._instantiateProvider(provider);\n        };\n        ReflectiveInjector_.prototype._getMaxNumberOfObjects = function () { return this.objs.length; };\n        ReflectiveInjector_.prototype._instantiateProvider = function (provider) {\n            if (provider.multiProvider) {\n                var res = [];\n                for (var i = 0; i < provider.resolvedFactories.length; ++i) {\n                    res[i] = this._instantiate(provider, provider.resolvedFactories[i]);\n                }\n                return res;\n            }\n            else {\n                return this._instantiate(provider, provider.resolvedFactories[0]);\n            }\n        };\n        ReflectiveInjector_.prototype._instantiate = function (provider, ResolvedReflectiveFactory) {\n            var _this = this;\n            var factory = ResolvedReflectiveFactory.factory;\n            var deps;\n            try {\n                deps =\n                    ResolvedReflectiveFactory.dependencies.map(function (dep) { return _this._getByReflectiveDependency(dep); });\n            }\n            catch (e) {\n                if (e.addKey) {\n                    e.addKey(this, provider.key);\n                }\n                throw e;\n            }\n            var obj;\n            try {\n                obj = factory.apply(void 0, __spread(deps));\n            }\n            catch (e) {\n                throw instantiationError(this, e, e.stack, provider.key);\n            }\n            return obj;\n        };\n        ReflectiveInjector_.prototype._getByReflectiveDependency = function (dep) {\n            return this._getByKey(dep.key, dep.visibility, dep.optional ? null : THROW_IF_NOT_FOUND);\n        };\n        ReflectiveInjector_.prototype._getByKey = function (key, visibility, notFoundValue) {\n            if (key === ReflectiveInjector_.INJECTOR_KEY) {\n                return this;\n            }\n            if (visibility instanceof Self) {\n                return this._getByKeySelf(key, notFoundValue);\n            }\n            else {\n                return this._getByKeyDefault(key, notFoundValue, visibility);\n            }\n        };\n        ReflectiveInjector_.prototype._getObjByKeyId = function (keyId) {\n            for (var i = 0; i < this.keyIds.length; i++) {\n                if (this.keyIds[i] === keyId) {\n                    if (this.objs[i] === UNDEFINED) {\n                        this.objs[i] = this._new(this._providers[i]);\n                    }\n                    return this.objs[i];\n                }\n            }\n            return UNDEFINED;\n        };\n        /** @internal */\n        ReflectiveInjector_.prototype._throwOrNull = function (key, notFoundValue) {\n            if (notFoundValue !== THROW_IF_NOT_FOUND) {\n                return notFoundValue;\n            }\n            else {\n                throw noProviderError(this, key);\n            }\n        };\n        /** @internal */\n        ReflectiveInjector_.prototype._getByKeySelf = function (key, notFoundValue) {\n            var obj = this._getObjByKeyId(key.id);\n            return (obj !== UNDEFINED) ? obj : this._throwOrNull(key, notFoundValue);\n        };\n        /** @internal */\n        ReflectiveInjector_.prototype._getByKeyDefault = function (key, notFoundValue, visibility) {\n            var inj;\n            if (visibility instanceof SkipSelf) {\n                inj = this.parent;\n            }\n            else {\n                inj = this;\n            }\n            while (inj instanceof ReflectiveInjector_) {\n                var inj_ = inj;\n                var obj = inj_._getObjByKeyId(key.id);\n                if (obj !== UNDEFINED)\n                    return obj;\n                inj = inj_.parent;\n            }\n            if (inj !== null) {\n                return inj.get(key.token, notFoundValue);\n            }\n            else {\n                return this._throwOrNull(key, notFoundValue);\n            }\n        };\n        Object.defineProperty(ReflectiveInjector_.prototype, \"displayName\", {\n            get: function () {\n                var providers = _mapProviders(this, function (b) { return ' \"' + b.key.displayName + '\" '; })\n                    .join(', ');\n                return \"ReflectiveInjector(providers: [\" + providers + \"])\";\n            },\n            enumerable: true,\n            configurable: true\n        });\n        ReflectiveInjector_.prototype.toString = function () { return this.displayName; };\n        ReflectiveInjector_.INJECTOR_KEY = ReflectiveKey.get(Injector);\n        return ReflectiveInjector_;\n    }());\n    function _mapProviders(injector, fn) {\n        var res = [];\n        for (var i = 0; i < injector._providers.length; ++i) {\n            res[i] = fn(injector.getProviderAtIndex(i));\n        }\n        return res;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A DI token that you can use to create a virtual [provider](guide/glossary#provider)\n     * that will populate the `entryComponents` field of components and NgModules\n     * based on its `useValue` property value.\n     * All components that are referenced in the `useValue` value (either directly\n     * or in a nested array or map) are added to the `entryComponents` property.\n     *\n     * @usageNotes\n     *\n     * The following example shows how the router can populate the `entryComponents`\n     * field of an NgModule based on a router configuration that refers\n     * to components.\n     *\n     * ```typescript\n     * // helper function inside the router\n     * function provideRoutes(routes) {\n     *   return [\n     *     {provide: ROUTES, useValue: routes},\n     *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}\n     *   ];\n     * }\n     *\n     * // user code\n     * let routes = [\n     *   {path: '/root', component: RootComp},\n     *   {path: '/teams', component: TeamsComp}\n     * ];\n     *\n     * @NgModule({\n     *   providers: [provideRoutes(routes)]\n     * })\n     * class ModuleWithRoutes {}\n     * ```\n     *\n     * @publicApi\n     * @deprecated Since 9.0.0. With Ivy, this property is no longer necessary.\n     */\n    var ANALYZE_FOR_ENTRY_COMPONENTS = new InjectionToken('AnalyzeForEntryComponents');\n    /**\n     * Base class for query metadata.\n     *\n     * @see `ContentChildren`.\n     * @see `ContentChild`.\n     * @see `ViewChildren`.\n     * @see `ViewChild`.\n     *\n     * @publicApi\n     */\n    var Query = /** @class */ (function () {\n        function Query() {\n        }\n        return Query;\n    }());\n    /**\n     * ContentChildren decorator and metadata.\n     *\n     *\n     * @Annotation\n     * @publicApi\n     */\n    var ContentChildren = makePropDecorator('ContentChildren', function (selector, data) {\n        if (data === void 0) { data = {}; }\n        return (__assign({ selector: selector, first: false, isViewQuery: false, descendants: false }, data));\n    }, Query);\n    /**\n     * ContentChild decorator and metadata.\n     *\n     *\n     * @Annotation\n     *\n     * @publicApi\n     */\n    var ContentChild = makePropDecorator('ContentChild', function (selector, data) {\n        if (data === void 0) { data = {}; }\n        return (__assign({ selector: selector, first: true, isViewQuery: false, descendants: true }, data));\n    }, Query);\n    /**\n     * ViewChildren decorator and metadata.\n     *\n     * @Annotation\n     * @publicApi\n     */\n    var ViewChildren = makePropDecorator('ViewChildren', function (selector, data) {\n        if (data === void 0) { data = {}; }\n        return (__assign({ selector: selector, first: false, isViewQuery: true, descendants: true }, data));\n    }, Query);\n    /**\n     * ViewChild decorator and metadata.\n     *\n     * @Annotation\n     * @publicApi\n     */\n    var ViewChild = makePropDecorator('ViewChild', function (selector, data) {\n        return (__assign({ selector: selector, first: true, isViewQuery: true, descendants: true }, data));\n    }, Query);\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Used to resolve resource URLs on `@Component` when used with JIT compilation.\n     *\n     * Example:\n     * ```\n     * @Component({\n     *   selector: 'my-comp',\n     *   templateUrl: 'my-comp.html', // This requires asynchronous resolution\n     * })\n     * class MyComponent{\n     * }\n     *\n     * // Calling `renderComponent` will fail because `renderComponent` is a synchronous process\n     * // and `MyComponent`'s `@Component.templateUrl` needs to be resolved asynchronously.\n     *\n     * // Calling `resolveComponentResources()` will resolve `@Component.templateUrl` into\n     * // `@Component.template`, which allows `renderComponent` to proceed in a synchronous manner.\n     *\n     * // Use browser's `fetch()` function as the default resource resolution strategy.\n     * resolveComponentResources(fetch).then(() => {\n     *   // After resolution all URLs have been converted into `template` strings.\n     *   renderComponent(MyComponent);\n     * });\n     *\n     * ```\n     *\n     * NOTE: In AOT the resolution happens during compilation, and so there should be no need\n     * to call this method outside JIT mode.\n     *\n     * @param resourceResolver a function which is responsible for returning a `Promise` to the\n     * contents of the resolved URL. Browser's `fetch()` method is a good default implementation.\n     */\n    function resolveComponentResources(resourceResolver) {\n        // Store all promises which are fetching the resources.\n        var componentResolved = [];\n        // Cache so that we don't fetch the same resource more than once.\n        var urlMap = new Map();\n        function cachedResourceResolve(url) {\n            var promise = urlMap.get(url);\n            if (!promise) {\n                var resp = resourceResolver(url);\n                urlMap.set(url, promise = resp.then(unwrapResponse));\n            }\n            return promise;\n        }\n        componentResourceResolutionQueue.forEach(function (component, type) {\n            var promises = [];\n            if (component.templateUrl) {\n                promises.push(cachedResourceResolve(component.templateUrl).then(function (template) {\n                    component.template = template;\n                }));\n            }\n            var styleUrls = component.styleUrls;\n            var styles = component.styles || (component.styles = []);\n            var styleOffset = component.styles.length;\n            styleUrls && styleUrls.forEach(function (styleUrl, index) {\n                styles.push(''); // pre-allocate array.\n                promises.push(cachedResourceResolve(styleUrl).then(function (style) {\n                    styles[styleOffset + index] = style;\n                    styleUrls.splice(styleUrls.indexOf(styleUrl), 1);\n                    if (styleUrls.length == 0) {\n                        component.styleUrls = undefined;\n                    }\n                }));\n            });\n            var fullyResolved = Promise.all(promises).then(function () { return componentDefResolved(type); });\n            componentResolved.push(fullyResolved);\n        });\n        clearResolutionOfComponentResourcesQueue();\n        return Promise.all(componentResolved).then(function () { return undefined; });\n    }\n    var componentResourceResolutionQueue = new Map();\n    // Track when existing ɵcmp for a Type is waiting on resources.\n    var componentDefPendingResolution = new Set();\n    function maybeQueueResolutionOfComponentResources(type, metadata) {\n        if (componentNeedsResolution(metadata)) {\n            componentResourceResolutionQueue.set(type, metadata);\n            componentDefPendingResolution.add(type);\n        }\n    }\n    function isComponentDefPendingResolution(type) {\n        return componentDefPendingResolution.has(type);\n    }\n    function componentNeedsResolution(component) {\n        return !!((component.templateUrl && !component.hasOwnProperty('template')) ||\n            component.styleUrls && component.styleUrls.length);\n    }\n    function clearResolutionOfComponentResourcesQueue() {\n        var old = componentResourceResolutionQueue;\n        componentResourceResolutionQueue = new Map();\n        return old;\n    }\n    function restoreComponentResolutionQueue(queue) {\n        componentDefPendingResolution.clear();\n        queue.forEach(function (_, type) { return componentDefPendingResolution.add(type); });\n        componentResourceResolutionQueue = queue;\n    }\n    function isComponentResourceResolutionQueueEmpty() {\n        return componentResourceResolutionQueue.size === 0;\n    }\n    function unwrapResponse(response) {\n        return typeof response == 'string' ? response : response.text();\n    }\n    function componentDefResolved(type) {\n        componentDefPendingResolution.delete(type);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Allocates the necessary amount of slots for host vars.\n     *\n     * @param count Amount of vars to be allocated\n     *\n     * @codeGenApi\n     */\n    function ɵɵallocHostVars(count) {\n        var lView = getLView();\n        var tView = lView[TVIEW];\n        if (!tView.firstCreatePass)\n            return;\n        queueHostBindingForCheck(tView, getCurrentDirectiveDef(), count);\n        prefillHostVars(tView, lView, count);\n    }\n    /**\n     * Stores host binding fn and number of host vars so it will be queued for binding refresh during\n     * CD.\n     */\n    function queueHostBindingForCheck(tView, def, hostVars) {\n        ngDevMode &&\n            assertEqual(tView.firstCreatePass, true, 'Should only be called in first create pass.');\n        var expando = tView.expandoInstructions;\n        var length = expando.length;\n        // Check whether a given `hostBindings` function already exists in expandoInstructions,\n        // which can happen in case directive definition was extended from base definition (as a part of\n        // the `InheritDefinitionFeature` logic). If we found the same `hostBindings` function in the\n        // list, we just increase the number of host vars associated with that function, but do not add it\n        // into the list again.\n        if (length >= 2 && expando[length - 2] === def.hostBindings) {\n            expando[length - 1] = expando[length - 1] + hostVars;\n        }\n        else {\n            expando.push(def.hostBindings, hostVars);\n        }\n    }\n    /**\n     * On the first template pass, we need to reserve space for host binding values\n     * after directives are matched (so all directives are saved, then bindings).\n     * Because we are updating the blueprint, we only need to do this once.\n     */\n    function prefillHostVars(tView, lView, totalHostVars) {\n        ngDevMode &&\n            assertEqual(tView.firstCreatePass, true, 'Should only be called in first create pass.');\n        for (var i = 0; i < totalHostVars; i++) {\n            lView.push(NO_CHANGE);\n            tView.blueprint.push(NO_CHANGE);\n            tView.data.push(null);\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var _symbolIterator = null;\n    function getSymbolIterator() {\n        if (!_symbolIterator) {\n            var Symbol_1 = _global['Symbol'];\n            if (Symbol_1 && Symbol_1.iterator) {\n                _symbolIterator = Symbol_1.iterator;\n            }\n            else {\n                // es6-shim specific logic\n                var keys = Object.getOwnPropertyNames(Map.prototype);\n                for (var i = 0; i < keys.length; ++i) {\n                    var key = keys[i];\n                    if (key !== 'entries' && key !== 'size' &&\n                        Map.prototype[key] === Map.prototype['entries']) {\n                        _symbolIterator = key;\n                    }\n                }\n            }\n        }\n        return _symbolIterator;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function isListLikeIterable(obj) {\n        if (!isJsObject(obj))\n            return false;\n        return Array.isArray(obj) ||\n            (!(obj instanceof Map) && // JS Map are iterables but return entries as [k, v]\n                getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop\n    }\n    function areIterablesEqual(a, b, comparator) {\n        var iterator1 = a[getSymbolIterator()]();\n        var iterator2 = b[getSymbolIterator()]();\n        while (true) {\n            var item1 = iterator1.next();\n            var item2 = iterator2.next();\n            if (item1.done && item2.done)\n                return true;\n            if (item1.done || item2.done)\n                return false;\n            if (!comparator(item1.value, item2.value))\n                return false;\n        }\n    }\n    function iterateListLike(obj, fn) {\n        if (Array.isArray(obj)) {\n            for (var i = 0; i < obj.length; i++) {\n                fn(obj[i]);\n            }\n        }\n        else {\n            var iterator = obj[getSymbolIterator()]();\n            var item = void 0;\n            while (!((item = iterator.next()).done)) {\n                fn(item.value);\n            }\n        }\n    }\n    function isJsObject(o) {\n        return o !== null && (typeof o === 'function' || typeof o === 'object');\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // JS has NaN !== NaN\n    function looseIdentical(a, b) {\n        return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);\n    }\n    function devModeEqual(a, b) {\n        var isListLikeIterableA = isListLikeIterable(a);\n        var isListLikeIterableB = isListLikeIterable(b);\n        if (isListLikeIterableA && isListLikeIterableB) {\n            return areIterablesEqual(a, b, devModeEqual);\n        }\n        else {\n            var isAObject = a && (typeof a === 'object' || typeof a === 'function');\n            var isBObject = b && (typeof b === 'object' || typeof b === 'function');\n            if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {\n                return true;\n            }\n            else {\n                return looseIdentical(a, b);\n            }\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function devModeEqual$1(a, b) {\n        var isListLikeIterableA = isListLikeIterable$1(a);\n        var isListLikeIterableB = isListLikeIterable$1(b);\n        if (isListLikeIterableA && isListLikeIterableB) {\n            return areIterablesEqual$1(a, b, devModeEqual$1);\n        }\n        else {\n            var isAObject = a && (typeof a === 'object' || typeof a === 'function');\n            var isBObject = b && (typeof b === 'object' || typeof b === 'function');\n            if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {\n                return true;\n            }\n            else {\n                return looseIdentical(a, b);\n            }\n        }\n    }\n    /**\n     * Indicates that the result of a {@link Pipe} transformation has changed even though the\n     * reference has not changed.\n     *\n     * Wrapped values are unwrapped automatically during the change detection, and the unwrapped value\n     * is stored.\n     *\n     * Example:\n     *\n     * ```\n     * if (this._latestValue === this._latestReturnedValue) {\n     *    return this._latestReturnedValue;\n     *  } else {\n     *    this._latestReturnedValue = this._latestValue;\n     *    return WrappedValue.wrap(this._latestValue); // this will force update\n     *  }\n     * ```\n     *\n     * @publicApi\n     */\n    var WrappedValue = /** @class */ (function () {\n        function WrappedValue(value) {\n            this.wrapped = value;\n        }\n        /** Creates a wrapped value. */\n        WrappedValue.wrap = function (value) { return new WrappedValue(value); };\n        /**\n         * Returns the underlying value of a wrapped value.\n         * Returns the given `value` when it is not wrapped.\n         **/\n        WrappedValue.unwrap = function (value) { return WrappedValue.isWrapped(value) ? value.wrapped : value; };\n        /** Returns true if `value` is a wrapped value. */\n        WrappedValue.isWrapped = function (value) { return value instanceof WrappedValue; };\n        return WrappedValue;\n    }());\n    function isListLikeIterable$1(obj) {\n        if (!isJsObject$1(obj))\n            return false;\n        return Array.isArray(obj) ||\n            (!(obj instanceof Map) && // JS Map are iterables but return entries as [k, v]\n                getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop\n    }\n    function areIterablesEqual$1(a, b, comparator) {\n        var iterator1 = a[getSymbolIterator()]();\n        var iterator2 = b[getSymbolIterator()]();\n        while (true) {\n            var item1 = iterator1.next();\n            var item2 = iterator2.next();\n            if (item1.done && item2.done)\n                return true;\n            if (item1.done || item2.done)\n                return false;\n            if (!comparator(item1.value, item2.value))\n                return false;\n        }\n    }\n    function iterateListLike$1(obj, fn) {\n        if (Array.isArray(obj)) {\n            for (var i = 0; i < obj.length; i++) {\n                fn(obj[i]);\n            }\n        }\n        else {\n            var iterator = obj[getSymbolIterator()]();\n            var item = void 0;\n            while (!((item = iterator.next()).done)) {\n                fn(item.value);\n            }\n        }\n    }\n    function isJsObject$1(o) {\n        return o !== null && (typeof o === 'function' || typeof o === 'object');\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // TODO(misko): consider inlining\n    /** Updates binding and returns the value. */\n    function updateBinding(lView, bindingIndex, value) {\n        return lView[bindingIndex] = value;\n    }\n    /** Gets the current binding value. */\n    function getBinding(lView, bindingIndex) {\n        ngDevMode && assertDataInRange(lView, bindingIndex);\n        ngDevMode &&\n            assertNotSame(lView[bindingIndex], NO_CHANGE, 'Stored value should never be NO_CHANGE.');\n        return lView[bindingIndex];\n    }\n    /** Updates binding if changed, then returns whether it was updated. */\n    function bindingUpdated(lView, bindingIndex, value) {\n        ngDevMode && assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');\n        ngDevMode &&\n            assertLessThan(bindingIndex, lView.length, \"Slot should have been initialized to NO_CHANGE\");\n        var oldValue = lView[bindingIndex];\n        if (Object.is(oldValue, value)) {\n            return false;\n        }\n        else {\n            if (ngDevMode && getCheckNoChangesMode()) {\n                // View engine didn't report undefined values as changed on the first checkNoChanges pass\n                // (before the change detection was run).\n                var oldValueToCompare = oldValue !== NO_CHANGE ? oldValue : undefined;\n                if (!devModeEqual$1(oldValueToCompare, value)) {\n                    var details = getExpressionChangedErrorDetails(lView, bindingIndex, oldValueToCompare, value);\n                    throwErrorIfNoChangesMode(oldValue === NO_CHANGE, details.oldValue, details.newValue, details.propName);\n                }\n            }\n            lView[bindingIndex] = value;\n            return true;\n        }\n    }\n    /** Updates 2 bindings if changed, then returns whether either was updated. */\n    function bindingUpdated2(lView, bindingIndex, exp1, exp2) {\n        var different = bindingUpdated(lView, bindingIndex, exp1);\n        return bindingUpdated(lView, bindingIndex + 1, exp2) || different;\n    }\n    /** Updates 3 bindings if changed, then returns whether any was updated. */\n    function bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) {\n        var different = bindingUpdated2(lView, bindingIndex, exp1, exp2);\n        return bindingUpdated(lView, bindingIndex + 2, exp3) || different;\n    }\n    /** Updates 4 bindings if changed, then returns whether any was updated. */\n    function bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) {\n        var different = bindingUpdated2(lView, bindingIndex, exp1, exp2);\n        return bindingUpdated2(lView, bindingIndex + 2, exp3, exp4) || different;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Updates the value of or removes a bound attribute on an Element.\n     *\n     * Used in the case of `[attr.title]=\"value\"`\n     *\n     * @param name name The name of the attribute.\n     * @param value value The attribute is removed when value is `null` or `undefined`.\n     *                  Otherwise the attribute value is set to the stringified value.\n     * @param sanitizer An optional function used to sanitize the value.\n     * @param namespace Optional namespace to use when setting the attribute.\n     *\n     * @codeGenApi\n     */\n    function ɵɵattribute(name, value, sanitizer, namespace) {\n        var lView = getLView();\n        var bindingIndex = nextBindingIndex();\n        if (bindingUpdated(lView, bindingIndex, value)) {\n            var nodeIndex = getSelectedIndex();\n            elementAttributeInternal(nodeIndex, name, value, lView, sanitizer, namespace);\n            ngDevMode &&\n                storePropertyBindingMetadata(lView[TVIEW].data, nodeIndex, 'attr.' + name, bindingIndex);\n        }\n        return ɵɵattribute;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Create interpolation bindings with a variable number of expressions.\n     *\n     * If there are 1 to 8 expressions `interpolation1()` to `interpolation8()` should be used instead.\n     * Those are faster because there is no need to create an array of expressions and iterate over it.\n     *\n     * `values`:\n     * - has static text at even indexes,\n     * - has evaluated expressions at odd indexes.\n     *\n     * Returns the concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n     */\n    function interpolationV(lView, values) {\n        ngDevMode && assertLessThan(2, values.length, 'should have at least 3 values');\n        ngDevMode && assertEqual(values.length % 2, 1, 'should have an odd number of values');\n        var isBindingUpdated = false;\n        var bindingIndex = getBindingIndex();\n        for (var i = 1; i < values.length; i += 2) {\n            // Check if bindings (odd indexes) have changed\n            isBindingUpdated = bindingUpdated(lView, bindingIndex++, values[i]) || isBindingUpdated;\n        }\n        setBindingIndex(bindingIndex);\n        if (!isBindingUpdated) {\n            return NO_CHANGE;\n        }\n        // Build the updated content\n        var content = values[0];\n        for (var i = 1; i < values.length; i += 2) {\n            content += renderStringify(values[i]) + values[i + 1];\n        }\n        return content;\n    }\n    /**\n     * Creates an interpolation binding with 1 expression.\n     *\n     * @param prefix static value used for concatenation only.\n     * @param v0 value checked for change.\n     * @param suffix static value used for concatenation only.\n     */\n    function interpolation1(lView, prefix, v0, suffix) {\n        var different = bindingUpdated(lView, nextBindingIndex(), v0);\n        return different ? prefix + renderStringify(v0) + suffix : NO_CHANGE;\n    }\n    /**\n     * Creates an interpolation binding with 2 expressions.\n     */\n    function interpolation2(lView, prefix, v0, i0, v1, suffix) {\n        var bindingIndex = getBindingIndex();\n        var different = bindingUpdated2(lView, bindingIndex, v0, v1);\n        incrementBindingIndex(2);\n        return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + suffix : NO_CHANGE;\n    }\n    /**\n     * Creates an interpolation binding with 3 expressions.\n     */\n    function interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix) {\n        var bindingIndex = getBindingIndex();\n        var different = bindingUpdated3(lView, bindingIndex, v0, v1, v2);\n        incrementBindingIndex(3);\n        return different ?\n            prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + suffix :\n            NO_CHANGE;\n    }\n    /**\n     * Create an interpolation binding with 4 expressions.\n     */\n    function interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\n        var bindingIndex = getBindingIndex();\n        var different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n        incrementBindingIndex(4);\n        return different ?\n            prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 +\n                renderStringify(v3) + suffix :\n            NO_CHANGE;\n    }\n    /**\n     * Creates an interpolation binding with 5 expressions.\n     */\n    function interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\n        var bindingIndex = getBindingIndex();\n        var different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n        different = bindingUpdated(lView, bindingIndex + 4, v4) || different;\n        incrementBindingIndex(5);\n        return different ?\n            prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 +\n                renderStringify(v3) + i3 + renderStringify(v4) + suffix :\n            NO_CHANGE;\n    }\n    /**\n     * Creates an interpolation binding with 6 expressions.\n     */\n    function interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\n        var bindingIndex = getBindingIndex();\n        var different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n        different = bindingUpdated2(lView, bindingIndex + 4, v4, v5) || different;\n        incrementBindingIndex(6);\n        return different ?\n            prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 +\n                renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + suffix :\n            NO_CHANGE;\n    }\n    /**\n     * Creates an interpolation binding with 7 expressions.\n     */\n    function interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\n        var bindingIndex = getBindingIndex();\n        var different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n        different = bindingUpdated3(lView, bindingIndex + 4, v4, v5, v6) || different;\n        incrementBindingIndex(7);\n        return different ?\n            prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 +\n                renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + i5 +\n                renderStringify(v6) + suffix :\n            NO_CHANGE;\n    }\n    /**\n     * Creates an interpolation binding with 8 expressions.\n     */\n    function interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\n        var bindingIndex = getBindingIndex();\n        var different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n        different = bindingUpdated4(lView, bindingIndex + 4, v4, v5, v6, v7) || different;\n        incrementBindingIndex(8);\n        return different ?\n            prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 +\n                renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + i5 +\n                renderStringify(v6) + i6 + renderStringify(v7) + suffix :\n            NO_CHANGE;\n    }\n\n    /**\n     *\n     * Update an interpolated attribute on an element with single bound value surrounded by text.\n     *\n     * Used when the value passed to a property has 1 interpolated value in it:\n     *\n     * ```html\n     * <div attr.title=\"prefix{{v0}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵattributeInterpolate1('title', 'prefix', v0, 'suffix');\n     * ```\n     *\n     * @param attrName The name of the attribute to update\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵattributeInterpolate1(attrName, prefix, v0, suffix, sanitizer, namespace) {\n        var lView = getLView();\n        var interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            var nodeIndex = getSelectedIndex();\n            elementAttributeInternal(nodeIndex, attrName, interpolatedValue, lView, sanitizer, namespace);\n            ngDevMode && storePropertyBindingMetadata(lView[TVIEW].data, nodeIndex, 'attr.' + attrName, getBindingIndex() - 1, prefix, suffix);\n        }\n        return ɵɵattributeInterpolate1;\n    }\n    /**\n     *\n     * Update an interpolated attribute on an element with 2 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 2 interpolated values in it:\n     *\n     * ```html\n     * <div attr.title=\"prefix{{v0}}-{{v1}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵattributeInterpolate2('title', 'prefix', v0, '-', v1, 'suffix');\n     * ```\n     *\n     * @param attrName The name of the attribute to update\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵattributeInterpolate2(attrName, prefix, v0, i0, v1, suffix, sanitizer, namespace) {\n        var lView = getLView();\n        var interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            var nodeIndex = getSelectedIndex();\n            elementAttributeInternal(nodeIndex, attrName, interpolatedValue, lView, sanitizer, namespace);\n            ngDevMode && storePropertyBindingMetadata(lView[TVIEW].data, nodeIndex, 'attr.' + attrName, getBindingIndex() - 2, prefix, i0, suffix);\n        }\n        return ɵɵattributeInterpolate2;\n    }\n    /**\n     *\n     * Update an interpolated attribute on an element with 3 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 3 interpolated values in it:\n     *\n     * ```html\n     * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵattributeInterpolate3(\n     * 'title', 'prefix', v0, '-', v1, '-', v2, 'suffix');\n     * ```\n     *\n     * @param attrName The name of the attribute to update\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵattributeInterpolate3(attrName, prefix, v0, i0, v1, i1, v2, suffix, sanitizer, namespace) {\n        var lView = getLView();\n        var interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            var nodeIndex = getSelectedIndex();\n            elementAttributeInternal(nodeIndex, attrName, interpolatedValue, lView, sanitizer, namespace);\n            ngDevMode && storePropertyBindingMetadata(lView[TVIEW].data, nodeIndex, 'attr.' + attrName, getBindingIndex() - 3, prefix, i0, i1, suffix);\n        }\n        return ɵɵattributeInterpolate3;\n    }\n    /**\n     *\n     * Update an interpolated attribute on an element with 4 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 4 interpolated values in it:\n     *\n     * ```html\n     * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵattributeInterpolate4(\n     * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n     * ```\n     *\n     * @param attrName The name of the attribute to update\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param i2 Static value used for concatenation only.\n     * @param v3 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵattributeInterpolate4(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, sanitizer, namespace) {\n        var lView = getLView();\n        var interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            var nodeIndex = getSelectedIndex();\n            elementAttributeInternal(nodeIndex, attrName, interpolatedValue, lView, sanitizer, namespace);\n            ngDevMode && storePropertyBindingMetadata(lView[TVIEW].data, nodeIndex, 'attr.' + attrName, getBindingIndex() - 4, prefix, i0, i1, i2, suffix);\n        }\n        return ɵɵattributeInterpolate4;\n    }\n    /**\n     *\n     * Update an interpolated attribute on an element with 5 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 5 interpolated values in it:\n     *\n     * ```html\n     * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵattributeInterpolate5(\n     * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n     * ```\n     *\n     * @param attrName The name of the attribute to update\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param i2 Static value used for concatenation only.\n     * @param v3 Value checked for change.\n     * @param i3 Static value used for concatenation only.\n     * @param v4 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵattributeInterpolate5(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, sanitizer, namespace) {\n        var lView = getLView();\n        var interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            var nodeIndex = getSelectedIndex();\n            elementAttributeInternal(nodeIndex, attrName, interpolatedValue, lView, sanitizer, namespace);\n            ngDevMode && storePropertyBindingMetadata(lView[TVIEW].data, nodeIndex, 'attr.' + attrName, getBindingIndex() - 5, prefix, i0, i1, i2, i3, suffix);\n        }\n        return ɵɵattributeInterpolate5;\n    }\n    /**\n     *\n     * Update an interpolated attribute on an element with 6 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 6 interpolated values in it:\n     *\n     * ```html\n     * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵattributeInterpolate6(\n     *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n     * ```\n     *\n     * @param attrName The name of the attribute to update\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param i2 Static value used for concatenation only.\n     * @param v3 Value checked for change.\n     * @param i3 Static value used for concatenation only.\n     * @param v4 Value checked for change.\n     * @param i4 Static value used for concatenation only.\n     * @param v5 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵattributeInterpolate6(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, sanitizer, namespace) {\n        var lView = getLView();\n        var interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            var nodeIndex = getSelectedIndex();\n            elementAttributeInternal(nodeIndex, attrName, interpolatedValue, lView, sanitizer, namespace);\n            ngDevMode && storePropertyBindingMetadata(lView[TVIEW].data, nodeIndex, 'attr.' + attrName, getBindingIndex() - 6, prefix, i0, i1, i2, i3, i4, suffix);\n        }\n        return ɵɵattributeInterpolate6;\n    }\n    /**\n     *\n     * Update an interpolated attribute on an element with 7 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 7 interpolated values in it:\n     *\n     * ```html\n     * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵattributeInterpolate7(\n     *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n     * ```\n     *\n     * @param attrName The name of the attribute to update\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param i2 Static value used for concatenation only.\n     * @param v3 Value checked for change.\n     * @param i3 Static value used for concatenation only.\n     * @param v4 Value checked for change.\n     * @param i4 Static value used for concatenation only.\n     * @param v5 Value checked for change.\n     * @param i5 Static value used for concatenation only.\n     * @param v6 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵattributeInterpolate7(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, sanitizer, namespace) {\n        var lView = getLView();\n        var interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            var nodeIndex = getSelectedIndex();\n            elementAttributeInternal(nodeIndex, attrName, interpolatedValue, lView, sanitizer, namespace);\n            ngDevMode && storePropertyBindingMetadata(lView[TVIEW].data, nodeIndex, 'attr.' + attrName, getBindingIndex() - 7, prefix, i0, i1, i2, i3, i4, i5, suffix);\n        }\n        return ɵɵattributeInterpolate7;\n    }\n    /**\n     *\n     * Update an interpolated attribute on an element with 8 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 8 interpolated values in it:\n     *\n     * ```html\n     * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵattributeInterpolate8(\n     *  'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n     * ```\n     *\n     * @param attrName The name of the attribute to update\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param i2 Static value used for concatenation only.\n     * @param v3 Value checked for change.\n     * @param i3 Static value used for concatenation only.\n     * @param v4 Value checked for change.\n     * @param i4 Static value used for concatenation only.\n     * @param v5 Value checked for change.\n     * @param i5 Static value used for concatenation only.\n     * @param v6 Value checked for change.\n     * @param i6 Static value used for concatenation only.\n     * @param v7 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵattributeInterpolate8(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, sanitizer, namespace) {\n        var lView = getLView();\n        var interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            var nodeIndex = getSelectedIndex();\n            elementAttributeInternal(nodeIndex, attrName, interpolatedValue, lView, sanitizer, namespace);\n            ngDevMode && storePropertyBindingMetadata(lView[TVIEW].data, nodeIndex, 'attr.' + attrName, getBindingIndex() - 8, prefix, i0, i1, i2, i3, i4, i5, i6, suffix);\n        }\n        return ɵɵattributeInterpolate8;\n    }\n    /**\n     * Update an interpolated attribute on an element with 8 or more bound values surrounded by text.\n     *\n     * Used when the number of interpolated values exceeds 7.\n     *\n     * ```html\n     * <div\n     *  title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵattributeInterpolateV(\n     *  'title', ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n     *  'suffix']);\n     * ```\n     *\n     * @param attrName The name of the attribute to update.\n     * @param values The a collection of values and the strings in-between those values, beginning with\n     * a string prefix and ending with a string suffix.\n     * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵattributeInterpolateV(attrName, values, sanitizer, namespace) {\n        var lView = getLView();\n        var interpolated = interpolationV(lView, values);\n        if (interpolated !== NO_CHANGE) {\n            var nodeIndex = getSelectedIndex();\n            elementAttributeInternal(nodeIndex, attrName, interpolated, lView, sanitizer, namespace);\n            if (ngDevMode) {\n                var interpolationInBetween = [values[0]]; // prefix\n                for (var i = 2; i < values.length; i += 2) {\n                    interpolationInBetween.push(values[i]);\n                }\n                storePropertyBindingMetadata.apply(void 0, __spread([lView[TVIEW].data, nodeIndex, 'attr.' + attrName,\n                    getBindingIndex() - interpolationInBetween.length + 1], interpolationInBetween));\n            }\n        }\n        return ɵɵattributeInterpolateV;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Synchronously perform change detection on a component (and possibly its sub-components).\n     *\n     * This function triggers change detection in a synchronous way on a component. There should\n     * be very little reason to call this function directly since a preferred way to do change\n     * detection is to {@link markDirty} the component and wait for the scheduler to call this method\n     * at some future point in time. This is because a single user action often results in many\n     * components being invalidated and calling change detection on each component synchronously\n     * would be inefficient. It is better to wait until all components are marked as dirty and\n     * then perform single change detection across all of the components\n     *\n     * @param component The component which the change detection should be performed on.\n     */\n    function detectChanges(component) {\n        var view = getComponentViewByInstance(component);\n        detectChangesInternal(view, component);\n    }\n    /**\n     * Mark the component as dirty (needing change detection).\n     *\n     * Marking a component dirty will schedule a change detection on this\n     * component at some point in the future. Marking an already dirty\n     * component as dirty is a noop. Only one outstanding change detection\n     * can be scheduled per component tree. (Two components bootstrapped with\n     * separate `renderComponent` will have separate schedulers)\n     *\n     * When the root component is bootstrapped with `renderComponent`, a scheduler\n     * can be provided.\n     *\n     * @param component Component to mark as dirty.\n     *\n     * @publicApi\n     */\n    function markDirty(component) {\n        ngDevMode && assertDefined(component, 'component');\n        var rootView = markViewDirty(getComponentViewByInstance(component));\n        ngDevMode && assertDefined(rootView[CONTEXT], 'rootContext should be defined');\n        scheduleTick(rootView[CONTEXT], 1 /* DetectChanges */);\n    }\n    /**\n     * Used to perform change detection on the whole application.\n     *\n     * This is equivalent to `detectChanges`, but invoked on root component. Additionally, `tick`\n     * executes lifecycle hooks and conditionally checks components based on their\n     * `ChangeDetectionStrategy` and dirtiness.\n     *\n     * The preferred way to trigger change detection is to call `markDirty`. `markDirty` internally\n     * schedules `tick` using a scheduler in order to coalesce multiple `markDirty` calls into a\n     * single change detection run. By default, the scheduler is `requestAnimationFrame`, but can\n     * be changed when calling `renderComponent` and providing the `scheduler` option.\n     */\n    function tick(component) {\n        var rootView = getRootView(component);\n        var rootContext = rootView[CONTEXT];\n        tickRootContext(rootContext);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Creates an LContainer for inline views, e.g.\n     *\n     * % if (showing) {\n     *   <div></div>\n     * % }\n     *\n     * @param index The index of the container in the data array\n     *\n     * @codeGenApi\n     */\n    function ɵɵcontainer(index) {\n        var lView = getLView();\n        var tNode = containerInternal(lView, index, null, null);\n        if (lView[TVIEW].firstCreatePass) {\n            tNode.tViews = [];\n        }\n        setIsNotParent();\n    }\n    function templateFirstCreatePass(index, tView, lView, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex) {\n        ngDevMode && assertFirstCreatePass(tView);\n        ngDevMode && ngDevMode.firstCreatePass++;\n        var tViewConsts = tView.consts;\n        // TODO(pk): refactor getOrCreateTNode to have the \"create\" only version\n        var tNode = getOrCreateTNode(tView, lView[T_HOST], index, 0 /* Container */, tagName || null, getConstant(tViewConsts, attrsIndex));\n        resolveDirectives(tView, lView, tNode, getConstant(tViewConsts, localRefsIndex));\n        registerPostOrderHooks(tView, tNode);\n        var embeddedTView = tNode.tViews = createTView(2 /* Embedded */, -1, templateFn, decls, vars, tView.directiveRegistry, tView.pipeRegistry, null, tView.schemas, tViewConsts);\n        var embeddedTViewNode = createTNode(tView, null, 2 /* View */, -1, null, null);\n        embeddedTViewNode.injectorIndex = tNode.injectorIndex;\n        embeddedTView.node = embeddedTViewNode;\n        if (tView.queries !== null) {\n            tView.queries.template(tView, tNode);\n            embeddedTView.queries = tView.queries.embeddedTView(tNode);\n        }\n        return tNode;\n    }\n    /**\n     * Creates an LContainer for an ng-template (dynamically-inserted view), e.g.\n     *\n     * <ng-template #foo>\n     *    <div></div>\n     * </ng-template>\n     *\n     * @param index The index of the container in the data array\n     * @param templateFn Inline template\n     * @param decls The number of nodes, local refs, and pipes for this template\n     * @param vars The number of bindings for this template\n     * @param tagName The name of the container element, if applicable\n     * @param attrsIndex Index of template attributes in the `consts` array.\n     * @param localRefs Index of the local references in the `consts` array.\n     * @param localRefExtractor A function which extracts local-refs values from the template.\n     *        Defaults to the current element associated with the local-ref.\n     *\n     * @codeGenApi\n     */\n    function ɵɵtemplate(index, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex, localRefExtractor) {\n        var lView = getLView();\n        var tView = lView[TVIEW];\n        var adjustedIndex = index + HEADER_OFFSET;\n        var tNode = tView.firstCreatePass ?\n            templateFirstCreatePass(index, tView, lView, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex) :\n            tView.data[adjustedIndex];\n        setPreviousOrParentTNode(tNode, false);\n        var comment = lView[RENDERER].createComment(ngDevMode ? 'container' : '');\n        appendChild(comment, tNode, lView);\n        attachPatchData(comment, lView);\n        addToViewTree(lView, lView[adjustedIndex] = createLContainer(comment, lView, comment, tNode));\n        if (isDirectiveHost(tNode)) {\n            createDirectivesInstances(tView, lView, tNode);\n        }\n        if (localRefsIndex != null) {\n            saveResolvedLocalsInData(lView, tNode, localRefExtractor);\n        }\n    }\n    /**\n     * Sets a container up to receive views.\n     *\n     * @param index The index of the container in the data array\n     *\n     * @codeGenApi\n     */\n    function ɵɵcontainerRefreshStart(index) {\n        var lView = getLView();\n        var tView = lView[TVIEW];\n        var previousOrParentTNode = load(tView.data, index);\n        ngDevMode && assertNodeType(previousOrParentTNode, 0 /* Container */);\n        setPreviousOrParentTNode(previousOrParentTNode, true);\n        lView[index + HEADER_OFFSET][ACTIVE_INDEX] = 0;\n        // We need to execute init hooks here so ngOnInit hooks are called in top level views\n        // before they are called in embedded views (for backwards compatibility).\n        if (!getCheckNoChangesMode()) {\n            var hooksInitPhaseCompleted = (lView[FLAGS] & 3 /* InitPhaseStateMask */) === 3 /* InitPhaseCompleted */;\n            if (hooksInitPhaseCompleted) {\n                var preOrderCheckHooks = tView.preOrderCheckHooks;\n                if (preOrderCheckHooks !== null) {\n                    executeCheckHooks(lView, preOrderCheckHooks, null);\n                }\n            }\n            else {\n                var preOrderHooks = tView.preOrderHooks;\n                if (preOrderHooks !== null) {\n                    executeInitAndCheckHooks(lView, preOrderHooks, 0 /* OnInitHooksToBeRun */, null);\n                }\n                incrementInitPhaseFlags(lView, 0 /* OnInitHooksToBeRun */);\n            }\n        }\n    }\n    /**\n     * Marks the end of the LContainer.\n     *\n     * Marking the end of LContainer is the time when to child views get inserted or removed.\n     *\n     * @codeGenApi\n     */\n    function ɵɵcontainerRefreshEnd() {\n        var previousOrParentTNode = getPreviousOrParentTNode();\n        if (getIsParent()) {\n            setIsNotParent();\n        }\n        else {\n            ngDevMode && assertNodeType(previousOrParentTNode, 2 /* View */);\n            ngDevMode && assertHasParent(previousOrParentTNode);\n            previousOrParentTNode = previousOrParentTNode.parent;\n            setPreviousOrParentTNode(previousOrParentTNode, false);\n        }\n        ngDevMode && assertNodeType(previousOrParentTNode, 0 /* Container */);\n        var lContainer = getLView()[previousOrParentTNode.index];\n        var nextIndex = getLContainerActiveIndex(lContainer);\n        // remove extra views at the end of the container\n        while (nextIndex < lContainer.length - CONTAINER_HEADER_OFFSET) {\n            removeView(lContainer, nextIndex);\n        }\n    }\n    function containerInternal(lView, nodeIndex, tagName, attrs) {\n        ngDevMode && assertEqual(getBindingIndex(), lView[TVIEW].bindingStartIndex, 'container nodes should be created before any bindings');\n        var adjustedIndex = nodeIndex + HEADER_OFFSET;\n        ngDevMode && assertDataInRange(lView, nodeIndex + HEADER_OFFSET);\n        ngDevMode && ngDevMode.rendererCreateComment++;\n        var comment = lView[adjustedIndex] =\n            lView[RENDERER].createComment(ngDevMode ? 'container' : '');\n        var tNode = getOrCreateTNode(lView[TVIEW], lView[T_HOST], nodeIndex, 0 /* Container */, tagName, attrs);\n        var lContainer = lView[adjustedIndex] = createLContainer(comment, lView, comment, tNode);\n        appendChild(comment, tNode, lView);\n        attachPatchData(comment, lView);\n        // Containers are added to the current view tree instead of their embedded views\n        // because views can be removed and re-inserted.\n        addToViewTree(lView, lContainer);\n        ngDevMode && assertNodeType(getPreviousOrParentTNode(), 0 /* Container */);\n        return tNode;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Store a value in the `data` at a given `index`. */\n    function store(index, value) {\n        var lView = getLView();\n        var tView = lView[TVIEW];\n        // We don't store any static data for local variables, so the first time\n        // we see the template, we should store as null to avoid a sparse array\n        var adjustedIndex = index + HEADER_OFFSET;\n        if (adjustedIndex >= tView.data.length) {\n            tView.data[adjustedIndex] = null;\n            tView.blueprint[adjustedIndex] = null;\n        }\n        lView[adjustedIndex] = value;\n    }\n    /**\n     * Retrieves a local reference from the current contextViewData.\n     *\n     * If the reference to retrieve is in a parent view, this instruction is used in conjunction\n     * with a nextContext() call, which walks up the tree and updates the contextViewData instance.\n     *\n     * @param index The index of the local ref in contextViewData.\n     *\n     * @codeGenApi\n     */\n    function ɵɵreference(index) {\n        var contextLView = getContextLView();\n        return load(contextLView, index);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function ɵɵdirectiveInject(token, flags) {\n        if (flags === void 0) { flags = exports.InjectFlags.Default; }\n        var lView = getLView();\n        // Fall back to inject() if view hasn't been created. This situation can happen in tests\n        // if inject utilities are used before bootstrapping.\n        if (lView == null)\n            return ɵɵinject(token, flags);\n        var tNode = getPreviousOrParentTNode();\n        return getOrCreateInjectable(tNode, lView, resolveForwardRef(token), flags);\n    }\n    /**\n     * Facade for the attribute injection from DI.\n     *\n     * @codeGenApi\n     */\n    function ɵɵinjectAttribute(attrNameToInject) {\n        return injectAttributeImpl(getPreviousOrParentTNode(), attrNameToInject);\n    }\n    /**\n     * Throws an error indicating that a factory function could not be generated by the compiler for a\n     * particular class.\n     *\n     * This instruction allows the actual error message to be optimized away when ngDevMode is turned\n     * off, saving bytes of generated code while still providing a good experience in dev mode.\n     *\n     * The name of the class is not mentioned here, but will be in the generated factory function name\n     * and thus in the stack trace.\n     *\n     * @codeGenApi\n     */\n    function ɵɵinvalidFactory() {\n        var msg = ngDevMode ? \"This constructor was not compatible with Dependency Injection.\" : 'invalid';\n        throw new Error(msg);\n    }\n\n    /**\n     * --------\n     *\n     * This file contains the core logic for how styling instructions are processed in Angular.\n     *\n     * To learn more about the algorithm see `TStylingContext`.\n     *\n     * --------\n     */\n    /**\n     * Sets the current style sanitizer function which will then be used\n     * within all follow-up prop and map-based style binding instructions\n     * for the given element.\n     *\n     * Note that once styling has been applied to the element (i.e. once\n     * `advance(n)` is executed or the hostBindings/template function exits)\n     * then the active `sanitizerFn` will be set to `null`. This means that\n     * once styling is applied to another element then a another call to\n     * `styleSanitizer` will need to be made.\n     *\n     * @param sanitizerFn The sanitization function that will be used to\n     *       process style prop/value entries.\n     *\n     * @codeGenApi\n     */\n    function ɵɵstyleSanitizer(sanitizer) {\n        setCurrentStyleSanitizer(sanitizer);\n    }\n    /**\n     * Update a style binding on an element with the provided value.\n     *\n     * If the style value is falsy then it will be removed from the element\n     * (or assigned a different value depending if there are any styles placed\n     * on the element with `styleMap` or any static styles that are\n     * present from when the element was created with `styling`).\n     *\n     * Note that the styling element is updated as part of `stylingApply`.\n     *\n     * @param prop A valid CSS property.\n     * @param value New value to write (`null` or an empty string to remove).\n     * @param suffix Optional suffix. Used with scalar values to add unit such as `px`.\n     *        Note that when a suffix is provided then the underlying sanitizer will\n     *        be ignored.\n     *\n     * Note that this will apply the provided style value to the host element if this function is called\n     * within a host binding function.\n     *\n     * @codeGenApi\n     */\n    function ɵɵstyleProp(prop, value, suffix) {\n        stylePropInternal(getSelectedIndex(), prop, value, suffix);\n        return ɵɵstyleProp;\n    }\n    /**\n     * Internal function for applying a single style to an element.\n     *\n     * The reason why this function has been separated from `ɵɵstyleProp` is because\n     * it is also called from `ɵɵstylePropInterpolate`.\n     */\n    function stylePropInternal(elementIndex, prop, value, suffix) {\n        // if a value is interpolated then it may render a `NO_CHANGE` value.\n        // in this case we do not need to do anything, but the binding index\n        // still needs to be incremented because all styling binding values\n        // are stored inside of the lView.\n        var bindingIndex = nextBindingIndex();\n        var lView = getLView();\n        var tNode = getTNode(elementIndex, lView);\n        var firstUpdatePass = lView[TVIEW].firstUpdatePass;\n        // we check for this in the instruction code so that the context can be notified\n        // about prop or map bindings so that the direct apply check can decide earlier\n        // if it allows for context resolution to be bypassed.\n        if (firstUpdatePass) {\n            patchConfig(tNode, 32768 /* hasStylePropBindings */);\n            patchHostStylingFlag(tNode, isHostStyling(), false);\n        }\n        var updated = stylingProp(tNode, firstUpdatePass, lView, bindingIndex, prop, resolveStylePropValue(value, suffix), false);\n        if (ngDevMode) {\n            ngDevMode.styleProp++;\n            if (updated) {\n                ngDevMode.stylePropCacheMiss++;\n            }\n        }\n    }\n    /**\n     * Update a class binding on an element with the provided value.\n     *\n     * This instruction is meant to handle the `[class.foo]=\"exp\"` case and,\n     * therefore, the class binding itself must already be allocated using\n     * `styling` within the creation block.\n     *\n     * @param prop A valid CSS class (only one).\n     * @param value A true/false value which will turn the class on or off.\n     *\n     * Note that this will apply the provided class value to the host element if this function\n     * is called within a host binding function.\n     *\n     * @codeGenApi\n     */\n    function ɵɵclassProp(className, value) {\n        // if a value is interpolated then it may render a `NO_CHANGE` value.\n        // in this case we do not need to do anything, but the binding index\n        // still needs to be incremented because all styling binding values\n        // are stored inside of the lView.\n        var bindingIndex = nextBindingIndex();\n        var lView = getLView();\n        var elementIndex = getSelectedIndex();\n        var tNode = getTNode(elementIndex, lView);\n        var firstUpdatePass = lView[TVIEW].firstUpdatePass;\n        // we check for this in the instruction code so that the context can be notified\n        // about prop or map bindings so that the direct apply check can decide earlier\n        // if it allows for context resolution to be bypassed.\n        if (firstUpdatePass) {\n            patchConfig(tNode, 1024 /* hasClassPropBindings */);\n            patchHostStylingFlag(tNode, isHostStyling(), true);\n        }\n        var updated = stylingProp(tNode, firstUpdatePass, lView, bindingIndex, className, value, true);\n        if (ngDevMode) {\n            ngDevMode.classProp++;\n            if (updated) {\n                ngDevMode.classPropCacheMiss++;\n            }\n        }\n        return ɵɵclassProp;\n    }\n    /**\n     * Shared function used to update a prop-based styling binding for an element.\n     *\n     * Depending on the state of the `tNode.styles` styles context, the style/prop\n     * value may be applied directly to the element instead of being processed\n     * through the context. The reason why this occurs is for performance and fully\n     * depends on the state of the context (i.e. whether or not there are duplicate\n     * bindings or whether or not there are map-based bindings and property bindings\n     * present together).\n     */\n    function stylingProp(tNode, firstUpdatePass, lView, bindingIndex, prop, value, isClassBased) {\n        var updated = false;\n        var native = getNativeByTNode(tNode, lView);\n        var context = isClassBased ? getClassesContext(tNode) : getStylesContext(tNode);\n        var sanitizer = isClassBased ? null : getCurrentStyleSanitizer();\n        // [style.prop] and [class.name] bindings do not use `bind()` and will\n        // therefore manage accessing and updating the new value in the lView directly.\n        // For this reason, the checkNoChanges situation must also be handled here\n        // as well.\n        if (ngDevMode && getCheckNoChangesMode()) {\n            var oldValue = getValue(lView, bindingIndex);\n            if (hasValueChangedUnwrapSafeValue(oldValue, value)) {\n                var field = isClassBased ? \"class.\" + prop : \"style.\" + prop;\n                throwErrorIfNoChangesMode(false, oldValue, value, field);\n            }\n        }\n        // Direct Apply Case: bypass context resolution and apply the\n        // style/class value directly to the element\n        if (allowDirectStyling(tNode, isClassBased, firstUpdatePass)) {\n            var sanitizerToUse = isClassBased ? null : sanitizer;\n            var renderer = getRenderer(tNode, lView);\n            updated = applyStylingValueDirectly(renderer, context, tNode, native, lView, bindingIndex, prop, value, isClassBased, sanitizerToUse);\n            if (sanitizerToUse) {\n                // it's important we remove the current style sanitizer once the\n                // element exits, otherwise it will be used by the next styling\n                // instructions for the next element.\n                setElementExitFn(stylingApply);\n            }\n        }\n        else {\n            // Context Resolution (or first update) Case: save the value\n            // and defer to the context to flush and apply the style/class binding\n            // value to the element.\n            var directiveIndex = getActiveDirectiveId();\n            if (isClassBased) {\n                updated = updateClassViaContext(context, tNode, lView, native, directiveIndex, prop, bindingIndex, value, false, firstUpdatePass);\n            }\n            else {\n                updated = updateStyleViaContext(context, tNode, lView, native, directiveIndex, prop, bindingIndex, value, sanitizer, false, firstUpdatePass);\n            }\n            setElementExitFn(stylingApply);\n        }\n        return updated;\n    }\n    /**\n     * Update style bindings using an object literal on an element.\n     *\n     * This instruction is meant to apply styling via the `[style]=\"exp\"` template bindings.\n     * When styles are applied to the element they will then be updated with respect to\n     * any styles/classes set via `styleProp`. If any styles are set to falsy\n     * then they will be removed from the element.\n     *\n     * Note that the styling instruction will not be applied until `stylingApply` is called.\n     *\n     * @param styles A key/value style map of the styles that will be applied to the given element.\n     *        Any missing styles (that have already been applied to the element beforehand) will be\n     *        removed (unset) from the element's styling.\n     *\n     * Note that this will apply the provided styleMap value to the host element if this function\n     * is called within a host binding.\n     *\n     * @codeGenApi\n     */\n    function ɵɵstyleMap(styles) {\n        var index = getSelectedIndex();\n        var lView = getLView();\n        var tNode = getTNode(index, lView);\n        var firstUpdatePass = lView[TVIEW].firstUpdatePass;\n        var context = getStylesContext(tNode);\n        var hasDirectiveInput = hasStyleInput(tNode);\n        // if a value is interpolated then it may render a `NO_CHANGE` value.\n        // in this case we do not need to do anything, but the binding index\n        // still needs to be incremented because all styling binding values\n        // are stored inside of the lView.\n        var bindingIndex = incrementBindingIndex(2);\n        var hostBindingsMode = isHostStyling();\n        // inputs are only evaluated from a template binding into a directive, therefore,\n        // there should not be a situation where a directive host bindings function\n        // evaluates the inputs (this should only happen in the template function)\n        if (!hostBindingsMode && hasDirectiveInput && styles !== NO_CHANGE) {\n            updateDirectiveInputValue(context, lView, tNode, bindingIndex, styles, false, firstUpdatePass);\n            styles = NO_CHANGE;\n        }\n        // we check for this in the instruction code so that the context can be notified\n        // about prop or map bindings so that the direct apply check can decide earlier\n        // if it allows for context resolution to be bypassed.\n        if (firstUpdatePass) {\n            patchConfig(tNode, 16384 /* hasStyleMapBindings */);\n            patchHostStylingFlag(tNode, isHostStyling(), false);\n        }\n        stylingMap(context, tNode, firstUpdatePass, lView, bindingIndex, styles, false, hasDirectiveInput);\n    }\n    /**\n     * Update class bindings using an object literal or class-string on an element.\n     *\n     * This instruction is meant to apply styling via the `[class]=\"exp\"` template bindings.\n     * When classes are applied to the element they will then be updated with\n     * respect to any styles/classes set via `classProp`. If any\n     * classes are set to falsy then they will be removed from the element.\n     *\n     * Note that the styling instruction will not be applied until `stylingApply` is called.\n     * Note that this will the provided classMap value to the host element if this function is called\n     * within a host binding.\n     *\n     * @param classes A key/value map or string of CSS classes that will be added to the\n     *        given element. Any missing classes (that have already been applied to the element\n     *        beforehand) will be removed (unset) from the element's list of CSS classes.\n     *\n     * @codeGenApi\n     */\n    function ɵɵclassMap(classes) {\n        classMapInternal(getSelectedIndex(), classes);\n    }\n    /**\n     * Internal function for applying a class string or key/value map of classes to an element.\n     *\n     * The reason why this function has been separated from `ɵɵclassMap` is because\n     * it is also called from `ɵɵclassMapInterpolate`.\n     */\n    function classMapInternal(elementIndex, classes) {\n        var lView = getLView();\n        var tNode = getTNode(elementIndex, lView);\n        var firstUpdatePass = lView[TVIEW].firstUpdatePass;\n        var context = getClassesContext(tNode);\n        var hasDirectiveInput = hasClassInput(tNode);\n        // if a value is interpolated then it may render a `NO_CHANGE` value.\n        // in this case we do not need to do anything, but the binding index\n        // still needs to be incremented because all styling binding values\n        // are stored inside of the lView.\n        var bindingIndex = incrementBindingIndex(2);\n        var hostBindingsMode = isHostStyling();\n        // inputs are only evaluated from a template binding into a directive, therefore,\n        // there should not be a situation where a directive host bindings function\n        // evaluates the inputs (this should only happen in the template function)\n        if (!hostBindingsMode && hasDirectiveInput && classes !== NO_CHANGE) {\n            updateDirectiveInputValue(context, lView, tNode, bindingIndex, classes, true, firstUpdatePass);\n            classes = NO_CHANGE;\n        }\n        // we check for this in the instruction code so that the context can be notified\n        // about prop or map bindings so that the direct apply check can decide earlier\n        // if it allows for context resolution to be bypassed.\n        if (firstUpdatePass) {\n            patchConfig(tNode, 512 /* hasClassMapBindings */);\n            patchHostStylingFlag(tNode, isHostStyling(), true);\n        }\n        stylingMap(context, tNode, firstUpdatePass, lView, bindingIndex, classes, true, hasDirectiveInput);\n    }\n    /**\n     * Shared function used to update a map-based styling binding for an element.\n     *\n     * When this function is called it will activate support for `[style]` and\n     * `[class]` bindings in Angular.\n     */\n    function stylingMap(context, tNode, firstUpdatePass, lView, bindingIndex, value, isClassBased, hasDirectiveInput) {\n        var directiveIndex = getActiveDirectiveId();\n        var native = getNativeByTNode(tNode, lView);\n        var oldValue = getValue(lView, bindingIndex);\n        var sanitizer = getCurrentStyleSanitizer();\n        var valueHasChanged = hasValueChanged(oldValue, value);\n        // [style] and [class] bindings do not use `bind()` and will therefore\n        // manage accessing and updating the new value in the lView directly.\n        // For this reason, the checkNoChanges situation must also be handled here\n        // as well.\n        if (ngDevMode && valueHasChanged && getCheckNoChangesMode()) {\n            // check if the value is a StylingMapArray, in which case take the first value (which stores raw\n            // value) from the array\n            var previousValue = isStylingMapArray(oldValue) ? oldValue[0 /* RawValuePosition */] : oldValue;\n            throwErrorIfNoChangesMode(false, previousValue, value);\n        }\n        // Direct Apply Case: bypass context resolution and apply the\n        // style/class map values directly to the element\n        if (allowDirectStyling(tNode, isClassBased, firstUpdatePass)) {\n            var sanitizerToUse = isClassBased ? null : sanitizer;\n            var renderer = getRenderer(tNode, lView);\n            applyStylingMapDirectly(renderer, context, tNode, native, lView, bindingIndex, value, isClassBased, sanitizerToUse, valueHasChanged, hasDirectiveInput);\n            if (sanitizerToUse) {\n                // it's important we remove the current style sanitizer once the\n                // element exits, otherwise it will be used by the next styling\n                // instructions for the next element.\n                setElementExitFn(stylingApply);\n            }\n        }\n        else {\n            var stylingMapArr = value === NO_CHANGE ? NO_CHANGE : normalizeIntoStylingMap(oldValue, value, !isClassBased);\n            activateStylingMapFeature();\n            // Context Resolution (or first update) Case: save the map value\n            // and defer to the context to flush and apply the style/class binding\n            // value to the element.\n            if (isClassBased) {\n                updateClassViaContext(context, tNode, lView, native, directiveIndex, null, bindingIndex, stylingMapArr, valueHasChanged, firstUpdatePass);\n            }\n            else {\n                updateStyleViaContext(context, tNode, lView, native, directiveIndex, null, bindingIndex, stylingMapArr, sanitizer, valueHasChanged, firstUpdatePass);\n            }\n            setElementExitFn(stylingApply);\n        }\n        if (ngDevMode) {\n            isClassBased ? ngDevMode.classMap : ngDevMode.styleMap++;\n            if (valueHasChanged) {\n                isClassBased ? ngDevMode.classMapCacheMiss : ngDevMode.styleMapCacheMiss++;\n            }\n        }\n    }\n    /**\n     * Writes a value to a directive's `style` or `class` input binding (if it has changed).\n     *\n     * If a directive has a `@Input` binding that is set on `style` or `class` then that value\n     * will take priority over the underlying style/class styling bindings. This value will\n     * be updated for the binding each time during change detection.\n     *\n     * When this occurs this function will attempt to write the value to the input binding\n     * depending on the following situations:\n     *\n     * - If `oldValue !== newValue`\n     * - If `newValue` is `null` (but this is skipped if it is during the first update pass)\n     */\n    function updateDirectiveInputValue(context, lView, tNode, bindingIndex, newValue, isClassBased, firstUpdatePass) {\n        var oldValue = getValue(lView, bindingIndex);\n        if (hasValueChanged(oldValue, newValue)) {\n            // even if the value has changed we may not want to emit it to the\n            // directive input(s) in the event that it is falsy during the\n            // first update pass.\n            if (isStylingValueDefined(newValue) || !firstUpdatePass) {\n                var inputName = isClassBased ? selectClassBasedInputName(tNode.inputs) : 'style';\n                var inputs = tNode.inputs[inputName];\n                var initialValue = getInitialStylingValue(context);\n                var value = normalizeStylingDirectiveInputValue(initialValue, newValue, isClassBased);\n                setInputsForProperty(lView, inputs, inputName, value);\n                setElementExitFn(stylingApply);\n            }\n            setValue(lView, bindingIndex, newValue);\n        }\n    }\n    /**\n     * Returns the appropriate directive input value for `style` or `class`.\n     *\n     * Earlier versions of Angular expect a binding value to be passed into directive code\n     * exactly as it is unless there is a static value present (in which case both values\n     * will be stringified and concatenated).\n     */\n    function normalizeStylingDirectiveInputValue(initialValue, bindingValue, isClassBased) {\n        var value = bindingValue;\n        // we only concat values if there is an initial value, otherwise we return the value as is.\n        // Note that this is to satisfy backwards-compatibility in Angular.\n        if (initialValue.length) {\n            if (isClassBased) {\n                value = concatString(initialValue, forceClassesAsString(bindingValue));\n            }\n            else {\n                value = concatString(initialValue, forceStylesAsString(bindingValue, true), ';');\n            }\n        }\n        return value;\n    }\n    /**\n     * Flushes all styling code to the element.\n     *\n     * This function is designed to be scheduled from any of the four styling instructions\n     * in this file. When called it will flush all style and class bindings to the element\n     * via the context resolution algorithm.\n     */\n    function stylingApply() {\n        var lView = getLView();\n        var tView = lView[TVIEW];\n        var elementIndex = getSelectedIndex();\n        var tNode = getTNode(elementIndex, lView);\n        var native = getNativeByTNode(tNode, lView);\n        var directiveIndex = getActiveDirectiveId();\n        var renderer = getRenderer(tNode, lView);\n        var sanitizer = getCurrentStyleSanitizer();\n        var classesContext = isStylingContext(tNode.classes) ? tNode.classes : null;\n        var stylesContext = isStylingContext(tNode.styles) ? tNode.styles : null;\n        flushStyling(renderer, lView, tNode, classesContext, stylesContext, native, directiveIndex, sanitizer, tView.firstUpdatePass);\n        resetCurrentStyleSanitizer();\n    }\n    function getRenderer(tNode, lView) {\n        return tNode.type === 3 /* Element */ ? lView[RENDERER] : null;\n    }\n    /**\n     * Searches and assigns provided all static style/class entries (found in the `attrs` value)\n     * and registers them in their respective styling contexts.\n     */\n    function registerInitialStylingOnTNode(tNode, attrs, startIndex) {\n        var hasAdditionalInitialStyling = false;\n        var styles = getStylingMapArray(tNode.styles);\n        var classes = getStylingMapArray(tNode.classes);\n        var mode = -1;\n        for (var i = startIndex; i < attrs.length; i++) {\n            var attr = attrs[i];\n            if (typeof attr == 'number') {\n                mode = attr;\n            }\n            else if (mode == 1 /* Classes */) {\n                classes = classes || allocStylingMapArray(null);\n                addItemToStylingMap(classes, attr, true);\n                hasAdditionalInitialStyling = true;\n            }\n            else if (mode == 2 /* Styles */) {\n                var value = attrs[++i];\n                styles = styles || allocStylingMapArray(null);\n                addItemToStylingMap(styles, attr, value);\n                hasAdditionalInitialStyling = true;\n            }\n        }\n        if (classes && classes.length > 1 /* ValuesStartPosition */) {\n            if (!tNode.classes) {\n                tNode.classes = classes;\n            }\n            updateRawValueOnContext(tNode.classes, stylingMapToString(classes, true));\n        }\n        if (styles && styles.length > 1 /* ValuesStartPosition */) {\n            if (!tNode.styles) {\n                tNode.styles = styles;\n            }\n            updateRawValueOnContext(tNode.styles, stylingMapToString(styles, false));\n        }\n        if (hasAdditionalInitialStyling) {\n            tNode.flags |= 256 /* hasInitialStyling */;\n        }\n        return hasAdditionalInitialStyling;\n    }\n    function updateRawValueOnContext(context, value) {\n        var stylingMapArr = getStylingMapArray(context);\n        stylingMapArr[0 /* RawValuePosition */] = value;\n    }\n    function getStylesContext(tNode) {\n        return getContext(tNode, false);\n    }\n    function getClassesContext(tNode) {\n        return getContext(tNode, true);\n    }\n    /**\n     * Returns/instantiates a styling context from/to a `tNode` instance.\n     */\n    function getContext(tNode, isClassBased) {\n        var context = isClassBased ? tNode.classes : tNode.styles;\n        if (!isStylingContext(context)) {\n            var hasDirectives = isDirectiveHost(tNode);\n            context = allocTStylingContext(context, hasDirectives);\n            if (ngDevMode) {\n                attachStylingDebugObject(context, tNode, isClassBased);\n            }\n            if (isClassBased) {\n                tNode.classes = context;\n            }\n            else {\n                tNode.styles = context;\n            }\n        }\n        return context;\n    }\n    function resolveStylePropValue(value, suffix) {\n        if (value === NO_CHANGE)\n            return value;\n        var resolvedValue = null;\n        if (isStylingValueDefined(value)) {\n            if (suffix) {\n                // when a suffix is applied then it will bypass\n                // sanitization entirely (b/c a new string is created)\n                resolvedValue = renderStringify(value) + suffix;\n            }\n            else {\n                // sanitization happens by dealing with a string value\n                // this means that the string value will be passed through\n                // into the style rendering later (which is where the value\n                // will be sanitized before it is applied)\n                resolvedValue = value;\n            }\n        }\n        return resolvedValue;\n    }\n    /**\n     * Whether or not the style/class binding being applied was executed within a host bindings\n     * function.\n     */\n    function isHostStyling() {\n        return isHostStylingActive(getActiveDirectiveId());\n    }\n    function patchHostStylingFlag(tNode, hostBindingsMode, isClassBased) {\n        var flag = hostBindingsMode ?\n            isClassBased ? 4096 /* hasHostClassBindings */ : 131072 /* hasHostStyleBindings */ :\n            isClassBased ? 2048 /* hasTemplateClassBindings */ : 65536 /* hasTemplateStyleBindings */;\n        patchConfig(tNode, flag);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function elementStartFirstCreatePass(index, tView, lView, native, name, attrsIndex, localRefsIndex) {\n        ngDevMode && ngDevMode.firstCreatePass++;\n        var tViewConsts = tView.consts;\n        var attrs = getConstant(tViewConsts, attrsIndex);\n        var tNode = getOrCreateTNode(tView, lView[T_HOST], index, 3 /* Element */, name, attrs);\n        if (attrs !== null) {\n            registerInitialStylingOnTNode(tNode, attrs, 0);\n        }\n        var hasDirectives = resolveDirectives(tView, lView, tNode, getConstant(tViewConsts, localRefsIndex));\n        ngDevMode && warnAboutUnknownElement(lView, native, tNode, hasDirectives);\n        if (tView.queries !== null) {\n            tView.queries.elementStart(tView, tNode);\n        }\n        return tNode;\n    }\n    /**\n     * Create DOM element. The instruction must later be followed by `elementEnd()` call.\n     *\n     * @param index Index of the element in the LView array\n     * @param name Name of the DOM Node\n     * @param attrsIndex Index of the element's attributes in the `consts` array.\n     * @param localRefsIndex Index of the element's local references in the `consts` array.\n     *\n     * Attributes and localRefs are passed as an array of strings where elements with an even index\n     * hold an attribute name and elements with an odd index hold an attribute value, ex.:\n     * ['id', 'warning5', 'class', 'alert']\n     *\n     * @codeGenApi\n     */\n    function ɵɵelementStart(index, name, attrsIndex, localRefsIndex) {\n        var lView = getLView();\n        var tView = lView[TVIEW];\n        var adjustedIndex = HEADER_OFFSET + index;\n        ngDevMode && assertEqual(getBindingIndex(), tView.bindingStartIndex, 'elements should be created before any bindings');\n        ngDevMode && ngDevMode.rendererCreateElement++;\n        ngDevMode && assertDataInRange(lView, adjustedIndex);\n        var renderer = lView[RENDERER];\n        var native = lView[adjustedIndex] = elementCreate(name, renderer, getNamespace());\n        var tNode = tView.firstCreatePass ?\n            elementStartFirstCreatePass(index, tView, lView, native, name, attrsIndex, localRefsIndex) :\n            tView.data[adjustedIndex];\n        setPreviousOrParentTNode(tNode, true);\n        var attrs = tNode.attrs;\n        if (attrs != null) {\n            setUpAttributes(renderer, native, attrs);\n        }\n        if ((tNode.flags & 256 /* hasInitialStyling */) === 256 /* hasInitialStyling */) {\n            renderInitialStyling(renderer, native, tNode, false);\n        }\n        appendChild(native, tNode, lView);\n        // any immediate children of a component or template container must be pre-emptively\n        // monkey-patched with the component view data so that the element can be inspected\n        // later on using any element discovery utility methods (see `element_discovery.ts`)\n        if (getElementDepthCount() === 0) {\n            attachPatchData(native, lView);\n        }\n        increaseElementDepthCount();\n        if (isDirectiveHost(tNode)) {\n            createDirectivesInstances(tView, lView, tNode);\n            executeContentQueries(tView, tNode, lView);\n        }\n        if (localRefsIndex != null) {\n            saveResolvedLocalsInData(lView, tNode);\n        }\n    }\n    /**\n     * Mark the end of the element.\n     *\n     * @codeGenApi\n     */\n    function ɵɵelementEnd() {\n        var previousOrParentTNode = getPreviousOrParentTNode();\n        ngDevMode && assertDefined(previousOrParentTNode, 'No parent node to close.');\n        if (getIsParent()) {\n            setIsNotParent();\n        }\n        else {\n            ngDevMode && assertHasParent(getPreviousOrParentTNode());\n            previousOrParentTNode = previousOrParentTNode.parent;\n            setPreviousOrParentTNode(previousOrParentTNode, false);\n        }\n        var tNode = previousOrParentTNode;\n        ngDevMode && assertNodeType(tNode, 3 /* Element */);\n        var lView = getLView();\n        var tView = lView[TVIEW];\n        decreaseElementDepthCount();\n        if (tView.firstCreatePass) {\n            registerPostOrderHooks(tView, previousOrParentTNode);\n            if (isContentQueryHost(previousOrParentTNode)) {\n                tView.queries.elementEnd(previousOrParentTNode);\n            }\n        }\n        if (hasClassInput(tNode)) {\n            var inputName = selectClassBasedInputName(tNode.inputs);\n            setDirectiveStylingInput(tNode.classes, lView, tNode.inputs[inputName], inputName);\n        }\n        if (hasStyleInput(tNode)) {\n            setDirectiveStylingInput(tNode.styles, lView, tNode.inputs['style'], 'style');\n        }\n    }\n    /**\n     * Creates an empty element using {@link elementStart} and {@link elementEnd}\n     *\n     * @param index Index of the element in the data array\n     * @param name Name of the DOM Node\n     * @param attrsIndex Index of the element's attributes in the `consts` array.\n     * @param localRefsIndex Index of the element's local references in the `consts` array.\n     *\n     * @codeGenApi\n     */\n    function ɵɵelement(index, name, attrsIndex, localRefsIndex) {\n        ɵɵelementStart(index, name, attrsIndex, localRefsIndex);\n        ɵɵelementEnd();\n    }\n    /**\n     * Assign static attribute values to a host element.\n     *\n     * This instruction will assign static attribute values as well as class and style\n     * values to an element within the host bindings function. Since attribute values\n     * can consist of different types of values, the `attrs` array must include the values in\n     * the following format:\n     *\n     * attrs = [\n     *   // static attributes (like `title`, `name`, `id`...)\n     *   attr1, value1, attr2, value,\n     *\n     *   // a single namespace value (like `x:id`)\n     *   NAMESPACE_MARKER, namespaceUri1, name1, value1,\n     *\n     *   // another single namespace value (like `x:name`)\n     *   NAMESPACE_MARKER, namespaceUri2, name2, value2,\n     *\n     *   // a series of CSS classes that will be applied to the element (no spaces)\n     *   CLASSES_MARKER, class1, class2, class3,\n     *\n     *   // a series of CSS styles (property + value) that will be applied to the element\n     *   STYLES_MARKER, prop1, value1, prop2, value2\n     * ]\n     *\n     * All non-class and non-style attributes must be defined at the start of the list\n     * first before all class and style values are set. When there is a change in value\n     * type (like when classes and styles are introduced) a marker must be used to separate\n     * the entries. The marker values themselves are set via entries found in the\n     * [AttributeMarker] enum.\n     *\n     * NOTE: This instruction is meant to used from `hostBindings` function only.\n     *\n     * @param directive A directive instance the styling is associated with.\n     * @param attrs An array of static values (attributes, classes and styles) with the correct marker\n     * values.\n     *\n     * @codeGenApi\n     */\n    function ɵɵelementHostAttrs(attrs) {\n        var hostElementIndex = getSelectedIndex();\n        var lView = getLView();\n        var tView = lView[TVIEW];\n        var tNode = getTNode(hostElementIndex, lView);\n        // non-element nodes (e.g. `<ng-container>`) are not rendered as actual\n        // element nodes and adding styles/classes on to them will cause runtime\n        // errors...\n        if (tNode.type === 3 /* Element */) {\n            var native = getNativeByTNode(tNode, lView);\n            var lastAttrIndex = setUpAttributes(lView[RENDERER], native, attrs);\n            if (tView.firstCreatePass) {\n                var stylingNeedsToBeRendered = registerInitialStylingOnTNode(tNode, attrs, lastAttrIndex);\n                // this is only called during the first template pass in the\n                // event that this current directive assigned initial style/class\n                // host attribute values to the element. Because initial styling\n                // values are applied before directives are first rendered (within\n                // `createElement`) this means that initial styling for any directives\n                // still needs to be applied. Note that this will only happen during\n                // the first template pass and not each time a directive applies its\n                // attribute values to the element.\n                if (stylingNeedsToBeRendered) {\n                    var renderer = lView[RENDERER];\n                    renderInitialStyling(renderer, native, tNode, true);\n                }\n            }\n        }\n    }\n    function setDirectiveStylingInput(context, lView, stylingInputs, propName) {\n        // older versions of Angular treat the input as `null` in the\n        // event that the value does not exist at all. For this reason\n        // we can't have a styling value be an empty string.\n        var value = (context && getInitialStylingValue(context)) || null;\n        // Ivy does an extra `[class]` write with a falsy value since the value\n        // is applied during creation mode. This is a deviation from VE and should\n        // be (Jira Issue = FW-1467).\n        setInputsForProperty(lView, stylingInputs, propName, value);\n    }\n    function warnAboutUnknownElement(hostView, element, tNode, hasDirectives) {\n        var schemas = hostView[TVIEW].schemas;\n        // If `schemas` is set to `null`, that's an indication that this Component was compiled in AOT\n        // mode where this check happens at compile time. In JIT mode, `schemas` is always present and\n        // defined as an array (as an empty array in case `schemas` field is not defined) and we should\n        // execute the check below.\n        if (schemas === null)\n            return;\n        var tagName = tNode.tagName;\n        // If the element matches any directive, it's considered as valid.\n        if (!hasDirectives && tagName !== null) {\n            // The element is unknown if it's an instance of HTMLUnknownElement or it isn't registered\n            // as a custom element. Note that unknown elements with a dash in their name won't be instances\n            // of HTMLUnknownElement in browsers that support web components.\n            var isUnknown = \n            // Note that we can't check for `typeof HTMLUnknownElement === 'function'`,\n            // because while most browsers return 'function', IE returns 'object'.\n            (typeof HTMLUnknownElement !== 'undefined' && HTMLUnknownElement &&\n                element instanceof HTMLUnknownElement) ||\n                (typeof customElements !== 'undefined' && tagName.indexOf('-') > -1 &&\n                    !customElements.get(tagName));\n            if (isUnknown && !matchingSchemas(hostView, tagName)) {\n                var warning = \"'\" + tagName + \"' is not a known element:\\n\";\n                warning +=\n                    \"1. If '\" + tagName + \"' is an Angular component, then verify that it is part of this module.\\n\";\n                if (tagName && tagName.indexOf('-') > -1) {\n                    warning +=\n                        \"2. If '\" + tagName + \"' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.\";\n                }\n                else {\n                    warning +=\n                        \"2. To allow any element add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.\";\n                }\n                console.warn(warning);\n            }\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function elementContainerStartFirstCreatePass(index, tView, lView, attrsIndex, localRefsIndex) {\n        ngDevMode && ngDevMode.firstCreatePass++;\n        var tViewConsts = tView.consts;\n        var attrs = getConstant(tViewConsts, attrsIndex);\n        var tNode = getOrCreateTNode(tView, lView[T_HOST], index, 4 /* ElementContainer */, 'ng-container', attrs);\n        // While ng-container doesn't necessarily support styling, we use the style context to identify\n        // and execute directives on the ng-container.\n        if (attrs !== null) {\n            registerInitialStylingOnTNode(tNode, attrs, 0);\n        }\n        var localRefs = getConstant(tViewConsts, localRefsIndex);\n        resolveDirectives(tView, lView, tNode, localRefs);\n        if (tView.queries !== null) {\n            tView.queries.elementStart(tView, tNode);\n        }\n        return tNode;\n    }\n    /**\n     * Creates a logical container for other nodes (<ng-container>) backed by a comment node in the DOM.\n     * The instruction must later be followed by `elementContainerEnd()` call.\n     *\n     * @param index Index of the element in the LView array\n     * @param attrsIndex Index of the container attributes in the `consts` array.\n     * @param localRefsIndex Index of the container's local references in the `consts` array.\n     *\n     * Even if this instruction accepts a set of attributes no actual attribute values are propagated to\n     * the DOM (as a comment node can't have attributes). Attributes are here only for directive\n     * matching purposes and setting initial inputs of directives.\n     *\n     * @codeGenApi\n     */\n    function ɵɵelementContainerStart(index, attrsIndex, localRefsIndex) {\n        var lView = getLView();\n        var tView = lView[TVIEW];\n        var adjustedIndex = index + HEADER_OFFSET;\n        ngDevMode && assertDataInRange(lView, adjustedIndex);\n        ngDevMode && assertEqual(getBindingIndex(), tView.bindingStartIndex, 'element containers should be created before any bindings');\n        var tNode = tView.firstCreatePass ?\n            elementContainerStartFirstCreatePass(index, tView, lView, attrsIndex, localRefsIndex) :\n            tView.data[adjustedIndex];\n        setPreviousOrParentTNode(tNode, true);\n        ngDevMode && ngDevMode.rendererCreateComment++;\n        var native = lView[adjustedIndex] =\n            lView[RENDERER].createComment(ngDevMode ? 'ng-container' : '');\n        appendChild(native, tNode, lView);\n        attachPatchData(native, lView);\n        if (isDirectiveHost(tNode)) {\n            createDirectivesInstances(tView, lView, tNode);\n            executeContentQueries(tView, tNode, lView);\n        }\n        if (localRefsIndex != null) {\n            saveResolvedLocalsInData(lView, tNode);\n        }\n    }\n    /**\n     * Mark the end of the <ng-container>.\n     *\n     * @codeGenApi\n     */\n    function ɵɵelementContainerEnd() {\n        var previousOrParentTNode = getPreviousOrParentTNode();\n        var lView = getLView();\n        var tView = lView[TVIEW];\n        if (getIsParent()) {\n            setIsNotParent();\n        }\n        else {\n            ngDevMode && assertHasParent(previousOrParentTNode);\n            previousOrParentTNode = previousOrParentTNode.parent;\n            setPreviousOrParentTNode(previousOrParentTNode, false);\n        }\n        ngDevMode && assertNodeType(previousOrParentTNode, 4 /* ElementContainer */);\n        if (tView.firstCreatePass) {\n            registerPostOrderHooks(tView, previousOrParentTNode);\n            if (isContentQueryHost(previousOrParentTNode)) {\n                tView.queries.elementEnd(previousOrParentTNode);\n            }\n        }\n    }\n    /**\n     * Creates an empty logical container using {@link elementContainerStart}\n     * and {@link elementContainerEnd}\n     *\n     * @param index Index of the element in the LView array\n     * @param attrsIndex Index of the container attributes in the `consts` array.\n     * @param localRefsIndex Index of the container's local references in the `consts` array.\n     *\n     * @codeGenApi\n     */\n    function ɵɵelementContainer(index, attrsIndex, localRefsIndex) {\n        ɵɵelementContainerStart(index, attrsIndex, localRefsIndex);\n        ɵɵelementContainerEnd();\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Marks the start of an embedded view.\n     *\n     * @param viewBlockId The ID of this view\n     * @return boolean Whether or not this view is in creation mode\n     *\n     * @codeGenApi\n     */\n    function ɵɵembeddedViewStart(viewBlockId, decls, vars) {\n        var lView = getLView();\n        var previousOrParentTNode = getPreviousOrParentTNode();\n        // The previous node can be a view node if we are processing an inline for loop\n        var containerTNode = previousOrParentTNode.type === 2 /* View */ ?\n            previousOrParentTNode.parent :\n            previousOrParentTNode;\n        var lContainer = lView[containerTNode.index];\n        ngDevMode && assertNodeType(containerTNode, 0 /* Container */);\n        var viewToRender = scanForView(lContainer, getLContainerActiveIndex(lContainer), viewBlockId);\n        if (viewToRender) {\n            setIsParent();\n            enterView(viewToRender, viewToRender[TVIEW].node);\n        }\n        else {\n            // When we create a new LView, we always reset the state of the instructions.\n            viewToRender = createLView(lView, getOrCreateEmbeddedTView(viewBlockId, decls, vars, containerTNode), null, 16 /* CheckAlways */, null, null);\n            var tParentNode = getIsParent() ? previousOrParentTNode :\n                previousOrParentTNode && previousOrParentTNode.parent;\n            assignTViewNodeToLView(viewToRender[TVIEW], tParentNode, viewBlockId, viewToRender);\n            enterView(viewToRender, viewToRender[TVIEW].node);\n        }\n        if (lContainer) {\n            if (isCreationMode(viewToRender)) {\n                // it is a new view, insert it into collection of views for a given container\n                insertView(viewToRender, lContainer, getLContainerActiveIndex(lContainer));\n            }\n            lContainer[ACTIVE_INDEX] += 2 /* INCREMENT */;\n        }\n        return isCreationMode(viewToRender) ? 1 /* Create */ | 2 /* Update */ :\n            2 /* Update */;\n    }\n    /**\n     * Initialize the TView (e.g. static data) for the active embedded view.\n     *\n     * Each embedded view block must create or retrieve its own TView. Otherwise, the embedded view's\n     * static data for a particular node would overwrite the static data for a node in the view above\n     * it with the same index (since it's in the same template).\n     *\n     * @param viewIndex The index of the TView in TNode.tViews\n     * @param decls The number of nodes, local refs, and pipes in this template\n     * @param vars The number of bindings and pure function bindings in this template\n     * @param container The parent container in which to look for the view's static data\n     * @returns TView\n     */\n    function getOrCreateEmbeddedTView(viewIndex, decls, vars, parent) {\n        var tView = getLView()[TVIEW];\n        ngDevMode && assertNodeType(parent, 0 /* Container */);\n        var containerTViews = parent.tViews;\n        ngDevMode && assertDefined(containerTViews, 'TView expected');\n        ngDevMode && assertEqual(Array.isArray(containerTViews), true, 'TViews should be in an array');\n        if (viewIndex >= containerTViews.length || containerTViews[viewIndex] == null) {\n            containerTViews[viewIndex] = createTView(2 /* Embedded */, viewIndex, null, decls, vars, tView.directiveRegistry, tView.pipeRegistry, null, null, tView.consts);\n        }\n        return containerTViews[viewIndex];\n    }\n    /**\n     * Looks for a view with a given view block id inside a provided LContainer.\n     * Removes views that need to be deleted in the process.\n     *\n     * @param lContainer to search for views\n     * @param startIdx starting index in the views array to search from\n     * @param viewBlockId exact view block id to look for\n     */\n    function scanForView(lContainer, startIdx, viewBlockId) {\n        for (var i = startIdx + CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n            var viewAtPositionId = lContainer[i][TVIEW].id;\n            if (viewAtPositionId === viewBlockId) {\n                return lContainer[i];\n            }\n            else if (viewAtPositionId < viewBlockId) {\n                // found a view that should not be at this position - remove\n                removeView(lContainer, i - CONTAINER_HEADER_OFFSET);\n            }\n            else {\n                // found a view with id greater than the one we are searching for\n                // which means that required view doesn't exist and can't be found at\n                // later positions in the views array - stop the searchdef.cont here\n                break;\n            }\n        }\n        return null;\n    }\n    /**\n     * Marks the end of an embedded view.\n     *\n     * @codeGenApi\n     */\n    function ɵɵembeddedViewEnd() {\n        var lView = getLView();\n        var tView = lView[TVIEW];\n        var viewHost = lView[T_HOST];\n        var context = lView[CONTEXT];\n        if (isCreationMode(lView)) {\n            renderView(lView, tView, context); // creation mode pass\n        }\n        refreshView(lView, tView, tView.template, context); // update mode pass\n        var lContainer = lView[PARENT];\n        ngDevMode && assertLContainerOrUndefined(lContainer);\n        leaveViewProcessExit();\n        setPreviousOrParentTNode(viewHost, false);\n    }\n\n    /**\n     * Returns the current OpaqueViewState instance.\n     *\n     * Used in conjunction with the restoreView() instruction to save a snapshot\n     * of the current view and restore it when listeners are invoked. This allows\n     * walking the declaration view tree in listeners to get vars from parent views.\n     *\n     * @codeGenApi\n     */\n    function ɵɵgetCurrentView() {\n        return getLView();\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Determine if the argument is shaped like a Promise\n     */\n    function isPromise(obj) {\n        // allow any Promise/A+ compliant thenable.\n        // It's up to the caller to ensure that obj.then conforms to the spec\n        return !!obj && typeof obj.then === 'function';\n    }\n    /**\n     * Determine if the argument is an Observable\n     */\n    function isObservable(obj) {\n        // TODO: use isObservable once we update pass rxjs 6.1\n        // https://github.com/ReactiveX/rxjs/blob/master/CHANGELOG.md#610-2018-05-03\n        return !!obj && typeof obj.subscribe === 'function';\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Adds an event listener to the current node.\n     *\n     * If an output exists on one of the node's directives, it also subscribes to the output\n     * and saves the subscription for later cleanup.\n     *\n     * @param eventName Name of the event\n     * @param listenerFn The function to be called when event emits\n     * @param useCapture Whether or not to use capture in event listener\n     * @param eventTargetResolver Function that returns global target information in case this listener\n     * should be attached to a global object like window, document or body\n     *\n     * @codeGenApi\n     */\n    function ɵɵlistener(eventName, listenerFn, useCapture, eventTargetResolver) {\n        if (useCapture === void 0) { useCapture = false; }\n        var lView = getLView();\n        var tNode = getPreviousOrParentTNode();\n        listenerInternal(lView, lView[RENDERER], tNode, eventName, listenerFn, useCapture, eventTargetResolver);\n        return ɵɵlistener;\n    }\n    /**\n    * Registers a synthetic host listener (e.g. `(@foo.start)`) on a component.\n    *\n    * This instruction is for compatibility purposes and is designed to ensure that a\n    * synthetic host listener (e.g. `@HostListener('@foo.start')`) properly gets rendered\n    * in the component's renderer. Normally all host listeners are evaluated with the\n    * parent component's renderer, but, in the case of animation @triggers, they need\n    * to be evaluated with the sub component's renderer (because that's where the\n    * animation triggers are defined).\n    *\n    * Do not use this instruction as a replacement for `listener`. This instruction\n    * only exists to ensure compatibility with the ViewEngine's host binding behavior.\n    *\n    * @param eventName Name of the event\n    * @param listenerFn The function to be called when event emits\n    * @param useCapture Whether or not to use capture in event listener\n    * @param eventTargetResolver Function that returns global target information in case this listener\n    * should be attached to a global object like window, document or body\n     *\n     * @codeGenApi\n    */\n    function ɵɵcomponentHostSyntheticListener(eventName, listenerFn, useCapture, eventTargetResolver) {\n        if (useCapture === void 0) { useCapture = false; }\n        var lView = getLView();\n        var tNode = getPreviousOrParentTNode();\n        var renderer = loadComponentRenderer(tNode, lView);\n        listenerInternal(lView, renderer, tNode, eventName, listenerFn, useCapture, eventTargetResolver);\n        return ɵɵcomponentHostSyntheticListener;\n    }\n    /**\n     * A utility function that checks if a given element has already an event handler registered for an\n     * event with a specified name. The TView.cleanup data structure is used to find out which events\n     * are registered for a given element.\n     */\n    function findExistingListener(lView, eventName, tNodeIdx) {\n        var tView = lView[TVIEW];\n        var tCleanup = tView.cleanup;\n        if (tCleanup != null) {\n            for (var i = 0; i < tCleanup.length - 1; i += 2) {\n                var cleanupEventName = tCleanup[i];\n                if (cleanupEventName === eventName && tCleanup[i + 1] === tNodeIdx) {\n                    // We have found a matching event name on the same node but it might not have been\n                    // registered yet, so we must explicitly verify entries in the LView cleanup data\n                    // structures.\n                    var lCleanup = lView[CLEANUP];\n                    var listenerIdxInLCleanup = tCleanup[i + 2];\n                    return lCleanup.length > listenerIdxInLCleanup ? lCleanup[listenerIdxInLCleanup] : null;\n                }\n                // TView.cleanup can have a mix of 4-elements entries (for event handler cleanups) or\n                // 2-element entries (for directive and queries destroy hooks). As such we can encounter\n                // blocks of 4 or 2 items in the tView.cleanup and this is why we iterate over 2 elements\n                // first and jump another 2 elements if we detect listeners cleanup (4 elements). Also check\n                // documentation of TView.cleanup for more details of this data structure layout.\n                if (typeof cleanupEventName === 'string') {\n                    i += 2;\n                }\n            }\n        }\n        return null;\n    }\n    function listenerInternal(lView, renderer, tNode, eventName, listenerFn, useCapture, eventTargetResolver) {\n        if (useCapture === void 0) { useCapture = false; }\n        var tView = lView[TVIEW];\n        var isTNodeDirectiveHost = isDirectiveHost(tNode);\n        var firstCreatePass = tView.firstCreatePass;\n        var tCleanup = firstCreatePass && (tView.cleanup || (tView.cleanup = []));\n        // When the ɵɵlistener instruction was generated and is executed we know that there is either a\n        // native listener or a directive output on this element. As such we we know that we will have to\n        // register a listener and store its cleanup function on LView.\n        var lCleanup = getCleanup(lView);\n        ngDevMode && assertNodeOfPossibleTypes(tNode, 3 /* Element */, 0 /* Container */, 4 /* ElementContainer */);\n        var processOutputs = true;\n        // add native event listener - applicable to elements only\n        if (tNode.type === 3 /* Element */) {\n            var native = getNativeByTNode(tNode, lView);\n            var resolved = eventTargetResolver ? eventTargetResolver(native) : EMPTY_OBJ;\n            var target = resolved.target || native;\n            var lCleanupIndex = lCleanup.length;\n            var idxOrTargetGetter = eventTargetResolver ?\n                function (_lView) { return eventTargetResolver(unwrapRNode(_lView[tNode.index])).target; } :\n                tNode.index;\n            // In order to match current behavior, native DOM event listeners must be added for all\n            // events (including outputs).\n            if (isProceduralRenderer(renderer)) {\n                // There might be cases where multiple directives on the same element try to register an event\n                // handler function for the same event. In this situation we want to avoid registration of\n                // several native listeners as each registration would be intercepted by NgZone and\n                // trigger change detection. This would mean that a single user action would result in several\n                // change detections being invoked. To avoid this situation we want to have only one call to\n                // native handler registration (for the same element and same type of event).\n                //\n                // In order to have just one native event handler in presence of multiple handler functions,\n                // we just register a first handler function as a native event listener and then chain\n                // (coalesce) other handler functions on top of the first native handler function.\n                var existingListener = null;\n                // Please note that the coalescing described here doesn't happen for events specifying an\n                // alternative target (ex. (document:click)) - this is to keep backward compatibility with the\n                // view engine.\n                // Also, we don't have to search for existing listeners is there are no directives\n                // matching on a given node as we can't register multiple event handlers for the same event in\n                // a template (this would mean having duplicate attributes).\n                if (!eventTargetResolver && isTNodeDirectiveHost) {\n                    existingListener = findExistingListener(lView, eventName, tNode.index);\n                }\n                if (existingListener !== null) {\n                    // Attach a new listener to coalesced listeners list, maintaining the order in which\n                    // listeners are registered. For performance reasons, we keep a reference to the last\n                    // listener in that list (in `__ngLastListenerFn__` field), so we can avoid going through\n                    // the entire set each time we need to add a new listener.\n                    var lastListenerFn = existingListener.__ngLastListenerFn__ || existingListener;\n                    lastListenerFn.__ngNextListenerFn__ = listenerFn;\n                    existingListener.__ngLastListenerFn__ = listenerFn;\n                    processOutputs = false;\n                }\n                else {\n                    // The first argument of `listen` function in Procedural Renderer is:\n                    // - either a target name (as a string) in case of global target (window, document, body)\n                    // - or element reference (in all other cases)\n                    listenerFn = wrapListener(tNode, lView, listenerFn, false /** preventDefault */);\n                    var cleanupFn = renderer.listen(resolved.name || target, eventName, listenerFn);\n                    ngDevMode && ngDevMode.rendererAddEventListener++;\n                    lCleanup.push(listenerFn, cleanupFn);\n                    tCleanup && tCleanup.push(eventName, idxOrTargetGetter, lCleanupIndex, lCleanupIndex + 1);\n                }\n            }\n            else {\n                listenerFn = wrapListener(tNode, lView, listenerFn, true /** preventDefault */);\n                target.addEventListener(eventName, listenerFn, useCapture);\n                ngDevMode && ngDevMode.rendererAddEventListener++;\n                lCleanup.push(listenerFn);\n                tCleanup && tCleanup.push(eventName, idxOrTargetGetter, lCleanupIndex, useCapture);\n            }\n        }\n        // subscribe to directive outputs\n        var outputs = tNode.outputs;\n        var props;\n        if (processOutputs && outputs !== null && (props = outputs[eventName])) {\n            var propsLength = props.length;\n            if (propsLength) {\n                for (var i = 0; i < propsLength; i += 2) {\n                    var index = props[i];\n                    ngDevMode && assertDataInRange(lView, index);\n                    var minifiedName = props[i + 1];\n                    var directiveInstance = lView[index];\n                    var output = directiveInstance[minifiedName];\n                    if (ngDevMode && !isObservable(output)) {\n                        throw new Error(\"@Output \" + minifiedName + \" not initialized in '\" + directiveInstance.constructor.name + \"'.\");\n                    }\n                    var subscription = output.subscribe(listenerFn);\n                    var idx = lCleanup.length;\n                    lCleanup.push(listenerFn, subscription);\n                    tCleanup && tCleanup.push(eventName, tNode.index, idx, -(idx + 1));\n                }\n            }\n        }\n    }\n    function executeListenerWithErrorHandling(lView, listenerFn, e) {\n        try {\n            // Only explicitly returning false from a listener should preventDefault\n            return listenerFn(e) !== false;\n        }\n        catch (error) {\n            handleError(lView, error);\n            return false;\n        }\n    }\n    /**\n     * Wraps an event listener with a function that marks ancestors dirty and prevents default behavior,\n     * if applicable.\n     *\n     * @param tNode The TNode associated with this listener\n     * @param lView The LView that contains this listener\n     * @param listenerFn The listener function to call\n     * @param wrapWithPreventDefault Whether or not to prevent default behavior\n     * (the procedural renderer does this already, so in those cases, we should skip)\n     */\n    function wrapListener(tNode, lView, listenerFn, wrapWithPreventDefault) {\n        // Note: we are performing most of the work in the listener function itself\n        // to optimize listener registration.\n        return function wrapListenerIn_markDirtyAndPreventDefault(e) {\n            // Ivy uses `Function` as a special token that allows us to unwrap the function\n            // so that it can be invoked programmatically by `DebugNode.triggerEventHandler`.\n            if (e === Function) {\n                return listenerFn;\n            }\n            // In order to be backwards compatible with View Engine, events on component host nodes\n            // must also mark the component view itself dirty (i.e. the view that it owns).\n            var startView = tNode.flags & 2 /* isComponentHost */ ?\n                getComponentLViewByIndex(tNode.index, lView) :\n                lView;\n            // See interfaces/view.ts for more on LViewFlags.ManualOnPush\n            if ((lView[FLAGS] & 32 /* ManualOnPush */) === 0) {\n                markViewDirty(startView);\n            }\n            var result = executeListenerWithErrorHandling(lView, listenerFn, e);\n            // A just-invoked listener function might have coalesced listeners so we need to check for\n            // their presence and invoke as needed.\n            var nextListenerFn = wrapListenerIn_markDirtyAndPreventDefault.__ngNextListenerFn__;\n            while (nextListenerFn) {\n                // We should prevent default if any of the listeners explicitly return false\n                result = executeListenerWithErrorHandling(lView, nextListenerFn, e) && result;\n                nextListenerFn = nextListenerFn.__ngNextListenerFn__;\n            }\n            if (wrapWithPreventDefault && result === false) {\n                e.preventDefault();\n                // Necessary for legacy browsers that don't support preventDefault (e.g. IE)\n                e.returnValue = false;\n            }\n            return result;\n        };\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Retrieves a context at the level specified and saves it as the global, contextViewData.\n     * Will get the next level up if level is not specified.\n     *\n     * This is used to save contexts of parent views so they can be bound in embedded views, or\n     * in conjunction with reference() to bind a ref from a parent view.\n     *\n     * @param level The relative level of the view from which to grab context compared to contextVewData\n     * @returns context\n     *\n     * @codeGenApi\n     */\n    function ɵɵnextContext(level) {\n        if (level === void 0) { level = 1; }\n        return nextContextImpl(level);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Checks a given node against matching projection slots and returns the\n     * determined slot index. Returns \"null\" if no slot matched the given node.\n     *\n     * This function takes into account the parsed ngProjectAs selector from the\n     * node's attributes. If present, it will check whether the ngProjectAs selector\n     * matches any of the projection slot selectors.\n     */\n    function matchingProjectionSlotIndex(tNode, projectionSlots) {\n        var wildcardNgContentIndex = null;\n        var ngProjectAsAttrVal = getProjectAsAttrValue(tNode);\n        for (var i = 0; i < projectionSlots.length; i++) {\n            var slotValue = projectionSlots[i];\n            // The last wildcard projection slot should match all nodes which aren't matching\n            // any selector. This is necessary to be backwards compatible with view engine.\n            if (slotValue === '*') {\n                wildcardNgContentIndex = i;\n                continue;\n            }\n            // If we ran into an `ngProjectAs` attribute, we should match its parsed selector\n            // to the list of selectors, otherwise we fall back to matching against the node.\n            if (ngProjectAsAttrVal === null ?\n                isNodeMatchingSelectorList(tNode, slotValue, /* isProjectionMode */ true) :\n                isSelectorInSelectorList(ngProjectAsAttrVal, slotValue)) {\n                return i; // first matching selector \"captures\" a given node\n            }\n        }\n        return wildcardNgContentIndex;\n    }\n    /**\n     * Instruction to distribute projectable nodes among <ng-content> occurrences in a given template.\n     * It takes all the selectors from the entire component's template and decides where\n     * each projected node belongs (it re-distributes nodes among \"buckets\" where each \"bucket\" is\n     * backed by a selector).\n     *\n     * This function requires CSS selectors to be provided in 2 forms: parsed (by a compiler) and text,\n     * un-parsed form.\n     *\n     * The parsed form is needed for efficient matching of a node against a given CSS selector.\n     * The un-parsed, textual form is needed for support of the ngProjectAs attribute.\n     *\n     * Having a CSS selector in 2 different formats is not ideal, but alternatives have even more\n     * drawbacks:\n     * - having only a textual form would require runtime parsing of CSS selectors;\n     * - we can't have only a parsed as we can't re-construct textual form from it (as entered by a\n     * template author).\n     *\n     * @param projectionSlots? A collection of projection slots. A projection slot can be based\n     *        on a parsed CSS selectors or set to the wildcard selector (\"*\") in order to match\n     *        all nodes which do not match any selector. If not specified, a single wildcard\n     *        selector projection slot will be defined.\n     *\n     * @codeGenApi\n     */\n    function ɵɵprojectionDef(projectionSlots) {\n        var componentNode = getLView()[DECLARATION_COMPONENT_VIEW][T_HOST];\n        if (!componentNode.projection) {\n            // If no explicit projection slots are defined, fall back to a single\n            // projection slot with the wildcard selector.\n            var numProjectionSlots = projectionSlots ? projectionSlots.length : 1;\n            var projectionHeads = componentNode.projection =\n                newArray(numProjectionSlots, null);\n            var tails = projectionHeads.slice();\n            var componentChild = componentNode.child;\n            while (componentChild !== null) {\n                var slotIndex = projectionSlots ? matchingProjectionSlotIndex(componentChild, projectionSlots) : 0;\n                if (slotIndex !== null) {\n                    if (tails[slotIndex]) {\n                        tails[slotIndex].projectionNext = componentChild;\n                    }\n                    else {\n                        projectionHeads[slotIndex] = componentChild;\n                    }\n                    tails[slotIndex] = componentChild;\n                }\n                componentChild = componentChild.next;\n            }\n        }\n    }\n    var delayProjection = false;\n    function setDelayProjection(value) {\n        delayProjection = value;\n    }\n    /**\n     * Inserts previously re-distributed projected nodes. This instruction must be preceded by a call\n     * to the projectionDef instruction.\n     *\n     * @param nodeIndex\n     * @param selectorIndex:\n     *        - 0 when the selector is `*` (or unspecified as this is the default value),\n     *        - 1 based index of the selector from the {@link projectionDef}\n     *\n     * @codeGenApi\n    */\n    function ɵɵprojection(nodeIndex, selectorIndex, attrs) {\n        if (selectorIndex === void 0) { selectorIndex = 0; }\n        var lView = getLView();\n        var tProjectionNode = getOrCreateTNode(lView[TVIEW], lView[T_HOST], nodeIndex, 1 /* Projection */, null, attrs || null);\n        // We can't use viewData[HOST_NODE] because projection nodes can be nested in embedded views.\n        if (tProjectionNode.projection === null)\n            tProjectionNode.projection = selectorIndex;\n        // `<ng-content>` has no content\n        setIsNotParent();\n        // We might need to delay the projection of nodes if they are in the middle of an i18n block\n        if (!delayProjection) {\n            // re-distribution of projectable nodes is stored on a component's view level\n            applyProjection(lView, tProjectionNode);\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Update a property on a selected element.\n     *\n     * Operates on the element selected by index via the {@link select} instruction.\n     *\n     * If the property name also exists as an input property on one of the element's directives,\n     * the component property will be set instead of the element property. This check must\n     * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled\n     *\n     * @param propName Name of property. Because it is going to DOM, this is not subject to\n     *        renaming as part of minification.\n     * @param value New value to write.\n     * @param sanitizer An optional function used to sanitize the value.\n     * @returns This function returns itself so that it may be chained\n     * (e.g. `property('name', ctx.name)('title', ctx.title)`)\n     *\n     * @codeGenApi\n     */\n    function ɵɵproperty(propName, value, sanitizer) {\n        var lView = getLView();\n        var bindingIndex = nextBindingIndex();\n        if (bindingUpdated(lView, bindingIndex, value)) {\n            var nodeIndex = getSelectedIndex();\n            elementPropertyInternal(lView, nodeIndex, propName, value, sanitizer);\n            ngDevMode && storePropertyBindingMetadata(lView[TVIEW].data, nodeIndex, propName, bindingIndex);\n        }\n        return ɵɵproperty;\n    }\n\n    /**\n     *\n     * Update an interpolated property on an element with a lone bound value\n     *\n     * Used when the value passed to a property has 1 interpolated value in it, an no additional text\n     * surrounds that interpolated value:\n     *\n     * ```html\n     * <div title=\"{{v0}}\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵpropertyInterpolate('title', v0);\n     * ```\n     *\n     * If the property name also exists as an input property on one of the element's directives,\n     * the component property will be set instead of the element property. This check must\n     * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n     *\n     * @param propName The name of the property to update\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵpropertyInterpolate(propName, v0, sanitizer) {\n        ɵɵpropertyInterpolate1(propName, '', v0, '', sanitizer);\n        return ɵɵpropertyInterpolate;\n    }\n    /**\n     *\n     * Update an interpolated property on an element with single bound value surrounded by text.\n     *\n     * Used when the value passed to a property has 1 interpolated value in it:\n     *\n     * ```html\n     * <div title=\"prefix{{v0}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵpropertyInterpolate1('title', 'prefix', v0, 'suffix');\n     * ```\n     *\n     * If the property name also exists as an input property on one of the element's directives,\n     * the component property will be set instead of the element property. This check must\n     * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n     *\n     * @param propName The name of the property to update\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵpropertyInterpolate1(propName, prefix, v0, suffix, sanitizer) {\n        var lView = getLView();\n        var interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            var nodeIndex = getSelectedIndex();\n            elementPropertyInternal(lView, nodeIndex, propName, interpolatedValue, sanitizer);\n            ngDevMode && storePropertyBindingMetadata(lView[TVIEW].data, nodeIndex, propName, getBindingIndex() - 1, prefix, suffix);\n        }\n        return ɵɵpropertyInterpolate1;\n    }\n    /**\n     *\n     * Update an interpolated property on an element with 2 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 2 interpolated values in it:\n     *\n     * ```html\n     * <div title=\"prefix{{v0}}-{{v1}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵpropertyInterpolate2('title', 'prefix', v0, '-', v1, 'suffix');\n     * ```\n     *\n     * If the property name also exists as an input property on one of the element's directives,\n     * the component property will be set instead of the element property. This check must\n     * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n     *\n     * @param propName The name of the property to update\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵpropertyInterpolate2(propName, prefix, v0, i0, v1, suffix, sanitizer) {\n        var lView = getLView();\n        var interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            var nodeIndex = getSelectedIndex();\n            elementPropertyInternal(lView, nodeIndex, propName, interpolatedValue, sanitizer);\n            ngDevMode &&\n                storePropertyBindingMetadata(lView[TVIEW].data, nodeIndex, propName, getBindingIndex() - 2, prefix, i0, suffix);\n        }\n        return ɵɵpropertyInterpolate2;\n    }\n    /**\n     *\n     * Update an interpolated property on an element with 3 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 3 interpolated values in it:\n     *\n     * ```html\n     * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵpropertyInterpolate3(\n     * 'title', 'prefix', v0, '-', v1, '-', v2, 'suffix');\n     * ```\n     *\n     * If the property name also exists as an input property on one of the element's directives,\n     * the component property will be set instead of the element property. This check must\n     * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n     *\n     * @param propName The name of the property to update\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵpropertyInterpolate3(propName, prefix, v0, i0, v1, i1, v2, suffix, sanitizer) {\n        var lView = getLView();\n        var interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            var nodeIndex = getSelectedIndex();\n            elementPropertyInternal(lView, nodeIndex, propName, interpolatedValue, sanitizer);\n            ngDevMode &&\n                storePropertyBindingMetadata(lView[TVIEW].data, nodeIndex, propName, getBindingIndex() - 3, prefix, i0, i1, suffix);\n        }\n        return ɵɵpropertyInterpolate3;\n    }\n    /**\n     *\n     * Update an interpolated property on an element with 4 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 4 interpolated values in it:\n     *\n     * ```html\n     * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵpropertyInterpolate4(\n     * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n     * ```\n     *\n     * If the property name also exists as an input property on one of the element's directives,\n     * the component property will be set instead of the element property. This check must\n     * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n     *\n     * @param propName The name of the property to update\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param i2 Static value used for concatenation only.\n     * @param v3 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵpropertyInterpolate4(propName, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, sanitizer) {\n        var lView = getLView();\n        var interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            var nodeIndex = getSelectedIndex();\n            elementPropertyInternal(lView, nodeIndex, propName, interpolatedValue, sanitizer);\n            ngDevMode && storePropertyBindingMetadata(lView[TVIEW].data, nodeIndex, propName, getBindingIndex() - 4, prefix, i0, i1, i2, suffix);\n        }\n        return ɵɵpropertyInterpolate4;\n    }\n    /**\n     *\n     * Update an interpolated property on an element with 5 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 5 interpolated values in it:\n     *\n     * ```html\n     * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵpropertyInterpolate5(\n     * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n     * ```\n     *\n     * If the property name also exists as an input property on one of the element's directives,\n     * the component property will be set instead of the element property. This check must\n     * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n     *\n     * @param propName The name of the property to update\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param i2 Static value used for concatenation only.\n     * @param v3 Value checked for change.\n     * @param i3 Static value used for concatenation only.\n     * @param v4 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵpropertyInterpolate5(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, sanitizer) {\n        var lView = getLView();\n        var interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            var nodeIndex = getSelectedIndex();\n            elementPropertyInternal(lView, nodeIndex, propName, interpolatedValue, sanitizer);\n            ngDevMode && storePropertyBindingMetadata(lView[TVIEW].data, nodeIndex, propName, getBindingIndex() - 5, prefix, i0, i1, i2, i3, suffix);\n        }\n        return ɵɵpropertyInterpolate5;\n    }\n    /**\n     *\n     * Update an interpolated property on an element with 6 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 6 interpolated values in it:\n     *\n     * ```html\n     * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵpropertyInterpolate6(\n     *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n     * ```\n     *\n     * If the property name also exists as an input property on one of the element's directives,\n     * the component property will be set instead of the element property. This check must\n     * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n     *\n     * @param propName The name of the property to update\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param i2 Static value used for concatenation only.\n     * @param v3 Value checked for change.\n     * @param i3 Static value used for concatenation only.\n     * @param v4 Value checked for change.\n     * @param i4 Static value used for concatenation only.\n     * @param v5 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵpropertyInterpolate6(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, sanitizer) {\n        var lView = getLView();\n        var interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            var nodeIndex = getSelectedIndex();\n            elementPropertyInternal(lView, nodeIndex, propName, interpolatedValue, sanitizer);\n            ngDevMode && storePropertyBindingMetadata(lView[TVIEW].data, nodeIndex, propName, getBindingIndex() - 6, prefix, i0, i1, i2, i3, i4, suffix);\n        }\n        return ɵɵpropertyInterpolate6;\n    }\n    /**\n     *\n     * Update an interpolated property on an element with 7 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 7 interpolated values in it:\n     *\n     * ```html\n     * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵpropertyInterpolate7(\n     *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n     * ```\n     *\n     * If the property name also exists as an input property on one of the element's directives,\n     * the component property will be set instead of the element property. This check must\n     * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n     *\n     * @param propName The name of the property to update\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param i2 Static value used for concatenation only.\n     * @param v3 Value checked for change.\n     * @param i3 Static value used for concatenation only.\n     * @param v4 Value checked for change.\n     * @param i4 Static value used for concatenation only.\n     * @param v5 Value checked for change.\n     * @param i5 Static value used for concatenation only.\n     * @param v6 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵpropertyInterpolate7(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, sanitizer) {\n        var lView = getLView();\n        var interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            var nodeIndex = getSelectedIndex();\n            elementPropertyInternal(lView, nodeIndex, propName, interpolatedValue, sanitizer);\n            ngDevMode && storePropertyBindingMetadata(lView[TVIEW].data, nodeIndex, propName, getBindingIndex() - 7, prefix, i0, i1, i2, i3, i4, i5, suffix);\n        }\n        return ɵɵpropertyInterpolate7;\n    }\n    /**\n     *\n     * Update an interpolated property on an element with 8 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 8 interpolated values in it:\n     *\n     * ```html\n     * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵpropertyInterpolate8(\n     *  'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n     * ```\n     *\n     * If the property name also exists as an input property on one of the element's directives,\n     * the component property will be set instead of the element property. This check must\n     * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n     *\n     * @param propName The name of the property to update\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param i2 Static value used for concatenation only.\n     * @param v3 Value checked for change.\n     * @param i3 Static value used for concatenation only.\n     * @param v4 Value checked for change.\n     * @param i4 Static value used for concatenation only.\n     * @param v5 Value checked for change.\n     * @param i5 Static value used for concatenation only.\n     * @param v6 Value checked for change.\n     * @param i6 Static value used for concatenation only.\n     * @param v7 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵpropertyInterpolate8(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, sanitizer) {\n        var lView = getLView();\n        var interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            var nodeIndex = getSelectedIndex();\n            elementPropertyInternal(lView, nodeIndex, propName, interpolatedValue, sanitizer);\n            ngDevMode && storePropertyBindingMetadata(lView[TVIEW].data, nodeIndex, propName, getBindingIndex() - 8, prefix, i0, i1, i2, i3, i4, i5, i6, suffix);\n        }\n        return ɵɵpropertyInterpolate8;\n    }\n    /**\n     * Update an interpolated property on an element with 8 or more bound values surrounded by text.\n     *\n     * Used when the number of interpolated values exceeds 7.\n     *\n     * ```html\n     * <div\n     *  title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵpropertyInterpolateV(\n     *  'title', ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n     *  'suffix']);\n     * ```\n     *\n     * If the property name also exists as an input property on one of the element's directives,\n     * the component property will be set instead of the element property. This check must\n     * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n     *\n     * @param propName The name of the property to update.\n     * @param values The a collection of values and the strings inbetween those values, beginning with a\n     * string prefix and ending with a string suffix.\n     * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵpropertyInterpolateV(propName, values, sanitizer) {\n        var lView = getLView();\n        var interpolatedValue = interpolationV(lView, values);\n        if (interpolatedValue !== NO_CHANGE) {\n            var nodeIndex = getSelectedIndex();\n            elementPropertyInternal(lView, nodeIndex, propName, interpolatedValue, sanitizer);\n            if (ngDevMode) {\n                var interpolationInBetween = [values[0]]; // prefix\n                for (var i = 2; i < values.length; i += 2) {\n                    interpolationInBetween.push(values[i]);\n                }\n                storePropertyBindingMetadata.apply(void 0, __spread([lView[TVIEW].data, nodeIndex, propName,\n                    getBindingIndex() - interpolationInBetween.length + 1], interpolationInBetween));\n            }\n        }\n        return ɵɵpropertyInterpolateV;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Create static text node\n     *\n     * @param index Index of the node in the data array\n     * @param value Static string value to write.\n     *\n     * @codeGenApi\n     */\n    function ɵɵtext(index, value) {\n        if (value === void 0) { value = ''; }\n        var lView = getLView();\n        var tView = lView[TVIEW];\n        var adjustedIndex = index + HEADER_OFFSET;\n        ngDevMode && assertEqual(getBindingIndex(), tView.bindingStartIndex, 'text nodes should be created before any bindings');\n        ngDevMode && assertDataInRange(lView, adjustedIndex);\n        var tNode = tView.firstCreatePass ?\n            getOrCreateTNode(tView, lView[T_HOST], index, 3 /* Element */, null, null) :\n            tView.data[adjustedIndex];\n        var textNative = lView[adjustedIndex] = createTextNode(value, lView[RENDERER]);\n        appendChild(textNative, tNode, lView);\n        // Text nodes are self closing.\n        setPreviousOrParentTNode(tNode, false);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     *\n     * Update text content with a lone bound value\n     *\n     * Used when a text node has 1 interpolated value in it, an no additional text\n     * surrounds that interpolated value:\n     *\n     * ```html\n     * <div>{{v0}}</div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵtextInterpolate(v0);\n     * ```\n     * @returns itself, so that it may be chained.\n     * @see textInterpolateV\n     * @codeGenApi\n     */\n    function ɵɵtextInterpolate(v0) {\n        ɵɵtextInterpolate1('', v0, '');\n        return ɵɵtextInterpolate;\n    }\n    /**\n     *\n     * Update text content with single bound value surrounded by other text.\n     *\n     * Used when a text node has 1 interpolated value in it:\n     *\n     * ```html\n     * <div>prefix{{v0}}suffix</div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵtextInterpolate1('prefix', v0, 'suffix');\n     * ```\n     * @returns itself, so that it may be chained.\n     * @see textInterpolateV\n     * @codeGenApi\n     */\n    function ɵɵtextInterpolate1(prefix, v0, suffix) {\n        var lView = getLView();\n        var interpolated = interpolation1(lView, prefix, v0, suffix);\n        if (interpolated !== NO_CHANGE) {\n            textBindingInternal(lView, getSelectedIndex(), interpolated);\n        }\n        return ɵɵtextInterpolate1;\n    }\n    /**\n     *\n     * Update text content with 2 bound values surrounded by other text.\n     *\n     * Used when a text node has 2 interpolated values in it:\n     *\n     * ```html\n     * <div>prefix{{v0}}-{{v1}}suffix</div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵtextInterpolate2('prefix', v0, '-', v1, 'suffix');\n     * ```\n     * @returns itself, so that it may be chained.\n     * @see textInterpolateV\n     * @codeGenApi\n     */\n    function ɵɵtextInterpolate2(prefix, v0, i0, v1, suffix) {\n        var lView = getLView();\n        var interpolated = interpolation2(lView, prefix, v0, i0, v1, suffix);\n        if (interpolated !== NO_CHANGE) {\n            textBindingInternal(lView, getSelectedIndex(), interpolated);\n        }\n        return ɵɵtextInterpolate2;\n    }\n    /**\n     *\n     * Update text content with 3 bound values surrounded by other text.\n     *\n     * Used when a text node has 3 interpolated values in it:\n     *\n     * ```html\n     * <div>prefix{{v0}}-{{v1}}-{{v2}}suffix</div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵtextInterpolate3(\n     * 'prefix', v0, '-', v1, '-', v2, 'suffix');\n     * ```\n     * @returns itself, so that it may be chained.\n     * @see textInterpolateV\n     * @codeGenApi\n     */\n    function ɵɵtextInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {\n        var lView = getLView();\n        var interpolated = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n        if (interpolated !== NO_CHANGE) {\n            textBindingInternal(lView, getSelectedIndex(), interpolated);\n        }\n        return ɵɵtextInterpolate3;\n    }\n    /**\n     *\n     * Update text content with 4 bound values surrounded by other text.\n     *\n     * Used when a text node has 4 interpolated values in it:\n     *\n     * ```html\n     * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix</div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵtextInterpolate4(\n     * 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n     * ```\n     * @returns itself, so that it may be chained.\n     * @see ɵɵtextInterpolateV\n     * @codeGenApi\n     */\n    function ɵɵtextInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\n        var lView = getLView();\n        var interpolated = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n        if (interpolated !== NO_CHANGE) {\n            textBindingInternal(lView, getSelectedIndex(), interpolated);\n        }\n        return ɵɵtextInterpolate4;\n    }\n    /**\n     *\n     * Update text content with 5 bound values surrounded by other text.\n     *\n     * Used when a text node has 5 interpolated values in it:\n     *\n     * ```html\n     * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix</div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵtextInterpolate5(\n     * 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n     * ```\n     * @returns itself, so that it may be chained.\n     * @see textInterpolateV\n     * @codeGenApi\n     */\n    function ɵɵtextInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\n        var lView = getLView();\n        var interpolated = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n        if (interpolated !== NO_CHANGE) {\n            textBindingInternal(lView, getSelectedIndex(), interpolated);\n        }\n        return ɵɵtextInterpolate5;\n    }\n    /**\n     *\n     * Update text content with 6 bound values surrounded by other text.\n     *\n     * Used when a text node has 6 interpolated values in it:\n     *\n     * ```html\n     * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix</div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵtextInterpolate6(\n     *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n     * ```\n     *\n     * @param i4 Static value used for concatenation only.\n     * @param v5 Value checked for change. @returns itself, so that it may be chained.\n     * @see textInterpolateV\n     * @codeGenApi\n     */\n    function ɵɵtextInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\n        var lView = getLView();\n        var interpolated = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n        if (interpolated !== NO_CHANGE) {\n            textBindingInternal(lView, getSelectedIndex(), interpolated);\n        }\n        return ɵɵtextInterpolate6;\n    }\n    /**\n     *\n     * Update text content with 7 bound values surrounded by other text.\n     *\n     * Used when a text node has 7 interpolated values in it:\n     *\n     * ```html\n     * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix</div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵtextInterpolate7(\n     *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n     * ```\n     * @returns itself, so that it may be chained.\n     * @see textInterpolateV\n     * @codeGenApi\n     */\n    function ɵɵtextInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\n        var lView = getLView();\n        var interpolated = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n        if (interpolated !== NO_CHANGE) {\n            textBindingInternal(lView, getSelectedIndex(), interpolated);\n        }\n        return ɵɵtextInterpolate7;\n    }\n    /**\n     *\n     * Update text content with 8 bound values surrounded by other text.\n     *\n     * Used when a text node has 8 interpolated values in it:\n     *\n     * ```html\n     * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix</div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵtextInterpolate8(\n     *  'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n     * ```\n     * @returns itself, so that it may be chained.\n     * @see textInterpolateV\n     * @codeGenApi\n     */\n    function ɵɵtextInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\n        var lView = getLView();\n        var interpolated = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n        if (interpolated !== NO_CHANGE) {\n            textBindingInternal(lView, getSelectedIndex(), interpolated);\n        }\n        return ɵɵtextInterpolate8;\n    }\n    /**\n     * Update text content with 9 or more bound values other surrounded by text.\n     *\n     * Used when the number of interpolated values exceeds 8.\n     *\n     * ```html\n     * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix</div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵtextInterpolateV(\n     *  ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n     *  'suffix']);\n     * ```\n     *.\n     * @param values The a collection of values and the strings in between those values, beginning with\n     * a string prefix and ending with a string suffix.\n     * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n     *\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵtextInterpolateV(values) {\n        var lView = getLView();\n        var interpolated = interpolationV(lView, values);\n        if (interpolated !== NO_CHANGE) {\n            textBindingInternal(lView, getSelectedIndex(), interpolated);\n        }\n        return ɵɵtextInterpolateV;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     *\n     * Update an interpolated class on an element with single bound value surrounded by text.\n     *\n     * Used when the value passed to a property has 1 interpolated value in it:\n     *\n     * ```html\n     * <div class=\"prefix{{v0}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵclassMapInterpolate1('prefix', v0, 'suffix');\n     * ```\n     *\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @codeGenApi\n     */\n    function ɵɵclassMapInterpolate1(prefix, v0, suffix) {\n        var lView = getLView();\n        var interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n        classMapInternal(getSelectedIndex(), interpolatedValue);\n    }\n    /**\n     *\n     * Update an interpolated class on an element with 2 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 2 interpolated values in it:\n     *\n     * ```html\n     * <div class=\"prefix{{v0}}-{{v1}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵclassMapInterpolate2('prefix', v0, '-', v1, 'suffix');\n     * ```\n     *\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @codeGenApi\n     */\n    function ɵɵclassMapInterpolate2(prefix, v0, i0, v1, suffix) {\n        var lView = getLView();\n        var interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n        classMapInternal(getSelectedIndex(), interpolatedValue);\n    }\n    /**\n     *\n     * Update an interpolated class on an element with 3 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 3 interpolated values in it:\n     *\n     * ```html\n     * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵclassMapInterpolate3(\n     * 'prefix', v0, '-', v1, '-', v2, 'suffix');\n     * ```\n     *\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @codeGenApi\n     */\n    function ɵɵclassMapInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {\n        var lView = getLView();\n        var interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n        classMapInternal(getSelectedIndex(), interpolatedValue);\n    }\n    /**\n     *\n     * Update an interpolated class on an element with 4 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 4 interpolated values in it:\n     *\n     * ```html\n     * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵclassMapInterpolate4(\n     * 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n     * ```\n     *\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param i2 Static value used for concatenation only.\n     * @param v3 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @codeGenApi\n     */\n    function ɵɵclassMapInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\n        var lView = getLView();\n        var interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n        classMapInternal(getSelectedIndex(), interpolatedValue);\n    }\n    /**\n     *\n     * Update an interpolated class on an element with 5 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 5 interpolated values in it:\n     *\n     * ```html\n     * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵclassMapInterpolate5(\n     * 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n     * ```\n     *\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param i2 Static value used for concatenation only.\n     * @param v3 Value checked for change.\n     * @param i3 Static value used for concatenation only.\n     * @param v4 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @codeGenApi\n     */\n    function ɵɵclassMapInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\n        var lView = getLView();\n        var interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n        classMapInternal(getSelectedIndex(), interpolatedValue);\n    }\n    /**\n     *\n     * Update an interpolated class on an element with 6 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 6 interpolated values in it:\n     *\n     * ```html\n     * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵclassMapInterpolate6(\n     *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n     * ```\n     *\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param i2 Static value used for concatenation only.\n     * @param v3 Value checked for change.\n     * @param i3 Static value used for concatenation only.\n     * @param v4 Value checked for change.\n     * @param i4 Static value used for concatenation only.\n     * @param v5 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @codeGenApi\n     */\n    function ɵɵclassMapInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\n        var lView = getLView();\n        var interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n        classMapInternal(getSelectedIndex(), interpolatedValue);\n    }\n    /**\n     *\n     * Update an interpolated class on an element with 7 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 7 interpolated values in it:\n     *\n     * ```html\n     * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵclassMapInterpolate7(\n     *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n     * ```\n     *\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param i2 Static value used for concatenation only.\n     * @param v3 Value checked for change.\n     * @param i3 Static value used for concatenation only.\n     * @param v4 Value checked for change.\n     * @param i4 Static value used for concatenation only.\n     * @param v5 Value checked for change.\n     * @param i5 Static value used for concatenation only.\n     * @param v6 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @codeGenApi\n     */\n    function ɵɵclassMapInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\n        var lView = getLView();\n        var interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n        classMapInternal(getSelectedIndex(), interpolatedValue);\n    }\n    /**\n     *\n     * Update an interpolated class on an element with 8 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 8 interpolated values in it:\n     *\n     * ```html\n     * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵclassMapInterpolate8(\n     *  'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n     * ```\n     *\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param i2 Static value used for concatenation only.\n     * @param v3 Value checked for change.\n     * @param i3 Static value used for concatenation only.\n     * @param v4 Value checked for change.\n     * @param i4 Static value used for concatenation only.\n     * @param v5 Value checked for change.\n     * @param i5 Static value used for concatenation only.\n     * @param v6 Value checked for change.\n     * @param i6 Static value used for concatenation only.\n     * @param v7 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @codeGenApi\n     */\n    function ɵɵclassMapInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\n        var lView = getLView();\n        var interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n        classMapInternal(getSelectedIndex(), interpolatedValue);\n    }\n    /**\n     * Update an interpolated class on an element with 8 or more bound values surrounded by text.\n     *\n     * Used when the number of interpolated values exceeds 7.\n     *\n     * ```html\n     * <div\n     *  class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵclassMapInterpolateV(\n     *  ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n     *  'suffix']);\n     * ```\n     *.\n     * @param values The a collection of values and the strings in-between those values, beginning with\n     * a string prefix and ending with a string suffix.\n     * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n     * @codeGenApi\n     */\n    function ɵɵclassMapInterpolateV(values) {\n        var lView = getLView();\n        var interpolatedValue = interpolationV(lView, values);\n        classMapInternal(getSelectedIndex(), interpolatedValue);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     *\n     * Update an interpolated style property on an element with single bound value surrounded by text.\n     *\n     * Used when the value passed to a property has 1 interpolated value in it:\n     *\n     * ```html\n     * <div style.color=\"prefix{{v0}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵstylePropInterpolate1(0, 'prefix', v0, 'suffix');\n     * ```\n     *\n     * @param styleIndex Index of style to update. This index value refers to the\n     *        index of the style in the style bindings array that was passed into\n     *        `styling`.\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵstylePropInterpolate1(prop, prefix, v0, suffix, valueSuffix) {\n        var lView = getLView();\n        var interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n        stylePropInternal(getSelectedIndex(), prop, interpolatedValue, valueSuffix);\n        return ɵɵstylePropInterpolate1;\n    }\n    /**\n     *\n     * Update an interpolated style property on an element with 2 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 2 interpolated values in it:\n     *\n     * ```html\n     * <div style.color=\"prefix{{v0}}-{{v1}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵstylePropInterpolate2(0, 'prefix', v0, '-', v1, 'suffix');\n     * ```\n     *\n     * @param styleIndex Index of style to update. This index value refers to the\n     *        index of the style in the style bindings array that was passed into\n     *        `styling`.\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵstylePropInterpolate2(prop, prefix, v0, i0, v1, suffix, valueSuffix) {\n        var lView = getLView();\n        var interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n        stylePropInternal(getSelectedIndex(), prop, interpolatedValue, valueSuffix);\n        return ɵɵstylePropInterpolate2;\n    }\n    /**\n     *\n     * Update an interpolated style property on an element with 3 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 3 interpolated values in it:\n     *\n     * ```html\n     * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵstylePropInterpolate3(0, 'prefix', v0, '-', v1, '-', v2, 'suffix');\n     * ```\n     *\n     * @param styleIndex Index of style to update. This index value refers to the\n     *        index of the style in the style bindings array that was passed into\n     *        `styling`.\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵstylePropInterpolate3(prop, prefix, v0, i0, v1, i1, v2, suffix, valueSuffix) {\n        var lView = getLView();\n        var interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n        stylePropInternal(getSelectedIndex(), prop, interpolatedValue, valueSuffix);\n        return ɵɵstylePropInterpolate3;\n    }\n    /**\n     *\n     * Update an interpolated style property on an element with 4 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 4 interpolated values in it:\n     *\n     * ```html\n     * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵstylePropInterpolate4(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n     * ```\n     *\n     * @param styleIndex Index of style to update. This index value refers to the\n     *        index of the style in the style bindings array that was passed into\n     *        `styling`.\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param i2 Static value used for concatenation only.\n     * @param v3 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵstylePropInterpolate4(prop, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, valueSuffix) {\n        var lView = getLView();\n        var interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n        stylePropInternal(getSelectedIndex(), prop, interpolatedValue, valueSuffix);\n        return ɵɵstylePropInterpolate4;\n    }\n    /**\n     *\n     * Update an interpolated style property on an element with 5 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 5 interpolated values in it:\n     *\n     * ```html\n     * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵstylePropInterpolate5(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n     * ```\n     *\n     * @param styleIndex Index of style to update. This index value refers to the\n     *        index of the style in the style bindings array that was passed into\n     *        `styling`.\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param i2 Static value used for concatenation only.\n     * @param v3 Value checked for change.\n     * @param i3 Static value used for concatenation only.\n     * @param v4 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵstylePropInterpolate5(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, valueSuffix) {\n        var lView = getLView();\n        var interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n        stylePropInternal(getSelectedIndex(), prop, interpolatedValue, valueSuffix);\n        return ɵɵstylePropInterpolate5;\n    }\n    /**\n     *\n     * Update an interpolated style property on an element with 6 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 6 interpolated values in it:\n     *\n     * ```html\n     * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵstylePropInterpolate6(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n     * ```\n     *\n     * @param styleIndex Index of style to update. This index value refers to the\n     *        index of the style in the style bindings array that was passed into\n     *        `styling`.\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param i2 Static value used for concatenation only.\n     * @param v3 Value checked for change.\n     * @param i3 Static value used for concatenation only.\n     * @param v4 Value checked for change.\n     * @param i4 Static value used for concatenation only.\n     * @param v5 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵstylePropInterpolate6(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, valueSuffix) {\n        var lView = getLView();\n        var interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n        stylePropInternal(getSelectedIndex(), prop, interpolatedValue, valueSuffix);\n        return ɵɵstylePropInterpolate6;\n    }\n    /**\n     *\n     * Update an interpolated style property on an element with 7 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 7 interpolated values in it:\n     *\n     * ```html\n     * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵstylePropInterpolate7(\n     *    0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n     * ```\n     *\n     * @param styleIndex Index of style to update. This index value refers to the\n     *        index of the style in the style bindings array that was passed into\n     *        `styling`.\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param i2 Static value used for concatenation only.\n     * @param v3 Value checked for change.\n     * @param i3 Static value used for concatenation only.\n     * @param v4 Value checked for change.\n     * @param i4 Static value used for concatenation only.\n     * @param v5 Value checked for change.\n     * @param i5 Static value used for concatenation only.\n     * @param v6 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵstylePropInterpolate7(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, valueSuffix) {\n        var lView = getLView();\n        var interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n        stylePropInternal(getSelectedIndex(), prop, interpolatedValue, valueSuffix);\n        return ɵɵstylePropInterpolate7;\n    }\n    /**\n     *\n     * Update an interpolated style property on an element with 8 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 8 interpolated values in it:\n     *\n     * ```html\n     * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵstylePropInterpolate8(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6,\n     * '-', v7, 'suffix');\n     * ```\n     *\n     * @param styleIndex Index of style to update. This index value refers to the\n     *        index of the style in the style bindings array that was passed into\n     *        `styling`.\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param i2 Static value used for concatenation only.\n     * @param v3 Value checked for change.\n     * @param i3 Static value used for concatenation only.\n     * @param v4 Value checked for change.\n     * @param i4 Static value used for concatenation only.\n     * @param v5 Value checked for change.\n     * @param i5 Static value used for concatenation only.\n     * @param v6 Value checked for change.\n     * @param i6 Static value used for concatenation only.\n     * @param v7 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵstylePropInterpolate8(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, valueSuffix) {\n        var lView = getLView();\n        var interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n        stylePropInternal(getSelectedIndex(), prop, interpolatedValue, valueSuffix);\n        return ɵɵstylePropInterpolate8;\n    }\n    /**\n     * Update an interpolated style property on an element with 8 or more bound values surrounded by\n     * text.\n     *\n     * Used when the number of interpolated values exceeds 7.\n     *\n     * ```html\n     * <div\n     *  style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\">\n     * </div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵstylePropInterpolateV(\n     *  0, ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n     *  'suffix']);\n     * ```\n     *\n     * @param styleIndex Index of style to update. This index value refers to the\n     *        index of the style in the style bindings array that was passed into\n     *        `styling`..\n     * @param values The a collection of values and the strings in-between those values, beginning with\n     * a string prefix and ending with a string suffix.\n     * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n     * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵstylePropInterpolateV(prop, values, valueSuffix) {\n        var lView = getLView();\n        var interpolatedValue = interpolationV(lView, values);\n        stylePropInternal(getSelectedIndex(), prop, interpolatedValue, valueSuffix);\n        return ɵɵstylePropInterpolateV;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Update a property on a host element. Only applies to native node properties, not inputs.\n     *\n     * Operates on the element selected by index via the {@link select} instruction.\n     *\n     * @param propName Name of property. Because it is going to DOM, this is not subject to\n     *        renaming as part of minification.\n     * @param value New value to write.\n     * @param sanitizer An optional function used to sanitize the value.\n     * @returns This function returns itself so that it may be chained\n     * (e.g. `property('name', ctx.name)('title', ctx.title)`)\n     *\n     * @codeGenApi\n     */\n    function ɵɵhostProperty(propName, value, sanitizer) {\n        var lView = getLView();\n        var bindingIndex = nextBindingIndex();\n        if (bindingUpdated(lView, bindingIndex, value)) {\n            var nodeIndex = getSelectedIndex();\n            elementPropertyInternal(lView, nodeIndex, propName, value, sanitizer, true);\n            ngDevMode && storePropertyBindingMetadata(lView[TVIEW].data, nodeIndex, propName, bindingIndex);\n        }\n        return ɵɵhostProperty;\n    }\n    /**\n     * Updates a synthetic host binding (e.g. `[@foo]`) on a component.\n     *\n     * This instruction is for compatibility purposes and is designed to ensure that a\n     * synthetic host binding (e.g. `@HostBinding('@foo')`) properly gets rendered in\n     * the component's renderer. Normally all host bindings are evaluated with the parent\n     * component's renderer, but, in the case of animation @triggers, they need to be\n     * evaluated with the sub component's renderer (because that's where the animation\n     * triggers are defined).\n     *\n     * Do not use this instruction as a replacement for `elementProperty`. This instruction\n     * only exists to ensure compatibility with the ViewEngine's host binding behavior.\n     *\n     * @param index The index of the element to update in the data array\n     * @param propName Name of property. Because it is going to DOM, this is not subject to\n     *        renaming as part of minification.\n     * @param value New value to write.\n     * @param sanitizer An optional function used to sanitize the value.\n     *\n     * @codeGenApi\n     */\n    function ɵɵupdateSyntheticHostBinding(propName, value, sanitizer) {\n        var lView = getLView();\n        var bindingIndex = nextBindingIndex();\n        if (bindingUpdated(lView, bindingIndex, value)) {\n            var nodeIndex = getSelectedIndex();\n            elementPropertyInternal(lView, nodeIndex, propName, value, sanitizer, true, loadComponentRenderer);\n            ngDevMode && storePropertyBindingMetadata(lView[TVIEW].data, nodeIndex, propName, bindingIndex);\n        }\n        return ɵɵupdateSyntheticHostBinding;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Returns the component instance associated with a given DOM host element.\n     * Elements which don't represent components return `null`.\n     *\n     * @param element Host DOM element from which the component should be retrieved.\n     *\n     * ```\n     * <my-app>\n     *   #VIEW\n     *     <div>\n     *       <child-comp></child-comp>\n     *     </div>\n     * </mp-app>\n     *\n     * expect(getComponent(<child-comp>) instanceof ChildComponent).toBeTruthy();\n     * expect(getComponent(<my-app>) instanceof MyApp).toBeTruthy();\n     * ```\n     *\n     * @publicApi\n     */\n    function getComponent(element) {\n        if (!(element instanceof Node))\n            throw new Error('Expecting instance of DOM Node');\n        var context = loadLContext(element, false);\n        if (context === null)\n            return null;\n        if (context.component === undefined) {\n            context.component = getComponentAtNodeIndex(context.nodeIndex, context.lView);\n        }\n        return context.component;\n    }\n    /**\n     * Returns the component instance associated with a given DOM host element.\n     * Elements which don't represent components return `null`.\n     *\n     * @param element Host DOM element from which the component should be retrieved.\n     *\n     * ```\n     * <my-app>\n     *   #VIEW\n     *     <div>\n     *       <child-comp></child-comp>\n     *     </div>\n     * </mp-app>\n     *\n     * expect(getComponent(<child-comp>) instanceof ChildComponent).toBeTruthy();\n     * expect(getComponent(<my-app>) instanceof MyApp).toBeTruthy();\n     * ```\n     *\n     * @publicApi\n     */\n    function getContext$1(element) {\n        if (!(element instanceof Node))\n            throw new Error('Expecting instance of DOM Node');\n        var context = loadLContext(element, false);\n        if (context === null)\n            return null;\n        return context.lView[CONTEXT];\n    }\n    /**\n     * Returns the component instance associated with view which owns the DOM element (`null`\n     * otherwise).\n     *\n     * @param element DOM element which is owned by an existing component's view.\n     *\n     * ```\n     * <my-app>\n     *   #VIEW\n     *     <div>\n     *       <child-comp></child-comp>\n     *     </div>\n     * </mp-app>\n     *\n     * expect(getViewComponent(<child-comp>) instanceof MyApp).toBeTruthy();\n     * expect(getViewComponent(<my-app>)).toEqual(null);\n     * ```\n     *\n     * @publicApi\n     */\n    function getViewComponent(element) {\n        var context = loadLContext(element, false);\n        if (context === null)\n            return null;\n        var lView = context.lView;\n        var parent;\n        ngDevMode && assertLView(lView);\n        while (lView[HOST] === null && (parent = getLViewParent(lView))) {\n            // As long as lView[HOST] is null we know we are part of sub-template such as `*ngIf`\n            lView = parent;\n        }\n        return lView[FLAGS] & 512 /* IsRoot */ ? null : lView[CONTEXT];\n    }\n    /**\n     * Retrieve all root components.\n     *\n     * Root components are those which have been bootstrapped by Angular.\n     *\n     * @param target A DOM element, component or directive instance.\n     *\n     * @publicApi\n     */\n    function getRootComponents(target) {\n        return __spread(getRootContext(target).components);\n    }\n    /**\n     * Retrieves an `Injector` associated with the element, component or directive.\n     *\n     * @param target A DOM element, component or directive instance.\n     *\n     * @publicApi\n     */\n    function getInjector(target) {\n        var context = loadLContext(target, false);\n        if (context === null)\n            return Injector.NULL;\n        var tNode = context.lView[TVIEW].data[context.nodeIndex];\n        return new NodeInjector(tNode, context.lView);\n    }\n    /**\n     * Retrieve a set of injection tokens at a given DOM node.\n     *\n     * @param element Element for which the injection tokens should be retrieved.\n     * @publicApi\n     */\n    function getInjectionTokens(element) {\n        var context = loadLContext(element, false);\n        if (context === null)\n            return [];\n        var lView = context.lView;\n        var tView = lView[TVIEW];\n        var tNode = tView.data[context.nodeIndex];\n        var providerTokens = [];\n        var startIndex = tNode.providerIndexes & 65535 /* ProvidersStartIndexMask */;\n        var endIndex = tNode.directiveEnd;\n        for (var i = startIndex; i < endIndex; i++) {\n            var value = tView.data[i];\n            if (isDirectiveDefHack(value)) {\n                // The fact that we sometimes store Type and sometimes DirectiveDef in this location is a\n                // design flaw.  We should always store same type so that we can be monomorphic. The issue\n                // is that for Components/Directives we store the def instead the type. The correct behavior\n                // is that we should always be storing injectable type in this location.\n                value = value.type;\n            }\n            providerTokens.push(value);\n        }\n        return providerTokens;\n    }\n    /**\n     * Retrieves directives associated with a given DOM host element.\n     *\n     * @param target A DOM element, component or directive instance.\n     *\n     * @publicApi\n     */\n    function getDirectives(target) {\n        var context = loadLContext(target);\n        if (context.directives === undefined) {\n            context.directives = getDirectivesAtNodeIndex(context.nodeIndex, context.lView, false);\n        }\n        return context.directives || [];\n    }\n    function loadLContext(target, throwOnNotFound) {\n        if (throwOnNotFound === void 0) { throwOnNotFound = true; }\n        var context = getLContext(target);\n        if (!context && throwOnNotFound) {\n            throw new Error(ngDevMode ? \"Unable to find context associated with \" + stringifyForError(target) :\n                'Invalid ng target');\n        }\n        return context;\n    }\n    /**\n     * Retrieve map of local references.\n     *\n     * The references are retrieved as a map of local reference name to element or directive instance.\n     *\n     * @param target A DOM element, component or directive instance.\n     *\n     * @publicApi\n     */\n    function getLocalRefs(target) {\n        var context = loadLContext(target, false);\n        if (context === null)\n            return {};\n        if (context.localRefs === undefined) {\n            context.localRefs = discoverLocalRefs(context.lView, context.nodeIndex);\n        }\n        return context.localRefs || {};\n    }\n    /**\n     * Retrieve the host element of the component.\n     *\n     * Use this function to retrieve the host element of the component. The host\n     * element is the element which the component is associated with.\n     *\n     * @param directive Component or Directive for which the host element should be retrieved.\n     *\n     * @publicApi\n     */\n    function getHostElement(directive) {\n        return getLContext(directive).native;\n    }\n    /**\n     * Retrieves the rendered text for a given component.\n     *\n     * This function retrieves the host element of a component and\n     * and then returns the `textContent` for that element. This implies\n     * that the text returned will include re-projected content of\n     * the component as well.\n     *\n     * @param component The component to return the content text for.\n     */\n    function getRenderedText(component) {\n        var hostElement = getHostElement(component);\n        return hostElement.textContent || '';\n    }\n    function loadLContextFromNode(node) {\n        if (!(node instanceof Node))\n            throw new Error('Expecting instance of DOM Node');\n        return loadLContext(node);\n    }\n    function isBrowserEvents(listener) {\n        // Browser events are those which don't have `useCapture` as boolean.\n        return typeof listener.useCapture === 'boolean';\n    }\n    /**\n     * Retrieves a list of DOM listeners.\n     *\n     * ```\n     * <my-app>\n     *   #VIEW\n     *     <div (click)=\"doSomething()\">\n     *     </div>\n     * </mp-app>\n     *\n     * expect(getListeners(<div>)).toEqual({\n     *   name: 'click',\n     *   element: <div>,\n     *   callback: () => doSomething(),\n     *   useCapture: false\n     * });\n     * ```\n     *\n     * @param element Element for which the DOM listeners should be retrieved.\n     * @publicApi\n     */\n    function getListeners(element) {\n        if (!(element instanceof Node))\n            throw new Error('Expecting instance of DOM Node');\n        var lContext = loadLContext(element, false);\n        if (lContext === null)\n            return [];\n        var lView = lContext.lView;\n        var tView = lView[TVIEW];\n        var lCleanup = lView[CLEANUP];\n        var tCleanup = tView.cleanup;\n        var listeners = [];\n        if (tCleanup && lCleanup) {\n            for (var i = 0; i < tCleanup.length;) {\n                var firstParam = tCleanup[i++];\n                var secondParam = tCleanup[i++];\n                if (typeof firstParam === 'string') {\n                    var name_1 = firstParam;\n                    var listenerElement = unwrapRNode(lView[secondParam]);\n                    var callback = lCleanup[tCleanup[i++]];\n                    var useCaptureOrIndx = tCleanup[i++];\n                    // if useCaptureOrIndx is boolean then report it as is.\n                    // if useCaptureOrIndx is positive number then it in unsubscribe method\n                    // if useCaptureOrIndx is negative number then it is a Subscription\n                    var useCapture = typeof useCaptureOrIndx === 'boolean' ?\n                        useCaptureOrIndx :\n                        (useCaptureOrIndx >= 0 ? false : null);\n                    if (element == listenerElement) {\n                        listeners.push({ element: element, name: name_1, callback: callback, useCapture: useCapture });\n                    }\n                }\n            }\n        }\n        listeners.sort(sortListeners);\n        return listeners;\n    }\n    function sortListeners(a, b) {\n        if (a.name == b.name)\n            return 0;\n        return a.name < b.name ? -1 : 1;\n    }\n    /**\n     * This function should not exist because it is megamorphic and only mostly correct.\n     *\n     * See call site for more info.\n     */\n    function isDirectiveDefHack(obj) {\n        return obj.type !== undefined && obj.template !== undefined && obj.declaredInputs !== undefined;\n    }\n    /**\n     * Returns the attached `DebugNode` instance for an element in the DOM.\n     *\n     * @param element DOM element which is owned by an existing component's view.\n     *\n     * @publicApi\n     */\n    function getDebugNode(element) {\n        var debugNode = null;\n        var lContext = loadLContextFromNode(element);\n        var lView = lContext.lView;\n        var nodeIndex = lContext.nodeIndex;\n        if (nodeIndex !== -1) {\n            var valueInLView = lView[nodeIndex];\n            // this means that value in the lView is a component with its own\n            // data. In this situation the TNode is not accessed at the same spot.\n            var tNode = isLView(valueInLView) ? valueInLView[T_HOST] :\n                getTNode(nodeIndex - HEADER_OFFSET, lView);\n            debugNode = buildDebugNode(tNode, lView, nodeIndex);\n        }\n        return debugNode;\n    }\n    /**\n     * Retrieve the component `LView` from component/element.\n     *\n     * NOTE: `LView` is a private and should not be leaked outside.\n     *       Don't export this method to `ng.*` on window.\n     *\n     * @param target Component or Element instance.\n     */\n    function getComponentLView(target) {\n        var lContext = loadLContext(target);\n        var nodeIndx = lContext.nodeIndex;\n        var lView = lContext.lView;\n        var componentLView = lView[nodeIndx];\n        ngDevMode && assertLView(componentLView);\n        return componentLView;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * This file introduces series of globally accessible debug tools\n     * to allow for the Angular debugging story to function.\n     *\n     * To see this in action run the following command:\n     *\n     *   bazel run --config=ivy\n     *   //packages/core/test/bundling/todo:devserver\n     *\n     *  Then load `localhost:5432` and start using the console tools.\n     */\n    /**\n     * This value reflects the property on the window where the dev\n     * tools are patched (window.ng).\n     * */\n    var GLOBAL_PUBLISH_EXPANDO_KEY = 'ng';\n    var _published = false;\n    /**\n     * Publishes a collection of default debug tools onto`window.ng`.\n     *\n     * These functions are available globally when Angular is in development\n     * mode and are automatically stripped away from prod mode is on.\n     */\n    function publishDefaultGlobalUtils() {\n        if (!_published) {\n            _published = true;\n            publishGlobalUtil('getComponent', getComponent);\n            publishGlobalUtil('getContext', getContext$1);\n            publishGlobalUtil('getListeners', getListeners);\n            publishGlobalUtil('getViewComponent', getViewComponent);\n            publishGlobalUtil('getHostElement', getHostElement);\n            publishGlobalUtil('getInjector', getInjector);\n            publishGlobalUtil('getRootComponents', getRootComponents);\n            publishGlobalUtil('getDirectives', getDirectives);\n            publishGlobalUtil('getDebugNode', getDebugNode);\n            publishGlobalUtil('markDirty', markDirty);\n        }\n    }\n    /**\n     * Publishes the given function to `window.ng` so that it can be\n     * used from the browser console when an application is not in production.\n     */\n    function publishGlobalUtil(name, fn) {\n        if (typeof COMPILED === 'undefined' || !COMPILED) {\n            // Note: we can't export `ng` when using closure enhanced optimization as:\n            // - closure declares globals itself for minified names, which sometimes clobber our `ng` global\n            // - we can't declare a closure extern as the namespace `ng` is already used within Google\n            //   for typings for AngularJS (via `goog.provide('ng....')`).\n            var w = _global;\n            ngDevMode && assertDefined(fn, 'function not defined');\n            if (w) {\n                var container = w[GLOBAL_PUBLISH_EXPANDO_KEY];\n                if (!container) {\n                    container = w[GLOBAL_PUBLISH_EXPANDO_KEY] = {};\n                }\n                container[name] = fn;\n            }\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // TODO: A hack to not pull in the NullInjector from @angular/core.\n    var NULL_INJECTOR$1 = {\n        get: function (token, notFoundValue) {\n            throw new Error('NullInjector: Not found: ' + stringifyForError(token));\n        }\n    };\n    /**\n     * Bootstraps a Component into an existing host element and returns an instance\n     * of the component.\n     *\n     * Use this function to bootstrap a component into the DOM tree. Each invocation\n     * of this function will create a separate tree of components, injectors and\n     * change detection cycles and lifetimes. To dynamically insert a new component\n     * into an existing tree such that it shares the same injection, change detection\n     * and object lifetime, use {@link ViewContainer#createComponent}.\n     *\n     * @param componentType Component to bootstrap\n     * @param options Optional parameters which control bootstrapping\n     */\n    function renderComponent$1(componentType /* Type as workaround for: Microsoft/TypeScript/issues/4881 */, opts) {\n        if (opts === void 0) { opts = {}; }\n        ngDevMode && publishDefaultGlobalUtils();\n        ngDevMode && assertComponentType(componentType);\n        var rendererFactory = opts.rendererFactory || domRendererFactory3;\n        var sanitizer = opts.sanitizer || null;\n        var componentDef = getComponentDef(componentType);\n        if (componentDef.type != componentType)\n            componentDef.type = componentType;\n        // The first index of the first selector is the tag name.\n        var componentTag = componentDef.selectors[0][0];\n        var hostRNode = locateHostElement(rendererFactory, opts.host || componentTag, componentDef.encapsulation);\n        var rootFlags = componentDef.onPush ? 64 /* Dirty */ | 512 /* IsRoot */ :\n            16 /* CheckAlways */ | 512 /* IsRoot */;\n        var rootContext = createRootContext(opts.scheduler, opts.playerHandler);\n        var renderer = rendererFactory.createRenderer(hostRNode, componentDef);\n        var rootTView = createTView(0 /* Root */, -1, null, 1, 0, null, null, null, null, null);\n        var rootView = createLView(null, rootTView, rootContext, rootFlags, null, null, rendererFactory, renderer, undefined, opts.injector || null);\n        enterView(rootView, null);\n        var component;\n        try {\n            if (rendererFactory.begin)\n                rendererFactory.begin();\n            var componentView = createRootComponentView(hostRNode, componentDef, rootView, rendererFactory, renderer, sanitizer);\n            component = createRootComponent(componentView, componentDef, rootView, rootContext, opts.hostFeatures || null);\n            // create mode pass\n            renderView(rootView, rootTView, null);\n            // update mode pass\n            refreshView(rootView, rootTView, null, null);\n        }\n        finally {\n            leaveView();\n            if (rendererFactory.end)\n                rendererFactory.end();\n        }\n        return component;\n    }\n    /**\n     * Creates the root component view and the root component node.\n     *\n     * @param rNode Render host element.\n     * @param def ComponentDef\n     * @param rootView The parent view where the host node is stored\n     * @param renderer The current renderer\n     * @param sanitizer The sanitizer, if provided\n     *\n     * @returns Component view created\n     */\n    function createRootComponentView(rNode, def, rootView, rendererFactory, renderer, sanitizer) {\n        var tView = rootView[TVIEW];\n        ngDevMode && assertDataInRange(rootView, 0 + HEADER_OFFSET);\n        rootView[0 + HEADER_OFFSET] = rNode;\n        var tNode = getOrCreateTNode(tView, null, 0, 3 /* Element */, null, null);\n        var componentView = createLView(rootView, getOrCreateTComponentView(def), null, def.onPush ? 64 /* Dirty */ : 16 /* CheckAlways */, rootView[HEADER_OFFSET], tNode, rendererFactory, renderer, sanitizer);\n        if (tView.firstCreatePass) {\n            diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, rootView), tView, def.type);\n            markAsComponentHost(tView, tNode);\n            initNodeFlags(tNode, rootView.length, 1);\n        }\n        addToViewTree(rootView, componentView);\n        // Store component view at node index, with node as the HOST\n        return rootView[HEADER_OFFSET] = componentView;\n    }\n    /**\n     * Creates a root component and sets it up with features and host bindings. Shared by\n     * renderComponent() and ViewContainerRef.createComponent().\n     */\n    function createRootComponent(componentView, componentDef, rootView, rootContext, hostFeatures) {\n        var tView = rootView[TVIEW];\n        // Create directive instance with factory() and store at next index in viewData\n        var component = instantiateRootComponent(tView, rootView, componentDef);\n        rootContext.components.push(component);\n        componentView[CONTEXT] = component;\n        hostFeatures && hostFeatures.forEach(function (feature) { return feature(component, componentDef); });\n        // We want to generate an empty QueryList for root content queries for backwards\n        // compatibility with ViewEngine.\n        if (componentDef.contentQueries) {\n            componentDef.contentQueries(1 /* Create */, component, rootView.length - 1);\n        }\n        var rootTNode = getPreviousOrParentTNode();\n        if (tView.firstCreatePass && componentDef.hostBindings) {\n            var elementIndex = rootTNode.index - HEADER_OFFSET;\n            setActiveHostElement(elementIndex);\n            incrementActiveDirectiveId();\n            var expando = tView.expandoInstructions;\n            invokeHostBindingsInCreationMode(componentDef, expando, component, rootTNode, tView.firstCreatePass);\n            setActiveHostElement(null);\n        }\n        return component;\n    }\n    function createRootContext(scheduler, playerHandler) {\n        return {\n            components: [],\n            scheduler: scheduler || defaultScheduler,\n            clean: CLEAN_PROMISE,\n            playerHandler: playerHandler || null,\n            flags: 0 /* Empty */\n        };\n    }\n    /**\n     * Used to enable lifecycle hooks on the root component.\n     *\n     * Include this feature when calling `renderComponent` if the root component\n     * you are rendering has lifecycle hooks defined. Otherwise, the hooks won't\n     * be called properly.\n     *\n     * Example:\n     *\n     * ```\n     * renderComponent(AppComponent, {hostFeatures: [LifecycleHooksFeature]});\n     * ```\n     */\n    function LifecycleHooksFeature(component, def) {\n        var rootTView = readPatchedLView(component)[TVIEW];\n        var dirIndex = rootTView.data.length - 1;\n        // TODO(misko): replace `as TNode` with createTNode call. (needs refactoring to lose dep on\n        // LNode).\n        registerPostOrderHooks(rootTView, { directiveStart: dirIndex, directiveEnd: dirIndex + 1 });\n    }\n    /**\n     * Wait on component until it is rendered.\n     *\n     * This function returns a `Promise` which is resolved when the component's\n     * change detection is executed. This is determined by finding the scheduler\n     * associated with the `component`'s render tree and waiting until the scheduler\n     * flushes. If nothing is scheduled, the function returns a resolved promise.\n     *\n     * Example:\n     * ```\n     * await whenRendered(myComponent);\n     * ```\n     *\n     * @param component Component to wait upon\n     * @returns Promise which resolves when the component is rendered.\n     */\n    function whenRendered(component) {\n        return getRootContext(component).clean;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function getSuperType(type) {\n        return Object.getPrototypeOf(type.prototype).constructor;\n    }\n    /**\n     * Merges the definition from a super class to a sub class.\n     * @param definition The definition that is a SubClass of another directive of component\n     *\n     * @codeGenApi\n     */\n    function ɵɵInheritDefinitionFeature(definition) {\n        var superType = getSuperType(definition.type);\n        var shouldInheritFields = true;\n        while (superType) {\n            var superDef = undefined;\n            if (isComponentDef(definition)) {\n                // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n                superDef = superType.ɵcmp || superType.ɵdir;\n            }\n            else {\n                if (superType.ɵcmp) {\n                    throw new Error('Directives cannot inherit Components');\n                }\n                // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n                superDef = superType.ɵdir;\n            }\n            if (superDef) {\n                if (shouldInheritFields) {\n                    // Some fields in the definition may be empty, if there were no values to put in them that\n                    // would've justified object creation. Unwrap them if necessary.\n                    var writeableDef = definition;\n                    writeableDef.inputs = maybeUnwrapEmpty(definition.inputs);\n                    writeableDef.declaredInputs = maybeUnwrapEmpty(definition.declaredInputs);\n                    writeableDef.outputs = maybeUnwrapEmpty(definition.outputs);\n                    // Merge hostBindings\n                    var superHostBindings = superDef.hostBindings;\n                    superHostBindings && inheritHostBindings(definition, superHostBindings);\n                    // Merge queries\n                    var superViewQuery = superDef.viewQuery;\n                    var superContentQueries = superDef.contentQueries;\n                    superViewQuery && inheritViewQuery(definition, superViewQuery);\n                    superContentQueries && inheritContentQueries(definition, superContentQueries);\n                    // Merge inputs and outputs\n                    fillProperties(definition.inputs, superDef.inputs);\n                    fillProperties(definition.declaredInputs, superDef.declaredInputs);\n                    fillProperties(definition.outputs, superDef.outputs);\n                    // Inherit hooks\n                    // Assume super class inheritance feature has already run.\n                    definition.afterContentChecked =\n                        definition.afterContentChecked || superDef.afterContentChecked;\n                    definition.afterContentInit = definition.afterContentInit || superDef.afterContentInit;\n                    definition.afterViewChecked = definition.afterViewChecked || superDef.afterViewChecked;\n                    definition.afterViewInit = definition.afterViewInit || superDef.afterViewInit;\n                    definition.doCheck = definition.doCheck || superDef.doCheck;\n                    definition.onDestroy = definition.onDestroy || superDef.onDestroy;\n                    definition.onInit = definition.onInit || superDef.onInit;\n                }\n                // Run parent features\n                var features = superDef.features;\n                if (features) {\n                    for (var i = 0; i < features.length; i++) {\n                        var feature = features[i];\n                        if (feature && feature.ngInherit) {\n                            feature(definition);\n                        }\n                        // If `InheritDefinitionFeature` is a part of the current `superDef`, it means that this\n                        // def already has all the necessary information inherited from its super class(es), so we\n                        // can stop merging fields from super classes. However we need to iterate through the\n                        // prototype chain to look for classes that might contain other \"features\" (like\n                        // NgOnChanges), which we should invoke for the original `definition`. We set the\n                        // `shouldInheritFields` flag to indicate that, essentially skipping fields inheritance\n                        // logic and only invoking functions from the \"features\" list.\n                        if (feature === ɵɵInheritDefinitionFeature) {\n                            shouldInheritFields = false;\n                        }\n                    }\n                }\n            }\n            superType = Object.getPrototypeOf(superType);\n        }\n    }\n    function maybeUnwrapEmpty(value) {\n        if (value === EMPTY_OBJ) {\n            return {};\n        }\n        else if (value === EMPTY_ARRAY) {\n            return [];\n        }\n        else {\n            return value;\n        }\n    }\n    function inheritViewQuery(definition, superViewQuery) {\n        var prevViewQuery = definition.viewQuery;\n        if (prevViewQuery) {\n            definition.viewQuery = function (rf, ctx) {\n                superViewQuery(rf, ctx);\n                prevViewQuery(rf, ctx);\n            };\n        }\n        else {\n            definition.viewQuery = superViewQuery;\n        }\n    }\n    function inheritContentQueries(definition, superContentQueries) {\n        var prevContentQueries = definition.contentQueries;\n        if (prevContentQueries) {\n            definition.contentQueries = function (rf, ctx, directiveIndex) {\n                superContentQueries(rf, ctx, directiveIndex);\n                prevContentQueries(rf, ctx, directiveIndex);\n            };\n        }\n        else {\n            definition.contentQueries = superContentQueries;\n        }\n    }\n    function inheritHostBindings(definition, superHostBindings) {\n        var prevHostBindings = definition.hostBindings;\n        if (prevHostBindings) {\n            definition.hostBindings = function (rf, ctx, elementIndex) {\n                superHostBindings(rf, ctx, elementIndex);\n                prevHostBindings(rf, ctx, elementIndex);\n            };\n        }\n        else {\n            definition.hostBindings = superHostBindings;\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Fields which exist on either directive or component definitions, and need to be copied from\n     * parent to child classes by the `ɵɵCopyDefinitionFeature`.\n     */\n    var COPY_DIRECTIVE_FIELDS = [\n        // The child class should use the providers of its parent.\n        'providersResolver',\n    ];\n    /**\n     * Fields which exist only on component definitions, and need to be copied from parent to child\n     * classes by the `ɵɵCopyDefinitionFeature`.\n     *\n     * The type here allows any field of `ComponentDef` which is not also a property of `DirectiveDef`,\n     * since those should go in `COPY_DIRECTIVE_FIELDS` above.\n     */\n    var COPY_COMPONENT_FIELDS = [\n        // The child class should use the template function of its parent, including all template\n        // semantics.\n        'template',\n        'decls',\n        'consts',\n        'vars',\n        'onPush',\n        'ngContentSelectors',\n        // The child class should use the CSS styles of its parent, including all styling semantics.\n        'styles',\n        'encapsulation',\n        // The child class should be checked by the runtime in the same way as its parent.\n        'schemas',\n    ];\n    /**\n     * Copies the fields not handled by the `ɵɵInheritDefinitionFeature` from the supertype of a\n     * definition.\n     *\n     * This exists primarily to support ngcc migration of an existing View Engine pattern, where an\n     * entire decorator is inherited from a parent to a child class. When ngcc detects this case, it\n     * generates a skeleton definition on the child class, and applies this feature.\n     *\n     * The `ɵɵCopyDefinitionFeature` then copies any needed fields from the parent class' definition,\n     * including things like the component template function.\n     *\n     * @param definition The definition of a child class which inherits from a parent class with its\n     * own definition.\n     *\n     * @codeGenApi\n     */\n    function ɵɵCopyDefinitionFeature(definition) {\n        var e_1, _a, e_2, _b;\n        var superType = getSuperType(definition.type);\n        var superDef = undefined;\n        if (isComponentDef(definition)) {\n            // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n            superDef = superType.ɵcmp;\n        }\n        else {\n            // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n            superDef = superType.ɵdir;\n        }\n        // Needed because `definition` fields are readonly.\n        var defAny = definition;\n        try {\n            // Copy over any fields that apply to either directives or components.\n            for (var COPY_DIRECTIVE_FIELDS_1 = __values(COPY_DIRECTIVE_FIELDS), COPY_DIRECTIVE_FIELDS_1_1 = COPY_DIRECTIVE_FIELDS_1.next(); !COPY_DIRECTIVE_FIELDS_1_1.done; COPY_DIRECTIVE_FIELDS_1_1 = COPY_DIRECTIVE_FIELDS_1.next()) {\n                var field = COPY_DIRECTIVE_FIELDS_1_1.value;\n                defAny[field] = superDef[field];\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (COPY_DIRECTIVE_FIELDS_1_1 && !COPY_DIRECTIVE_FIELDS_1_1.done && (_a = COPY_DIRECTIVE_FIELDS_1.return)) _a.call(COPY_DIRECTIVE_FIELDS_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        if (isComponentDef(superDef)) {\n            try {\n                // Copy over any component-specific fields.\n                for (var COPY_COMPONENT_FIELDS_1 = __values(COPY_COMPONENT_FIELDS), COPY_COMPONENT_FIELDS_1_1 = COPY_COMPONENT_FIELDS_1.next(); !COPY_COMPONENT_FIELDS_1_1.done; COPY_COMPONENT_FIELDS_1_1 = COPY_COMPONENT_FIELDS_1.next()) {\n                    var field = COPY_COMPONENT_FIELDS_1_1.value;\n                    defAny[field] = superDef[field];\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (COPY_COMPONENT_FIELDS_1_1 && !COPY_COMPONENT_FIELDS_1_1.done && (_b = COPY_COMPONENT_FIELDS_1.return)) _b.call(COPY_COMPONENT_FIELDS_1);\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Represents a basic change from a previous to a new value for a single\n     * property on a directive instance. Passed as a value in a\n     * {@link SimpleChanges} object to the `ngOnChanges` hook.\n     *\n     * @see `OnChanges`\n     *\n     * @publicApi\n     */\n    var SimpleChange = /** @class */ (function () {\n        function SimpleChange(previousValue, currentValue, firstChange) {\n            this.previousValue = previousValue;\n            this.currentValue = currentValue;\n            this.firstChange = firstChange;\n        }\n        /**\n         * Check whether the new value is the first value assigned.\n         */\n        SimpleChange.prototype.isFirstChange = function () { return this.firstChange; };\n        return SimpleChange;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var PRIVATE_PREFIX = '__ngOnChanges_';\n    /**\n     * The NgOnChangesFeature decorates a component with support for the ngOnChanges\n     * lifecycle hook, so it should be included in any component that implements\n     * that hook.\n     *\n     * If the component or directive uses inheritance, the NgOnChangesFeature MUST\n     * be included as a feature AFTER {@link InheritDefinitionFeature}, otherwise\n     * inherited properties will not be propagated to the ngOnChanges lifecycle\n     * hook.\n     *\n     * Example usage:\n     *\n     * ```\n     * static ɵcmp = defineComponent({\n     *   ...\n     *   inputs: {name: 'publicName'},\n     *   features: [NgOnChangesFeature()]\n     * });\n     * ```\n     *\n     * @codeGenApi\n     */\n    function ɵɵNgOnChangesFeature() {\n        // This option ensures that the ngOnChanges lifecycle hook will be inherited\n        // from superclasses (in InheritDefinitionFeature).\n        NgOnChangesFeatureImpl.ngInherit = true;\n        return NgOnChangesFeatureImpl;\n    }\n    function NgOnChangesFeatureImpl(definition) {\n        if (definition.type.prototype.ngOnChanges) {\n            definition.setInput = ngOnChangesSetInput;\n            definition.onChanges = wrapOnChanges();\n        }\n    }\n    function wrapOnChanges() {\n        return function wrapOnChangesHook_inPreviousChangesStorage() {\n            var simpleChangesStore = getSimpleChangesStore(this);\n            var current = simpleChangesStore && simpleChangesStore.current;\n            if (current) {\n                var previous = simpleChangesStore.previous;\n                if (previous === EMPTY_OBJ) {\n                    simpleChangesStore.previous = current;\n                }\n                else {\n                    // New changes are copied to the previous store, so that we don't lose history for inputs\n                    // which were not changed this time\n                    for (var key in current) {\n                        previous[key] = current[key];\n                    }\n                }\n                simpleChangesStore.current = null;\n                this.ngOnChanges(current);\n            }\n        };\n    }\n    function ngOnChangesSetInput(instance, value, publicName, privateName) {\n        var simpleChangesStore = getSimpleChangesStore(instance) ||\n            setSimpleChangesStore(instance, { previous: EMPTY_OBJ, current: null });\n        var current = simpleChangesStore.current || (simpleChangesStore.current = {});\n        var previous = simpleChangesStore.previous;\n        var declaredName = this.declaredInputs[publicName];\n        var previousChange = previous[declaredName];\n        current[declaredName] = new SimpleChange(previousChange && previousChange.currentValue, value, previous === EMPTY_OBJ);\n        instance[privateName] = value;\n    }\n    var SIMPLE_CHANGES_STORE = '__ngSimpleChanges__';\n    function getSimpleChangesStore(instance) {\n        return instance[SIMPLE_CHANGES_STORE] || null;\n    }\n    function setSimpleChangesStore(instance, store) {\n        return instance[SIMPLE_CHANGES_STORE] = store;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Resolves the providers which are defined in the DirectiveDef.\n     *\n     * When inserting the tokens and the factories in their respective arrays, we can assume that\n     * this method is called first for the component (if any), and then for other directives on the same\n     * node.\n     * As a consequence,the providers are always processed in that order:\n     * 1) The view providers of the component\n     * 2) The providers of the component\n     * 3) The providers of the other directives\n     * This matches the structure of the injectables arrays of a view (for each node).\n     * So the tokens and the factories can be pushed at the end of the arrays, except\n     * in one case for multi providers.\n     *\n     * @param def the directive definition\n     * @param providers: Array of `providers`.\n     * @param viewProviders: Array of `viewProviders`.\n     */\n    function providersResolver(def, providers, viewProviders) {\n        var lView = getLView();\n        var tView = lView[TVIEW];\n        if (tView.firstCreatePass) {\n            var isComponent = isComponentDef(def);\n            // The list of view providers is processed first, and the flags are updated\n            resolveProvider$1(viewProviders, tView.data, tView.blueprint, isComponent, true);\n            // Then, the list of providers is processed, and the flags are updated\n            resolveProvider$1(providers, tView.data, tView.blueprint, isComponent, false);\n        }\n    }\n    /**\n     * Resolves a provider and publishes it to the DI system.\n     */\n    function resolveProvider$1(provider, tInjectables, lInjectablesBlueprint, isComponent, isViewProvider) {\n        provider = resolveForwardRef(provider);\n        if (Array.isArray(provider)) {\n            // Recursively call `resolveProvider`\n            // Recursion is OK in this case because this code will not be in hot-path once we implement\n            // cloning of the initial state.\n            for (var i = 0; i < provider.length; i++) {\n                resolveProvider$1(provider[i], tInjectables, lInjectablesBlueprint, isComponent, isViewProvider);\n            }\n        }\n        else {\n            var lView = getLView();\n            var tView = lView[TVIEW];\n            var token = isTypeProvider(provider) ? provider : resolveForwardRef(provider.provide);\n            var providerFactory = providerToFactory(provider);\n            var tNode = getPreviousOrParentTNode();\n            var beginIndex = tNode.providerIndexes & 65535 /* ProvidersStartIndexMask */;\n            var endIndex = tNode.directiveStart;\n            var cptViewProvidersCount = tNode.providerIndexes >> 16 /* CptViewProvidersCountShift */;\n            if (isClassProvider(provider) || isTypeProvider(provider)) {\n                var prototype = (provider.useClass || provider).prototype;\n                var ngOnDestroy = prototype.ngOnDestroy;\n                if (ngOnDestroy) {\n                    (tView.destroyHooks || (tView.destroyHooks = [])).push(tInjectables.length, ngOnDestroy);\n                }\n            }\n            if (isTypeProvider(provider) || !provider.multi) {\n                // Single provider case: the factory is created and pushed immediately\n                var factory = new NodeInjectorFactory(providerFactory, isViewProvider, ɵɵdirectiveInject);\n                var existingFactoryIndex = indexOf(token, tInjectables, isViewProvider ? beginIndex : beginIndex + cptViewProvidersCount, endIndex);\n                if (existingFactoryIndex == -1) {\n                    diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, token);\n                    tInjectables.push(token);\n                    tNode.directiveStart++;\n                    tNode.directiveEnd++;\n                    if (isViewProvider) {\n                        tNode.providerIndexes += 65536 /* CptViewProvidersCountShifter */;\n                    }\n                    lInjectablesBlueprint.push(factory);\n                    lView.push(factory);\n                }\n                else {\n                    lInjectablesBlueprint[existingFactoryIndex] = factory;\n                    lView[existingFactoryIndex] = factory;\n                }\n            }\n            else {\n                // Multi provider case:\n                // We create a multi factory which is going to aggregate all the values.\n                // Since the output of such a factory depends on content or view injection,\n                // we create two of them, which are linked together.\n                //\n                // The first one (for view providers) is always in the first block of the injectables array,\n                // and the second one (for providers) is always in the second block.\n                // This is important because view providers have higher priority. When a multi token\n                // is being looked up, the view providers should be found first.\n                // Note that it is not possible to have a multi factory in the third block (directive block).\n                //\n                // The algorithm to process multi providers is as follows:\n                // 1) If the multi provider comes from the `viewProviders` of the component:\n                //   a) If the special view providers factory doesn't exist, it is created and pushed.\n                //   b) Else, the multi provider is added to the existing multi factory.\n                // 2) If the multi provider comes from the `providers` of the component or of another\n                // directive:\n                //   a) If the multi factory doesn't exist, it is created and provider pushed into it.\n                //      It is also linked to the multi factory for view providers, if it exists.\n                //   b) Else, the multi provider is added to the existing multi factory.\n                var existingProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex + cptViewProvidersCount, endIndex);\n                var existingViewProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex, beginIndex + cptViewProvidersCount);\n                var doesProvidersFactoryExist = existingProvidersFactoryIndex >= 0 &&\n                    lInjectablesBlueprint[existingProvidersFactoryIndex];\n                var doesViewProvidersFactoryExist = existingViewProvidersFactoryIndex >= 0 &&\n                    lInjectablesBlueprint[existingViewProvidersFactoryIndex];\n                if (isViewProvider && !doesViewProvidersFactoryExist ||\n                    !isViewProvider && !doesProvidersFactoryExist) {\n                    // Cases 1.a and 2.a\n                    diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, token);\n                    var factory = multiFactory(isViewProvider ? multiViewProvidersFactoryResolver : multiProvidersFactoryResolver, lInjectablesBlueprint.length, isViewProvider, isComponent, providerFactory);\n                    if (!isViewProvider && doesViewProvidersFactoryExist) {\n                        lInjectablesBlueprint[existingViewProvidersFactoryIndex].providerFactory = factory;\n                    }\n                    tInjectables.push(token);\n                    tNode.directiveStart++;\n                    tNode.directiveEnd++;\n                    if (isViewProvider) {\n                        tNode.providerIndexes += 65536 /* CptViewProvidersCountShifter */;\n                    }\n                    lInjectablesBlueprint.push(factory);\n                    lView.push(factory);\n                }\n                else {\n                    // Cases 1.b and 2.b\n                    multiFactoryAdd(lInjectablesBlueprint[isViewProvider ? existingViewProvidersFactoryIndex : existingProvidersFactoryIndex], providerFactory, !isViewProvider && isComponent);\n                }\n                if (!isViewProvider && isComponent && doesViewProvidersFactoryExist) {\n                    lInjectablesBlueprint[existingViewProvidersFactoryIndex].componentProviders++;\n                }\n            }\n        }\n    }\n    /**\n     * Add a factory in a multi factory.\n     */\n    function multiFactoryAdd(multiFactory, factory, isComponentProvider) {\n        multiFactory.multi.push(factory);\n        if (isComponentProvider) {\n            multiFactory.componentProviders++;\n        }\n    }\n    /**\n     * Returns the index of item in the array, but only in the begin to end range.\n     */\n    function indexOf(item, arr, begin, end) {\n        for (var i = begin; i < end; i++) {\n            if (arr[i] === item)\n                return i;\n        }\n        return -1;\n    }\n    /**\n     * Use this with `multi` `providers`.\n     */\n    function multiProvidersFactoryResolver(_, tData, lData, tNode) {\n        return multiResolve(this.multi, []);\n    }\n    /**\n     * Use this with `multi` `viewProviders`.\n     *\n     * This factory knows how to concatenate itself with the existing `multi` `providers`.\n     */\n    function multiViewProvidersFactoryResolver(_, tData, lView, tNode) {\n        var factories = this.multi;\n        var result;\n        if (this.providerFactory) {\n            var componentCount = this.providerFactory.componentProviders;\n            var multiProviders = getNodeInjectable(lView, lView[TVIEW], this.providerFactory.index, tNode);\n            // Copy the section of the array which contains `multi` `providers` from the component\n            result = multiProviders.slice(0, componentCount);\n            // Insert the `viewProvider` instances.\n            multiResolve(factories, result);\n            // Copy the section of the array which contains `multi` `providers` from other directives\n            for (var i = componentCount; i < multiProviders.length; i++) {\n                result.push(multiProviders[i]);\n            }\n        }\n        else {\n            result = [];\n            // Insert the `viewProvider` instances.\n            multiResolve(factories, result);\n        }\n        return result;\n    }\n    /**\n     * Maps an array of factories into an array of values.\n     */\n    function multiResolve(factories, result) {\n        for (var i = 0; i < factories.length; i++) {\n            var factory = factories[i];\n            result.push(factory());\n        }\n        return result;\n    }\n    /**\n     * Creates a multi factory.\n     */\n    function multiFactory(factoryFn, index, isViewProvider, isComponent, f) {\n        var factory = new NodeInjectorFactory(factoryFn, isViewProvider, ɵɵdirectiveInject);\n        factory.multi = [];\n        factory.index = index;\n        factory.componentProviders = 0;\n        multiFactoryAdd(factory, f, isComponent && !isViewProvider);\n        return factory;\n    }\n\n    /**\n     * This feature resolves the providers of a directive (or component),\n     * and publish them into the DI system, making it visible to others for injection.\n     *\n     * For example:\n     * ```ts\n     * class ComponentWithProviders {\n     *   constructor(private greeter: GreeterDE) {}\n     *\n     *   static ɵcmp = defineComponent({\n     *     type: ComponentWithProviders,\n     *     selectors: [['component-with-providers']],\n     *    factory: () => new ComponentWithProviders(directiveInject(GreeterDE as any)),\n     *    decls: 1,\n     *    vars: 1,\n     *    template: function(fs: RenderFlags, ctx: ComponentWithProviders) {\n     *      if (fs & RenderFlags.Create) {\n     *        ɵɵtext(0);\n     *      }\n     *      if (fs & RenderFlags.Update) {\n     *        ɵɵtextInterpolate(ctx.greeter.greet());\n     *      }\n     *    },\n     *    features: [ProvidersFeature([GreeterDE])]\n     *  });\n     * }\n     * ```\n     *\n     * @param definition\n     *\n     * @codeGenApi\n     */\n    function ɵɵProvidersFeature(providers, viewProviders) {\n        if (viewProviders === void 0) { viewProviders = []; }\n        return function (definition) {\n            definition.providersResolver =\n                function (def, processProvidersFn) {\n                    return providersResolver(def, //\n                    processProvidersFn ? processProvidersFn(providers) : providers, //\n                    viewProviders);\n                };\n        };\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Represents a component created by a `ComponentFactory`.\n     * Provides access to the component instance and related objects,\n     * and provides the means of destroying the instance.\n     *\n     * @publicApi\n     */\n    var ComponentRef = /** @class */ (function () {\n        function ComponentRef() {\n        }\n        return ComponentRef;\n    }());\n    /**\n     * Base class for a factory that can create a component dynamically.\n     * Instantiate a factory for a given type of component with `resolveComponentFactory()`.\n     * Use the resulting `ComponentFactory.create()` method to create a component of that type.\n     *\n     * @see [Dynamic Components](guide/dynamic-component-loader)\n     *\n     * @publicApi\n     */\n    var ComponentFactory = /** @class */ (function () {\n        function ComponentFactory() {\n        }\n        return ComponentFactory;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function noComponentFactoryError(component) {\n        var error = Error(\"No component factory found for \" + stringify(component) + \". Did you add it to @NgModule.entryComponents?\");\n        error[ERROR_COMPONENT] = component;\n        return error;\n    }\n    var ERROR_COMPONENT = 'ngComponent';\n    function getComponent$1(error) {\n        return error[ERROR_COMPONENT];\n    }\n    var _NullComponentFactoryResolver = /** @class */ (function () {\n        function _NullComponentFactoryResolver() {\n        }\n        _NullComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {\n            throw noComponentFactoryError(component);\n        };\n        return _NullComponentFactoryResolver;\n    }());\n    /**\n     * A simple registry that maps `Components` to generated `ComponentFactory` classes\n     * that can be used to create instances of components.\n     * Use to obtain the factory for a given component type,\n     * then use the factory's `create()` method to create a component of that type.\n     *\n     * @see [Dynamic Components](guide/dynamic-component-loader)\n     * @publicApi\n     */\n    var ComponentFactoryResolver = /** @class */ (function () {\n        function ComponentFactoryResolver() {\n        }\n        ComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();\n        return ComponentFactoryResolver;\n    }());\n    var CodegenComponentFactoryResolver = /** @class */ (function () {\n        function CodegenComponentFactoryResolver(factories, _parent, _ngModule) {\n            this._parent = _parent;\n            this._ngModule = _ngModule;\n            this._factories = new Map();\n            for (var i = 0; i < factories.length; i++) {\n                var factory = factories[i];\n                this._factories.set(factory.componentType, factory);\n            }\n        }\n        CodegenComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {\n            var factory = this._factories.get(component);\n            if (!factory && this._parent) {\n                factory = this._parent.resolveComponentFactory(component);\n            }\n            if (!factory) {\n                throw noComponentFactoryError(component);\n            }\n            return new ComponentFactoryBoundToModule(factory, this._ngModule);\n        };\n        return CodegenComponentFactoryResolver;\n    }());\n    var ComponentFactoryBoundToModule = /** @class */ (function (_super) {\n        __extends(ComponentFactoryBoundToModule, _super);\n        function ComponentFactoryBoundToModule(factory, ngModule) {\n            var _this = _super.call(this) || this;\n            _this.factory = factory;\n            _this.ngModule = ngModule;\n            _this.selector = factory.selector;\n            _this.componentType = factory.componentType;\n            _this.ngContentSelectors = factory.ngContentSelectors;\n            _this.inputs = factory.inputs;\n            _this.outputs = factory.outputs;\n            return _this;\n        }\n        ComponentFactoryBoundToModule.prototype.create = function (injector, projectableNodes, rootSelectorOrNode, ngModule) {\n            return this.factory.create(injector, projectableNodes, rootSelectorOrNode, ngModule || this.ngModule);\n        };\n        return ComponentFactoryBoundToModule;\n    }(ComponentFactory));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function noop() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        // Do nothing.\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A wrapper around a native element inside of a View.\n     *\n     * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM\n     * element.\n     *\n     * @security Permitting direct access to the DOM can make your application more vulnerable to\n     * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the\n     * [Security Guide](http://g.co/ng/security).\n     *\n     * @publicApi\n     */\n    // Note: We don't expose things like `Injector`, `ViewContainer`, ... here,\n    // i.e. users have to ask for what they need. With that, we can build better analysis tools\n    // and could do better codegen in the future.\n    var ElementRef = /** @class */ (function () {\n        function ElementRef(nativeElement) {\n            this.nativeElement = nativeElement;\n        }\n        /**\n         * @internal\n         * @nocollapse\n         */\n        ElementRef.__NG_ELEMENT_ID__ = function () { return SWITCH_ELEMENT_REF_FACTORY(ElementRef); };\n        return ElementRef;\n    }());\n    var SWITCH_ELEMENT_REF_FACTORY__POST_R3__ = injectElementRef;\n    var SWITCH_ELEMENT_REF_FACTORY__PRE_R3__ = noop;\n    var SWITCH_ELEMENT_REF_FACTORY = SWITCH_ELEMENT_REF_FACTORY__POST_R3__;\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var Renderer2Interceptor = new InjectionToken('Renderer2Interceptor');\n    /**\n     * Creates and initializes a custom renderer that implements the `Renderer2` base class.\n     *\n     * @publicApi\n     */\n    var RendererFactory2 = /** @class */ (function () {\n        function RendererFactory2() {\n        }\n        return RendererFactory2;\n    }());\n    (function (RendererStyleFlags2) {\n        /**\n         * Marks a style as important.\n         */\n        RendererStyleFlags2[RendererStyleFlags2[\"Important\"] = 1] = \"Important\";\n        /**\n         * Marks a style as using dash case naming (this-is-dash-case).\n         */\n        RendererStyleFlags2[RendererStyleFlags2[\"DashCase\"] = 2] = \"DashCase\";\n    })(exports.RendererStyleFlags2 || (exports.RendererStyleFlags2 = {}));\n    /**\n     * Extend this base class to implement custom rendering. By default, Angular\n     * renders a template into DOM. You can use custom rendering to intercept\n     * rendering calls, or to render to something other than DOM.\n     *\n     * Create your custom renderer using `RendererFactory2`.\n     *\n     * Use a custom renderer to bypass Angular's templating and\n     * make custom UI changes that can't be expressed declaratively.\n     * For example if you need to set a property or an attribute whose name is\n     * not statically known, use the `setProperty()` or\n     * `setAttribute()` method.\n     *\n     * @publicApi\n     */\n    var Renderer2 = /** @class */ (function () {\n        function Renderer2() {\n        }\n        /**\n         * @internal\n         * @nocollapse\n         */\n        Renderer2.__NG_ELEMENT_ID__ = function () { return SWITCH_RENDERER2_FACTORY(); };\n        return Renderer2;\n    }());\n    var SWITCH_RENDERER2_FACTORY__POST_R3__ = injectRenderer2;\n    var SWITCH_RENDERER2_FACTORY__PRE_R3__ = noop;\n    var SWITCH_RENDERER2_FACTORY = SWITCH_RENDERER2_FACTORY__POST_R3__;\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Sanitizer is used by the views to sanitize potentially dangerous values.\n     *\n     * @publicApi\n     */\n    var Sanitizer = /** @class */ (function () {\n        function Sanitizer() {\n        }\n        /** @nocollapse */\n        Sanitizer.ɵprov = ɵɵdefineInjectable({\n            token: Sanitizer,\n            providedIn: 'root',\n            factory: function () { return null; },\n        });\n        return Sanitizer;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * @description Represents the version of Angular\n     *\n     * @publicApi\n     */\n    var Version = /** @class */ (function () {\n        function Version(full) {\n            this.full = full;\n            this.major = full.split('.')[0];\n            this.minor = full.split('.')[1];\n            this.patch = full.split('.').slice(2).join('.');\n        }\n        return Version;\n    }());\n    /**\n     * @publicApi\n     */\n    var VERSION = new Version('0.0.0');\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var DefaultIterableDifferFactory = /** @class */ (function () {\n        function DefaultIterableDifferFactory() {\n        }\n        DefaultIterableDifferFactory.prototype.supports = function (obj) { return isListLikeIterable$1(obj); };\n        DefaultIterableDifferFactory.prototype.create = function (trackByFn) {\n            return new DefaultIterableDiffer(trackByFn);\n        };\n        return DefaultIterableDifferFactory;\n    }());\n    var trackByIdentity = function (index, item) { return item; };\n    /**\n     * @deprecated v4.0.0 - Should not be part of public API.\n     * @publicApi\n     */\n    var DefaultIterableDiffer = /** @class */ (function () {\n        function DefaultIterableDiffer(trackByFn) {\n            this.length = 0;\n            // Keeps track of the used records at any point in time (during & across `_check()` calls)\n            this._linkedRecords = null;\n            // Keeps track of the removed records at any point in time during `_check()` calls.\n            this._unlinkedRecords = null;\n            this._previousItHead = null;\n            this._itHead = null;\n            this._itTail = null;\n            this._additionsHead = null;\n            this._additionsTail = null;\n            this._movesHead = null;\n            this._movesTail = null;\n            this._removalsHead = null;\n            this._removalsTail = null;\n            // Keeps track of records where custom track by is the same, but item identity has changed\n            this._identityChangesHead = null;\n            this._identityChangesTail = null;\n            this._trackByFn = trackByFn || trackByIdentity;\n        }\n        DefaultIterableDiffer.prototype.forEachItem = function (fn) {\n            var record;\n            for (record = this._itHead; record !== null; record = record._next) {\n                fn(record);\n            }\n        };\n        DefaultIterableDiffer.prototype.forEachOperation = function (fn) {\n            var nextIt = this._itHead;\n            var nextRemove = this._removalsHead;\n            var addRemoveOffset = 0;\n            var moveOffsets = null;\n            while (nextIt || nextRemove) {\n                // Figure out which is the next record to process\n                // Order: remove, add, move\n                var record = !nextRemove ||\n                    nextIt &&\n                        nextIt.currentIndex <\n                            getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ?\n                    nextIt :\n                    nextRemove;\n                var adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);\n                var currentIndex = record.currentIndex;\n                // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary\n                if (record === nextRemove) {\n                    addRemoveOffset--;\n                    nextRemove = nextRemove._nextRemoved;\n                }\n                else {\n                    nextIt = nextIt._next;\n                    if (record.previousIndex == null) {\n                        addRemoveOffset++;\n                    }\n                    else {\n                        // INVARIANT:  currentIndex < previousIndex\n                        if (!moveOffsets)\n                            moveOffsets = [];\n                        var localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;\n                        var localCurrentIndex = currentIndex - addRemoveOffset;\n                        if (localMovePreviousIndex != localCurrentIndex) {\n                            for (var i = 0; i < localMovePreviousIndex; i++) {\n                                var offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);\n                                var index = offset + i;\n                                if (localCurrentIndex <= index && index < localMovePreviousIndex) {\n                                    moveOffsets[i] = offset + 1;\n                                }\n                            }\n                            var previousIndex = record.previousIndex;\n                            moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;\n                        }\n                    }\n                }\n                if (adjPreviousIndex !== currentIndex) {\n                    fn(record, adjPreviousIndex, currentIndex);\n                }\n            }\n        };\n        DefaultIterableDiffer.prototype.forEachPreviousItem = function (fn) {\n            var record;\n            for (record = this._previousItHead; record !== null; record = record._nextPrevious) {\n                fn(record);\n            }\n        };\n        DefaultIterableDiffer.prototype.forEachAddedItem = function (fn) {\n            var record;\n            for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n                fn(record);\n            }\n        };\n        DefaultIterableDiffer.prototype.forEachMovedItem = function (fn) {\n            var record;\n            for (record = this._movesHead; record !== null; record = record._nextMoved) {\n                fn(record);\n            }\n        };\n        DefaultIterableDiffer.prototype.forEachRemovedItem = function (fn) {\n            var record;\n            for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n                fn(record);\n            }\n        };\n        DefaultIterableDiffer.prototype.forEachIdentityChange = function (fn) {\n            var record;\n            for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {\n                fn(record);\n            }\n        };\n        DefaultIterableDiffer.prototype.diff = function (collection) {\n            if (collection == null)\n                collection = [];\n            if (!isListLikeIterable$1(collection)) {\n                throw new Error(\"Error trying to diff '\" + stringify(collection) + \"'. Only arrays and iterables are allowed\");\n            }\n            if (this.check(collection)) {\n                return this;\n            }\n            else {\n                return null;\n            }\n        };\n        DefaultIterableDiffer.prototype.onDestroy = function () { };\n        DefaultIterableDiffer.prototype.check = function (collection) {\n            var _this = this;\n            this._reset();\n            var record = this._itHead;\n            var mayBeDirty = false;\n            var index;\n            var item;\n            var itemTrackBy;\n            if (Array.isArray(collection)) {\n                this.length = collection.length;\n                for (var index_1 = 0; index_1 < this.length; index_1++) {\n                    item = collection[index_1];\n                    itemTrackBy = this._trackByFn(index_1, item);\n                    if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n                        record = this._mismatch(record, item, itemTrackBy, index_1);\n                        mayBeDirty = true;\n                    }\n                    else {\n                        if (mayBeDirty) {\n                            // TODO(misko): can we limit this to duplicates only?\n                            record = this._verifyReinsertion(record, item, itemTrackBy, index_1);\n                        }\n                        if (!looseIdentical(record.item, item))\n                            this._addIdentityChange(record, item);\n                    }\n                    record = record._next;\n                }\n            }\n            else {\n                index = 0;\n                iterateListLike$1(collection, function (item) {\n                    itemTrackBy = _this._trackByFn(index, item);\n                    if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n                        record = _this._mismatch(record, item, itemTrackBy, index);\n                        mayBeDirty = true;\n                    }\n                    else {\n                        if (mayBeDirty) {\n                            // TODO(misko): can we limit this to duplicates only?\n                            record = _this._verifyReinsertion(record, item, itemTrackBy, index);\n                        }\n                        if (!looseIdentical(record.item, item))\n                            _this._addIdentityChange(record, item);\n                    }\n                    record = record._next;\n                    index++;\n                });\n                this.length = index;\n            }\n            this._truncate(record);\n            this.collection = collection;\n            return this.isDirty;\n        };\n        Object.defineProperty(DefaultIterableDiffer.prototype, \"isDirty\", {\n            /* CollectionChanges is considered dirty if it has any additions, moves, removals, or identity\n             * changes.\n             */\n            get: function () {\n                return this._additionsHead !== null || this._movesHead !== null ||\n                    this._removalsHead !== null || this._identityChangesHead !== null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Reset the state of the change objects to show no changes. This means set previousKey to\n         * currentKey, and clear all of the queues (additions, moves, removals).\n         * Set the previousIndexes of moved and added items to their currentIndexes\n         * Reset the list of additions, moves and removals\n         *\n         * @internal\n         */\n        DefaultIterableDiffer.prototype._reset = function () {\n            if (this.isDirty) {\n                var record = void 0;\n                var nextRecord = void 0;\n                for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {\n                    record._nextPrevious = record._next;\n                }\n                for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n                    record.previousIndex = record.currentIndex;\n                }\n                this._additionsHead = this._additionsTail = null;\n                for (record = this._movesHead; record !== null; record = nextRecord) {\n                    record.previousIndex = record.currentIndex;\n                    nextRecord = record._nextMoved;\n                }\n                this._movesHead = this._movesTail = null;\n                this._removalsHead = this._removalsTail = null;\n                this._identityChangesHead = this._identityChangesTail = null;\n                // TODO(vicb): when assert gets supported\n                // assert(!this.isDirty);\n            }\n        };\n        /**\n         * This is the core function which handles differences between collections.\n         *\n         * - `record` is the record which we saw at this position last time. If null then it is a new\n         *   item.\n         * - `item` is the current item in the collection\n         * - `index` is the position of the item in the collection\n         *\n         * @internal\n         */\n        DefaultIterableDiffer.prototype._mismatch = function (record, item, itemTrackBy, index) {\n            // The previous record after which we will append the current one.\n            var previousRecord;\n            if (record === null) {\n                previousRecord = this._itTail;\n            }\n            else {\n                previousRecord = record._prev;\n                // Remove the record from the collection since we know it does not match the item.\n                this._remove(record);\n            }\n            // Attempt to see if we have seen the item before.\n            record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);\n            if (record !== null) {\n                // We have seen this before, we need to move it forward in the collection.\n                // But first we need to check if identity changed, so we can update in view if necessary\n                if (!looseIdentical(record.item, item))\n                    this._addIdentityChange(record, item);\n                this._moveAfter(record, previousRecord, index);\n            }\n            else {\n                // Never seen it, check evicted list.\n                record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n                if (record !== null) {\n                    // It is an item which we have evicted earlier: reinsert it back into the list.\n                    // But first we need to check if identity changed, so we can update in view if necessary\n                    if (!looseIdentical(record.item, item))\n                        this._addIdentityChange(record, item);\n                    this._reinsertAfter(record, previousRecord, index);\n                }\n                else {\n                    // It is a new item: add it.\n                    record =\n                        this._addAfter(new IterableChangeRecord_(item, itemTrackBy), previousRecord, index);\n                }\n            }\n            return record;\n        };\n        /**\n         * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\n         *\n         * Use case: `[a, a]` => `[b, a, a]`\n         *\n         * If we did not have this check then the insertion of `b` would:\n         *   1) evict first `a`\n         *   2) insert `b` at `0` index.\n         *   3) leave `a` at index `1` as is. <-- this is wrong!\n         *   3) reinsert `a` at index 2. <-- this is wrong!\n         *\n         * The correct behavior is:\n         *   1) evict first `a`\n         *   2) insert `b` at `0` index.\n         *   3) reinsert `a` at index 1.\n         *   3) move `a` at from `1` to `2`.\n         *\n         *\n         * Double check that we have not evicted a duplicate item. We need to check if the item type may\n         * have already been removed:\n         * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\n         * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\n         * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\n         * at the end.\n         *\n         * @internal\n         */\n        DefaultIterableDiffer.prototype._verifyReinsertion = function (record, item, itemTrackBy, index) {\n            var reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n            if (reinsertRecord !== null) {\n                record = this._reinsertAfter(reinsertRecord, record._prev, index);\n            }\n            else if (record.currentIndex != index) {\n                record.currentIndex = index;\n                this._addToMoves(record, index);\n            }\n            return record;\n        };\n        /**\n         * Get rid of any excess {@link IterableChangeRecord_}s from the previous collection\n         *\n         * - `record` The first excess {@link IterableChangeRecord_}.\n         *\n         * @internal\n         */\n        DefaultIterableDiffer.prototype._truncate = function (record) {\n            // Anything after that needs to be removed;\n            while (record !== null) {\n                var nextRecord = record._next;\n                this._addToRemovals(this._unlink(record));\n                record = nextRecord;\n            }\n            if (this._unlinkedRecords !== null) {\n                this._unlinkedRecords.clear();\n            }\n            if (this._additionsTail !== null) {\n                this._additionsTail._nextAdded = null;\n            }\n            if (this._movesTail !== null) {\n                this._movesTail._nextMoved = null;\n            }\n            if (this._itTail !== null) {\n                this._itTail._next = null;\n            }\n            if (this._removalsTail !== null) {\n                this._removalsTail._nextRemoved = null;\n            }\n            if (this._identityChangesTail !== null) {\n                this._identityChangesTail._nextIdentityChange = null;\n            }\n        };\n        /** @internal */\n        DefaultIterableDiffer.prototype._reinsertAfter = function (record, prevRecord, index) {\n            if (this._unlinkedRecords !== null) {\n                this._unlinkedRecords.remove(record);\n            }\n            var prev = record._prevRemoved;\n            var next = record._nextRemoved;\n            if (prev === null) {\n                this._removalsHead = next;\n            }\n            else {\n                prev._nextRemoved = next;\n            }\n            if (next === null) {\n                this._removalsTail = prev;\n            }\n            else {\n                next._prevRemoved = prev;\n            }\n            this._insertAfter(record, prevRecord, index);\n            this._addToMoves(record, index);\n            return record;\n        };\n        /** @internal */\n        DefaultIterableDiffer.prototype._moveAfter = function (record, prevRecord, index) {\n            this._unlink(record);\n            this._insertAfter(record, prevRecord, index);\n            this._addToMoves(record, index);\n            return record;\n        };\n        /** @internal */\n        DefaultIterableDiffer.prototype._addAfter = function (record, prevRecord, index) {\n            this._insertAfter(record, prevRecord, index);\n            if (this._additionsTail === null) {\n                // TODO(vicb):\n                // assert(this._additionsHead === null);\n                this._additionsTail = this._additionsHead = record;\n            }\n            else {\n                // TODO(vicb):\n                // assert(_additionsTail._nextAdded === null);\n                // assert(record._nextAdded === null);\n                this._additionsTail = this._additionsTail._nextAdded = record;\n            }\n            return record;\n        };\n        /** @internal */\n        DefaultIterableDiffer.prototype._insertAfter = function (record, prevRecord, index) {\n            // TODO(vicb):\n            // assert(record != prevRecord);\n            // assert(record._next === null);\n            // assert(record._prev === null);\n            var next = prevRecord === null ? this._itHead : prevRecord._next;\n            // TODO(vicb):\n            // assert(next != record);\n            // assert(prevRecord != record);\n            record._next = next;\n            record._prev = prevRecord;\n            if (next === null) {\n                this._itTail = record;\n            }\n            else {\n                next._prev = record;\n            }\n            if (prevRecord === null) {\n                this._itHead = record;\n            }\n            else {\n                prevRecord._next = record;\n            }\n            if (this._linkedRecords === null) {\n                this._linkedRecords = new _DuplicateMap();\n            }\n            this._linkedRecords.put(record);\n            record.currentIndex = index;\n            return record;\n        };\n        /** @internal */\n        DefaultIterableDiffer.prototype._remove = function (record) {\n            return this._addToRemovals(this._unlink(record));\n        };\n        /** @internal */\n        DefaultIterableDiffer.prototype._unlink = function (record) {\n            if (this._linkedRecords !== null) {\n                this._linkedRecords.remove(record);\n            }\n            var prev = record._prev;\n            var next = record._next;\n            // TODO(vicb):\n            // assert((record._prev = null) === null);\n            // assert((record._next = null) === null);\n            if (prev === null) {\n                this._itHead = next;\n            }\n            else {\n                prev._next = next;\n            }\n            if (next === null) {\n                this._itTail = prev;\n            }\n            else {\n                next._prev = prev;\n            }\n            return record;\n        };\n        /** @internal */\n        DefaultIterableDiffer.prototype._addToMoves = function (record, toIndex) {\n            // TODO(vicb):\n            // assert(record._nextMoved === null);\n            if (record.previousIndex === toIndex) {\n                return record;\n            }\n            if (this._movesTail === null) {\n                // TODO(vicb):\n                // assert(_movesHead === null);\n                this._movesTail = this._movesHead = record;\n            }\n            else {\n                // TODO(vicb):\n                // assert(_movesTail._nextMoved === null);\n                this._movesTail = this._movesTail._nextMoved = record;\n            }\n            return record;\n        };\n        DefaultIterableDiffer.prototype._addToRemovals = function (record) {\n            if (this._unlinkedRecords === null) {\n                this._unlinkedRecords = new _DuplicateMap();\n            }\n            this._unlinkedRecords.put(record);\n            record.currentIndex = null;\n            record._nextRemoved = null;\n            if (this._removalsTail === null) {\n                // TODO(vicb):\n                // assert(_removalsHead === null);\n                this._removalsTail = this._removalsHead = record;\n                record._prevRemoved = null;\n            }\n            else {\n                // TODO(vicb):\n                // assert(_removalsTail._nextRemoved === null);\n                // assert(record._nextRemoved === null);\n                record._prevRemoved = this._removalsTail;\n                this._removalsTail = this._removalsTail._nextRemoved = record;\n            }\n            return record;\n        };\n        /** @internal */\n        DefaultIterableDiffer.prototype._addIdentityChange = function (record, item) {\n            record.item = item;\n            if (this._identityChangesTail === null) {\n                this._identityChangesTail = this._identityChangesHead = record;\n            }\n            else {\n                this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;\n            }\n            return record;\n        };\n        return DefaultIterableDiffer;\n    }());\n    var IterableChangeRecord_ = /** @class */ (function () {\n        function IterableChangeRecord_(item, trackById) {\n            this.item = item;\n            this.trackById = trackById;\n            this.currentIndex = null;\n            this.previousIndex = null;\n            /** @internal */\n            this._nextPrevious = null;\n            /** @internal */\n            this._prev = null;\n            /** @internal */\n            this._next = null;\n            /** @internal */\n            this._prevDup = null;\n            /** @internal */\n            this._nextDup = null;\n            /** @internal */\n            this._prevRemoved = null;\n            /** @internal */\n            this._nextRemoved = null;\n            /** @internal */\n            this._nextAdded = null;\n            /** @internal */\n            this._nextMoved = null;\n            /** @internal */\n            this._nextIdentityChange = null;\n        }\n        return IterableChangeRecord_;\n    }());\n    // A linked list of CollectionChangeRecords with the same IterableChangeRecord_.item\n    var _DuplicateItemRecordList = /** @class */ (function () {\n        function _DuplicateItemRecordList() {\n            /** @internal */\n            this._head = null;\n            /** @internal */\n            this._tail = null;\n        }\n        /**\n         * Append the record to the list of duplicates.\n         *\n         * Note: by design all records in the list of duplicates hold the same value in record.item.\n         */\n        _DuplicateItemRecordList.prototype.add = function (record) {\n            if (this._head === null) {\n                this._head = this._tail = record;\n                record._nextDup = null;\n                record._prevDup = null;\n            }\n            else {\n                // TODO(vicb):\n                // assert(record.item ==  _head.item ||\n                //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);\n                this._tail._nextDup = record;\n                record._prevDup = this._tail;\n                record._nextDup = null;\n                this._tail = record;\n            }\n        };\n        // Returns a IterableChangeRecord_ having IterableChangeRecord_.trackById == trackById and\n        // IterableChangeRecord_.currentIndex >= atOrAfterIndex\n        _DuplicateItemRecordList.prototype.get = function (trackById, atOrAfterIndex) {\n            var record;\n            for (record = this._head; record !== null; record = record._nextDup) {\n                if ((atOrAfterIndex === null || atOrAfterIndex <= record.currentIndex) &&\n                    looseIdentical(record.trackById, trackById)) {\n                    return record;\n                }\n            }\n            return null;\n        };\n        /**\n         * Remove one {@link IterableChangeRecord_} from the list of duplicates.\n         *\n         * Returns whether the list of duplicates is empty.\n         */\n        _DuplicateItemRecordList.prototype.remove = function (record) {\n            // TODO(vicb):\n            // assert(() {\n            //  // verify that the record being removed is in the list.\n            //  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {\n            //    if (identical(cursor, record)) return true;\n            //  }\n            //  return false;\n            //});\n            var prev = record._prevDup;\n            var next = record._nextDup;\n            if (prev === null) {\n                this._head = next;\n            }\n            else {\n                prev._nextDup = next;\n            }\n            if (next === null) {\n                this._tail = prev;\n            }\n            else {\n                next._prevDup = prev;\n            }\n            return this._head === null;\n        };\n        return _DuplicateItemRecordList;\n    }());\n    var _DuplicateMap = /** @class */ (function () {\n        function _DuplicateMap() {\n            this.map = new Map();\n        }\n        _DuplicateMap.prototype.put = function (record) {\n            var key = record.trackById;\n            var duplicates = this.map.get(key);\n            if (!duplicates) {\n                duplicates = new _DuplicateItemRecordList();\n                this.map.set(key, duplicates);\n            }\n            duplicates.add(record);\n        };\n        /**\n         * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we\n         * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.\n         *\n         * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\n         * have any more `a`s needs to return the second `a`.\n         */\n        _DuplicateMap.prototype.get = function (trackById, atOrAfterIndex) {\n            var key = trackById;\n            var recordList = this.map.get(key);\n            return recordList ? recordList.get(trackById, atOrAfterIndex) : null;\n        };\n        /**\n         * Removes a {@link IterableChangeRecord_} from the list of duplicates.\n         *\n         * The list of duplicates also is removed from the map if it gets empty.\n         */\n        _DuplicateMap.prototype.remove = function (record) {\n            var key = record.trackById;\n            var recordList = this.map.get(key);\n            // Remove the list of duplicates when it gets empty\n            if (recordList.remove(record)) {\n                this.map.delete(key);\n            }\n            return record;\n        };\n        Object.defineProperty(_DuplicateMap.prototype, \"isEmpty\", {\n            get: function () { return this.map.size === 0; },\n            enumerable: true,\n            configurable: true\n        });\n        _DuplicateMap.prototype.clear = function () { this.map.clear(); };\n        return _DuplicateMap;\n    }());\n    function getPreviousIndex(item, addRemoveOffset, moveOffsets) {\n        var previousIndex = item.previousIndex;\n        if (previousIndex === null)\n            return previousIndex;\n        var moveOffset = 0;\n        if (moveOffsets && previousIndex < moveOffsets.length) {\n            moveOffset = moveOffsets[previousIndex];\n        }\n        return previousIndex + addRemoveOffset + moveOffset;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var DefaultKeyValueDifferFactory = /** @class */ (function () {\n        function DefaultKeyValueDifferFactory() {\n        }\n        DefaultKeyValueDifferFactory.prototype.supports = function (obj) { return obj instanceof Map || isJsObject$1(obj); };\n        DefaultKeyValueDifferFactory.prototype.create = function () { return new DefaultKeyValueDiffer(); };\n        return DefaultKeyValueDifferFactory;\n    }());\n    var DefaultKeyValueDiffer = /** @class */ (function () {\n        function DefaultKeyValueDiffer() {\n            this._records = new Map();\n            this._mapHead = null;\n            // _appendAfter is used in the check loop\n            this._appendAfter = null;\n            this._previousMapHead = null;\n            this._changesHead = null;\n            this._changesTail = null;\n            this._additionsHead = null;\n            this._additionsTail = null;\n            this._removalsHead = null;\n            this._removalsTail = null;\n        }\n        Object.defineProperty(DefaultKeyValueDiffer.prototype, \"isDirty\", {\n            get: function () {\n                return this._additionsHead !== null || this._changesHead !== null ||\n                    this._removalsHead !== null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        DefaultKeyValueDiffer.prototype.forEachItem = function (fn) {\n            var record;\n            for (record = this._mapHead; record !== null; record = record._next) {\n                fn(record);\n            }\n        };\n        DefaultKeyValueDiffer.prototype.forEachPreviousItem = function (fn) {\n            var record;\n            for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {\n                fn(record);\n            }\n        };\n        DefaultKeyValueDiffer.prototype.forEachChangedItem = function (fn) {\n            var record;\n            for (record = this._changesHead; record !== null; record = record._nextChanged) {\n                fn(record);\n            }\n        };\n        DefaultKeyValueDiffer.prototype.forEachAddedItem = function (fn) {\n            var record;\n            for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n                fn(record);\n            }\n        };\n        DefaultKeyValueDiffer.prototype.forEachRemovedItem = function (fn) {\n            var record;\n            for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n                fn(record);\n            }\n        };\n        DefaultKeyValueDiffer.prototype.diff = function (map) {\n            if (!map) {\n                map = new Map();\n            }\n            else if (!(map instanceof Map || isJsObject$1(map))) {\n                throw new Error(\"Error trying to diff '\" + stringify(map) + \"'. Only maps and objects are allowed\");\n            }\n            return this.check(map) ? this : null;\n        };\n        DefaultKeyValueDiffer.prototype.onDestroy = function () { };\n        /**\n         * Check the current state of the map vs the previous.\n         * The algorithm is optimised for when the keys do no change.\n         */\n        DefaultKeyValueDiffer.prototype.check = function (map) {\n            var _this = this;\n            this._reset();\n            var insertBefore = this._mapHead;\n            this._appendAfter = null;\n            this._forEach(map, function (value, key) {\n                if (insertBefore && insertBefore.key === key) {\n                    _this._maybeAddToChanges(insertBefore, value);\n                    _this._appendAfter = insertBefore;\n                    insertBefore = insertBefore._next;\n                }\n                else {\n                    var record = _this._getOrCreateRecordForKey(key, value);\n                    insertBefore = _this._insertBeforeOrAppend(insertBefore, record);\n                }\n            });\n            // Items remaining at the end of the list have been deleted\n            if (insertBefore) {\n                if (insertBefore._prev) {\n                    insertBefore._prev._next = null;\n                }\n                this._removalsHead = insertBefore;\n                for (var record = insertBefore; record !== null; record = record._nextRemoved) {\n                    if (record === this._mapHead) {\n                        this._mapHead = null;\n                    }\n                    this._records.delete(record.key);\n                    record._nextRemoved = record._next;\n                    record.previousValue = record.currentValue;\n                    record.currentValue = null;\n                    record._prev = null;\n                    record._next = null;\n                }\n            }\n            // Make sure tails have no next records from previous runs\n            if (this._changesTail)\n                this._changesTail._nextChanged = null;\n            if (this._additionsTail)\n                this._additionsTail._nextAdded = null;\n            return this.isDirty;\n        };\n        /**\n         * Inserts a record before `before` or append at the end of the list when `before` is null.\n         *\n         * Notes:\n         * - This method appends at `this._appendAfter`,\n         * - This method updates `this._appendAfter`,\n         * - The return value is the new value for the insertion pointer.\n         */\n        DefaultKeyValueDiffer.prototype._insertBeforeOrAppend = function (before, record) {\n            if (before) {\n                var prev = before._prev;\n                record._next = before;\n                record._prev = prev;\n                before._prev = record;\n                if (prev) {\n                    prev._next = record;\n                }\n                if (before === this._mapHead) {\n                    this._mapHead = record;\n                }\n                this._appendAfter = before;\n                return before;\n            }\n            if (this._appendAfter) {\n                this._appendAfter._next = record;\n                record._prev = this._appendAfter;\n            }\n            else {\n                this._mapHead = record;\n            }\n            this._appendAfter = record;\n            return null;\n        };\n        DefaultKeyValueDiffer.prototype._getOrCreateRecordForKey = function (key, value) {\n            if (this._records.has(key)) {\n                var record_1 = this._records.get(key);\n                this._maybeAddToChanges(record_1, value);\n                var prev = record_1._prev;\n                var next = record_1._next;\n                if (prev) {\n                    prev._next = next;\n                }\n                if (next) {\n                    next._prev = prev;\n                }\n                record_1._next = null;\n                record_1._prev = null;\n                return record_1;\n            }\n            var record = new KeyValueChangeRecord_(key);\n            this._records.set(key, record);\n            record.currentValue = value;\n            this._addToAdditions(record);\n            return record;\n        };\n        /** @internal */\n        DefaultKeyValueDiffer.prototype._reset = function () {\n            if (this.isDirty) {\n                var record = void 0;\n                // let `_previousMapHead` contain the state of the map before the changes\n                this._previousMapHead = this._mapHead;\n                for (record = this._previousMapHead; record !== null; record = record._next) {\n                    record._nextPrevious = record._next;\n                }\n                // Update `record.previousValue` with the value of the item before the changes\n                // We need to update all changed items (that's those which have been added and changed)\n                for (record = this._changesHead; record !== null; record = record._nextChanged) {\n                    record.previousValue = record.currentValue;\n                }\n                for (record = this._additionsHead; record != null; record = record._nextAdded) {\n                    record.previousValue = record.currentValue;\n                }\n                this._changesHead = this._changesTail = null;\n                this._additionsHead = this._additionsTail = null;\n                this._removalsHead = null;\n            }\n        };\n        // Add the record or a given key to the list of changes only when the value has actually changed\n        DefaultKeyValueDiffer.prototype._maybeAddToChanges = function (record, newValue) {\n            if (!looseIdentical(newValue, record.currentValue)) {\n                record.previousValue = record.currentValue;\n                record.currentValue = newValue;\n                this._addToChanges(record);\n            }\n        };\n        DefaultKeyValueDiffer.prototype._addToAdditions = function (record) {\n            if (this._additionsHead === null) {\n                this._additionsHead = this._additionsTail = record;\n            }\n            else {\n                this._additionsTail._nextAdded = record;\n                this._additionsTail = record;\n            }\n        };\n        DefaultKeyValueDiffer.prototype._addToChanges = function (record) {\n            if (this._changesHead === null) {\n                this._changesHead = this._changesTail = record;\n            }\n            else {\n                this._changesTail._nextChanged = record;\n                this._changesTail = record;\n            }\n        };\n        /** @internal */\n        DefaultKeyValueDiffer.prototype._forEach = function (obj, fn) {\n            if (obj instanceof Map) {\n                obj.forEach(fn);\n            }\n            else {\n                Object.keys(obj).forEach(function (k) { return fn(obj[k], k); });\n            }\n        };\n        return DefaultKeyValueDiffer;\n    }());\n    var KeyValueChangeRecord_ = /** @class */ (function () {\n        function KeyValueChangeRecord_(key) {\n            this.key = key;\n            this.previousValue = null;\n            this.currentValue = null;\n            /** @internal */\n            this._nextPrevious = null;\n            /** @internal */\n            this._next = null;\n            /** @internal */\n            this._prev = null;\n            /** @internal */\n            this._nextAdded = null;\n            /** @internal */\n            this._nextRemoved = null;\n            /** @internal */\n            this._nextChanged = null;\n        }\n        return KeyValueChangeRecord_;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.\n     *\n     * @publicApi\n     */\n    var IterableDiffers = /** @class */ (function () {\n        function IterableDiffers(factories) {\n            this.factories = factories;\n        }\n        IterableDiffers.create = function (factories, parent) {\n            if (parent != null) {\n                var copied = parent.factories.slice();\n                factories = factories.concat(copied);\n            }\n            return new IterableDiffers(factories);\n        };\n        /**\n         * Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the\n         * inherited {@link IterableDiffers} instance with the provided factories and return a new\n         * {@link IterableDiffers} instance.\n         *\n         * @usageNotes\n         * ### Example\n         *\n         * The following example shows how to extend an existing list of factories,\n         * which will only be applied to the injector for this component and its children.\n         * This step is all that's required to make a new {@link IterableDiffer} available.\n         *\n         * ```\n         * @Component({\n         *   viewProviders: [\n         *     IterableDiffers.extend([new ImmutableListDiffer()])\n         *   ]\n         * })\n         * ```\n         */\n        IterableDiffers.extend = function (factories) {\n            return {\n                provide: IterableDiffers,\n                useFactory: function (parent) {\n                    if (!parent) {\n                        // Typically would occur when calling IterableDiffers.extend inside of dependencies passed\n                        // to\n                        // bootstrap(), which would override default pipes instead of extending them.\n                        throw new Error('Cannot extend IterableDiffers without a parent injector');\n                    }\n                    return IterableDiffers.create(factories, parent);\n                },\n                // Dependency technically isn't optional, but we can provide a better error message this way.\n                deps: [[IterableDiffers, new SkipSelf(), new Optional()]]\n            };\n        };\n        IterableDiffers.prototype.find = function (iterable) {\n            var factory = this.factories.find(function (f) { return f.supports(iterable); });\n            if (factory != null) {\n                return factory;\n            }\n            else {\n                throw new Error(\"Cannot find a differ supporting object '\" + iterable + \"' of type '\" + getTypeNameForDebugging(iterable) + \"'\");\n            }\n        };\n        /** @nocollapse */\n        IterableDiffers.ɵprov = ɵɵdefineInjectable({\n            token: IterableDiffers,\n            providedIn: 'root',\n            factory: function () { return new IterableDiffers([new DefaultIterableDifferFactory()]); }\n        });\n        return IterableDiffers;\n    }());\n    function getTypeNameForDebugging(type) {\n        return type['name'] || typeof type;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.\n     *\n     * @publicApi\n     */\n    var KeyValueDiffers = /** @class */ (function () {\n        function KeyValueDiffers(factories) {\n            this.factories = factories;\n        }\n        KeyValueDiffers.create = function (factories, parent) {\n            if (parent) {\n                var copied = parent.factories.slice();\n                factories = factories.concat(copied);\n            }\n            return new KeyValueDiffers(factories);\n        };\n        /**\n         * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the\n         * inherited {@link KeyValueDiffers} instance with the provided factories and return a new\n         * {@link KeyValueDiffers} instance.\n         *\n         * @usageNotes\n         * ### Example\n         *\n         * The following example shows how to extend an existing list of factories,\n         * which will only be applied to the injector for this component and its children.\n         * This step is all that's required to make a new {@link KeyValueDiffer} available.\n         *\n         * ```\n         * @Component({\n         *   viewProviders: [\n         *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\n         *   ]\n         * })\n         * ```\n         */\n        KeyValueDiffers.extend = function (factories) {\n            return {\n                provide: KeyValueDiffers,\n                useFactory: function (parent) {\n                    if (!parent) {\n                        // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed\n                        // to bootstrap(), which would override default pipes instead of extending them.\n                        throw new Error('Cannot extend KeyValueDiffers without a parent injector');\n                    }\n                    return KeyValueDiffers.create(factories, parent);\n                },\n                // Dependency technically isn't optional, but we can provide a better error message this way.\n                deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]\n            };\n        };\n        KeyValueDiffers.prototype.find = function (kv) {\n            var factory = this.factories.find(function (f) { return f.supports(kv); });\n            if (factory) {\n                return factory;\n            }\n            throw new Error(\"Cannot find a differ supporting object '\" + kv + \"'\");\n        };\n        /** @nocollapse */\n        KeyValueDiffers.ɵprov = ɵɵdefineInjectable({\n            token: KeyValueDiffers,\n            providedIn: 'root',\n            factory: function () { return new KeyValueDiffers([new DefaultKeyValueDifferFactory()]); }\n        });\n        return KeyValueDiffers;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Structural diffing for `Object`s and `Map`s.\n     */\n    var keyValDiff = [new DefaultKeyValueDifferFactory()];\n    /**\n     * Structural diffing for `Iterable` types such as `Array`s.\n     */\n    var iterableDiff = [new DefaultIterableDifferFactory()];\n    var defaultIterableDiffers = new IterableDiffers(iterableDiff);\n    var defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Represents an embedded template that can be used to instantiate embedded views.\n     * To instantiate embedded views based on a template, use the `ViewContainerRef`\n     * method `createEmbeddedView()`.\n     *\n     * Access a `TemplateRef` instance by placing a directive on an `<ng-template>`\n     * element (or directive prefixed with `*`). The `TemplateRef` for the embedded view\n     * is injected into the constructor of the directive,\n     * using the `TemplateRef` token.\n     *\n     * You can also use a `Query` to find a `TemplateRef` associated with\n     * a component or a directive.\n     *\n     * @see `ViewContainerRef`\n     * @see [Navigate the Component Tree with DI](guide/dependency-injection-navtree)\n     *\n     * @publicApi\n     */\n    var TemplateRef = /** @class */ (function () {\n        function TemplateRef() {\n        }\n        /**\n         * @internal\n         * @nocollapse\n         */\n        TemplateRef.__NG_ELEMENT_ID__ = function () { return SWITCH_TEMPLATE_REF_FACTORY(TemplateRef, ElementRef); };\n        return TemplateRef;\n    }());\n    var SWITCH_TEMPLATE_REF_FACTORY__POST_R3__ = injectTemplateRef;\n    var SWITCH_TEMPLATE_REF_FACTORY__PRE_R3__ = noop;\n    var SWITCH_TEMPLATE_REF_FACTORY = SWITCH_TEMPLATE_REF_FACTORY__POST_R3__;\n\n    /**\n     * Represents a container where one or more views can be attached to a component.\n     *\n     * Can contain *host views* (created by instantiating a\n     * component with the `createComponent()` method), and *embedded views*\n     * (created by instantiating a `TemplateRef` with the `createEmbeddedView()` method).\n     *\n     * A view container instance can contain other view containers,\n     * creating a [view hierarchy](guide/glossary#view-tree).\n     *\n     * @see `ComponentRef`\n     * @see `EmbeddedViewRef`\n     *\n     * @publicApi\n     */\n    var ViewContainerRef = /** @class */ (function () {\n        function ViewContainerRef() {\n        }\n        /**\n         * @internal\n         * @nocollapse\n         */\n        ViewContainerRef.__NG_ELEMENT_ID__ = function () { return SWITCH_VIEW_CONTAINER_REF_FACTORY(ViewContainerRef, ElementRef); };\n        return ViewContainerRef;\n    }());\n    var SWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__ = injectViewContainerRef;\n    var SWITCH_VIEW_CONTAINER_REF_FACTORY__PRE_R3__ = noop;\n    var SWITCH_VIEW_CONTAINER_REF_FACTORY = SWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__;\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function expressionChangedAfterItHasBeenCheckedError(context, oldValue, currValue, isFirstCheck) {\n        var msg = \"ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '\" + oldValue + \"'. Current value: '\" + currValue + \"'.\";\n        if (isFirstCheck) {\n            msg +=\n                \" It seems like the view has been created after its parent and its children have been dirty checked.\" +\n                    \" Has it been created in a change detection hook ?\";\n        }\n        return viewDebugError(msg, context);\n    }\n    function viewWrappedDebugError(err, context) {\n        if (!(err instanceof Error)) {\n            // errors that are not Error instances don't have a stack,\n            // so it is ok to wrap them into a new Error object...\n            err = new Error(err.toString());\n        }\n        _addDebugContext(err, context);\n        return err;\n    }\n    function viewDebugError(msg, context) {\n        var err = new Error(msg);\n        _addDebugContext(err, context);\n        return err;\n    }\n    function _addDebugContext(err, context) {\n        err[ERROR_DEBUG_CONTEXT] = context;\n        err[ERROR_LOGGER] = context.logError.bind(context);\n    }\n    function isViewDebugError(err) {\n        return !!getDebugContext(err);\n    }\n    function viewDestroyedError(action) {\n        return new Error(\"ViewDestroyedError: Attempt to use a destroyed view: \" + action);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // Called before each cycle of a view's check to detect whether this is in the\n    // initState for which we need to call ngOnInit, ngAfterContentInit or ngAfterViewInit\n    // lifecycle methods. Returns true if this check cycle should call lifecycle\n    // methods.\n    function shiftInitState(view, priorInitState, newInitState) {\n        // Only update the InitState if we are currently in the prior state.\n        // For example, only move into CallingInit if we are in BeforeInit. Only\n        // move into CallingContentInit if we are in CallingInit. Normally this will\n        // always be true because of how checkCycle is called in checkAndUpdateView.\n        // However, if checkAndUpdateView is called recursively or if an exception is\n        // thrown while checkAndUpdateView is running, checkAndUpdateView starts over\n        // from the beginning. This ensures the state is monotonically increasing,\n        // terminating in the AfterInit state, which ensures the Init methods are called\n        // at least once and only once.\n        var state = view.state;\n        var initState = state & 1792 /* InitState_Mask */;\n        if (initState === priorInitState) {\n            view.state = (state & ~1792 /* InitState_Mask */) | newInitState;\n            view.initIndex = -1;\n            return true;\n        }\n        return initState === newInitState;\n    }\n    // Returns true if the lifecycle init method should be called for the node with\n    // the given init index.\n    function shouldCallLifecycleInitHook(view, initState, index) {\n        if ((view.state & 1792 /* InitState_Mask */) === initState && view.initIndex <= index) {\n            view.initIndex = index + 1;\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Node instance data.\n     *\n     * We have a separate type per NodeType to save memory\n     * (TextData | ElementData | ProviderData | PureExpressionData | QueryList<any>)\n     *\n     * To keep our code monomorphic,\n     * we prohibit using `NodeData` directly but enforce the use of accessors (`asElementData`, ...).\n     * This way, no usage site can get a `NodeData` from view.nodes and then use it for different\n     * purposes.\n     */\n    var NodeData = /** @class */ (function () {\n        function NodeData() {\n        }\n        return NodeData;\n    }());\n    /**\n     * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n     */\n    function asTextData(view, index) {\n        return view.nodes[index];\n    }\n    /**\n     * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n     */\n    function asElementData(view, index) {\n        return view.nodes[index];\n    }\n    /**\n     * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n     */\n    function asProviderData(view, index) {\n        return view.nodes[index];\n    }\n    /**\n     * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n     */\n    function asPureExpressionData(view, index) {\n        return view.nodes[index];\n    }\n    /**\n     * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n     */\n    function asQueryList(view, index) {\n        return view.nodes[index];\n    }\n    var DebugContext = /** @class */ (function () {\n        function DebugContext() {\n        }\n        return DebugContext;\n    }());\n    /**\n     * This object is used to prevent cycles in the source files and to have a place where\n     * debug mode can hook it. It is lazily filled when `isDevMode` is known.\n     */\n    var Services = {\n        setCurrentNode: undefined,\n        createRootView: undefined,\n        createEmbeddedView: undefined,\n        createComponentView: undefined,\n        createNgModuleRef: undefined,\n        overrideProvider: undefined,\n        overrideComponentView: undefined,\n        clearOverrides: undefined,\n        checkAndUpdateView: undefined,\n        checkNoChangesView: undefined,\n        destroyView: undefined,\n        resolveDep: undefined,\n        createDebugContext: undefined,\n        handleEvent: undefined,\n        updateDirectives: undefined,\n        updateRenderer: undefined,\n        dirtyParentQueries: undefined,\n    };\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var NOOP = function () { };\n    var _tokenKeyCache = new Map();\n    function tokenKey(token) {\n        var key = _tokenKeyCache.get(token);\n        if (!key) {\n            key = stringify(token) + '_' + _tokenKeyCache.size;\n            _tokenKeyCache.set(token, key);\n        }\n        return key;\n    }\n    function unwrapValue(view, nodeIdx, bindingIdx, value) {\n        if (WrappedValue.isWrapped(value)) {\n            value = WrappedValue.unwrap(value);\n            var globalBindingIdx = view.def.nodes[nodeIdx].bindingIndex + bindingIdx;\n            var oldValue = WrappedValue.unwrap(view.oldValues[globalBindingIdx]);\n            view.oldValues[globalBindingIdx] = new WrappedValue(oldValue);\n        }\n        return value;\n    }\n    var UNDEFINED_RENDERER_TYPE_ID = '$$undefined';\n    var EMPTY_RENDERER_TYPE_ID = '$$empty';\n    // Attention: this function is called as top level function.\n    // Putting any logic in here will destroy closure tree shaking!\n    function createRendererType2(values) {\n        return {\n            id: UNDEFINED_RENDERER_TYPE_ID,\n            styles: values.styles,\n            encapsulation: values.encapsulation,\n            data: values.data\n        };\n    }\n    var _renderCompCount$1 = 0;\n    function resolveRendererType2(type) {\n        if (type && type.id === UNDEFINED_RENDERER_TYPE_ID) {\n            // first time we see this RendererType2. Initialize it...\n            var isFilled = ((type.encapsulation != null && type.encapsulation !== exports.ViewEncapsulation.None) ||\n                type.styles.length || Object.keys(type.data).length);\n            if (isFilled) {\n                type.id = \"c\" + _renderCompCount$1++;\n            }\n            else {\n                type.id = EMPTY_RENDERER_TYPE_ID;\n            }\n        }\n        if (type && type.id === EMPTY_RENDERER_TYPE_ID) {\n            type = null;\n        }\n        return type || null;\n    }\n    function checkBinding(view, def, bindingIdx, value) {\n        var oldValues = view.oldValues;\n        if ((view.state & 2 /* FirstCheck */) ||\n            !looseIdentical(oldValues[def.bindingIndex + bindingIdx], value)) {\n            return true;\n        }\n        return false;\n    }\n    function checkAndUpdateBinding(view, def, bindingIdx, value) {\n        if (checkBinding(view, def, bindingIdx, value)) {\n            view.oldValues[def.bindingIndex + bindingIdx] = value;\n            return true;\n        }\n        return false;\n    }\n    function checkBindingNoChanges(view, def, bindingIdx, value) {\n        var oldValue = view.oldValues[def.bindingIndex + bindingIdx];\n        if ((view.state & 1 /* BeforeFirstCheck */) || !devModeEqual$1(oldValue, value)) {\n            var bindingName = def.bindings[bindingIdx].name;\n            throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, def.nodeIndex), bindingName + \": \" + oldValue, bindingName + \": \" + value, (view.state & 1 /* BeforeFirstCheck */) !== 0);\n        }\n    }\n    function markParentViewsForCheck(view) {\n        var currView = view;\n        while (currView) {\n            if (currView.def.flags & 2 /* OnPush */) {\n                currView.state |= 8 /* ChecksEnabled */;\n            }\n            currView = currView.viewContainerParent || currView.parent;\n        }\n    }\n    function markParentViewsForCheckProjectedViews(view, endView) {\n        var currView = view;\n        while (currView && currView !== endView) {\n            currView.state |= 64 /* CheckProjectedViews */;\n            currView = currView.viewContainerParent || currView.parent;\n        }\n    }\n    function dispatchEvent(view, nodeIndex, eventName, event) {\n        try {\n            var nodeDef = view.def.nodes[nodeIndex];\n            var startView = nodeDef.flags & 33554432 /* ComponentView */ ?\n                asElementData(view, nodeIndex).componentView :\n                view;\n            markParentViewsForCheck(startView);\n            return Services.handleEvent(view, nodeIndex, eventName, event);\n        }\n        catch (e) {\n            // Attention: Don't rethrow, as it would cancel Observable subscriptions!\n            view.root.errorHandler.handleError(e);\n        }\n    }\n    function declaredViewContainer(view) {\n        if (view.parent) {\n            var parentView = view.parent;\n            return asElementData(parentView, view.parentNodeDef.nodeIndex);\n        }\n        return null;\n    }\n    /**\n     * for component views, this is the host element.\n     * for embedded views, this is the index of the parent node\n     * that contains the view container.\n     */\n    function viewParentEl(view) {\n        var parentView = view.parent;\n        if (parentView) {\n            return view.parentNodeDef.parent;\n        }\n        else {\n            return null;\n        }\n    }\n    function renderNode(view, def) {\n        switch (def.flags & 201347067 /* Types */) {\n            case 1 /* TypeElement */:\n                return asElementData(view, def.nodeIndex).renderElement;\n            case 2 /* TypeText */:\n                return asTextData(view, def.nodeIndex).renderText;\n        }\n    }\n    function elementEventFullName(target, name) {\n        return target ? target + \":\" + name : name;\n    }\n    function isComponentView(view) {\n        return !!view.parent && !!(view.parentNodeDef.flags & 32768 /* Component */);\n    }\n    function isEmbeddedView(view) {\n        return !!view.parent && !(view.parentNodeDef.flags & 32768 /* Component */);\n    }\n    function filterQueryId(queryId) {\n        return 1 << (queryId % 32);\n    }\n    function splitMatchedQueriesDsl(matchedQueriesDsl) {\n        var matchedQueries = {};\n        var matchedQueryIds = 0;\n        var references = {};\n        if (matchedQueriesDsl) {\n            matchedQueriesDsl.forEach(function (_a) {\n                var _b = __read(_a, 2), queryId = _b[0], valueType = _b[1];\n                if (typeof queryId === 'number') {\n                    matchedQueries[queryId] = valueType;\n                    matchedQueryIds |= filterQueryId(queryId);\n                }\n                else {\n                    references[queryId] = valueType;\n                }\n            });\n        }\n        return { matchedQueries: matchedQueries, references: references, matchedQueryIds: matchedQueryIds };\n    }\n    function splitDepsDsl(deps, sourceName) {\n        return deps.map(function (value) {\n            var _a;\n            var token;\n            var flags;\n            if (Array.isArray(value)) {\n                _a = __read(value, 2), flags = _a[0], token = _a[1];\n            }\n            else {\n                flags = 0 /* None */;\n                token = value;\n            }\n            if (token && (typeof token === 'function' || typeof token === 'object') && sourceName) {\n                Object.defineProperty(token, SOURCE, { value: sourceName, configurable: true });\n            }\n            return { flags: flags, token: token, tokenKey: tokenKey(token) };\n        });\n    }\n    function getParentRenderElement(view, renderHost, def) {\n        var renderParent = def.renderParent;\n        if (renderParent) {\n            if ((renderParent.flags & 1 /* TypeElement */) === 0 ||\n                (renderParent.flags & 33554432 /* ComponentView */) === 0 ||\n                (renderParent.element.componentRendererType &&\n                    renderParent.element.componentRendererType.encapsulation ===\n                        exports.ViewEncapsulation.Native)) {\n                // only children of non components, or children of components with native encapsulation should\n                // be attached.\n                return asElementData(view, def.renderParent.nodeIndex).renderElement;\n            }\n        }\n        else {\n            return renderHost;\n        }\n    }\n    var DEFINITION_CACHE = new WeakMap();\n    function resolveDefinition(factory) {\n        var value = DEFINITION_CACHE.get(factory);\n        if (!value) {\n            value = factory(function () { return NOOP; });\n            value.factory = factory;\n            DEFINITION_CACHE.set(factory, value);\n        }\n        return value;\n    }\n    function rootRenderNodes(view) {\n        var renderNodes = [];\n        visitRootRenderNodes(view, 0 /* Collect */, undefined, undefined, renderNodes);\n        return renderNodes;\n    }\n    function visitRootRenderNodes(view, action, parentNode, nextSibling, target) {\n        // We need to re-compute the parent node in case the nodes have been moved around manually\n        if (action === 3 /* RemoveChild */) {\n            parentNode = view.renderer.parentNode(renderNode(view, view.def.lastRenderRootNode));\n        }\n        visitSiblingRenderNodes(view, action, 0, view.def.nodes.length - 1, parentNode, nextSibling, target);\n    }\n    function visitSiblingRenderNodes(view, action, startIndex, endIndex, parentNode, nextSibling, target) {\n        for (var i = startIndex; i <= endIndex; i++) {\n            var nodeDef = view.def.nodes[i];\n            if (nodeDef.flags & (1 /* TypeElement */ | 2 /* TypeText */ | 8 /* TypeNgContent */)) {\n                visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target);\n            }\n            // jump to next sibling\n            i += nodeDef.childCount;\n        }\n    }\n    function visitProjectedRenderNodes(view, ngContentIndex, action, parentNode, nextSibling, target) {\n        var compView = view;\n        while (compView && !isComponentView(compView)) {\n            compView = compView.parent;\n        }\n        var hostView = compView.parent;\n        var hostElDef = viewParentEl(compView);\n        var startIndex = hostElDef.nodeIndex + 1;\n        var endIndex = hostElDef.nodeIndex + hostElDef.childCount;\n        for (var i = startIndex; i <= endIndex; i++) {\n            var nodeDef = hostView.def.nodes[i];\n            if (nodeDef.ngContentIndex === ngContentIndex) {\n                visitRenderNode(hostView, nodeDef, action, parentNode, nextSibling, target);\n            }\n            // jump to next sibling\n            i += nodeDef.childCount;\n        }\n        if (!hostView.parent) {\n            // a root view\n            var projectedNodes = view.root.projectableNodes[ngContentIndex];\n            if (projectedNodes) {\n                for (var i = 0; i < projectedNodes.length; i++) {\n                    execRenderNodeAction(view, projectedNodes[i], action, parentNode, nextSibling, target);\n                }\n            }\n        }\n    }\n    function visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target) {\n        if (nodeDef.flags & 8 /* TypeNgContent */) {\n            visitProjectedRenderNodes(view, nodeDef.ngContent.index, action, parentNode, nextSibling, target);\n        }\n        else {\n            var rn = renderNode(view, nodeDef);\n            if (action === 3 /* RemoveChild */ && (nodeDef.flags & 33554432 /* ComponentView */) &&\n                (nodeDef.bindingFlags & 48 /* CatSyntheticProperty */)) {\n                // Note: we might need to do both actions.\n                if (nodeDef.bindingFlags & (16 /* SyntheticProperty */)) {\n                    execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);\n                }\n                if (nodeDef.bindingFlags & (32 /* SyntheticHostProperty */)) {\n                    var compView = asElementData(view, nodeDef.nodeIndex).componentView;\n                    execRenderNodeAction(compView, rn, action, parentNode, nextSibling, target);\n                }\n            }\n            else {\n                execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);\n            }\n            if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n                var embeddedViews = asElementData(view, nodeDef.nodeIndex).viewContainer._embeddedViews;\n                for (var k = 0; k < embeddedViews.length; k++) {\n                    visitRootRenderNodes(embeddedViews[k], action, parentNode, nextSibling, target);\n                }\n            }\n            if (nodeDef.flags & 1 /* TypeElement */ && !nodeDef.element.name) {\n                visitSiblingRenderNodes(view, action, nodeDef.nodeIndex + 1, nodeDef.nodeIndex + nodeDef.childCount, parentNode, nextSibling, target);\n            }\n        }\n    }\n    function execRenderNodeAction(view, renderNode, action, parentNode, nextSibling, target) {\n        var renderer = view.renderer;\n        switch (action) {\n            case 1 /* AppendChild */:\n                renderer.appendChild(parentNode, renderNode);\n                break;\n            case 2 /* InsertBefore */:\n                renderer.insertBefore(parentNode, renderNode, nextSibling);\n                break;\n            case 3 /* RemoveChild */:\n                renderer.removeChild(parentNode, renderNode);\n                break;\n            case 0 /* Collect */:\n                target.push(renderNode);\n                break;\n        }\n    }\n    var NS_PREFIX_RE = /^:([^:]+):(.+)$/;\n    function splitNamespace(name) {\n        if (name[0] === ':') {\n            var match = name.match(NS_PREFIX_RE);\n            return [match[1], match[2]];\n        }\n        return ['', name];\n    }\n    function calcBindingFlags(bindings) {\n        var flags = 0;\n        for (var i = 0; i < bindings.length; i++) {\n            flags |= bindings[i].flags;\n        }\n        return flags;\n    }\n    function interpolate(valueCount, constAndInterp) {\n        var result = '';\n        for (var i = 0; i < valueCount * 2; i = i + 2) {\n            result = result + constAndInterp[i] + _toStringWithNull(constAndInterp[i + 1]);\n        }\n        return result + constAndInterp[valueCount * 2];\n    }\n    function inlineInterpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {\n        switch (valueCount) {\n            case 1:\n                return c0 + _toStringWithNull(a1) + c1;\n            case 2:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;\n            case 3:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                    c3;\n            case 4:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                    c3 + _toStringWithNull(a4) + c4;\n            case 5:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;\n            case 6:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;\n            case 7:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                    c6 + _toStringWithNull(a7) + c7;\n            case 8:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                    c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;\n            case 9:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                    c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;\n            default:\n                throw new Error(\"Does not support more than 9 expressions\");\n        }\n    }\n    function _toStringWithNull(v) {\n        return v != null ? v.toString() : '';\n    }\n    var EMPTY_ARRAY$3 = [];\n    var EMPTY_MAP = {};\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var UNDEFINED_VALUE = {};\n    var InjectorRefTokenKey = tokenKey(Injector);\n    var INJECTORRefTokenKey = tokenKey(INJECTOR);\n    var NgModuleRefTokenKey = tokenKey(NgModuleRef);\n    function moduleProvideDef(flags, token, value, deps) {\n        // Need to resolve forwardRefs as e.g. for `useValue` we\n        // lowered the expression and then stopped evaluating it,\n        // i.e. also didn't unwrap it.\n        value = resolveForwardRef(value);\n        var depDefs = splitDepsDsl(deps, stringify(token));\n        return {\n            // will bet set by the module definition\n            index: -1,\n            deps: depDefs, flags: flags, token: token, value: value\n        };\n    }\n    function moduleDef(providers) {\n        var providersByKey = {};\n        var modules = [];\n        var scope = null;\n        for (var i = 0; i < providers.length; i++) {\n            var provider = providers[i];\n            if (provider.token === INJECTOR_SCOPE) {\n                scope = provider.value;\n            }\n            if (provider.flags & 1073741824 /* TypeNgModule */) {\n                modules.push(provider.token);\n            }\n            provider.index = i;\n            providersByKey[tokenKey(provider.token)] = provider;\n        }\n        return {\n            // Will be filled later...\n            factory: null,\n            providersByKey: providersByKey,\n            providers: providers,\n            modules: modules,\n            scope: scope,\n        };\n    }\n    function initNgModule(data) {\n        var def = data._def;\n        var providers = data._providers = newArray(def.providers.length);\n        for (var i = 0; i < def.providers.length; i++) {\n            var provDef = def.providers[i];\n            if (!(provDef.flags & 4096 /* LazyProvider */)) {\n                // Make sure the provider has not been already initialized outside this loop.\n                if (providers[i] === undefined) {\n                    providers[i] = _createProviderInstance(data, provDef);\n                }\n            }\n        }\n    }\n    function resolveNgModuleDep(data, depDef, notFoundValue) {\n        if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n        var former = setCurrentInjector(data);\n        try {\n            if (depDef.flags & 8 /* Value */) {\n                return depDef.token;\n            }\n            if (depDef.flags & 2 /* Optional */) {\n                notFoundValue = null;\n            }\n            if (depDef.flags & 1 /* SkipSelf */) {\n                return data._parent.get(depDef.token, notFoundValue);\n            }\n            var tokenKey_1 = depDef.tokenKey;\n            switch (tokenKey_1) {\n                case InjectorRefTokenKey:\n                case INJECTORRefTokenKey:\n                case NgModuleRefTokenKey:\n                    return data;\n            }\n            var providerDef = data._def.providersByKey[tokenKey_1];\n            var injectableDef = void 0;\n            if (providerDef) {\n                var providerInstance = data._providers[providerDef.index];\n                if (providerInstance === undefined) {\n                    providerInstance = data._providers[providerDef.index] =\n                        _createProviderInstance(data, providerDef);\n                }\n                return providerInstance === UNDEFINED_VALUE ? undefined : providerInstance;\n            }\n            else if ((injectableDef = getInjectableDef(depDef.token)) && targetsModule(data, injectableDef)) {\n                var index = data._providers.length;\n                data._def.providers[index] = data._def.providersByKey[depDef.tokenKey] = {\n                    flags: 1024 /* TypeFactoryProvider */ | 4096 /* LazyProvider */,\n                    value: injectableDef.factory,\n                    deps: [], index: index,\n                    token: depDef.token,\n                };\n                data._providers[index] = UNDEFINED_VALUE;\n                return (data._providers[index] =\n                    _createProviderInstance(data, data._def.providersByKey[depDef.tokenKey]));\n            }\n            else if (depDef.flags & 4 /* Self */) {\n                return notFoundValue;\n            }\n            return data._parent.get(depDef.token, notFoundValue);\n        }\n        finally {\n            setCurrentInjector(former);\n        }\n    }\n    function moduleTransitivelyPresent(ngModule, scope) {\n        return ngModule._def.modules.indexOf(scope) > -1;\n    }\n    function targetsModule(ngModule, def) {\n        var providedIn = def.providedIn;\n        return providedIn != null && (providedIn === 'any' || providedIn === ngModule._def.scope ||\n            moduleTransitivelyPresent(ngModule, providedIn));\n    }\n    function _createProviderInstance(ngModule, providerDef) {\n        var injectable;\n        switch (providerDef.flags & 201347067 /* Types */) {\n            case 512 /* TypeClassProvider */:\n                injectable = _createClass(ngModule, providerDef.value, providerDef.deps);\n                break;\n            case 1024 /* TypeFactoryProvider */:\n                injectable = _callFactory(ngModule, providerDef.value, providerDef.deps);\n                break;\n            case 2048 /* TypeUseExistingProvider */:\n                injectable = resolveNgModuleDep(ngModule, providerDef.deps[0]);\n                break;\n            case 256 /* TypeValueProvider */:\n                injectable = providerDef.value;\n                break;\n        }\n        // The read of `ngOnDestroy` here is slightly expensive as it's megamorphic, so it should be\n        // avoided if possible. The sequence of checks here determines whether ngOnDestroy needs to be\n        // checked. It might not if the `injectable` isn't an object or if NodeFlags.OnDestroy is already\n        // set (ngOnDestroy was detected statically).\n        if (injectable !== UNDEFINED_VALUE && injectable !== null && typeof injectable === 'object' &&\n            !(providerDef.flags & 131072 /* OnDestroy */) && typeof injectable.ngOnDestroy === 'function') {\n            providerDef.flags |= 131072 /* OnDestroy */;\n        }\n        return injectable === undefined ? UNDEFINED_VALUE : injectable;\n    }\n    function _createClass(ngModule, ctor, deps) {\n        var len = deps.length;\n        switch (len) {\n            case 0:\n                return new ctor();\n            case 1:\n                return new ctor(resolveNgModuleDep(ngModule, deps[0]));\n            case 2:\n                return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));\n            case 3:\n                return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));\n            default:\n                var depValues = [];\n                for (var i = 0; i < len; i++) {\n                    depValues[i] = resolveNgModuleDep(ngModule, deps[i]);\n                }\n                return new (ctor.bind.apply(ctor, __spread([void 0], depValues)))();\n        }\n    }\n    function _callFactory(ngModule, factory, deps) {\n        var len = deps.length;\n        switch (len) {\n            case 0:\n                return factory();\n            case 1:\n                return factory(resolveNgModuleDep(ngModule, deps[0]));\n            case 2:\n                return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));\n            case 3:\n                return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));\n            default:\n                var depValues = [];\n                for (var i = 0; i < len; i++) {\n                    depValues[i] = resolveNgModuleDep(ngModule, deps[i]);\n                }\n                return factory.apply(void 0, __spread(depValues));\n        }\n    }\n    function callNgModuleLifecycle(ngModule, lifecycles) {\n        var def = ngModule._def;\n        var destroyed = new Set();\n        for (var i = 0; i < def.providers.length; i++) {\n            var provDef = def.providers[i];\n            if (provDef.flags & 131072 /* OnDestroy */) {\n                var instance = ngModule._providers[i];\n                if (instance && instance !== UNDEFINED_VALUE) {\n                    var onDestroy = instance.ngOnDestroy;\n                    if (typeof onDestroy === 'function' && !destroyed.has(instance)) {\n                        onDestroy.apply(instance);\n                        destroyed.add(instance);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function attachEmbeddedView(parentView, elementData, viewIndex, view) {\n        var embeddedViews = elementData.viewContainer._embeddedViews;\n        if (viewIndex === null || viewIndex === undefined) {\n            viewIndex = embeddedViews.length;\n        }\n        view.viewContainerParent = parentView;\n        addToArray(embeddedViews, viewIndex, view);\n        attachProjectedView(elementData, view);\n        Services.dirtyParentQueries(view);\n        var prevView = viewIndex > 0 ? embeddedViews[viewIndex - 1] : null;\n        renderAttachEmbeddedView(elementData, prevView, view);\n    }\n    function attachProjectedView(vcElementData, view) {\n        var dvcElementData = declaredViewContainer(view);\n        if (!dvcElementData || dvcElementData === vcElementData ||\n            view.state & 16 /* IsProjectedView */) {\n            return;\n        }\n        // Note: For performance reasons, we\n        // - add a view to template._projectedViews only 1x throughout its lifetime,\n        //   and remove it not until the view is destroyed.\n        //   (hard, as when a parent view is attached/detached we would need to attach/detach all\n        //    nested projected views as well, even across component boundaries).\n        // - don't track the insertion order of views in the projected views array\n        //   (hard, as when the views of the same template are inserted different view containers)\n        view.state |= 16 /* IsProjectedView */;\n        var projectedViews = dvcElementData.template._projectedViews;\n        if (!projectedViews) {\n            projectedViews = dvcElementData.template._projectedViews = [];\n        }\n        projectedViews.push(view);\n        // Note: we are changing the NodeDef here as we cannot calculate\n        // the fact whether a template is used for projection during compilation.\n        markNodeAsProjectedTemplate(view.parent.def, view.parentNodeDef);\n    }\n    function markNodeAsProjectedTemplate(viewDef, nodeDef) {\n        if (nodeDef.flags & 4 /* ProjectedTemplate */) {\n            return;\n        }\n        viewDef.nodeFlags |= 4 /* ProjectedTemplate */;\n        nodeDef.flags |= 4 /* ProjectedTemplate */;\n        var parentNodeDef = nodeDef.parent;\n        while (parentNodeDef) {\n            parentNodeDef.childFlags |= 4 /* ProjectedTemplate */;\n            parentNodeDef = parentNodeDef.parent;\n        }\n    }\n    function detachEmbeddedView(elementData, viewIndex) {\n        var embeddedViews = elementData.viewContainer._embeddedViews;\n        if (viewIndex == null || viewIndex >= embeddedViews.length) {\n            viewIndex = embeddedViews.length - 1;\n        }\n        if (viewIndex < 0) {\n            return null;\n        }\n        var view = embeddedViews[viewIndex];\n        view.viewContainerParent = null;\n        removeFromArray(embeddedViews, viewIndex);\n        // See attachProjectedView for why we don't update projectedViews here.\n        Services.dirtyParentQueries(view);\n        renderDetachView$1(view);\n        return view;\n    }\n    function detachProjectedView(view) {\n        if (!(view.state & 16 /* IsProjectedView */)) {\n            return;\n        }\n        var dvcElementData = declaredViewContainer(view);\n        if (dvcElementData) {\n            var projectedViews = dvcElementData.template._projectedViews;\n            if (projectedViews) {\n                removeFromArray(projectedViews, projectedViews.indexOf(view));\n                Services.dirtyParentQueries(view);\n            }\n        }\n    }\n    function moveEmbeddedView(elementData, oldViewIndex, newViewIndex) {\n        var embeddedViews = elementData.viewContainer._embeddedViews;\n        var view = embeddedViews[oldViewIndex];\n        removeFromArray(embeddedViews, oldViewIndex);\n        if (newViewIndex == null) {\n            newViewIndex = embeddedViews.length;\n        }\n        addToArray(embeddedViews, newViewIndex, view);\n        // Note: Don't need to change projectedViews as the order in there\n        // as always invalid...\n        Services.dirtyParentQueries(view);\n        renderDetachView$1(view);\n        var prevView = newViewIndex > 0 ? embeddedViews[newViewIndex - 1] : null;\n        renderAttachEmbeddedView(elementData, prevView, view);\n        return view;\n    }\n    function renderAttachEmbeddedView(elementData, prevView, view) {\n        var prevRenderNode = prevView ? renderNode(prevView, prevView.def.lastRenderRootNode) :\n            elementData.renderElement;\n        var parentNode = view.renderer.parentNode(prevRenderNode);\n        var nextSibling = view.renderer.nextSibling(prevRenderNode);\n        // Note: We can't check if `nextSibling` is present, as on WebWorkers it will always be!\n        // However, browsers automatically do `appendChild` when there is no `nextSibling`.\n        visitRootRenderNodes(view, 2 /* InsertBefore */, parentNode, nextSibling, undefined);\n    }\n    function renderDetachView$1(view) {\n        visitRootRenderNodes(view, 3 /* RemoveChild */, null, null, undefined);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var EMPTY_CONTEXT = {};\n    // Attention: this function is called as top level function.\n    // Putting any logic in here will destroy closure tree shaking!\n    function createComponentFactory(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors) {\n        return new ComponentFactory_(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors);\n    }\n    function getComponentViewDefinitionFactory(componentFactory) {\n        return componentFactory.viewDefFactory;\n    }\n    var ComponentFactory_ = /** @class */ (function (_super) {\n        __extends(ComponentFactory_, _super);\n        function ComponentFactory_(selector, componentType, viewDefFactory, _inputs, _outputs, ngContentSelectors) {\n            var _this = \n            // Attention: this ctor is called as top level function.\n            // Putting any logic in here will destroy closure tree shaking!\n            _super.call(this) || this;\n            _this.selector = selector;\n            _this.componentType = componentType;\n            _this._inputs = _inputs;\n            _this._outputs = _outputs;\n            _this.ngContentSelectors = ngContentSelectors;\n            _this.viewDefFactory = viewDefFactory;\n            return _this;\n        }\n        Object.defineProperty(ComponentFactory_.prototype, \"inputs\", {\n            get: function () {\n                var inputsArr = [];\n                var inputs = this._inputs;\n                for (var propName in inputs) {\n                    var templateName = inputs[propName];\n                    inputsArr.push({ propName: propName, templateName: templateName });\n                }\n                return inputsArr;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ComponentFactory_.prototype, \"outputs\", {\n            get: function () {\n                var outputsArr = [];\n                for (var propName in this._outputs) {\n                    var templateName = this._outputs[propName];\n                    outputsArr.push({ propName: propName, templateName: templateName });\n                }\n                return outputsArr;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Creates a new component.\n         */\n        ComponentFactory_.prototype.create = function (injector, projectableNodes, rootSelectorOrNode, ngModule) {\n            if (!ngModule) {\n                throw new Error('ngModule should be provided');\n            }\n            var viewDef = resolveDefinition(this.viewDefFactory);\n            var componentNodeIndex = viewDef.nodes[0].element.componentProvider.nodeIndex;\n            var view = Services.createRootView(injector, projectableNodes || [], rootSelectorOrNode, viewDef, ngModule, EMPTY_CONTEXT);\n            var component = asProviderData(view, componentNodeIndex).instance;\n            if (rootSelectorOrNode) {\n                view.renderer.setAttribute(asElementData(view, 0).renderElement, 'ng-version', VERSION.full);\n            }\n            return new ComponentRef_(view, new ViewRef_(view), component);\n        };\n        return ComponentFactory_;\n    }(ComponentFactory));\n    var ComponentRef_ = /** @class */ (function (_super) {\n        __extends(ComponentRef_, _super);\n        function ComponentRef_(_view, _viewRef, _component) {\n            var _this = _super.call(this) || this;\n            _this._view = _view;\n            _this._viewRef = _viewRef;\n            _this._component = _component;\n            _this._elDef = _this._view.def.nodes[0];\n            _this.hostView = _viewRef;\n            _this.changeDetectorRef = _viewRef;\n            _this.instance = _component;\n            return _this;\n        }\n        Object.defineProperty(ComponentRef_.prototype, \"location\", {\n            get: function () {\n                return new ElementRef(asElementData(this._view, this._elDef.nodeIndex).renderElement);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ComponentRef_.prototype, \"injector\", {\n            get: function () { return new Injector_(this._view, this._elDef); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ComponentRef_.prototype, \"componentType\", {\n            get: function () { return this._component.constructor; },\n            enumerable: true,\n            configurable: true\n        });\n        ComponentRef_.prototype.destroy = function () { this._viewRef.destroy(); };\n        ComponentRef_.prototype.onDestroy = function (callback) { this._viewRef.onDestroy(callback); };\n        return ComponentRef_;\n    }(ComponentRef));\n    function createViewContainerData(view, elDef, elData) {\n        return new ViewContainerRef_(view, elDef, elData);\n    }\n    var ViewContainerRef_ = /** @class */ (function () {\n        function ViewContainerRef_(_view, _elDef, _data) {\n            this._view = _view;\n            this._elDef = _elDef;\n            this._data = _data;\n            /**\n             * @internal\n             */\n            this._embeddedViews = [];\n        }\n        Object.defineProperty(ViewContainerRef_.prototype, \"element\", {\n            get: function () { return new ElementRef(this._data.renderElement); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ViewContainerRef_.prototype, \"injector\", {\n            get: function () { return new Injector_(this._view, this._elDef); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ViewContainerRef_.prototype, \"parentInjector\", {\n            /** @deprecated No replacement */\n            get: function () {\n                var view = this._view;\n                var elDef = this._elDef.parent;\n                while (!elDef && view) {\n                    elDef = viewParentEl(view);\n                    view = view.parent;\n                }\n                return view ? new Injector_(view, elDef) : new Injector_(this._view, null);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        ViewContainerRef_.prototype.clear = function () {\n            var len = this._embeddedViews.length;\n            for (var i = len - 1; i >= 0; i--) {\n                var view = detachEmbeddedView(this._data, i);\n                Services.destroyView(view);\n            }\n        };\n        ViewContainerRef_.prototype.get = function (index) {\n            var view = this._embeddedViews[index];\n            if (view) {\n                var ref = new ViewRef_(view);\n                ref.attachToViewContainerRef(this);\n                return ref;\n            }\n            return null;\n        };\n        Object.defineProperty(ViewContainerRef_.prototype, \"length\", {\n            get: function () { return this._embeddedViews.length; },\n            enumerable: true,\n            configurable: true\n        });\n        ViewContainerRef_.prototype.createEmbeddedView = function (templateRef, context, index) {\n            var viewRef = templateRef.createEmbeddedView(context || {});\n            this.insert(viewRef, index);\n            return viewRef;\n        };\n        ViewContainerRef_.prototype.createComponent = function (componentFactory, index, injector, projectableNodes, ngModuleRef) {\n            var contextInjector = injector || this.parentInjector;\n            if (!ngModuleRef && !(componentFactory instanceof ComponentFactoryBoundToModule)) {\n                ngModuleRef = contextInjector.get(NgModuleRef);\n            }\n            var componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);\n            this.insert(componentRef.hostView, index);\n            return componentRef;\n        };\n        ViewContainerRef_.prototype.insert = function (viewRef, index) {\n            if (viewRef.destroyed) {\n                throw new Error('Cannot insert a destroyed View in a ViewContainer!');\n            }\n            var viewRef_ = viewRef;\n            var viewData = viewRef_._view;\n            attachEmbeddedView(this._view, this._data, index, viewData);\n            viewRef_.attachToViewContainerRef(this);\n            return viewRef;\n        };\n        ViewContainerRef_.prototype.move = function (viewRef, currentIndex) {\n            if (viewRef.destroyed) {\n                throw new Error('Cannot move a destroyed View in a ViewContainer!');\n            }\n            var previousIndex = this._embeddedViews.indexOf(viewRef._view);\n            moveEmbeddedView(this._data, previousIndex, currentIndex);\n            return viewRef;\n        };\n        ViewContainerRef_.prototype.indexOf = function (viewRef) {\n            return this._embeddedViews.indexOf(viewRef._view);\n        };\n        ViewContainerRef_.prototype.remove = function (index) {\n            var viewData = detachEmbeddedView(this._data, index);\n            if (viewData) {\n                Services.destroyView(viewData);\n            }\n        };\n        ViewContainerRef_.prototype.detach = function (index) {\n            var view = detachEmbeddedView(this._data, index);\n            return view ? new ViewRef_(view) : null;\n        };\n        return ViewContainerRef_;\n    }());\n    function createChangeDetectorRef(view) {\n        return new ViewRef_(view);\n    }\n    var ViewRef_ = /** @class */ (function () {\n        function ViewRef_(_view) {\n            this._view = _view;\n            this._viewContainerRef = null;\n            this._appRef = null;\n        }\n        Object.defineProperty(ViewRef_.prototype, \"rootNodes\", {\n            get: function () { return rootRenderNodes(this._view); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ViewRef_.prototype, \"context\", {\n            get: function () { return this._view.context; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ViewRef_.prototype, \"destroyed\", {\n            get: function () { return (this._view.state & 128 /* Destroyed */) !== 0; },\n            enumerable: true,\n            configurable: true\n        });\n        ViewRef_.prototype.markForCheck = function () { markParentViewsForCheck(this._view); };\n        ViewRef_.prototype.detach = function () { this._view.state &= ~4 /* Attached */; };\n        ViewRef_.prototype.detectChanges = function () {\n            var fs = this._view.root.rendererFactory;\n            if (fs.begin) {\n                fs.begin();\n            }\n            try {\n                Services.checkAndUpdateView(this._view);\n            }\n            finally {\n                if (fs.end) {\n                    fs.end();\n                }\n            }\n        };\n        ViewRef_.prototype.checkNoChanges = function () { Services.checkNoChangesView(this._view); };\n        ViewRef_.prototype.reattach = function () { this._view.state |= 4 /* Attached */; };\n        ViewRef_.prototype.onDestroy = function (callback) {\n            if (!this._view.disposables) {\n                this._view.disposables = [];\n            }\n            this._view.disposables.push(callback);\n        };\n        ViewRef_.prototype.destroy = function () {\n            if (this._appRef) {\n                this._appRef.detachView(this);\n            }\n            else if (this._viewContainerRef) {\n                this._viewContainerRef.detach(this._viewContainerRef.indexOf(this));\n            }\n            Services.destroyView(this._view);\n        };\n        ViewRef_.prototype.detachFromAppRef = function () {\n            this._appRef = null;\n            renderDetachView$1(this._view);\n            Services.dirtyParentQueries(this._view);\n        };\n        ViewRef_.prototype.attachToAppRef = function (appRef) {\n            if (this._viewContainerRef) {\n                throw new Error('This view is already attached to a ViewContainer!');\n            }\n            this._appRef = appRef;\n        };\n        ViewRef_.prototype.attachToViewContainerRef = function (vcRef) {\n            if (this._appRef) {\n                throw new Error('This view is already attached directly to the ApplicationRef!');\n            }\n            this._viewContainerRef = vcRef;\n        };\n        return ViewRef_;\n    }());\n    function createTemplateData(view, def) {\n        return new TemplateRef_(view, def);\n    }\n    var TemplateRef_ = /** @class */ (function (_super) {\n        __extends(TemplateRef_, _super);\n        function TemplateRef_(_parentView, _def) {\n            var _this = _super.call(this) || this;\n            _this._parentView = _parentView;\n            _this._def = _def;\n            return _this;\n        }\n        TemplateRef_.prototype.createEmbeddedView = function (context) {\n            return new ViewRef_(Services.createEmbeddedView(this._parentView, this._def, this._def.element.template, context));\n        };\n        Object.defineProperty(TemplateRef_.prototype, \"elementRef\", {\n            get: function () {\n                return new ElementRef(asElementData(this._parentView, this._def.nodeIndex).renderElement);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return TemplateRef_;\n    }(TemplateRef));\n    function createInjector$1(view, elDef) {\n        return new Injector_(view, elDef);\n    }\n    var Injector_ = /** @class */ (function () {\n        function Injector_(view, elDef) {\n            this.view = view;\n            this.elDef = elDef;\n        }\n        Injector_.prototype.get = function (token, notFoundValue) {\n            if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n            var allowPrivateServices = this.elDef ? (this.elDef.flags & 33554432 /* ComponentView */) !== 0 : false;\n            return Services.resolveDep(this.view, this.elDef, allowPrivateServices, { flags: 0 /* None */, token: token, tokenKey: tokenKey(token) }, notFoundValue);\n        };\n        return Injector_;\n    }());\n    function nodeValue(view, index) {\n        var def = view.def.nodes[index];\n        if (def.flags & 1 /* TypeElement */) {\n            var elData = asElementData(view, def.nodeIndex);\n            return def.element.template ? elData.template : elData.renderElement;\n        }\n        else if (def.flags & 2 /* TypeText */) {\n            return asTextData(view, def.nodeIndex).renderText;\n        }\n        else if (def.flags & (20224 /* CatProvider */ | 16 /* TypePipe */)) {\n            return asProviderData(view, def.nodeIndex).instance;\n        }\n        throw new Error(\"Illegal state: read nodeValue for node index \" + index);\n    }\n    function createNgModuleRef(moduleType, parent, bootstrapComponents, def) {\n        return new NgModuleRef_(moduleType, parent, bootstrapComponents, def);\n    }\n    var NgModuleRef_ = /** @class */ (function () {\n        function NgModuleRef_(_moduleType, _parent, _bootstrapComponents, _def) {\n            this._moduleType = _moduleType;\n            this._parent = _parent;\n            this._bootstrapComponents = _bootstrapComponents;\n            this._def = _def;\n            this._destroyListeners = [];\n            this._destroyed = false;\n            this.injector = this;\n            initNgModule(this);\n        }\n        NgModuleRef_.prototype.get = function (token, notFoundValue, injectFlags) {\n            if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n            if (injectFlags === void 0) { injectFlags = exports.InjectFlags.Default; }\n            var flags = 0 /* None */;\n            if (injectFlags & exports.InjectFlags.SkipSelf) {\n                flags |= 1 /* SkipSelf */;\n            }\n            else if (injectFlags & exports.InjectFlags.Self) {\n                flags |= 4 /* Self */;\n            }\n            return resolveNgModuleDep(this, { token: token, tokenKey: tokenKey(token), flags: flags }, notFoundValue);\n        };\n        Object.defineProperty(NgModuleRef_.prototype, \"instance\", {\n            get: function () { return this.get(this._moduleType); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgModuleRef_.prototype, \"componentFactoryResolver\", {\n            get: function () { return this.get(ComponentFactoryResolver); },\n            enumerable: true,\n            configurable: true\n        });\n        NgModuleRef_.prototype.destroy = function () {\n            if (this._destroyed) {\n                throw new Error(\"The ng module \" + stringify(this.instance.constructor) + \" has already been destroyed.\");\n            }\n            this._destroyed = true;\n            callNgModuleLifecycle(this, 131072 /* OnDestroy */);\n            this._destroyListeners.forEach(function (listener) { return listener(); });\n        };\n        NgModuleRef_.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback); };\n        return NgModuleRef_;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var Renderer2TokenKey = tokenKey(Renderer2);\n    var ElementRefTokenKey = tokenKey(ElementRef);\n    var ViewContainerRefTokenKey = tokenKey(ViewContainerRef);\n    var TemplateRefTokenKey = tokenKey(TemplateRef);\n    var ChangeDetectorRefTokenKey = tokenKey(ChangeDetectorRef);\n    var InjectorRefTokenKey$1 = tokenKey(Injector);\n    var INJECTORRefTokenKey$1 = tokenKey(INJECTOR);\n    function directiveDef(checkIndex, flags, matchedQueries, childCount, ctor, deps, props, outputs) {\n        var bindings = [];\n        if (props) {\n            for (var prop in props) {\n                var _a = __read(props[prop], 2), bindingIndex = _a[0], nonMinifiedName = _a[1];\n                bindings[bindingIndex] = {\n                    flags: 8 /* TypeProperty */,\n                    name: prop, nonMinifiedName: nonMinifiedName,\n                    ns: null,\n                    securityContext: null,\n                    suffix: null\n                };\n            }\n        }\n        var outputDefs = [];\n        if (outputs) {\n            for (var propName in outputs) {\n                outputDefs.push({ type: 1 /* DirectiveOutput */, propName: propName, target: null, eventName: outputs[propName] });\n            }\n        }\n        flags |= 16384 /* TypeDirective */;\n        return _def(checkIndex, flags, matchedQueries, childCount, ctor, ctor, deps, bindings, outputDefs);\n    }\n    function pipeDef(flags, ctor, deps) {\n        flags |= 16 /* TypePipe */;\n        return _def(-1, flags, null, 0, ctor, ctor, deps);\n    }\n    function providerDef(flags, matchedQueries, token, value, deps) {\n        return _def(-1, flags, matchedQueries, 0, token, value, deps);\n    }\n    function _def(checkIndex, flags, matchedQueriesDsl, childCount, token, value, deps, bindings, outputs) {\n        var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;\n        if (!outputs) {\n            outputs = [];\n        }\n        if (!bindings) {\n            bindings = [];\n        }\n        // Need to resolve forwardRefs as e.g. for `useValue` we\n        // lowered the expression and then stopped evaluating it,\n        // i.e. also didn't unwrap it.\n        value = resolveForwardRef(value);\n        var depDefs = splitDepsDsl(deps, stringify(token));\n        return {\n            // will bet set by the view definition\n            nodeIndex: -1,\n            parent: null,\n            renderParent: null,\n            bindingIndex: -1,\n            outputIndex: -1,\n            // regular values\n            checkIndex: checkIndex,\n            flags: flags,\n            childFlags: 0,\n            directChildFlags: 0,\n            childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references,\n            ngContentIndex: -1, childCount: childCount, bindings: bindings,\n            bindingFlags: calcBindingFlags(bindings), outputs: outputs,\n            element: null,\n            provider: { token: token, value: value, deps: depDefs },\n            text: null,\n            query: null,\n            ngContent: null\n        };\n    }\n    function createProviderInstance(view, def) {\n        return _createProviderInstance$1(view, def);\n    }\n    function createPipeInstance(view, def) {\n        // deps are looked up from component.\n        var compView = view;\n        while (compView.parent && !isComponentView(compView)) {\n            compView = compView.parent;\n        }\n        // pipes can see the private services of the component\n        var allowPrivateServices = true;\n        // pipes are always eager and classes!\n        return createClass(compView.parent, viewParentEl(compView), allowPrivateServices, def.provider.value, def.provider.deps);\n    }\n    function createDirectiveInstance(view, def) {\n        // components can see other private services, other directives can't.\n        var allowPrivateServices = (def.flags & 32768 /* Component */) > 0;\n        // directives are always eager and classes!\n        var instance = createClass(view, def.parent, allowPrivateServices, def.provider.value, def.provider.deps);\n        if (def.outputs.length) {\n            for (var i = 0; i < def.outputs.length; i++) {\n                var output = def.outputs[i];\n                var outputObservable = instance[output.propName];\n                if (isObservable(outputObservable)) {\n                    var subscription = outputObservable.subscribe(eventHandlerClosure(view, def.parent.nodeIndex, output.eventName));\n                    view.disposables[def.outputIndex + i] = subscription.unsubscribe.bind(subscription);\n                }\n                else {\n                    throw new Error(\"@Output \" + output.propName + \" not initialized in '\" + instance.constructor.name + \"'.\");\n                }\n            }\n        }\n        return instance;\n    }\n    function eventHandlerClosure(view, index, eventName) {\n        return function (event) { return dispatchEvent(view, index, eventName, event); };\n    }\n    function checkAndUpdateDirectiveInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n        var providerData = asProviderData(view, def.nodeIndex);\n        var directive = providerData.instance;\n        var changed = false;\n        var changes = undefined;\n        var bindLen = def.bindings.length;\n        if (bindLen > 0 && checkBinding(view, def, 0, v0)) {\n            changed = true;\n            changes = updateProp(view, providerData, def, 0, v0, changes);\n        }\n        if (bindLen > 1 && checkBinding(view, def, 1, v1)) {\n            changed = true;\n            changes = updateProp(view, providerData, def, 1, v1, changes);\n        }\n        if (bindLen > 2 && checkBinding(view, def, 2, v2)) {\n            changed = true;\n            changes = updateProp(view, providerData, def, 2, v2, changes);\n        }\n        if (bindLen > 3 && checkBinding(view, def, 3, v3)) {\n            changed = true;\n            changes = updateProp(view, providerData, def, 3, v3, changes);\n        }\n        if (bindLen > 4 && checkBinding(view, def, 4, v4)) {\n            changed = true;\n            changes = updateProp(view, providerData, def, 4, v4, changes);\n        }\n        if (bindLen > 5 && checkBinding(view, def, 5, v5)) {\n            changed = true;\n            changes = updateProp(view, providerData, def, 5, v5, changes);\n        }\n        if (bindLen > 6 && checkBinding(view, def, 6, v6)) {\n            changed = true;\n            changes = updateProp(view, providerData, def, 6, v6, changes);\n        }\n        if (bindLen > 7 && checkBinding(view, def, 7, v7)) {\n            changed = true;\n            changes = updateProp(view, providerData, def, 7, v7, changes);\n        }\n        if (bindLen > 8 && checkBinding(view, def, 8, v8)) {\n            changed = true;\n            changes = updateProp(view, providerData, def, 8, v8, changes);\n        }\n        if (bindLen > 9 && checkBinding(view, def, 9, v9)) {\n            changed = true;\n            changes = updateProp(view, providerData, def, 9, v9, changes);\n        }\n        if (changes) {\n            directive.ngOnChanges(changes);\n        }\n        if ((def.flags & 65536 /* OnInit */) &&\n            shouldCallLifecycleInitHook(view, 256 /* InitState_CallingOnInit */, def.nodeIndex)) {\n            directive.ngOnInit();\n        }\n        if (def.flags & 262144 /* DoCheck */) {\n            directive.ngDoCheck();\n        }\n        return changed;\n    }\n    function checkAndUpdateDirectiveDynamic(view, def, values) {\n        var providerData = asProviderData(view, def.nodeIndex);\n        var directive = providerData.instance;\n        var changed = false;\n        var changes = undefined;\n        for (var i = 0; i < values.length; i++) {\n            if (checkBinding(view, def, i, values[i])) {\n                changed = true;\n                changes = updateProp(view, providerData, def, i, values[i], changes);\n            }\n        }\n        if (changes) {\n            directive.ngOnChanges(changes);\n        }\n        if ((def.flags & 65536 /* OnInit */) &&\n            shouldCallLifecycleInitHook(view, 256 /* InitState_CallingOnInit */, def.nodeIndex)) {\n            directive.ngOnInit();\n        }\n        if (def.flags & 262144 /* DoCheck */) {\n            directive.ngDoCheck();\n        }\n        return changed;\n    }\n    function _createProviderInstance$1(view, def) {\n        // private services can see other private services\n        var allowPrivateServices = (def.flags & 8192 /* PrivateProvider */) > 0;\n        var providerDef = def.provider;\n        switch (def.flags & 201347067 /* Types */) {\n            case 512 /* TypeClassProvider */:\n                return createClass(view, def.parent, allowPrivateServices, providerDef.value, providerDef.deps);\n            case 1024 /* TypeFactoryProvider */:\n                return callFactory(view, def.parent, allowPrivateServices, providerDef.value, providerDef.deps);\n            case 2048 /* TypeUseExistingProvider */:\n                return resolveDep(view, def.parent, allowPrivateServices, providerDef.deps[0]);\n            case 256 /* TypeValueProvider */:\n                return providerDef.value;\n        }\n    }\n    function createClass(view, elDef, allowPrivateServices, ctor, deps) {\n        var len = deps.length;\n        switch (len) {\n            case 0:\n                return new ctor();\n            case 1:\n                return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]));\n            case 2:\n                return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));\n            case 3:\n                return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));\n            default:\n                var depValues = [];\n                for (var i = 0; i < len; i++) {\n                    depValues.push(resolveDep(view, elDef, allowPrivateServices, deps[i]));\n                }\n                return new (ctor.bind.apply(ctor, __spread([void 0], depValues)))();\n        }\n    }\n    function callFactory(view, elDef, allowPrivateServices, factory, deps) {\n        var len = deps.length;\n        switch (len) {\n            case 0:\n                return factory();\n            case 1:\n                return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]));\n            case 2:\n                return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));\n            case 3:\n                return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));\n            default:\n                var depValues = [];\n                for (var i = 0; i < len; i++) {\n                    depValues.push(resolveDep(view, elDef, allowPrivateServices, deps[i]));\n                }\n                return factory.apply(void 0, __spread(depValues));\n        }\n    }\n    // This default value is when checking the hierarchy for a token.\n    //\n    // It means both:\n    // - the token is not provided by the current injector,\n    // - only the element injectors should be checked (ie do not check module injectors\n    //\n    //          mod1\n    //         /\n    //       el1   mod2\n    //         \\  /\n    //         el2\n    //\n    // When requesting el2.injector.get(token), we should check in the following order and return the\n    // first found value:\n    // - el2.injector.get(token, default)\n    // - el1.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) -> do not check the module\n    // - mod2.injector.get(token, default)\n    var NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};\n    function resolveDep(view, elDef, allowPrivateServices, depDef, notFoundValue) {\n        if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n        if (depDef.flags & 8 /* Value */) {\n            return depDef.token;\n        }\n        var startView = view;\n        if (depDef.flags & 2 /* Optional */) {\n            notFoundValue = null;\n        }\n        var tokenKey = depDef.tokenKey;\n        if (tokenKey === ChangeDetectorRefTokenKey) {\n            // directives on the same element as a component should be able to control the change detector\n            // of that component as well.\n            allowPrivateServices = !!(elDef && elDef.element.componentView);\n        }\n        if (elDef && (depDef.flags & 1 /* SkipSelf */)) {\n            allowPrivateServices = false;\n            elDef = elDef.parent;\n        }\n        var searchView = view;\n        while (searchView) {\n            if (elDef) {\n                switch (tokenKey) {\n                    case Renderer2TokenKey: {\n                        var compView = findCompView(searchView, elDef, allowPrivateServices);\n                        return compView.renderer;\n                    }\n                    case ElementRefTokenKey:\n                        return new ElementRef(asElementData(searchView, elDef.nodeIndex).renderElement);\n                    case ViewContainerRefTokenKey:\n                        return asElementData(searchView, elDef.nodeIndex).viewContainer;\n                    case TemplateRefTokenKey: {\n                        if (elDef.element.template) {\n                            return asElementData(searchView, elDef.nodeIndex).template;\n                        }\n                        break;\n                    }\n                    case ChangeDetectorRefTokenKey: {\n                        var cdView = findCompView(searchView, elDef, allowPrivateServices);\n                        return createChangeDetectorRef(cdView);\n                    }\n                    case InjectorRefTokenKey$1:\n                    case INJECTORRefTokenKey$1:\n                        return createInjector$1(searchView, elDef);\n                    default:\n                        var providerDef_1 = (allowPrivateServices ? elDef.element.allProviders :\n                            elDef.element.publicProviders)[tokenKey];\n                        if (providerDef_1) {\n                            var providerData = asProviderData(searchView, providerDef_1.nodeIndex);\n                            if (!providerData) {\n                                providerData = { instance: _createProviderInstance$1(searchView, providerDef_1) };\n                                searchView.nodes[providerDef_1.nodeIndex] = providerData;\n                            }\n                            return providerData.instance;\n                        }\n                }\n            }\n            allowPrivateServices = isComponentView(searchView);\n            elDef = viewParentEl(searchView);\n            searchView = searchView.parent;\n            if (depDef.flags & 4 /* Self */) {\n                searchView = null;\n            }\n        }\n        var value = startView.root.injector.get(depDef.token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR);\n        if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR ||\n            notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\n            // Return the value from the root element injector when\n            // - it provides it\n            //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n            // - the module injector should not be checked\n            //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n            return value;\n        }\n        return startView.root.ngModule.injector.get(depDef.token, notFoundValue);\n    }\n    function findCompView(view, elDef, allowPrivateServices) {\n        var compView;\n        if (allowPrivateServices) {\n            compView = asElementData(view, elDef.nodeIndex).componentView;\n        }\n        else {\n            compView = view;\n            while (compView.parent && !isComponentView(compView)) {\n                compView = compView.parent;\n            }\n        }\n        return compView;\n    }\n    function updateProp(view, providerData, def, bindingIdx, value, changes) {\n        if (def.flags & 32768 /* Component */) {\n            var compView = asElementData(view, def.parent.nodeIndex).componentView;\n            if (compView.def.flags & 2 /* OnPush */) {\n                compView.state |= 8 /* ChecksEnabled */;\n            }\n        }\n        var binding = def.bindings[bindingIdx];\n        var propName = binding.name;\n        // Note: This is still safe with Closure Compiler as\n        // the user passed in the property name as an object has to `providerDef`,\n        // so Closure Compiler will have renamed the property correctly already.\n        providerData.instance[propName] = value;\n        if (def.flags & 524288 /* OnChanges */) {\n            changes = changes || {};\n            var oldValue = WrappedValue.unwrap(view.oldValues[def.bindingIndex + bindingIdx]);\n            var binding_1 = def.bindings[bindingIdx];\n            changes[binding_1.nonMinifiedName] =\n                new SimpleChange(oldValue, value, (view.state & 2 /* FirstCheck */) !== 0);\n        }\n        view.oldValues[def.bindingIndex + bindingIdx] = value;\n        return changes;\n    }\n    // This function calls the ngAfterContentCheck, ngAfterContentInit,\n    // ngAfterViewCheck, and ngAfterViewInit lifecycle hooks (depending on the node\n    // flags in lifecycle). Unlike ngDoCheck, ngOnChanges and ngOnInit, which are\n    // called during a pre-order traversal of the view tree (that is calling the\n    // parent hooks before the child hooks) these events are sent in using a\n    // post-order traversal of the tree (children before parents). This changes the\n    // meaning of initIndex in the view state. For ngOnInit, initIndex tracks the\n    // expected nodeIndex which a ngOnInit should be called. When sending\n    // ngAfterContentInit and ngAfterViewInit it is the expected count of\n    // ngAfterContentInit or ngAfterViewInit methods that have been called. This\n    // ensure that despite being called recursively or after picking up after an\n    // exception, the ngAfterContentInit or ngAfterViewInit will be called on the\n    // correct nodes. Consider for example, the following (where E is an element\n    // and D is a directive)\n    //  Tree:       pre-order index  post-order index\n    //    E1        0                6\n    //      E2      1                1\n    //       D3     2                0\n    //      E4      3                5\n    //       E5     4                4\n    //        E6    5                2\n    //        E7    6                3\n    // As can be seen, the post-order index has an unclear relationship to the\n    // pre-order index (postOrderIndex === preOrderIndex - parentCount +\n    // childCount). Since number of calls to ngAfterContentInit and ngAfterViewInit\n    // are stable (will be the same for the same view regardless of exceptions or\n    // recursion) we just need to count them which will roughly correspond to the\n    // post-order index (it skips elements and directives that do not have\n    // lifecycle hooks).\n    //\n    // For example, if an exception is raised in the E6.onAfterViewInit() the\n    // initIndex is left at 3 (by shouldCallLifecycleInitHook() which set it to\n    // initIndex + 1). When checkAndUpdateView() is called again D3, E2 and E6 will\n    // not have their ngAfterViewInit() called but, starting with E7, the rest of\n    // the view will begin getting ngAfterViewInit() called until a check and\n    // pass is complete.\n    //\n    // This algorthim also handles recursion. Consider if E4's ngAfterViewInit()\n    // indirectly calls E1's ChangeDetectorRef.detectChanges(). The expected\n    // initIndex is set to 6, the recusive checkAndUpdateView() starts walk again.\n    // D3, E2, E6, E7, E5 and E4 are skipped, ngAfterViewInit() is called on E1.\n    // When the recursion returns the initIndex will be 7 so E1 is skipped as it\n    // has already been called in the recursively called checkAnUpdateView().\n    function callLifecycleHooksChildrenFirst(view, lifecycles) {\n        if (!(view.def.nodeFlags & lifecycles)) {\n            return;\n        }\n        var nodes = view.def.nodes;\n        var initIndex = 0;\n        for (var i = 0; i < nodes.length; i++) {\n            var nodeDef = nodes[i];\n            var parent_1 = nodeDef.parent;\n            if (!parent_1 && nodeDef.flags & lifecycles) {\n                // matching root node (e.g. a pipe)\n                callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);\n            }\n            if ((nodeDef.childFlags & lifecycles) === 0) {\n                // no child matches one of the lifecycles\n                i += nodeDef.childCount;\n            }\n            while (parent_1 && (parent_1.flags & 1 /* TypeElement */) &&\n                i === parent_1.nodeIndex + parent_1.childCount) {\n                // last child of an element\n                if (parent_1.directChildFlags & lifecycles) {\n                    initIndex = callElementProvidersLifecycles(view, parent_1, lifecycles, initIndex);\n                }\n                parent_1 = parent_1.parent;\n            }\n        }\n    }\n    function callElementProvidersLifecycles(view, elDef, lifecycles, initIndex) {\n        for (var i = elDef.nodeIndex + 1; i <= elDef.nodeIndex + elDef.childCount; i++) {\n            var nodeDef = view.def.nodes[i];\n            if (nodeDef.flags & lifecycles) {\n                callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);\n            }\n            // only visit direct children\n            i += nodeDef.childCount;\n        }\n        return initIndex;\n    }\n    function callProviderLifecycles(view, index, lifecycles, initIndex) {\n        var providerData = asProviderData(view, index);\n        if (!providerData) {\n            return;\n        }\n        var provider = providerData.instance;\n        if (!provider) {\n            return;\n        }\n        Services.setCurrentNode(view, index);\n        if (lifecycles & 1048576 /* AfterContentInit */ &&\n            shouldCallLifecycleInitHook(view, 512 /* InitState_CallingAfterContentInit */, initIndex)) {\n            provider.ngAfterContentInit();\n        }\n        if (lifecycles & 2097152 /* AfterContentChecked */) {\n            provider.ngAfterContentChecked();\n        }\n        if (lifecycles & 4194304 /* AfterViewInit */ &&\n            shouldCallLifecycleInitHook(view, 768 /* InitState_CallingAfterViewInit */, initIndex)) {\n            provider.ngAfterViewInit();\n        }\n        if (lifecycles & 8388608 /* AfterViewChecked */) {\n            provider.ngAfterViewChecked();\n        }\n        if (lifecycles & 131072 /* OnDestroy */) {\n            provider.ngOnDestroy();\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var ComponentFactoryResolver$1 = /** @class */ (function (_super) {\n        __extends(ComponentFactoryResolver, _super);\n        /**\n         * @param ngModule The NgModuleRef to which all resolved factories are bound.\n         */\n        function ComponentFactoryResolver(ngModule) {\n            var _this = _super.call(this) || this;\n            _this.ngModule = ngModule;\n            return _this;\n        }\n        ComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {\n            ngDevMode && assertComponentType(component);\n            var componentDef = getComponentDef(component);\n            return new ComponentFactory$1(componentDef, this.ngModule);\n        };\n        return ComponentFactoryResolver;\n    }(ComponentFactoryResolver));\n    function toRefArray(map) {\n        var array = [];\n        for (var nonMinified in map) {\n            if (map.hasOwnProperty(nonMinified)) {\n                var minified = map[nonMinified];\n                array.push({ propName: minified, templateName: nonMinified });\n            }\n        }\n        return array;\n    }\n    /**\n     * A change detection scheduler token for {@link RootContext}. This token is the default value used\n     * for the default `RootContext` found in the {@link ROOT_CONTEXT} token.\n     */\n    var SCHEDULER = new InjectionToken('SCHEDULER_TOKEN', {\n        providedIn: 'root',\n        factory: function () { return defaultScheduler; },\n    });\n    function createChainedInjector(rootViewInjector, moduleInjector) {\n        return {\n            get: function (token, notFoundValue, flags) {\n                var value = rootViewInjector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR, flags);\n                if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR ||\n                    notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\n                    // Return the value from the root element injector when\n                    // - it provides it\n                    //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n                    // - the module injector should not be checked\n                    //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n                    return value;\n                }\n                return moduleInjector.get(token, notFoundValue, flags);\n            }\n        };\n    }\n    /**\n     * Render3 implementation of {@link viewEngine_ComponentFactory}.\n     */\n    var ComponentFactory$1 = /** @class */ (function (_super) {\n        __extends(ComponentFactory, _super);\n        /**\n         * @param componentDef The component definition.\n         * @param ngModule The NgModuleRef to which the factory is bound.\n         */\n        function ComponentFactory(componentDef, ngModule) {\n            var _this = _super.call(this) || this;\n            _this.componentDef = componentDef;\n            _this.ngModule = ngModule;\n            _this.componentType = componentDef.type;\n            _this.selector = stringifyCSSSelectorList(componentDef.selectors);\n            _this.ngContentSelectors =\n                componentDef.ngContentSelectors ? componentDef.ngContentSelectors : [];\n            _this.isBoundToModule = !!ngModule;\n            return _this;\n        }\n        Object.defineProperty(ComponentFactory.prototype, \"inputs\", {\n            get: function () {\n                return toRefArray(this.componentDef.inputs);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ComponentFactory.prototype, \"outputs\", {\n            get: function () {\n                return toRefArray(this.componentDef.outputs);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        ComponentFactory.prototype.create = function (injector, projectableNodes, rootSelectorOrNode, ngModule) {\n            ngModule = ngModule || this.ngModule;\n            var rootViewInjector = ngModule ? createChainedInjector(injector, ngModule.injector) : injector;\n            var rendererFactory = rootViewInjector.get(RendererFactory2, domRendererFactory3);\n            var sanitizer = rootViewInjector.get(Sanitizer, null);\n            var hostRNode = rootSelectorOrNode ?\n                locateHostElement(rendererFactory, rootSelectorOrNode, this.componentDef.encapsulation) :\n                // Determine a tag name used for creating host elements when this component is created\n                // dynamically. Default to 'div' if this component did not specify any tag name in its\n                // selector.\n                elementCreate(this.componentDef.selectors[0][0] || 'div', rendererFactory.createRenderer(null, this.componentDef), null);\n            var rootFlags = this.componentDef.onPush ? 64 /* Dirty */ | 512 /* IsRoot */ :\n                16 /* CheckAlways */ | 512 /* IsRoot */;\n            // Check whether this Component needs to be isolated from other components, i.e. whether it\n            // should be placed into its own (empty) root context or existing root context should be used.\n            // Note: this is internal-only convention and might change in the future, so it should not be\n            // relied upon externally.\n            var isIsolated = typeof rootSelectorOrNode === 'string' &&\n                /^#root-ng-internal-isolated-\\d+/.test(rootSelectorOrNode);\n            var rootContext = createRootContext();\n            var renderer = rendererFactory.createRenderer(hostRNode, this.componentDef);\n            if (rootSelectorOrNode && hostRNode) {\n                ngDevMode && ngDevMode.rendererSetAttribute++;\n                isProceduralRenderer(renderer) ?\n                    renderer.setAttribute(hostRNode, 'ng-version', VERSION.full) :\n                    hostRNode.setAttribute('ng-version', VERSION.full);\n            }\n            // Create the root view. Uses empty TView and ContentTemplate.\n            var rootTView = createTView(0 /* Root */, -1, null, 1, 0, null, null, null, null, null);\n            var rootLView = createLView(null, rootTView, rootContext, rootFlags, null, null, rendererFactory, renderer, sanitizer, rootViewInjector);\n            // rootView is the parent when bootstrapping\n            // TODO(misko): it looks like we are entering view here but we don't really need to as\n            // `renderView` does that. However as the code is written it is needed because\n            // `createRootComponentView` and `createRootComponent` both read global state. Fixing those\n            // issues would allow us to drop this.\n            enterView(rootLView, null);\n            var component;\n            var tElementNode;\n            try {\n                var componentView = createRootComponentView(hostRNode, this.componentDef, rootLView, rendererFactory, renderer);\n                tElementNode = getTNode(0, rootLView);\n                if (projectableNodes) {\n                    // projectable nodes can be passed as array of arrays or an array of iterables (ngUpgrade\n                    // case). Here we do normalize passed data structure to be an array of arrays to avoid\n                    // complex checks down the line.\n                    tElementNode.projection =\n                        projectableNodes.map(function (nodesforSlot) { return Array.from(nodesforSlot); });\n                }\n                // TODO: should LifecycleHooksFeature and other host features be generated by the compiler and\n                // executed here?\n                // Angular 5 reference: https://stackblitz.com/edit/lifecycle-hooks-vcref\n                component = createRootComponent(componentView, this.componentDef, rootLView, rootContext, [LifecycleHooksFeature]);\n                renderView(rootLView, rootTView, null);\n            }\n            finally {\n                leaveView();\n            }\n            var componentRef = new ComponentRef$1(this.componentType, component, createElementRef(ElementRef, tElementNode, rootLView), rootLView, tElementNode);\n            if (!rootSelectorOrNode || isIsolated) {\n                // The host element of the internal or isolated root view is attached to the component's host\n                // view node.\n                componentRef.hostView._tViewNode.child = tElementNode;\n            }\n            return componentRef;\n        };\n        return ComponentFactory;\n    }(ComponentFactory));\n    var componentFactoryResolver = new ComponentFactoryResolver$1();\n    /**\n     * Creates a ComponentFactoryResolver and stores it on the injector. Or, if the\n     * ComponentFactoryResolver\n     * already exists, retrieves the existing ComponentFactoryResolver.\n     *\n     * @returns The ComponentFactoryResolver instance to use\n     */\n    function injectComponentFactoryResolver() {\n        return componentFactoryResolver;\n    }\n    /**\n     * Represents an instance of a Component created via a {@link ComponentFactory}.\n     *\n     * `ComponentRef` provides access to the Component Instance as well other objects related to this\n     * Component Instance and allows you to destroy the Component Instance via the {@link #destroy}\n     * method.\n     *\n     */\n    var ComponentRef$1 = /** @class */ (function (_super) {\n        __extends(ComponentRef, _super);\n        function ComponentRef(componentType, instance, location, _rootLView, _tNode) {\n            var _this = _super.call(this) || this;\n            _this.location = location;\n            _this._rootLView = _rootLView;\n            _this._tNode = _tNode;\n            _this.destroyCbs = [];\n            _this.instance = instance;\n            _this.hostView = _this.changeDetectorRef = new RootViewRef(_rootLView);\n            _this.hostView._tViewNode = assignTViewNodeToLView(_rootLView[TVIEW], null, -1, _rootLView);\n            _this.componentType = componentType;\n            return _this;\n        }\n        Object.defineProperty(ComponentRef.prototype, \"injector\", {\n            get: function () { return new NodeInjector(this._tNode, this._rootLView); },\n            enumerable: true,\n            configurable: true\n        });\n        ComponentRef.prototype.destroy = function () {\n            if (this.destroyCbs) {\n                this.destroyCbs.forEach(function (fn) { return fn(); });\n                this.destroyCbs = null;\n                !this.hostView.destroyed && this.hostView.destroy();\n            }\n        };\n        ComponentRef.prototype.onDestroy = function (callback) {\n            if (this.destroyCbs) {\n                this.destroyCbs.push(callback);\n            }\n        };\n        return ComponentRef;\n    }(ComponentRef));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * NOTE: changes to the `ngI18nClosureMode` name must be synced with `compiler-cli/src/tooling.ts`.\n     */\n    if (typeof ngI18nClosureMode === 'undefined') {\n        // These property accesses can be ignored because ngI18nClosureMode will be set to false\n        // when optimizing code and the whole if statement will be dropped.\n        // Make sure to refer to ngI18nClosureMode as ['ngI18nClosureMode'] for closure.\n        // NOTE: we need to have it in IIFE so that the tree-shaker is happy.\n        (function () {\n            // tslint:disable-next-line:no-toplevel-property-access\n            _global['ngI18nClosureMode'] =\n                // TODO(FW-1250): validate that this actually, you know, works.\n                // tslint:disable-next-line:no-toplevel-property-access\n                typeof goog !== 'undefined' && typeof goog.getMsg === 'function';\n        })();\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // THIS CODE IS GENERATED - DO NOT MODIFY\n    // See angular/tools/gulp-tasks/cldr/extract.js\n    var u = undefined;\n    function plural(n) {\n        var i = Math.floor(Math.abs(n)), v = n.toString().replace(/^[^.]*\\.?/, '').length;\n        if (i === 1 && v === 0)\n            return 1;\n        return 5;\n    }\n    var localeEn = [\n        'en',\n        [['a', 'p'], ['AM', 'PM'], u],\n        [['AM', 'PM'], u, u],\n        [\n            ['S', 'M', 'T', 'W', 'T', 'F', 'S'], ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n            ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n            ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']\n        ],\n        u,\n        [\n            ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],\n            ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n            [\n                'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n                'October', 'November', 'December'\n            ]\n        ],\n        u,\n        [['B', 'A'], ['BC', 'AD'], ['Before Christ', 'Anno Domini']],\n        0,\n        [6, 0],\n        ['M/d/yy', 'MMM d, y', 'MMMM d, y', 'EEEE, MMMM d, y'],\n        ['h:mm a', 'h:mm:ss a', 'h:mm:ss a z', 'h:mm:ss a zzzz'],\n        ['{1}, {0}', u, '{1} \\'at\\' {0}', u],\n        ['.', ',', ';', '%', '+', '-', 'E', '×', '‰', '∞', 'NaN', ':'],\n        ['#,##0.###', '#,##0%', '¤#,##0.00', '#E0'],\n        'USD',\n        '$',\n        'US Dollar',\n        {},\n        'ltr',\n        plural\n    ];\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * This const is used to store the locale data registered with `registerLocaleData`\n     */\n    var LOCALE_DATA = {};\n    /**\n     * Register locale data to be used internally by Angular. See the\n     * [\"I18n guide\"](guide/i18n#i18n-pipes) to know how to import additional locale data.\n     *\n     * The signature `registerLocaleData(data: any, extraData?: any)` is deprecated since v5.1\n     */\n    function registerLocaleData(data, localeId, extraData) {\n        if (typeof localeId !== 'string') {\n            extraData = localeId;\n            localeId = data[exports.ɵLocaleDataIndex.LocaleId];\n        }\n        localeId = localeId.toLowerCase().replace(/_/g, '-');\n        LOCALE_DATA[localeId] = data;\n        if (extraData) {\n            LOCALE_DATA[localeId][exports.ɵLocaleDataIndex.ExtraData] = extraData;\n        }\n    }\n    /**\n     * Finds the locale data for a given locale.\n     *\n     * @param locale The locale code.\n     * @returns The locale data.\n     * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n     */\n    function findLocaleData(locale) {\n        var normalizedLocale = normalizeLocale(locale);\n        var match = getLocaleData(normalizedLocale);\n        if (match) {\n            return match;\n        }\n        // let's try to find a parent locale\n        var parentLocale = normalizedLocale.split('-')[0];\n        match = getLocaleData(parentLocale);\n        if (match) {\n            return match;\n        }\n        if (parentLocale === 'en') {\n            return localeEn;\n        }\n        throw new Error(\"Missing locale data for the locale \\\"\" + locale + \"\\\".\");\n    }\n    /**\n     * Retrieves the default currency code for the given locale.\n     *\n     * The default is defined as the first currency which is still in use.\n     *\n     * @param locale The code of the locale whose currency code we want.\n     * @returns The code of the default currency for the given locale.\n     *\n     * @publicApi\n     */\n    function getLocaleCurrencyCode(locale) {\n        var data = findLocaleData(locale);\n        return data[exports.ɵLocaleDataIndex.CurrencyCode] || null;\n    }\n    /**\n     * Retrieves the plural function used by ICU expressions to determine the plural case to use\n     * for a given locale.\n     * @param locale A locale code for the locale format rules to use.\n     * @returns The plural function for the locale.\n     * @see `NgPlural`\n     * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n     */\n    function getLocalePluralCase(locale) {\n        var data = findLocaleData(locale);\n        return data[exports.ɵLocaleDataIndex.PluralCase];\n    }\n    /**\n     * Helper function to get the given `normalizedLocale` from `LOCALE_DATA`\n     * or from the global `ng.common.locale`.\n     */\n    function getLocaleData(normalizedLocale) {\n        if (!(normalizedLocale in LOCALE_DATA)) {\n            LOCALE_DATA[normalizedLocale] = _global.ng && _global.ng.common && _global.ng.common.locales &&\n                _global.ng.common.locales[normalizedLocale];\n        }\n        return LOCALE_DATA[normalizedLocale];\n    }\n    /**\n     * Helper function to remove all the locale data from `LOCALE_DATA`.\n     */\n    function unregisterAllLocaleData() {\n        LOCALE_DATA = {};\n    }\n    (function (LocaleDataIndex) {\n        LocaleDataIndex[LocaleDataIndex[\"LocaleId\"] = 0] = \"LocaleId\";\n        LocaleDataIndex[LocaleDataIndex[\"DayPeriodsFormat\"] = 1] = \"DayPeriodsFormat\";\n        LocaleDataIndex[LocaleDataIndex[\"DayPeriodsStandalone\"] = 2] = \"DayPeriodsStandalone\";\n        LocaleDataIndex[LocaleDataIndex[\"DaysFormat\"] = 3] = \"DaysFormat\";\n        LocaleDataIndex[LocaleDataIndex[\"DaysStandalone\"] = 4] = \"DaysStandalone\";\n        LocaleDataIndex[LocaleDataIndex[\"MonthsFormat\"] = 5] = \"MonthsFormat\";\n        LocaleDataIndex[LocaleDataIndex[\"MonthsStandalone\"] = 6] = \"MonthsStandalone\";\n        LocaleDataIndex[LocaleDataIndex[\"Eras\"] = 7] = \"Eras\";\n        LocaleDataIndex[LocaleDataIndex[\"FirstDayOfWeek\"] = 8] = \"FirstDayOfWeek\";\n        LocaleDataIndex[LocaleDataIndex[\"WeekendRange\"] = 9] = \"WeekendRange\";\n        LocaleDataIndex[LocaleDataIndex[\"DateFormat\"] = 10] = \"DateFormat\";\n        LocaleDataIndex[LocaleDataIndex[\"TimeFormat\"] = 11] = \"TimeFormat\";\n        LocaleDataIndex[LocaleDataIndex[\"DateTimeFormat\"] = 12] = \"DateTimeFormat\";\n        LocaleDataIndex[LocaleDataIndex[\"NumberSymbols\"] = 13] = \"NumberSymbols\";\n        LocaleDataIndex[LocaleDataIndex[\"NumberFormats\"] = 14] = \"NumberFormats\";\n        LocaleDataIndex[LocaleDataIndex[\"CurrencyCode\"] = 15] = \"CurrencyCode\";\n        LocaleDataIndex[LocaleDataIndex[\"CurrencySymbol\"] = 16] = \"CurrencySymbol\";\n        LocaleDataIndex[LocaleDataIndex[\"CurrencyName\"] = 17] = \"CurrencyName\";\n        LocaleDataIndex[LocaleDataIndex[\"Currencies\"] = 18] = \"Currencies\";\n        LocaleDataIndex[LocaleDataIndex[\"Directionality\"] = 19] = \"Directionality\";\n        LocaleDataIndex[LocaleDataIndex[\"PluralCase\"] = 20] = \"PluralCase\";\n        LocaleDataIndex[LocaleDataIndex[\"ExtraData\"] = 21] = \"ExtraData\";\n    })(exports.ɵLocaleDataIndex || (exports.ɵLocaleDataIndex = {}));\n    /**\n     * Returns the canonical form of a locale name - lowercase with `_` replaced with `-`.\n     */\n    function normalizeLocale(locale) {\n        return locale.toLowerCase().replace(/_/g, '-');\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Returns the plural case based on the locale\n     */\n    function getPluralCase(value, locale) {\n        var plural = getLocalePluralCase(locale)(value);\n        switch (plural) {\n            case 0:\n                return 'zero';\n            case 1:\n                return 'one';\n            case 2:\n                return 'two';\n            case 3:\n                return 'few';\n            case 4:\n                return 'many';\n            default:\n                return 'other';\n        }\n    }\n    /**\n     * The locale id that the application is using by default (for translations and ICU expressions).\n     */\n    var DEFAULT_LOCALE_ID = 'en-US';\n    /**\n     * USD currency code that the application uses by default for CurrencyPipe when no\n     * DEFAULT_CURRENCY_CODE is provided.\n     */\n    var USD_CURRENCY_CODE = 'USD';\n\n    var MARKER = \"\\uFFFD\";\n    var ICU_BLOCK_REGEXP = /^\\s*(�\\d+:?\\d*�)\\s*,\\s*(select|plural)\\s*,/;\n    var SUBTEMPLATE_REGEXP = /�\\/?\\*(\\d+:\\d+)�/gi;\n    var PH_REGEXP = /�(\\/?[#*!]\\d+):?\\d*�/gi;\n    var BINDING_REGEXP = /�(\\d+):?\\d*�/gi;\n    var ICU_REGEXP = /({\\s*�\\d+:?\\d*�\\s*,\\s*\\S{6}\\s*,[\\s\\S]*})/gi;\n    // i18nPostprocess consts\n    var ROOT_TEMPLATE_ID = 0;\n    var PP_MULTI_VALUE_PLACEHOLDERS_REGEXP = /\\[(�.+?�?)\\]/;\n    var PP_PLACEHOLDERS_REGEXP = /\\[(�.+?�?)\\]|(�\\/?\\*\\d+:\\d+�)/g;\n    var PP_ICU_VARS_REGEXP = /({\\s*)(VAR_(PLURAL|SELECT)(_\\d+)?)(\\s*,)/g;\n    var PP_ICU_PLACEHOLDERS_REGEXP = /{([A-Z0-9_]+)}/g;\n    var PP_ICUS_REGEXP = /�I18N_EXP_(ICU(_\\d+)?)�/g;\n    var PP_CLOSE_TEMPLATE_REGEXP = /\\/\\*/;\n    var PP_TEMPLATE_ID_REGEXP = /\\d+\\:(\\d+)/;\n    /**\n     * Breaks pattern into strings and top level {...} blocks.\n     * Can be used to break a message into text and ICU expressions, or to break an ICU expression into\n     * keys and cases.\n     * Original code from closure library, modified for Angular.\n     *\n     * @param pattern (sub)Pattern to be broken.\n     *\n     */\n    function extractParts(pattern) {\n        if (!pattern) {\n            return [];\n        }\n        var prevPos = 0;\n        var braceStack = [];\n        var results = [];\n        var braces = /[{}]/g;\n        // lastIndex doesn't get set to 0 so we have to.\n        braces.lastIndex = 0;\n        var match;\n        while (match = braces.exec(pattern)) {\n            var pos = match.index;\n            if (match[0] == '}') {\n                braceStack.pop();\n                if (braceStack.length == 0) {\n                    // End of the block.\n                    var block = pattern.substring(prevPos, pos);\n                    if (ICU_BLOCK_REGEXP.test(block)) {\n                        results.push(parseICUBlock(block));\n                    }\n                    else {\n                        results.push(block);\n                    }\n                    prevPos = pos + 1;\n                }\n            }\n            else {\n                if (braceStack.length == 0) {\n                    var substring_1 = pattern.substring(prevPos, pos);\n                    results.push(substring_1);\n                    prevPos = pos + 1;\n                }\n                braceStack.push('{');\n            }\n        }\n        var substring = pattern.substring(prevPos);\n        results.push(substring);\n        return results;\n    }\n    /**\n     * Parses text containing an ICU expression and produces a JSON object for it.\n     * Original code from closure library, modified for Angular.\n     *\n     * @param pattern Text containing an ICU expression that needs to be parsed.\n     *\n     */\n    function parseICUBlock(pattern) {\n        var cases = [];\n        var values = [];\n        var icuType = 1 /* plural */;\n        var mainBinding = 0;\n        pattern = pattern.replace(ICU_BLOCK_REGEXP, function (str, binding, type) {\n            if (type === 'select') {\n                icuType = 0 /* select */;\n            }\n            else {\n                icuType = 1 /* plural */;\n            }\n            mainBinding = parseInt(binding.substr(1), 10);\n            return '';\n        });\n        var parts = extractParts(pattern);\n        // Looking for (key block)+ sequence. One of the keys has to be \"other\".\n        for (var pos = 0; pos < parts.length;) {\n            var key = parts[pos++].trim();\n            if (icuType === 1 /* plural */) {\n                // Key can be \"=x\", we just want \"x\"\n                key = key.replace(/\\s*(?:=)?(\\w+)\\s*/, '$1');\n            }\n            if (key.length) {\n                cases.push(key);\n            }\n            var blocks = extractParts(parts[pos++]);\n            if (cases.length > values.length) {\n                values.push(blocks);\n            }\n        }\n        // TODO(ocombe): support ICU expressions in attributes, see #21615\n        return { type: icuType, mainBinding: mainBinding, cases: cases, values: values };\n    }\n    /**\n     * Removes everything inside the sub-templates of a message.\n     */\n    function removeInnerTemplateTranslation(message) {\n        var match;\n        var res = '';\n        var index = 0;\n        var inTemplate = false;\n        var tagMatched;\n        while ((match = SUBTEMPLATE_REGEXP.exec(message)) !== null) {\n            if (!inTemplate) {\n                res += message.substring(index, match.index + match[0].length);\n                tagMatched = match[1];\n                inTemplate = true;\n            }\n            else {\n                if (match[0] === MARKER + \"/*\" + tagMatched + MARKER) {\n                    index = match.index;\n                    inTemplate = false;\n                }\n            }\n        }\n        ngDevMode &&\n            assertEqual(inTemplate, false, \"Tag mismatch: unable to find the end of the sub-template in the translation \\\"\" + message + \"\\\"\");\n        res += message.substr(index);\n        return res;\n    }\n    /**\n     * Extracts a part of a message and removes the rest.\n     *\n     * This method is used for extracting a part of the message associated with a template. A translated\n     * message can span multiple templates.\n     *\n     * Example:\n     * ```\n     * <div i18n>Translate <span *ngIf>me</span>!</div>\n     * ```\n     *\n     * @param message The message to crop\n     * @param subTemplateIndex Index of the sub-template to extract. If undefined it returns the\n     * external template and removes all sub-templates.\n     */\n    function getTranslationForTemplate(message, subTemplateIndex) {\n        if (typeof subTemplateIndex !== 'number') {\n            // We want the root template message, ignore all sub-templates\n            return removeInnerTemplateTranslation(message);\n        }\n        else {\n            // We want a specific sub-template\n            var start = message.indexOf(\":\" + subTemplateIndex + MARKER) + 2 + subTemplateIndex.toString().length;\n            var end = message.search(new RegExp(MARKER + \"\\\\/\\\\*\\\\d+:\" + subTemplateIndex + MARKER));\n            return removeInnerTemplateTranslation(message.substring(start, end));\n        }\n    }\n    /**\n     * Generate the OpCodes to update the bindings of a string.\n     *\n     * @param str The string containing the bindings.\n     * @param destinationNode Index of the destination node which will receive the binding.\n     * @param attrName Name of the attribute, if the string belongs to an attribute.\n     * @param sanitizeFn Sanitization function used to sanitize the string after update, if necessary.\n     */\n    function generateBindingUpdateOpCodes(str, destinationNode, attrName, sanitizeFn) {\n        if (sanitizeFn === void 0) { sanitizeFn = null; }\n        var updateOpCodes = [null, null]; // Alloc space for mask and size\n        var textParts = str.split(BINDING_REGEXP);\n        var mask = 0;\n        for (var j = 0; j < textParts.length; j++) {\n            var textValue = textParts[j];\n            if (j & 1) {\n                // Odd indexes are bindings\n                var bindingIndex = parseInt(textValue, 10);\n                updateOpCodes.push(-1 - bindingIndex);\n                mask = mask | toMaskBit(bindingIndex);\n            }\n            else if (textValue !== '') {\n                // Even indexes are text\n                updateOpCodes.push(textValue);\n            }\n        }\n        updateOpCodes.push(destinationNode << 2 /* SHIFT_REF */ |\n            (attrName ? 1 /* Attr */ : 0 /* Text */));\n        if (attrName) {\n            updateOpCodes.push(attrName, sanitizeFn);\n        }\n        updateOpCodes[0] = mask;\n        updateOpCodes[1] = updateOpCodes.length - 2;\n        return updateOpCodes;\n    }\n    function getBindingMask(icuExpression, mask) {\n        if (mask === void 0) { mask = 0; }\n        mask = mask | toMaskBit(icuExpression.mainBinding);\n        var match;\n        for (var i = 0; i < icuExpression.values.length; i++) {\n            var valueArr = icuExpression.values[i];\n            for (var j = 0; j < valueArr.length; j++) {\n                var value = valueArr[j];\n                if (typeof value === 'string') {\n                    while (match = BINDING_REGEXP.exec(value)) {\n                        mask = mask | toMaskBit(parseInt(match[1], 10));\n                    }\n                }\n                else {\n                    mask = getBindingMask(value, mask);\n                }\n            }\n        }\n        return mask;\n    }\n    var i18nIndexStack = [];\n    var i18nIndexStackPointer = -1;\n    /**\n     * Convert binding index to mask bit.\n     *\n     * Each index represents a single bit on the bit-mask. Because bit-mask only has 32 bits, we make\n     * the 32nd bit share all masks for all bindings higher than 32. Since it is extremely rare to have\n     * more than 32 bindings this will be hit very rarely. The downside of hitting this corner case is\n     * that we will execute binding code more often than necessary. (penalty of performance)\n     */\n    function toMaskBit(bindingIndex) {\n        return 1 << Math.min(bindingIndex, 31);\n    }\n    var parentIndexStack = [];\n    /**\n     * Marks a block of text as translatable.\n     *\n     * The instructions `i18nStart` and `i18nEnd` mark the translation block in the template.\n     * The translation `message` is the value which is locale specific. The translation string may\n     * contain placeholders which associate inner elements and sub-templates within the translation.\n     *\n     * The translation `message` placeholders are:\n     * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be\n     *   interpolated into. The placeholder `index` points to the expression binding index. An optional\n     *   `block` that matches the sub-template in which it was declared.\n     * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning\n     *   and end of DOM element that were embedded in the original translation block. The placeholder\n     *   `index` points to the element index in the template instructions set. An optional `block` that\n     *   matches the sub-template in which it was declared.\n     * - `�!{index}(:{block})�`/`�/!{index}(:{block})�`: *Projection Placeholder*:  Marks the\n     *   beginning and end of <ng-content> that was embedded in the original translation block.\n     *   The placeholder `index` points to the element index in the template instructions set.\n     *   An optional `block` that matches the sub-template in which it was declared.\n     * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be\n     *   split up and translated separately in each angular template function. The `index` points to the\n     *   `template` instruction index. A `block` that matches the sub-template in which it was declared.\n     *\n     * @param index A unique index of the translation in the static block.\n     * @param message The translation message.\n     * @param subTemplateIndex Optional sub-template index in the `message`.\n     *\n     * @codeGenApi\n     */\n    function ɵɵi18nStart(index, message, subTemplateIndex) {\n        var lView = getLView();\n        var tView = lView[TVIEW];\n        ngDevMode && assertDefined(tView, \"tView should be defined\");\n        i18nIndexStack[++i18nIndexStackPointer] = index;\n        // We need to delay projections until `i18nEnd`\n        setDelayProjection(true);\n        if (tView.firstCreatePass && tView.data[index + HEADER_OFFSET] === null) {\n            i18nStartFirstPass(lView, tView, index, message, subTemplateIndex);\n        }\n    }\n    // Count for the number of vars that will be allocated for each i18n block.\n    // It is global because this is used in multiple functions that include loops and recursive calls.\n    // This is reset to 0 when `i18nStartFirstPass` is called.\n    var i18nVarsCount;\n    /**\n     * See `i18nStart` above.\n     */\n    function i18nStartFirstPass(lView, tView, index, message, subTemplateIndex) {\n        var startIndex = tView.blueprint.length - HEADER_OFFSET;\n        i18nVarsCount = 0;\n        var previousOrParentTNode = getPreviousOrParentTNode();\n        var parentTNode = getIsParent() ? previousOrParentTNode : previousOrParentTNode && previousOrParentTNode.parent;\n        var parentIndex = parentTNode && parentTNode !== lView[T_HOST] ? parentTNode.index - HEADER_OFFSET : index;\n        var parentIndexPointer = 0;\n        parentIndexStack[parentIndexPointer] = parentIndex;\n        var createOpCodes = [];\n        // If the previous node wasn't the direct parent then we have a translation without top level\n        // element and we need to keep a reference of the previous element if there is one\n        if (index > 0 && previousOrParentTNode !== parentTNode) {\n            // Create an OpCode to select the previous TNode\n            createOpCodes.push(previousOrParentTNode.index << 3 /* SHIFT_REF */ | 0 /* Select */);\n        }\n        var updateOpCodes = [];\n        var icuExpressions = [];\n        var templateTranslation = getTranslationForTemplate(message, subTemplateIndex);\n        var msgParts = replaceNgsp(templateTranslation).split(PH_REGEXP);\n        for (var i = 0; i < msgParts.length; i++) {\n            var value = msgParts[i];\n            if (i & 1) {\n                // Odd indexes are placeholders (elements and sub-templates)\n                if (value.charAt(0) === '/') {\n                    // It is a closing tag\n                    if (value.charAt(1) === \"#\" /* ELEMENT */) {\n                        var phIndex = parseInt(value.substr(2), 10);\n                        parentIndex = parentIndexStack[--parentIndexPointer];\n                        createOpCodes.push(phIndex << 3 /* SHIFT_REF */ | 5 /* ElementEnd */);\n                    }\n                }\n                else {\n                    var phIndex = parseInt(value.substr(1), 10);\n                    // The value represents a placeholder that we move to the designated index\n                    createOpCodes.push(phIndex << 3 /* SHIFT_REF */ | 0 /* Select */, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                    if (value.charAt(0) === \"#\" /* ELEMENT */) {\n                        parentIndexStack[++parentIndexPointer] = parentIndex = phIndex;\n                    }\n                }\n            }\n            else {\n                // Even indexes are text (including bindings & ICU expressions)\n                var parts = extractParts(value);\n                for (var j = 0; j < parts.length; j++) {\n                    if (j & 1) {\n                        // Odd indexes are ICU expressions\n                        // Create the comment node that will anchor the ICU expression\n                        var icuNodeIndex = startIndex + i18nVarsCount++;\n                        createOpCodes.push(COMMENT_MARKER, ngDevMode ? \"ICU \" + icuNodeIndex : '', icuNodeIndex, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                        // Update codes for the ICU expression\n                        var icuExpression = parts[j];\n                        var mask = getBindingMask(icuExpression);\n                        icuStart(icuExpressions, icuExpression, icuNodeIndex, icuNodeIndex);\n                        // Since this is recursive, the last TIcu that was pushed is the one we want\n                        var tIcuIndex = icuExpressions.length - 1;\n                        updateOpCodes.push(toMaskBit(icuExpression.mainBinding), // mask of the main binding\n                        3, // skip 3 opCodes if not changed\n                        -1 - icuExpression.mainBinding, icuNodeIndex << 2 /* SHIFT_REF */ | 2 /* IcuSwitch */, tIcuIndex, mask, // mask of all the bindings of this ICU expression\n                        2, // skip 2 opCodes if not changed\n                        icuNodeIndex << 2 /* SHIFT_REF */ | 3 /* IcuUpdate */, tIcuIndex);\n                    }\n                    else if (parts[j] !== '') {\n                        var text = parts[j];\n                        // Even indexes are text (including bindings)\n                        var hasBinding = text.match(BINDING_REGEXP);\n                        // Create text nodes\n                        var textNodeIndex = startIndex + i18nVarsCount++;\n                        createOpCodes.push(\n                        // If there is a binding, the value will be set during update\n                        hasBinding ? '' : text, textNodeIndex, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                        if (hasBinding) {\n                            addAllToArray(generateBindingUpdateOpCodes(text, textNodeIndex), updateOpCodes);\n                        }\n                    }\n                }\n            }\n        }\n        if (i18nVarsCount > 0) {\n            allocExpando(lView, i18nVarsCount);\n        }\n        ngDevMode &&\n            attachI18nOpCodesDebug(createOpCodes, updateOpCodes, icuExpressions.length ? icuExpressions : null, lView);\n        // NOTE: local var needed to properly assert the type of `TI18n`.\n        var tI18n = {\n            vars: i18nVarsCount,\n            create: createOpCodes,\n            update: updateOpCodes,\n            icus: icuExpressions.length ? icuExpressions : null,\n        };\n        tView.data[index + HEADER_OFFSET] = tI18n;\n    }\n    function appendI18nNode(tNode, parentTNode, previousTNode, lView) {\n        ngDevMode && ngDevMode.rendererMoveNode++;\n        var nextNode = tNode.next;\n        if (!previousTNode) {\n            previousTNode = parentTNode;\n        }\n        // Re-organize node tree to put this node in the correct position.\n        if (previousTNode === parentTNode && tNode !== parentTNode.child) {\n            tNode.next = parentTNode.child;\n            parentTNode.child = tNode;\n        }\n        else if (previousTNode !== parentTNode && tNode !== previousTNode.next) {\n            tNode.next = previousTNode.next;\n            previousTNode.next = tNode;\n        }\n        else {\n            tNode.next = null;\n        }\n        if (parentTNode !== lView[T_HOST]) {\n            tNode.parent = parentTNode;\n        }\n        // If tNode was moved around, we might need to fix a broken link.\n        var cursor = tNode.next;\n        while (cursor) {\n            if (cursor.next === tNode) {\n                cursor.next = nextNode;\n            }\n            cursor = cursor.next;\n        }\n        // If the placeholder to append is a projection, we need to move the projected nodes instead\n        if (tNode.type === 1 /* Projection */) {\n            applyProjection(lView, tNode);\n            return tNode;\n        }\n        appendChild(getNativeByTNode(tNode, lView), tNode, lView);\n        var slotValue = lView[tNode.index];\n        if (tNode.type !== 0 /* Container */ && isLContainer(slotValue)) {\n            // Nodes that inject ViewContainerRef also have a comment node that should be moved\n            appendChild(slotValue[NATIVE], tNode, lView);\n        }\n        return tNode;\n    }\n    /**\n     * Handles message string post-processing for internationalization.\n     *\n     * Handles message string post-processing by transforming it from intermediate\n     * format (that might contain some markers that we need to replace) to the final\n     * form, consumable by i18nStart instruction. Post processing steps include:\n     *\n     * 1. Resolve all multi-value cases (like [�*1:1��#2:1�|�#4:1�|�5�])\n     * 2. Replace all ICU vars (like \"VAR_PLURAL\")\n     * 3. Replace all placeholders used inside ICUs in a form of {PLACEHOLDER}\n     * 4. Replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�)\n     *    in case multiple ICUs have the same placeholder name\n     *\n     * @param message Raw translation string for post processing\n     * @param replacements Set of replacements that should be applied\n     *\n     * @returns Transformed string that can be consumed by i18nStart instruction\n     *\n     * @codeGenApi\n     */\n    function ɵɵi18nPostprocess(message, replacements) {\n        if (replacements === void 0) { replacements = {}; }\n        /**\n         * Step 1: resolve all multi-value placeholders like [�#5�|�*1:1��#2:1�|�#4:1�]\n         *\n         * Note: due to the way we process nested templates (BFS), multi-value placeholders are typically\n         * grouped by templates, for example: [�#5�|�#6�|�#1:1�|�#3:2�] where �#5� and �#6� belong to root\n         * template, �#1:1� belong to nested template with index 1 and �#1:2� - nested template with index\n         * 3. However in real templates the order might be different: i.e. �#1:1� and/or �#3:2� may go in\n         * front of �#6�. The post processing step restores the right order by keeping track of the\n         * template id stack and looks for placeholders that belong to the currently active template.\n         */\n        var result = message;\n        if (PP_MULTI_VALUE_PLACEHOLDERS_REGEXP.test(message)) {\n            var matches_1 = {};\n            var templateIdsStack_1 = [ROOT_TEMPLATE_ID];\n            result = result.replace(PP_PLACEHOLDERS_REGEXP, function (m, phs, tmpl) {\n                var content = phs || tmpl;\n                var placeholders = matches_1[content] || [];\n                if (!placeholders.length) {\n                    content.split('|').forEach(function (placeholder) {\n                        var match = placeholder.match(PP_TEMPLATE_ID_REGEXP);\n                        var templateId = match ? parseInt(match[1], 10) : ROOT_TEMPLATE_ID;\n                        var isCloseTemplateTag = PP_CLOSE_TEMPLATE_REGEXP.test(placeholder);\n                        placeholders.push([templateId, isCloseTemplateTag, placeholder]);\n                    });\n                    matches_1[content] = placeholders;\n                }\n                if (!placeholders.length) {\n                    throw new Error(\"i18n postprocess: unmatched placeholder - \" + content);\n                }\n                var currentTemplateId = templateIdsStack_1[templateIdsStack_1.length - 1];\n                var idx = 0;\n                // find placeholder index that matches current template id\n                for (var i = 0; i < placeholders.length; i++) {\n                    if (placeholders[i][0] === currentTemplateId) {\n                        idx = i;\n                        break;\n                    }\n                }\n                // update template id stack based on the current tag extracted\n                var _a = __read(placeholders[idx], 3), templateId = _a[0], isCloseTemplateTag = _a[1], placeholder = _a[2];\n                if (isCloseTemplateTag) {\n                    templateIdsStack_1.pop();\n                }\n                else if (currentTemplateId !== templateId) {\n                    templateIdsStack_1.push(templateId);\n                }\n                // remove processed tag from the list\n                placeholders.splice(idx, 1);\n                return placeholder;\n            });\n        }\n        // return current result if no replacements specified\n        if (!Object.keys(replacements).length) {\n            return result;\n        }\n        /**\n         * Step 2: replace all ICU vars (like \"VAR_PLURAL\")\n         */\n        result = result.replace(PP_ICU_VARS_REGEXP, function (match, start, key, _type, _idx, end) {\n            return replacements.hasOwnProperty(key) ? \"\" + start + replacements[key] + end : match;\n        });\n        /**\n         * Step 3: replace all placeholders used inside ICUs in a form of {PLACEHOLDER}\n         */\n        result = result.replace(PP_ICU_PLACEHOLDERS_REGEXP, function (match, key) {\n            return replacements.hasOwnProperty(key) ? replacements[key] : match;\n        });\n        /**\n         * Step 4: replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�) in case\n         * multiple ICUs have the same placeholder name\n         */\n        result = result.replace(PP_ICUS_REGEXP, function (match, key) {\n            if (replacements.hasOwnProperty(key)) {\n                var list = replacements[key];\n                if (!list.length) {\n                    throw new Error(\"i18n postprocess: unmatched ICU - \" + match + \" with key: \" + key);\n                }\n                return list.shift();\n            }\n            return match;\n        });\n        return result;\n    }\n    /**\n     * Translates a translation block marked by `i18nStart` and `i18nEnd`. It inserts the text/ICU nodes\n     * into the render tree, moves the placeholder nodes and removes the deleted nodes.\n     *\n     * @codeGenApi\n     */\n    function ɵɵi18nEnd() {\n        var lView = getLView();\n        var tView = lView[TVIEW];\n        ngDevMode && assertDefined(tView, \"tView should be defined\");\n        i18nEndFirstPass(lView, tView);\n        // Stop delaying projections\n        setDelayProjection(false);\n    }\n    /**\n     * See `i18nEnd` above.\n     */\n    function i18nEndFirstPass(lView, tView) {\n        ngDevMode && assertEqual(getBindingIndex(), tView.bindingStartIndex, 'i18nEnd should be called before any binding');\n        var rootIndex = i18nIndexStack[i18nIndexStackPointer--];\n        var tI18n = tView.data[rootIndex + HEADER_OFFSET];\n        ngDevMode && assertDefined(tI18n, \"You should call i18nStart before i18nEnd\");\n        // Find the last node that was added before `i18nEnd`\n        var lastCreatedNode = getPreviousOrParentTNode();\n        // Read the instructions to insert/move/remove DOM elements\n        var visitedNodes = readCreateOpCodes(rootIndex, tI18n.create, lView);\n        // Remove deleted nodes\n        var index = rootIndex + 1;\n        while (index <= lastCreatedNode.index - HEADER_OFFSET) {\n            if (visitedNodes.indexOf(index) === -1) {\n                removeNode(index, lView, /* markAsDetached */ true);\n            }\n            // Check if an element has any local refs and skip them\n            var tNode = getTNode(index, lView);\n            if (tNode && (tNode.type === 3 /* Element */ || tNode.type === 4 /* ElementContainer */) &&\n                tNode.localNames !== null) {\n                // Divide by 2 to get the number of local refs,\n                // since they are stored as an array that also includes directive indexes,\n                // i.e. [\"localRef\", directiveIndex, ...]\n                index += tNode.localNames.length >> 1;\n            }\n            index++;\n        }\n    }\n    /**\n     * Creates and stores the dynamic TNode, and unhooks it from the tree for now.\n     */\n    function createDynamicNodeAtIndex(lView, index, type, native, name) {\n        var previousOrParentTNode = getPreviousOrParentTNode();\n        ngDevMode && assertDataInRange(lView, index + HEADER_OFFSET);\n        lView[index + HEADER_OFFSET] = native;\n        var tNode = getOrCreateTNode(lView[TVIEW], lView[T_HOST], index, type, name, null);\n        // We are creating a dynamic node, the previous tNode might not be pointing at this node.\n        // We will link ourselves into the tree later with `appendI18nNode`.\n        if (previousOrParentTNode && previousOrParentTNode.next === tNode) {\n            previousOrParentTNode.next = null;\n        }\n        return tNode;\n    }\n    function readCreateOpCodes(index, createOpCodes, lView) {\n        var renderer = lView[RENDERER];\n        var currentTNode = null;\n        var previousTNode = null;\n        var visitedNodes = [];\n        for (var i = 0; i < createOpCodes.length; i++) {\n            var opCode = createOpCodes[i];\n            if (typeof opCode == 'string') {\n                var textRNode = createTextNode(opCode, renderer);\n                var textNodeIndex = createOpCodes[++i];\n                ngDevMode && ngDevMode.rendererCreateTextNode++;\n                previousTNode = currentTNode;\n                currentTNode =\n                    createDynamicNodeAtIndex(lView, textNodeIndex, 3 /* Element */, textRNode, null);\n                visitedNodes.push(textNodeIndex);\n                setIsNotParent();\n            }\n            else if (typeof opCode == 'number') {\n                switch (opCode & 7 /* MASK_OPCODE */) {\n                    case 1 /* AppendChild */:\n                        var destinationNodeIndex = opCode >>> 17 /* SHIFT_PARENT */;\n                        var destinationTNode = void 0;\n                        if (destinationNodeIndex === index) {\n                            // If the destination node is `i18nStart`, we don't have a\n                            // top-level node and we should use the host node instead\n                            destinationTNode = lView[T_HOST];\n                        }\n                        else {\n                            destinationTNode = getTNode(destinationNodeIndex, lView);\n                        }\n                        ngDevMode &&\n                            assertDefined(currentTNode, \"You need to create or select a node before you can insert it into the DOM\");\n                        previousTNode = appendI18nNode(currentTNode, destinationTNode, previousTNode, lView);\n                        break;\n                    case 0 /* Select */:\n                        var nodeIndex = opCode >>> 3 /* SHIFT_REF */;\n                        visitedNodes.push(nodeIndex);\n                        previousTNode = currentTNode;\n                        currentTNode = getTNode(nodeIndex, lView);\n                        if (currentTNode) {\n                            setPreviousOrParentTNode(currentTNode, currentTNode.type === 3 /* Element */);\n                        }\n                        break;\n                    case 5 /* ElementEnd */:\n                        var elementIndex = opCode >>> 3 /* SHIFT_REF */;\n                        previousTNode = currentTNode = getTNode(elementIndex, lView);\n                        setPreviousOrParentTNode(currentTNode, false);\n                        break;\n                    case 4 /* Attr */:\n                        var elementNodeIndex = opCode >>> 3 /* SHIFT_REF */;\n                        var attrName = createOpCodes[++i];\n                        var attrValue = createOpCodes[++i];\n                        // This code is used for ICU expressions only, since we don't support\n                        // directives/components in ICUs, we don't need to worry about inputs here\n                        elementAttributeInternal(elementNodeIndex, attrName, attrValue, lView);\n                        break;\n                    default:\n                        throw new Error(\"Unable to determine the type of mutate operation for \\\"\" + opCode + \"\\\"\");\n                }\n            }\n            else {\n                switch (opCode) {\n                    case COMMENT_MARKER:\n                        var commentValue = createOpCodes[++i];\n                        var commentNodeIndex = createOpCodes[++i];\n                        ngDevMode && assertEqual(typeof commentValue, 'string', \"Expected \\\"\" + commentValue + \"\\\" to be a comment node value\");\n                        var commentRNode = renderer.createComment(commentValue);\n                        ngDevMode && ngDevMode.rendererCreateComment++;\n                        previousTNode = currentTNode;\n                        currentTNode = createDynamicNodeAtIndex(lView, commentNodeIndex, 5 /* IcuContainer */, commentRNode, null);\n                        visitedNodes.push(commentNodeIndex);\n                        attachPatchData(commentRNode, lView);\n                        currentTNode.activeCaseIndex = null;\n                        // We will add the case nodes later, during the update phase\n                        setIsNotParent();\n                        break;\n                    case ELEMENT_MARKER:\n                        var tagNameValue = createOpCodes[++i];\n                        var elementNodeIndex = createOpCodes[++i];\n                        ngDevMode && assertEqual(typeof tagNameValue, 'string', \"Expected \\\"\" + tagNameValue + \"\\\" to be an element node tag name\");\n                        var elementRNode = renderer.createElement(tagNameValue);\n                        ngDevMode && ngDevMode.rendererCreateElement++;\n                        previousTNode = currentTNode;\n                        currentTNode = createDynamicNodeAtIndex(lView, elementNodeIndex, 3 /* Element */, elementRNode, tagNameValue);\n                        visitedNodes.push(elementNodeIndex);\n                        break;\n                    default:\n                        throw new Error(\"Unable to determine the type of mutate operation for \\\"\" + opCode + \"\\\"\");\n                }\n            }\n        }\n        setIsNotParent();\n        return visitedNodes;\n    }\n    function readUpdateOpCodes(updateOpCodes, icus, bindingsStartIndex, changeMask, viewData, bypassCheckBit) {\n        if (bypassCheckBit === void 0) { bypassCheckBit = false; }\n        var caseCreated = false;\n        for (var i = 0; i < updateOpCodes.length; i++) {\n            // bit code to check if we should apply the next update\n            var checkBit = updateOpCodes[i];\n            // Number of opCodes to skip until next set of update codes\n            var skipCodes = updateOpCodes[++i];\n            if (bypassCheckBit || (checkBit & changeMask)) {\n                // The value has been updated since last checked\n                var value = '';\n                for (var j = i + 1; j <= (i + skipCodes); j++) {\n                    var opCode = updateOpCodes[j];\n                    if (typeof opCode == 'string') {\n                        value += opCode;\n                    }\n                    else if (typeof opCode == 'number') {\n                        if (opCode < 0) {\n                            // It's a binding index whose value is negative\n                            value += renderStringify(viewData[bindingsStartIndex - opCode]);\n                        }\n                        else {\n                            var nodeIndex = opCode >>> 2 /* SHIFT_REF */;\n                            var tIcuIndex = void 0;\n                            var tIcu = void 0;\n                            var icuTNode = void 0;\n                            switch (opCode & 3 /* MASK_OPCODE */) {\n                                case 1 /* Attr */:\n                                    var propName = updateOpCodes[++j];\n                                    var sanitizeFn = updateOpCodes[++j];\n                                    elementPropertyInternal(viewData, nodeIndex, propName, value, sanitizeFn);\n                                    break;\n                                case 0 /* Text */:\n                                    textBindingInternal(viewData, nodeIndex, value);\n                                    break;\n                                case 2 /* IcuSwitch */:\n                                    tIcuIndex = updateOpCodes[++j];\n                                    tIcu = icus[tIcuIndex];\n                                    icuTNode = getTNode(nodeIndex, viewData);\n                                    // If there is an active case, delete the old nodes\n                                    if (icuTNode.activeCaseIndex !== null) {\n                                        var removeCodes = tIcu.remove[icuTNode.activeCaseIndex];\n                                        for (var k = 0; k < removeCodes.length; k++) {\n                                            var removeOpCode = removeCodes[k];\n                                            switch (removeOpCode & 7 /* MASK_OPCODE */) {\n                                                case 3 /* Remove */:\n                                                    var nodeIndex_1 = removeOpCode >>> 3 /* SHIFT_REF */;\n                                                    // Remove DOM element, but do *not* mark TNode as detached, since we are\n                                                    // just switching ICU cases (while keeping the same TNode), so a DOM element\n                                                    // representing a new ICU case will be re-created.\n                                                    removeNode(nodeIndex_1, viewData, /* markAsDetached */ false);\n                                                    break;\n                                                case 6 /* RemoveNestedIcu */:\n                                                    var nestedIcuNodeIndex = removeCodes[k + 1] >>> 3 /* SHIFT_REF */;\n                                                    var nestedIcuTNode = getTNode(nestedIcuNodeIndex, viewData);\n                                                    var activeIndex = nestedIcuTNode.activeCaseIndex;\n                                                    if (activeIndex !== null) {\n                                                        var nestedIcuTIndex = removeOpCode >>> 3 /* SHIFT_REF */;\n                                                        var nestedTIcu = icus[nestedIcuTIndex];\n                                                        addAllToArray(nestedTIcu.remove[activeIndex], removeCodes);\n                                                    }\n                                                    break;\n                                            }\n                                        }\n                                    }\n                                    // Update the active caseIndex\n                                    var caseIndex = getCaseIndex(tIcu, value);\n                                    icuTNode.activeCaseIndex = caseIndex !== -1 ? caseIndex : null;\n                                    if (caseIndex > -1) {\n                                        // Add the nodes for the new case\n                                        readCreateOpCodes(-1, tIcu.create[caseIndex], viewData);\n                                        caseCreated = true;\n                                    }\n                                    break;\n                                case 3 /* IcuUpdate */:\n                                    tIcuIndex = updateOpCodes[++j];\n                                    tIcu = icus[tIcuIndex];\n                                    icuTNode = getTNode(nodeIndex, viewData);\n                                    if (icuTNode.activeCaseIndex !== null) {\n                                        readUpdateOpCodes(tIcu.update[icuTNode.activeCaseIndex], icus, bindingsStartIndex, changeMask, viewData, caseCreated);\n                                    }\n                                    break;\n                            }\n                        }\n                    }\n                }\n            }\n            i += skipCodes;\n        }\n    }\n    function removeNode(index, viewData, markAsDetached) {\n        var removedPhTNode = getTNode(index, viewData);\n        var removedPhRNode = getNativeByIndex(index, viewData);\n        if (removedPhRNode) {\n            nativeRemoveNode(viewData[RENDERER], removedPhRNode);\n        }\n        var slotValue = load(viewData, index);\n        if (isLContainer(slotValue)) {\n            var lContainer = slotValue;\n            if (removedPhTNode.type !== 0 /* Container */) {\n                nativeRemoveNode(viewData[RENDERER], lContainer[NATIVE]);\n            }\n        }\n        if (markAsDetached) {\n            // Define this node as detached to avoid projecting it later\n            removedPhTNode.flags |= 64 /* isDetached */;\n        }\n        ngDevMode && ngDevMode.rendererRemoveNode++;\n    }\n    /**\n     *\n     * Use this instruction to create a translation block that doesn't contain any placeholder.\n     * It calls both {@link i18nStart} and {@link i18nEnd} in one instruction.\n     *\n     * The translation `message` is the value which is locale specific. The translation string may\n     * contain placeholders which associate inner elements and sub-templates within the translation.\n     *\n     * The translation `message` placeholders are:\n     * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be\n     *   interpolated into. The placeholder `index` points to the expression binding index. An optional\n     *   `block` that matches the sub-template in which it was declared.\n     * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning\n     *   and end of DOM element that were embedded in the original translation block. The placeholder\n     *   `index` points to the element index in the template instructions set. An optional `block` that\n     *   matches the sub-template in which it was declared.\n     * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be\n     *   split up and translated separately in each angular template function. The `index` points to the\n     *   `template` instruction index. A `block` that matches the sub-template in which it was declared.\n     *\n     * @param index A unique index of the translation in the static block.\n     * @param message The translation message.\n     * @param subTemplateIndex Optional sub-template index in the `message`.\n     *\n     * @codeGenApi\n     */\n    function ɵɵi18n(index, message, subTemplateIndex) {\n        ɵɵi18nStart(index, message, subTemplateIndex);\n        ɵɵi18nEnd();\n    }\n    /**\n     * Marks a list of attributes as translatable.\n     *\n     * @param index A unique index in the static block\n     * @param values\n     *\n     * @codeGenApi\n     */\n    function ɵɵi18nAttributes(index, values) {\n        var lView = getLView();\n        var tView = lView[TVIEW];\n        ngDevMode && assertDefined(tView, \"tView should be defined\");\n        i18nAttributesFirstPass(lView, tView, index, values);\n    }\n    /**\n     * See `i18nAttributes` above.\n     */\n    function i18nAttributesFirstPass(lView, tView, index, values) {\n        var previousElement = getPreviousOrParentTNode();\n        var previousElementIndex = previousElement.index - HEADER_OFFSET;\n        var updateOpCodes = [];\n        for (var i = 0; i < values.length; i += 2) {\n            var attrName = values[i];\n            var message = values[i + 1];\n            var parts = message.split(ICU_REGEXP);\n            for (var j = 0; j < parts.length; j++) {\n                var value = parts[j];\n                if (j & 1) {\n                    // Odd indexes are ICU expressions\n                    // TODO(ocombe): support ICU expressions in attributes\n                    throw new Error('ICU expressions are not yet supported in attributes');\n                }\n                else if (value !== '') {\n                    // Even indexes are text (including bindings)\n                    var hasBinding = !!value.match(BINDING_REGEXP);\n                    if (hasBinding) {\n                        if (tView.firstCreatePass && tView.data[index + HEADER_OFFSET] === null) {\n                            addAllToArray(generateBindingUpdateOpCodes(value, previousElementIndex, attrName), updateOpCodes);\n                        }\n                    }\n                    else {\n                        var tNode = getTNode(previousElementIndex, lView);\n                        // Set attributes for Elements only, for other types (like ElementContainer),\n                        // only set inputs below\n                        if (tNode.type === 3 /* Element */) {\n                            elementAttributeInternal(previousElementIndex, attrName, value, lView);\n                        }\n                        // Check if that attribute is a directive input\n                        var dataValue = tNode.inputs !== null && tNode.inputs[attrName];\n                        if (dataValue) {\n                            setInputsForProperty(lView, dataValue, attrName, value);\n                            if (ngDevMode) {\n                                var element = getNativeByIndex(previousElementIndex, lView);\n                                setNgReflectProperties(lView, element, tNode.type, dataValue, value);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (tView.firstCreatePass && tView.data[index + HEADER_OFFSET] === null) {\n            tView.data[index + HEADER_OFFSET] = updateOpCodes;\n        }\n    }\n    var changeMask = 0;\n    var shiftsCounter = 0;\n    /**\n     * Stores the values of the bindings during each update cycle in order to determine if we need to\n     * update the translated nodes.\n     *\n     * @param value The binding's value\n     * @returns This function returns itself so that it may be chained\n     * (e.g. `i18nExp(ctx.name)(ctx.title)`)\n     *\n     * @codeGenApi\n     */\n    function ɵɵi18nExp(value) {\n        var lView = getLView();\n        if (bindingUpdated(lView, nextBindingIndex(), value)) {\n            changeMask = changeMask | (1 << shiftsCounter);\n        }\n        shiftsCounter++;\n        return ɵɵi18nExp;\n    }\n    /**\n     * Updates a translation block or an i18n attribute when the bindings have changed.\n     *\n     * @param index Index of either {@link i18nStart} (translation block) or {@link i18nAttributes}\n     * (i18n attribute) on which it should update the content.\n     *\n     * @codeGenApi\n     */\n    function ɵɵi18nApply(index) {\n        if (shiftsCounter) {\n            var lView = getLView();\n            var tView = lView[TVIEW];\n            ngDevMode && assertDefined(tView, \"tView should be defined\");\n            var tI18n = tView.data[index + HEADER_OFFSET];\n            var updateOpCodes = void 0;\n            var icus = null;\n            if (Array.isArray(tI18n)) {\n                updateOpCodes = tI18n;\n            }\n            else {\n                updateOpCodes = tI18n.update;\n                icus = tI18n.icus;\n            }\n            var bindingsStartIndex = getBindingIndex() - shiftsCounter - 1;\n            readUpdateOpCodes(updateOpCodes, icus, bindingsStartIndex, changeMask, lView);\n            // Reset changeMask & maskBit to default for the next update cycle\n            changeMask = 0;\n            shiftsCounter = 0;\n        }\n    }\n    /**\n     * Returns the index of the current case of an ICU expression depending on the main binding value\n     *\n     * @param icuExpression\n     * @param bindingValue The value of the main binding used by this ICU expression\n     */\n    function getCaseIndex(icuExpression, bindingValue) {\n        var index = icuExpression.cases.indexOf(bindingValue);\n        if (index === -1) {\n            switch (icuExpression.type) {\n                case 1 /* plural */: {\n                    var resolvedCase = getPluralCase(bindingValue, getLocaleId());\n                    index = icuExpression.cases.indexOf(resolvedCase);\n                    if (index === -1 && resolvedCase !== 'other') {\n                        index = icuExpression.cases.indexOf('other');\n                    }\n                    break;\n                }\n                case 0 /* select */: {\n                    index = icuExpression.cases.indexOf('other');\n                    break;\n                }\n            }\n        }\n        return index;\n    }\n    /**\n     * Generate the OpCodes for ICU expressions.\n     *\n     * @param tIcus\n     * @param icuExpression\n     * @param startIndex\n     * @param expandoStartIndex\n     */\n    function icuStart(tIcus, icuExpression, startIndex, expandoStartIndex) {\n        var createCodes = [];\n        var removeCodes = [];\n        var updateCodes = [];\n        var vars = [];\n        var childIcus = [];\n        for (var i = 0; i < icuExpression.values.length; i++) {\n            // Each value is an array of strings & other ICU expressions\n            var valueArr = icuExpression.values[i];\n            var nestedIcus = [];\n            for (var j = 0; j < valueArr.length; j++) {\n                var value = valueArr[j];\n                if (typeof value !== 'string') {\n                    // It is an nested ICU expression\n                    var icuIndex = nestedIcus.push(value) - 1;\n                    // Replace nested ICU expression by a comment node\n                    valueArr[j] = \"<!--\\uFFFD\" + icuIndex + \"\\uFFFD-->\";\n                }\n            }\n            var icuCase = parseIcuCase(valueArr.join(''), startIndex, nestedIcus, tIcus, expandoStartIndex);\n            createCodes.push(icuCase.create);\n            removeCodes.push(icuCase.remove);\n            updateCodes.push(icuCase.update);\n            vars.push(icuCase.vars);\n            childIcus.push(icuCase.childIcus);\n        }\n        var tIcu = {\n            type: icuExpression.type,\n            vars: vars,\n            childIcus: childIcus,\n            cases: icuExpression.cases,\n            create: createCodes,\n            remove: removeCodes,\n            update: updateCodes\n        };\n        tIcus.push(tIcu);\n        // Adding the maximum possible of vars needed (based on the cases with the most vars)\n        i18nVarsCount += Math.max.apply(Math, __spread(vars));\n    }\n    /**\n     * Transforms a string template into an HTML template and a list of instructions used to update\n     * attributes or nodes that contain bindings.\n     *\n     * @param unsafeHtml The string to parse\n     * @param parentIndex\n     * @param nestedIcus\n     * @param tIcus\n     * @param expandoStartIndex\n     */\n    function parseIcuCase(unsafeHtml, parentIndex, nestedIcus, tIcus, expandoStartIndex) {\n        var inertBodyHelper = new InertBodyHelper(getDocument());\n        var inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n        if (!inertBodyElement) {\n            throw new Error('Unable to generate inert body element');\n        }\n        var wrapper = getTemplateContent(inertBodyElement) || inertBodyElement;\n        var opCodes = { vars: 0, childIcus: [], create: [], remove: [], update: [] };\n        parseNodes(wrapper.firstChild, opCodes, parentIndex, nestedIcus, tIcus, expandoStartIndex);\n        return opCodes;\n    }\n    var NESTED_ICU = /�(\\d+)�/;\n    /**\n     * Parses a node, its children and its siblings, and generates the mutate & update OpCodes.\n     *\n     * @param currentNode The first node to parse\n     * @param icuCase The data for the ICU expression case that contains those nodes\n     * @param parentIndex Index of the current node's parent\n     * @param nestedIcus Data for the nested ICU expressions that this case contains\n     * @param tIcus Data for all ICU expressions of the current message\n     * @param expandoStartIndex Expando start index for the current ICU expression\n     */\n    function parseNodes(currentNode, icuCase, parentIndex, nestedIcus, tIcus, expandoStartIndex) {\n        if (currentNode) {\n            var nestedIcusToCreate = [];\n            while (currentNode) {\n                var nextNode = currentNode.nextSibling;\n                var newIndex = expandoStartIndex + ++icuCase.vars;\n                switch (currentNode.nodeType) {\n                    case Node.ELEMENT_NODE:\n                        var element = currentNode;\n                        var tagName = element.tagName.toLowerCase();\n                        if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\n                            // This isn't a valid element, we won't create an element for it\n                            icuCase.vars--;\n                        }\n                        else {\n                            icuCase.create.push(ELEMENT_MARKER, tagName, newIndex, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                            var elAttrs = element.attributes;\n                            for (var i = 0; i < elAttrs.length; i++) {\n                                var attr = elAttrs.item(i);\n                                var lowerAttrName = attr.name.toLowerCase();\n                                var hasBinding_1 = !!attr.value.match(BINDING_REGEXP);\n                                // we assume the input string is safe, unless it's using a binding\n                                if (hasBinding_1) {\n                                    if (VALID_ATTRS.hasOwnProperty(lowerAttrName)) {\n                                        if (URI_ATTRS[lowerAttrName]) {\n                                            addAllToArray(generateBindingUpdateOpCodes(attr.value, newIndex, attr.name, _sanitizeUrl), icuCase.update);\n                                        }\n                                        else if (SRCSET_ATTRS[lowerAttrName]) {\n                                            addAllToArray(generateBindingUpdateOpCodes(attr.value, newIndex, attr.name, sanitizeSrcset), icuCase.update);\n                                        }\n                                        else {\n                                            addAllToArray(generateBindingUpdateOpCodes(attr.value, newIndex, attr.name), icuCase.update);\n                                        }\n                                    }\n                                    else {\n                                        ngDevMode &&\n                                            console.warn(\"WARNING: ignoring unsafe attribute value \" + lowerAttrName + \" on element \" + tagName + \" (see http://g.co/ng/security#xss)\");\n                                    }\n                                }\n                                else {\n                                    icuCase.create.push(newIndex << 3 /* SHIFT_REF */ | 4 /* Attr */, attr.name, attr.value);\n                                }\n                            }\n                            // Parse the children of this node (if any)\n                            parseNodes(currentNode.firstChild, icuCase, newIndex, nestedIcus, tIcus, expandoStartIndex);\n                            // Remove the parent node after the children\n                            icuCase.remove.push(newIndex << 3 /* SHIFT_REF */ | 3 /* Remove */);\n                        }\n                        break;\n                    case Node.TEXT_NODE:\n                        var value = currentNode.textContent || '';\n                        var hasBinding = value.match(BINDING_REGEXP);\n                        icuCase.create.push(hasBinding ? '' : value, newIndex, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                        icuCase.remove.push(newIndex << 3 /* SHIFT_REF */ | 3 /* Remove */);\n                        if (hasBinding) {\n                            addAllToArray(generateBindingUpdateOpCodes(value, newIndex), icuCase.update);\n                        }\n                        break;\n                    case Node.COMMENT_NODE:\n                        // Check if the comment node is a placeholder for a nested ICU\n                        var match = NESTED_ICU.exec(currentNode.textContent || '');\n                        if (match) {\n                            var nestedIcuIndex = parseInt(match[1], 10);\n                            var newLocal = ngDevMode ? \"nested ICU \" + nestedIcuIndex : '';\n                            // Create the comment node that will anchor the ICU expression\n                            icuCase.create.push(COMMENT_MARKER, newLocal, newIndex, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                            var nestedIcu = nestedIcus[nestedIcuIndex];\n                            nestedIcusToCreate.push([nestedIcu, newIndex]);\n                        }\n                        else {\n                            // We do not handle any other type of comment\n                            icuCase.vars--;\n                        }\n                        break;\n                    default:\n                        // We do not handle any other type of element\n                        icuCase.vars--;\n                }\n                currentNode = nextNode;\n            }\n            for (var i = 0; i < nestedIcusToCreate.length; i++) {\n                var nestedIcu = nestedIcusToCreate[i][0];\n                var nestedIcuNodeIndex = nestedIcusToCreate[i][1];\n                icuStart(tIcus, nestedIcu, nestedIcuNodeIndex, expandoStartIndex + icuCase.vars);\n                // Since this is recursive, the last TIcu that was pushed is the one we want\n                var nestTIcuIndex = tIcus.length - 1;\n                icuCase.vars += Math.max.apply(Math, __spread(tIcus[nestTIcuIndex].vars));\n                icuCase.childIcus.push(nestTIcuIndex);\n                var mask = getBindingMask(nestedIcu);\n                icuCase.update.push(toMaskBit(nestedIcu.mainBinding), // mask of the main binding\n                3, // skip 3 opCodes if not changed\n                -1 - nestedIcu.mainBinding, nestedIcuNodeIndex << 2 /* SHIFT_REF */ | 2 /* IcuSwitch */, nestTIcuIndex, mask, // mask of all the bindings of this ICU expression\n                2, // skip 2 opCodes if not changed\n                nestedIcuNodeIndex << 2 /* SHIFT_REF */ | 3 /* IcuUpdate */, nestTIcuIndex);\n                icuCase.remove.push(nestTIcuIndex << 3 /* SHIFT_REF */ | 6 /* RemoveNestedIcu */, nestedIcuNodeIndex << 3 /* SHIFT_REF */ | 3 /* Remove */);\n            }\n        }\n    }\n    /**\n     * Angular Dart introduced &ngsp; as a placeholder for non-removable space, see:\n     * https://github.com/dart-lang/angular/blob/0bb611387d29d65b5af7f9d2515ab571fd3fbee4/_tests/test/compiler/preserve_whitespace_test.dart#L25-L32\n     * In Angular Dart &ngsp; is converted to the 0xE500 PUA (Private Use Areas) unicode character\n     * and later on replaced by a space. We are re-implementing the same idea here, since translations\n     * might contain this special character.\n     */\n    var NGSP_UNICODE_REGEXP = /\\uE500/g;\n    function replaceNgsp(value) {\n        return value.replace(NGSP_UNICODE_REGEXP, ' ');\n    }\n    /**\n     * The locale id that the application is currently using (for translations and ICU expressions).\n     * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine\n     * but is now defined as a global value.\n     */\n    var LOCALE_ID = DEFAULT_LOCALE_ID;\n    /**\n     * Sets the locale id that will be used for translations and ICU expressions.\n     * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine\n     * but is now defined as a global value.\n     *\n     * @param localeId\n     */\n    function setLocaleId(localeId) {\n        assertDefined(localeId, \"Expected localeId to be defined\");\n        if (typeof localeId === 'string') {\n            LOCALE_ID = localeId.toLowerCase().replace(/_/g, '-');\n        }\n    }\n    /**\n     * Gets the locale id that will be used for translations and ICU expressions.\n     * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine\n     * but is now defined as a global value.\n     */\n    function getLocaleId() {\n        return LOCALE_ID;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Map of module-id to the corresponding NgModule.\n     * - In pre Ivy we track NgModuleFactory,\n     * - In post Ivy we track the NgModuleType\n     */\n    var modules = new Map();\n    /**\n     * Registers a loaded module. Should only be called from generated NgModuleFactory code.\n     * @publicApi\n     */\n    function registerModuleFactory(id, factory) {\n        var existing = modules.get(id);\n        assertSameOrNotExisting(id, existing && existing.moduleType, factory.moduleType);\n        modules.set(id, factory);\n    }\n    function assertSameOrNotExisting(id, type, incoming) {\n        if (type && type !== incoming) {\n            throw new Error(\"Duplicate module registered for \" + id + \" - \" + stringify(type) + \" vs \" + stringify(type.name));\n        }\n    }\n    function registerNgModuleType(ngModuleType) {\n        if (ngModuleType.ɵmod.id !== null) {\n            var id = ngModuleType.ɵmod.id;\n            var existing = modules.get(id);\n            assertSameOrNotExisting(id, existing, ngModuleType);\n            modules.set(id, ngModuleType);\n        }\n        var imports = ngModuleType.ɵmod.imports;\n        if (imports instanceof Function) {\n            imports = imports();\n        }\n        if (imports) {\n            imports.forEach(function (i) { return registerNgModuleType(i); });\n        }\n    }\n    function clearModulesForTest() {\n        modules.clear();\n    }\n    function getRegisteredNgModuleType(id) {\n        return modules.get(id) || autoRegisterModuleById[id];\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var COMPONENT_FACTORY_RESOLVER = {\n        provide: ComponentFactoryResolver,\n        useClass: ComponentFactoryResolver$1,\n        deps: [NgModuleRef],\n    };\n    var NgModuleRef$1 = /** @class */ (function (_super) {\n        __extends(NgModuleRef$1, _super);\n        function NgModuleRef$1(ngModuleType, _parent) {\n            var _this = _super.call(this) || this;\n            _this._parent = _parent;\n            // tslint:disable-next-line:require-internal-with-underscore\n            _this._bootstrapComponents = [];\n            _this.injector = _this;\n            _this.destroyCbs = [];\n            var ngModuleDef = getNgModuleDef(ngModuleType);\n            ngDevMode && assertDefined(ngModuleDef, \"NgModule '\" + stringify(ngModuleType) + \"' is not a subtype of 'NgModuleType'.\");\n            var ngLocaleIdDef = getNgLocaleIdDef(ngModuleType);\n            if (ngLocaleIdDef) {\n                setLocaleId(ngLocaleIdDef);\n            }\n            _this._bootstrapComponents = maybeUnwrapFn(ngModuleDef.bootstrap);\n            var additionalProviders = [\n                {\n                    provide: NgModuleRef,\n                    useValue: _this,\n                },\n                COMPONENT_FACTORY_RESOLVER\n            ];\n            _this._r3Injector = createInjector(ngModuleType, _parent, additionalProviders, stringify(ngModuleType));\n            _this.instance = _this.get(ngModuleType);\n            return _this;\n        }\n        NgModuleRef$1.prototype.get = function (token, notFoundValue, injectFlags) {\n            if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n            if (injectFlags === void 0) { injectFlags = exports.InjectFlags.Default; }\n            if (token === Injector || token === NgModuleRef || token === INJECTOR) {\n                return this;\n            }\n            return this._r3Injector.get(token, notFoundValue, injectFlags);\n        };\n        Object.defineProperty(NgModuleRef$1.prototype, \"componentFactoryResolver\", {\n            get: function () {\n                return this.get(ComponentFactoryResolver);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        NgModuleRef$1.prototype.destroy = function () {\n            ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n            var injector = this._r3Injector;\n            !injector.destroyed && injector.destroy();\n            this.destroyCbs.forEach(function (fn) { return fn(); });\n            this.destroyCbs = null;\n        };\n        NgModuleRef$1.prototype.onDestroy = function (callback) {\n            ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n            this.destroyCbs.push(callback);\n        };\n        return NgModuleRef$1;\n    }(NgModuleRef));\n    var NgModuleFactory$1 = /** @class */ (function (_super) {\n        __extends(NgModuleFactory, _super);\n        function NgModuleFactory(moduleType) {\n            var _this = _super.call(this) || this;\n            _this.moduleType = moduleType;\n            var ngModuleDef = getNgModuleDef(moduleType);\n            if (ngModuleDef !== null) {\n                // Register the NgModule with Angular's module registry. The location (and hence timing) of\n                // this call is critical to ensure this works correctly (modules get registered when expected)\n                // without bloating bundles (modules are registered when otherwise not referenced).\n                //\n                // In View Engine, registration occurs in the .ngfactory.js file as a side effect. This has\n                // several practical consequences:\n                //\n                // - If an .ngfactory file is not imported from, the module won't be registered (and can be\n                //   tree shaken).\n                // - If an .ngfactory file is imported from, the module will be registered even if an instance\n                //   is not actually created (via `create` below).\n                // - Since an .ngfactory file in View Engine references the .ngfactory files of the NgModule's\n                //   imports,\n                //\n                // In Ivy, things are a bit different. .ngfactory files still exist for compatibility, but are\n                // not a required API to use - there are other ways to obtain an NgModuleFactory for a given\n                // NgModule. Thus, relying on a side effect in the .ngfactory file is not sufficient. Instead,\n                // the side effect of registration is added here, in the constructor of NgModuleFactory,\n                // ensuring no matter how a factory is created, the module is registered correctly.\n                //\n                // An alternative would be to include the registration side effect inline following the actual\n                // NgModule definition. This also has the correct timing, but breaks tree-shaking - modules\n                // will be registered and retained even if they're otherwise never referenced.\n                registerNgModuleType(moduleType);\n            }\n            return _this;\n        }\n        NgModuleFactory.prototype.create = function (parentInjector) {\n            return new NgModuleRef$1(this.moduleType, parentInjector);\n        };\n        return NgModuleFactory;\n    }(NgModuleFactory));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Adds decorator, constructor, and property metadata to a given type via static metadata fields\n     * on the type.\n     *\n     * These metadata fields can later be read with Angular's `ReflectionCapabilities` API.\n     *\n     * Calls to `setClassMetadata` can be marked as pure, resulting in the metadata assignments being\n     * tree-shaken away during production builds.\n     */\n    function setClassMetadata(type, decorators, ctorParameters, propDecorators) {\n        return noSideEffects(function () {\n            var _a;\n            var clazz = type;\n            // We determine whether a class has its own metadata by taking the metadata from the parent\n            // constructor and checking whether it's the same as the subclass metadata below. We can't use\n            // `hasOwnProperty` here because it doesn't work correctly in IE10 for static fields that are\n            // defined by TS. See https://github.com/angular/angular/pull/28439#issuecomment-459349218.\n            var parentPrototype = clazz.prototype ? Object.getPrototypeOf(clazz.prototype) : null;\n            var parentConstructor = parentPrototype && parentPrototype.constructor;\n            if (decorators !== null) {\n                if (clazz.decorators !== undefined &&\n                    (!parentConstructor || parentConstructor.decorators !== clazz.decorators)) {\n                    (_a = clazz.decorators).push.apply(_a, __spread(decorators));\n                }\n                else {\n                    clazz.decorators = decorators;\n                }\n            }\n            if (ctorParameters !== null) {\n                // Rather than merging, clobber the existing parameters. If other projects exist which use\n                // tsickle-style annotations and reflect over them in the same way, this could cause issues,\n                // but that is vanishingly unlikely.\n                clazz.ctorParameters = ctorParameters;\n            }\n            if (propDecorators !== null) {\n                // The property decorator objects are merged as it is possible different fields have different\n                // decorator types. Decorators on individual fields are not merged, as it's also incredibly\n                // unlikely that a field will be decorated both with an Angular decorator and a non-Angular\n                // decorator that's also been downleveled.\n                if (clazz.propDecorators !== undefined &&\n                    (!parentConstructor || parentConstructor.propDecorators !== clazz.propDecorators)) {\n                    clazz.propDecorators = __assign(__assign({}, clazz.propDecorators), propDecorators);\n                }\n                else {\n                    clazz.propDecorators = propDecorators;\n                }\n            }\n        });\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Bindings for pure functions are stored after regular bindings.\n     *\n     * |-------decls------|---------vars---------|                 |----- hostVars (dir1) ------|\n     * ------------------------------------------------------------------------------------------\n     * | nodes/refs/pipes | bindings | fn slots  | injector | dir1 | host bindings | host slots |\n     * ------------------------------------------------------------------------------------------\n     *                    ^                      ^\n     *      TView.bindingStartIndex      TView.expandoStartIndex\n     *\n     * Pure function instructions are given an offset from the binding root. Adding the offset to the\n     * binding root gives the first index where the bindings are stored. In component views, the binding\n     * root is the bindingStartIndex. In host bindings, the binding root is the expandoStartIndex +\n     * any directive instances + any hostVars in directives evaluated before it.\n     *\n     * See VIEW_DATA.md for more information about host binding resolution.\n     */\n    /**\n     * If the value hasn't been saved, calls the pure function to store and return the\n     * value. If it has been saved, returns the saved value.\n     *\n     * @param slotOffset the offset from binding root to the reserved slot\n     * @param pureFn Function that returns a value\n     * @param thisArg Optional calling context of pureFn\n     * @returns value\n     *\n     * @codeGenApi\n     */\n    function ɵɵpureFunction0(slotOffset, pureFn, thisArg) {\n        var bindingIndex = getBindingRoot() + slotOffset;\n        var lView = getLView();\n        return lView[bindingIndex] === NO_CHANGE ?\n            updateBinding(lView, bindingIndex, thisArg ? pureFn.call(thisArg) : pureFn()) :\n            getBinding(lView, bindingIndex);\n    }\n    /**\n     * If the value of the provided exp has changed, calls the pure function to return\n     * an updated value. Or if the value has not changed, returns cached value.\n     *\n     * @param slotOffset the offset from binding root to the reserved slot\n     * @param pureFn Function that returns an updated value\n     * @param exp Updated expression value\n     * @param thisArg Optional calling context of pureFn\n     * @returns Updated or cached value\n     *\n     * @codeGenApi\n     */\n    function ɵɵpureFunction1(slotOffset, pureFn, exp, thisArg) {\n        return pureFunction1Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp, thisArg);\n    }\n    /**\n     * If the value of any provided exp has changed, calls the pure function to return\n     * an updated value. Or if no values have changed, returns cached value.\n     *\n     * @param slotOffset the offset from binding root to the reserved slot\n     * @param pureFn\n     * @param exp1\n     * @param exp2\n     * @param thisArg Optional calling context of pureFn\n     * @returns Updated or cached value\n     *\n     * @codeGenApi\n     */\n    function ɵɵpureFunction2(slotOffset, pureFn, exp1, exp2, thisArg) {\n        return pureFunction2Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, thisArg);\n    }\n    /**\n     * If the value of any provided exp has changed, calls the pure function to return\n     * an updated value. Or if no values have changed, returns cached value.\n     *\n     * @param slotOffset the offset from binding root to the reserved slot\n     * @param pureFn\n     * @param exp1\n     * @param exp2\n     * @param exp3\n     * @param thisArg Optional calling context of pureFn\n     * @returns Updated or cached value\n     *\n     * @codeGenApi\n     */\n    function ɵɵpureFunction3(slotOffset, pureFn, exp1, exp2, exp3, thisArg) {\n        return pureFunction3Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, exp3, thisArg);\n    }\n    /**\n     * If the value of any provided exp has changed, calls the pure function to return\n     * an updated value. Or if no values have changed, returns cached value.\n     *\n     * @param slotOffset the offset from binding root to the reserved slot\n     * @param pureFn\n     * @param exp1\n     * @param exp2\n     * @param exp3\n     * @param exp4\n     * @param thisArg Optional calling context of pureFn\n     * @returns Updated or cached value\n     *\n     * @codeGenApi\n     */\n    function ɵɵpureFunction4(slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {\n        return pureFunction4Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg);\n    }\n    /**\n     * If the value of any provided exp has changed, calls the pure function to return\n     * an updated value. Or if no values have changed, returns cached value.\n     *\n     * @param slotOffset the offset from binding root to the reserved slot\n     * @param pureFn\n     * @param exp1\n     * @param exp2\n     * @param exp3\n     * @param exp4\n     * @param exp5\n     * @param thisArg Optional calling context of pureFn\n     * @returns Updated or cached value\n     *\n     * @codeGenApi\n     */\n    function ɵɵpureFunction5(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, thisArg) {\n        var bindingIndex = getBindingRoot() + slotOffset;\n        var lView = getLView();\n        var different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n        return bindingUpdated(lView, bindingIndex + 4, exp5) || different ?\n            updateBinding(lView, bindingIndex + 5, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5) :\n                pureFn(exp1, exp2, exp3, exp4, exp5)) :\n            getBinding(lView, bindingIndex + 5);\n    }\n    /**\n     * If the value of any provided exp has changed, calls the pure function to return\n     * an updated value. Or if no values have changed, returns cached value.\n     *\n     * @param slotOffset the offset from binding root to the reserved slot\n     * @param pureFn\n     * @param exp1\n     * @param exp2\n     * @param exp3\n     * @param exp4\n     * @param exp5\n     * @param exp6\n     * @param thisArg Optional calling context of pureFn\n     * @returns Updated or cached value\n     *\n     * @codeGenApi\n     */\n    function ɵɵpureFunction6(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, thisArg) {\n        var bindingIndex = getBindingRoot() + slotOffset;\n        var lView = getLView();\n        var different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n        return bindingUpdated2(lView, bindingIndex + 4, exp5, exp6) || different ?\n            updateBinding(lView, bindingIndex + 6, thisArg ?\n                pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6) :\n                pureFn(exp1, exp2, exp3, exp4, exp5, exp6)) :\n            getBinding(lView, bindingIndex + 6);\n    }\n    /**\n     * If the value of any provided exp has changed, calls the pure function to return\n     * an updated value. Or if no values have changed, returns cached value.\n     *\n     * @param slotOffset the offset from binding root to the reserved slot\n     * @param pureFn\n     * @param exp1\n     * @param exp2\n     * @param exp3\n     * @param exp4\n     * @param exp5\n     * @param exp6\n     * @param exp7\n     * @param thisArg Optional calling context of pureFn\n     * @returns Updated or cached value\n     *\n     * @codeGenApi\n     */\n    function ɵɵpureFunction7(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, thisArg) {\n        var bindingIndex = getBindingRoot() + slotOffset;\n        var lView = getLView();\n        var different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n        return bindingUpdated3(lView, bindingIndex + 4, exp5, exp6, exp7) || different ?\n            updateBinding(lView, bindingIndex + 7, thisArg ?\n                pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7) :\n                pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7)) :\n            getBinding(lView, bindingIndex + 7);\n    }\n    /**\n     * If the value of any provided exp has changed, calls the pure function to return\n     * an updated value. Or if no values have changed, returns cached value.\n     *\n     * @param slotOffset the offset from binding root to the reserved slot\n     * @param pureFn\n     * @param exp1\n     * @param exp2\n     * @param exp3\n     * @param exp4\n     * @param exp5\n     * @param exp6\n     * @param exp7\n     * @param exp8\n     * @param thisArg Optional calling context of pureFn\n     * @returns Updated or cached value\n     *\n     * @codeGenApi\n     */\n    function ɵɵpureFunction8(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8, thisArg) {\n        var bindingIndex = getBindingRoot() + slotOffset;\n        var lView = getLView();\n        var different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n        return bindingUpdated4(lView, bindingIndex + 4, exp5, exp6, exp7, exp8) || different ?\n            updateBinding(lView, bindingIndex + 8, thisArg ?\n                pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8) :\n                pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8)) :\n            getBinding(lView, bindingIndex + 8);\n    }\n    /**\n     * pureFunction instruction that can support any number of bindings.\n     *\n     * If the value of any provided exp has changed, calls the pure function to return\n     * an updated value. Or if no values have changed, returns cached value.\n     *\n     * @param slotOffset the offset from binding root to the reserved slot\n     * @param pureFn A pure function that takes binding values and builds an object or array\n     * containing those values.\n     * @param exps An array of binding values\n     * @param thisArg Optional calling context of pureFn\n     * @returns Updated or cached value\n     *\n     * @codeGenApi\n     */\n    function ɵɵpureFunctionV(slotOffset, pureFn, exps, thisArg) {\n        return pureFunctionVInternal(getLView(), getBindingRoot(), slotOffset, pureFn, exps, thisArg);\n    }\n    /**\n     * If the value of the provided exp has changed, calls the pure function to return\n     * an updated value. Or if the value has not changed, returns cached value.\n     *\n     * @param lView LView in which the function is being executed.\n     * @param bindingRoot Binding root index.\n     * @param slotOffset the offset from binding root to the reserved slot\n     * @param pureFn Function that returns an updated value\n     * @param exp Updated expression value\n     * @param thisArg Optional calling context of pureFn\n     * @returns Updated or cached value\n     */\n    function pureFunction1Internal(lView, bindingRoot, slotOffset, pureFn, exp, thisArg) {\n        var bindingIndex = bindingRoot + slotOffset;\n        return bindingUpdated(lView, bindingIndex, exp) ?\n            updateBinding(lView, bindingIndex + 1, thisArg ? pureFn.call(thisArg, exp) : pureFn(exp)) :\n            getBinding(lView, bindingIndex + 1);\n    }\n    /**\n     * If the value of any provided exp has changed, calls the pure function to return\n     * an updated value. Or if no values have changed, returns cached value.\n     *\n     * @param lView LView in which the function is being executed.\n     * @param bindingRoot Binding root index.\n     * @param slotOffset the offset from binding root to the reserved slot\n     * @param pureFn\n     * @param exp1\n     * @param exp2\n     * @param thisArg Optional calling context of pureFn\n     * @returns Updated or cached value\n     */\n    function pureFunction2Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, thisArg) {\n        var bindingIndex = bindingRoot + slotOffset;\n        return bindingUpdated2(lView, bindingIndex, exp1, exp2) ?\n            updateBinding(lView, bindingIndex + 2, thisArg ? pureFn.call(thisArg, exp1, exp2) : pureFn(exp1, exp2)) :\n            getBinding(lView, bindingIndex + 2);\n    }\n    /**\n     * If the value of any provided exp has changed, calls the pure function to return\n     * an updated value. Or if no values have changed, returns cached value.\n     *\n     * @param lView LView in which the function is being executed.\n     * @param bindingRoot Binding root index.\n     * @param slotOffset the offset from binding root to the reserved slot\n     * @param pureFn\n     * @param exp1\n     * @param exp2\n     * @param exp3\n     * @param thisArg Optional calling context of pureFn\n     * @returns Updated or cached value\n     */\n    function pureFunction3Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, exp3, thisArg) {\n        var bindingIndex = bindingRoot + slotOffset;\n        return bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) ?\n            updateBinding(lView, bindingIndex + 3, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3) : pureFn(exp1, exp2, exp3)) :\n            getBinding(lView, bindingIndex + 3);\n    }\n    /**\n     * If the value of any provided exp has changed, calls the pure function to return\n     * an updated value. Or if no values have changed, returns cached value.\n     *\n     * @param lView LView in which the function is being executed.\n     * @param bindingRoot Binding root index.\n     * @param slotOffset the offset from binding root to the reserved slot\n     * @param pureFn\n     * @param exp1\n     * @param exp2\n     * @param exp3\n     * @param exp4\n     * @param thisArg Optional calling context of pureFn\n     * @returns Updated or cached value\n     *\n     */\n    function pureFunction4Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {\n        var bindingIndex = bindingRoot + slotOffset;\n        return bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) ?\n            updateBinding(lView, bindingIndex + 4, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4) : pureFn(exp1, exp2, exp3, exp4)) :\n            getBinding(lView, bindingIndex + 4);\n    }\n    /**\n     * pureFunction instruction that can support any number of bindings.\n     *\n     * If the value of any provided exp has changed, calls the pure function to return\n     * an updated value. Or if no values have changed, returns cached value.\n     *\n     * @param lView LView in which the function is being executed.\n     * @param bindingRoot Binding root index.\n     * @param slotOffset the offset from binding root to the reserved slot\n     * @param pureFn A pure function that takes binding values and builds an object or array\n     * containing those values.\n     * @param exps An array of binding values\n     * @param thisArg Optional calling context of pureFn\n     * @returns Updated or cached value\n     */\n    function pureFunctionVInternal(lView, bindingRoot, slotOffset, pureFn, exps, thisArg) {\n        var bindingIndex = bindingRoot + slotOffset;\n        var different = false;\n        for (var i = 0; i < exps.length; i++) {\n            bindingUpdated(lView, bindingIndex++, exps[i]) && (different = true);\n        }\n        return different ? updateBinding(lView, bindingIndex, pureFn.apply(thisArg, exps)) :\n            getBinding(lView, bindingIndex);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Create a pipe.\n     *\n     * @param index Pipe index where the pipe will be stored.\n     * @param pipeName The name of the pipe\n     * @returns T the instance of the pipe.\n     *\n     * @codeGenApi\n     */\n    function ɵɵpipe(index, pipeName) {\n        var tView = getLView()[TVIEW];\n        var pipeDef;\n        var adjustedIndex = index + HEADER_OFFSET;\n        if (tView.firstCreatePass) {\n            pipeDef = getPipeDef$1(pipeName, tView.pipeRegistry);\n            tView.data[adjustedIndex] = pipeDef;\n            if (pipeDef.onDestroy) {\n                (tView.destroyHooks || (tView.destroyHooks = [])).push(adjustedIndex, pipeDef.onDestroy);\n            }\n        }\n        else {\n            pipeDef = tView.data[adjustedIndex];\n        }\n        var pipeFactory = pipeDef.factory || (pipeDef.factory = getFactoryDef(pipeDef.type, true));\n        var pipeInstance = pipeFactory();\n        store(index, pipeInstance);\n        return pipeInstance;\n    }\n    /**\n     * Searches the pipe registry for a pipe with the given name. If one is found,\n     * returns the pipe. Otherwise, an error is thrown because the pipe cannot be resolved.\n     *\n     * @param name Name of pipe to resolve\n     * @param registry Full list of available pipes\n     * @returns Matching PipeDef\n     *\n     * @publicApi\n     */\n    function getPipeDef$1(name, registry) {\n        if (registry) {\n            for (var i = registry.length - 1; i >= 0; i--) {\n                var pipeDef = registry[i];\n                if (name === pipeDef.name) {\n                    return pipeDef;\n                }\n            }\n        }\n        throw new Error(\"The pipe '\" + name + \"' could not be found!\");\n    }\n    /**\n     * Invokes a pipe with 1 arguments.\n     *\n     * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n     * the pipe only when an input to the pipe changes.\n     *\n     * @param index Pipe index where the pipe was stored on creation.\n     * @param slotOffset the offset in the reserved slot space\n     * @param v1 1st argument to {@link PipeTransform#transform}.\n     *\n     * @codeGenApi\n     */\n    function ɵɵpipeBind1(index, slotOffset, v1) {\n        var lView = getLView();\n        var pipeInstance = load(lView, index);\n        return unwrapValue$1(lView, isPure(lView, index) ?\n            pureFunction1Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, pipeInstance) :\n            pipeInstance.transform(v1));\n    }\n    /**\n     * Invokes a pipe with 2 arguments.\n     *\n     * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n     * the pipe only when an input to the pipe changes.\n     *\n     * @param index Pipe index where the pipe was stored on creation.\n     * @param slotOffset the offset in the reserved slot space\n     * @param v1 1st argument to {@link PipeTransform#transform}.\n     * @param v2 2nd argument to {@link PipeTransform#transform}.\n     *\n     * @codeGenApi\n     */\n    function ɵɵpipeBind2(index, slotOffset, v1, v2) {\n        var lView = getLView();\n        var pipeInstance = load(lView, index);\n        return unwrapValue$1(lView, isPure(lView, index) ?\n            pureFunction2Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, pipeInstance) :\n            pipeInstance.transform(v1, v2));\n    }\n    /**\n     * Invokes a pipe with 3 arguments.\n     *\n     * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n     * the pipe only when an input to the pipe changes.\n     *\n     * @param index Pipe index where the pipe was stored on creation.\n     * @param slotOffset the offset in the reserved slot space\n     * @param v1 1st argument to {@link PipeTransform#transform}.\n     * @param v2 2nd argument to {@link PipeTransform#transform}.\n     * @param v3 4rd argument to {@link PipeTransform#transform}.\n     *\n     * @codeGenApi\n     */\n    function ɵɵpipeBind3(index, slotOffset, v1, v2, v3) {\n        var lView = getLView();\n        var pipeInstance = load(lView, index);\n        return unwrapValue$1(lView, isPure(lView, index) ? pureFunction3Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, v3, pipeInstance) :\n            pipeInstance.transform(v1, v2, v3));\n    }\n    /**\n     * Invokes a pipe with 4 arguments.\n     *\n     * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n     * the pipe only when an input to the pipe changes.\n     *\n     * @param index Pipe index where the pipe was stored on creation.\n     * @param slotOffset the offset in the reserved slot space\n     * @param v1 1st argument to {@link PipeTransform#transform}.\n     * @param v2 2nd argument to {@link PipeTransform#transform}.\n     * @param v3 3rd argument to {@link PipeTransform#transform}.\n     * @param v4 4th argument to {@link PipeTransform#transform}.\n     *\n     * @codeGenApi\n     */\n    function ɵɵpipeBind4(index, slotOffset, v1, v2, v3, v4) {\n        var lView = getLView();\n        var pipeInstance = load(lView, index);\n        return unwrapValue$1(lView, isPure(lView, index) ? pureFunction4Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, v3, v4, pipeInstance) :\n            pipeInstance.transform(v1, v2, v3, v4));\n    }\n    /**\n     * Invokes a pipe with variable number of arguments.\n     *\n     * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n     * the pipe only when an input to the pipe changes.\n     *\n     * @param index Pipe index where the pipe was stored on creation.\n     * @param slotOffset the offset in the reserved slot space\n     * @param values Array of arguments to pass to {@link PipeTransform#transform} method.\n     *\n     * @codeGenApi\n     */\n    function ɵɵpipeBindV(index, slotOffset, values) {\n        var lView = getLView();\n        var pipeInstance = load(lView, index);\n        return unwrapValue$1(lView, isPure(lView, index) ?\n            pureFunctionVInternal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, values, pipeInstance) :\n            pipeInstance.transform.apply(pipeInstance, values));\n    }\n    function isPure(lView, index) {\n        return lView[TVIEW].data[index + HEADER_OFFSET].pure;\n    }\n    /**\n     * Unwrap the output of a pipe transformation.\n     * In order to trick change detection into considering that the new value is always different from\n     * the old one, the old value is overwritten by NO_CHANGE.\n     *\n     * @param newValue the pipe transformation output.\n     */\n    function unwrapValue$1(lView, newValue) {\n        if (WrappedValue.isWrapped(newValue)) {\n            newValue = WrappedValue.unwrap(newValue);\n            // The NO_CHANGE value needs to be written at the index where the impacted binding value is\n            // stored\n            var bindingToInvalidateIdx = getBindingIndex();\n            lView[bindingToInvalidateIdx] = NO_CHANGE;\n        }\n        return newValue;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Use in components with the `@Output` directive to emit custom events\n     * synchronously or asynchronously, and register handlers for those events\n     * by subscribing to an instance.\n     *\n     * @usageNotes\n     *\n     * Extends\n     * [RxJS `Subject`](https://rxjs.dev/api/index/class/Subject)\n     * for Angular by adding the `emit()` method.\n     *\n     * In the following example, a component defines two output properties\n     * that create event emitters. When the title is clicked, the emitter\n     * emits an open or close event to toggle the current visibility state.\n     *\n     * ```html\n     * @Component({\n     *   selector: 'zippy',\n     *   template: `\n     *   <div class=\"zippy\">\n     *     <div (click)=\"toggle()\">Toggle</div>\n     *     <div [hidden]=\"!visible\">\n     *       <ng-content></ng-content>\n     *     </div>\n     *  </div>`})\n     * export class Zippy {\n     *   visible: boolean = true;\n     *   @Output() open: EventEmitter<any> = new EventEmitter();\n     *   @Output() close: EventEmitter<any> = new EventEmitter();\n     *\n     *   toggle() {\n     *     this.visible = !this.visible;\n     *     if (this.visible) {\n     *       this.open.emit(null);\n     *     } else {\n     *       this.close.emit(null);\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * Access the event object with the `$event` argument passed to the output event\n     * handler:\n     *\n     * ```html\n     * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n     * ```\n     *\n     * @see [Observables in Angular](guide/observables-in-angular)\n     * @publicApi\n     */\n    var EventEmitter = /** @class */ (function (_super) {\n        __extends(EventEmitter, _super);\n        /**\n         * Creates an instance of this class that can\n         * deliver events synchronously or asynchronously.\n         *\n         * @param isAsync When true, deliver events asynchronously.\n         *\n         */\n        function EventEmitter(isAsync) {\n            if (isAsync === void 0) { isAsync = false; }\n            var _this = _super.call(this) || this;\n            _this.__isAsync = isAsync;\n            return _this;\n        }\n        /**\n         * Emits an event containing a given value.\n         * @param value The value to emit.\n         */\n        EventEmitter.prototype.emit = function (value) { _super.prototype.next.call(this, value); };\n        /**\n         * Registers handlers for events emitted by this instance.\n         * @param generatorOrNext When supplied, a custom handler for emitted events.\n         * @param error When supplied, a custom handler for an error notification\n         * from this emitter.\n         * @param complete When supplied, a custom handler for a completion\n         * notification from this emitter.\n         */\n        EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {\n            var schedulerFn;\n            var errorFn = function (err) { return null; };\n            var completeFn = function () { return null; };\n            if (generatorOrNext && typeof generatorOrNext === 'object') {\n                schedulerFn = this.__isAsync ? function (value) {\n                    setTimeout(function () { return generatorOrNext.next(value); });\n                } : function (value) { generatorOrNext.next(value); };\n                if (generatorOrNext.error) {\n                    errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :\n                        function (err) { generatorOrNext.error(err); };\n                }\n                if (generatorOrNext.complete) {\n                    completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :\n                        function () { generatorOrNext.complete(); };\n                }\n            }\n            else {\n                schedulerFn = this.__isAsync ? function (value) { setTimeout(function () { return generatorOrNext(value); }); } :\n                    function (value) { generatorOrNext(value); };\n                if (error) {\n                    errorFn =\n                        this.__isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };\n                }\n                if (complete) {\n                    completeFn =\n                        this.__isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };\n                }\n            }\n            var sink = _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);\n            if (generatorOrNext instanceof rxjs.Subscription) {\n                generatorOrNext.add(sink);\n            }\n            return sink;\n        };\n        return EventEmitter;\n    }(rxjs.Subject));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function symbolIterator() {\n        return this._results[getSymbolIterator()]();\n    }\n    /**\n     * An unmodifiable list of items that Angular keeps up to date when the state\n     * of the application changes.\n     *\n     * The type of object that {@link ViewChildren}, {@link ContentChildren}, and {@link QueryList}\n     * provide.\n     *\n     * Implements an iterable interface, therefore it can be used in both ES6\n     * javascript `for (var i of items)` loops as well as in Angular templates with\n     * `*ngFor=\"let i of myList\"`.\n     *\n     * Changes can be observed by subscribing to the changes `Observable`.\n     *\n     * NOTE: In the future this class will implement an `Observable` interface.\n     *\n     * @usageNotes\n     * ### Example\n     * ```typescript\n     * @Component({...})\n     * class Container {\n     *   @ViewChildren(Item) items:QueryList<Item>;\n     * }\n     * ```\n     *\n     * @publicApi\n     */\n    var QueryList = /** @class */ (function () {\n        function QueryList() {\n            this.dirty = true;\n            this._results = [];\n            this.changes = new EventEmitter();\n            this.length = 0;\n            // This function should be declared on the prototype, but doing so there will cause the class\n            // declaration to have side-effects and become not tree-shakable. For this reason we do it in\n            // the constructor.\n            // [getSymbolIterator()](): Iterator<T> { ... }\n            var symbol = getSymbolIterator();\n            var proto = QueryList.prototype;\n            if (!proto[symbol])\n                proto[symbol] = symbolIterator;\n        }\n        /**\n         * See\n         * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n         */\n        QueryList.prototype.map = function (fn) { return this._results.map(fn); };\n        /**\n         * See\n         * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n         */\n        QueryList.prototype.filter = function (fn) {\n            return this._results.filter(fn);\n        };\n        /**\n         * See\n         * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n         */\n        QueryList.prototype.find = function (fn) {\n            return this._results.find(fn);\n        };\n        /**\n         * See\n         * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n         */\n        QueryList.prototype.reduce = function (fn, init) {\n            return this._results.reduce(fn, init);\n        };\n        /**\n         * See\n         * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n         */\n        QueryList.prototype.forEach = function (fn) { this._results.forEach(fn); };\n        /**\n         * See\n         * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n         */\n        QueryList.prototype.some = function (fn) {\n            return this._results.some(fn);\n        };\n        /**\n         * Returns a copy of the internal results list as an Array.\n         */\n        QueryList.prototype.toArray = function () { return this._results.slice(); };\n        QueryList.prototype.toString = function () { return this._results.toString(); };\n        /**\n         * Updates the stored data of the query list, and resets the `dirty` flag to `false`, so that\n         * on change detection, it will not notify of changes to the queries, unless a new change\n         * occurs.\n         *\n         * @param resultsTree The query results to store\n         */\n        QueryList.prototype.reset = function (resultsTree) {\n            this._results = flatten(resultsTree);\n            this.dirty = false;\n            this.length = this._results.length;\n            this.last = this._results[this.length - 1];\n            this.first = this._results[0];\n        };\n        /**\n         * Triggers a change event by emitting on the `changes` {@link EventEmitter}.\n         */\n        QueryList.prototype.notifyOnChanges = function () { this.changes.emit(this); };\n        /** internal */\n        QueryList.prototype.setDirty = function () { this.dirty = true; };\n        /** internal */\n        QueryList.prototype.destroy = function () {\n            this.changes.complete();\n            this.changes.unsubscribe();\n        };\n        return QueryList;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // Note: This hack is necessary so we don't erroneously get a circular dependency\n    // failure based on types.\n    var unusedValueExportToPlacateAjd$7 = 1;\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // Note: This hack is necessary so we don't erroneously get a circular dependency\n    // failure based on types.\n    var unusedValueExportToPlacateAjd$8 = 1;\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var unusedValueToPlacateAjd$2 = unusedValueExportToPlacateAjd$7 + unusedValueExportToPlacateAjd$2 + unusedValueExportToPlacateAjd$4 + unusedValueExportToPlacateAjd$8;\n    var LQuery_ = /** @class */ (function () {\n        function LQuery_(queryList) {\n            this.queryList = queryList;\n            this.matches = null;\n        }\n        LQuery_.prototype.clone = function () { return new LQuery_(this.queryList); };\n        LQuery_.prototype.setDirty = function () { this.queryList.setDirty(); };\n        return LQuery_;\n    }());\n    var LQueries_ = /** @class */ (function () {\n        function LQueries_(queries) {\n            if (queries === void 0) { queries = []; }\n            this.queries = queries;\n        }\n        LQueries_.prototype.createEmbeddedView = function (tView) {\n            var tQueries = tView.queries;\n            if (tQueries !== null) {\n                var noOfInheritedQueries = tView.contentQueries !== null ? tView.contentQueries[0] : tQueries.length;\n                var viewLQueries = [];\n                // An embedded view has queries propagated from a declaration view at the beginning of the\n                // TQueries collection and up until a first content query declared in the embedded view. Only\n                // propagated LQueries are created at this point (LQuery corresponding to declared content\n                // queries will be instantiated from the content query instructions for each directive).\n                for (var i = 0; i < noOfInheritedQueries; i++) {\n                    var tQuery = tQueries.getByIndex(i);\n                    var parentLQuery = this.queries[tQuery.indexInDeclarationView];\n                    viewLQueries.push(parentLQuery.clone());\n                }\n                return new LQueries_(viewLQueries);\n            }\n            return null;\n        };\n        LQueries_.prototype.insertView = function (tView) { this.dirtyQueriesWithMatches(tView); };\n        LQueries_.prototype.detachView = function (tView) { this.dirtyQueriesWithMatches(tView); };\n        LQueries_.prototype.dirtyQueriesWithMatches = function (tView) {\n            for (var i = 0; i < this.queries.length; i++) {\n                if (getTQuery(tView, i).matches !== null) {\n                    this.queries[i].setDirty();\n                }\n            }\n        };\n        return LQueries_;\n    }());\n    var TQueryMetadata_ = /** @class */ (function () {\n        function TQueryMetadata_(predicate, descendants, isStatic, read) {\n            if (read === void 0) { read = null; }\n            this.predicate = predicate;\n            this.descendants = descendants;\n            this.isStatic = isStatic;\n            this.read = read;\n        }\n        return TQueryMetadata_;\n    }());\n    var TQueries_ = /** @class */ (function () {\n        function TQueries_(queries) {\n            if (queries === void 0) { queries = []; }\n            this.queries = queries;\n        }\n        TQueries_.prototype.elementStart = function (tView, tNode) {\n            ngDevMode && assertFirstCreatePass(tView, 'Queries should collect results on the first template pass only');\n            for (var i = 0; i < this.queries.length; i++) {\n                this.queries[i].elementStart(tView, tNode);\n            }\n        };\n        TQueries_.prototype.elementEnd = function (tNode) {\n            for (var i = 0; i < this.queries.length; i++) {\n                this.queries[i].elementEnd(tNode);\n            }\n        };\n        TQueries_.prototype.embeddedTView = function (tNode) {\n            var queriesForTemplateRef = null;\n            for (var i = 0; i < this.length; i++) {\n                var childQueryIndex = queriesForTemplateRef !== null ? queriesForTemplateRef.length : 0;\n                var tqueryClone = this.getByIndex(i).embeddedTView(tNode, childQueryIndex);\n                if (tqueryClone) {\n                    tqueryClone.indexInDeclarationView = i;\n                    if (queriesForTemplateRef !== null) {\n                        queriesForTemplateRef.push(tqueryClone);\n                    }\n                    else {\n                        queriesForTemplateRef = [tqueryClone];\n                    }\n                }\n            }\n            return queriesForTemplateRef !== null ? new TQueries_(queriesForTemplateRef) : null;\n        };\n        TQueries_.prototype.template = function (tView, tNode) {\n            ngDevMode && assertFirstCreatePass(tView, 'Queries should collect results on the first template pass only');\n            for (var i = 0; i < this.queries.length; i++) {\n                this.queries[i].template(tView, tNode);\n            }\n        };\n        TQueries_.prototype.getByIndex = function (index) {\n            ngDevMode && assertDataInRange(this.queries, index);\n            return this.queries[index];\n        };\n        Object.defineProperty(TQueries_.prototype, \"length\", {\n            get: function () { return this.queries.length; },\n            enumerable: true,\n            configurable: true\n        });\n        TQueries_.prototype.track = function (tquery) { this.queries.push(tquery); };\n        return TQueries_;\n    }());\n    var TQuery_ = /** @class */ (function () {\n        function TQuery_(metadata, nodeIndex) {\n            if (nodeIndex === void 0) { nodeIndex = -1; }\n            this.metadata = metadata;\n            this.matches = null;\n            this.indexInDeclarationView = -1;\n            this.crossesNgTemplate = false;\n            /**\n             * A flag indicating if a given query still applies to nodes it is crossing. We use this flag\n             * (alongside with _declarationNodeIndex) to know when to stop applying content queries to\n             * elements in a template.\n             */\n            this._appliesToNextNode = true;\n            this._declarationNodeIndex = nodeIndex;\n        }\n        TQuery_.prototype.elementStart = function (tView, tNode) {\n            if (this.isApplyingToNode(tNode)) {\n                this.matchTNode(tView, tNode);\n            }\n        };\n        TQuery_.prototype.elementEnd = function (tNode) {\n            if (this._declarationNodeIndex === tNode.index) {\n                this._appliesToNextNode = false;\n            }\n        };\n        TQuery_.prototype.template = function (tView, tNode) { this.elementStart(tView, tNode); };\n        TQuery_.prototype.embeddedTView = function (tNode, childQueryIndex) {\n            if (this.isApplyingToNode(tNode)) {\n                this.crossesNgTemplate = true;\n                // A marker indicating a `<ng-template>` element (a placeholder for query results from\n                // embedded views created based on this `<ng-template>`).\n                this.addMatch(-tNode.index, childQueryIndex);\n                return new TQuery_(this.metadata);\n            }\n            return null;\n        };\n        TQuery_.prototype.isApplyingToNode = function (tNode) {\n            if (this._appliesToNextNode && this.metadata.descendants === false) {\n                return this._declarationNodeIndex === (tNode.parent ? tNode.parent.index : -1);\n            }\n            return this._appliesToNextNode;\n        };\n        TQuery_.prototype.matchTNode = function (tView, tNode) {\n            if (Array.isArray(this.metadata.predicate)) {\n                var localNames = this.metadata.predicate;\n                for (var i = 0; i < localNames.length; i++) {\n                    this.matchTNodeWithReadOption(tView, tNode, getIdxOfMatchingSelector(tNode, localNames[i]));\n                }\n            }\n            else {\n                var typePredicate = this.metadata.predicate;\n                if (typePredicate === TemplateRef) {\n                    if (tNode.type === 0 /* Container */) {\n                        this.matchTNodeWithReadOption(tView, tNode, -1);\n                    }\n                }\n                else {\n                    this.matchTNodeWithReadOption(tView, tNode, locateDirectiveOrProvider(tNode, tView, typePredicate, false, false));\n                }\n            }\n        };\n        TQuery_.prototype.matchTNodeWithReadOption = function (tView, tNode, nodeMatchIdx) {\n            if (nodeMatchIdx !== null) {\n                var read = this.metadata.read;\n                if (read !== null) {\n                    if (read === ElementRef || read === ViewContainerRef ||\n                        read === TemplateRef && tNode.type === 0 /* Container */) {\n                        this.addMatch(tNode.index, -2);\n                    }\n                    else {\n                        var directiveOrProviderIdx = locateDirectiveOrProvider(tNode, tView, read, false, false);\n                        if (directiveOrProviderIdx !== null) {\n                            this.addMatch(tNode.index, directiveOrProviderIdx);\n                        }\n                    }\n                }\n                else {\n                    this.addMatch(tNode.index, nodeMatchIdx);\n                }\n            }\n        };\n        TQuery_.prototype.addMatch = function (tNodeIdx, matchIdx) {\n            if (this.matches === null) {\n                this.matches = [tNodeIdx, matchIdx];\n            }\n            else {\n                this.matches.push(tNodeIdx, matchIdx);\n            }\n        };\n        return TQuery_;\n    }());\n    /**\n     * Iterates over local names for a given node and returns directive index\n     * (or -1 if a local name points to an element).\n     *\n     * @param tNode static data of a node to check\n     * @param selector selector to match\n     * @returns directive index, -1 or null if a selector didn't match any of the local names\n     */\n    function getIdxOfMatchingSelector(tNode, selector) {\n        var localNames = tNode.localNames;\n        if (localNames !== null) {\n            for (var i = 0; i < localNames.length; i += 2) {\n                if (localNames[i] === selector) {\n                    return localNames[i + 1];\n                }\n            }\n        }\n        return null;\n    }\n    function createResultByTNodeType(tNode, currentView) {\n        if (tNode.type === 3 /* Element */ || tNode.type === 4 /* ElementContainer */) {\n            return createElementRef(ElementRef, tNode, currentView);\n        }\n        else if (tNode.type === 0 /* Container */) {\n            return createTemplateRef(TemplateRef, ElementRef, tNode, currentView);\n        }\n        return null;\n    }\n    function createResultForNode(lView, tNode, matchingIdx, read) {\n        if (matchingIdx === -1) {\n            // if read token and / or strategy is not specified, detect it using appropriate tNode type\n            return createResultByTNodeType(tNode, lView);\n        }\n        else if (matchingIdx === -2) {\n            // read a special token from a node injector\n            return createSpecialToken(lView, tNode, read);\n        }\n        else {\n            // read a token\n            return getNodeInjectable(lView, lView[TVIEW], matchingIdx, tNode);\n        }\n    }\n    function createSpecialToken(lView, tNode, read) {\n        if (read === ElementRef) {\n            return createElementRef(ElementRef, tNode, lView);\n        }\n        else if (read === TemplateRef) {\n            return createTemplateRef(TemplateRef, ElementRef, tNode, lView);\n        }\n        else if (read === ViewContainerRef) {\n            ngDevMode && assertNodeOfPossibleTypes(tNode, 3 /* Element */, 0 /* Container */, 4 /* ElementContainer */);\n            return createContainerRef(ViewContainerRef, ElementRef, tNode, lView);\n        }\n        else {\n            ngDevMode &&\n                throwError(\"Special token to read should be one of ElementRef, TemplateRef or ViewContainerRef but got \" + stringify(read) + \".\");\n        }\n    }\n    /**\n     * A helper function that creates query results for a given view. This function is meant to do the\n     * processing once and only once for a given view instance (a set of results for a given view\n     * doesn't change).\n     */\n    function materializeViewResults(lView, tQuery, queryIndex) {\n        var lQuery = lView[QUERIES].queries[queryIndex];\n        if (lQuery.matches === null) {\n            var tViewData = lView[TVIEW].data;\n            var tQueryMatches = tQuery.matches;\n            var result = [];\n            for (var i = 0; i < tQueryMatches.length; i += 2) {\n                var matchedNodeIdx = tQueryMatches[i];\n                if (matchedNodeIdx < 0) {\n                    // we at the <ng-template> marker which might have results in views created based on this\n                    // <ng-template> - those results will be in separate views though, so here we just leave\n                    // null as a placeholder\n                    result.push(null);\n                }\n                else {\n                    ngDevMode && assertDataInRange(tViewData, matchedNodeIdx);\n                    var tNode = tViewData[matchedNodeIdx];\n                    result.push(createResultForNode(lView, tNode, tQueryMatches[i + 1], tQuery.metadata.read));\n                }\n            }\n            lQuery.matches = result;\n        }\n        return lQuery.matches;\n    }\n    /**\n     * A helper function that collects (already materialized) query results from a tree of views,\n     * starting with a provided LView.\n     */\n    function collectQueryResults(lView, queryIndex, result) {\n        var tQuery = lView[TVIEW].queries.getByIndex(queryIndex);\n        var tQueryMatches = tQuery.matches;\n        if (tQueryMatches !== null) {\n            var lViewResults = materializeViewResults(lView, tQuery, queryIndex);\n            for (var i = 0; i < tQueryMatches.length; i += 2) {\n                var tNodeIdx = tQueryMatches[i];\n                if (tNodeIdx > 0) {\n                    var viewResult = lViewResults[i / 2];\n                    ngDevMode && assertDefined(viewResult, 'materialized query result should be defined');\n                    result.push(viewResult);\n                }\n                else {\n                    var childQueryIndex = tQueryMatches[i + 1];\n                    var declarationLContainer = lView[-tNodeIdx];\n                    ngDevMode && assertLContainer(declarationLContainer);\n                    // collect matches for views inserted in this container\n                    for (var i_1 = CONTAINER_HEADER_OFFSET; i_1 < declarationLContainer.length; i_1++) {\n                        var embeddedLView = declarationLContainer[i_1];\n                        if (embeddedLView[DECLARATION_LCONTAINER] === embeddedLView[PARENT]) {\n                            collectQueryResults(embeddedLView, childQueryIndex, result);\n                        }\n                    }\n                    // collect matches for views created from this declaration container and inserted into\n                    // different containers\n                    if (declarationLContainer[MOVED_VIEWS] !== null) {\n                        var embeddedLViews = declarationLContainer[MOVED_VIEWS];\n                        for (var i_2 = 0; i_2 < embeddedLViews.length; i_2++) {\n                            collectQueryResults(embeddedLViews[i_2], childQueryIndex, result);\n                        }\n                    }\n                }\n            }\n        }\n        return result;\n    }\n    /**\n     * Refreshes a query by combining matches from all active views and removing matches from deleted\n     * views.\n     *\n     * @returns `true` if a query got dirty during change detection or if this is a static query\n     * resolving in creation mode, `false` otherwise.\n     *\n     * @codeGenApi\n     */\n    function ɵɵqueryRefresh(queryList) {\n        var lView = getLView();\n        var queryIndex = getCurrentQueryIndex();\n        setCurrentQueryIndex(queryIndex + 1);\n        var tQuery = getTQuery(lView[TVIEW], queryIndex);\n        if (queryList.dirty && (isCreationMode(lView) === tQuery.metadata.isStatic)) {\n            if (tQuery.matches === null) {\n                queryList.reset([]);\n            }\n            else {\n                var result = tQuery.crossesNgTemplate ? collectQueryResults(lView, queryIndex, []) :\n                    materializeViewResults(lView, tQuery, queryIndex);\n                queryList.reset(result);\n                queryList.notifyOnChanges();\n            }\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Creates new QueryList for a static view query.\n     *\n     * @param predicate The type for which the query will search\n     * @param descend Whether or not to descend into children\n     * @param read What to save in the query\n     *\n     * @codeGenApi\n     */\n    function ɵɵstaticViewQuery(predicate, descend, read) {\n        viewQueryInternal(getLView(), predicate, descend, read, true);\n    }\n    /**\n     * Creates new QueryList, stores the reference in LView and returns QueryList.\n     *\n     * @param predicate The type for which the query will search\n     * @param descend Whether or not to descend into children\n     * @param read What to save in the query\n     *\n     * @codeGenApi\n     */\n    function ɵɵviewQuery(predicate, descend, read) {\n        viewQueryInternal(getLView(), predicate, descend, read, false);\n    }\n    function viewQueryInternal(lView, predicate, descend, read, isStatic) {\n        var tView = lView[TVIEW];\n        if (tView.firstCreatePass) {\n            createTQuery(tView, new TQueryMetadata_(predicate, descend, isStatic, read), -1);\n            if (isStatic) {\n                tView.staticViewQueries = true;\n            }\n        }\n        createLQuery(lView);\n    }\n    /**\n     * Registers a QueryList, associated with a content query, for later refresh (part of a view\n     * refresh).\n     *\n     * @param directiveIndex Current directive index\n     * @param predicate The type for which the query will search\n     * @param descend Whether or not to descend into children\n     * @param read What to save in the query\n     * @returns QueryList<T>\n     *\n     * @codeGenApi\n     */\n    function ɵɵcontentQuery(directiveIndex, predicate, descend, read) {\n        contentQueryInternal(getLView(), predicate, descend, read, false, getPreviousOrParentTNode(), directiveIndex);\n    }\n    /**\n     * Registers a QueryList, associated with a static content query, for later refresh\n     * (part of a view refresh).\n     *\n     * @param directiveIndex Current directive index\n     * @param predicate The type for which the query will search\n     * @param descend Whether or not to descend into children\n     * @param read What to save in the query\n     * @returns QueryList<T>\n     *\n     * @codeGenApi\n     */\n    function ɵɵstaticContentQuery(directiveIndex, predicate, descend, read) {\n        contentQueryInternal(getLView(), predicate, descend, read, true, getPreviousOrParentTNode(), directiveIndex);\n    }\n    function contentQueryInternal(lView, predicate, descend, read, isStatic, tNode, directiveIndex) {\n        var tView = lView[TVIEW];\n        if (tView.firstCreatePass) {\n            createTQuery(tView, new TQueryMetadata_(predicate, descend, isStatic, read), tNode.index);\n            saveContentQueryAndDirectiveIndex(tView, directiveIndex);\n            if (isStatic) {\n                tView.staticContentQueries = true;\n            }\n        }\n        createLQuery(lView);\n    }\n    /**\n     * Loads a QueryList corresponding to the current view or content query.\n     *\n     * @codeGenApi\n     */\n    function ɵɵloadQuery() {\n        return loadQueryInternal(getLView(), getCurrentQueryIndex());\n    }\n    function loadQueryInternal(lView, queryIndex) {\n        ngDevMode &&\n            assertDefined(lView[QUERIES], 'LQueries should be defined when trying to load a query');\n        ngDevMode && assertDataInRange(lView[QUERIES].queries, queryIndex);\n        return lView[QUERIES].queries[queryIndex].queryList;\n    }\n    function createLQuery(lView) {\n        var queryList = new QueryList();\n        storeCleanupWithContext(lView, queryList, queryList.destroy);\n        if (lView[QUERIES] === null)\n            lView[QUERIES] = new LQueries_();\n        lView[QUERIES].queries.push(new LQuery_(queryList));\n    }\n    function createTQuery(tView, metadata, nodeIndex) {\n        if (tView.queries === null)\n            tView.queries = new TQueries_();\n        tView.queries.track(new TQuery_(metadata, nodeIndex));\n    }\n    function saveContentQueryAndDirectiveIndex(tView, directiveIndex) {\n        var tViewContentQueries = tView.contentQueries || (tView.contentQueries = []);\n        var lastSavedDirectiveIndex = tView.contentQueries.length ? tViewContentQueries[tViewContentQueries.length - 1] : -1;\n        if (directiveIndex !== lastSavedDirectiveIndex) {\n            tViewContentQueries.push(tView.queries.length - 1, directiveIndex);\n        }\n    }\n    function getTQuery(tView, index) {\n        ngDevMode && assertDefined(tView.queries, 'TQueries must be defined to retrieve a TQuery');\n        return tView.queries.getByIndex(index);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Retrieves `TemplateRef` instance from `Injector` when a local reference is placed on the\n     * `<ng-template>` element.\n     *\n     * @codeGenApi\n     */\n    function ɵɵtemplateRefExtractor(tNode, currentView) {\n        return createTemplateRef(TemplateRef, ElementRef, tNode, currentView);\n    }\n    /**\n     * Returns the appropriate `ChangeDetectorRef` for a pipe.\n     *\n     * @codeGenApi\n     */\n    function ɵɵinjectPipeChangeDetectorRef(flags) {\n        if (flags === void 0) { flags = exports.InjectFlags.Default; }\n        var value = injectChangeDetectorRef(true);\n        if (value == null && !(flags & exports.InjectFlags.Optional)) {\n            throw new Error(\"No provider for ChangeDetectorRef!\");\n        }\n        else {\n            return value;\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A mapping of the @angular/core API surface used in generated expressions to the actual symbols.\n     *\n     * This should be kept up to date with the public exports of @angular/core.\n     */\n    var angularCoreEnv = (function () { return ({\n        'ɵɵattribute': ɵɵattribute,\n        'ɵɵattributeInterpolate1': ɵɵattributeInterpolate1,\n        'ɵɵattributeInterpolate2': ɵɵattributeInterpolate2,\n        'ɵɵattributeInterpolate3': ɵɵattributeInterpolate3,\n        'ɵɵattributeInterpolate4': ɵɵattributeInterpolate4,\n        'ɵɵattributeInterpolate5': ɵɵattributeInterpolate5,\n        'ɵɵattributeInterpolate6': ɵɵattributeInterpolate6,\n        'ɵɵattributeInterpolate7': ɵɵattributeInterpolate7,\n        'ɵɵattributeInterpolate8': ɵɵattributeInterpolate8,\n        'ɵɵattributeInterpolateV': ɵɵattributeInterpolateV,\n        'ɵɵdefineComponent': ɵɵdefineComponent,\n        'ɵɵdefineDirective': ɵɵdefineDirective,\n        'ɵɵdefineInjectable': ɵɵdefineInjectable,\n        'ɵɵdefineInjector': ɵɵdefineInjector,\n        'ɵɵdefineNgModule': ɵɵdefineNgModule,\n        'ɵɵdefinePipe': ɵɵdefinePipe,\n        'ɵɵdirectiveInject': ɵɵdirectiveInject,\n        'ɵɵgetFactoryOf': ɵɵgetFactoryOf,\n        'ɵɵgetInheritedFactory': ɵɵgetInheritedFactory,\n        'ɵɵinject': ɵɵinject,\n        'ɵɵinjectAttribute': ɵɵinjectAttribute,\n        'ɵɵinvalidFactory': ɵɵinvalidFactory,\n        'ɵɵinvalidFactoryDep': ɵɵinvalidFactoryDep,\n        'ɵɵinjectPipeChangeDetectorRef': ɵɵinjectPipeChangeDetectorRef,\n        'ɵɵtemplateRefExtractor': ɵɵtemplateRefExtractor,\n        'ɵɵNgOnChangesFeature': ɵɵNgOnChangesFeature,\n        'ɵɵProvidersFeature': ɵɵProvidersFeature,\n        'ɵɵCopyDefinitionFeature': ɵɵCopyDefinitionFeature,\n        'ɵɵInheritDefinitionFeature': ɵɵInheritDefinitionFeature,\n        'ɵɵcontainer': ɵɵcontainer,\n        'ɵɵnextContext': ɵɵnextContext,\n        'ɵɵcontainerRefreshStart': ɵɵcontainerRefreshStart,\n        'ɵɵcontainerRefreshEnd': ɵɵcontainerRefreshEnd,\n        'ɵɵnamespaceHTML': ɵɵnamespaceHTML,\n        'ɵɵnamespaceMathML': ɵɵnamespaceMathML,\n        'ɵɵnamespaceSVG': ɵɵnamespaceSVG,\n        'ɵɵenableBindings': ɵɵenableBindings,\n        'ɵɵdisableBindings': ɵɵdisableBindings,\n        'ɵɵallocHostVars': ɵɵallocHostVars,\n        'ɵɵelementStart': ɵɵelementStart,\n        'ɵɵelementEnd': ɵɵelementEnd,\n        'ɵɵelement': ɵɵelement,\n        'ɵɵelementContainerStart': ɵɵelementContainerStart,\n        'ɵɵelementContainerEnd': ɵɵelementContainerEnd,\n        'ɵɵelementContainer': ɵɵelementContainer,\n        'ɵɵpureFunction0': ɵɵpureFunction0,\n        'ɵɵpureFunction1': ɵɵpureFunction1,\n        'ɵɵpureFunction2': ɵɵpureFunction2,\n        'ɵɵpureFunction3': ɵɵpureFunction3,\n        'ɵɵpureFunction4': ɵɵpureFunction4,\n        'ɵɵpureFunction5': ɵɵpureFunction5,\n        'ɵɵpureFunction6': ɵɵpureFunction6,\n        'ɵɵpureFunction7': ɵɵpureFunction7,\n        'ɵɵpureFunction8': ɵɵpureFunction8,\n        'ɵɵpureFunctionV': ɵɵpureFunctionV,\n        'ɵɵgetCurrentView': ɵɵgetCurrentView,\n        'ɵɵrestoreView': ɵɵrestoreView,\n        'ɵɵlistener': ɵɵlistener,\n        'ɵɵprojection': ɵɵprojection,\n        'ɵɵupdateSyntheticHostBinding': ɵɵupdateSyntheticHostBinding,\n        'ɵɵcomponentHostSyntheticListener': ɵɵcomponentHostSyntheticListener,\n        'ɵɵpipeBind1': ɵɵpipeBind1,\n        'ɵɵpipeBind2': ɵɵpipeBind2,\n        'ɵɵpipeBind3': ɵɵpipeBind3,\n        'ɵɵpipeBind4': ɵɵpipeBind4,\n        'ɵɵpipeBindV': ɵɵpipeBindV,\n        'ɵɵprojectionDef': ɵɵprojectionDef,\n        'ɵɵhostProperty': ɵɵhostProperty,\n        'ɵɵproperty': ɵɵproperty,\n        'ɵɵpropertyInterpolate': ɵɵpropertyInterpolate,\n        'ɵɵpropertyInterpolate1': ɵɵpropertyInterpolate1,\n        'ɵɵpropertyInterpolate2': ɵɵpropertyInterpolate2,\n        'ɵɵpropertyInterpolate3': ɵɵpropertyInterpolate3,\n        'ɵɵpropertyInterpolate4': ɵɵpropertyInterpolate4,\n        'ɵɵpropertyInterpolate5': ɵɵpropertyInterpolate5,\n        'ɵɵpropertyInterpolate6': ɵɵpropertyInterpolate6,\n        'ɵɵpropertyInterpolate7': ɵɵpropertyInterpolate7,\n        'ɵɵpropertyInterpolate8': ɵɵpropertyInterpolate8,\n        'ɵɵpropertyInterpolateV': ɵɵpropertyInterpolateV,\n        'ɵɵpipe': ɵɵpipe,\n        'ɵɵqueryRefresh': ɵɵqueryRefresh,\n        'ɵɵviewQuery': ɵɵviewQuery,\n        'ɵɵstaticViewQuery': ɵɵstaticViewQuery,\n        'ɵɵstaticContentQuery': ɵɵstaticContentQuery,\n        'ɵɵloadQuery': ɵɵloadQuery,\n        'ɵɵcontentQuery': ɵɵcontentQuery,\n        'ɵɵreference': ɵɵreference,\n        'ɵɵelementHostAttrs': ɵɵelementHostAttrs,\n        'ɵɵclassMap': ɵɵclassMap,\n        'ɵɵclassMapInterpolate1': ɵɵclassMapInterpolate1,\n        'ɵɵclassMapInterpolate2': ɵɵclassMapInterpolate2,\n        'ɵɵclassMapInterpolate3': ɵɵclassMapInterpolate3,\n        'ɵɵclassMapInterpolate4': ɵɵclassMapInterpolate4,\n        'ɵɵclassMapInterpolate5': ɵɵclassMapInterpolate5,\n        'ɵɵclassMapInterpolate6': ɵɵclassMapInterpolate6,\n        'ɵɵclassMapInterpolate7': ɵɵclassMapInterpolate7,\n        'ɵɵclassMapInterpolate8': ɵɵclassMapInterpolate8,\n        'ɵɵclassMapInterpolateV': ɵɵclassMapInterpolateV,\n        'ɵɵstyleMap': ɵɵstyleMap,\n        'ɵɵstyleProp': ɵɵstyleProp,\n        'ɵɵstylePropInterpolate1': ɵɵstylePropInterpolate1,\n        'ɵɵstylePropInterpolate2': ɵɵstylePropInterpolate2,\n        'ɵɵstylePropInterpolate3': ɵɵstylePropInterpolate3,\n        'ɵɵstylePropInterpolate4': ɵɵstylePropInterpolate4,\n        'ɵɵstylePropInterpolate5': ɵɵstylePropInterpolate5,\n        'ɵɵstylePropInterpolate6': ɵɵstylePropInterpolate6,\n        'ɵɵstylePropInterpolate7': ɵɵstylePropInterpolate7,\n        'ɵɵstylePropInterpolate8': ɵɵstylePropInterpolate8,\n        'ɵɵstylePropInterpolateV': ɵɵstylePropInterpolateV,\n        'ɵɵstyleSanitizer': ɵɵstyleSanitizer,\n        'ɵɵclassProp': ɵɵclassProp,\n        'ɵɵselect': ɵɵselect,\n        'ɵɵadvance': ɵɵadvance,\n        'ɵɵtemplate': ɵɵtemplate,\n        'ɵɵtext': ɵɵtext,\n        'ɵɵtextInterpolate': ɵɵtextInterpolate,\n        'ɵɵtextInterpolate1': ɵɵtextInterpolate1,\n        'ɵɵtextInterpolate2': ɵɵtextInterpolate2,\n        'ɵɵtextInterpolate3': ɵɵtextInterpolate3,\n        'ɵɵtextInterpolate4': ɵɵtextInterpolate4,\n        'ɵɵtextInterpolate5': ɵɵtextInterpolate5,\n        'ɵɵtextInterpolate6': ɵɵtextInterpolate6,\n        'ɵɵtextInterpolate7': ɵɵtextInterpolate7,\n        'ɵɵtextInterpolate8': ɵɵtextInterpolate8,\n        'ɵɵtextInterpolateV': ɵɵtextInterpolateV,\n        'ɵɵembeddedViewStart': ɵɵembeddedViewStart,\n        'ɵɵembeddedViewEnd': ɵɵembeddedViewEnd,\n        'ɵɵi18n': ɵɵi18n,\n        'ɵɵi18nAttributes': ɵɵi18nAttributes,\n        'ɵɵi18nExp': ɵɵi18nExp,\n        'ɵɵi18nStart': ɵɵi18nStart,\n        'ɵɵi18nEnd': ɵɵi18nEnd,\n        'ɵɵi18nApply': ɵɵi18nApply,\n        'ɵɵi18nPostprocess': ɵɵi18nPostprocess,\n        'ɵɵresolveWindow': ɵɵresolveWindow,\n        'ɵɵresolveDocument': ɵɵresolveDocument,\n        'ɵɵresolveBody': ɵɵresolveBody,\n        'ɵɵsetComponentScope': ɵɵsetComponentScope,\n        'ɵɵsetNgModuleScope': ɵɵsetNgModuleScope,\n        'ɵɵsanitizeHtml': ɵɵsanitizeHtml,\n        'ɵɵsanitizeStyle': ɵɵsanitizeStyle,\n        'ɵɵdefaultStyleSanitizer': ɵɵdefaultStyleSanitizer,\n        'ɵɵsanitizeResourceUrl': ɵɵsanitizeResourceUrl,\n        'ɵɵsanitizeScript': ɵɵsanitizeScript,\n        'ɵɵsanitizeUrl': ɵɵsanitizeUrl,\n        'ɵɵsanitizeUrlOrResourceUrl': ɵɵsanitizeUrlOrResourceUrl,\n    }); })();\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var EMPTY_ARRAY$4 = [];\n    var moduleQueue = [];\n    /**\n     * Enqueues moduleDef to be checked later to see if scope can be set on its\n     * component declarations.\n     */\n    function enqueueModuleForDelayedScoping(moduleType, ngModule) {\n        moduleQueue.push({ moduleType: moduleType, ngModule: ngModule });\n    }\n    var flushingModuleQueue = false;\n    /**\n     * Loops over queued module definitions, if a given module definition has all of its\n     * declarations resolved, it dequeues that module definition and sets the scope on\n     * its declarations.\n     */\n    function flushModuleScopingQueueAsMuchAsPossible() {\n        if (!flushingModuleQueue) {\n            flushingModuleQueue = true;\n            try {\n                for (var i = moduleQueue.length - 1; i >= 0; i--) {\n                    var _a = moduleQueue[i], moduleType = _a.moduleType, ngModule = _a.ngModule;\n                    if (ngModule.declarations && ngModule.declarations.every(isResolvedDeclaration)) {\n                        // dequeue\n                        moduleQueue.splice(i, 1);\n                        setScopeOnDeclaredComponents(moduleType, ngModule);\n                    }\n                }\n            }\n            finally {\n                flushingModuleQueue = false;\n            }\n        }\n    }\n    /**\n     * Returns truthy if a declaration has resolved. If the declaration happens to be\n     * an array of declarations, it will recurse to check each declaration in that array\n     * (which may also be arrays).\n     */\n    function isResolvedDeclaration(declaration) {\n        if (Array.isArray(declaration)) {\n            return declaration.every(isResolvedDeclaration);\n        }\n        return !!resolveForwardRef(declaration);\n    }\n    /**\n     * Compiles a module in JIT mode.\n     *\n     * This function automatically gets called when a class has a `@NgModule` decorator.\n     */\n    function compileNgModule(moduleType, ngModule) {\n        if (ngModule === void 0) { ngModule = {}; }\n        compileNgModuleDefs(moduleType, ngModule);\n        // Because we don't know if all declarations have resolved yet at the moment the\n        // NgModule decorator is executing, we're enqueueing the setting of module scope\n        // on its declarations to be run at a later time when all declarations for the module,\n        // including forward refs, have resolved.\n        enqueueModuleForDelayedScoping(moduleType, ngModule);\n    }\n    /**\n     * Compiles and adds the `ɵmod` and `ɵinj` properties to the module class.\n     *\n     * It's possible to compile a module via this API which will allow duplicate declarations in its\n     * root.\n     */\n    function compileNgModuleDefs(moduleType, ngModule, allowDuplicateDeclarationsInRoot) {\n        if (allowDuplicateDeclarationsInRoot === void 0) { allowDuplicateDeclarationsInRoot = false; }\n        ngDevMode && assertDefined(moduleType, 'Required value moduleType');\n        ngDevMode && assertDefined(ngModule, 'Required value ngModule');\n        var declarations = flatten(ngModule.declarations || EMPTY_ARRAY$4);\n        var ngModuleDef = null;\n        Object.defineProperty(moduleType, NG_MOD_DEF, {\n            configurable: true,\n            get: function () {\n                if (ngModuleDef === null) {\n                    if (ngDevMode && ngModule.imports && ngModule.imports.indexOf(moduleType) > -1) {\n                        // We need to assert this immediately, because allowing it to continue will cause it to\n                        // go into an infinite loop before we've reached the point where we throw all the errors.\n                        throw new Error(\"'\" + stringifyForError(moduleType) + \"' module can't import itself\");\n                    }\n                    ngModuleDef = getCompilerFacade().compileNgModule(angularCoreEnv, \"ng:///\" + moduleType.name + \"/\\u0275mod.js\", {\n                        type: moduleType,\n                        bootstrap: flatten(ngModule.bootstrap || EMPTY_ARRAY$4).map(resolveForwardRef),\n                        declarations: declarations.map(resolveForwardRef),\n                        imports: flatten(ngModule.imports || EMPTY_ARRAY$4)\n                            .map(resolveForwardRef)\n                            .map(expandModuleWithProviders),\n                        exports: flatten(ngModule.exports || EMPTY_ARRAY$4)\n                            .map(resolveForwardRef)\n                            .map(expandModuleWithProviders),\n                        schemas: ngModule.schemas ? flatten(ngModule.schemas) : null,\n                        id: ngModule.id || null,\n                    });\n                    // Set `schemas` on ngModuleDef to an empty array in JIT mode to indicate that runtime\n                    // should verify that there are no unknown elements in a template. In AOT mode, that check\n                    // happens at compile time and `schemas` information is not present on Component and Module\n                    // defs after compilation (so the check doesn't happen the second time at runtime).\n                    if (!ngModuleDef.schemas) {\n                        ngModuleDef.schemas = [];\n                    }\n                }\n                return ngModuleDef;\n            }\n        });\n        var ngInjectorDef = null;\n        Object.defineProperty(moduleType, NG_INJ_DEF, {\n            get: function () {\n                if (ngInjectorDef === null) {\n                    ngDevMode && verifySemanticsOfNgModuleDef(moduleType, allowDuplicateDeclarationsInRoot);\n                    var meta = {\n                        name: moduleType.name,\n                        type: moduleType,\n                        deps: reflectDependencies(moduleType),\n                        providers: ngModule.providers || EMPTY_ARRAY$4,\n                        imports: [\n                            (ngModule.imports || EMPTY_ARRAY$4).map(resolveForwardRef),\n                            (ngModule.exports || EMPTY_ARRAY$4).map(resolveForwardRef),\n                        ],\n                    };\n                    ngInjectorDef = getCompilerFacade().compileInjector(angularCoreEnv, \"ng:///\" + moduleType.name + \"/\\u0275inj.js\", meta);\n                }\n                return ngInjectorDef;\n            },\n            // Make the property configurable in dev mode to allow overriding in tests\n            configurable: !!ngDevMode,\n        });\n    }\n    function verifySemanticsOfNgModuleDef(moduleType, allowDuplicateDeclarationsInRoot, importingModule) {\n        if (verifiedNgModule.get(moduleType))\n            return;\n        verifiedNgModule.set(moduleType, true);\n        moduleType = resolveForwardRef(moduleType);\n        var ngModuleDef;\n        if (importingModule) {\n            ngModuleDef = getNgModuleDef(moduleType);\n            if (!ngModuleDef) {\n                throw new Error(\"Unexpected value '\" + moduleType.name + \"' imported by the module '\" + importingModule.name + \"'. Please add an @NgModule annotation.\");\n            }\n        }\n        else {\n            ngModuleDef = getNgModuleDef(moduleType, true);\n        }\n        var errors = [];\n        var declarations = maybeUnwrapFn(ngModuleDef.declarations);\n        var imports = maybeUnwrapFn(ngModuleDef.imports);\n        flatten(imports).map(unwrapModuleWithProvidersImports).forEach(function (mod) {\n            verifySemanticsOfNgModuleImport(mod, moduleType);\n            verifySemanticsOfNgModuleDef(mod, false, moduleType);\n        });\n        var exports = maybeUnwrapFn(ngModuleDef.exports);\n        declarations.forEach(verifyDeclarationsHaveDefinitions);\n        declarations.forEach(verifyDirectivesHaveSelector);\n        var combinedDeclarations = __spread(declarations.map(resolveForwardRef), flatten(imports.map(computeCombinedExports)).map(resolveForwardRef));\n        exports.forEach(verifyExportsAreDeclaredOrReExported);\n        declarations.forEach(function (decl) { return verifyDeclarationIsUnique(decl, allowDuplicateDeclarationsInRoot); });\n        declarations.forEach(verifyComponentEntryComponentsIsPartOfNgModule);\n        var ngModule = getAnnotation(moduleType, 'NgModule');\n        if (ngModule) {\n            ngModule.imports &&\n                flatten(ngModule.imports).map(unwrapModuleWithProvidersImports).forEach(function (mod) {\n                    verifySemanticsOfNgModuleImport(mod, moduleType);\n                    verifySemanticsOfNgModuleDef(mod, false, moduleType);\n                });\n            ngModule.bootstrap && deepForEach(ngModule.bootstrap, verifyCorrectBootstrapType);\n            ngModule.bootstrap && deepForEach(ngModule.bootstrap, verifyComponentIsPartOfNgModule);\n            ngModule.entryComponents &&\n                deepForEach(ngModule.entryComponents, verifyComponentIsPartOfNgModule);\n        }\n        // Throw Error if any errors were detected.\n        if (errors.length) {\n            throw new Error(errors.join('\\n'));\n        }\n        ////////////////////////////////////////////////////////////////////////////////////////////////\n        function verifyDeclarationsHaveDefinitions(type) {\n            type = resolveForwardRef(type);\n            var def = getComponentDef(type) || getDirectiveDef(type) || getPipeDef(type);\n            if (!def) {\n                errors.push(\"Unexpected value '\" + stringifyForError(type) + \"' declared by the module '\" + stringifyForError(moduleType) + \"'. Please add a @Pipe/@Directive/@Component annotation.\");\n            }\n        }\n        function verifyDirectivesHaveSelector(type) {\n            type = resolveForwardRef(type);\n            var def = getDirectiveDef(type);\n            if (!getComponentDef(type) && def && def.selectors.length == 0) {\n                errors.push(\"Directive \" + stringifyForError(type) + \" has no selector, please add it!\");\n            }\n        }\n        function verifyExportsAreDeclaredOrReExported(type) {\n            type = resolveForwardRef(type);\n            var kind = getComponentDef(type) && 'component' || getDirectiveDef(type) && 'directive' ||\n                getPipeDef(type) && 'pipe';\n            if (kind) {\n                // only checked if we are declared as Component, Directive, or Pipe\n                // Modules don't need to be declared or imported.\n                if (combinedDeclarations.lastIndexOf(type) === -1) {\n                    // We are exporting something which we don't explicitly declare or import.\n                    errors.push(\"Can't export \" + kind + \" \" + stringifyForError(type) + \" from \" + stringifyForError(moduleType) + \" as it was neither declared nor imported!\");\n                }\n            }\n        }\n        function verifyDeclarationIsUnique(type, suppressErrors) {\n            type = resolveForwardRef(type);\n            var existingModule = ownerNgModule.get(type);\n            if (existingModule && existingModule !== moduleType) {\n                if (!suppressErrors) {\n                    var modules = [existingModule, moduleType].map(stringifyForError).sort();\n                    errors.push(\"Type \" + stringifyForError(type) + \" is part of the declarations of 2 modules: \" + modules[0] + \" and \" + modules[1] + \"! \" +\n                        (\"Please consider moving \" + stringifyForError(type) + \" to a higher module that imports \" + modules[0] + \" and \" + modules[1] + \". \") +\n                        (\"You can also create a new NgModule that exports and includes \" + stringifyForError(type) + \" then import that NgModule in \" + modules[0] + \" and \" + modules[1] + \".\"));\n                }\n            }\n            else {\n                // Mark type as having owner.\n                ownerNgModule.set(type, moduleType);\n            }\n        }\n        function verifyComponentIsPartOfNgModule(type) {\n            type = resolveForwardRef(type);\n            var existingModule = ownerNgModule.get(type);\n            if (!existingModule) {\n                errors.push(\"Component \" + stringifyForError(type) + \" is not part of any NgModule or the module has not been imported into your module.\");\n            }\n        }\n        function verifyCorrectBootstrapType(type) {\n            type = resolveForwardRef(type);\n            if (!getComponentDef(type)) {\n                errors.push(stringifyForError(type) + \" cannot be used as an entry component.\");\n            }\n        }\n        function verifyComponentEntryComponentsIsPartOfNgModule(type) {\n            type = resolveForwardRef(type);\n            if (getComponentDef(type)) {\n                // We know we are component\n                var component = getAnnotation(type, 'Component');\n                if (component && component.entryComponents) {\n                    deepForEach(component.entryComponents, verifyComponentIsPartOfNgModule);\n                }\n            }\n        }\n        function verifySemanticsOfNgModuleImport(type, importingModule) {\n            type = resolveForwardRef(type);\n            if (getComponentDef(type) || getDirectiveDef(type)) {\n                throw new Error(\"Unexpected directive '\" + type.name + \"' imported by the module '\" + importingModule.name + \"'. Please add an @NgModule annotation.\");\n            }\n            if (getPipeDef(type)) {\n                throw new Error(\"Unexpected pipe '\" + type.name + \"' imported by the module '\" + importingModule.name + \"'. Please add an @NgModule annotation.\");\n            }\n        }\n    }\n    function unwrapModuleWithProvidersImports(typeOrWithProviders) {\n        typeOrWithProviders = resolveForwardRef(typeOrWithProviders);\n        return typeOrWithProviders.ngModule || typeOrWithProviders;\n    }\n    function getAnnotation(type, name) {\n        var annotation = null;\n        collect(type.__annotations__);\n        collect(type.decorators);\n        return annotation;\n        function collect(annotations) {\n            if (annotations) {\n                annotations.forEach(readAnnotation);\n            }\n        }\n        function readAnnotation(decorator) {\n            if (!annotation) {\n                var proto = Object.getPrototypeOf(decorator);\n                if (proto.ngMetadataName == name) {\n                    annotation = decorator;\n                }\n                else if (decorator.type) {\n                    var proto_1 = Object.getPrototypeOf(decorator.type);\n                    if (proto_1.ngMetadataName == name) {\n                        annotation = decorator.args[0];\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Keep track of compiled components. This is needed because in tests we often want to compile the\n     * same component with more than one NgModule. This would cause an error unless we reset which\n     * NgModule the component belongs to. We keep the list of compiled components here so that the\n     * TestBed can reset it later.\n     */\n    var ownerNgModule = new Map();\n    var verifiedNgModule = new Map();\n    function resetCompiledComponents() {\n        ownerNgModule = new Map();\n        verifiedNgModule = new Map();\n        moduleQueue.length = 0;\n    }\n    /**\n     * Computes the combined declarations of explicit declarations, as well as declarations inherited by\n     * traversing the exports of imported modules.\n     * @param type\n     */\n    function computeCombinedExports(type) {\n        type = resolveForwardRef(type);\n        var ngModuleDef = getNgModuleDef(type, true);\n        return __spread(flatten(maybeUnwrapFn(ngModuleDef.exports).map(function (type) {\n            var ngModuleDef = getNgModuleDef(type);\n            if (ngModuleDef) {\n                verifySemanticsOfNgModuleDef(type, false);\n                return computeCombinedExports(type);\n            }\n            else {\n                return type;\n            }\n        })));\n    }\n    /**\n     * Some declared components may be compiled asynchronously, and thus may not have their\n     * ɵcmp set yet. If this is the case, then a reference to the module is written into\n     * the `ngSelectorScope` property of the declared type.\n     */\n    function setScopeOnDeclaredComponents(moduleType, ngModule) {\n        var declarations = flatten(ngModule.declarations || EMPTY_ARRAY$4);\n        var transitiveScopes = transitiveScopesFor(moduleType);\n        declarations.forEach(function (declaration) {\n            if (declaration.hasOwnProperty(NG_COMP_DEF)) {\n                // A `ɵcmp` field exists - go ahead and patch the component directly.\n                var component = declaration;\n                var componentDef = getComponentDef(component);\n                patchComponentDefWithScope(componentDef, transitiveScopes);\n            }\n            else if (!declaration.hasOwnProperty(NG_DIR_DEF) && !declaration.hasOwnProperty(NG_PIPE_DEF)) {\n                // Set `ngSelectorScope` for future reference when the component compilation finishes.\n                declaration.ngSelectorScope = moduleType;\n            }\n        });\n    }\n    /**\n     * Patch the definition of a component with directives and pipes from the compilation scope of\n     * a given module.\n     */\n    function patchComponentDefWithScope(componentDef, transitiveScopes) {\n        componentDef.directiveDefs = function () {\n            return Array.from(transitiveScopes.compilation.directives)\n                .map(function (dir) {\n                return dir.hasOwnProperty(NG_COMP_DEF) ? getComponentDef(dir) : getDirectiveDef(dir);\n            })\n                .filter(function (def) { return !!def; });\n        };\n        componentDef.pipeDefs = function () {\n            return Array.from(transitiveScopes.compilation.pipes).map(function (pipe) { return getPipeDef(pipe); });\n        };\n        componentDef.schemas = transitiveScopes.schemas;\n        // Since we avoid Components/Directives/Pipes recompiling in case there are no overrides, we\n        // may face a problem where previously compiled defs available to a given Component/Directive\n        // are cached in TView and may become stale (in case any of these defs gets recompiled). In\n        // order to avoid this problem, we force fresh TView to be created.\n        componentDef.tView = null;\n    }\n    /**\n     * Compute the pair of transitive scopes (compilation scope and exported scope) for a given module.\n     *\n     * By default this operation is memoized and the result is cached on the module's definition. You\n     * can avoid memoization and previously stored results (if available) by providing the second\n     * argument with the `true` value (forcing transitive scopes recalculation).\n     *\n     * This function can be called on modules with components that have not fully compiled yet, but the\n     * result should not be used until they have.\n     *\n     * @param moduleType module that transitive scope should be calculated for.\n     * @param forceRecalc flag that indicates whether previously calculated and memoized values should\n     * be ignored and transitive scope to be fully recalculated.\n     */\n    function transitiveScopesFor(moduleType, forceRecalc) {\n        if (forceRecalc === void 0) { forceRecalc = false; }\n        if (!isNgModule(moduleType)) {\n            throw new Error(moduleType.name + \" does not have a module def (\\u0275mod property)\");\n        }\n        var def = getNgModuleDef(moduleType);\n        if (!forceRecalc && def.transitiveCompileScopes !== null) {\n            return def.transitiveCompileScopes;\n        }\n        var scopes = {\n            schemas: def.schemas || null,\n            compilation: {\n                directives: new Set(),\n                pipes: new Set(),\n            },\n            exported: {\n                directives: new Set(),\n                pipes: new Set(),\n            },\n        };\n        maybeUnwrapFn(def.declarations).forEach(function (declared) {\n            var declaredWithDefs = declared;\n            if (getPipeDef(declaredWithDefs)) {\n                scopes.compilation.pipes.add(declared);\n            }\n            else {\n                // Either declared has a ɵcmp or ɵdir, or it's a component which hasn't\n                // had its template compiled yet. In either case, it gets added to the compilation's\n                // directives.\n                scopes.compilation.directives.add(declared);\n            }\n        });\n        maybeUnwrapFn(def.imports).forEach(function (imported) {\n            var importedType = imported;\n            if (!isNgModule(importedType)) {\n                throw new Error(\"Importing \" + importedType.name + \" which does not have a \\u0275mod property\");\n            }\n            // When this module imports another, the imported module's exported directives and pipes are\n            // added to the compilation scope of this module.\n            var importedScope = transitiveScopesFor(importedType, forceRecalc);\n            importedScope.exported.directives.forEach(function (entry) { return scopes.compilation.directives.add(entry); });\n            importedScope.exported.pipes.forEach(function (entry) { return scopes.compilation.pipes.add(entry); });\n        });\n        maybeUnwrapFn(def.exports).forEach(function (exported) {\n            var exportedType = exported;\n            // Either the type is a module, a pipe, or a component/directive (which may not have a\n            // ɵcmp as it might be compiled asynchronously).\n            if (isNgModule(exportedType)) {\n                // When this module exports another, the exported module's exported directives and pipes are\n                // added to both the compilation and exported scopes of this module.\n                var exportedScope = transitiveScopesFor(exportedType, forceRecalc);\n                exportedScope.exported.directives.forEach(function (entry) {\n                    scopes.compilation.directives.add(entry);\n                    scopes.exported.directives.add(entry);\n                });\n                exportedScope.exported.pipes.forEach(function (entry) {\n                    scopes.compilation.pipes.add(entry);\n                    scopes.exported.pipes.add(entry);\n                });\n            }\n            else if (getPipeDef(exportedType)) {\n                scopes.exported.pipes.add(exportedType);\n            }\n            else {\n                scopes.exported.directives.add(exportedType);\n            }\n        });\n        if (!forceRecalc) {\n            def.transitiveCompileScopes = scopes;\n        }\n        return scopes;\n    }\n    function expandModuleWithProviders(value) {\n        if (isModuleWithProviders(value)) {\n            return value.ngModule;\n        }\n        return value;\n    }\n    function isModuleWithProviders(value) {\n        return value.ngModule !== undefined;\n    }\n    function isNgModule(value) {\n        return !!getNgModuleDef(value);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Compile an Angular component according to its decorator metadata, and patch the resulting\n     * component def (ɵcmp) onto the component type.\n     *\n     * Compilation may be asynchronous (due to the need to resolve URLs for the component template or\n     * other resources, for example). In the event that compilation is not immediate, `compileComponent`\n     * will enqueue resource resolution into a global queue and will fail to return the `ɵcmp`\n     * until the global queue has been resolved with a call to `resolveComponentResources`.\n     */\n    function compileComponent(type, metadata) {\n        // Initialize ngDevMode. This must be the first statement in compileComponent.\n        // See the `initNgDevMode` docstring for more information.\n        (typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode();\n        var ngComponentDef = null;\n        // Metadata may have resources which need to be resolved.\n        maybeQueueResolutionOfComponentResources(type, metadata);\n        // Note that we're using the same function as `Directive`, because that's only subset of metadata\n        // that we need to create the ngFactoryDef. We're avoiding using the component metadata\n        // because we'd have to resolve the asynchronous templates.\n        addDirectiveFactoryDef(type, metadata);\n        Object.defineProperty(type, NG_COMP_DEF, {\n            get: function () {\n                if (ngComponentDef === null) {\n                    var compiler = getCompilerFacade();\n                    if (componentNeedsResolution(metadata)) {\n                        var error = [\"Component '\" + type.name + \"' is not resolved:\"];\n                        if (metadata.templateUrl) {\n                            error.push(\" - templateUrl: \" + metadata.templateUrl);\n                        }\n                        if (metadata.styleUrls && metadata.styleUrls.length) {\n                            error.push(\" - styleUrls: \" + JSON.stringify(metadata.styleUrls));\n                        }\n                        error.push(\"Did you run and wait for 'resolveComponentResources()'?\");\n                        throw new Error(error.join('\\n'));\n                    }\n                    var templateUrl = metadata.templateUrl || \"ng:///\" + type.name + \"/template.html\";\n                    var meta = __assign(__assign({}, directiveMetadata(type, metadata)), { typeSourceSpan: compiler.createParseSourceSpan('Component', type.name, templateUrl), template: metadata.template || '', preserveWhitespaces: metadata.preserveWhitespaces || false, styles: metadata.styles || EMPTY_ARRAY, animations: metadata.animations, directives: [], changeDetection: metadata.changeDetection, pipes: new Map(), encapsulation: metadata.encapsulation || exports.ViewEncapsulation.Emulated, interpolation: metadata.interpolation, viewProviders: metadata.viewProviders || null });\n                    if (meta.usesInheritance) {\n                        addDirectiveDefToUndecoratedParents(type);\n                    }\n                    ngComponentDef = compiler.compileComponent(angularCoreEnv, templateUrl, meta);\n                    // When NgModule decorator executed, we enqueued the module definition such that\n                    // it would only dequeue and add itself as module scope to all of its declarations,\n                    // but only if  if all of its declarations had resolved. This call runs the check\n                    // to see if any modules that are in the queue can be dequeued and add scope to\n                    // their declarations.\n                    flushModuleScopingQueueAsMuchAsPossible();\n                    // If component compilation is async, then the @NgModule annotation which declares the\n                    // component may execute and set an ngSelectorScope property on the component type. This\n                    // allows the component to patch itself with directiveDefs from the module after it\n                    // finishes compiling.\n                    if (hasSelectorScope(type)) {\n                        var scopes = transitiveScopesFor(type.ngSelectorScope);\n                        patchComponentDefWithScope(ngComponentDef, scopes);\n                    }\n                }\n                return ngComponentDef;\n            },\n            // Make the property configurable in dev mode to allow overriding in tests\n            configurable: !!ngDevMode,\n        });\n    }\n    function hasSelectorScope(component) {\n        return component.ngSelectorScope !== undefined;\n    }\n    /**\n     * Compile an Angular directive according to its decorator metadata, and patch the resulting\n     * directive def onto the component type.\n     *\n     * In the event that compilation is not immediate, `compileDirective` will return a `Promise` which\n     * will resolve when compilation completes and the directive becomes usable.\n     */\n    function compileDirective(type, directive) {\n        var ngDirectiveDef = null;\n        addDirectiveFactoryDef(type, directive || {});\n        Object.defineProperty(type, NG_DIR_DEF, {\n            get: function () {\n                if (ngDirectiveDef === null) {\n                    // `directive` can be null in the case of abstract directives as a base class\n                    // that use `@Directive()` with no selector. In that case, pass empty object to the\n                    // `directiveMetadata` function instead of null.\n                    var meta = getDirectiveMetadata(type, directive || {});\n                    ngDirectiveDef =\n                        getCompilerFacade().compileDirective(angularCoreEnv, meta.sourceMapUrl, meta.metadata);\n                }\n                return ngDirectiveDef;\n            },\n            // Make the property configurable in dev mode to allow overriding in tests\n            configurable: !!ngDevMode,\n        });\n    }\n    function getDirectiveMetadata(type, metadata) {\n        var name = type && type.name;\n        var sourceMapUrl = \"ng:///\" + name + \"/\\u0275dir.js\";\n        var compiler = getCompilerFacade();\n        var facade = directiveMetadata(type, metadata);\n        facade.typeSourceSpan = compiler.createParseSourceSpan('Directive', name, sourceMapUrl);\n        if (facade.usesInheritance) {\n            addDirectiveDefToUndecoratedParents(type);\n        }\n        return { metadata: facade, sourceMapUrl: sourceMapUrl };\n    }\n    function addDirectiveFactoryDef(type, metadata) {\n        var ngFactoryDef = null;\n        Object.defineProperty(type, NG_FACTORY_DEF, {\n            get: function () {\n                if (ngFactoryDef === null) {\n                    var meta = getDirectiveMetadata(type, metadata);\n                    var compiler = getCompilerFacade();\n                    ngFactoryDef = compiler.compileFactory(angularCoreEnv, \"ng:///\" + type.name + \"/\\u0275fac.js\", __assign(__assign({}, meta.metadata), { injectFn: 'directiveInject', target: compiler.R3FactoryTarget.Directive }));\n                }\n                return ngFactoryDef;\n            },\n            // Make the property configurable in dev mode to allow overriding in tests\n            configurable: !!ngDevMode,\n        });\n    }\n    function extendsDirectlyFromObject(type) {\n        return Object.getPrototypeOf(type.prototype) === Object.prototype;\n    }\n    /**\n     * Extract the `R3DirectiveMetadata` for a particular directive (either a `Directive` or a\n     * `Component`).\n     */\n    function directiveMetadata(type, metadata) {\n        // Reflect inputs and outputs.\n        var reflect = getReflect();\n        var propMetadata = reflect.ownPropMetadata(type);\n        return {\n            name: type.name,\n            type: type,\n            typeArgumentCount: 0,\n            selector: metadata.selector !== undefined ? metadata.selector : null,\n            deps: reflectDependencies(type),\n            host: metadata.host || EMPTY_OBJ,\n            propMetadata: propMetadata,\n            inputs: metadata.inputs || EMPTY_ARRAY,\n            outputs: metadata.outputs || EMPTY_ARRAY,\n            queries: extractQueriesMetadata(type, propMetadata, isContentQuery),\n            lifecycle: { usesOnChanges: reflect.hasLifecycleHook(type, 'ngOnChanges') },\n            typeSourceSpan: null,\n            usesInheritance: !extendsDirectlyFromObject(type),\n            exportAs: extractExportAs(metadata.exportAs),\n            providers: metadata.providers || null,\n            viewQueries: extractQueriesMetadata(type, propMetadata, isViewQuery)\n        };\n    }\n    /**\n     * Adds a directive definition to all parent classes of a type that don't have an Angular decorator.\n     */\n    function addDirectiveDefToUndecoratedParents(type) {\n        var objPrototype = Object.prototype;\n        var parent = Object.getPrototypeOf(type.prototype).constructor;\n        // Go up the prototype until we hit `Object`.\n        while (parent && parent !== objPrototype) {\n            // Since inheritance works if the class was annotated already, we only need to add\n            // the def if there are no annotations and the def hasn't been created already.\n            if (!getDirectiveDef(parent) && !getComponentDef(parent) &&\n                shouldAddAbstractDirective(parent)) {\n                compileDirective(parent, null);\n            }\n            parent = Object.getPrototypeOf(parent);\n        }\n    }\n    function convertToR3QueryPredicate(selector) {\n        return typeof selector === 'string' ? splitByComma(selector) : resolveForwardRef(selector);\n    }\n    function convertToR3QueryMetadata(propertyName, ann) {\n        return {\n            propertyName: propertyName,\n            predicate: convertToR3QueryPredicate(ann.selector),\n            descendants: ann.descendants,\n            first: ann.first,\n            read: ann.read ? ann.read : null,\n            static: !!ann.static\n        };\n    }\n    function extractQueriesMetadata(type, propMetadata, isQueryAnn) {\n        var queriesMeta = [];\n        var _loop_1 = function (field) {\n            if (propMetadata.hasOwnProperty(field)) {\n                var annotations_1 = propMetadata[field];\n                annotations_1.forEach(function (ann) {\n                    if (isQueryAnn(ann)) {\n                        if (!ann.selector) {\n                            throw new Error(\"Can't construct a query for the property \\\"\" + field + \"\\\" of \" +\n                                (\"\\\"\" + stringifyForError(type) + \"\\\" since the query selector wasn't defined.\"));\n                        }\n                        if (annotations_1.some(isInputAnnotation)) {\n                            throw new Error(\"Cannot combine @Input decorators with query decorators\");\n                        }\n                        queriesMeta.push(convertToR3QueryMetadata(field, ann));\n                    }\n                });\n            }\n        };\n        for (var field in propMetadata) {\n            _loop_1(field);\n        }\n        return queriesMeta;\n    }\n    function extractExportAs(exportAs) {\n        return exportAs === undefined ? null : splitByComma(exportAs);\n    }\n    function isContentQuery(value) {\n        var name = value.ngMetadataName;\n        return name === 'ContentChild' || name === 'ContentChildren';\n    }\n    function isViewQuery(value) {\n        var name = value.ngMetadataName;\n        return name === 'ViewChild' || name === 'ViewChildren';\n    }\n    function isInputAnnotation(value) {\n        return value.ngMetadataName === 'Input';\n    }\n    function splitByComma(value) {\n        return value.split(',').map(function (piece) { return piece.trim(); });\n    }\n    var LIFECYCLE_HOOKS = [\n        'ngOnChanges', 'ngOnInit', 'ngOnDestroy', 'ngDoCheck', 'ngAfterViewInit', 'ngAfterViewChecked',\n        'ngAfterContentInit', 'ngAfterContentChecked'\n    ];\n    function shouldAddAbstractDirective(type) {\n        var reflect = getReflect();\n        if (LIFECYCLE_HOOKS.some(function (hookName) { return reflect.hasLifecycleHook(type, hookName); })) {\n            return true;\n        }\n        var propMetadata = reflect.propMetadata(type);\n        for (var field in propMetadata) {\n            var annotations = propMetadata[field];\n            for (var i = 0; i < annotations.length; i++) {\n                var current = annotations[i];\n                var metadataName = current.ngMetadataName;\n                if (isInputAnnotation(current) || isContentQuery(current) || isViewQuery(current) ||\n                    metadataName === 'Output' || metadataName === 'HostBinding' ||\n                    metadataName === 'HostListener') {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function compilePipe(type, meta) {\n        var ngPipeDef = null;\n        var ngFactoryDef = null;\n        Object.defineProperty(type, NG_FACTORY_DEF, {\n            get: function () {\n                if (ngFactoryDef === null) {\n                    var metadata = getPipeMetadata(type, meta);\n                    var compiler = getCompilerFacade();\n                    ngFactoryDef = compiler.compileFactory(angularCoreEnv, \"ng:///\" + metadata.name + \"/\\u0275fac.js\", __assign(__assign({}, metadata), { injectFn: 'directiveInject', target: compiler.R3FactoryTarget.Pipe }));\n                }\n                return ngFactoryDef;\n            },\n            // Make the property configurable in dev mode to allow overriding in tests\n            configurable: !!ngDevMode,\n        });\n        Object.defineProperty(type, NG_PIPE_DEF, {\n            get: function () {\n                if (ngPipeDef === null) {\n                    var metadata = getPipeMetadata(type, meta);\n                    ngPipeDef = getCompilerFacade().compilePipe(angularCoreEnv, \"ng:///\" + metadata.name + \"/\\u0275pipe.js\", metadata);\n                }\n                return ngPipeDef;\n            },\n            // Make the property configurable in dev mode to allow overriding in tests\n            configurable: !!ngDevMode,\n        });\n    }\n    function getPipeMetadata(type, meta) {\n        return {\n            type: type,\n            typeArgumentCount: 0,\n            name: type.name,\n            deps: reflectDependencies(type),\n            pipeName: meta.name,\n            pure: meta.pure !== undefined ? meta.pure : true\n        };\n    }\n\n    /**\n     * Type of the Directive metadata.\n     *\n     * @publicApi\n     */\n    var Directive = makeDecorator('Directive', function (dir) {\n        if (dir === void 0) { dir = {}; }\n        return dir;\n    }, undefined, undefined, function (type, meta) { return SWITCH_COMPILE_DIRECTIVE(type, meta); });\n    /**\n     * Component decorator and metadata.\n     *\n     * @Annotation\n     * @publicApi\n     */\n    var Component = makeDecorator('Component', function (c) {\n        if (c === void 0) { c = {}; }\n        return (__assign({ changeDetection: exports.ChangeDetectionStrategy.Default }, c));\n    }, Directive, undefined, function (type, meta) { return SWITCH_COMPILE_COMPONENT(type, meta); });\n    /**\n     * @Annotation\n     * @publicApi\n     */\n    var Pipe = makeDecorator('Pipe', function (p) { return (__assign({ pure: true }, p)); }, undefined, undefined, function (type, meta) { return SWITCH_COMPILE_PIPE(type, meta); });\n    /**\n     * @Annotation\n     * @publicApi\n     */\n    var Input = makePropDecorator('Input', function (bindingPropertyName) { return ({ bindingPropertyName: bindingPropertyName }); });\n    /**\n     * @Annotation\n     * @publicApi\n     */\n    var Output = makePropDecorator('Output', function (bindingPropertyName) { return ({ bindingPropertyName: bindingPropertyName }); });\n    /**\n     * @Annotation\n     * @publicApi\n     */\n    var HostBinding = makePropDecorator('HostBinding', function (hostPropertyName) { return ({ hostPropertyName: hostPropertyName }); });\n    /**\n     * Decorator that binds a DOM event to a host listener and supplies configuration metadata.\n     * Angular invokes the supplied handler method when the host element emits the specified event,\n     * and updates the bound element with the result.\n     *\n     * If the handler method returns false, applies `preventDefault` on the bound element.\n     *\n     * @usageNotes\n     *\n     * The following example declares a directive\n     * that attaches a click listener to a button and counts clicks.\n     *\n     * ```ts\n     * @Directive({selector: 'button[counting]'})\n     * class CountClicks {\n     *   numberOfClicks = 0;\n     *\n     *   @HostListener('click', ['$event.target'])\n     *   onClick(btn) {\n     *     console.log('button', btn, 'number of clicks:', this.numberOfClicks++);\n     *  }\n     * }\n     *\n     * @Component({\n     *   selector: 'app',\n     *   template: '<button counting>Increment</button>',\n     * })\n     * class App {}\n     *\n     * ```\n     *\n     * The following example registers another DOM event handler that listens for key-press events.\n     * ``` ts\n     * import { HostListener, Component } from \"@angular/core\";\n     *\n     * @Component({\n     *   selector: 'app',\n     *   template: `<h1>Hello, you have pressed keys {{counter}} number of times!</h1> Press any key to\n     * increment the counter.\n     *   <button (click)=\"resetCounter()\">Reset Counter</button>`\n     * })\n     * class AppComponent {\n     *   counter = 0;\n     *   @HostListener('window:keydown', ['$event'])\n     *   handleKeyDown(event: KeyboardEvent) {\n     *     this.counter++;\n     *   }\n     *   resetCounter() {\n     *     this.counter = 0;\n     *   }\n     * }\n     * ```\n     *\n     * @Annotation\n     * @publicApi\n     */\n    var HostListener = makePropDecorator('HostListener', function (eventName, args) { return ({ eventName: eventName, args: args }); });\n    var SWITCH_COMPILE_COMPONENT__POST_R3__ = compileComponent;\n    var SWITCH_COMPILE_DIRECTIVE__POST_R3__ = compileDirective;\n    var SWITCH_COMPILE_PIPE__POST_R3__ = compilePipe;\n    var SWITCH_COMPILE_COMPONENT__PRE_R3__ = noop;\n    var SWITCH_COMPILE_DIRECTIVE__PRE_R3__ = noop;\n    var SWITCH_COMPILE_PIPE__PRE_R3__ = noop;\n    var SWITCH_COMPILE_COMPONENT = SWITCH_COMPILE_COMPONENT__POST_R3__;\n    var SWITCH_COMPILE_DIRECTIVE = SWITCH_COMPILE_DIRECTIVE__POST_R3__;\n    var SWITCH_COMPILE_PIPE = SWITCH_COMPILE_PIPE__POST_R3__;\n\n    /**\n     * @Annotation\n     * @publicApi\n     */\n    var NgModule = makeDecorator('NgModule', function (ngModule) { return ngModule; }, undefined, undefined, \n    /**\n     * Decorator that marks the following class as an NgModule, and supplies\n     * configuration metadata for it.\n     *\n     * * The `declarations` and `entryComponents` options configure the compiler\n     * with information about what belongs to the NgModule.\n     * * The `providers` options configures the NgModule's injector to provide\n     * dependencies the NgModule members.\n     * * The `imports` and `exports` options bring in members from other modules, and make\n     * this module's members available to others.\n     */\n    function (type, meta) { return SWITCH_COMPILE_NGMODULE(type, meta); });\n    function preR3NgModuleCompile(moduleType, metadata) {\n        var imports = (metadata && metadata.imports) || [];\n        if (metadata && metadata.exports) {\n            imports = __spread(imports, [metadata.exports]);\n        }\n        moduleType.ɵinj = ɵɵdefineInjector({\n            factory: convertInjectableProviderToFactory(moduleType, { useClass: moduleType }),\n            providers: metadata && metadata.providers,\n            imports: imports,\n        });\n    }\n    var SWITCH_COMPILE_NGMODULE__POST_R3__ = compileNgModule;\n    var SWITCH_COMPILE_NGMODULE__PRE_R3__ = preR3NgModuleCompile;\n    var SWITCH_COMPILE_NGMODULE = SWITCH_COMPILE_NGMODULE__POST_R3__;\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * The existence of this constant (in this particular file) informs the Angular compiler that the\n     * current program is actually @angular/core, which needs to be compiled specially.\n     */\n    var ITS_JUST_ANGULAR = true;\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * An injection token that allows you to provide one or more initialization functions.\n     * These function are injected at application startup and executed during\n     * app initialization. If any of these functions returns a Promise, initialization\n     * does not complete until the Promise is resolved.\n     *\n     * You can, for example, create a factory function that loads language data\n     * or an external configuration, and provide that function to the `APP_INITIALIZER` token.\n     * That way, the function is executed during the application bootstrap process,\n     * and the needed data is available on startup.\n     *\n     * @publicApi\n     */\n    var APP_INITIALIZER = new InjectionToken('Application Initializer');\n    /**\n     * A class that reflects the state of running {@link APP_INITIALIZER}s.\n     *\n     * @publicApi\n     */\n    var ApplicationInitStatus = /** @class */ (function () {\n        function ApplicationInitStatus(appInits) {\n            var _this = this;\n            this.appInits = appInits;\n            this.initialized = false;\n            this.done = false;\n            this.donePromise = new Promise(function (res, rej) {\n                _this.resolve = res;\n                _this.reject = rej;\n            });\n        }\n        /** @internal */\n        ApplicationInitStatus.prototype.runInitializers = function () {\n            var _this = this;\n            if (this.initialized) {\n                return;\n            }\n            var asyncInitPromises = [];\n            var complete = function () {\n                _this.done = true;\n                _this.resolve();\n            };\n            if (this.appInits) {\n                for (var i = 0; i < this.appInits.length; i++) {\n                    var initResult = this.appInits[i]();\n                    if (isPromise(initResult)) {\n                        asyncInitPromises.push(initResult);\n                    }\n                }\n            }\n            Promise.all(asyncInitPromises).then(function () { complete(); }).catch(function (e) { _this.reject(e); });\n            if (asyncInitPromises.length === 0) {\n                complete();\n            }\n            this.initialized = true;\n        };\n        ApplicationInitStatus.ɵfac = function ApplicationInitStatus_Factory(t) { return new (t || ApplicationInitStatus)(ɵɵinject(APP_INITIALIZER, 8)); };\n        ApplicationInitStatus.ɵprov = ɵɵdefineInjectable({ token: ApplicationInitStatus, factory: ApplicationInitStatus.ɵfac });\n        return ApplicationInitStatus;\n    }());\n    /*@__PURE__*/ (function () { setClassMetadata(ApplicationInitStatus, [{\n            type: Injectable\n        }], function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [APP_INITIALIZER]\n                }, {\n                    type: Optional\n                }] }]; }, null); })();\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A DI Token representing a unique string id assigned to the application by Angular and used\n     * primarily for prefixing application attributes and CSS styles when\n     * {@link ViewEncapsulation#Emulated ViewEncapsulation.Emulated} is being used.\n     *\n     * If you need to avoid randomly generated value to be used as an application id, you can provide\n     * a custom value via a DI provider <!-- TODO: provider --> configuring the root {@link Injector}\n     * using this token.\n     * @publicApi\n     */\n    var APP_ID = new InjectionToken('AppId');\n    function _appIdRandomProviderFactory() {\n        return \"\" + _randomChar() + _randomChar() + _randomChar();\n    }\n    /**\n     * Providers that will generate a random APP_ID_TOKEN.\n     * @publicApi\n     */\n    var APP_ID_RANDOM_PROVIDER = {\n        provide: APP_ID,\n        useFactory: _appIdRandomProviderFactory,\n        deps: [],\n    };\n    function _randomChar() {\n        return String.fromCharCode(97 + Math.floor(Math.random() * 25));\n    }\n    /**\n     * A function that will be executed when a platform is initialized.\n     * @publicApi\n     */\n    var PLATFORM_INITIALIZER = new InjectionToken('Platform Initializer');\n    /**\n     * A token that indicates an opaque platform id.\n     * @publicApi\n     */\n    var PLATFORM_ID = new InjectionToken('Platform ID');\n    /**\n     * All callbacks provided via this token will be called for every component that is bootstrapped.\n     * Signature of the callback:\n     *\n     * `(componentRef: ComponentRef) => void`.\n     *\n     * @publicApi\n     */\n    var APP_BOOTSTRAP_LISTENER = new InjectionToken('appBootstrapListener');\n    /**\n     * A token which indicates the root directory of the application\n     * @publicApi\n     */\n    var PACKAGE_ROOT_URL = new InjectionToken('Application Packages Root URL');\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var Console = /** @class */ (function () {\n        function Console() {\n        }\n        Console.prototype.log = function (message) {\n            // tslint:disable-next-line:no-console\n            console.log(message);\n        };\n        // Note: for reporting errors use `DOM.logError()` as it is platform specific\n        Console.prototype.warn = function (message) {\n            // tslint:disable-next-line:no-console\n            console.warn(message);\n        };\n        Console.ɵfac = function Console_Factory(t) { return new (t || Console)(); };\n        Console.ɵprov = ɵɵdefineInjectable({ token: Console, factory: Console.ɵfac });\n        return Console;\n    }());\n    /*@__PURE__*/ (function () { setClassMetadata(Console, [{\n            type: Injectable\n        }], null, null); })();\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Provide this token to set the locale of your application.\n     * It is used for i18n extraction, by i18n pipes (DatePipe, I18nPluralPipe, CurrencyPipe,\n     * DecimalPipe and PercentPipe) and by ICU expressions.\n     *\n     * See the [i18n guide](guide/i18n#setting-up-locale) for more information.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * import { LOCALE_ID } from '@angular/core';\n     * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n     * import { AppModule } from './app/app.module';\n     *\n     * platformBrowserDynamic().bootstrapModule(AppModule, {\n     *   providers: [{provide: LOCALE_ID, useValue: 'en-US' }]\n     * });\n     * ```\n     *\n     * @publicApi\n     */\n    var LOCALE_ID$1 = new InjectionToken('LocaleId');\n    /**\n     * Provide this token to set the default currency code your application uses for\n     * CurrencyPipe when there is no currency code passed into it. This is only used by\n     * CurrencyPipe and has no relation to locale currency. Defaults to USD if not configured.\n     *\n     * See the [i18n guide](guide/i18n#setting-up-locale) for more information.\n     *\n     * <div class=\"alert is-helpful\">\n     *\n     * **Deprecation notice:**\n     *\n     * The default currency code is currently always `USD` but this is deprecated from v9.\n     *\n     * **In v10 the default currency code will be taken from the current locale.**\n     *\n     * If you need the previous behavior then set it by creating a `DEFAULT_CURRENCY_CODE` provider in\n     * your application `NgModule`:\n     *\n     * ```ts\n     * {provide: DEFAULT_CURRENCY_CODE, useValue: 'USD'}\n     * ```\n     *\n     * </div>\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n     * import { AppModule } from './app/app.module';\n     *\n     * platformBrowserDynamic().bootstrapModule(AppModule, {\n     *   providers: [{provide: DEFAULT_CURRENCY_CODE, useValue: 'EUR' }]\n     * });\n     * ```\n     *\n     * @publicApi\n     */\n    var DEFAULT_CURRENCY_CODE = new InjectionToken('DefaultCurrencyCode');\n    /**\n     * Use this token at bootstrap to provide the content of your translation file (`xtb`,\n     * `xlf` or `xlf2`) when you want to translate your application in another language.\n     *\n     * See the [i18n guide](guide/i18n#merge) for more information.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * import { TRANSLATIONS } from '@angular/core';\n     * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n     * import { AppModule } from './app/app.module';\n     *\n     * // content of your translation file\n     * const translations = '....';\n     *\n     * platformBrowserDynamic().bootstrapModule(AppModule, {\n     *   providers: [{provide: TRANSLATIONS, useValue: translations }]\n     * });\n     * ```\n     *\n     * @publicApi\n     */\n    var TRANSLATIONS = new InjectionToken('Translations');\n    /**\n     * Provide this token at bootstrap to set the format of your {@link TRANSLATIONS}: `xtb`,\n     * `xlf` or `xlf2`.\n     *\n     * See the [i18n guide](guide/i18n#merge) for more information.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * import { TRANSLATIONS_FORMAT } from '@angular/core';\n     * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n     * import { AppModule } from './app/app.module';\n     *\n     * platformBrowserDynamic().bootstrapModule(AppModule, {\n     *   providers: [{provide: TRANSLATIONS_FORMAT, useValue: 'xlf' }]\n     * });\n     * ```\n     *\n     * @publicApi\n     */\n    var TRANSLATIONS_FORMAT = new InjectionToken('TranslationsFormat');\n    (function (MissingTranslationStrategy) {\n        MissingTranslationStrategy[MissingTranslationStrategy[\"Error\"] = 0] = \"Error\";\n        MissingTranslationStrategy[MissingTranslationStrategy[\"Warning\"] = 1] = \"Warning\";\n        MissingTranslationStrategy[MissingTranslationStrategy[\"Ignore\"] = 2] = \"Ignore\";\n    })(exports.MissingTranslationStrategy || (exports.MissingTranslationStrategy = {}));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var SWITCH_IVY_ENABLED__POST_R3__ = true;\n    var SWITCH_IVY_ENABLED__PRE_R3__ = false;\n    var ivyEnabled = SWITCH_IVY_ENABLED__POST_R3__;\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Combination of NgModuleFactory and ComponentFactorys.\n     *\n     * @publicApi\n     */\n    var ModuleWithComponentFactories = /** @class */ (function () {\n        function ModuleWithComponentFactories(ngModuleFactory, componentFactories) {\n            this.ngModuleFactory = ngModuleFactory;\n            this.componentFactories = componentFactories;\n        }\n        return ModuleWithComponentFactories;\n    }());\n    function _throwError() {\n        throw new Error(\"Runtime compiler is not loaded\");\n    }\n    var Compiler_compileModuleSync__PRE_R3__ = _throwError;\n    var Compiler_compileModuleSync__POST_R3__ = function (moduleType) {\n        return new NgModuleFactory$1(moduleType);\n    };\n    var Compiler_compileModuleSync = Compiler_compileModuleSync__POST_R3__;\n    var Compiler_compileModuleAsync__PRE_R3__ = _throwError;\n    var Compiler_compileModuleAsync__POST_R3__ = function (moduleType) {\n        return Promise.resolve(Compiler_compileModuleSync__POST_R3__(moduleType));\n    };\n    var Compiler_compileModuleAsync = Compiler_compileModuleAsync__POST_R3__;\n    var Compiler_compileModuleAndAllComponentsSync__PRE_R3__ = _throwError;\n    var Compiler_compileModuleAndAllComponentsSync__POST_R3__ = function (moduleType) {\n        var ngModuleFactory = Compiler_compileModuleSync__POST_R3__(moduleType);\n        var moduleDef = getNgModuleDef(moduleType);\n        var componentFactories = maybeUnwrapFn(moduleDef.declarations)\n            .reduce(function (factories, declaration) {\n            var componentDef = getComponentDef(declaration);\n            componentDef && factories.push(new ComponentFactory$1(componentDef));\n            return factories;\n        }, []);\n        return new ModuleWithComponentFactories(ngModuleFactory, componentFactories);\n    };\n    var Compiler_compileModuleAndAllComponentsSync = Compiler_compileModuleAndAllComponentsSync__POST_R3__;\n    var Compiler_compileModuleAndAllComponentsAsync__PRE_R3__ = _throwError;\n    var Compiler_compileModuleAndAllComponentsAsync__POST_R3__ = function (moduleType) {\n        return Promise.resolve(Compiler_compileModuleAndAllComponentsSync__POST_R3__(moduleType));\n    };\n    var Compiler_compileModuleAndAllComponentsAsync = Compiler_compileModuleAndAllComponentsAsync__POST_R3__;\n    /**\n     * Low-level service for running the angular compiler during runtime\n     * to create {@link ComponentFactory}s, which\n     * can later be used to create and render a Component instance.\n     *\n     * Each `@NgModule` provides an own `Compiler` to its injector,\n     * that will use the directives/pipes of the ng module for compilation\n     * of components.\n     *\n     * @publicApi\n     */\n    var Compiler = /** @class */ (function () {\n        function Compiler() {\n            /**\n             * Compiles the given NgModule and all of its components. All templates of the components listed\n             * in `entryComponents` have to be inlined.\n             */\n            this.compileModuleSync = Compiler_compileModuleSync;\n            /**\n             * Compiles the given NgModule and all of its components\n             */\n            this.compileModuleAsync = Compiler_compileModuleAsync;\n            /**\n             * Same as {@link #compileModuleSync} but also creates ComponentFactories for all components.\n             */\n            this.compileModuleAndAllComponentsSync = Compiler_compileModuleAndAllComponentsSync;\n            /**\n             * Same as {@link #compileModuleAsync} but also creates ComponentFactories for all components.\n             */\n            this.compileModuleAndAllComponentsAsync = Compiler_compileModuleAndAllComponentsAsync;\n        }\n        /**\n         * Clears all caches.\n         */\n        Compiler.prototype.clearCache = function () { };\n        /**\n         * Clears the cache for the given component/ngModule.\n         */\n        Compiler.prototype.clearCacheFor = function (type) { };\n        /**\n         * Returns the id for a given NgModule, if one is defined and known to the compiler.\n         */\n        Compiler.prototype.getModuleId = function (moduleType) { return undefined; };\n        Compiler.ɵfac = function Compiler_Factory(t) { return new (t || Compiler)(); };\n        Compiler.ɵprov = ɵɵdefineInjectable({ token: Compiler, factory: Compiler.ɵfac });\n        return Compiler;\n    }());\n    /*@__PURE__*/ (function () { setClassMetadata(Compiler, [{\n            type: Injectable\n        }], null, null); })();\n    /**\n     * Token to provide CompilerOptions in the platform injector.\n     *\n     * @publicApi\n     */\n    var COMPILER_OPTIONS = new InjectionToken('compilerOptions');\n    /**\n     * A factory for creating a Compiler\n     *\n     * @publicApi\n     */\n    var CompilerFactory = /** @class */ (function () {\n        function CompilerFactory() {\n        }\n        return CompilerFactory;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var promise = (function () { return Promise.resolve(0); })();\n    function scheduleMicroTask(fn) {\n        if (typeof Zone === 'undefined') {\n            // use promise to schedule microTask instead of use Zone\n            promise.then(function () { fn && fn.apply(null, null); });\n        }\n        else {\n            Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function getNativeRequestAnimationFrame() {\n        var nativeRequestAnimationFrame = _global['requestAnimationFrame'];\n        var nativeCancelAnimationFrame = _global['cancelAnimationFrame'];\n        if (typeof Zone !== 'undefined' && nativeRequestAnimationFrame && nativeCancelAnimationFrame) {\n            // use unpatched version of requestAnimationFrame(native delegate) if possible\n            // to avoid another Change detection\n            var unpatchedRequestAnimationFrame = nativeRequestAnimationFrame[Zone.__symbol__('OriginalDelegate')];\n            if (unpatchedRequestAnimationFrame) {\n                nativeRequestAnimationFrame = unpatchedRequestAnimationFrame;\n            }\n            var unpatchedCancelAnimationFrame = nativeCancelAnimationFrame[Zone.__symbol__('OriginalDelegate')];\n            if (unpatchedCancelAnimationFrame) {\n                nativeCancelAnimationFrame = unpatchedCancelAnimationFrame;\n            }\n        }\n        return { nativeRequestAnimationFrame: nativeRequestAnimationFrame, nativeCancelAnimationFrame: nativeCancelAnimationFrame };\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * An injectable service for executing work inside or outside of the Angular zone.\n     *\n     * The most common use of this service is to optimize performance when starting a work consisting of\n     * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\n     * Angular. Such tasks can be kicked off via {@link #runOutsideAngular} and if needed, these tasks\n     * can reenter the Angular zone via {@link #run}.\n     *\n     * <!-- TODO: add/fix links to:\n     *   - docs explaining zones and the use of zones in Angular and change-detection\n     *   - link to runOutsideAngular/run (throughout this file!)\n     *   -->\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```\n     * import {Component, NgZone} from '@angular/core';\n     * import {NgIf} from '@angular/common';\n     *\n     * @Component({\n     *   selector: 'ng-zone-demo',\n     *   template: `\n     *     <h2>Demo: NgZone</h2>\n     *\n     *     <p>Progress: {{progress}}%</p>\n     *     <p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!</p>\n     *\n     *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\n     *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\n     *   `,\n     * })\n     * export class NgZoneDemo {\n     *   progress: number = 0;\n     *   label: string;\n     *\n     *   constructor(private _ngZone: NgZone) {}\n     *\n     *   // Loop inside the Angular zone\n     *   // so the UI DOES refresh after each setTimeout cycle\n     *   processWithinAngularZone() {\n     *     this.label = 'inside';\n     *     this.progress = 0;\n     *     this._increaseProgress(() => console.log('Inside Done!'));\n     *   }\n     *\n     *   // Loop outside of the Angular zone\n     *   // so the UI DOES NOT refresh after each setTimeout cycle\n     *   processOutsideOfAngularZone() {\n     *     this.label = 'outside';\n     *     this.progress = 0;\n     *     this._ngZone.runOutsideAngular(() => {\n     *       this._increaseProgress(() => {\n     *         // reenter the Angular zone and display done\n     *         this._ngZone.run(() => { console.log('Outside Done!'); });\n     *       });\n     *     });\n     *   }\n     *\n     *   _increaseProgress(doneCallback: () => void) {\n     *     this.progress += 1;\n     *     console.log(`Current progress: ${this.progress}%`);\n     *\n     *     if (this.progress < 100) {\n     *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);\n     *     } else {\n     *       doneCallback();\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * @publicApi\n     */\n    var NgZone = /** @class */ (function () {\n        function NgZone(_a) {\n            var _b = _a.enableLongStackTrace, enableLongStackTrace = _b === void 0 ? false : _b, _c = _a.shouldCoalesceEventChangeDetection, shouldCoalesceEventChangeDetection = _c === void 0 ? false : _c;\n            this.hasPendingMacrotasks = false;\n            this.hasPendingMicrotasks = false;\n            /**\n             * Whether there are no outstanding microtasks or macrotasks.\n             */\n            this.isStable = true;\n            /**\n             * Notifies when code enters Angular Zone. This gets fired first on VM Turn.\n             */\n            this.onUnstable = new EventEmitter(false);\n            /**\n             * Notifies when there is no more microtasks enqueued in the current VM Turn.\n             * This is a hint for Angular to do change detection, which may enqueue more microtasks.\n             * For this reason this event can fire multiple times per VM Turn.\n             */\n            this.onMicrotaskEmpty = new EventEmitter(false);\n            /**\n             * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which\n             * implies we are about to relinquish VM turn.\n             * This event gets called just once.\n             */\n            this.onStable = new EventEmitter(false);\n            /**\n             * Notifies that an error has been delivered.\n             */\n            this.onError = new EventEmitter(false);\n            if (typeof Zone == 'undefined') {\n                throw new Error(\"In this configuration Angular requires Zone.js\");\n            }\n            Zone.assertZonePatched();\n            var self = this;\n            self._nesting = 0;\n            self._outer = self._inner = Zone.current;\n            if (Zone['wtfZoneSpec']) {\n                self._inner = self._inner.fork(Zone['wtfZoneSpec']);\n            }\n            if (Zone['TaskTrackingZoneSpec']) {\n                self._inner = self._inner.fork(new Zone['TaskTrackingZoneSpec']);\n            }\n            if (enableLongStackTrace && Zone['longStackTraceZoneSpec']) {\n                self._inner = self._inner.fork(Zone['longStackTraceZoneSpec']);\n            }\n            self.shouldCoalesceEventChangeDetection = shouldCoalesceEventChangeDetection;\n            self.lastRequestAnimationFrameId = -1;\n            self.nativeRequestAnimationFrame = getNativeRequestAnimationFrame().nativeRequestAnimationFrame;\n            forkInnerZoneWithAngularBehavior(self);\n        }\n        NgZone.isInAngularZone = function () { return Zone.current.get('isAngularZone') === true; };\n        NgZone.assertInAngularZone = function () {\n            if (!NgZone.isInAngularZone()) {\n                throw new Error('Expected to be in Angular Zone, but it is not!');\n            }\n        };\n        NgZone.assertNotInAngularZone = function () {\n            if (NgZone.isInAngularZone()) {\n                throw new Error('Expected to not be in Angular Zone, but it is!');\n            }\n        };\n        /**\n         * Executes the `fn` function synchronously within the Angular zone and returns value returned by\n         * the function.\n         *\n         * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n         * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\n         *\n         * Any future tasks or microtasks scheduled from within this function will continue executing from\n         * within the Angular zone.\n         *\n         * If a synchronous error happens it will be rethrown and not reported via `onError`.\n         */\n        NgZone.prototype.run = function (fn, applyThis, applyArgs) {\n            return this._inner.run(fn, applyThis, applyArgs);\n        };\n        /**\n         * Executes the `fn` function synchronously within the Angular zone as a task and returns value\n         * returned by the function.\n         *\n         * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n         * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\n         *\n         * Any future tasks or microtasks scheduled from within this function will continue executing from\n         * within the Angular zone.\n         *\n         * If a synchronous error happens it will be rethrown and not reported via `onError`.\n         */\n        NgZone.prototype.runTask = function (fn, applyThis, applyArgs, name) {\n            var zone = this._inner;\n            var task = zone.scheduleEventTask('NgZoneEvent: ' + name, fn, EMPTY_PAYLOAD, noop$1, noop$1);\n            try {\n                return zone.runTask(task, applyThis, applyArgs);\n            }\n            finally {\n                zone.cancelTask(task);\n            }\n        };\n        /**\n         * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\n         * rethrown.\n         */\n        NgZone.prototype.runGuarded = function (fn, applyThis, applyArgs) {\n            return this._inner.runGuarded(fn, applyThis, applyArgs);\n        };\n        /**\n         * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\n         * the function.\n         *\n         * Running functions via {@link #runOutsideAngular} allows you to escape Angular's zone and do\n         * work that\n         * doesn't trigger Angular change-detection or is subject to Angular's error handling.\n         *\n         * Any future tasks or microtasks scheduled from within this function will continue executing from\n         * outside of the Angular zone.\n         *\n         * Use {@link #run} to reenter the Angular zone and do work that updates the application model.\n         */\n        NgZone.prototype.runOutsideAngular = function (fn) {\n            return this._outer.run(fn);\n        };\n        return NgZone;\n    }());\n    function noop$1() { }\n    var EMPTY_PAYLOAD = {};\n    function checkStable(zone) {\n        if (zone._nesting == 0 && !zone.hasPendingMicrotasks && !zone.isStable) {\n            try {\n                zone._nesting++;\n                zone.onMicrotaskEmpty.emit(null);\n            }\n            finally {\n                zone._nesting--;\n                if (!zone.hasPendingMicrotasks) {\n                    try {\n                        zone.runOutsideAngular(function () { return zone.onStable.emit(null); });\n                    }\n                    finally {\n                        zone.isStable = true;\n                    }\n                }\n            }\n        }\n    }\n    function delayChangeDetectionForEvents(zone) {\n        if (zone.lastRequestAnimationFrameId !== -1) {\n            return;\n        }\n        zone.lastRequestAnimationFrameId = zone.nativeRequestAnimationFrame.call(_global, function () {\n            zone.lastRequestAnimationFrameId = -1;\n            updateMicroTaskStatus(zone);\n            checkStable(zone);\n        });\n        updateMicroTaskStatus(zone);\n    }\n    function forkInnerZoneWithAngularBehavior(zone) {\n        var delayChangeDetectionForEventsDelegate = function () { delayChangeDetectionForEvents(zone); };\n        var maybeDelayChangeDetection = !!zone.shouldCoalesceEventChangeDetection &&\n            zone.nativeRequestAnimationFrame && delayChangeDetectionForEventsDelegate;\n        zone._inner = zone._inner.fork({\n            name: 'angular',\n            properties: { 'isAngularZone': true, 'maybeDelayChangeDetection': maybeDelayChangeDetection },\n            onInvokeTask: function (delegate, current, target, task, applyThis, applyArgs) {\n                try {\n                    onEnter(zone);\n                    return delegate.invokeTask(target, task, applyThis, applyArgs);\n                }\n                finally {\n                    if (maybeDelayChangeDetection && task.type === 'eventTask') {\n                        maybeDelayChangeDetection();\n                    }\n                    onLeave(zone);\n                }\n            },\n            onInvoke: function (delegate, current, target, callback, applyThis, applyArgs, source) {\n                try {\n                    onEnter(zone);\n                    return delegate.invoke(target, callback, applyThis, applyArgs, source);\n                }\n                finally {\n                    onLeave(zone);\n                }\n            },\n            onHasTask: function (delegate, current, target, hasTaskState) {\n                delegate.hasTask(target, hasTaskState);\n                if (current === target) {\n                    // We are only interested in hasTask events which originate from our zone\n                    // (A child hasTask event is not interesting to us)\n                    if (hasTaskState.change == 'microTask') {\n                        zone._hasPendingMicrotasks = hasTaskState.microTask;\n                        updateMicroTaskStatus(zone);\n                        checkStable(zone);\n                    }\n                    else if (hasTaskState.change == 'macroTask') {\n                        zone.hasPendingMacrotasks = hasTaskState.macroTask;\n                    }\n                }\n            },\n            onHandleError: function (delegate, current, target, error) {\n                delegate.handleError(target, error);\n                zone.runOutsideAngular(function () { return zone.onError.emit(error); });\n                return false;\n            }\n        });\n    }\n    function updateMicroTaskStatus(zone) {\n        if (zone._hasPendingMicrotasks ||\n            (zone.shouldCoalesceEventChangeDetection && zone.lastRequestAnimationFrameId !== -1)) {\n            zone.hasPendingMicrotasks = true;\n        }\n        else {\n            zone.hasPendingMicrotasks = false;\n        }\n    }\n    function onEnter(zone) {\n        zone._nesting++;\n        if (zone.isStable) {\n            zone.isStable = false;\n            zone.onUnstable.emit(null);\n        }\n    }\n    function onLeave(zone) {\n        zone._nesting--;\n        checkStable(zone);\n    }\n    /**\n     * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls\n     * to framework to perform rendering.\n     */\n    var NoopNgZone = /** @class */ (function () {\n        function NoopNgZone() {\n            this.hasPendingMicrotasks = false;\n            this.hasPendingMacrotasks = false;\n            this.isStable = true;\n            this.onUnstable = new EventEmitter();\n            this.onMicrotaskEmpty = new EventEmitter();\n            this.onStable = new EventEmitter();\n            this.onError = new EventEmitter();\n        }\n        NoopNgZone.prototype.run = function (fn, applyThis, applyArgs) {\n            return fn.apply(applyThis, applyArgs);\n        };\n        NoopNgZone.prototype.runGuarded = function (fn, applyThis, applyArgs) {\n            return fn.apply(applyThis, applyArgs);\n        };\n        NoopNgZone.prototype.runOutsideAngular = function (fn) { return fn(); };\n        NoopNgZone.prototype.runTask = function (fn, applyThis, applyArgs, name) {\n            return fn.apply(applyThis, applyArgs);\n        };\n        return NoopNgZone;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * The Testability service provides testing hooks that can be accessed from\n     * the browser and by services such as Protractor. Each bootstrapped Angular\n     * application on the page will have an instance of Testability.\n     * @publicApi\n     */\n    var Testability = /** @class */ (function () {\n        function Testability(_ngZone) {\n            var _this = this;\n            this._ngZone = _ngZone;\n            this._pendingCount = 0;\n            this._isZoneStable = true;\n            /**\n             * Whether any work was done since the last 'whenStable' callback. This is\n             * useful to detect if this could have potentially destabilized another\n             * component while it is stabilizing.\n             * @internal\n             */\n            this._didWork = false;\n            this._callbacks = [];\n            this.taskTrackingZone = null;\n            this._watchAngularEvents();\n            _ngZone.run(function () {\n                _this.taskTrackingZone =\n                    typeof Zone == 'undefined' ? null : Zone.current.get('TaskTrackingZone');\n            });\n        }\n        Testability.prototype._watchAngularEvents = function () {\n            var _this = this;\n            this._ngZone.onUnstable.subscribe({\n                next: function () {\n                    _this._didWork = true;\n                    _this._isZoneStable = false;\n                }\n            });\n            this._ngZone.runOutsideAngular(function () {\n                _this._ngZone.onStable.subscribe({\n                    next: function () {\n                        NgZone.assertNotInAngularZone();\n                        scheduleMicroTask(function () {\n                            _this._isZoneStable = true;\n                            _this._runCallbacksIfReady();\n                        });\n                    }\n                });\n            });\n        };\n        /**\n         * Increases the number of pending request\n         * @deprecated pending requests are now tracked with zones.\n         */\n        Testability.prototype.increasePendingRequestCount = function () {\n            this._pendingCount += 1;\n            this._didWork = true;\n            return this._pendingCount;\n        };\n        /**\n         * Decreases the number of pending request\n         * @deprecated pending requests are now tracked with zones\n         */\n        Testability.prototype.decreasePendingRequestCount = function () {\n            this._pendingCount -= 1;\n            if (this._pendingCount < 0) {\n                throw new Error('pending async requests below zero');\n            }\n            this._runCallbacksIfReady();\n            return this._pendingCount;\n        };\n        /**\n         * Whether an associated application is stable\n         */\n        Testability.prototype.isStable = function () {\n            return this._isZoneStable && this._pendingCount === 0 && !this._ngZone.hasPendingMacrotasks;\n        };\n        Testability.prototype._runCallbacksIfReady = function () {\n            var _this = this;\n            if (this.isStable()) {\n                // Schedules the call backs in a new frame so that it is always async.\n                scheduleMicroTask(function () {\n                    while (_this._callbacks.length !== 0) {\n                        var cb = _this._callbacks.pop();\n                        clearTimeout(cb.timeoutId);\n                        cb.doneCb(_this._didWork);\n                    }\n                    _this._didWork = false;\n                });\n            }\n            else {\n                // Still not stable, send updates.\n                var pending_1 = this.getPendingTasks();\n                this._callbacks = this._callbacks.filter(function (cb) {\n                    if (cb.updateCb && cb.updateCb(pending_1)) {\n                        clearTimeout(cb.timeoutId);\n                        return false;\n                    }\n                    return true;\n                });\n                this._didWork = true;\n            }\n        };\n        Testability.prototype.getPendingTasks = function () {\n            if (!this.taskTrackingZone) {\n                return [];\n            }\n            // Copy the tasks data so that we don't leak tasks.\n            return this.taskTrackingZone.macroTasks.map(function (t) {\n                return {\n                    source: t.source,\n                    // From TaskTrackingZone:\n                    // https://github.com/angular/zone.js/blob/master/lib/zone-spec/task-tracking.ts#L40\n                    creationLocation: t.creationLocation,\n                    data: t.data\n                };\n            });\n        };\n        Testability.prototype.addCallback = function (cb, timeout, updateCb) {\n            var _this = this;\n            var timeoutId = -1;\n            if (timeout && timeout > 0) {\n                timeoutId = setTimeout(function () {\n                    _this._callbacks = _this._callbacks.filter(function (cb) { return cb.timeoutId !== timeoutId; });\n                    cb(_this._didWork, _this.getPendingTasks());\n                }, timeout);\n            }\n            this._callbacks.push({ doneCb: cb, timeoutId: timeoutId, updateCb: updateCb });\n        };\n        /**\n         * Wait for the application to be stable with a timeout. If the timeout is reached before that\n         * happens, the callback receives a list of the macro tasks that were pending, otherwise null.\n         *\n         * @param doneCb The callback to invoke when Angular is stable or the timeout expires\n         *    whichever comes first.\n         * @param timeout Optional. The maximum time to wait for Angular to become stable. If not\n         *    specified, whenStable() will wait forever.\n         * @param updateCb Optional. If specified, this callback will be invoked whenever the set of\n         *    pending macrotasks changes. If this callback returns true doneCb will not be invoked\n         *    and no further updates will be issued.\n         */\n        Testability.prototype.whenStable = function (doneCb, timeout, updateCb) {\n            if (updateCb && !this.taskTrackingZone) {\n                throw new Error('Task tracking zone is required when passing an update callback to ' +\n                    'whenStable(). Is \"zone.js/dist/task-tracking.js\" loaded?');\n            }\n            // These arguments are 'Function' above to keep the public API simple.\n            this.addCallback(doneCb, timeout, updateCb);\n            this._runCallbacksIfReady();\n        };\n        /**\n         * Get the number of pending requests\n         * @deprecated pending requests are now tracked with zones\n         */\n        Testability.prototype.getPendingRequestCount = function () { return this._pendingCount; };\n        /**\n         * Find providers by name\n         * @param using The root element to search from\n         * @param provider The name of binding variable\n         * @param exactMatch Whether using exactMatch\n         */\n        Testability.prototype.findProviders = function (using, provider, exactMatch) {\n            // TODO(juliemr): implement.\n            return [];\n        };\n        Testability.ɵfac = function Testability_Factory(t) { return new (t || Testability)(ɵɵinject(NgZone)); };\n        Testability.ɵprov = ɵɵdefineInjectable({ token: Testability, factory: Testability.ɵfac });\n        return Testability;\n    }());\n    /*@__PURE__*/ (function () { setClassMetadata(Testability, [{\n            type: Injectable\n        }], function () { return [{ type: NgZone }]; }, null); })();\n    /**\n     * A global registry of {@link Testability} instances for specific elements.\n     * @publicApi\n     */\n    var TestabilityRegistry = /** @class */ (function () {\n        function TestabilityRegistry() {\n            /** @internal */\n            this._applications = new Map();\n            _testabilityGetter.addToWindow(this);\n        }\n        /**\n         * Registers an application with a testability hook so that it can be tracked\n         * @param token token of application, root element\n         * @param testability Testability hook\n         */\n        TestabilityRegistry.prototype.registerApplication = function (token, testability) {\n            this._applications.set(token, testability);\n        };\n        /**\n         * Unregisters an application.\n         * @param token token of application, root element\n         */\n        TestabilityRegistry.prototype.unregisterApplication = function (token) { this._applications.delete(token); };\n        /**\n         * Unregisters all applications\n         */\n        TestabilityRegistry.prototype.unregisterAllApplications = function () { this._applications.clear(); };\n        /**\n         * Get a testability hook associated with the application\n         * @param elem root element\n         */\n        TestabilityRegistry.prototype.getTestability = function (elem) { return this._applications.get(elem) || null; };\n        /**\n         * Get all registered testabilities\n         */\n        TestabilityRegistry.prototype.getAllTestabilities = function () { return Array.from(this._applications.values()); };\n        /**\n         * Get all registered applications(root elements)\n         */\n        TestabilityRegistry.prototype.getAllRootElements = function () { return Array.from(this._applications.keys()); };\n        /**\n         * Find testability of a node in the Tree\n         * @param elem node\n         * @param findInAncestors whether finding testability in ancestors if testability was not found in\n         * current node\n         */\n        TestabilityRegistry.prototype.findTestabilityInTree = function (elem, findInAncestors) {\n            if (findInAncestors === void 0) { findInAncestors = true; }\n            return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);\n        };\n        TestabilityRegistry.ɵfac = function TestabilityRegistry_Factory(t) { return new (t || TestabilityRegistry)(); };\n        TestabilityRegistry.ɵprov = ɵɵdefineInjectable({ token: TestabilityRegistry, factory: TestabilityRegistry.ɵfac });\n        return TestabilityRegistry;\n    }());\n    /*@__PURE__*/ (function () { setClassMetadata(TestabilityRegistry, [{\n            type: Injectable\n        }], function () { return []; }, null); })();\n    var _NoopGetTestability = /** @class */ (function () {\n        function _NoopGetTestability() {\n        }\n        _NoopGetTestability.prototype.addToWindow = function (registry) { };\n        _NoopGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {\n            return null;\n        };\n        return _NoopGetTestability;\n    }());\n    /**\n     * Set the {@link GetTestability} implementation used by the Angular testing framework.\n     * @publicApi\n     */\n    function setTestabilityGetter(getter) {\n        _testabilityGetter = getter;\n    }\n    var _testabilityGetter = new _NoopGetTestability();\n\n    var _platform;\n    var compileNgModuleFactory = compileNgModuleFactory__POST_R3__;\n    function compileNgModuleFactory__PRE_R3__(injector, options, moduleType) {\n        var compilerFactory = injector.get(CompilerFactory);\n        var compiler = compilerFactory.createCompiler([options]);\n        return compiler.compileModuleAsync(moduleType);\n    }\n    function compileNgModuleFactory__POST_R3__(injector, options, moduleType) {\n        ngDevMode && assertNgModuleType(moduleType);\n        var moduleFactory = new NgModuleFactory$1(moduleType);\n        if (isComponentResourceResolutionQueueEmpty()) {\n            return Promise.resolve(moduleFactory);\n        }\n        var compilerOptions = injector.get(COMPILER_OPTIONS, []).concat(options);\n        var compilerProviders = _mergeArrays(compilerOptions.map(function (o) { return o.providers; }));\n        // In case there are no compiler providers, we just return the module factory as\n        // there won't be any resource loader. This can happen with Ivy, because AOT compiled\n        // modules can be still passed through \"bootstrapModule\". In that case we shouldn't\n        // unnecessarily require the JIT compiler.\n        if (compilerProviders.length === 0) {\n            return Promise.resolve(moduleFactory);\n        }\n        var compiler = getCompilerFacade();\n        var compilerInjector = Injector.create({ providers: compilerProviders });\n        var resourceLoader = compilerInjector.get(compiler.ResourceLoader);\n        // The resource loader can also return a string while the \"resolveComponentResources\"\n        // always expects a promise. Therefore we need to wrap the returned value in a promise.\n        return resolveComponentResources(function (url) { return Promise.resolve(resourceLoader.get(url)); })\n            .then(function () { return moduleFactory; });\n    }\n    // the `window.ng` global utilities are only available in non-VE versions of\n    // Angular. The function switch below will make sure that the code is not\n    // included into Angular when PRE mode is active.\n    function publishDefaultGlobalUtils__PRE_R3__() { }\n    function publishDefaultGlobalUtils__POST_R3__() {\n        ngDevMode && publishDefaultGlobalUtils();\n    }\n    var publishDefaultGlobalUtils$1 = publishDefaultGlobalUtils__POST_R3__;\n    var isBoundToModule = isBoundToModule__POST_R3__;\n    function isBoundToModule__PRE_R3__(cf) {\n        return cf instanceof ComponentFactoryBoundToModule;\n    }\n    function isBoundToModule__POST_R3__(cf) {\n        return cf.isBoundToModule;\n    }\n    var ALLOW_MULTIPLE_PLATFORMS = new InjectionToken('AllowMultipleToken');\n    /**\n     * A token for third-party components that can register themselves with NgProbe.\n     *\n     * @publicApi\n     */\n    var NgProbeToken = /** @class */ (function () {\n        function NgProbeToken(name, token) {\n            this.name = name;\n            this.token = token;\n        }\n        return NgProbeToken;\n    }());\n    /**\n     * Creates a platform.\n     * Platforms have to be eagerly created via this function.\n     *\n     * @publicApi\n     */\n    function createPlatform(injector) {\n        if (_platform && !_platform.destroyed &&\n            !_platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n            throw new Error('There can be only one platform. Destroy the previous one to create a new one.');\n        }\n        publishDefaultGlobalUtils$1();\n        _platform = injector.get(PlatformRef);\n        var inits = injector.get(PLATFORM_INITIALIZER, null);\n        if (inits)\n            inits.forEach(function (init) { return init(); });\n        return _platform;\n    }\n    /**\n     * Creates a factory for a platform\n     *\n     * @publicApi\n     */\n    function createPlatformFactory(parentPlatformFactory, name, providers) {\n        if (providers === void 0) { providers = []; }\n        var desc = \"Platform: \" + name;\n        var marker = new InjectionToken(desc);\n        return function (extraProviders) {\n            if (extraProviders === void 0) { extraProviders = []; }\n            var platform = getPlatform();\n            if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n                if (parentPlatformFactory) {\n                    parentPlatformFactory(providers.concat(extraProviders).concat({ provide: marker, useValue: true }));\n                }\n                else {\n                    var injectedProviders = providers.concat(extraProviders).concat({ provide: marker, useValue: true }, {\n                        provide: INJECTOR_SCOPE,\n                        useValue: 'platform'\n                    });\n                    createPlatform(Injector.create({ providers: injectedProviders, name: desc }));\n                }\n            }\n            return assertPlatform(marker);\n        };\n    }\n    /**\n     * Checks that there currently is a platform which contains the given token as a provider.\n     *\n     * @publicApi\n     */\n    function assertPlatform(requiredToken) {\n        var platform = getPlatform();\n        if (!platform) {\n            throw new Error('No platform exists!');\n        }\n        if (!platform.injector.get(requiredToken, null)) {\n            throw new Error('A platform with a different configuration has been created. Please destroy it first.');\n        }\n        return platform;\n    }\n    /**\n     * Destroy the existing platform.\n     *\n     * @publicApi\n     */\n    function destroyPlatform() {\n        if (_platform && !_platform.destroyed) {\n            _platform.destroy();\n        }\n    }\n    /**\n     * Returns the current platform.\n     *\n     * @publicApi\n     */\n    function getPlatform() {\n        return _platform && !_platform.destroyed ? _platform : null;\n    }\n    /**\n     * The Angular platform is the entry point for Angular on a web page. Each page\n     * has exactly one platform, and services (such as reflection) which are common\n     * to every Angular application running on the page are bound in its scope.\n     *\n     * A page's platform is initialized implicitly when a platform is created via a platform factory\n     * (e.g. {@link platformBrowser}), or explicitly by calling the {@link createPlatform} function.\n     *\n     * @publicApi\n     */\n    var PlatformRef = /** @class */ (function () {\n        /** @internal */\n        function PlatformRef(_injector) {\n            this._injector = _injector;\n            this._modules = [];\n            this._destroyListeners = [];\n            this._destroyed = false;\n        }\n        /**\n         * Creates an instance of an `@NgModule` for the given platform\n         * for offline compilation.\n         *\n         * @usageNotes\n         * ### Simple Example\n         *\n         * ```typescript\n         * my_module.ts:\n         *\n         * @NgModule({\n         *   imports: [BrowserModule]\n         * })\n         * class MyModule {}\n         *\n         * main.ts:\n         * import {MyModuleNgFactory} from './my_module.ngfactory';\n         * import {platformBrowser} from '@angular/platform-browser';\n         *\n         * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\n         * ```\n         */\n        PlatformRef.prototype.bootstrapModuleFactory = function (moduleFactory, options) {\n            var _this = this;\n            // Note: We need to create the NgZone _before_ we instantiate the module,\n            // as instantiating the module creates some providers eagerly.\n            // So we create a mini parent injector that just contains the new NgZone and\n            // pass that as parent to the NgModuleFactory.\n            var ngZoneOption = options ? options.ngZone : undefined;\n            var ngZoneEventCoalescing = (options && options.ngZoneEventCoalescing) || false;\n            var ngZone = getNgZone(ngZoneOption, ngZoneEventCoalescing);\n            var providers = [{ provide: NgZone, useValue: ngZone }];\n            // Attention: Don't use ApplicationRef.run here,\n            // as we want to be sure that all possible constructor calls are inside `ngZone.run`!\n            return ngZone.run(function () {\n                var ngZoneInjector = Injector.create({ providers: providers, parent: _this.injector, name: moduleFactory.moduleType.name });\n                var moduleRef = moduleFactory.create(ngZoneInjector);\n                var exceptionHandler = moduleRef.injector.get(ErrorHandler, null);\n                if (!exceptionHandler) {\n                    throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');\n                }\n                moduleRef.onDestroy(function () { return remove(_this._modules, moduleRef); });\n                ngZone.runOutsideAngular(function () { return ngZone.onError.subscribe({ next: function (error) { exceptionHandler.handleError(error); } }); });\n                return _callAndReportToErrorHandler(exceptionHandler, ngZone, function () {\n                    var initStatus = moduleRef.injector.get(ApplicationInitStatus);\n                    initStatus.runInitializers();\n                    return initStatus.donePromise.then(function () {\n                        if (ivyEnabled) {\n                            // If the `LOCALE_ID` provider is defined at bootstrap then we set the value for ivy\n                            var localeId = moduleRef.injector.get(LOCALE_ID$1, DEFAULT_LOCALE_ID);\n                            setLocaleId(localeId || DEFAULT_LOCALE_ID);\n                        }\n                        _this._moduleDoBootstrap(moduleRef);\n                        return moduleRef;\n                    });\n                });\n            });\n        };\n        /**\n         * Creates an instance of an `@NgModule` for a given platform using the given runtime compiler.\n         *\n         * @usageNotes\n         * ### Simple Example\n         *\n         * ```typescript\n         * @NgModule({\n         *   imports: [BrowserModule]\n         * })\n         * class MyModule {}\n         *\n         * let moduleRef = platformBrowser().bootstrapModule(MyModule);\n         * ```\n         *\n         */\n        PlatformRef.prototype.bootstrapModule = function (moduleType, compilerOptions) {\n            var _this = this;\n            if (compilerOptions === void 0) { compilerOptions = []; }\n            var options = optionsReducer({}, compilerOptions);\n            return compileNgModuleFactory(this.injector, options, moduleType)\n                .then(function (moduleFactory) { return _this.bootstrapModuleFactory(moduleFactory, options); });\n        };\n        PlatformRef.prototype._moduleDoBootstrap = function (moduleRef) {\n            var appRef = moduleRef.injector.get(ApplicationRef);\n            if (moduleRef._bootstrapComponents.length > 0) {\n                moduleRef._bootstrapComponents.forEach(function (f) { return appRef.bootstrap(f); });\n            }\n            else if (moduleRef.instance.ngDoBootstrap) {\n                moduleRef.instance.ngDoBootstrap(appRef);\n            }\n            else {\n                throw new Error(\"The module \" + stringify(moduleRef.instance.constructor) + \" was bootstrapped, but it does not declare \\\"@NgModule.bootstrap\\\" components nor a \\\"ngDoBootstrap\\\" method. \" +\n                    \"Please define one of these.\");\n            }\n            this._modules.push(moduleRef);\n        };\n        /**\n         * Register a listener to be called when the platform is disposed.\n         */\n        PlatformRef.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback); };\n        Object.defineProperty(PlatformRef.prototype, \"injector\", {\n            /**\n             * Retrieve the platform {@link Injector}, which is the parent injector for\n             * every Angular application on the page and provides singleton providers.\n             */\n            get: function () { return this._injector; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Destroy the Angular platform and all Angular applications on the page.\n         */\n        PlatformRef.prototype.destroy = function () {\n            if (this._destroyed) {\n                throw new Error('The platform has already been destroyed!');\n            }\n            this._modules.slice().forEach(function (module) { return module.destroy(); });\n            this._destroyListeners.forEach(function (listener) { return listener(); });\n            this._destroyed = true;\n        };\n        Object.defineProperty(PlatformRef.prototype, \"destroyed\", {\n            get: function () { return this._destroyed; },\n            enumerable: true,\n            configurable: true\n        });\n        PlatformRef.ɵfac = function PlatformRef_Factory(t) { return new (t || PlatformRef)(ɵɵinject(Injector)); };\n        PlatformRef.ɵprov = ɵɵdefineInjectable({ token: PlatformRef, factory: PlatformRef.ɵfac });\n        return PlatformRef;\n    }());\n    /*@__PURE__*/ (function () { setClassMetadata(PlatformRef, [{\n            type: Injectable\n        }], function () { return [{ type: Injector }]; }, null); })();\n    function getNgZone(ngZoneOption, ngZoneEventCoalescing) {\n        var ngZone;\n        if (ngZoneOption === 'noop') {\n            ngZone = new NoopNgZone();\n        }\n        else {\n            ngZone = (ngZoneOption === 'zone.js' ? undefined : ngZoneOption) || new NgZone({\n                enableLongStackTrace: isDevMode(),\n                shouldCoalesceEventChangeDetection: ngZoneEventCoalescing\n            });\n        }\n        return ngZone;\n    }\n    function _callAndReportToErrorHandler(errorHandler, ngZone, callback) {\n        try {\n            var result = callback();\n            if (isPromise(result)) {\n                return result.catch(function (e) {\n                    ngZone.runOutsideAngular(function () { return errorHandler.handleError(e); });\n                    // rethrow as the exception handler might not do it\n                    throw e;\n                });\n            }\n            return result;\n        }\n        catch (e) {\n            ngZone.runOutsideAngular(function () { return errorHandler.handleError(e); });\n            // rethrow as the exception handler might not do it\n            throw e;\n        }\n    }\n    function optionsReducer(dst, objs) {\n        if (Array.isArray(objs)) {\n            dst = objs.reduce(optionsReducer, dst);\n        }\n        else {\n            dst = __assign(__assign({}, dst), objs);\n        }\n        return dst;\n    }\n    /**\n     * A reference to an Angular application running on a page.\n     *\n     * @usageNotes\n     *\n     * {@a is-stable-examples}\n     * ### isStable examples and caveats\n     *\n     * Note two important points about `isStable`, demonstrated in the examples below:\n     * - the application will never be stable if you start any kind\n     * of recurrent asynchronous task when the application starts\n     * (for example for a polling process, started with a `setInterval`, a `setTimeout`\n     * or using RxJS operators like `interval`);\n     * - the `isStable` Observable runs outside of the Angular zone.\n     *\n     * Let's imagine that you start a recurrent task\n     * (here incrementing a counter, using RxJS `interval`),\n     * and at the same time subscribe to `isStable`.\n     *\n     * ```\n     * constructor(appRef: ApplicationRef) {\n     *   appRef.isStable.pipe(\n     *      filter(stable => stable)\n     *   ).subscribe(() => console.log('App is stable now');\n     *   interval(1000).subscribe(counter => console.log(counter));\n     * }\n     * ```\n     * In this example, `isStable` will never emit `true`,\n     * and the trace \"App is stable now\" will never get logged.\n     *\n     * If you want to execute something when the app is stable,\n     * you have to wait for the application to be stable\n     * before starting your polling process.\n     *\n     * ```\n     * constructor(appRef: ApplicationRef) {\n     *   appRef.isStable.pipe(\n     *     first(stable => stable),\n     *     tap(stable => console.log('App is stable now')),\n     *     switchMap(() => interval(1000))\n     *   ).subscribe(counter => console.log(counter));\n     * }\n     * ```\n     * In this example, the trace \"App is stable now\" will be logged\n     * and then the counter starts incrementing every second.\n     *\n     * Note also that this Observable runs outside of the Angular zone,\n     * which means that the code in the subscription\n     * to this Observable will not trigger the change detection.\n     *\n     * Let's imagine that instead of logging the counter value,\n     * you update a field of your component\n     * and display it in its template.\n     *\n     * ```\n     * constructor(appRef: ApplicationRef) {\n     *   appRef.isStable.pipe(\n     *     first(stable => stable),\n     *     switchMap(() => interval(1000))\n     *   ).subscribe(counter => this.value = counter);\n     * }\n     * ```\n     * As the `isStable` Observable runs outside the zone,\n     * the `value` field will be updated properly,\n     * but the template will not be refreshed!\n     *\n     * You'll have to manually trigger the change detection to update the template.\n     *\n     * ```\n     * constructor(appRef: ApplicationRef, cd: ChangeDetectorRef) {\n     *   appRef.isStable.pipe(\n     *     first(stable => stable),\n     *     switchMap(() => interval(1000))\n     *   ).subscribe(counter => {\n     *     this.value = counter;\n     *     cd.detectChanges();\n     *   });\n     * }\n     * ```\n     *\n     * Or make the subscription callback run inside the zone.\n     *\n     * ```\n     * constructor(appRef: ApplicationRef, zone: NgZone) {\n     *   appRef.isStable.pipe(\n     *     first(stable => stable),\n     *     switchMap(() => interval(1000))\n     *   ).subscribe(counter => zone.run(() => this.value = counter));\n     * }\n     * ```\n     *\n     * @publicApi\n     */\n    var ApplicationRef = /** @class */ (function () {\n        /** @internal */\n        function ApplicationRef(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus) {\n            var _this = this;\n            this._zone = _zone;\n            this._console = _console;\n            this._injector = _injector;\n            this._exceptionHandler = _exceptionHandler;\n            this._componentFactoryResolver = _componentFactoryResolver;\n            this._initStatus = _initStatus;\n            /** @internal */\n            this._bootstrapListeners = [];\n            this._views = [];\n            this._runningTick = false;\n            this._enforceNoNewChanges = false;\n            this._stable = true;\n            /**\n             * Get a list of component types registered to this application.\n             * This list is populated even before the component is created.\n             */\n            this.componentTypes = [];\n            /**\n             * Get a list of components registered to this application.\n             */\n            this.components = [];\n            this._enforceNoNewChanges = isDevMode();\n            this._zone.onMicrotaskEmpty.subscribe({ next: function () { _this._zone.run(function () { _this.tick(); }); } });\n            var isCurrentlyStable = new rxjs.Observable(function (observer) {\n                _this._stable = _this._zone.isStable && !_this._zone.hasPendingMacrotasks &&\n                    !_this._zone.hasPendingMicrotasks;\n                _this._zone.runOutsideAngular(function () {\n                    observer.next(_this._stable);\n                    observer.complete();\n                });\n            });\n            var isStable = new rxjs.Observable(function (observer) {\n                // Create the subscription to onStable outside the Angular Zone so that\n                // the callback is run outside the Angular Zone.\n                var stableSub;\n                _this._zone.runOutsideAngular(function () {\n                    stableSub = _this._zone.onStable.subscribe(function () {\n                        NgZone.assertNotInAngularZone();\n                        // Check whether there are no pending macro/micro tasks in the next tick\n                        // to allow for NgZone to update the state.\n                        scheduleMicroTask(function () {\n                            if (!_this._stable && !_this._zone.hasPendingMacrotasks &&\n                                !_this._zone.hasPendingMicrotasks) {\n                                _this._stable = true;\n                                observer.next(true);\n                            }\n                        });\n                    });\n                });\n                var unstableSub = _this._zone.onUnstable.subscribe(function () {\n                    NgZone.assertInAngularZone();\n                    if (_this._stable) {\n                        _this._stable = false;\n                        _this._zone.runOutsideAngular(function () { observer.next(false); });\n                    }\n                });\n                return function () {\n                    stableSub.unsubscribe();\n                    unstableSub.unsubscribe();\n                };\n            });\n            this.isStable =\n                rxjs.merge(isCurrentlyStable, isStable.pipe(operators.share()));\n        }\n        /**\n         * Bootstrap a new component at the root level of the application.\n         *\n         * @usageNotes\n         * ### Bootstrap process\n         *\n         * When bootstrapping a new root component into an application, Angular mounts the\n         * specified application component onto DOM elements identified by the componentType's\n         * selector and kicks off automatic change detection to finish initializing the component.\n         *\n         * Optionally, a component can be mounted onto a DOM element that does not match the\n         * componentType's selector.\n         *\n         * ### Example\n         * {@example core/ts/platform/platform.ts region='longform'}\n         */\n        ApplicationRef.prototype.bootstrap = function (componentOrFactory, rootSelectorOrNode) {\n            var _this = this;\n            if (!this._initStatus.done) {\n                throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');\n            }\n            var componentFactory;\n            if (componentOrFactory instanceof ComponentFactory) {\n                componentFactory = componentOrFactory;\n            }\n            else {\n                componentFactory =\n                    this._componentFactoryResolver.resolveComponentFactory(componentOrFactory);\n            }\n            this.componentTypes.push(componentFactory.componentType);\n            // Create a factory associated with the current module if it's not bound to some other\n            var ngModule = isBoundToModule(componentFactory) ? undefined : this._injector.get(NgModuleRef);\n            var selectorOrNode = rootSelectorOrNode || componentFactory.selector;\n            var compRef = componentFactory.create(Injector.NULL, [], selectorOrNode, ngModule);\n            compRef.onDestroy(function () { _this._unloadComponent(compRef); });\n            var testability = compRef.injector.get(Testability, null);\n            if (testability) {\n                compRef.injector.get(TestabilityRegistry)\n                    .registerApplication(compRef.location.nativeElement, testability);\n            }\n            this._loadComponent(compRef);\n            if (isDevMode()) {\n                this._console.log(\"Angular is running in the development mode. Call enableProdMode() to enable the production mode.\");\n            }\n            return compRef;\n        };\n        /**\n         * Invoke this method to explicitly process change detection and its side-effects.\n         *\n         * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n         * further changes are detected. If additional changes are picked up during this second cycle,\n         * bindings in the app have side-effects that cannot be resolved in a single change detection\n         * pass.\n         * In this case, Angular throws an error, since an Angular application can only have one change\n         * detection pass during which all change detection must complete.\n         */\n        ApplicationRef.prototype.tick = function () {\n            var e_1, _a, e_2, _b;\n            var _this = this;\n            if (this._runningTick) {\n                throw new Error('ApplicationRef.tick is called recursively');\n            }\n            try {\n                this._runningTick = true;\n                try {\n                    for (var _c = __values(this._views), _d = _c.next(); !_d.done; _d = _c.next()) {\n                        var view = _d.value;\n                        view.detectChanges();\n                    }\n                }\n                catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                finally {\n                    try {\n                        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n                    }\n                    finally { if (e_1) throw e_1.error; }\n                }\n                if (this._enforceNoNewChanges) {\n                    try {\n                        for (var _e = __values(this._views), _f = _e.next(); !_f.done; _f = _e.next()) {\n                            var view = _f.value;\n                            view.checkNoChanges();\n                        }\n                    }\n                    catch (e_2_1) { e_2 = { error: e_2_1 }; }\n                    finally {\n                        try {\n                            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n                        }\n                        finally { if (e_2) throw e_2.error; }\n                    }\n                }\n            }\n            catch (e) {\n                // Attention: Don't rethrow as it could cancel subscriptions to Observables!\n                this._zone.runOutsideAngular(function () { return _this._exceptionHandler.handleError(e); });\n            }\n            finally {\n                this._runningTick = false;\n            }\n        };\n        /**\n         * Attaches a view so that it will be dirty checked.\n         * The view will be automatically detached when it is destroyed.\n         * This will throw if the view is already attached to a ViewContainer.\n         */\n        ApplicationRef.prototype.attachView = function (viewRef) {\n            var view = viewRef;\n            this._views.push(view);\n            view.attachToAppRef(this);\n        };\n        /**\n         * Detaches a view from dirty checking again.\n         */\n        ApplicationRef.prototype.detachView = function (viewRef) {\n            var view = viewRef;\n            remove(this._views, view);\n            view.detachFromAppRef();\n        };\n        ApplicationRef.prototype._loadComponent = function (componentRef) {\n            this.attachView(componentRef.hostView);\n            this.tick();\n            this.components.push(componentRef);\n            // Get the listeners lazily to prevent DI cycles.\n            var listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);\n            listeners.forEach(function (listener) { return listener(componentRef); });\n        };\n        ApplicationRef.prototype._unloadComponent = function (componentRef) {\n            this.detachView(componentRef.hostView);\n            remove(this.components, componentRef);\n        };\n        /** @internal */\n        ApplicationRef.prototype.ngOnDestroy = function () {\n            // TODO(alxhub): Dispose of the NgZone.\n            this._views.slice().forEach(function (view) { return view.destroy(); });\n        };\n        Object.defineProperty(ApplicationRef.prototype, \"viewCount\", {\n            /**\n             * Returns the number of attached views.\n             */\n            get: function () { return this._views.length; },\n            enumerable: true,\n            configurable: true\n        });\n        ApplicationRef.ɵfac = function ApplicationRef_Factory(t) { return new (t || ApplicationRef)(ɵɵinject(NgZone), ɵɵinject(Console), ɵɵinject(Injector), ɵɵinject(ErrorHandler), ɵɵinject(ComponentFactoryResolver), ɵɵinject(ApplicationInitStatus)); };\n        ApplicationRef.ɵprov = ɵɵdefineInjectable({ token: ApplicationRef, factory: ApplicationRef.ɵfac });\n        return ApplicationRef;\n    }());\n    /*@__PURE__*/ (function () { setClassMetadata(ApplicationRef, [{\n            type: Injectable\n        }], function () { return [{ type: NgZone }, { type: Console }, { type: Injector }, { type: ErrorHandler }, { type: ComponentFactoryResolver }, { type: ApplicationInitStatus }]; }, null); })();\n    function remove(list, el) {\n        var index = list.indexOf(el);\n        if (index > -1) {\n            list.splice(index, 1);\n        }\n    }\n    function _mergeArrays(parts) {\n        var result = [];\n        parts.forEach(function (part) { return part && result.push.apply(result, __spread(part)); });\n        return result;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Used to load ng module factories.\n     *\n     * @publicApi\n     * @deprecated the `string` form of `loadChildren` is deprecated, and `NgModuleFactoryLoader` is\n     * part of its implementation. See `LoadChildren` for more details.\n     */\n    var NgModuleFactoryLoader = /** @class */ (function () {\n        function NgModuleFactoryLoader() {\n        }\n        return NgModuleFactoryLoader;\n    }());\n    function getModuleFactory__PRE_R3__(id) {\n        var factory = getRegisteredNgModuleType(id);\n        if (!factory)\n            throw noModuleError(id);\n        return factory;\n    }\n    function getModuleFactory__POST_R3__(id) {\n        var type = getRegisteredNgModuleType(id);\n        if (!type)\n            throw noModuleError(id);\n        return new NgModuleFactory$1(type);\n    }\n    /**\n     * Returns the NgModuleFactory with the given id, if it exists and has been loaded.\n     * Factories for modules that do not specify an `id` cannot be retrieved. Throws if the module\n     * cannot be found.\n     * @publicApi\n     */\n    var getModuleFactory = getModuleFactory__POST_R3__;\n    function noModuleError(id) {\n        return new Error(\"No module with ID \" + id + \" loaded\");\n    }\n\n    var _SEPARATOR = '#';\n    var FACTORY_CLASS_SUFFIX = 'NgFactory';\n    /**\n     * Configuration for SystemJsNgModuleLoader.\n     * token.\n     *\n     * @publicApi\n     * @deprecated the `string` form of `loadChildren` is deprecated, and `SystemJsNgModuleLoaderConfig`\n     * is part of its implementation. See `LoadChildren` for more details.\n     */\n    var SystemJsNgModuleLoaderConfig = /** @class */ (function () {\n        function SystemJsNgModuleLoaderConfig() {\n        }\n        return SystemJsNgModuleLoaderConfig;\n    }());\n    var DEFAULT_CONFIG = {\n        factoryPathPrefix: '',\n        factoryPathSuffix: '.ngfactory',\n    };\n    /**\n     * NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory\n     * @publicApi\n     * @deprecated the `string` form of `loadChildren` is deprecated, and `SystemJsNgModuleLoader` is\n     * part of its implementation. See `LoadChildren` for more details.\n     */\n    var SystemJsNgModuleLoader = /** @class */ (function () {\n        function SystemJsNgModuleLoader(_compiler, config) {\n            this._compiler = _compiler;\n            this._config = config || DEFAULT_CONFIG;\n        }\n        SystemJsNgModuleLoader.prototype.load = function (path) {\n            var legacyOfflineMode = !ivyEnabled && this._compiler instanceof Compiler;\n            return legacyOfflineMode ? this.loadFactory(path) : this.loadAndCompile(path);\n        };\n        SystemJsNgModuleLoader.prototype.loadAndCompile = function (path) {\n            var _this = this;\n            var _a = __read(path.split(_SEPARATOR), 2), module = _a[0], exportName = _a[1];\n            if (exportName === undefined) {\n                exportName = 'default';\n            }\n            return System.import(module)\n                .then(function (module) { return module[exportName]; })\n                .then(function (type) { return checkNotEmpty(type, module, exportName); })\n                .then(function (type) { return _this._compiler.compileModuleAsync(type); });\n        };\n        SystemJsNgModuleLoader.prototype.loadFactory = function (path) {\n            var _a = __read(path.split(_SEPARATOR), 2), module = _a[0], exportName = _a[1];\n            var factoryClassSuffix = FACTORY_CLASS_SUFFIX;\n            if (exportName === undefined) {\n                exportName = 'default';\n                factoryClassSuffix = '';\n            }\n            return System.import(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix)\n                .then(function (module) { return module[exportName + factoryClassSuffix]; })\n                .then(function (factory) { return checkNotEmpty(factory, module, exportName); });\n        };\n        SystemJsNgModuleLoader.ɵfac = function SystemJsNgModuleLoader_Factory(t) { return new (t || SystemJsNgModuleLoader)(ɵɵinject(Compiler), ɵɵinject(SystemJsNgModuleLoaderConfig, 8)); };\n        SystemJsNgModuleLoader.ɵprov = ɵɵdefineInjectable({ token: SystemJsNgModuleLoader, factory: SystemJsNgModuleLoader.ɵfac });\n        return SystemJsNgModuleLoader;\n    }());\n    /*@__PURE__*/ (function () { setClassMetadata(SystemJsNgModuleLoader, [{\n            type: Injectable\n        }], function () { return [{ type: Compiler }, { type: SystemJsNgModuleLoaderConfig, decorators: [{\n                    type: Optional\n                }] }]; }, null); })();\n    function checkNotEmpty(value, modulePath, exportName) {\n        if (!value) {\n            throw new Error(\"Cannot find '\" + exportName + \"' in '\" + modulePath + \"'\");\n        }\n        return value;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Represents an Angular [view](guide/glossary#view),\n     * specifically the [host view](guide/glossary#view-tree) that is defined by a component.\n     * Also serves as the base class\n     * that adds destroy methods for [embedded views](guide/glossary#view-tree).\n     *\n     * @see `EmbeddedViewRef`\n     *\n     * @publicApi\n     */\n    var ViewRef$1 = /** @class */ (function (_super) {\n        __extends(ViewRef, _super);\n        function ViewRef() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        return ViewRef;\n    }(ChangeDetectorRef));\n    /**\n     * Represents an Angular [view](guide/glossary#view) in a view container.\n     * An [embedded view](guide/glossary#view-tree) can be referenced from a component\n     * other than the hosting component whose template defines it, or it can be defined\n     * independently by a `TemplateRef`.\n     *\n     * Properties of elements in a view can change, but the structure (number and order) of elements in\n     * a view cannot. Change the structure of elements by inserting, moving, or\n     * removing nested views in a view container.\n     *\n     * @see `ViewContainerRef`\n     *\n     * @usageNotes\n     *\n     * The following template breaks down into two separate `TemplateRef` instances,\n     * an outer one and an inner one.\n     *\n     * ```\n     * Count: {{items.length}}\n     * <ul>\n     *   <li *ngFor=\"let  item of items\">{{item}}</li>\n     * </ul>\n     * ```\n     *\n     * This is the outer `TemplateRef`:\n     *\n     * ```\n     * Count: {{items.length}}\n     * <ul>\n     *   <ng-template ngFor let-item [ngForOf]=\"items\"></ng-template>\n     * </ul>\n     * ```\n     *\n     * This is the inner `TemplateRef`:\n     *\n     * ```\n     *   <li>{{item}}</li>\n     * ```\n     *\n     * The outer and inner `TemplateRef` instances are assembled into views as follows:\n     *\n     * ```\n     * <!-- ViewRef: outer-0 -->\n     * Count: 2\n     * <ul>\n     *   <ng-template view-container-ref></ng-template>\n     *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->\n     *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->\n     * </ul>\n     * <!-- /ViewRef: outer-0 -->\n     * ```\n     * @publicApi\n     */\n    var EmbeddedViewRef = /** @class */ (function (_super) {\n        __extends(EmbeddedViewRef, _super);\n        function EmbeddedViewRef() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        return EmbeddedViewRef;\n    }(ViewRef$1));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @publicApi\n     */\n    var DebugEventListener = /** @class */ (function () {\n        function DebugEventListener(name, callback) {\n            this.name = name;\n            this.callback = callback;\n        }\n        return DebugEventListener;\n    }());\n    var DebugNode__PRE_R3__ = /** @class */ (function () {\n        function DebugNode__PRE_R3__(nativeNode, parent, _debugContext) {\n            this.listeners = [];\n            this.parent = null;\n            this._debugContext = _debugContext;\n            this.nativeNode = nativeNode;\n            if (parent && parent instanceof DebugElement__PRE_R3__) {\n                parent.addChild(this);\n            }\n        }\n        Object.defineProperty(DebugNode__PRE_R3__.prototype, \"injector\", {\n            get: function () { return this._debugContext.injector; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugNode__PRE_R3__.prototype, \"componentInstance\", {\n            get: function () { return this._debugContext.component; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugNode__PRE_R3__.prototype, \"context\", {\n            get: function () { return this._debugContext.context; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugNode__PRE_R3__.prototype, \"references\", {\n            get: function () { return this._debugContext.references; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugNode__PRE_R3__.prototype, \"providerTokens\", {\n            get: function () { return this._debugContext.providerTokens; },\n            enumerable: true,\n            configurable: true\n        });\n        return DebugNode__PRE_R3__;\n    }());\n    var DebugElement__PRE_R3__ = /** @class */ (function (_super) {\n        __extends(DebugElement__PRE_R3__, _super);\n        function DebugElement__PRE_R3__(nativeNode, parent, _debugContext) {\n            var _this = _super.call(this, nativeNode, parent, _debugContext) || this;\n            _this.properties = {};\n            _this.attributes = {};\n            _this.classes = {};\n            _this.styles = {};\n            _this.childNodes = [];\n            _this.nativeElement = nativeNode;\n            return _this;\n        }\n        DebugElement__PRE_R3__.prototype.addChild = function (child) {\n            if (child) {\n                this.childNodes.push(child);\n                child.parent = this;\n            }\n        };\n        DebugElement__PRE_R3__.prototype.removeChild = function (child) {\n            var childIndex = this.childNodes.indexOf(child);\n            if (childIndex !== -1) {\n                child.parent = null;\n                this.childNodes.splice(childIndex, 1);\n            }\n        };\n        DebugElement__PRE_R3__.prototype.insertChildrenAfter = function (child, newChildren) {\n            var _a;\n            var _this = this;\n            var siblingIndex = this.childNodes.indexOf(child);\n            if (siblingIndex !== -1) {\n                (_a = this.childNodes).splice.apply(_a, __spread([siblingIndex + 1, 0], newChildren));\n                newChildren.forEach(function (c) {\n                    if (c.parent) {\n                        c.parent.removeChild(c);\n                    }\n                    child.parent = _this;\n                });\n            }\n        };\n        DebugElement__PRE_R3__.prototype.insertBefore = function (refChild, newChild) {\n            var refIndex = this.childNodes.indexOf(refChild);\n            if (refIndex === -1) {\n                this.addChild(newChild);\n            }\n            else {\n                if (newChild.parent) {\n                    newChild.parent.removeChild(newChild);\n                }\n                newChild.parent = this;\n                this.childNodes.splice(refIndex, 0, newChild);\n            }\n        };\n        DebugElement__PRE_R3__.prototype.query = function (predicate) {\n            var results = this.queryAll(predicate);\n            return results[0] || null;\n        };\n        DebugElement__PRE_R3__.prototype.queryAll = function (predicate) {\n            var matches = [];\n            _queryElementChildren(this, predicate, matches);\n            return matches;\n        };\n        DebugElement__PRE_R3__.prototype.queryAllNodes = function (predicate) {\n            var matches = [];\n            _queryNodeChildren(this, predicate, matches);\n            return matches;\n        };\n        Object.defineProperty(DebugElement__PRE_R3__.prototype, \"children\", {\n            get: function () {\n                return this\n                    .childNodes //\n                    .filter(function (node) { return node instanceof DebugElement__PRE_R3__; });\n            },\n            enumerable: true,\n            configurable: true\n        });\n        DebugElement__PRE_R3__.prototype.triggerEventHandler = function (eventName, eventObj) {\n            this.listeners.forEach(function (listener) {\n                if (listener.name == eventName) {\n                    listener.callback(eventObj);\n                }\n            });\n        };\n        return DebugElement__PRE_R3__;\n    }(DebugNode__PRE_R3__));\n    /**\n     * @publicApi\n     */\n    function asNativeElements(debugEls) {\n        return debugEls.map(function (el) { return el.nativeElement; });\n    }\n    function _queryElementChildren(element, predicate, matches) {\n        element.childNodes.forEach(function (node) {\n            if (node instanceof DebugElement__PRE_R3__) {\n                if (predicate(node)) {\n                    matches.push(node);\n                }\n                _queryElementChildren(node, predicate, matches);\n            }\n        });\n    }\n    function _queryNodeChildren(parentNode, predicate, matches) {\n        if (parentNode instanceof DebugElement__PRE_R3__) {\n            parentNode.childNodes.forEach(function (node) {\n                if (predicate(node)) {\n                    matches.push(node);\n                }\n                if (node instanceof DebugElement__PRE_R3__) {\n                    _queryNodeChildren(node, predicate, matches);\n                }\n            });\n        }\n    }\n    var DebugNode__POST_R3__ = /** @class */ (function () {\n        function DebugNode__POST_R3__(nativeNode) {\n            this.nativeNode = nativeNode;\n        }\n        Object.defineProperty(DebugNode__POST_R3__.prototype, \"parent\", {\n            get: function () {\n                var parent = this.nativeNode.parentNode;\n                return parent ? new DebugElement__POST_R3__(parent) : null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugNode__POST_R3__.prototype, \"injector\", {\n            get: function () { return getInjector(this.nativeNode); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugNode__POST_R3__.prototype, \"componentInstance\", {\n            get: function () {\n                var nativeElement = this.nativeNode;\n                return nativeElement &&\n                    (getComponent(nativeElement) || getViewComponent(nativeElement));\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugNode__POST_R3__.prototype, \"context\", {\n            get: function () {\n                return getComponent(this.nativeNode) || getContext$1(this.nativeNode);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugNode__POST_R3__.prototype, \"listeners\", {\n            get: function () {\n                return getListeners(this.nativeNode).filter(isBrowserEvents);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugNode__POST_R3__.prototype, \"references\", {\n            get: function () { return getLocalRefs(this.nativeNode); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugNode__POST_R3__.prototype, \"providerTokens\", {\n            get: function () { return getInjectionTokens(this.nativeNode); },\n            enumerable: true,\n            configurable: true\n        });\n        return DebugNode__POST_R3__;\n    }());\n    var DebugElement__POST_R3__ = /** @class */ (function (_super) {\n        __extends(DebugElement__POST_R3__, _super);\n        function DebugElement__POST_R3__(nativeNode) {\n            var _this = this;\n            ngDevMode && assertDomNode(nativeNode);\n            _this = _super.call(this, nativeNode) || this;\n            return _this;\n        }\n        Object.defineProperty(DebugElement__POST_R3__.prototype, \"nativeElement\", {\n            get: function () {\n                return this.nativeNode.nodeType == Node.ELEMENT_NODE ? this.nativeNode : null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugElement__POST_R3__.prototype, \"name\", {\n            get: function () {\n                try {\n                    var context = loadLContext(this.nativeNode);\n                    var lView = context.lView;\n                    var tData = lView[TVIEW].data;\n                    var tNode = tData[context.nodeIndex];\n                    return tNode.tagName;\n                }\n                catch (e) {\n                    return this.nativeNode.nodeName;\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugElement__POST_R3__.prototype, \"properties\", {\n            /**\n             *  Gets a map of property names to property values for an element.\n             *\n             *  This map includes:\n             *  - Regular property bindings (e.g. `[id]=\"id\"`)\n             *  - Host property bindings (e.g. `host: { '[id]': \"id\" }`)\n             *  - Interpolated property bindings (e.g. `id=\"{{ value }}\")\n             *\n             *  It does not include:\n             *  - input property bindings (e.g. `[myCustomInput]=\"value\"`)\n             *  - attribute bindings (e.g. `[attr.role]=\"menu\"`)\n             */\n            get: function () {\n                var context = loadLContext(this.nativeNode, false);\n                if (context == null) {\n                    return {};\n                }\n                var lView = context.lView;\n                var tData = lView[TVIEW].data;\n                var tNode = tData[context.nodeIndex];\n                var properties = {};\n                // Collect properties from the DOM.\n                copyDomProperties(this.nativeElement, properties);\n                // Collect properties from the bindings. This is needed for animation renderer which has\n                // synthetic properties which don't get reflected into the DOM.\n                collectPropertyBindings(properties, tNode, lView, tData);\n                return properties;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugElement__POST_R3__.prototype, \"attributes\", {\n            get: function () {\n                var attributes = {};\n                var element = this.nativeElement;\n                if (!element) {\n                    return attributes;\n                }\n                var context = loadLContext(element, false);\n                if (context == null) {\n                    return {};\n                }\n                var lView = context.lView;\n                var tNodeAttrs = lView[TVIEW].data[context.nodeIndex].attrs;\n                var lowercaseTNodeAttrs = [];\n                // For debug nodes we take the element's attribute directly from the DOM since it allows us\n                // to account for ones that weren't set via bindings (e.g. ViewEngine keeps track of the ones\n                // that are set through `Renderer2`). The problem is that the browser will lowercase all names,\n                // however since we have the attributes already on the TNode, we can preserve the case by going\n                // through them once, adding them to the `attributes` map and putting their lower-cased name\n                // into an array. Afterwards when we're going through the native DOM attributes, we can check\n                // whether we haven't run into an attribute already through the TNode.\n                if (tNodeAttrs) {\n                    var i = 0;\n                    while (i < tNodeAttrs.length) {\n                        var attrName = tNodeAttrs[i];\n                        // Stop as soon as we hit a marker. We only care about the regular attributes. Everything\n                        // else will be handled below when we read the final attributes off the DOM.\n                        if (typeof attrName !== 'string')\n                            break;\n                        var attrValue = tNodeAttrs[i + 1];\n                        attributes[attrName] = attrValue;\n                        lowercaseTNodeAttrs.push(attrName.toLowerCase());\n                        i += 2;\n                    }\n                }\n                var eAttrs = element.attributes;\n                for (var i = 0; i < eAttrs.length; i++) {\n                    var attr = eAttrs[i];\n                    var lowercaseName = attr.name.toLowerCase();\n                    // Make sure that we don't assign the same attribute both in its\n                    // case-sensitive form and the lower-cased one from the browser.\n                    if (lowercaseTNodeAttrs.indexOf(lowercaseName) === -1) {\n                        // Save the lowercase name to align the behavior between browsers.\n                        // IE preserves the case, while all other browser convert it to lower case.\n                        attributes[lowercaseName] = attr.value;\n                    }\n                }\n                return attributes;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugElement__POST_R3__.prototype, \"styles\", {\n            get: function () {\n                if (this.nativeElement && this.nativeElement.style) {\n                    return this.nativeElement.style;\n                }\n                return {};\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugElement__POST_R3__.prototype, \"classes\", {\n            get: function () {\n                var result = {};\n                var element = this.nativeElement;\n                var classNames = element.className.split(' ');\n                classNames.forEach(function (value) { return result[value] = true; });\n                return result;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugElement__POST_R3__.prototype, \"childNodes\", {\n            get: function () {\n                var childNodes = this.nativeNode.childNodes;\n                var children = [];\n                for (var i = 0; i < childNodes.length; i++) {\n                    var element = childNodes[i];\n                    children.push(getDebugNode__POST_R3__(element));\n                }\n                return children;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugElement__POST_R3__.prototype, \"children\", {\n            get: function () {\n                var nativeElement = this.nativeElement;\n                if (!nativeElement)\n                    return [];\n                var childNodes = nativeElement.children;\n                var children = [];\n                for (var i = 0; i < childNodes.length; i++) {\n                    var element = childNodes[i];\n                    children.push(getDebugNode__POST_R3__(element));\n                }\n                return children;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        DebugElement__POST_R3__.prototype.query = function (predicate) {\n            var results = this.queryAll(predicate);\n            return results[0] || null;\n        };\n        DebugElement__POST_R3__.prototype.queryAll = function (predicate) {\n            var matches = [];\n            _queryAllR3(this, predicate, matches, true);\n            return matches;\n        };\n        DebugElement__POST_R3__.prototype.queryAllNodes = function (predicate) {\n            var matches = [];\n            _queryAllR3(this, predicate, matches, false);\n            return matches;\n        };\n        DebugElement__POST_R3__.prototype.triggerEventHandler = function (eventName, eventObj) {\n            var node = this.nativeNode;\n            var invokedListeners = [];\n            this.listeners.forEach(function (listener) {\n                if (listener.name === eventName) {\n                    var callback = listener.callback;\n                    callback(eventObj);\n                    invokedListeners.push(callback);\n                }\n            });\n            // We need to check whether `eventListeners` exists, because it's something\n            // that Zone.js only adds to `EventTarget` in browser environments.\n            if (typeof node.eventListeners === 'function') {\n                // Note that in Ivy we wrap event listeners with a call to `event.preventDefault` in some\n                // cases. We use `Function` as a special token that gives us access to the actual event\n                // listener.\n                node.eventListeners(eventName).forEach(function (listener) {\n                    var unwrappedListener = listener(Function);\n                    return invokedListeners.indexOf(unwrappedListener) === -1 && unwrappedListener(eventObj);\n                });\n            }\n        };\n        return DebugElement__POST_R3__;\n    }(DebugNode__POST_R3__));\n    function copyDomProperties(element, properties) {\n        if (element) {\n            // Skip own properties (as those are patched)\n            var obj = Object.getPrototypeOf(element);\n            var NodePrototype = Node.prototype;\n            while (obj !== null && obj !== NodePrototype) {\n                var descriptors = Object.getOwnPropertyDescriptors(obj);\n                for (var key in descriptors) {\n                    if (!key.startsWith('__') && !key.startsWith('on')) {\n                        // don't include properties starting with `__` and `on`.\n                        // `__` are patched values which should not be included.\n                        // `on` are listeners which also should not be included.\n                        var value = element[key];\n                        if (isPrimitiveValue(value)) {\n                            properties[key] = value;\n                        }\n                    }\n                }\n                obj = Object.getPrototypeOf(obj);\n            }\n        }\n    }\n    function isPrimitiveValue(value) {\n        return typeof value === 'string' || typeof value === 'boolean' || typeof value === 'number' ||\n            value === null;\n    }\n    function _queryAllR3(parentElement, predicate, matches, elementsOnly) {\n        var context = loadLContext(parentElement.nativeNode, false);\n        if (context !== null) {\n            var parentTNode = context.lView[TVIEW].data[context.nodeIndex];\n            _queryNodeChildrenR3(parentTNode, context.lView, predicate, matches, elementsOnly, parentElement.nativeNode);\n        }\n        else {\n            // If the context is null, then `parentElement` was either created with Renderer2 or native DOM\n            // APIs.\n            _queryNativeNodeDescendants(parentElement.nativeNode, predicate, matches, elementsOnly);\n        }\n    }\n    /**\n     * Recursively match the current TNode against the predicate, and goes on with the next ones.\n     *\n     * @param tNode the current TNode\n     * @param lView the LView of this TNode\n     * @param predicate the predicate to match\n     * @param matches the list of positive matches\n     * @param elementsOnly whether only elements should be searched\n     * @param rootNativeNode the root native node on which predicate should not be matched\n     */\n    function _queryNodeChildrenR3(tNode, lView, predicate, matches, elementsOnly, rootNativeNode) {\n        var e_1, _a;\n        var nativeNode = getNativeByTNodeOrNull(tNode, lView);\n        // For each type of TNode, specific logic is executed.\n        if (tNode.type === 3 /* Element */ || tNode.type === 4 /* ElementContainer */) {\n            // Case 1: the TNode is an element\n            // The native node has to be checked.\n            _addQueryMatchR3(nativeNode, predicate, matches, elementsOnly, rootNativeNode);\n            if (isComponentHost(tNode)) {\n                // If the element is the host of a component, then all nodes in its view have to be processed.\n                // Note: the component's content (tNode.child) will be processed from the insertion points.\n                var componentView = getComponentLViewByIndex(tNode.index, lView);\n                if (componentView && componentView[TVIEW].firstChild) {\n                    _queryNodeChildrenR3(componentView[TVIEW].firstChild, componentView, predicate, matches, elementsOnly, rootNativeNode);\n                }\n            }\n            else {\n                if (tNode.child) {\n                    // Otherwise, its children have to be processed.\n                    _queryNodeChildrenR3(tNode.child, lView, predicate, matches, elementsOnly, rootNativeNode);\n                }\n                // We also have to query the DOM directly in order to catch elements inserted through\n                // Renderer2. Note that this is __not__ optimal, because we're walking similar trees multiple\n                // times. ViewEngine could do it more efficiently, because all the insertions go through\n                // Renderer2, however that's not the case in Ivy. This approach is being used because:\n                // 1. Matching the ViewEngine behavior would mean potentially introducing a depedency\n                //    from `Renderer2` to Ivy which could bring Ivy code into ViewEngine.\n                // 2. We would have to make `Renderer3` \"know\" about debug nodes.\n                // 3. It allows us to capture nodes that were inserted directly via the DOM.\n                nativeNode && _queryNativeNodeDescendants(nativeNode, predicate, matches, elementsOnly);\n            }\n            // In all cases, if a dynamic container exists for this node, each view inside it has to be\n            // processed.\n            var nodeOrContainer = lView[tNode.index];\n            if (isLContainer(nodeOrContainer)) {\n                _queryNodeChildrenInContainerR3(nodeOrContainer, predicate, matches, elementsOnly, rootNativeNode);\n            }\n        }\n        else if (tNode.type === 0 /* Container */) {\n            // Case 2: the TNode is a container\n            // The native node has to be checked.\n            var lContainer = lView[tNode.index];\n            _addQueryMatchR3(lContainer[NATIVE], predicate, matches, elementsOnly, rootNativeNode);\n            // Each view inside the container has to be processed.\n            _queryNodeChildrenInContainerR3(lContainer, predicate, matches, elementsOnly, rootNativeNode);\n        }\n        else if (tNode.type === 1 /* Projection */) {\n            // Case 3: the TNode is a projection insertion point (i.e. a <ng-content>).\n            // The nodes projected at this location all need to be processed.\n            var componentView = lView[DECLARATION_COMPONENT_VIEW];\n            var componentHost = componentView[T_HOST];\n            var head = componentHost.projection[tNode.projection];\n            if (Array.isArray(head)) {\n                try {\n                    for (var head_1 = __values(head), head_1_1 = head_1.next(); !head_1_1.done; head_1_1 = head_1.next()) {\n                        var nativeNode_1 = head_1_1.value;\n                        _addQueryMatchR3(nativeNode_1, predicate, matches, elementsOnly, rootNativeNode);\n                    }\n                }\n                catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                finally {\n                    try {\n                        if (head_1_1 && !head_1_1.done && (_a = head_1.return)) _a.call(head_1);\n                    }\n                    finally { if (e_1) throw e_1.error; }\n                }\n            }\n            else if (head) {\n                var nextLView = componentView[PARENT];\n                var nextTNode = nextLView[TVIEW].data[head.index];\n                _queryNodeChildrenR3(nextTNode, nextLView, predicate, matches, elementsOnly, rootNativeNode);\n            }\n        }\n        else if (tNode.child) {\n            // Case 4: the TNode is a view.\n            _queryNodeChildrenR3(tNode.child, lView, predicate, matches, elementsOnly, rootNativeNode);\n        }\n        // We don't want to go to the next sibling of the root node.\n        if (rootNativeNode !== nativeNode) {\n            // To determine the next node to be processed, we need to use the next or the projectionNext\n            // link, depending on whether the current node has been projected.\n            var nextTNode = (tNode.flags & 4 /* isProjected */) ? tNode.projectionNext : tNode.next;\n            if (nextTNode) {\n                _queryNodeChildrenR3(nextTNode, lView, predicate, matches, elementsOnly, rootNativeNode);\n            }\n        }\n    }\n    /**\n     * Process all TNodes in a given container.\n     *\n     * @param lContainer the container to be processed\n     * @param predicate the predicate to match\n     * @param matches the list of positive matches\n     * @param elementsOnly whether only elements should be searched\n     * @param rootNativeNode the root native node on which predicate should not be matched\n     */\n    function _queryNodeChildrenInContainerR3(lContainer, predicate, matches, elementsOnly, rootNativeNode) {\n        for (var i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n            var childView = lContainer[i];\n            _queryNodeChildrenR3(childView[TVIEW].node, childView, predicate, matches, elementsOnly, rootNativeNode);\n        }\n    }\n    /**\n     * Match the current native node against the predicate.\n     *\n     * @param nativeNode the current native node\n     * @param predicate the predicate to match\n     * @param matches the list of positive matches\n     * @param elementsOnly whether only elements should be searched\n     * @param rootNativeNode the root native node on which predicate should not be matched\n     */\n    function _addQueryMatchR3(nativeNode, predicate, matches, elementsOnly, rootNativeNode) {\n        if (rootNativeNode !== nativeNode) {\n            var debugNode = getDebugNode$1(nativeNode);\n            if (!debugNode) {\n                return;\n            }\n            // Type of the \"predicate and \"matches\" array are set based on the value of\n            // the \"elementsOnly\" parameter. TypeScript is not able to properly infer these\n            // types with generics, so we manually cast the parameters accordingly.\n            if (elementsOnly && debugNode instanceof DebugElement__POST_R3__ && predicate(debugNode) &&\n                matches.indexOf(debugNode) === -1) {\n                matches.push(debugNode);\n            }\n            else if (!elementsOnly && predicate(debugNode) &&\n                matches.indexOf(debugNode) === -1) {\n                matches.push(debugNode);\n            }\n        }\n    }\n    /**\n     * Match all the descendants of a DOM node against a predicate.\n     *\n     * @param nativeNode the current native node\n     * @param predicate the predicate to match\n     * @param matches the list of positive matches\n     * @param elementsOnly whether only elements should be searched\n     */\n    function _queryNativeNodeDescendants(parentNode, predicate, matches, elementsOnly) {\n        var nodes = parentNode.childNodes;\n        var length = nodes.length;\n        for (var i = 0; i < length; i++) {\n            var node = nodes[i];\n            var debugNode = getDebugNode$1(node);\n            if (debugNode) {\n                if (elementsOnly && debugNode instanceof DebugElement__POST_R3__ && predicate(debugNode) &&\n                    matches.indexOf(debugNode) === -1) {\n                    matches.push(debugNode);\n                }\n                else if (!elementsOnly && predicate(debugNode) &&\n                    matches.indexOf(debugNode) === -1) {\n                    matches.push(debugNode);\n                }\n                _queryNativeNodeDescendants(node, predicate, matches, elementsOnly);\n            }\n        }\n    }\n    /**\n     * Iterates through the property bindings for a given node and generates\n     * a map of property names to values. This map only contains property bindings\n     * defined in templates, not in host bindings.\n     */\n    function collectPropertyBindings(properties, tNode, lView, tData) {\n        var bindingIndexes = tNode.propertyBindings;\n        if (bindingIndexes !== null) {\n            for (var i = 0; i < bindingIndexes.length; i++) {\n                var bindingIndex = bindingIndexes[i];\n                var propMetadata = tData[bindingIndex];\n                var metadataParts = propMetadata.split(INTERPOLATION_DELIMITER);\n                var propertyName = metadataParts[0];\n                if (metadataParts.length > 1) {\n                    var value = metadataParts[1];\n                    for (var j = 1; j < metadataParts.length - 1; j++) {\n                        value += renderStringify(lView[bindingIndex + j - 1]) + metadataParts[j + 1];\n                    }\n                    properties[propertyName] = value;\n                }\n                else {\n                    properties[propertyName] = lView[bindingIndex];\n                }\n            }\n        }\n    }\n    // Need to keep the nodes in a global Map so that multiple angular apps are supported.\n    var _nativeNodeToDebugNode = new Map();\n    function getDebugNode__PRE_R3__(nativeNode) {\n        return _nativeNodeToDebugNode.get(nativeNode) || null;\n    }\n    var NG_DEBUG_PROPERTY = '__ng_debug__';\n    function getDebugNode__POST_R3__(nativeNode) {\n        if (nativeNode instanceof Node) {\n            if (!(nativeNode.hasOwnProperty(NG_DEBUG_PROPERTY))) {\n                nativeNode[NG_DEBUG_PROPERTY] = nativeNode.nodeType == Node.ELEMENT_NODE ?\n                    new DebugElement__POST_R3__(nativeNode) :\n                    new DebugNode__POST_R3__(nativeNode);\n            }\n            return nativeNode[NG_DEBUG_PROPERTY];\n        }\n        return null;\n    }\n    /**\n     * @publicApi\n     */\n    var getDebugNode$1 = getDebugNode__POST_R3__;\n    function getAllDebugNodes() {\n        return Array.from(_nativeNodeToDebugNode.values());\n    }\n    function indexDebugNode(node) {\n        _nativeNodeToDebugNode.set(node.nativeNode, node);\n    }\n    function removeDebugNodeFromIndex(node) {\n        _nativeNodeToDebugNode.delete(node.nativeNode);\n    }\n    /**\n     * @publicApi\n     */\n    var DebugNode = DebugNode__POST_R3__;\n    /**\n     * @publicApi\n     */\n    var DebugElement = DebugElement__POST_R3__;\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var _CORE_PLATFORM_PROVIDERS = [\n        // Set a default platform name for platforms that don't set it explicitly.\n        { provide: PLATFORM_ID, useValue: 'unknown' },\n        { provide: PlatformRef, deps: [Injector] },\n        { provide: TestabilityRegistry, deps: [] },\n        { provide: Console, deps: [] },\n    ];\n    /**\n     * This platform has to be included in any other platform\n     *\n     * @publicApi\n     */\n    var platformCore = createPlatformFactory(null, 'core', _CORE_PLATFORM_PROVIDERS);\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function _iterableDiffersFactory() {\n        return defaultIterableDiffers;\n    }\n    function _keyValueDiffersFactory() {\n        return defaultKeyValueDiffers;\n    }\n    function _localeFactory(locale) {\n        locale = locale || getGlobalLocale();\n        if (ivyEnabled) {\n            setLocaleId(locale);\n        }\n        return locale;\n    }\n    /**\n     * Work out the locale from the potential global properties.\n     *\n     * * Closure Compiler: use `goog.LOCALE`.\n     * * Ivy enabled: use `$localize.locale`\n     */\n    function getGlobalLocale() {\n        if (typeof ngI18nClosureMode !== 'undefined' && ngI18nClosureMode &&\n            typeof goog !== 'undefined' && goog.LOCALE !== 'en') {\n            // * The default `goog.LOCALE` value is `en`, while Angular used `en-US`.\n            // * In order to preserve backwards compatibility, we use Angular default value over\n            //   Closure Compiler's one.\n            return goog.LOCALE;\n        }\n        else {\n            // KEEP `typeof $localize !== 'undefined' && $localize.locale` IN SYNC WITH THE LOCALIZE\n            // COMPILE-TIME INLINER.\n            //\n            // * During compile time inlining of translations the expression will be replaced\n            //   with a string literal that is the current locale. Other forms of this expression are not\n            //   guaranteed to be replaced.\n            //\n            // * During runtime translation evaluation, the developer is required to set `$localize.locale`\n            //   if required, or just to provide their own `LOCALE_ID` provider.\n            return (ivyEnabled && typeof $localize !== 'undefined' && $localize.locale) ||\n                DEFAULT_LOCALE_ID;\n        }\n    }\n    /**\n     * A built-in [dependency injection token](guide/glossary#di-token)\n     * that is used to configure the root injector for bootstrapping.\n     */\n    var APPLICATION_MODULE_PROVIDERS = [\n        {\n            provide: ApplicationRef,\n            useClass: ApplicationRef,\n            deps: [NgZone, Console, Injector, ErrorHandler, ComponentFactoryResolver, ApplicationInitStatus]\n        },\n        { provide: SCHEDULER, deps: [NgZone], useFactory: zoneSchedulerFactory },\n        {\n            provide: ApplicationInitStatus,\n            useClass: ApplicationInitStatus,\n            deps: [[new Optional(), APP_INITIALIZER]]\n        },\n        { provide: Compiler, useClass: Compiler, deps: [] },\n        APP_ID_RANDOM_PROVIDER,\n        { provide: IterableDiffers, useFactory: _iterableDiffersFactory, deps: [] },\n        { provide: KeyValueDiffers, useFactory: _keyValueDiffersFactory, deps: [] },\n        {\n            provide: LOCALE_ID$1,\n            useFactory: _localeFactory,\n            deps: [[new Inject(LOCALE_ID$1), new Optional(), new SkipSelf()]]\n        },\n        { provide: DEFAULT_CURRENCY_CODE, useValue: USD_CURRENCY_CODE },\n    ];\n    /**\n     * Schedule work at next available slot.\n     *\n     * In Ivy this is just `requestAnimationFrame`. For compatibility reasons when bootstrapped\n     * using `platformRef.bootstrap` we need to use `NgZone.onStable` as the scheduling mechanism.\n     * This overrides the scheduling mechanism in Ivy to `NgZone.onStable`.\n     *\n     * @param ngZone NgZone to use for scheduling.\n     */\n    function zoneSchedulerFactory(ngZone) {\n        var queue = [];\n        ngZone.onStable.subscribe(function () {\n            while (queue.length) {\n                queue.pop()();\n            }\n        });\n        return function (fn) { queue.push(fn); };\n    }\n    /**\n     * Configures the root injector for an app with\n     * providers of `@angular/core` dependencies that `ApplicationRef` needs\n     * to bootstrap components.\n     *\n     * Re-exported by `BrowserModule`, which is included automatically in the root\n     * `AppModule` when you create a new app with the CLI `new` command.\n     *\n     * @publicApi\n     */\n    var ApplicationModule = /** @class */ (function () {\n        // Inject ApplicationRef to make it eager...\n        function ApplicationModule(appRef) {\n        }\n        ApplicationModule.ɵmod = ɵɵdefineNgModule({ type: ApplicationModule });\n        ApplicationModule.ɵinj = ɵɵdefineInjector({ factory: function ApplicationModule_Factory(t) { return new (t || ApplicationModule)(ɵɵinject(ApplicationRef)); }, providers: APPLICATION_MODULE_PROVIDERS });\n        return ApplicationModule;\n    }());\n    /*@__PURE__*/ (function () { setClassMetadata(ApplicationModule, [{\n            type: NgModule,\n            args: [{ providers: APPLICATION_MODULE_PROVIDERS }]\n        }], function () { return [{ type: ApplicationRef }]; }, null); })();\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function anchorDef(flags, matchedQueriesDsl, ngContentIndex, childCount, handleEvent, templateFactory) {\n        flags |= 1 /* TypeElement */;\n        var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;\n        var template = templateFactory ? resolveDefinition(templateFactory) : null;\n        return {\n            // will bet set by the view definition\n            nodeIndex: -1,\n            parent: null,\n            renderParent: null,\n            bindingIndex: -1,\n            outputIndex: -1,\n            // regular values\n            flags: flags,\n            checkIndex: -1,\n            childFlags: 0,\n            directChildFlags: 0,\n            childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references, ngContentIndex: ngContentIndex, childCount: childCount,\n            bindings: [],\n            bindingFlags: 0,\n            outputs: [],\n            element: {\n                ns: null,\n                name: null,\n                attrs: null, template: template,\n                componentProvider: null,\n                componentView: null,\n                componentRendererType: null,\n                publicProviders: null,\n                allProviders: null,\n                handleEvent: handleEvent || NOOP\n            },\n            provider: null,\n            text: null,\n            query: null,\n            ngContent: null\n        };\n    }\n    function elementDef(checkIndex, flags, matchedQueriesDsl, ngContentIndex, childCount, namespaceAndName, fixedAttrs, bindings, outputs, handleEvent, componentView, componentRendererType) {\n        var _a;\n        if (fixedAttrs === void 0) { fixedAttrs = []; }\n        if (!handleEvent) {\n            handleEvent = NOOP;\n        }\n        var _b = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _b.matchedQueries, references = _b.references, matchedQueryIds = _b.matchedQueryIds;\n        var ns = null;\n        var name = null;\n        if (namespaceAndName) {\n            _a = __read(splitNamespace(namespaceAndName), 2), ns = _a[0], name = _a[1];\n        }\n        bindings = bindings || [];\n        var bindingDefs = [];\n        for (var i = 0; i < bindings.length; i++) {\n            var _c = __read(bindings[i], 3), bindingFlags = _c[0], namespaceAndName_1 = _c[1], suffixOrSecurityContext = _c[2];\n            var _d = __read(splitNamespace(namespaceAndName_1), 2), ns_1 = _d[0], name_1 = _d[1];\n            var securityContext = undefined;\n            var suffix = undefined;\n            switch (bindingFlags & 15 /* Types */) {\n                case 4 /* TypeElementStyle */:\n                    suffix = suffixOrSecurityContext;\n                    break;\n                case 1 /* TypeElementAttribute */:\n                case 8 /* TypeProperty */:\n                    securityContext = suffixOrSecurityContext;\n                    break;\n            }\n            bindingDefs[i] =\n                { flags: bindingFlags, ns: ns_1, name: name_1, nonMinifiedName: name_1, securityContext: securityContext, suffix: suffix };\n        }\n        outputs = outputs || [];\n        var outputDefs = [];\n        for (var i = 0; i < outputs.length; i++) {\n            var _e = __read(outputs[i], 2), target = _e[0], eventName = _e[1];\n            outputDefs[i] = {\n                type: 0 /* ElementOutput */,\n                target: target, eventName: eventName,\n                propName: null\n            };\n        }\n        fixedAttrs = fixedAttrs || [];\n        var attrs = fixedAttrs.map(function (_a) {\n            var _b = __read(_a, 2), namespaceAndName = _b[0], value = _b[1];\n            var _c = __read(splitNamespace(namespaceAndName), 2), ns = _c[0], name = _c[1];\n            return [ns, name, value];\n        });\n        componentRendererType = resolveRendererType2(componentRendererType);\n        if (componentView) {\n            flags |= 33554432 /* ComponentView */;\n        }\n        flags |= 1 /* TypeElement */;\n        return {\n            // will bet set by the view definition\n            nodeIndex: -1,\n            parent: null,\n            renderParent: null,\n            bindingIndex: -1,\n            outputIndex: -1,\n            // regular values\n            checkIndex: checkIndex,\n            flags: flags,\n            childFlags: 0,\n            directChildFlags: 0,\n            childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references, ngContentIndex: ngContentIndex, childCount: childCount,\n            bindings: bindingDefs,\n            bindingFlags: calcBindingFlags(bindingDefs),\n            outputs: outputDefs,\n            element: {\n                ns: ns,\n                name: name,\n                attrs: attrs,\n                template: null,\n                // will bet set by the view definition\n                componentProvider: null,\n                componentView: componentView || null,\n                componentRendererType: componentRendererType,\n                publicProviders: null,\n                allProviders: null,\n                handleEvent: handleEvent || NOOP,\n            },\n            provider: null,\n            text: null,\n            query: null,\n            ngContent: null\n        };\n    }\n    function createElement(view, renderHost, def) {\n        var elDef = def.element;\n        var rootSelectorOrNode = view.root.selectorOrNode;\n        var renderer = view.renderer;\n        var el;\n        if (view.parent || !rootSelectorOrNode) {\n            if (elDef.name) {\n                el = renderer.createElement(elDef.name, elDef.ns);\n            }\n            else {\n                el = renderer.createComment('');\n            }\n            var parentEl = getParentRenderElement(view, renderHost, def);\n            if (parentEl) {\n                renderer.appendChild(parentEl, el);\n            }\n        }\n        else {\n            // when using native Shadow DOM, do not clear the root element contents to allow slot projection\n            var preserveContent = (!!elDef.componentRendererType &&\n                elDef.componentRendererType.encapsulation === exports.ViewEncapsulation.ShadowDom);\n            el = renderer.selectRootElement(rootSelectorOrNode, preserveContent);\n        }\n        if (elDef.attrs) {\n            for (var i = 0; i < elDef.attrs.length; i++) {\n                var _a = __read(elDef.attrs[i], 3), ns = _a[0], name_2 = _a[1], value = _a[2];\n                renderer.setAttribute(el, name_2, value, ns);\n            }\n        }\n        return el;\n    }\n    function listenToElementOutputs(view, compView, def, el) {\n        for (var i = 0; i < def.outputs.length; i++) {\n            var output = def.outputs[i];\n            var handleEventClosure = renderEventHandlerClosure(view, def.nodeIndex, elementEventFullName(output.target, output.eventName));\n            var listenTarget = output.target;\n            var listenerView = view;\n            if (output.target === 'component') {\n                listenTarget = null;\n                listenerView = compView;\n            }\n            var disposable = listenerView.renderer.listen(listenTarget || el, output.eventName, handleEventClosure);\n            view.disposables[def.outputIndex + i] = disposable;\n        }\n    }\n    function renderEventHandlerClosure(view, index, eventName) {\n        return function (event) { return dispatchEvent(view, index, eventName, event); };\n    }\n    function checkAndUpdateElementInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n        var bindLen = def.bindings.length;\n        var changed = false;\n        if (bindLen > 0 && checkAndUpdateElementValue(view, def, 0, v0))\n            changed = true;\n        if (bindLen > 1 && checkAndUpdateElementValue(view, def, 1, v1))\n            changed = true;\n        if (bindLen > 2 && checkAndUpdateElementValue(view, def, 2, v2))\n            changed = true;\n        if (bindLen > 3 && checkAndUpdateElementValue(view, def, 3, v3))\n            changed = true;\n        if (bindLen > 4 && checkAndUpdateElementValue(view, def, 4, v4))\n            changed = true;\n        if (bindLen > 5 && checkAndUpdateElementValue(view, def, 5, v5))\n            changed = true;\n        if (bindLen > 6 && checkAndUpdateElementValue(view, def, 6, v6))\n            changed = true;\n        if (bindLen > 7 && checkAndUpdateElementValue(view, def, 7, v7))\n            changed = true;\n        if (bindLen > 8 && checkAndUpdateElementValue(view, def, 8, v8))\n            changed = true;\n        if (bindLen > 9 && checkAndUpdateElementValue(view, def, 9, v9))\n            changed = true;\n        return changed;\n    }\n    function checkAndUpdateElementDynamic(view, def, values) {\n        var changed = false;\n        for (var i = 0; i < values.length; i++) {\n            if (checkAndUpdateElementValue(view, def, i, values[i]))\n                changed = true;\n        }\n        return changed;\n    }\n    function checkAndUpdateElementValue(view, def, bindingIdx, value) {\n        if (!checkAndUpdateBinding(view, def, bindingIdx, value)) {\n            return false;\n        }\n        var binding = def.bindings[bindingIdx];\n        var elData = asElementData(view, def.nodeIndex);\n        var renderNode = elData.renderElement;\n        var name = binding.name;\n        switch (binding.flags & 15 /* Types */) {\n            case 1 /* TypeElementAttribute */:\n                setElementAttribute(view, binding, renderNode, binding.ns, name, value);\n                break;\n            case 2 /* TypeElementClass */:\n                setElementClass(view, renderNode, name, value);\n                break;\n            case 4 /* TypeElementStyle */:\n                setElementStyle(view, binding, renderNode, name, value);\n                break;\n            case 8 /* TypeProperty */:\n                var bindView = (def.flags & 33554432 /* ComponentView */ &&\n                    binding.flags & 32 /* SyntheticHostProperty */) ?\n                    elData.componentView :\n                    view;\n                setElementProperty(bindView, binding, renderNode, name, value);\n                break;\n        }\n        return true;\n    }\n    function setElementAttribute(view, binding, renderNode, ns, name, value) {\n        var securityContext = binding.securityContext;\n        var renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;\n        renderValue = renderValue != null ? renderValue.toString() : null;\n        var renderer = view.renderer;\n        if (value != null) {\n            renderer.setAttribute(renderNode, name, renderValue, ns);\n        }\n        else {\n            renderer.removeAttribute(renderNode, name, ns);\n        }\n    }\n    function setElementClass(view, renderNode, name, value) {\n        var renderer = view.renderer;\n        if (value) {\n            renderer.addClass(renderNode, name);\n        }\n        else {\n            renderer.removeClass(renderNode, name);\n        }\n    }\n    function setElementStyle(view, binding, renderNode, name, value) {\n        var renderValue = view.root.sanitizer.sanitize(exports.SecurityContext.STYLE, value);\n        if (renderValue != null) {\n            renderValue = renderValue.toString();\n            var unit = binding.suffix;\n            if (unit != null) {\n                renderValue = renderValue + unit;\n            }\n        }\n        else {\n            renderValue = null;\n        }\n        var renderer = view.renderer;\n        if (renderValue != null) {\n            renderer.setStyle(renderNode, name, renderValue);\n        }\n        else {\n            renderer.removeStyle(renderNode, name);\n        }\n    }\n    function setElementProperty(view, binding, renderNode, name, value) {\n        var securityContext = binding.securityContext;\n        var renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;\n        view.renderer.setProperty(renderNode, name, renderValue);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function queryDef(flags, id, bindings) {\n        var bindingDefs = [];\n        for (var propName in bindings) {\n            var bindingType = bindings[propName];\n            bindingDefs.push({ propName: propName, bindingType: bindingType });\n        }\n        return {\n            // will bet set by the view definition\n            nodeIndex: -1,\n            parent: null,\n            renderParent: null,\n            bindingIndex: -1,\n            outputIndex: -1,\n            // regular values\n            // TODO(vicb): check\n            checkIndex: -1, flags: flags,\n            childFlags: 0,\n            directChildFlags: 0,\n            childMatchedQueries: 0,\n            ngContentIndex: -1,\n            matchedQueries: {},\n            matchedQueryIds: 0,\n            references: {},\n            childCount: 0,\n            bindings: [],\n            bindingFlags: 0,\n            outputs: [],\n            element: null,\n            provider: null,\n            text: null,\n            query: { id: id, filterId: filterQueryId(id), bindings: bindingDefs },\n            ngContent: null\n        };\n    }\n    function createQuery() {\n        return new QueryList();\n    }\n    function dirtyParentQueries(view) {\n        var queryIds = view.def.nodeMatchedQueries;\n        while (view.parent && isEmbeddedView(view)) {\n            var tplDef = view.parentNodeDef;\n            view = view.parent;\n            // content queries\n            var end = tplDef.nodeIndex + tplDef.childCount;\n            for (var i = 0; i <= end; i++) {\n                var nodeDef = view.def.nodes[i];\n                if ((nodeDef.flags & 67108864 /* TypeContentQuery */) &&\n                    (nodeDef.flags & 536870912 /* DynamicQuery */) &&\n                    (nodeDef.query.filterId & queryIds) === nodeDef.query.filterId) {\n                    asQueryList(view, i).setDirty();\n                }\n                if ((nodeDef.flags & 1 /* TypeElement */ && i + nodeDef.childCount < tplDef.nodeIndex) ||\n                    !(nodeDef.childFlags & 67108864 /* TypeContentQuery */) ||\n                    !(nodeDef.childFlags & 536870912 /* DynamicQuery */)) {\n                    // skip elements that don't contain the template element or no query.\n                    i += nodeDef.childCount;\n                }\n            }\n        }\n        // view queries\n        if (view.def.nodeFlags & 134217728 /* TypeViewQuery */) {\n            for (var i = 0; i < view.def.nodes.length; i++) {\n                var nodeDef = view.def.nodes[i];\n                if ((nodeDef.flags & 134217728 /* TypeViewQuery */) && (nodeDef.flags & 536870912 /* DynamicQuery */)) {\n                    asQueryList(view, i).setDirty();\n                }\n                // only visit the root nodes\n                i += nodeDef.childCount;\n            }\n        }\n    }\n    function checkAndUpdateQuery(view, nodeDef) {\n        var queryList = asQueryList(view, nodeDef.nodeIndex);\n        if (!queryList.dirty) {\n            return;\n        }\n        var directiveInstance;\n        var newValues = undefined;\n        if (nodeDef.flags & 67108864 /* TypeContentQuery */) {\n            var elementDef = nodeDef.parent.parent;\n            newValues = calcQueryValues(view, elementDef.nodeIndex, elementDef.nodeIndex + elementDef.childCount, nodeDef.query, []);\n            directiveInstance = asProviderData(view, nodeDef.parent.nodeIndex).instance;\n        }\n        else if (nodeDef.flags & 134217728 /* TypeViewQuery */) {\n            newValues = calcQueryValues(view, 0, view.def.nodes.length - 1, nodeDef.query, []);\n            directiveInstance = view.component;\n        }\n        queryList.reset(newValues);\n        var bindings = nodeDef.query.bindings;\n        var notify = false;\n        for (var i = 0; i < bindings.length; i++) {\n            var binding = bindings[i];\n            var boundValue = void 0;\n            switch (binding.bindingType) {\n                case 0 /* First */:\n                    boundValue = queryList.first;\n                    break;\n                case 1 /* All */:\n                    boundValue = queryList;\n                    notify = true;\n                    break;\n            }\n            directiveInstance[binding.propName] = boundValue;\n        }\n        if (notify) {\n            queryList.notifyOnChanges();\n        }\n    }\n    function calcQueryValues(view, startIndex, endIndex, queryDef, values) {\n        for (var i = startIndex; i <= endIndex; i++) {\n            var nodeDef = view.def.nodes[i];\n            var valueType = nodeDef.matchedQueries[queryDef.id];\n            if (valueType != null) {\n                values.push(getQueryValue(view, nodeDef, valueType));\n            }\n            if (nodeDef.flags & 1 /* TypeElement */ && nodeDef.element.template &&\n                (nodeDef.element.template.nodeMatchedQueries & queryDef.filterId) ===\n                    queryDef.filterId) {\n                var elementData = asElementData(view, i);\n                // check embedded views that were attached at the place of their template,\n                // but process child nodes first if some match the query (see issue #16568)\n                if ((nodeDef.childMatchedQueries & queryDef.filterId) === queryDef.filterId) {\n                    calcQueryValues(view, i + 1, i + nodeDef.childCount, queryDef, values);\n                    i += nodeDef.childCount;\n                }\n                if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n                    var embeddedViews = elementData.viewContainer._embeddedViews;\n                    for (var k = 0; k < embeddedViews.length; k++) {\n                        var embeddedView = embeddedViews[k];\n                        var dvc = declaredViewContainer(embeddedView);\n                        if (dvc && dvc === elementData) {\n                            calcQueryValues(embeddedView, 0, embeddedView.def.nodes.length - 1, queryDef, values);\n                        }\n                    }\n                }\n                var projectedViews = elementData.template._projectedViews;\n                if (projectedViews) {\n                    for (var k = 0; k < projectedViews.length; k++) {\n                        var projectedView = projectedViews[k];\n                        calcQueryValues(projectedView, 0, projectedView.def.nodes.length - 1, queryDef, values);\n                    }\n                }\n            }\n            if ((nodeDef.childMatchedQueries & queryDef.filterId) !== queryDef.filterId) {\n                // if no child matches the query, skip the children.\n                i += nodeDef.childCount;\n            }\n        }\n        return values;\n    }\n    function getQueryValue(view, nodeDef, queryValueType) {\n        if (queryValueType != null) {\n            // a match\n            switch (queryValueType) {\n                case 1 /* RenderElement */:\n                    return asElementData(view, nodeDef.nodeIndex).renderElement;\n                case 0 /* ElementRef */:\n                    return new ElementRef(asElementData(view, nodeDef.nodeIndex).renderElement);\n                case 2 /* TemplateRef */:\n                    return asElementData(view, nodeDef.nodeIndex).template;\n                case 3 /* ViewContainerRef */:\n                    return asElementData(view, nodeDef.nodeIndex).viewContainer;\n                case 4 /* Provider */:\n                    return asProviderData(view, nodeDef.nodeIndex).instance;\n            }\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function ngContentDef(ngContentIndex, index) {\n        return {\n            // will bet set by the view definition\n            nodeIndex: -1,\n            parent: null,\n            renderParent: null,\n            bindingIndex: -1,\n            outputIndex: -1,\n            // regular values\n            checkIndex: -1,\n            flags: 8 /* TypeNgContent */,\n            childFlags: 0,\n            directChildFlags: 0,\n            childMatchedQueries: 0,\n            matchedQueries: {},\n            matchedQueryIds: 0,\n            references: {}, ngContentIndex: ngContentIndex,\n            childCount: 0,\n            bindings: [],\n            bindingFlags: 0,\n            outputs: [],\n            element: null,\n            provider: null,\n            text: null,\n            query: null,\n            ngContent: { index: index }\n        };\n    }\n    function appendNgContent(view, renderHost, def) {\n        var parentEl = getParentRenderElement(view, renderHost, def);\n        if (!parentEl) {\n            // Nothing to do if there is no parent element.\n            return;\n        }\n        var ngContentIndex = def.ngContent.index;\n        visitProjectedRenderNodes(view, ngContentIndex, 1 /* AppendChild */, parentEl, null, undefined);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function purePipeDef(checkIndex, argCount) {\n        // argCount + 1 to include the pipe as first arg\n        return _pureExpressionDef(128 /* TypePurePipe */, checkIndex, newArray(argCount + 1));\n    }\n    function pureArrayDef(checkIndex, argCount) {\n        return _pureExpressionDef(32 /* TypePureArray */, checkIndex, newArray(argCount));\n    }\n    function pureObjectDef(checkIndex, propToIndex) {\n        var keys = Object.keys(propToIndex);\n        var nbKeys = keys.length;\n        var propertyNames = [];\n        for (var i = 0; i < nbKeys; i++) {\n            var key = keys[i];\n            var index = propToIndex[key];\n            propertyNames.push(key);\n        }\n        return _pureExpressionDef(64 /* TypePureObject */, checkIndex, propertyNames);\n    }\n    function _pureExpressionDef(flags, checkIndex, propertyNames) {\n        var bindings = [];\n        for (var i = 0; i < propertyNames.length; i++) {\n            var prop = propertyNames[i];\n            bindings.push({\n                flags: 8 /* TypeProperty */,\n                name: prop,\n                ns: null,\n                nonMinifiedName: prop,\n                securityContext: null,\n                suffix: null\n            });\n        }\n        return {\n            // will bet set by the view definition\n            nodeIndex: -1,\n            parent: null,\n            renderParent: null,\n            bindingIndex: -1,\n            outputIndex: -1,\n            // regular values\n            checkIndex: checkIndex,\n            flags: flags,\n            childFlags: 0,\n            directChildFlags: 0,\n            childMatchedQueries: 0,\n            matchedQueries: {},\n            matchedQueryIds: 0,\n            references: {},\n            ngContentIndex: -1,\n            childCount: 0, bindings: bindings,\n            bindingFlags: calcBindingFlags(bindings),\n            outputs: [],\n            element: null,\n            provider: null,\n            text: null,\n            query: null,\n            ngContent: null\n        };\n    }\n    function createPureExpression(view, def) {\n        return { value: undefined };\n    }\n    function checkAndUpdatePureExpressionInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n        var bindings = def.bindings;\n        var changed = false;\n        var bindLen = bindings.length;\n        if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))\n            changed = true;\n        if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))\n            changed = true;\n        if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))\n            changed = true;\n        if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))\n            changed = true;\n        if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))\n            changed = true;\n        if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))\n            changed = true;\n        if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))\n            changed = true;\n        if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))\n            changed = true;\n        if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))\n            changed = true;\n        if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))\n            changed = true;\n        if (changed) {\n            var data = asPureExpressionData(view, def.nodeIndex);\n            var value = void 0;\n            switch (def.flags & 201347067 /* Types */) {\n                case 32 /* TypePureArray */:\n                    value = [];\n                    if (bindLen > 0)\n                        value.push(v0);\n                    if (bindLen > 1)\n                        value.push(v1);\n                    if (bindLen > 2)\n                        value.push(v2);\n                    if (bindLen > 3)\n                        value.push(v3);\n                    if (bindLen > 4)\n                        value.push(v4);\n                    if (bindLen > 5)\n                        value.push(v5);\n                    if (bindLen > 6)\n                        value.push(v6);\n                    if (bindLen > 7)\n                        value.push(v7);\n                    if (bindLen > 8)\n                        value.push(v8);\n                    if (bindLen > 9)\n                        value.push(v9);\n                    break;\n                case 64 /* TypePureObject */:\n                    value = {};\n                    if (bindLen > 0)\n                        value[bindings[0].name] = v0;\n                    if (bindLen > 1)\n                        value[bindings[1].name] = v1;\n                    if (bindLen > 2)\n                        value[bindings[2].name] = v2;\n                    if (bindLen > 3)\n                        value[bindings[3].name] = v3;\n                    if (bindLen > 4)\n                        value[bindings[4].name] = v4;\n                    if (bindLen > 5)\n                        value[bindings[5].name] = v5;\n                    if (bindLen > 6)\n                        value[bindings[6].name] = v6;\n                    if (bindLen > 7)\n                        value[bindings[7].name] = v7;\n                    if (bindLen > 8)\n                        value[bindings[8].name] = v8;\n                    if (bindLen > 9)\n                        value[bindings[9].name] = v9;\n                    break;\n                case 128 /* TypePurePipe */:\n                    var pipe = v0;\n                    switch (bindLen) {\n                        case 1:\n                            value = pipe.transform(v0);\n                            break;\n                        case 2:\n                            value = pipe.transform(v1);\n                            break;\n                        case 3:\n                            value = pipe.transform(v1, v2);\n                            break;\n                        case 4:\n                            value = pipe.transform(v1, v2, v3);\n                            break;\n                        case 5:\n                            value = pipe.transform(v1, v2, v3, v4);\n                            break;\n                        case 6:\n                            value = pipe.transform(v1, v2, v3, v4, v5);\n                            break;\n                        case 7:\n                            value = pipe.transform(v1, v2, v3, v4, v5, v6);\n                            break;\n                        case 8:\n                            value = pipe.transform(v1, v2, v3, v4, v5, v6, v7);\n                            break;\n                        case 9:\n                            value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8);\n                            break;\n                        case 10:\n                            value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8, v9);\n                            break;\n                    }\n                    break;\n            }\n            data.value = value;\n        }\n        return changed;\n    }\n    function checkAndUpdatePureExpressionDynamic(view, def, values) {\n        var bindings = def.bindings;\n        var changed = false;\n        for (var i = 0; i < values.length; i++) {\n            // Note: We need to loop over all values, so that\n            // the old values are updates as well!\n            if (checkAndUpdateBinding(view, def, i, values[i])) {\n                changed = true;\n            }\n        }\n        if (changed) {\n            var data = asPureExpressionData(view, def.nodeIndex);\n            var value = void 0;\n            switch (def.flags & 201347067 /* Types */) {\n                case 32 /* TypePureArray */:\n                    value = values;\n                    break;\n                case 64 /* TypePureObject */:\n                    value = {};\n                    for (var i = 0; i < values.length; i++) {\n                        value[bindings[i].name] = values[i];\n                    }\n                    break;\n                case 128 /* TypePurePipe */:\n                    var pipe = values[0];\n                    var params = values.slice(1);\n                    value = pipe.transform.apply(pipe, __spread(params));\n                    break;\n            }\n            data.value = value;\n        }\n        return changed;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function textDef(checkIndex, ngContentIndex, staticText) {\n        var bindings = [];\n        for (var i = 1; i < staticText.length; i++) {\n            bindings[i - 1] = {\n                flags: 8 /* TypeProperty */,\n                name: null,\n                ns: null,\n                nonMinifiedName: null,\n                securityContext: null,\n                suffix: staticText[i],\n            };\n        }\n        return {\n            // will bet set by the view definition\n            nodeIndex: -1,\n            parent: null,\n            renderParent: null,\n            bindingIndex: -1,\n            outputIndex: -1,\n            // regular values\n            checkIndex: checkIndex,\n            flags: 2 /* TypeText */,\n            childFlags: 0,\n            directChildFlags: 0,\n            childMatchedQueries: 0,\n            matchedQueries: {},\n            matchedQueryIds: 0,\n            references: {}, ngContentIndex: ngContentIndex,\n            childCount: 0, bindings: bindings,\n            bindingFlags: 8 /* TypeProperty */,\n            outputs: [],\n            element: null,\n            provider: null,\n            text: { prefix: staticText[0] },\n            query: null,\n            ngContent: null,\n        };\n    }\n    function createText(view, renderHost, def) {\n        var renderNode;\n        var renderer = view.renderer;\n        renderNode = renderer.createText(def.text.prefix);\n        var parentEl = getParentRenderElement(view, renderHost, def);\n        if (parentEl) {\n            renderer.appendChild(parentEl, renderNode);\n        }\n        return { renderText: renderNode };\n    }\n    function checkAndUpdateTextInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n        var changed = false;\n        var bindings = def.bindings;\n        var bindLen = bindings.length;\n        if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))\n            changed = true;\n        if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))\n            changed = true;\n        if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))\n            changed = true;\n        if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))\n            changed = true;\n        if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))\n            changed = true;\n        if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))\n            changed = true;\n        if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))\n            changed = true;\n        if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))\n            changed = true;\n        if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))\n            changed = true;\n        if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))\n            changed = true;\n        if (changed) {\n            var value = def.text.prefix;\n            if (bindLen > 0)\n                value += _addInterpolationPart(v0, bindings[0]);\n            if (bindLen > 1)\n                value += _addInterpolationPart(v1, bindings[1]);\n            if (bindLen > 2)\n                value += _addInterpolationPart(v2, bindings[2]);\n            if (bindLen > 3)\n                value += _addInterpolationPart(v3, bindings[3]);\n            if (bindLen > 4)\n                value += _addInterpolationPart(v4, bindings[4]);\n            if (bindLen > 5)\n                value += _addInterpolationPart(v5, bindings[5]);\n            if (bindLen > 6)\n                value += _addInterpolationPart(v6, bindings[6]);\n            if (bindLen > 7)\n                value += _addInterpolationPart(v7, bindings[7]);\n            if (bindLen > 8)\n                value += _addInterpolationPart(v8, bindings[8]);\n            if (bindLen > 9)\n                value += _addInterpolationPart(v9, bindings[9]);\n            var renderNode = asTextData(view, def.nodeIndex).renderText;\n            view.renderer.setValue(renderNode, value);\n        }\n        return changed;\n    }\n    function checkAndUpdateTextDynamic(view, def, values) {\n        var bindings = def.bindings;\n        var changed = false;\n        for (var i = 0; i < values.length; i++) {\n            // Note: We need to loop over all values, so that\n            // the old values are updates as well!\n            if (checkAndUpdateBinding(view, def, i, values[i])) {\n                changed = true;\n            }\n        }\n        if (changed) {\n            var value = '';\n            for (var i = 0; i < values.length; i++) {\n                value = value + _addInterpolationPart(values[i], bindings[i]);\n            }\n            value = def.text.prefix + value;\n            var renderNode = asTextData(view, def.nodeIndex).renderText;\n            view.renderer.setValue(renderNode, value);\n        }\n        return changed;\n    }\n    function _addInterpolationPart(value, binding) {\n        var valueStr = value != null ? value.toString() : '';\n        return valueStr + binding.suffix;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function viewDef(flags, nodes, updateDirectives, updateRenderer) {\n        // clone nodes and set auto calculated values\n        var viewBindingCount = 0;\n        var viewDisposableCount = 0;\n        var viewNodeFlags = 0;\n        var viewRootNodeFlags = 0;\n        var viewMatchedQueries = 0;\n        var currentParent = null;\n        var currentRenderParent = null;\n        var currentElementHasPublicProviders = false;\n        var currentElementHasPrivateProviders = false;\n        var lastRenderRootNode = null;\n        for (var i = 0; i < nodes.length; i++) {\n            var node = nodes[i];\n            node.nodeIndex = i;\n            node.parent = currentParent;\n            node.bindingIndex = viewBindingCount;\n            node.outputIndex = viewDisposableCount;\n            node.renderParent = currentRenderParent;\n            viewNodeFlags |= node.flags;\n            viewMatchedQueries |= node.matchedQueryIds;\n            if (node.element) {\n                var elDef = node.element;\n                elDef.publicProviders =\n                    currentParent ? currentParent.element.publicProviders : Object.create(null);\n                elDef.allProviders = elDef.publicProviders;\n                // Note: We assume that all providers of an element are before any child element!\n                currentElementHasPublicProviders = false;\n                currentElementHasPrivateProviders = false;\n                if (node.element.template) {\n                    viewMatchedQueries |= node.element.template.nodeMatchedQueries;\n                }\n            }\n            validateNode(currentParent, node, nodes.length);\n            viewBindingCount += node.bindings.length;\n            viewDisposableCount += node.outputs.length;\n            if (!currentRenderParent && (node.flags & 3 /* CatRenderNode */)) {\n                lastRenderRootNode = node;\n            }\n            if (node.flags & 20224 /* CatProvider */) {\n                if (!currentElementHasPublicProviders) {\n                    currentElementHasPublicProviders = true;\n                    // Use prototypical inheritance to not get O(n^2) complexity...\n                    currentParent.element.publicProviders =\n                        Object.create(currentParent.element.publicProviders);\n                    currentParent.element.allProviders = currentParent.element.publicProviders;\n                }\n                var isPrivateService = (node.flags & 8192 /* PrivateProvider */) !== 0;\n                var isComponent = (node.flags & 32768 /* Component */) !== 0;\n                if (!isPrivateService || isComponent) {\n                    currentParent.element.publicProviders[tokenKey(node.provider.token)] = node;\n                }\n                else {\n                    if (!currentElementHasPrivateProviders) {\n                        currentElementHasPrivateProviders = true;\n                        // Use prototypical inheritance to not get O(n^2) complexity...\n                        currentParent.element.allProviders =\n                            Object.create(currentParent.element.publicProviders);\n                    }\n                    currentParent.element.allProviders[tokenKey(node.provider.token)] = node;\n                }\n                if (isComponent) {\n                    currentParent.element.componentProvider = node;\n                }\n            }\n            if (currentParent) {\n                currentParent.childFlags |= node.flags;\n                currentParent.directChildFlags |= node.flags;\n                currentParent.childMatchedQueries |= node.matchedQueryIds;\n                if (node.element && node.element.template) {\n                    currentParent.childMatchedQueries |= node.element.template.nodeMatchedQueries;\n                }\n            }\n            else {\n                viewRootNodeFlags |= node.flags;\n            }\n            if (node.childCount > 0) {\n                currentParent = node;\n                if (!isNgContainer(node)) {\n                    currentRenderParent = node;\n                }\n            }\n            else {\n                // When the current node has no children, check if it is the last children of its parent.\n                // When it is, propagate the flags up.\n                // The loop is required because an element could be the last transitive children of several\n                // elements. We loop to either the root or the highest opened element (= with remaining\n                // children)\n                while (currentParent && i === currentParent.nodeIndex + currentParent.childCount) {\n                    var newParent = currentParent.parent;\n                    if (newParent) {\n                        newParent.childFlags |= currentParent.childFlags;\n                        newParent.childMatchedQueries |= currentParent.childMatchedQueries;\n                    }\n                    currentParent = newParent;\n                    // We also need to update the render parent & account for ng-container\n                    if (currentParent && isNgContainer(currentParent)) {\n                        currentRenderParent = currentParent.renderParent;\n                    }\n                    else {\n                        currentRenderParent = currentParent;\n                    }\n                }\n            }\n        }\n        var handleEvent = function (view, nodeIndex, eventName, event) {\n            return nodes[nodeIndex].element.handleEvent(view, eventName, event);\n        };\n        return {\n            // Will be filled later...\n            factory: null,\n            nodeFlags: viewNodeFlags,\n            rootNodeFlags: viewRootNodeFlags,\n            nodeMatchedQueries: viewMatchedQueries, flags: flags,\n            nodes: nodes,\n            updateDirectives: updateDirectives || NOOP,\n            updateRenderer: updateRenderer || NOOP, handleEvent: handleEvent,\n            bindingCount: viewBindingCount,\n            outputCount: viewDisposableCount, lastRenderRootNode: lastRenderRootNode\n        };\n    }\n    function isNgContainer(node) {\n        return (node.flags & 1 /* TypeElement */) !== 0 && node.element.name === null;\n    }\n    function validateNode(parent, node, nodeCount) {\n        var template = node.element && node.element.template;\n        if (template) {\n            if (!template.lastRenderRootNode) {\n                throw new Error(\"Illegal State: Embedded templates without nodes are not allowed!\");\n            }\n            if (template.lastRenderRootNode &&\n                template.lastRenderRootNode.flags & 16777216 /* EmbeddedViews */) {\n                throw new Error(\"Illegal State: Last root node of a template can't have embedded views, at index \" + node.nodeIndex + \"!\");\n            }\n        }\n        if (node.flags & 20224 /* CatProvider */) {\n            var parentFlags = parent ? parent.flags : 0;\n            if ((parentFlags & 1 /* TypeElement */) === 0) {\n                throw new Error(\"Illegal State: StaticProvider/Directive nodes need to be children of elements or anchors, at index \" + node.nodeIndex + \"!\");\n            }\n        }\n        if (node.query) {\n            if (node.flags & 67108864 /* TypeContentQuery */ &&\n                (!parent || (parent.flags & 16384 /* TypeDirective */) === 0)) {\n                throw new Error(\"Illegal State: Content Query nodes need to be children of directives, at index \" + node.nodeIndex + \"!\");\n            }\n            if (node.flags & 134217728 /* TypeViewQuery */ && parent) {\n                throw new Error(\"Illegal State: View Query nodes have to be top level nodes, at index \" + node.nodeIndex + \"!\");\n            }\n        }\n        if (node.childCount) {\n            var parentEnd = parent ? parent.nodeIndex + parent.childCount : nodeCount - 1;\n            if (node.nodeIndex <= parentEnd && node.nodeIndex + node.childCount > parentEnd) {\n                throw new Error(\"Illegal State: childCount of node leads outside of parent, at index \" + node.nodeIndex + \"!\");\n            }\n        }\n    }\n    function createEmbeddedView(parent, anchorDef, viewDef, context) {\n        // embedded views are seen as siblings to the anchor, so we need\n        // to get the parent of the anchor and use it as parentIndex.\n        var view = createView(parent.root, parent.renderer, parent, anchorDef, viewDef);\n        initView(view, parent.component, context);\n        createViewNodes(view);\n        return view;\n    }\n    function createRootView(root, def, context) {\n        var view = createView(root, root.renderer, null, null, def);\n        initView(view, context, context);\n        createViewNodes(view);\n        return view;\n    }\n    function createComponentView(parentView, nodeDef, viewDef, hostElement) {\n        var rendererType = nodeDef.element.componentRendererType;\n        var compRenderer;\n        if (!rendererType) {\n            compRenderer = parentView.root.renderer;\n        }\n        else {\n            compRenderer = parentView.root.rendererFactory.createRenderer(hostElement, rendererType);\n        }\n        return createView(parentView.root, compRenderer, parentView, nodeDef.element.componentProvider, viewDef);\n    }\n    function createView(root, renderer, parent, parentNodeDef, def) {\n        var nodes = new Array(def.nodes.length);\n        var disposables = def.outputCount ? new Array(def.outputCount) : null;\n        var view = {\n            def: def,\n            parent: parent,\n            viewContainerParent: null, parentNodeDef: parentNodeDef,\n            context: null,\n            component: null, nodes: nodes,\n            state: 13 /* CatInit */, root: root, renderer: renderer,\n            oldValues: new Array(def.bindingCount), disposables: disposables,\n            initIndex: -1\n        };\n        return view;\n    }\n    function initView(view, component, context) {\n        view.component = component;\n        view.context = context;\n    }\n    function createViewNodes(view) {\n        var renderHost;\n        if (isComponentView(view)) {\n            var hostDef = view.parentNodeDef;\n            renderHost = asElementData(view.parent, hostDef.parent.nodeIndex).renderElement;\n        }\n        var def = view.def;\n        var nodes = view.nodes;\n        for (var i = 0; i < def.nodes.length; i++) {\n            var nodeDef = def.nodes[i];\n            Services.setCurrentNode(view, i);\n            var nodeData = void 0;\n            switch (nodeDef.flags & 201347067 /* Types */) {\n                case 1 /* TypeElement */:\n                    var el = createElement(view, renderHost, nodeDef);\n                    var componentView = undefined;\n                    if (nodeDef.flags & 33554432 /* ComponentView */) {\n                        var compViewDef = resolveDefinition(nodeDef.element.componentView);\n                        componentView = Services.createComponentView(view, nodeDef, compViewDef, el);\n                    }\n                    listenToElementOutputs(view, componentView, nodeDef, el);\n                    nodeData = {\n                        renderElement: el,\n                        componentView: componentView,\n                        viewContainer: null,\n                        template: nodeDef.element.template ? createTemplateData(view, nodeDef) : undefined\n                    };\n                    if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n                        nodeData.viewContainer = createViewContainerData(view, nodeDef, nodeData);\n                    }\n                    break;\n                case 2 /* TypeText */:\n                    nodeData = createText(view, renderHost, nodeDef);\n                    break;\n                case 512 /* TypeClassProvider */:\n                case 1024 /* TypeFactoryProvider */:\n                case 2048 /* TypeUseExistingProvider */:\n                case 256 /* TypeValueProvider */: {\n                    nodeData = nodes[i];\n                    if (!nodeData && !(nodeDef.flags & 4096 /* LazyProvider */)) {\n                        var instance = createProviderInstance(view, nodeDef);\n                        nodeData = { instance: instance };\n                    }\n                    break;\n                }\n                case 16 /* TypePipe */: {\n                    var instance = createPipeInstance(view, nodeDef);\n                    nodeData = { instance: instance };\n                    break;\n                }\n                case 16384 /* TypeDirective */: {\n                    nodeData = nodes[i];\n                    if (!nodeData) {\n                        var instance = createDirectiveInstance(view, nodeDef);\n                        nodeData = { instance: instance };\n                    }\n                    if (nodeDef.flags & 32768 /* Component */) {\n                        var compView = asElementData(view, nodeDef.parent.nodeIndex).componentView;\n                        initView(compView, nodeData.instance, nodeData.instance);\n                    }\n                    break;\n                }\n                case 32 /* TypePureArray */:\n                case 64 /* TypePureObject */:\n                case 128 /* TypePurePipe */:\n                    nodeData = createPureExpression(view, nodeDef);\n                    break;\n                case 67108864 /* TypeContentQuery */:\n                case 134217728 /* TypeViewQuery */:\n                    nodeData = createQuery();\n                    break;\n                case 8 /* TypeNgContent */:\n                    appendNgContent(view, renderHost, nodeDef);\n                    // no runtime data needed for NgContent...\n                    nodeData = undefined;\n                    break;\n            }\n            nodes[i] = nodeData;\n        }\n        // Create the ViewData.nodes of component views after we created everything else,\n        // so that e.g. ng-content works\n        execComponentViewsAction(view, ViewAction.CreateViewNodes);\n        // fill static content and view queries\n        execQueriesAction(view, 67108864 /* TypeContentQuery */ | 134217728 /* TypeViewQuery */, 268435456 /* StaticQuery */, 0 /* CheckAndUpdate */);\n    }\n    function checkNoChangesView(view) {\n        markProjectedViewsForCheck(view);\n        Services.updateDirectives(view, 1 /* CheckNoChanges */);\n        execEmbeddedViewsAction(view, ViewAction.CheckNoChanges);\n        Services.updateRenderer(view, 1 /* CheckNoChanges */);\n        execComponentViewsAction(view, ViewAction.CheckNoChanges);\n        // Note: We don't check queries for changes as we didn't do this in v2.x.\n        // TODO(tbosch): investigate if we can enable the check again in v5.x with a nicer error message.\n        view.state &= ~(64 /* CheckProjectedViews */ | 32 /* CheckProjectedView */);\n    }\n    function checkAndUpdateView(view) {\n        if (view.state & 1 /* BeforeFirstCheck */) {\n            view.state &= ~1 /* BeforeFirstCheck */;\n            view.state |= 2 /* FirstCheck */;\n        }\n        else {\n            view.state &= ~2 /* FirstCheck */;\n        }\n        shiftInitState(view, 0 /* InitState_BeforeInit */, 256 /* InitState_CallingOnInit */);\n        markProjectedViewsForCheck(view);\n        Services.updateDirectives(view, 0 /* CheckAndUpdate */);\n        execEmbeddedViewsAction(view, ViewAction.CheckAndUpdate);\n        execQueriesAction(view, 67108864 /* TypeContentQuery */, 536870912 /* DynamicQuery */, 0 /* CheckAndUpdate */);\n        var callInit = shiftInitState(view, 256 /* InitState_CallingOnInit */, 512 /* InitState_CallingAfterContentInit */);\n        callLifecycleHooksChildrenFirst(view, 2097152 /* AfterContentChecked */ | (callInit ? 1048576 /* AfterContentInit */ : 0));\n        Services.updateRenderer(view, 0 /* CheckAndUpdate */);\n        execComponentViewsAction(view, ViewAction.CheckAndUpdate);\n        execQueriesAction(view, 134217728 /* TypeViewQuery */, 536870912 /* DynamicQuery */, 0 /* CheckAndUpdate */);\n        callInit = shiftInitState(view, 512 /* InitState_CallingAfterContentInit */, 768 /* InitState_CallingAfterViewInit */);\n        callLifecycleHooksChildrenFirst(view, 8388608 /* AfterViewChecked */ | (callInit ? 4194304 /* AfterViewInit */ : 0));\n        if (view.def.flags & 2 /* OnPush */) {\n            view.state &= ~8 /* ChecksEnabled */;\n        }\n        view.state &= ~(64 /* CheckProjectedViews */ | 32 /* CheckProjectedView */);\n        shiftInitState(view, 768 /* InitState_CallingAfterViewInit */, 1024 /* InitState_AfterInit */);\n    }\n    function checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n        if (argStyle === 0 /* Inline */) {\n            return checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        }\n        else {\n            return checkAndUpdateNodeDynamic(view, nodeDef, v0);\n        }\n    }\n    function markProjectedViewsForCheck(view) {\n        var def = view.def;\n        if (!(def.nodeFlags & 4 /* ProjectedTemplate */)) {\n            return;\n        }\n        for (var i = 0; i < def.nodes.length; i++) {\n            var nodeDef = def.nodes[i];\n            if (nodeDef.flags & 4 /* ProjectedTemplate */) {\n                var projectedViews = asElementData(view, i).template._projectedViews;\n                if (projectedViews) {\n                    for (var i_1 = 0; i_1 < projectedViews.length; i_1++) {\n                        var projectedView = projectedViews[i_1];\n                        projectedView.state |= 32 /* CheckProjectedView */;\n                        markParentViewsForCheckProjectedViews(projectedView, view);\n                    }\n                }\n            }\n            else if ((nodeDef.childFlags & 4 /* ProjectedTemplate */) === 0) {\n                // a parent with leafs\n                // no child is a component,\n                // then skip the children\n                i += nodeDef.childCount;\n            }\n        }\n    }\n    function checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n        switch (nodeDef.flags & 201347067 /* Types */) {\n            case 1 /* TypeElement */:\n                return checkAndUpdateElementInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n            case 2 /* TypeText */:\n                return checkAndUpdateTextInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n            case 16384 /* TypeDirective */:\n                return checkAndUpdateDirectiveInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n            case 32 /* TypePureArray */:\n            case 64 /* TypePureObject */:\n            case 128 /* TypePurePipe */:\n                return checkAndUpdatePureExpressionInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n            default:\n                throw 'unreachable';\n        }\n    }\n    function checkAndUpdateNodeDynamic(view, nodeDef, values) {\n        switch (nodeDef.flags & 201347067 /* Types */) {\n            case 1 /* TypeElement */:\n                return checkAndUpdateElementDynamic(view, nodeDef, values);\n            case 2 /* TypeText */:\n                return checkAndUpdateTextDynamic(view, nodeDef, values);\n            case 16384 /* TypeDirective */:\n                return checkAndUpdateDirectiveDynamic(view, nodeDef, values);\n            case 32 /* TypePureArray */:\n            case 64 /* TypePureObject */:\n            case 128 /* TypePurePipe */:\n                return checkAndUpdatePureExpressionDynamic(view, nodeDef, values);\n            default:\n                throw 'unreachable';\n        }\n    }\n    function checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n        if (argStyle === 0 /* Inline */) {\n            checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        }\n        else {\n            checkNoChangesNodeDynamic(view, nodeDef, v0);\n        }\n        // Returning false is ok here as we would have thrown in case of a change.\n        return false;\n    }\n    function checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n        var bindLen = nodeDef.bindings.length;\n        if (bindLen > 0)\n            checkBindingNoChanges(view, nodeDef, 0, v0);\n        if (bindLen > 1)\n            checkBindingNoChanges(view, nodeDef, 1, v1);\n        if (bindLen > 2)\n            checkBindingNoChanges(view, nodeDef, 2, v2);\n        if (bindLen > 3)\n            checkBindingNoChanges(view, nodeDef, 3, v3);\n        if (bindLen > 4)\n            checkBindingNoChanges(view, nodeDef, 4, v4);\n        if (bindLen > 5)\n            checkBindingNoChanges(view, nodeDef, 5, v5);\n        if (bindLen > 6)\n            checkBindingNoChanges(view, nodeDef, 6, v6);\n        if (bindLen > 7)\n            checkBindingNoChanges(view, nodeDef, 7, v7);\n        if (bindLen > 8)\n            checkBindingNoChanges(view, nodeDef, 8, v8);\n        if (bindLen > 9)\n            checkBindingNoChanges(view, nodeDef, 9, v9);\n    }\n    function checkNoChangesNodeDynamic(view, nodeDef, values) {\n        for (var i = 0; i < values.length; i++) {\n            checkBindingNoChanges(view, nodeDef, i, values[i]);\n        }\n    }\n    /**\n     * Workaround https://github.com/angular/tsickle/issues/497\n     * @suppress {misplacedTypeAnnotation}\n     */\n    function checkNoChangesQuery(view, nodeDef) {\n        var queryList = asQueryList(view, nodeDef.nodeIndex);\n        if (queryList.dirty) {\n            throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, nodeDef.nodeIndex), \"Query \" + nodeDef.query.id + \" not dirty\", \"Query \" + nodeDef.query.id + \" dirty\", (view.state & 1 /* BeforeFirstCheck */) !== 0);\n        }\n    }\n    function destroyView(view) {\n        if (view.state & 128 /* Destroyed */) {\n            return;\n        }\n        execEmbeddedViewsAction(view, ViewAction.Destroy);\n        execComponentViewsAction(view, ViewAction.Destroy);\n        callLifecycleHooksChildrenFirst(view, 131072 /* OnDestroy */);\n        if (view.disposables) {\n            for (var i = 0; i < view.disposables.length; i++) {\n                view.disposables[i]();\n            }\n        }\n        detachProjectedView(view);\n        if (view.renderer.destroyNode) {\n            destroyViewNodes(view);\n        }\n        if (isComponentView(view)) {\n            view.renderer.destroy();\n        }\n        view.state |= 128 /* Destroyed */;\n    }\n    function destroyViewNodes(view) {\n        var len = view.def.nodes.length;\n        for (var i = 0; i < len; i++) {\n            var def = view.def.nodes[i];\n            if (def.flags & 1 /* TypeElement */) {\n                view.renderer.destroyNode(asElementData(view, i).renderElement);\n            }\n            else if (def.flags & 2 /* TypeText */) {\n                view.renderer.destroyNode(asTextData(view, i).renderText);\n            }\n            else if (def.flags & 67108864 /* TypeContentQuery */ || def.flags & 134217728 /* TypeViewQuery */) {\n                asQueryList(view, i).destroy();\n            }\n        }\n    }\n    var ViewAction;\n    (function (ViewAction) {\n        ViewAction[ViewAction[\"CreateViewNodes\"] = 0] = \"CreateViewNodes\";\n        ViewAction[ViewAction[\"CheckNoChanges\"] = 1] = \"CheckNoChanges\";\n        ViewAction[ViewAction[\"CheckNoChangesProjectedViews\"] = 2] = \"CheckNoChangesProjectedViews\";\n        ViewAction[ViewAction[\"CheckAndUpdate\"] = 3] = \"CheckAndUpdate\";\n        ViewAction[ViewAction[\"CheckAndUpdateProjectedViews\"] = 4] = \"CheckAndUpdateProjectedViews\";\n        ViewAction[ViewAction[\"Destroy\"] = 5] = \"Destroy\";\n    })(ViewAction || (ViewAction = {}));\n    function execComponentViewsAction(view, action) {\n        var def = view.def;\n        if (!(def.nodeFlags & 33554432 /* ComponentView */)) {\n            return;\n        }\n        for (var i = 0; i < def.nodes.length; i++) {\n            var nodeDef = def.nodes[i];\n            if (nodeDef.flags & 33554432 /* ComponentView */) {\n                // a leaf\n                callViewAction(asElementData(view, i).componentView, action);\n            }\n            else if ((nodeDef.childFlags & 33554432 /* ComponentView */) === 0) {\n                // a parent with leafs\n                // no child is a component,\n                // then skip the children\n                i += nodeDef.childCount;\n            }\n        }\n    }\n    function execEmbeddedViewsAction(view, action) {\n        var def = view.def;\n        if (!(def.nodeFlags & 16777216 /* EmbeddedViews */)) {\n            return;\n        }\n        for (var i = 0; i < def.nodes.length; i++) {\n            var nodeDef = def.nodes[i];\n            if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n                // a leaf\n                var embeddedViews = asElementData(view, i).viewContainer._embeddedViews;\n                for (var k = 0; k < embeddedViews.length; k++) {\n                    callViewAction(embeddedViews[k], action);\n                }\n            }\n            else if ((nodeDef.childFlags & 16777216 /* EmbeddedViews */) === 0) {\n                // a parent with leafs\n                // no child is a component,\n                // then skip the children\n                i += nodeDef.childCount;\n            }\n        }\n    }\n    function callViewAction(view, action) {\n        var viewState = view.state;\n        switch (action) {\n            case ViewAction.CheckNoChanges:\n                if ((viewState & 128 /* Destroyed */) === 0) {\n                    if ((viewState & 12 /* CatDetectChanges */) === 12 /* CatDetectChanges */) {\n                        checkNoChangesView(view);\n                    }\n                    else if (viewState & 64 /* CheckProjectedViews */) {\n                        execProjectedViewsAction(view, ViewAction.CheckNoChangesProjectedViews);\n                    }\n                }\n                break;\n            case ViewAction.CheckNoChangesProjectedViews:\n                if ((viewState & 128 /* Destroyed */) === 0) {\n                    if (viewState & 32 /* CheckProjectedView */) {\n                        checkNoChangesView(view);\n                    }\n                    else if (viewState & 64 /* CheckProjectedViews */) {\n                        execProjectedViewsAction(view, action);\n                    }\n                }\n                break;\n            case ViewAction.CheckAndUpdate:\n                if ((viewState & 128 /* Destroyed */) === 0) {\n                    if ((viewState & 12 /* CatDetectChanges */) === 12 /* CatDetectChanges */) {\n                        checkAndUpdateView(view);\n                    }\n                    else if (viewState & 64 /* CheckProjectedViews */) {\n                        execProjectedViewsAction(view, ViewAction.CheckAndUpdateProjectedViews);\n                    }\n                }\n                break;\n            case ViewAction.CheckAndUpdateProjectedViews:\n                if ((viewState & 128 /* Destroyed */) === 0) {\n                    if (viewState & 32 /* CheckProjectedView */) {\n                        checkAndUpdateView(view);\n                    }\n                    else if (viewState & 64 /* CheckProjectedViews */) {\n                        execProjectedViewsAction(view, action);\n                    }\n                }\n                break;\n            case ViewAction.Destroy:\n                // Note: destroyView recurses over all views,\n                // so we don't need to special case projected views here.\n                destroyView(view);\n                break;\n            case ViewAction.CreateViewNodes:\n                createViewNodes(view);\n                break;\n        }\n    }\n    function execProjectedViewsAction(view, action) {\n        execEmbeddedViewsAction(view, action);\n        execComponentViewsAction(view, action);\n    }\n    function execQueriesAction(view, queryFlags, staticDynamicQueryFlag, checkType) {\n        if (!(view.def.nodeFlags & queryFlags) || !(view.def.nodeFlags & staticDynamicQueryFlag)) {\n            return;\n        }\n        var nodeCount = view.def.nodes.length;\n        for (var i = 0; i < nodeCount; i++) {\n            var nodeDef = view.def.nodes[i];\n            if ((nodeDef.flags & queryFlags) && (nodeDef.flags & staticDynamicQueryFlag)) {\n                Services.setCurrentNode(view, nodeDef.nodeIndex);\n                switch (checkType) {\n                    case 0 /* CheckAndUpdate */:\n                        checkAndUpdateQuery(view, nodeDef);\n                        break;\n                    case 1 /* CheckNoChanges */:\n                        checkNoChangesQuery(view, nodeDef);\n                        break;\n                }\n            }\n            if (!(nodeDef.childFlags & queryFlags) || !(nodeDef.childFlags & staticDynamicQueryFlag)) {\n                // no child has a matching query\n                // then skip the children\n                i += nodeDef.childCount;\n            }\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var initialized = false;\n    function initServicesIfNeeded() {\n        if (initialized) {\n            return;\n        }\n        initialized = true;\n        var services = isDevMode() ? createDebugServices() : createProdServices();\n        Services.setCurrentNode = services.setCurrentNode;\n        Services.createRootView = services.createRootView;\n        Services.createEmbeddedView = services.createEmbeddedView;\n        Services.createComponentView = services.createComponentView;\n        Services.createNgModuleRef = services.createNgModuleRef;\n        Services.overrideProvider = services.overrideProvider;\n        Services.overrideComponentView = services.overrideComponentView;\n        Services.clearOverrides = services.clearOverrides;\n        Services.checkAndUpdateView = services.checkAndUpdateView;\n        Services.checkNoChangesView = services.checkNoChangesView;\n        Services.destroyView = services.destroyView;\n        Services.resolveDep = resolveDep;\n        Services.createDebugContext = services.createDebugContext;\n        Services.handleEvent = services.handleEvent;\n        Services.updateDirectives = services.updateDirectives;\n        Services.updateRenderer = services.updateRenderer;\n        Services.dirtyParentQueries = dirtyParentQueries;\n    }\n    function createProdServices() {\n        return {\n            setCurrentNode: function () { },\n            createRootView: createProdRootView,\n            createEmbeddedView: createEmbeddedView,\n            createComponentView: createComponentView,\n            createNgModuleRef: createNgModuleRef,\n            overrideProvider: NOOP,\n            overrideComponentView: NOOP,\n            clearOverrides: NOOP,\n            checkAndUpdateView: checkAndUpdateView,\n            checkNoChangesView: checkNoChangesView,\n            destroyView: destroyView,\n            createDebugContext: function (view, nodeIndex) { return new DebugContext_(view, nodeIndex); },\n            handleEvent: function (view, nodeIndex, eventName, event) {\n                return view.def.handleEvent(view, nodeIndex, eventName, event);\n            },\n            updateDirectives: function (view, checkType) { return view.def.updateDirectives(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode :\n                prodCheckNoChangesNode, view); },\n            updateRenderer: function (view, checkType) { return view.def.updateRenderer(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode :\n                prodCheckNoChangesNode, view); },\n        };\n    }\n    function createDebugServices() {\n        return {\n            setCurrentNode: debugSetCurrentNode,\n            createRootView: debugCreateRootView,\n            createEmbeddedView: debugCreateEmbeddedView,\n            createComponentView: debugCreateComponentView,\n            createNgModuleRef: debugCreateNgModuleRef,\n            overrideProvider: debugOverrideProvider,\n            overrideComponentView: debugOverrideComponentView,\n            clearOverrides: debugClearOverrides,\n            checkAndUpdateView: debugCheckAndUpdateView,\n            checkNoChangesView: debugCheckNoChangesView,\n            destroyView: debugDestroyView,\n            createDebugContext: function (view, nodeIndex) { return new DebugContext_(view, nodeIndex); },\n            handleEvent: debugHandleEvent,\n            updateDirectives: debugUpdateDirectives,\n            updateRenderer: debugUpdateRenderer,\n        };\n    }\n    function createProdRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {\n        var rendererFactory = ngModule.injector.get(RendererFactory2);\n        return createRootView(createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode), def, context);\n    }\n    function debugCreateRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {\n        var rendererFactory = ngModule.injector.get(RendererFactory2);\n        var root = createRootData(elInjector, ngModule, new DebugRendererFactory2(rendererFactory), projectableNodes, rootSelectorOrNode);\n        var defWithOverride = applyProviderOverridesToView(def);\n        return callWithDebugContext(DebugAction.create, createRootView, null, [root, defWithOverride, context]);\n    }\n    function createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode) {\n        var sanitizer = ngModule.injector.get(Sanitizer);\n        var errorHandler = ngModule.injector.get(ErrorHandler);\n        var renderer = rendererFactory.createRenderer(null, null);\n        return {\n            ngModule: ngModule,\n            injector: elInjector, projectableNodes: projectableNodes,\n            selectorOrNode: rootSelectorOrNode, sanitizer: sanitizer, rendererFactory: rendererFactory, renderer: renderer, errorHandler: errorHandler\n        };\n    }\n    function debugCreateEmbeddedView(parentView, anchorDef, viewDef, context) {\n        var defWithOverride = applyProviderOverridesToView(viewDef);\n        return callWithDebugContext(DebugAction.create, createEmbeddedView, null, [parentView, anchorDef, defWithOverride, context]);\n    }\n    function debugCreateComponentView(parentView, nodeDef, viewDef, hostElement) {\n        var overrideComponentView = viewDefOverrides.get(nodeDef.element.componentProvider.provider.token);\n        if (overrideComponentView) {\n            viewDef = overrideComponentView;\n        }\n        else {\n            viewDef = applyProviderOverridesToView(viewDef);\n        }\n        return callWithDebugContext(DebugAction.create, createComponentView, null, [parentView, nodeDef, viewDef, hostElement]);\n    }\n    function debugCreateNgModuleRef(moduleType, parentInjector, bootstrapComponents, def) {\n        var defWithOverride = applyProviderOverridesToNgModule(def);\n        return createNgModuleRef(moduleType, parentInjector, bootstrapComponents, defWithOverride);\n    }\n    var providerOverrides = new Map();\n    var providerOverridesWithScope = new Map();\n    var viewDefOverrides = new Map();\n    function debugOverrideProvider(override) {\n        providerOverrides.set(override.token, override);\n        var injectableDef;\n        if (typeof override.token === 'function' && (injectableDef = getInjectableDef(override.token)) &&\n            typeof injectableDef.providedIn === 'function') {\n            providerOverridesWithScope.set(override.token, override);\n        }\n    }\n    function debugOverrideComponentView(comp, compFactory) {\n        var hostViewDef = resolveDefinition(getComponentViewDefinitionFactory(compFactory));\n        var compViewDef = resolveDefinition(hostViewDef.nodes[0].element.componentView);\n        viewDefOverrides.set(comp, compViewDef);\n    }\n    function debugClearOverrides() {\n        providerOverrides.clear();\n        providerOverridesWithScope.clear();\n        viewDefOverrides.clear();\n    }\n    // Notes about the algorithm:\n    // 1) Locate the providers of an element and check if one of them was overwritten\n    // 2) Change the providers of that element\n    //\n    // We only create new datastructures if we need to, to keep perf impact\n    // reasonable.\n    function applyProviderOverridesToView(def) {\n        if (providerOverrides.size === 0) {\n            return def;\n        }\n        var elementIndicesWithOverwrittenProviders = findElementIndicesWithOverwrittenProviders(def);\n        if (elementIndicesWithOverwrittenProviders.length === 0) {\n            return def;\n        }\n        // clone the whole view definition,\n        // as it maintains references between the nodes that are hard to update.\n        def = def.factory(function () { return NOOP; });\n        for (var i = 0; i < elementIndicesWithOverwrittenProviders.length; i++) {\n            applyProviderOverridesToElement(def, elementIndicesWithOverwrittenProviders[i]);\n        }\n        return def;\n        function findElementIndicesWithOverwrittenProviders(def) {\n            var elIndicesWithOverwrittenProviders = [];\n            var lastElementDef = null;\n            for (var i = 0; i < def.nodes.length; i++) {\n                var nodeDef = def.nodes[i];\n                if (nodeDef.flags & 1 /* TypeElement */) {\n                    lastElementDef = nodeDef;\n                }\n                if (lastElementDef && nodeDef.flags & 3840 /* CatProviderNoDirective */ &&\n                    providerOverrides.has(nodeDef.provider.token)) {\n                    elIndicesWithOverwrittenProviders.push(lastElementDef.nodeIndex);\n                    lastElementDef = null;\n                }\n            }\n            return elIndicesWithOverwrittenProviders;\n        }\n        function applyProviderOverridesToElement(viewDef, elIndex) {\n            for (var i = elIndex + 1; i < viewDef.nodes.length; i++) {\n                var nodeDef = viewDef.nodes[i];\n                if (nodeDef.flags & 1 /* TypeElement */) {\n                    // stop at the next element\n                    return;\n                }\n                if (nodeDef.flags & 3840 /* CatProviderNoDirective */) {\n                    var provider = nodeDef.provider;\n                    var override = providerOverrides.get(provider.token);\n                    if (override) {\n                        nodeDef.flags = (nodeDef.flags & ~3840 /* CatProviderNoDirective */) | override.flags;\n                        provider.deps = splitDepsDsl(override.deps);\n                        provider.value = override.value;\n                    }\n                }\n            }\n        }\n    }\n    // Notes about the algorithm:\n    // We only create new datastructures if we need to, to keep perf impact\n    // reasonable.\n    function applyProviderOverridesToNgModule(def) {\n        var _a = calcHasOverrides(def), hasOverrides = _a.hasOverrides, hasDeprecatedOverrides = _a.hasDeprecatedOverrides;\n        if (!hasOverrides) {\n            return def;\n        }\n        // clone the whole view definition,\n        // as it maintains references between the nodes that are hard to update.\n        def = def.factory(function () { return NOOP; });\n        applyProviderOverrides(def);\n        return def;\n        function calcHasOverrides(def) {\n            var hasOverrides = false;\n            var hasDeprecatedOverrides = false;\n            if (providerOverrides.size === 0) {\n                return { hasOverrides: hasOverrides, hasDeprecatedOverrides: hasDeprecatedOverrides };\n            }\n            def.providers.forEach(function (node) {\n                var override = providerOverrides.get(node.token);\n                if ((node.flags & 3840 /* CatProviderNoDirective */) && override) {\n                    hasOverrides = true;\n                    hasDeprecatedOverrides = hasDeprecatedOverrides || override.deprecatedBehavior;\n                }\n            });\n            def.modules.forEach(function (module) {\n                providerOverridesWithScope.forEach(function (override, token) {\n                    if (getInjectableDef(token).providedIn === module) {\n                        hasOverrides = true;\n                        hasDeprecatedOverrides = hasDeprecatedOverrides || override.deprecatedBehavior;\n                    }\n                });\n            });\n            return { hasOverrides: hasOverrides, hasDeprecatedOverrides: hasDeprecatedOverrides };\n        }\n        function applyProviderOverrides(def) {\n            for (var i = 0; i < def.providers.length; i++) {\n                var provider = def.providers[i];\n                if (hasDeprecatedOverrides) {\n                    // We had a bug where me made\n                    // all providers lazy. Keep this logic behind a flag\n                    // for migrating existing users.\n                    provider.flags |= 4096 /* LazyProvider */;\n                }\n                var override = providerOverrides.get(provider.token);\n                if (override) {\n                    provider.flags = (provider.flags & ~3840 /* CatProviderNoDirective */) | override.flags;\n                    provider.deps = splitDepsDsl(override.deps);\n                    provider.value = override.value;\n                }\n            }\n            if (providerOverridesWithScope.size > 0) {\n                var moduleSet_1 = new Set(def.modules);\n                providerOverridesWithScope.forEach(function (override, token) {\n                    if (moduleSet_1.has(getInjectableDef(token).providedIn)) {\n                        var provider = {\n                            token: token,\n                            flags: override.flags | (hasDeprecatedOverrides ? 4096 /* LazyProvider */ : 0 /* None */),\n                            deps: splitDepsDsl(override.deps),\n                            value: override.value,\n                            index: def.providers.length,\n                        };\n                        def.providers.push(provider);\n                        def.providersByKey[tokenKey(token)] = provider;\n                    }\n                });\n            }\n        }\n    }\n    function prodCheckAndUpdateNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n        var nodeDef = view.def.nodes[checkIndex];\n        checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        return (nodeDef.flags & 224 /* CatPureExpression */) ?\n            asPureExpressionData(view, checkIndex).value :\n            undefined;\n    }\n    function prodCheckNoChangesNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n        var nodeDef = view.def.nodes[checkIndex];\n        checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        return (nodeDef.flags & 224 /* CatPureExpression */) ?\n            asPureExpressionData(view, checkIndex).value :\n            undefined;\n    }\n    function debugCheckAndUpdateView(view) {\n        return callWithDebugContext(DebugAction.detectChanges, checkAndUpdateView, null, [view]);\n    }\n    function debugCheckNoChangesView(view) {\n        return callWithDebugContext(DebugAction.checkNoChanges, checkNoChangesView, null, [view]);\n    }\n    function debugDestroyView(view) {\n        return callWithDebugContext(DebugAction.destroy, destroyView, null, [view]);\n    }\n    var DebugAction;\n    (function (DebugAction) {\n        DebugAction[DebugAction[\"create\"] = 0] = \"create\";\n        DebugAction[DebugAction[\"detectChanges\"] = 1] = \"detectChanges\";\n        DebugAction[DebugAction[\"checkNoChanges\"] = 2] = \"checkNoChanges\";\n        DebugAction[DebugAction[\"destroy\"] = 3] = \"destroy\";\n        DebugAction[DebugAction[\"handleEvent\"] = 4] = \"handleEvent\";\n    })(DebugAction || (DebugAction = {}));\n    var _currentAction;\n    var _currentView;\n    var _currentNodeIndex;\n    function debugSetCurrentNode(view, nodeIndex) {\n        _currentView = view;\n        _currentNodeIndex = nodeIndex;\n    }\n    function debugHandleEvent(view, nodeIndex, eventName, event) {\n        debugSetCurrentNode(view, nodeIndex);\n        return callWithDebugContext(DebugAction.handleEvent, view.def.handleEvent, null, [view, nodeIndex, eventName, event]);\n    }\n    function debugUpdateDirectives(view, checkType) {\n        if (view.state & 128 /* Destroyed */) {\n            throw viewDestroyedError(DebugAction[_currentAction]);\n        }\n        debugSetCurrentNode(view, nextDirectiveWithBinding(view, 0));\n        return view.def.updateDirectives(debugCheckDirectivesFn, view);\n        function debugCheckDirectivesFn(view, nodeIndex, argStyle) {\n            var values = [];\n            for (var _i = 3; _i < arguments.length; _i++) {\n                values[_i - 3] = arguments[_i];\n            }\n            var nodeDef = view.def.nodes[nodeIndex];\n            if (checkType === 0 /* CheckAndUpdate */) {\n                debugCheckAndUpdateNode(view, nodeDef, argStyle, values);\n            }\n            else {\n                debugCheckNoChangesNode(view, nodeDef, argStyle, values);\n            }\n            if (nodeDef.flags & 16384 /* TypeDirective */) {\n                debugSetCurrentNode(view, nextDirectiveWithBinding(view, nodeIndex));\n            }\n            return (nodeDef.flags & 224 /* CatPureExpression */) ?\n                asPureExpressionData(view, nodeDef.nodeIndex).value :\n                undefined;\n        }\n    }\n    function debugUpdateRenderer(view, checkType) {\n        if (view.state & 128 /* Destroyed */) {\n            throw viewDestroyedError(DebugAction[_currentAction]);\n        }\n        debugSetCurrentNode(view, nextRenderNodeWithBinding(view, 0));\n        return view.def.updateRenderer(debugCheckRenderNodeFn, view);\n        function debugCheckRenderNodeFn(view, nodeIndex, argStyle) {\n            var values = [];\n            for (var _i = 3; _i < arguments.length; _i++) {\n                values[_i - 3] = arguments[_i];\n            }\n            var nodeDef = view.def.nodes[nodeIndex];\n            if (checkType === 0 /* CheckAndUpdate */) {\n                debugCheckAndUpdateNode(view, nodeDef, argStyle, values);\n            }\n            else {\n                debugCheckNoChangesNode(view, nodeDef, argStyle, values);\n            }\n            if (nodeDef.flags & 3 /* CatRenderNode */) {\n                debugSetCurrentNode(view, nextRenderNodeWithBinding(view, nodeIndex));\n            }\n            return (nodeDef.flags & 224 /* CatPureExpression */) ?\n                asPureExpressionData(view, nodeDef.nodeIndex).value :\n                undefined;\n        }\n    }\n    function debugCheckAndUpdateNode(view, nodeDef, argStyle, givenValues) {\n        var changed = checkAndUpdateNode.apply(void 0, __spread([view, nodeDef, argStyle], givenValues));\n        if (changed) {\n            var values = argStyle === 1 /* Dynamic */ ? givenValues[0] : givenValues;\n            if (nodeDef.flags & 16384 /* TypeDirective */) {\n                var bindingValues = {};\n                for (var i = 0; i < nodeDef.bindings.length; i++) {\n                    var binding = nodeDef.bindings[i];\n                    var value = values[i];\n                    if (binding.flags & 8 /* TypeProperty */) {\n                        bindingValues[normalizeDebugBindingName(binding.nonMinifiedName)] =\n                            normalizeDebugBindingValue(value);\n                    }\n                }\n                var elDef = nodeDef.parent;\n                var el = asElementData(view, elDef.nodeIndex).renderElement;\n                if (!elDef.element.name) {\n                    // a comment.\n                    view.renderer.setValue(el, \"bindings=\" + JSON.stringify(bindingValues, null, 2));\n                }\n                else {\n                    // a regular element.\n                    for (var attr in bindingValues) {\n                        var value = bindingValues[attr];\n                        if (value != null) {\n                            view.renderer.setAttribute(el, attr, value);\n                        }\n                        else {\n                            view.renderer.removeAttribute(el, attr);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    function debugCheckNoChangesNode(view, nodeDef, argStyle, values) {\n        checkNoChangesNode.apply(void 0, __spread([view, nodeDef, argStyle], values));\n    }\n    function nextDirectiveWithBinding(view, nodeIndex) {\n        for (var i = nodeIndex; i < view.def.nodes.length; i++) {\n            var nodeDef = view.def.nodes[i];\n            if (nodeDef.flags & 16384 /* TypeDirective */ && nodeDef.bindings && nodeDef.bindings.length) {\n                return i;\n            }\n        }\n        return null;\n    }\n    function nextRenderNodeWithBinding(view, nodeIndex) {\n        for (var i = nodeIndex; i < view.def.nodes.length; i++) {\n            var nodeDef = view.def.nodes[i];\n            if ((nodeDef.flags & 3 /* CatRenderNode */) && nodeDef.bindings && nodeDef.bindings.length) {\n                return i;\n            }\n        }\n        return null;\n    }\n    var DebugContext_ = /** @class */ (function () {\n        function DebugContext_(view, nodeIndex) {\n            this.view = view;\n            this.nodeIndex = nodeIndex;\n            if (nodeIndex == null) {\n                this.nodeIndex = nodeIndex = 0;\n            }\n            this.nodeDef = view.def.nodes[nodeIndex];\n            var elDef = this.nodeDef;\n            var elView = view;\n            while (elDef && (elDef.flags & 1 /* TypeElement */) === 0) {\n                elDef = elDef.parent;\n            }\n            if (!elDef) {\n                while (!elDef && elView) {\n                    elDef = viewParentEl(elView);\n                    elView = elView.parent;\n                }\n            }\n            this.elDef = elDef;\n            this.elView = elView;\n        }\n        Object.defineProperty(DebugContext_.prototype, \"elOrCompView\", {\n            get: function () {\n                // Has to be done lazily as we use the DebugContext also during creation of elements...\n                return asElementData(this.elView, this.elDef.nodeIndex).componentView || this.view;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugContext_.prototype, \"injector\", {\n            get: function () { return createInjector$1(this.elView, this.elDef); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugContext_.prototype, \"component\", {\n            get: function () { return this.elOrCompView.component; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugContext_.prototype, \"context\", {\n            get: function () { return this.elOrCompView.context; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugContext_.prototype, \"providerTokens\", {\n            get: function () {\n                var tokens = [];\n                if (this.elDef) {\n                    for (var i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {\n                        var childDef = this.elView.def.nodes[i];\n                        if (childDef.flags & 20224 /* CatProvider */) {\n                            tokens.push(childDef.provider.token);\n                        }\n                        i += childDef.childCount;\n                    }\n                }\n                return tokens;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugContext_.prototype, \"references\", {\n            get: function () {\n                var references = {};\n                if (this.elDef) {\n                    collectReferences(this.elView, this.elDef, references);\n                    for (var i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {\n                        var childDef = this.elView.def.nodes[i];\n                        if (childDef.flags & 20224 /* CatProvider */) {\n                            collectReferences(this.elView, childDef, references);\n                        }\n                        i += childDef.childCount;\n                    }\n                }\n                return references;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugContext_.prototype, \"componentRenderElement\", {\n            get: function () {\n                var elData = findHostElement(this.elOrCompView);\n                return elData ? elData.renderElement : undefined;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugContext_.prototype, \"renderNode\", {\n            get: function () {\n                return this.nodeDef.flags & 2 /* TypeText */ ? renderNode(this.view, this.nodeDef) :\n                    renderNode(this.elView, this.elDef);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        DebugContext_.prototype.logError = function (console) {\n            var values = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                values[_i - 1] = arguments[_i];\n            }\n            var logViewDef;\n            var logNodeIndex;\n            if (this.nodeDef.flags & 2 /* TypeText */) {\n                logViewDef = this.view.def;\n                logNodeIndex = this.nodeDef.nodeIndex;\n            }\n            else {\n                logViewDef = this.elView.def;\n                logNodeIndex = this.elDef.nodeIndex;\n            }\n            // Note: we only generate a log function for text and element nodes\n            // to make the generated code as small as possible.\n            var renderNodeIndex = getRenderNodeIndex(logViewDef, logNodeIndex);\n            var currRenderNodeIndex = -1;\n            var nodeLogger = function () {\n                var _a;\n                currRenderNodeIndex++;\n                if (currRenderNodeIndex === renderNodeIndex) {\n                    return (_a = console.error).bind.apply(_a, __spread([console], values));\n                }\n                else {\n                    return NOOP;\n                }\n            };\n            logViewDef.factory(nodeLogger);\n            if (currRenderNodeIndex < renderNodeIndex) {\n                console.error('Illegal state: the ViewDefinitionFactory did not call the logger!');\n                console.error.apply(console, __spread(values));\n            }\n        };\n        return DebugContext_;\n    }());\n    function getRenderNodeIndex(viewDef, nodeIndex) {\n        var renderNodeIndex = -1;\n        for (var i = 0; i <= nodeIndex; i++) {\n            var nodeDef = viewDef.nodes[i];\n            if (nodeDef.flags & 3 /* CatRenderNode */) {\n                renderNodeIndex++;\n            }\n        }\n        return renderNodeIndex;\n    }\n    function findHostElement(view) {\n        while (view && !isComponentView(view)) {\n            view = view.parent;\n        }\n        if (view.parent) {\n            return asElementData(view.parent, viewParentEl(view).nodeIndex);\n        }\n        return null;\n    }\n    function collectReferences(view, nodeDef, references) {\n        for (var refName in nodeDef.references) {\n            references[refName] = getQueryValue(view, nodeDef, nodeDef.references[refName]);\n        }\n    }\n    function callWithDebugContext(action, fn, self, args) {\n        var oldAction = _currentAction;\n        var oldView = _currentView;\n        var oldNodeIndex = _currentNodeIndex;\n        try {\n            _currentAction = action;\n            var result = fn.apply(self, args);\n            _currentView = oldView;\n            _currentNodeIndex = oldNodeIndex;\n            _currentAction = oldAction;\n            return result;\n        }\n        catch (e) {\n            if (isViewDebugError(e) || !_currentView) {\n                throw e;\n            }\n            throw viewWrappedDebugError(e, getCurrentDebugContext());\n        }\n    }\n    function getCurrentDebugContext() {\n        return _currentView ? new DebugContext_(_currentView, _currentNodeIndex) : null;\n    }\n    var DebugRendererFactory2 = /** @class */ (function () {\n        function DebugRendererFactory2(delegate) {\n            this.delegate = delegate;\n        }\n        DebugRendererFactory2.prototype.createRenderer = function (element, renderData) {\n            return new DebugRenderer2(this.delegate.createRenderer(element, renderData));\n        };\n        DebugRendererFactory2.prototype.begin = function () {\n            if (this.delegate.begin) {\n                this.delegate.begin();\n            }\n        };\n        DebugRendererFactory2.prototype.end = function () {\n            if (this.delegate.end) {\n                this.delegate.end();\n            }\n        };\n        DebugRendererFactory2.prototype.whenRenderingDone = function () {\n            if (this.delegate.whenRenderingDone) {\n                return this.delegate.whenRenderingDone();\n            }\n            return Promise.resolve(null);\n        };\n        return DebugRendererFactory2;\n    }());\n    var DebugRenderer2 = /** @class */ (function () {\n        function DebugRenderer2(delegate) {\n            this.delegate = delegate;\n            /**\n             * Factory function used to create a `DebugContext` when a node is created.\n             *\n             * The `DebugContext` allows to retrieve information about the nodes that are useful in tests.\n             *\n             * The factory is configurable so that the `DebugRenderer2` could instantiate either a View Engine\n             * or a Render context.\n             */\n            this.debugContextFactory = getCurrentDebugContext;\n            this.data = this.delegate.data;\n        }\n        DebugRenderer2.prototype.createDebugContext = function (nativeElement) { return this.debugContextFactory(nativeElement); };\n        DebugRenderer2.prototype.destroyNode = function (node) {\n            var debugNode = getDebugNode$1(node);\n            removeDebugNodeFromIndex(debugNode);\n            if (debugNode instanceof DebugNode__PRE_R3__) {\n                debugNode.listeners.length = 0;\n            }\n            if (this.delegate.destroyNode) {\n                this.delegate.destroyNode(node);\n            }\n        };\n        DebugRenderer2.prototype.destroy = function () { this.delegate.destroy(); };\n        DebugRenderer2.prototype.createElement = function (name, namespace) {\n            var el = this.delegate.createElement(name, namespace);\n            var debugCtx = this.createDebugContext(el);\n            if (debugCtx) {\n                var debugEl = new DebugElement__PRE_R3__(el, null, debugCtx);\n                debugEl.name = name;\n                indexDebugNode(debugEl);\n            }\n            return el;\n        };\n        DebugRenderer2.prototype.createComment = function (value) {\n            var comment = this.delegate.createComment(value);\n            var debugCtx = this.createDebugContext(comment);\n            if (debugCtx) {\n                indexDebugNode(new DebugNode__PRE_R3__(comment, null, debugCtx));\n            }\n            return comment;\n        };\n        DebugRenderer2.prototype.createText = function (value) {\n            var text = this.delegate.createText(value);\n            var debugCtx = this.createDebugContext(text);\n            if (debugCtx) {\n                indexDebugNode(new DebugNode__PRE_R3__(text, null, debugCtx));\n            }\n            return text;\n        };\n        DebugRenderer2.prototype.appendChild = function (parent, newChild) {\n            var debugEl = getDebugNode$1(parent);\n            var debugChildEl = getDebugNode$1(newChild);\n            if (debugEl && debugChildEl && debugEl instanceof DebugElement__PRE_R3__) {\n                debugEl.addChild(debugChildEl);\n            }\n            this.delegate.appendChild(parent, newChild);\n        };\n        DebugRenderer2.prototype.insertBefore = function (parent, newChild, refChild) {\n            var debugEl = getDebugNode$1(parent);\n            var debugChildEl = getDebugNode$1(newChild);\n            var debugRefEl = getDebugNode$1(refChild);\n            if (debugEl && debugChildEl && debugEl instanceof DebugElement__PRE_R3__) {\n                debugEl.insertBefore(debugRefEl, debugChildEl);\n            }\n            this.delegate.insertBefore(parent, newChild, refChild);\n        };\n        DebugRenderer2.prototype.removeChild = function (parent, oldChild) {\n            var debugEl = getDebugNode$1(parent);\n            var debugChildEl = getDebugNode$1(oldChild);\n            if (debugEl && debugChildEl && debugEl instanceof DebugElement__PRE_R3__) {\n                debugEl.removeChild(debugChildEl);\n            }\n            this.delegate.removeChild(parent, oldChild);\n        };\n        DebugRenderer2.prototype.selectRootElement = function (selectorOrNode, preserveContent) {\n            var el = this.delegate.selectRootElement(selectorOrNode, preserveContent);\n            var debugCtx = getCurrentDebugContext();\n            if (debugCtx) {\n                indexDebugNode(new DebugElement__PRE_R3__(el, null, debugCtx));\n            }\n            return el;\n        };\n        DebugRenderer2.prototype.setAttribute = function (el, name, value, namespace) {\n            var debugEl = getDebugNode$1(el);\n            if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n                var fullName = namespace ? namespace + ':' + name : name;\n                debugEl.attributes[fullName] = value;\n            }\n            this.delegate.setAttribute(el, name, value, namespace);\n        };\n        DebugRenderer2.prototype.removeAttribute = function (el, name, namespace) {\n            var debugEl = getDebugNode$1(el);\n            if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n                var fullName = namespace ? namespace + ':' + name : name;\n                debugEl.attributes[fullName] = null;\n            }\n            this.delegate.removeAttribute(el, name, namespace);\n        };\n        DebugRenderer2.prototype.addClass = function (el, name) {\n            var debugEl = getDebugNode$1(el);\n            if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n                debugEl.classes[name] = true;\n            }\n            this.delegate.addClass(el, name);\n        };\n        DebugRenderer2.prototype.removeClass = function (el, name) {\n            var debugEl = getDebugNode$1(el);\n            if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n                debugEl.classes[name] = false;\n            }\n            this.delegate.removeClass(el, name);\n        };\n        DebugRenderer2.prototype.setStyle = function (el, style, value, flags) {\n            var debugEl = getDebugNode$1(el);\n            if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n                debugEl.styles[style] = value;\n            }\n            this.delegate.setStyle(el, style, value, flags);\n        };\n        DebugRenderer2.prototype.removeStyle = function (el, style, flags) {\n            var debugEl = getDebugNode$1(el);\n            if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n                debugEl.styles[style] = null;\n            }\n            this.delegate.removeStyle(el, style, flags);\n        };\n        DebugRenderer2.prototype.setProperty = function (el, name, value) {\n            var debugEl = getDebugNode$1(el);\n            if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n                debugEl.properties[name] = value;\n            }\n            this.delegate.setProperty(el, name, value);\n        };\n        DebugRenderer2.prototype.listen = function (target, eventName, callback) {\n            if (typeof target !== 'string') {\n                var debugEl = getDebugNode$1(target);\n                if (debugEl) {\n                    debugEl.listeners.push(new DebugEventListener(eventName, callback));\n                }\n            }\n            return this.delegate.listen(target, eventName, callback);\n        };\n        DebugRenderer2.prototype.parentNode = function (node) { return this.delegate.parentNode(node); };\n        DebugRenderer2.prototype.nextSibling = function (node) { return this.delegate.nextSibling(node); };\n        DebugRenderer2.prototype.setValue = function (node, value) { return this.delegate.setValue(node, value); };\n        return DebugRenderer2;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function overrideProvider(override) {\n        initServicesIfNeeded();\n        return Services.overrideProvider(override);\n    }\n    function overrideComponentView(comp, componentFactory) {\n        initServicesIfNeeded();\n        return Services.overrideComponentView(comp, componentFactory);\n    }\n    function clearOverrides() {\n        initServicesIfNeeded();\n        return Services.clearOverrides();\n    }\n    // Attention: this function is called as top level function.\n    // Putting any logic in here will destroy closure tree shaking!\n    function createNgModuleFactory(ngModuleType, bootstrapComponents, defFactory) {\n        return new NgModuleFactory_(ngModuleType, bootstrapComponents, defFactory);\n    }\n    function cloneNgModuleDefinition(def) {\n        var providers = Array.from(def.providers);\n        var modules = Array.from(def.modules);\n        var providersByKey = {};\n        for (var key in def.providersByKey) {\n            providersByKey[key] = def.providersByKey[key];\n        }\n        return {\n            factory: def.factory,\n            scope: def.scope, providers: providers, modules: modules, providersByKey: providersByKey,\n        };\n    }\n    var NgModuleFactory_ = /** @class */ (function (_super) {\n        __extends(NgModuleFactory_, _super);\n        function NgModuleFactory_(moduleType, _bootstrapComponents, _ngModuleDefFactory) {\n            var _this = \n            // Attention: this ctor is called as top level function.\n            // Putting any logic in here will destroy closure tree shaking!\n            _super.call(this) || this;\n            _this.moduleType = moduleType;\n            _this._bootstrapComponents = _bootstrapComponents;\n            _this._ngModuleDefFactory = _ngModuleDefFactory;\n            return _this;\n        }\n        NgModuleFactory_.prototype.create = function (parentInjector) {\n            initServicesIfNeeded();\n            // Clone the NgModuleDefinition so that any tree shakeable provider definition\n            // added to this instance of the NgModuleRef doesn't affect the cached copy.\n            // See https://github.com/angular/angular/issues/25018.\n            var def = cloneNgModuleDefinition(resolveDefinition(this._ngModuleDefFactory));\n            return Services.createNgModuleRef(this.moduleType, parentInjector || Injector.NULL, this._bootstrapComponents, def);\n        };\n        return NgModuleFactory_;\n    }(NgModuleFactory));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // clang-format on\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    if (ngDevMode) {\n        // This helper is to give a reasonable error message to people upgrading to v9 that have not yet\n        // installed `@angular/localize` in their app.\n        // tslint:disable-next-line: no-toplevel-property-access\n        _global.$localize = _global.$localize || function () {\n            throw new Error('It looks like your application or one of its dependencies is using i18n.\\n' +\n                'Angular 9 introduced a global `$localize()` function that needs to be loaded.\\n' +\n                'Please run `ng add @angular/localize` from the Angular CLI.\\n' +\n                '(For non-CLI projects, add `import \\'@angular/localize/init\\';` to your `polyfills.ts` file.\\n' +\n                'For server-side rendering applications add the import to your `main.server.ts` file.)');\n        };\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // This file only reexports content of the `src` folder. Keep it that way.\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    exports.ANALYZE_FOR_ENTRY_COMPONENTS = ANALYZE_FOR_ENTRY_COMPONENTS;\n    exports.APP_BOOTSTRAP_LISTENER = APP_BOOTSTRAP_LISTENER;\n    exports.APP_ID = APP_ID;\n    exports.APP_INITIALIZER = APP_INITIALIZER;\n    exports.ApplicationInitStatus = ApplicationInitStatus;\n    exports.ApplicationModule = ApplicationModule;\n    exports.ApplicationRef = ApplicationRef;\n    exports.Attribute = Attribute;\n    exports.COMPILER_OPTIONS = COMPILER_OPTIONS;\n    exports.CUSTOM_ELEMENTS_SCHEMA = CUSTOM_ELEMENTS_SCHEMA;\n    exports.ChangeDetectorRef = ChangeDetectorRef;\n    exports.Compiler = Compiler;\n    exports.CompilerFactory = CompilerFactory;\n    exports.Component = Component;\n    exports.ComponentFactory = ComponentFactory;\n    exports.ComponentFactoryResolver = ComponentFactoryResolver;\n    exports.ComponentRef = ComponentRef;\n    exports.ContentChild = ContentChild;\n    exports.ContentChildren = ContentChildren;\n    exports.DEFAULT_CURRENCY_CODE = DEFAULT_CURRENCY_CODE;\n    exports.DebugElement = DebugElement;\n    exports.DebugEventListener = DebugEventListener;\n    exports.DebugNode = DebugNode;\n    exports.DefaultIterableDiffer = DefaultIterableDiffer;\n    exports.Directive = Directive;\n    exports.ElementRef = ElementRef;\n    exports.EmbeddedViewRef = EmbeddedViewRef;\n    exports.ErrorHandler = ErrorHandler;\n    exports.EventEmitter = EventEmitter;\n    exports.Host = Host;\n    exports.HostBinding = HostBinding;\n    exports.HostListener = HostListener;\n    exports.INJECTOR = INJECTOR;\n    exports.Inject = Inject;\n    exports.Injectable = Injectable;\n    exports.InjectionToken = InjectionToken;\n    exports.Injector = Injector;\n    exports.Input = Input;\n    exports.IterableDiffers = IterableDiffers;\n    exports.KeyValueDiffers = KeyValueDiffers;\n    exports.LOCALE_ID = LOCALE_ID$1;\n    exports.ModuleWithComponentFactories = ModuleWithComponentFactories;\n    exports.NO_ERRORS_SCHEMA = NO_ERRORS_SCHEMA;\n    exports.NgModule = NgModule;\n    exports.NgModuleFactory = NgModuleFactory;\n    exports.NgModuleFactoryLoader = NgModuleFactoryLoader;\n    exports.NgModuleRef = NgModuleRef;\n    exports.NgProbeToken = NgProbeToken;\n    exports.NgZone = NgZone;\n    exports.Optional = Optional;\n    exports.Output = Output;\n    exports.PACKAGE_ROOT_URL = PACKAGE_ROOT_URL;\n    exports.PLATFORM_ID = PLATFORM_ID;\n    exports.PLATFORM_INITIALIZER = PLATFORM_INITIALIZER;\n    exports.Pipe = Pipe;\n    exports.PlatformRef = PlatformRef;\n    exports.Query = Query;\n    exports.QueryList = QueryList;\n    exports.ReflectiveInjector = ReflectiveInjector;\n    exports.ReflectiveKey = ReflectiveKey;\n    exports.Renderer2 = Renderer2;\n    exports.RendererFactory2 = RendererFactory2;\n    exports.ResolvedReflectiveFactory = ResolvedReflectiveFactory;\n    exports.Sanitizer = Sanitizer;\n    exports.Self = Self;\n    exports.SimpleChange = SimpleChange;\n    exports.SkipSelf = SkipSelf;\n    exports.SystemJsNgModuleLoader = SystemJsNgModuleLoader;\n    exports.SystemJsNgModuleLoaderConfig = SystemJsNgModuleLoaderConfig;\n    exports.TRANSLATIONS = TRANSLATIONS;\n    exports.TRANSLATIONS_FORMAT = TRANSLATIONS_FORMAT;\n    exports.TemplateRef = TemplateRef;\n    exports.Testability = Testability;\n    exports.TestabilityRegistry = TestabilityRegistry;\n    exports.Type = Type;\n    exports.VERSION = VERSION;\n    exports.Version = Version;\n    exports.ViewChild = ViewChild;\n    exports.ViewChildren = ViewChildren;\n    exports.ViewContainerRef = ViewContainerRef;\n    exports.ViewRef = ViewRef$1;\n    exports.WrappedValue = WrappedValue;\n    exports.asNativeElements = asNativeElements;\n    exports.assertPlatform = assertPlatform;\n    exports.createPlatform = createPlatform;\n    exports.createPlatformFactory = createPlatformFactory;\n    exports.defineInjectable = defineInjectable;\n    exports.destroyPlatform = destroyPlatform;\n    exports.enableProdMode = enableProdMode;\n    exports.forwardRef = forwardRef;\n    exports.getDebugNode = getDebugNode$1;\n    exports.getModuleFactory = getModuleFactory;\n    exports.getPlatform = getPlatform;\n    exports.inject = inject;\n    exports.isDevMode = isDevMode;\n    exports.platformCore = platformCore;\n    exports.resolveForwardRef = resolveForwardRef;\n    exports.setTestabilityGetter = setTestabilityGetter;\n    exports.ɵALLOW_MULTIPLE_PLATFORMS = ALLOW_MULTIPLE_PLATFORMS;\n    exports.ɵAPP_ID_RANDOM_PROVIDER = APP_ID_RANDOM_PROVIDER;\n    exports.ɵCodegenComponentFactoryResolver = CodegenComponentFactoryResolver;\n    exports.ɵCompiler_compileModuleAndAllComponentsAsync__POST_R3__ = Compiler_compileModuleAndAllComponentsAsync__POST_R3__;\n    exports.ɵCompiler_compileModuleAndAllComponentsSync__POST_R3__ = Compiler_compileModuleAndAllComponentsSync__POST_R3__;\n    exports.ɵCompiler_compileModuleAsync__POST_R3__ = Compiler_compileModuleAsync__POST_R3__;\n    exports.ɵCompiler_compileModuleSync__POST_R3__ = Compiler_compileModuleSync__POST_R3__;\n    exports.ɵComponentFactory = ComponentFactory;\n    exports.ɵConsole = Console;\n    exports.ɵDEFAULT_LOCALE_ID = DEFAULT_LOCALE_ID;\n    exports.ɵEMPTY_ARRAY = EMPTY_ARRAY$3;\n    exports.ɵEMPTY_MAP = EMPTY_MAP;\n    exports.ɵINJECTOR_IMPL__POST_R3__ = INJECTOR_IMPL__POST_R3__;\n    exports.ɵINJECTOR_SCOPE = INJECTOR_SCOPE;\n    exports.ɵLifecycleHooksFeature = LifecycleHooksFeature;\n    exports.ɵNG_COMP_DEF = NG_COMP_DEF;\n    exports.ɵNG_DIR_DEF = NG_DIR_DEF;\n    exports.ɵNG_ELEMENT_ID = NG_ELEMENT_ID;\n    exports.ɵNG_INJ_DEF = NG_INJ_DEF;\n    exports.ɵNG_MOD_DEF = NG_MOD_DEF;\n    exports.ɵNG_PIPE_DEF = NG_PIPE_DEF;\n    exports.ɵNG_PROV_DEF = NG_PROV_DEF;\n    exports.ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR;\n    exports.ɵNO_CHANGE = NO_CHANGE;\n    exports.ɵNgModuleFactory = NgModuleFactory$1;\n    exports.ɵNoopNgZone = NoopNgZone;\n    exports.ɵReflectionCapabilities = ReflectionCapabilities;\n    exports.ɵRender3ComponentFactory = ComponentFactory$1;\n    exports.ɵRender3ComponentRef = ComponentRef$1;\n    exports.ɵRender3NgModuleRef = NgModuleRef$1;\n    exports.ɵSWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__ = SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__;\n    exports.ɵSWITCH_COMPILE_COMPONENT__POST_R3__ = SWITCH_COMPILE_COMPONENT__POST_R3__;\n    exports.ɵSWITCH_COMPILE_DIRECTIVE__POST_R3__ = SWITCH_COMPILE_DIRECTIVE__POST_R3__;\n    exports.ɵSWITCH_COMPILE_INJECTABLE__POST_R3__ = SWITCH_COMPILE_INJECTABLE__POST_R3__;\n    exports.ɵSWITCH_COMPILE_NGMODULE__POST_R3__ = SWITCH_COMPILE_NGMODULE__POST_R3__;\n    exports.ɵSWITCH_COMPILE_PIPE__POST_R3__ = SWITCH_COMPILE_PIPE__POST_R3__;\n    exports.ɵSWITCH_ELEMENT_REF_FACTORY__POST_R3__ = SWITCH_ELEMENT_REF_FACTORY__POST_R3__;\n    exports.ɵSWITCH_IVY_ENABLED__POST_R3__ = SWITCH_IVY_ENABLED__POST_R3__;\n    exports.ɵSWITCH_RENDERER2_FACTORY__POST_R3__ = SWITCH_RENDERER2_FACTORY__POST_R3__;\n    exports.ɵSWITCH_TEMPLATE_REF_FACTORY__POST_R3__ = SWITCH_TEMPLATE_REF_FACTORY__POST_R3__;\n    exports.ɵSWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__ = SWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__;\n    exports.ɵ_sanitizeHtml = _sanitizeHtml;\n    exports.ɵ_sanitizeStyle = _sanitizeStyle;\n    exports.ɵ_sanitizeUrl = _sanitizeUrl;\n    exports.ɵallowSanitizationBypassAndThrow = allowSanitizationBypassAndThrow;\n    exports.ɵand = anchorDef;\n    exports.ɵbypassSanitizationTrustHtml = bypassSanitizationTrustHtml;\n    exports.ɵbypassSanitizationTrustResourceUrl = bypassSanitizationTrustResourceUrl;\n    exports.ɵbypassSanitizationTrustScript = bypassSanitizationTrustScript;\n    exports.ɵbypassSanitizationTrustStyle = bypassSanitizationTrustStyle;\n    exports.ɵbypassSanitizationTrustUrl = bypassSanitizationTrustUrl;\n    exports.ɵccf = createComponentFactory;\n    exports.ɵclearOverrides = clearOverrides;\n    exports.ɵclearResolutionOfComponentResourcesQueue = clearResolutionOfComponentResourcesQueue;\n    exports.ɵcmf = createNgModuleFactory;\n    exports.ɵcompileComponent = compileComponent;\n    exports.ɵcompileDirective = compileDirective;\n    exports.ɵcompileNgModule = compileNgModule;\n    exports.ɵcompileNgModuleDefs = compileNgModuleDefs;\n    exports.ɵcompileNgModuleFactory__POST_R3__ = compileNgModuleFactory__POST_R3__;\n    exports.ɵcompilePipe = compilePipe;\n    exports.ɵcreateInjector = createInjector;\n    exports.ɵcrt = createRendererType2;\n    exports.ɵdefaultIterableDiffers = defaultIterableDiffers;\n    exports.ɵdefaultKeyValueDiffers = defaultKeyValueDiffers;\n    exports.ɵdetectChanges = detectChanges;\n    exports.ɵdevModeEqual = devModeEqual$1;\n    exports.ɵdid = directiveDef;\n    exports.ɵeld = elementDef;\n    exports.ɵfindLocaleData = findLocaleData;\n    exports.ɵflushModuleScopingQueueAsMuchAsPossible = flushModuleScopingQueueAsMuchAsPossible;\n    exports.ɵgetComponentViewDefinitionFactory = getComponentViewDefinitionFactory;\n    exports.ɵgetDebugNode__POST_R3__ = getDebugNode__POST_R3__;\n    exports.ɵgetDirectives = getDirectives;\n    exports.ɵgetHostElement = getHostElement;\n    exports.ɵgetInjectableDef = getInjectableDef;\n    exports.ɵgetLContext = getLContext;\n    exports.ɵgetLocalePluralCase = getLocalePluralCase;\n    exports.ɵgetModuleFactory__POST_R3__ = getModuleFactory__POST_R3__;\n    exports.ɵgetSanitizationBypassType = getSanitizationBypassType;\n    exports.ɵglobal = _global;\n    exports.ɵinitServicesIfNeeded = initServicesIfNeeded;\n    exports.ɵinlineInterpolate = inlineInterpolate;\n    exports.ɵinterpolate = interpolate;\n    exports.ɵisBoundToModule__POST_R3__ = isBoundToModule__POST_R3__;\n    exports.ɵisDefaultChangeDetectionStrategy = isDefaultChangeDetectionStrategy;\n    exports.ɵisListLikeIterable = isListLikeIterable$1;\n    exports.ɵisObservable = isObservable;\n    exports.ɵisPromise = isPromise;\n    exports.ɵivyEnabled = ivyEnabled;\n    exports.ɵlooseIdentical = looseIdentical;\n    exports.ɵmakeDecorator = makeDecorator;\n    exports.ɵmarkDirty = markDirty;\n    exports.ɵmod = moduleDef;\n    exports.ɵmpd = moduleProvideDef;\n    exports.ɵncd = ngContentDef;\n    exports.ɵnov = nodeValue;\n    exports.ɵoverrideComponentView = overrideComponentView;\n    exports.ɵoverrideProvider = overrideProvider;\n    exports.ɵpad = pureArrayDef;\n    exports.ɵpatchComponentDefWithScope = patchComponentDefWithScope;\n    exports.ɵpid = pipeDef;\n    exports.ɵpod = pureObjectDef;\n    exports.ɵppd = purePipeDef;\n    exports.ɵprd = providerDef;\n    exports.ɵpublishDefaultGlobalUtils = publishDefaultGlobalUtils;\n    exports.ɵpublishGlobalUtil = publishGlobalUtil;\n    exports.ɵqud = queryDef;\n    exports.ɵregisterLocaleData = registerLocaleData;\n    exports.ɵregisterModuleFactory = registerModuleFactory;\n    exports.ɵregisterNgModuleType = registerNgModuleType;\n    exports.ɵrenderComponent = renderComponent$1;\n    exports.ɵresetCompiledComponents = resetCompiledComponents;\n    exports.ɵresolveComponentResources = resolveComponentResources;\n    exports.ɵsetClassMetadata = setClassMetadata;\n    exports.ɵsetCurrentInjector = setCurrentInjector;\n    exports.ɵsetDocument = setDocument;\n    exports.ɵsetLocaleId = setLocaleId;\n    exports.ɵstore = store;\n    exports.ɵstringify = stringify;\n    exports.ɵted = textDef;\n    exports.ɵtransitiveScopesFor = transitiveScopesFor;\n    exports.ɵunregisterLocaleData = unregisterAllLocaleData;\n    exports.ɵunv = unwrapValue;\n    exports.ɵunwrapSafeValue = unwrapSafeValue;\n    exports.ɵvid = viewDef;\n    exports.ɵwhenRendered = whenRendered;\n    exports.ɵɵCopyDefinitionFeature = ɵɵCopyDefinitionFeature;\n    exports.ɵɵInheritDefinitionFeature = ɵɵInheritDefinitionFeature;\n    exports.ɵɵNgOnChangesFeature = ɵɵNgOnChangesFeature;\n    exports.ɵɵProvidersFeature = ɵɵProvidersFeature;\n    exports.ɵɵadvance = ɵɵadvance;\n    exports.ɵɵallocHostVars = ɵɵallocHostVars;\n    exports.ɵɵattribute = ɵɵattribute;\n    exports.ɵɵattributeInterpolate1 = ɵɵattributeInterpolate1;\n    exports.ɵɵattributeInterpolate2 = ɵɵattributeInterpolate2;\n    exports.ɵɵattributeInterpolate3 = ɵɵattributeInterpolate3;\n    exports.ɵɵattributeInterpolate4 = ɵɵattributeInterpolate4;\n    exports.ɵɵattributeInterpolate5 = ɵɵattributeInterpolate5;\n    exports.ɵɵattributeInterpolate6 = ɵɵattributeInterpolate6;\n    exports.ɵɵattributeInterpolate7 = ɵɵattributeInterpolate7;\n    exports.ɵɵattributeInterpolate8 = ɵɵattributeInterpolate8;\n    exports.ɵɵattributeInterpolateV = ɵɵattributeInterpolateV;\n    exports.ɵɵclassMap = ɵɵclassMap;\n    exports.ɵɵclassMapInterpolate1 = ɵɵclassMapInterpolate1;\n    exports.ɵɵclassMapInterpolate2 = ɵɵclassMapInterpolate2;\n    exports.ɵɵclassMapInterpolate3 = ɵɵclassMapInterpolate3;\n    exports.ɵɵclassMapInterpolate4 = ɵɵclassMapInterpolate4;\n    exports.ɵɵclassMapInterpolate5 = ɵɵclassMapInterpolate5;\n    exports.ɵɵclassMapInterpolate6 = ɵɵclassMapInterpolate6;\n    exports.ɵɵclassMapInterpolate7 = ɵɵclassMapInterpolate7;\n    exports.ɵɵclassMapInterpolate8 = ɵɵclassMapInterpolate8;\n    exports.ɵɵclassMapInterpolateV = ɵɵclassMapInterpolateV;\n    exports.ɵɵclassProp = ɵɵclassProp;\n    exports.ɵɵcomponentHostSyntheticListener = ɵɵcomponentHostSyntheticListener;\n    exports.ɵɵcontainer = ɵɵcontainer;\n    exports.ɵɵcontainerRefreshEnd = ɵɵcontainerRefreshEnd;\n    exports.ɵɵcontainerRefreshStart = ɵɵcontainerRefreshStart;\n    exports.ɵɵcontentQuery = ɵɵcontentQuery;\n    exports.ɵɵdefaultStyleSanitizer = ɵɵdefaultStyleSanitizer;\n    exports.ɵɵdefineComponent = ɵɵdefineComponent;\n    exports.ɵɵdefineDirective = ɵɵdefineDirective;\n    exports.ɵɵdefineInjectable = ɵɵdefineInjectable;\n    exports.ɵɵdefineInjector = ɵɵdefineInjector;\n    exports.ɵɵdefineNgModule = ɵɵdefineNgModule;\n    exports.ɵɵdefinePipe = ɵɵdefinePipe;\n    exports.ɵɵdirectiveInject = ɵɵdirectiveInject;\n    exports.ɵɵdisableBindings = ɵɵdisableBindings;\n    exports.ɵɵelement = ɵɵelement;\n    exports.ɵɵelementContainer = ɵɵelementContainer;\n    exports.ɵɵelementContainerEnd = ɵɵelementContainerEnd;\n    exports.ɵɵelementContainerStart = ɵɵelementContainerStart;\n    exports.ɵɵelementEnd = ɵɵelementEnd;\n    exports.ɵɵelementHostAttrs = ɵɵelementHostAttrs;\n    exports.ɵɵelementStart = ɵɵelementStart;\n    exports.ɵɵembeddedViewEnd = ɵɵembeddedViewEnd;\n    exports.ɵɵembeddedViewStart = ɵɵembeddedViewStart;\n    exports.ɵɵenableBindings = ɵɵenableBindings;\n    exports.ɵɵgetCurrentView = ɵɵgetCurrentView;\n    exports.ɵɵgetFactoryOf = ɵɵgetFactoryOf;\n    exports.ɵɵgetInheritedFactory = ɵɵgetInheritedFactory;\n    exports.ɵɵhostProperty = ɵɵhostProperty;\n    exports.ɵɵi18n = ɵɵi18n;\n    exports.ɵɵi18nApply = ɵɵi18nApply;\n    exports.ɵɵi18nAttributes = ɵɵi18nAttributes;\n    exports.ɵɵi18nEnd = ɵɵi18nEnd;\n    exports.ɵɵi18nExp = ɵɵi18nExp;\n    exports.ɵɵi18nPostprocess = ɵɵi18nPostprocess;\n    exports.ɵɵi18nStart = ɵɵi18nStart;\n    exports.ɵɵinject = ɵɵinject;\n    exports.ɵɵinjectAttribute = ɵɵinjectAttribute;\n    exports.ɵɵinjectPipeChangeDetectorRef = ɵɵinjectPipeChangeDetectorRef;\n    exports.ɵɵinvalidFactory = ɵɵinvalidFactory;\n    exports.ɵɵinvalidFactoryDep = ɵɵinvalidFactoryDep;\n    exports.ɵɵlistener = ɵɵlistener;\n    exports.ɵɵloadQuery = ɵɵloadQuery;\n    exports.ɵɵnamespaceHTML = ɵɵnamespaceHTML;\n    exports.ɵɵnamespaceMathML = ɵɵnamespaceMathML;\n    exports.ɵɵnamespaceSVG = ɵɵnamespaceSVG;\n    exports.ɵɵnextContext = ɵɵnextContext;\n    exports.ɵɵpipe = ɵɵpipe;\n    exports.ɵɵpipeBind1 = ɵɵpipeBind1;\n    exports.ɵɵpipeBind2 = ɵɵpipeBind2;\n    exports.ɵɵpipeBind3 = ɵɵpipeBind3;\n    exports.ɵɵpipeBind4 = ɵɵpipeBind4;\n    exports.ɵɵpipeBindV = ɵɵpipeBindV;\n    exports.ɵɵprojection = ɵɵprojection;\n    exports.ɵɵprojectionDef = ɵɵprojectionDef;\n    exports.ɵɵproperty = ɵɵproperty;\n    exports.ɵɵpropertyInterpolate = ɵɵpropertyInterpolate;\n    exports.ɵɵpropertyInterpolate1 = ɵɵpropertyInterpolate1;\n    exports.ɵɵpropertyInterpolate2 = ɵɵpropertyInterpolate2;\n    exports.ɵɵpropertyInterpolate3 = ɵɵpropertyInterpolate3;\n    exports.ɵɵpropertyInterpolate4 = ɵɵpropertyInterpolate4;\n    exports.ɵɵpropertyInterpolate5 = ɵɵpropertyInterpolate5;\n    exports.ɵɵpropertyInterpolate6 = ɵɵpropertyInterpolate6;\n    exports.ɵɵpropertyInterpolate7 = ɵɵpropertyInterpolate7;\n    exports.ɵɵpropertyInterpolate8 = ɵɵpropertyInterpolate8;\n    exports.ɵɵpropertyInterpolateV = ɵɵpropertyInterpolateV;\n    exports.ɵɵpureFunction0 = ɵɵpureFunction0;\n    exports.ɵɵpureFunction1 = ɵɵpureFunction1;\n    exports.ɵɵpureFunction2 = ɵɵpureFunction2;\n    exports.ɵɵpureFunction3 = ɵɵpureFunction3;\n    exports.ɵɵpureFunction4 = ɵɵpureFunction4;\n    exports.ɵɵpureFunction5 = ɵɵpureFunction5;\n    exports.ɵɵpureFunction6 = ɵɵpureFunction6;\n    exports.ɵɵpureFunction7 = ɵɵpureFunction7;\n    exports.ɵɵpureFunction8 = ɵɵpureFunction8;\n    exports.ɵɵpureFunctionV = ɵɵpureFunctionV;\n    exports.ɵɵqueryRefresh = ɵɵqueryRefresh;\n    exports.ɵɵreference = ɵɵreference;\n    exports.ɵɵresolveBody = ɵɵresolveBody;\n    exports.ɵɵresolveDocument = ɵɵresolveDocument;\n    exports.ɵɵresolveWindow = ɵɵresolveWindow;\n    exports.ɵɵrestoreView = ɵɵrestoreView;\n    exports.ɵɵsanitizeHtml = ɵɵsanitizeHtml;\n    exports.ɵɵsanitizeResourceUrl = ɵɵsanitizeResourceUrl;\n    exports.ɵɵsanitizeScript = ɵɵsanitizeScript;\n    exports.ɵɵsanitizeStyle = ɵɵsanitizeStyle;\n    exports.ɵɵsanitizeUrl = ɵɵsanitizeUrl;\n    exports.ɵɵsanitizeUrlOrResourceUrl = ɵɵsanitizeUrlOrResourceUrl;\n    exports.ɵɵselect = ɵɵselect;\n    exports.ɵɵsetComponentScope = ɵɵsetComponentScope;\n    exports.ɵɵsetNgModuleScope = ɵɵsetNgModuleScope;\n    exports.ɵɵstaticContentQuery = ɵɵstaticContentQuery;\n    exports.ɵɵstaticViewQuery = ɵɵstaticViewQuery;\n    exports.ɵɵstyleMap = ɵɵstyleMap;\n    exports.ɵɵstyleProp = ɵɵstyleProp;\n    exports.ɵɵstylePropInterpolate1 = ɵɵstylePropInterpolate1;\n    exports.ɵɵstylePropInterpolate2 = ɵɵstylePropInterpolate2;\n    exports.ɵɵstylePropInterpolate3 = ɵɵstylePropInterpolate3;\n    exports.ɵɵstylePropInterpolate4 = ɵɵstylePropInterpolate4;\n    exports.ɵɵstylePropInterpolate5 = ɵɵstylePropInterpolate5;\n    exports.ɵɵstylePropInterpolate6 = ɵɵstylePropInterpolate6;\n    exports.ɵɵstylePropInterpolate7 = ɵɵstylePropInterpolate7;\n    exports.ɵɵstylePropInterpolate8 = ɵɵstylePropInterpolate8;\n    exports.ɵɵstylePropInterpolateV = ɵɵstylePropInterpolateV;\n    exports.ɵɵstyleSanitizer = ɵɵstyleSanitizer;\n    exports.ɵɵtemplate = ɵɵtemplate;\n    exports.ɵɵtemplateRefExtractor = ɵɵtemplateRefExtractor;\n    exports.ɵɵtext = ɵɵtext;\n    exports.ɵɵtextInterpolate = ɵɵtextInterpolate;\n    exports.ɵɵtextInterpolate1 = ɵɵtextInterpolate1;\n    exports.ɵɵtextInterpolate2 = ɵɵtextInterpolate2;\n    exports.ɵɵtextInterpolate3 = ɵɵtextInterpolate3;\n    exports.ɵɵtextInterpolate4 = ɵɵtextInterpolate4;\n    exports.ɵɵtextInterpolate5 = ɵɵtextInterpolate5;\n    exports.ɵɵtextInterpolate6 = ɵɵtextInterpolate6;\n    exports.ɵɵtextInterpolate7 = ɵɵtextInterpolate7;\n    exports.ɵɵtextInterpolate8 = ɵɵtextInterpolate8;\n    exports.ɵɵtextInterpolateV = ɵɵtextInterpolateV;\n    exports.ɵɵupdateSyntheticHostBinding = ɵɵupdateSyntheticHostBinding;\n    exports.ɵɵviewQuery = ɵɵviewQuery;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=core.umd.js.map\n"]}