{"version":3,"sources":["packages/core/core.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","core","rxjs","operators","this","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__values","o","m","Symbol","iterator","next","value","done","__read","r","e","ar","push","error","__spread","concat","ANNOTATIONS","PARAMETERS","PROP_METADATA","makeDecorator","name","props","parentClass","additionalProcessing","typeFn","metaCtor","makeMetadataCtor","DecoratorFactory","_a","args","_i","annotationInstance","bind","TypeDecorator","cls","defineProperty","ngMetadataName","annotationCls","ctor","values","propName","makeParamDecorator","ParamDecoratorFactory","ParamDecorator","annotation","unusedKey","index","parameters","makePropDecorator","PropDecoratorFactory","decoratorInstance","PropDecorator","target","meta","unshift","InjectFlags","Inject","token","Optional","Self","SkipSelf","Host","Attribute","attributeName","getClosureSafeProperty","objWithPropertyToExtract","key","Error","fillProperties","source","ɵɵdefineInjectable","opts","providedIn","undefined","defineInjectable","ɵɵdefineInjector","options","providers","imports","getInjectableDef","type","def","NG_INJECTABLE_DEF","getInjectorDef","NG_INJECTOR_DEF","ngInjectableDef","ngInjectorDef","stringify","map","join","overriddenName","res","toString","newLineIndex","indexOf","substring","__forward_ref__","forwardRef","forwardRefFn","resolveForwardRef","fn","R3ResolvedDependencyType","__globalThis","globalThis","__window","window","__self","WorkerGlobalScope","__global","_global","getCompilerFacade","globalNg","ɵcompilerFacade","_injectImplementation","InjectionToken","_desc","__NG_ELEMENT_ID__","INJECTOR","THROW_IF_NOT_FOUND","NEW_LINE","SOURCE","USE_VALUE","provide","String","useValue","_currentInjector","setCurrentInjector","injector","former","setInjectImplementation","impl","previous","ɵɵinject","flags","Default","injectInjectorOnly","injectRootLimpMode","get","inject","notFoundValue","injectableDef","injectArgs","types","arg","isArray","j","NullInjector","angularCoreDiEnv","ɵɵgetFactoryOf","getFactoryOf","typeAny","Type","Function","isType","v","DELEGATE_CTOR","INHERITED_CLASS","INHERITED_CLASS_WITH_CTOR","INHERITED_CLASS_WITH_DELEGATE_CTOR","ReflectionCapabilities","reflect","_reflect","isReflectionEnabled","_zipTypesAndAnnotations","paramTypes","paramAnnotations","result","_ownParameters","parentCtor","isDelegateCtor","typeStr","test","tsickleCtorParams","ctorParameters","paramTypes_1","ctorParam","paramAnnotations_1","convertTsickleDecoratorIntoMetadata","decorators","getOwnMetadata","fill","getParentCtor","_ownAnnotations","typeOrFunc","annotations","ownAnnotations","_ownPropMetadata","propMetadata","propDecorators","propDecorators_1","propMetadata_1","keys","forEach","prop","parentPropMetadata_1","ownPropMetadata","hasLifecycleHook","lcProperty","guards","getter","setter","method","importUri","resourceUri","resolveIdentifier","moduleUrl","members","runtime","resolveEnum","enumIdentifier","decoratorInvocations","decoratorInvocation","parentProto","getPrototypeOf","getReflect","reflectDependencies","convertDependencies","deps","compiler","dep","reflectDependency","host","optional","resolved","Token","skipSelf","setTokenAndResolvedType","param","compileInjectable","srcMeta","hasAProvider","isUseClassProvider","isUseFactoryProvider","isUseValueProvider","isUseExistingProvider","compilerMeta","typeArgumentCount","ctorDeps","userDeps","useClass","useFactory","useExisting","USE_VALUE$1","Injectable","SWITCH_COMPILE_INJECTABLE","SWITCH_COMPILE_INJECTABLE__POST_R3__","throwMultipleComponentError","tNode","tagName","throwMixedMultiProviderError","addAllToArray","items","arr","flatten","list","dst","item","slice","deepForEach","input","APP_ROOT","NOT_YET","CIRCULAR","EMPTY_ARRAY","NULL_INJECTOR","getNullInjector","createInjector","defType","parent","additionalProviders","R3Injector","_this","records","Map","injectorDefTypes","Set","onDestroy","_destroyed","dedupStack","injectorDef","processInjectorType","provider","processProvider","set","makeRecord","isRootInjector","has","enumerable","configurable","destroy","assertNotDestroyed","service","ngOnDestroy","clear","previousInjector","record","couldBeInjectableType","injectableDefInScope","injectableDefOrInjectorDefFactory","hydrate","catchInjectorError","injectorErrorName","tokenPath","message","formatError","text","obj","charAt","substr","context","parts","JSON","replace","tokens","defOrWrappedDef","parents","ngModule","isDuplicate","add","importTypesWithProviders_1","imported","_loop_1","ngModule_1","defProviders","injectorType_1","ngModuleType","isTypeProvider","providerToRecord","providerToFactory","isValueProvider","multi","existing","multiRecord_1","throwCyclicDependencyError","hasOnDestroy","getUndecoratedInjectableFactory","paramLength","inheritedInjectableDef","getInheritedInjectableDef","console","warn","isExistingProvider","isFactoryProvider","classRef_1","throwInvalidProviderError","ngModuleDetail","hasDeps","INJECTOR_IMPL__POST_R3__","INJECTOR_IMPL","Injector","NULL","ERROR_DEBUG_CONTEXT","ERROR_ORIGINAL_ERROR","ERROR_LOGGER","constructResolvingPath","findFirstClosedCycle","reverse","k","injectionError","constructResolvingMessage","originalError","errMsg","wrappedError","msg","addKey","injectors","noAnnotationError","params","signature","ii","parameter","ReflectiveKey","id","displayName","_globalKeyRegistry","numberOfKeys","KeyRegistry","_allKeys","newKey","size","reflector","Reflector","reflectionCapabilities","updateCapabilities","caps","identifier","ReflectiveDependency","visibility","fromKey","_EMPTY_LIST","ResolvedReflectiveProvider_","resolvedFactories","multiProvider","resolvedFactory","ResolvedReflectiveFactory","dependencies","resolveReflectiveFactory","factoryFn","resolvedDeps","_dependenciesFor","aliasInstance","constructDependencies","params_1","_extractToken","resolveReflectiveProvider","some","metadata","_createDependency","paramMetadata","ChangeDetectionStrategy","ChangeDetectorStatus","Query","UNDEFINED","ReflectiveInjector","resolve","resolveReflectiveProviders","resolvedProviderMap","mergeResolvedReflectiveProviders","normalizedProvidersMap","resolvedProvider","_normalizeProviders","invalidProviderError","from","resolveAndCreate","ResolvedReflectiveProviders","fromResolvedProviders","ReflectiveInjector_","_providers","_parent","_constructionCounter","len","keyIds","objs","_getByKey","resolveAndCreateChild","createChildFromResolved","inj","resolveAndInstantiate","instantiateResolved","_instantiateProvider","getProviderAtIndex","outOfBoundsError","_new","_getMaxNumberOfObjects","cyclicDependencyError","_instantiate","_getByReflectiveDependency","instantiationError","originalException","originalStack","first","INJECTOR_KEY","_getByKeySelf","_getByKeyDefault","_getObjByKeyId","keyId","_throwOrNull","noProviderError","inj_","_mapProviders","ANALYZE_FOR_ENTRY_COMPONENTS","ContentChildren","selector","data","isViewQuery","descendants","ContentChild","ViewChildren","ViewChild","resolveComponentResources","resourceResolver","componentResolved","urlMap","cachedResourceResolve","url","promise","resp","then","unwrapResponse","componentResourceResolutionQueue","component","promises","templateUrl","template","styleUrls","styles","styleOffset","styleUrl","style","splice","fullyResolved","Promise","all","componentDefResolved","componentDefPendingResolution","delete","clearResolutionOfComponentResourcesQueue","ɵChangeDetectorStatus","ViewEncapsulation","componentNeedsResolution","old","response","noSideEffects","EMPTY_OBJ","EMPTY_ARRAY$1","NG_COMPONENT_DEF","ngComponentDef","NG_DIRECTIVE_DEF","ngDirectiveDef","NG_PIPE_DEF","ngPipeDef","NG_MODULE_DEF","ngModuleDef","NG_LOCALE_ID_DEF","ngLocaleIdDef","NG_BASE_DEF","ngBaseDef","NG_ELEMENT_ID","_renderCompCount","ɵɵdefineComponent","componentDefinition","typePrototype","declaredInputs","providersResolver","consts","vars","ngContentSelectors","hostBindings","contentQueries","inputs","outputs","exportAs","onChanges","onInit","ngOnInit","doCheck","ngDoCheck","afterContentInit","ngAfterContentInit","afterContentChecked","ngAfterContentChecked","afterViewInit","ngAfterViewInit","afterViewChecked","ngAfterViewChecked","onPush","changeDetection","OnPush","directiveDefs","pipeDefs","selectors","viewQuery","features","encapsulation","Emulated","_","setInput","schemas","tView","directiveTypes","directives","feature","pipeTypes","pipes","invertObject","extractDirectiveDef","extractPipeDef","ɵɵsetComponentScope","getComponentDef","getDirectiveDef","getPipeDef","ɵɵdefineNgModule","bootstrap","declarations","transitiveCompileScopes","ɵɵsetNgModuleScope","scope","getNgModuleDef","secondary","newLookup","minifiedKey","publicName","declaredName","ɵɵdefineBase","baseDefinition","ɵɵdefineDirective","ɵɵdefinePipe","pipeDef","pure","getBaseDef","throwNotFound","renderStringify","stringifyForError","defaultScheduler","requestAnimationFrame","setTimeout","ɵɵresolveWindow","element","ownerDocument","defaultView","ɵɵresolveDocument","ɵɵresolveBody","body","INTERPOLATION_DELIMITER","isPropMetadataString","str","maybeUnwrapFn","HOST","TVIEW","FLAGS","PARENT","NEXT","QUERIES","T_HOST","BINDING_INDEX","CLEANUP","CONTEXT","INJECTOR$1","RENDERER_FACTORY","RENDERER","SANITIZER","CHILD_HEAD","CHILD_TAIL","CONTENT_QUERIES","DECLARATION_VIEW","PREORDER_HOOK_FLAGS","HEADER_OFFSET","throwError","TYPE","ACTIVE_INDEX","NATIVE","CONTAINER_HEADER_OFFSET","MONKEY_PATCH_KEY_NAME","unwrapRNode","isLView","isLContainer","isStylingContext","getNativeByIndex","lView","getNativeByTNode","getNativeByTNodeOrNull","getTNode","view","loadInternal","getComponentViewByIndex","nodeIndex","hostView","slotValue","isContentQueryHost","isComponent","isComponentDef","isRootView","readPatchedData","readPatchedLView","viewAttachedToContainer","resetPreOrderHookFlags","registerPreOrderHooks","directiveIndex","directiveDef","initialPreOrderHooksLength","initialPreOrderCheckHooksLength","preOrderHooks","preOrderCheckHooks","registerPostOrderHooks","firstTemplatePass","directiveStart","end","directiveEnd","contentHooks","contentCheckHooks","viewHooks","viewCheckHooks","destroyHooks","executePreOrderHooks","currentView","checkNoChangesMode","currentNodeIndex","executeHooks","firstPassHooks","checkHooks","initPhaseState","hooksToCall","callHooks","initPhase","nodeIndexLimit","lastNodeIndexFound","callHook","isInitHook","hook","directive","elementDepthCount","stylingContext","setCachedStylingContext","bindingsEnabled","currentDirectiveDef","setCurrentDirectiveDef","ɵɵenableBindings","ɵɵdisableBindings","getLView","previousOrParentTNode","isParent","MIN_DIRECTIVE_ID","activeDirectiveId","activeDirectiveSuperClassDepthPosition","activeDirectiveSuperClassHeight","setActiveHostElement","elementIndex","_selectedIndex","setSelectedIndex","getActiveDirectiveId","incrementActiveDirectiveId","adjustActiveDirectiveSuperClassDepthPosition","delta","Math","max","getActiveDirectiveSuperClassHeight","getActiveDirectiveSuperClassDepth","ɵɵrestoreView","viewToRestore","contextLView","getPreviousOrParentTNode","setPreviousOrParentTNode","_isParent","setTNodeAndViewData","getIsParent","setIsNotParent","isCreationMode","getCheckNoChangesMode","setCheckNoChangesMode","mode","bindingRootIndex","getBindingRoot","setBindingRoot","currentQueryIndex","getCurrentQueryIndex","setCurrentQueryIndex","enterView","newView","hostTNode","oldView","bindingStartIndex","leaveView","safeToRunHooks","getSelectedIndex","_currentNamespace","ɵɵnamespaceSVG","ɵɵnamespaceMathML","ɵɵnamespaceHTML","namespaceHTMLInternal","BRAND","allowSanitizationBypass","bypassSanitizationTrustString","trustedString","trusted","_devMode","_runModeLocked","isDevMode","InertBodyHelper","defaultDoc","inertDocument","implementation","createHTMLDocument","inertBodyElement","inertHtml","createElement","appendChild","innerHTML","querySelector","getInertBodyElement","isDOMParserAvailable","DOMParser","getInertBodyElement_DOMParser","getInertBodyElement_InertDocument","getInertBodyElement_XHR","html","encodeURI","xhr","XMLHttpRequest","responseType","open","send","removeChild","firstChild","parseFromString","templateEl","documentMode","stripCustomNsAttrs","el","elAttrs","attributes","attrName","removeAttribute","childNode","nodeType","Node","ELEMENT_NODE","nextSibling","SAFE_URL_PATTERN","DATA_URL_PATTERN","_sanitizeUrl","match","sanitizeSrcset","srcset","split","trim","tagSet","tags","e_1","_b","_c","e_1_1","return","merge","e_2","sets","sets_1","sets_1_1","e_2_1","inertBodyHelper","SecurityContext","VOID_ELEMENTS","OPTIONAL_END_TAG_BLOCK_ELEMENTS","OPTIONAL_END_TAG_INLINE_ELEMENTS","OPTIONAL_END_TAG_ELEMENTS","BLOCK_ELEMENTS","INLINE_ELEMENTS","VALID_ELEMENTS","URI_ATTRS","SRCSET_ATTRS","HTML_ATTRS","ARIA_ATTRS","VALID_ATTRS","SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS","SanitizingHtmlSerializer","sanitizedSomething","buf","sanitizeChildren","current","traverseContent","startElement","TEXT_NODE","chars","nodeValue","endElement","checkClobberedElement","parentNode","nodeName","toLowerCase","elAttr","lower","encodeEntities","node","nextNode","compareDocumentPosition","DOCUMENT_POSITION_CONTAINED_BY","outerHTML","SURROGATE_PAIR_REGEXP","NON_ALPHANUMERIC_REGEXP","charCodeAt","_sanitizeHtml","unsafeHtmlInput","unsafeHtml","mXSSAttempts","parsedHtml","sanitizer","safeHtml","getTemplateContent","parent_1","isTemplateElement","content","Sanitizer","SAFE_STYLE_VALUE","RegExp","URL_RE","_sanitizeStyle","urlMatch","hasBalancedQuotes","outsideSingle","outsideDouble","c","ɵɵsanitizeHtml","getSanitizer","sanitize","HTML","document","ɵɵsanitizeStyle","unsafeStyle","STYLE","ɵɵsanitizeUrl","unsafeUrl","URL","ɵɵsanitizeResourceUrl","unsafeResourceUrl","RESOURCE_URL","ɵɵsanitizeScript","unsafeScript","SCRIPT","ɵɵsanitizeUrlOrResourceUrl","tag","getUrlSanitizer","ɵɵdefaultStyleSanitizer","doSanitizeValue","RendererStyleFlags3","TNODE","PARENT_INJECTOR","INJECTOR_BLOOM_PARENT_SIZE","NO_PARENT_INJECTOR","NodeInjectorFactory","isViewProvider","injectImplementation","resolving","canSeeViewProviders","injectImpl","isProceduralRenderer","renderer","domRendererFactory3","createRenderer","hostElement","rendererType","getLContext","mpValue","isComponentInstance","instance","findViaComponent","isDirectiveInstance","findViaDirective","directiveInstance","directiveIndexEnd","traverseNextElement","getDirectivesAtNodeIndex","findViaNativeElement","existingCtx","native","createLContext","attachPatchData","rElement","parentContext","localRefs","getComponentViewByInstance","componentInstance","child","componentIndices","components","elementComponentIndex","includeComponents","directiveStartIndex","CorePlayerHandler","_players","flushPlayers","player","state","play","queuePlayer","DEFAULT_TEMPLATE_DIRECTIVE_INDEX","ANIMATION_PROP_PREFIX","createEmptyStylingContext","wrappedElement","initialStyles","initialClasses","allocateOrUpdateDirectiveIntoContext","singlePropValuesIndex","styleSanitizer","directiveRegistry","limit","propValuesStartPosition","getStylingContextFromLView","viewData","storageIndex","wrapper","stylingTemplate","allocStylingContext","templateStyleContext","isAnimationProp","hasClassInput","hasStyleInput","addPlayerInternal","playerContext","rootContext","playerContextIndex","ref","addEventListener","playerHandler","getPlayerContext","allocPlayerContext","setUpAttributes","attrs","isProc","namespaceURI","attrVal","setAttribute","setAttributeNS","setProperty","attrsStylingIndexOf","startIndex","val","isNameOnlyAttributeMarker","marker","hasParentInjector","parentLocation","getParentInjectorIndex","getParentInjectorViewOffset","getParentInjectorView","location","startView","viewOffset","parentView","getLViewParent","findComponentView","rootTNode","getRootContext","viewOrComponent","getRootView","componentOrLView","includeViewProviders","setIncludeViewProviders","oldValue","BLOOM_MASK","BLOOM_SIZE","nextNgElementId","getOrCreateNodeInjectorForNode","existingInjectorIndex","getInjectorIndex","injectorIndex","insertBloom","blueprint","parentLoc","getParentInjectorLocation","parentIndex","parentLView","parentData","footer","diPublicInInjector","bloomAdd","bloomBit","mask","b6","b5","tData","getOrCreateInjectable","bloomHash","bloomHashBitOrFactory","tokenId","savePreviousOrParentTNode","saveLView","NodeInjector","previousTView","hostTElementNode","shouldSearchParent","bloomHasToken","searchTokensOnInjector","NOT_FOUND","moduleInjector","previousInjectImplementation","currentTView","injectableIdx","locateDirectiveOrProvider","getNodeInjectable","canAccessViewProviders","isHostSpecialCase","nodeProviderIndexes","providerIndexes","tInjectables","injectablesStart","directivesStart","cptViewProvidersCount","endIndex","providerTokenOrDef","dirDef","lData","isFactory","previousIncludeViewProviders","injectorView","isFirstHostTNode","_tNode","_lView","ɵɵgetInheritedFactory","getDebugContext","getOriginalError","defaultErrorLogger","ErrorHandler","_console","handleError","_findOriginalError","_findContext","errorLogger","getErrorLogger","CAMEL_CASE_REGEXP","normalizeDebugBindingValue","NO_CHANGE","enqueueHostInstruction","priority","instructionFn","instructionFnArgs","buffer","findNextInsertionIndex","BoundPlayerFactory","initializeStaticContext","stylingStartIndex","patchContextWithStaticAttrs","attrsStylingStartIndex","attr","patchInitialStylingValue","initialStyling","directiveOwnerIndex","allowValueChange","addOrUpdateStaticStyle","renderInitialClasses","setClass","renderInitialStyles","setStyle","getMatchingBindingIndex","bindingName","start","getProp","updateClassMap","classesInput","updateStylingMap","updateStyleMap","stylesInput","entryIsClassBased","isMultiValueCacheHit","newValue","readCachedMapValue","propNames","playerBuilder","ClassAndStylePlayerBuilder","rawValue","playerBuilderPosition","playerBuilderIndex","playerBuildersAreDirty","hasPlayerBuilderChanged","setPlayerBuilder","applyAll","getMultiClassesStartIndex","getMultiStylesStartIndex","patchStylingMapIntoContext","ctxStart","ctxEnd","cacheValue","dirty","cacheIndex","cachedValues","ownershipValuesStartIndex","existingCachedValueCount","valuesEntryShapeChange","totalUniqueValues","totalNewAllocatedSlots","applyAllProps","ctxIndex","totalRemainingProperties","currentProp","normalizedProp","mapProp","hyphenate","currentValue","getValue","currentDirectiveIndex","getDirectiveIndexFromEntry","currentFlag","getPointers","hasValueChanged","setValue","setPlayerBuilderIndex","hasInitialValueChanged","setDirty","getStyleSanitizer","propertiesLoop","isInsideOwnershipArea","distantCtxDirectiveIndex","distantCtxPlayerBuilderIndex","getPlayerBuilderIndex","distantCtxValue","distantCtxFlag","swapMultiContextEntries","insertNewMultiProperty","prepareInitialFlag","ctxValue","ctxFlag","updateCachedMapValue","startPosition","endPosition","totalValues","dirtyFutureValues","nextStartPosition","totalStylingEntries","classCache","diffInStartPosition","setContextDirty","setContextPlayersDirty","updateClassProp","offset","forceOverride","updateSingleStylingValue","updateStyleProp","isClassBased","singleIndex","getSinglePropIndexValue","currValue","currFlag","currDirective","value_1","currPlayerIndex","newIndex","setSanitizeFlag","sanitizeYes","indexForMulti","getMultiOrSingleIndex","valueForMulti","multiDirty","singleDirty","valueExists","store","DashCase","removeStyle","removeProperty","className","addClass","removeClass","remove","isDirtyYes","adjustedIndex","isDirty","isClassBasedValue","isSanitizable","pointers","configFlag","staticIndex","dynamicIndex","getInitialValue","flag","getInitialIndex","setProp","builder","insertionIndex","directiveOwnerPointers","playerIndex","getPlayerBuilder","setFlag","indexA","indexB","tmpValue","tmpProp","tmpFlag","tmpPlayerBuilderIndex","tmpDirectiveIndex","flagA","flagB","singleIndexA","_flag","singleIndexB","classBased","doShift","updateSinglePointerValues","indexStartPosition","initialIndexForSingle","initialIndex","getInitialStylingValuesIndexOf","initialValue","a","_element","_type","_values","_dirty","_factory","buildPlayer","currentPlayer","isFirstRender","keyValues","singlePropOffsetRegistryIndex","offsets","dirs","currentDirectiveOwner","newDirectiveOwner","getInitialClassNameValue","initialClassValues","registerMultiMapEntry","count","staticStyles","NG_TEMPLATE_SELECTOR","isCssClassMatching","nodeClassAttrVal","cssClassToMatch","nodeClassesLen","matchIndex","matchEndIdx","hasTagAndTypeMatch","currentSelector","isProjectionMode","isNodeMatchingSelector","nodeAttrs","nameOnlyMarkerIdx","getNameOnlyMarkerIndex","skipToNextSelector","isPositive","selectorAttrValue","readClassValueFromTNode","attrIndexInNode","findAttrIndexInNode","nodeAttrValue","compareAgainstClassName","isInlineTemplate","bindingsMode","maybeAttrName","matchTemplateAttribute","isNodeMatchingSelectorList","isSelectorInSelectorList","selectorListLoop","currentSelectorInList","_currentSanitizer","ELEMENT_MARKER","COMMENT_MARKER","_stylingMode","runtimeIsNewStylingInUse","setCurrentStyleSanitizer","getCurrentStyleSanitizer","MAP_BASED_ENTRY_PROP_NAME","getBindingNameFromIndex","updateContextDirectiveIndex","getConfig","getProp$1","getPropConfig","isSanitizationRequired","getGuardMask","setGuardMask","maskValue","config","getValuesCount","getBindingValue","getDefaultValue","allowStylingFlush","lockContext","setConfig","isContextLocked","getPropValuesStartPosition","hasValueChanged$1","isStylingValueDefined","getCurrentOrLViewSanitizer","sanitizeUsingSanitizerObject","DEFAULT_BINDING_VALUE","DEFAULT_SIZE_VALUE","DEFAULT_GUARD_MASK_VALUE","STYLING_INDEX_FOR_MAP_BINDING","STYLING_INDEX_START_VALUE","currentStyleIndex","currentClassIndex","stylesBitMask","classesBitMask","deferredBindingQueue","updateClassBinding","bindingIndex","deferRegistration","forceUpdate","updateBindingData","updateStyleBinding","isMapBased","counterIndex","sanitizationRequired","deferBindingRegistration","flushDeferredBindings","registerBinding","changed","countId","bindingValue","found","valuesCount","allocateNewContextEntry","addBindingIntoContext","lastValueIndex","applyStyling","bindingData","bitMaskValue","applyStylingFn","bitMask","normalizeBitMaskValue","stylingMapsSyncFn","getStylingMapsSyncFn","_activeStylingMapApplyFn","mapsMode","valueApplied","valuesCountUpToDefault","defaultValue","valueAppliedWithinMap","setStyle$1","setClass$1","classList","syncStylingMap","targetProp","targetPropValueWasApplied","runTheSyncAlgorithm","loopUntilEnd","innerSyncStylingMap","currentMapIndex","lStylingMap","cursor","getCurrentSyncCursor","mapIndex","MAP_CURSORS","getMapProp","iteratedTooFar","isTargetPropMatched","valueIsDefined","resolveInnerMapMode","isValueAllowedToBeApplied","useDefault","valueToApply","bindingIndexToApply","setCurrentSyncCursor","indexValue","resetSyncCursors","activeStylingMapFeature","setStylingMapsSyncFn","currentMode","isExactMatch","innerMode","doApplyValue","setMapValue","TStylingContextDebug","entries","guardMask","bindingsStartPosition","sources","NodeStylingDebug","_data","_isClassBased","_sanitizer","overrideSanitizer","_mapValues","toDebug","debug","assertDefined","actual","toHtml","includeChildren","isTextNode","textContent","readLViewValue","TNode","tView_","propertyMetadataStartIndex","propertyMetadataEndIndex","localNames","initialInputs","tViews","projectionNext","projection","onElementCreationFns","newStyles","newClasses","LViewDebug","_raw_lView","__raw__flags__","creationMode","firstViewPass","checkAlways","attached","destroyed","isRoot","indexWithinInitPhase","toDebugNodes","debugNodes","tNodeCursor","componentLViewDebug","classes","nodes","cleanup","rendererFactory","childHead","childTail","declarationView","queries","tHost","childViews","__other__","LContainerDebug","_raw_lContainer","I18NDebugItem","__raw_opCode","ɵɵselect","selectInternal","I18nMutateOpCodesDebug","__raw_opCodes","__lView","results","opCode","commentValue","code","I18nUpdateOpCodesDebug","icus","checkBit","skipCodes","tIcuIndex","tIcu","sanitizeFn","attrValue","_CLEAN_PROMISE","refreshDescendantViews","refreshDynamicEmbeddedViews","dynamicViewData","renderEmbeddedTemplate","refreshContentQueries","setHostBindings","selectedIndex","expandoInstructions","expandoStartIndex","currentElementIndex","instruction","providerCount","staticContentQueries","refreshChildComponents","viewAttachedToChangeDetector","syncViewWithBlueprint","componentView","componentTView","checkView","directiveDefIdx","elementCreate","overriddenRenderer","rendererToUse","namespace","getNamespace","createElementNS","createLView","tHostNode","getOrCreateTNode","createTNodeAtIndex","createTNode","assignTViewNodeToLView","tParentNode","viewToRender","_previousOrParentTNode","tickRootContext","executeTemplate","getRenderFlags","renderComponentOrTemplate","templateFn","normalExecutionPath","creationModeIsActive","begin","rf","prevSelectedIndex","setNodeStylingTemplate","attrsStartIndex","stylingAttrsStartIndex","executeContentQueries","createDirectivesAndLocals","localRefExtractor","getBindingsEnabled","resolveDirectives","exportsMap","","initNodeFlags","generateExpandoInstructionBlock","baseResolveDirective","saveNameToExportMap","cacheMatchingLocalNames","findDirectiveMatches","registry","matches","instantiateAllDirectives","addComponentLogic","postProcessDirective","invokeDirectivesHostBindings","expando","invokeHostBindingsInCreationMode","saveResolvedLocalsInData","localIndex","getOrCreateTView","createTView","viewIndex","initialViewLength","createViewBlueprint","viewQueryStartIndex","staticViewQueries","pipeRegistry","locateHostElement","elementOrSelector","defaultRenderer","selectRootElement","tParent","generatePropertyAliases","direction","propStore","isInput","defs","propertyAliasMap","internalName","ATTR_TO_PROP","class","for","formaction","innerHtml","readonly","tabindex","elementPropertyInternal","nativeOnly","loadRendererFn","inputData","dataValue","initializeTNodeInputs","setInputsForProperty","markDirtyIfOnPush","childComponentLView","savePropertyDebugData","lastBindingIndex","bindingMetadata","previousExpandoLength","directiveCount","postProcessBaseDirective","setInputsFromAttrs","initialInputData","generateInitialInputs","i_1","minifiedInputName","privateName","queueComponentIndexForCheck","numberOfDirectives","directiveFactory","nodeInjectorFactory","addToViewTree","elementAttributeInternal","strValue","createLContainer","hostNative","isForViewContainerRef","lViewOrLContainer","markViewDirty","scheduleTick","res_1","nothingScheduled","clean","scheduler","rootComponent","detectChangesInternal","detectChangesInRootView","hostTView","executeViewQueryFn","storeBindingMetadata","prefix","suffix","CLEAN_PROMISE","getCleanup","getTViewCleanup","loadComponentRenderer","errorHandler","textBindingInternal","applyOnCreateInstructions","fns","ɵɵallocHostVars","queueHostBindingForCheck","hostVars","getCurrentDirectiveDef","prefillHostVars","totalHostVars","_symbolIterator","getSymbolIterator","Symbol_1","getOwnPropertyNames","looseIdentical","isNaN","devModeEqual","isListLikeIterableA","isListLikeIterable","isListLikeIterableB","areIterablesEqual","comparator","iterator1","iterator2","item1","item2","WrappedValue","wrapped","wrap","unwrap","isWrapped","isJsObject","updateBinding","getBinding","bindingUpdated","isDifferent","bindingUpdated2","exp1","exp2","different","bindingUpdated3","exp3","bindingUpdated4","exp4","ɵɵproperty","bindReconciledValue","ɵɵattribute","bound","interpolationV","isBindingUpdated","interpolation1","v0","interpolation2","i0","v1","interpolation3","i1","v2","interpolation4","i2","v3","interpolation5","i3","v4","interpolation6","i4","v5","interpolation7","i5","v6","interpolation8","i6","v7","ɵɵattributeInterpolate1","interpolatedValue","ɵɵattributeInterpolate2","ɵɵattributeInterpolate3","ɵɵattributeInterpolate4","ɵɵattributeInterpolate5","ɵɵattributeInterpolate6","ɵɵattributeInterpolate7","ɵɵattributeInterpolate8","ɵɵattributeInterpolateV","interpolated","markDirty","getLContainer","embeddedView","container","getContainerRenderParent","tViewNode","nativeParentNode","executeActionOnElementOrContainer","action","lNodeToHandle","beforeNode","lContainer","rNode","nativeInsertBefore","nativeRemoveNode","destroyNode","executeActionOnContainer","renderParent","anchor","executeActionOnView","createTextNode","createText","addRemoveViewFromContainer","insertMode","insertView","indexInContainer","containerLength","detachView","removeIndex","viewToDetach","removeView","detachedView","destroyLView","destroyViewTree","rootView","cleanUpView","firstView","getParentState","executeOnDestroys","removeListeners","tCleanup","lCleanup","idxOrTargetGetter","useCaptureOrSubIdx","removeEventListener","unsubscribe","insertBefore","nativeAppendOrInsertBefore","nativeAppendChild","childEl","childTNode","getRenderParent","getHighestElementOrICUContainer","getHostNative","isIcuCase","ShadowDom","Native","anchorNode","getNativeAnchorNode","parentTNode","getBeforeNodeForView","childEl_1","childEl_1_1","viewIndexInContainer","nextViewIndex","tViewNodeChild","isHostElement","nativeParent","nativeRemoveChild","appendProjectedNodes","tProjectionNode","selectorIndex","projectedView","nodeToProject","appendProjectedNode","appendProjectedChildren","ngContainerChildTNode","projectionView","projectedTNode","nodeOrContainer","viewRootTNode","executeActionOnNode","executeActionOnElementContainerOrIcuContainer","executeActionOnProjection","componentLView","projectionTNode","projectedComponentLView","ɵɵcontainer","containerInternal","addTContainerToQueries","ɵɵtemplate","tContainerNode","ɵɵcontainerRefreshStart","ɵɵcontainerRefreshEnd","nextIndex","insertNodeBeforeViews","addNode","comment","createComment","ɵɵreference","getContextLView","ɵɵload","ɵɵdirectiveInject","ɵɵinjectAttribute","attrNameToInject","injectAttributeImpl","attrsLength","accumulatedClasses","accumulatedStyles","_stylingProp","defer","getClassesContext","getStylesContext","_stylingMap","valueHasChanged","normalizeIntoStylingMap","newValues","allValuesTrue","outer","propAtIndex","getActiveDirectiveStylingIndex","getContext","allocTStylingContext","ɵɵstyling","classBindingNames","styleBindingNames","directiveStylingIndex","getActiveDirectiveStylingIndex$1","stylingInit","updateLastDirectiveIndex","initStyling","registerHostDirective","updateContextWithBindings","findOrPatchDirectiveIntoRegistry","staticModeOnly","hyphenateEntries","newEntries","singlePropOffsetValues","totalCurrentClassBindings","totalCurrentStyleBindings","cachedClassMapValues","cachedStyleMapValues","stylesOffset","singleClassesStartIndex","multiStylesStartIndex","multiClassesStartIndex","currentSinglePropsLength","insertionOffset","filteredStyleBindingNames","name_1","singlePropIndex","filteredClassBindingNames","i_2","name_2","totalStyles","totalClasses","totalNewEntries","i_3","isMultiBased","singleOrMultiIndex","i_4","i_5","i_6","multiIndex","initialValuesToLookup","indexForInitial","initialFlag","newStylesSpaceAllocationSize","newClassesSpaceAllocationSize","cachedStyleMapIndex","i_7","cachedClassMapIndex","i_8","ɵɵstyleProp","styleIndex","stylePropInternal","valueToAdd","resolveStylePropValue$1","getStylingContext","styleProp","resolveStylePropValue","resolvedValue","ɵɵclassProp","classIndex","booleanOrNull","classProp","ɵɵstyleMap","styleInputVal","forceStylesAsString","styleMap","ɵɵclassMap","classMapInternal","classInputVal","forceClassesAsString","classMap","ɵɵstylingApply","runtimeAllowOldStyling","renderStyling","rootOrView","classesStore","stylesStore","totalPlayersQueued","allowFlush","flushQueue","isContextDirty","flushPlayerBuilders","multiStartIndex","directiveIndex_1","playersStartIndex","playerInsertionIndex","oldPlayer","stylingApply","getRenderer","getNativeFromLView","applyClasses","applyStyles","getCachedStylingContext","ɵɵelementStart","initialStylesIndex","initialClassesIndex","lastAttrIndex","getElementDepthCount","increaseElementDepthCount","registerInitialStylingIntoContext","classesContext","stylesContext","currentQueries","clone","ɵɵelementEnd","decreaseElementDepthCount","getInitialStyleStringValue","initialStyleValues","styleString","ɵɵelement","ɵɵelementHostAttrs","hostElementIndex","ɵɵelementContainerStart","ɵɵelementContainerEnd","ɵɵelementContainer","ɵɵembeddedViewStart","viewBlockId","containerTNode","scanForView","startIdx","viewAtPositionId","setIsParent","getOrCreateEmbeddedTView","containerTViews","createView","ɵɵembeddedViewEnd","viewHost","ɵɵgetCurrentView","isPromise","isObservable","subscribe","ɵɵlistener","eventName","listenerFn","useCapture","eventTargetResolver","listenerInternal","ɵɵcomponentHostSyntheticListener","processOutputs","lCleanupIndex","existingListener","hasDirectives","findExistingListener","tNodeIdx","cleanupEventName","listenerIdxInLCleanup","__ngNextListenerFn__","wrapListener","cleanupFn","listen","propsLength","subscription","idx","executeListenerWithErrorHandling","wrapWithPreventDefault","wrapListenerIn_markDirtyAndPreventDefault","nextListenerFn","preventDefault","returnValue","ɵɵnextContext","level","nextContextImpl","walkUpViews","nestingLevel","matchingProjectionSlotIndex","projectionSlots","wildcardNgContentIndex","ngProjectAsAttrVal","getProjectAsAttrValue","ngProjectAsAttrIdx","ɵɵprojectionDef","componentNode","projectionHeads","tails","componentChild","slotIndex","delayProjection","setDelayProjection","ɵɵprojection","ɵɵpropertyInterpolate","ɵɵpropertyInterpolate1","ɵɵpropertyInterpolate2","ɵɵpropertyInterpolate3","ɵɵpropertyInterpolate4","ɵɵpropertyInterpolate5","ɵɵpropertyInterpolate6","ɵɵpropertyInterpolate7","ɵɵpropertyInterpolate8","ɵɵpropertyInterpolateV","ɵɵtext","textNative","ɵɵtextBinding","ɵɵtextInterpolate","ɵɵtextInterpolate1","ɵɵtextInterpolate2","ɵɵtextInterpolate3","ɵɵtextInterpolate4","ɵɵtextInterpolate5","ɵɵtextInterpolate6","ɵɵtextInterpolate7","ɵɵtextInterpolate8","ɵɵtextInterpolateV","ɵɵclassMapInterpolate1","ɵɵclassMapInterpolate2","ɵɵclassMapInterpolate3","ɵɵclassMapInterpolate4","ɵɵclassMapInterpolate5","ɵɵclassMapInterpolate6","ɵɵclassMapInterpolate7","ɵɵclassMapInterpolate8","ɵɵclassMapInterpolateV","ɵɵstylePropInterpolate1","valueSuffix","ɵɵstylePropInterpolate2","ɵɵstylePropInterpolate3","ɵɵstylePropInterpolate4","ɵɵstylePropInterpolate5","ɵɵstylePropInterpolate6","ɵɵstylePropInterpolate7","ɵɵstylePropInterpolate8","ɵɵstylePropInterpolateV","ɵɵhostProperty","ɵɵupdateSyntheticHostBinding","getPlayers","getPlayersInternal","players","nonFactoryPlayersStart","getComponent","loadLContextFromNode","getComponentAtNodeIndex","getContext$1","getViewComponent","loadLContext","getRootComponents","getInjector","getDirectives","throwOnNotFound","getHostElement","isBrowserEvents","listener","getListeners","listeners","firstParam","secondParam","listenerElement","callback","useCaptureOrIndx","sort","sortListeners","GLOBAL_PUBLISH_EXPANDO_KEY","_published","publishGlobalUtil","createRootComponentView","resetComponentState","createRootComponent","componentDef","hostFeatures","instantiateRootComponent","createRootContext","LifecycleHooksFeature","rootTView","dirIndex","SimpleChange","previousValue","firstChange","isFirstChange","ɵɵNgOnChangesFeature","NgOnChangesFeatureImpl","ngInherit","definition","ngOnChanges","ngOnChangesSetInput","wrapOnChanges","wrapOnChangesHook_inPreviousChangesStorage","simpleChangesStore","getSimpleChangesStore","setSimpleChangesStore","SIMPLE_CHANGES_STORE","previousChange","ɵɵInheritDefinitionFeature","superType","getSuperType","superDef","baseDef","writeableDef","maybeUnwrapEmpty","baseViewQuery","baseContentQueries","baseHostBindings","inheritHostBindings","inheritViewQuery","inheritContentQueries","superHostBindings","superViewQuery","superContentQueries","features_1","features_1_1","superPrototype","prevViewQuery","ctx","prevContentQueries","prevHostBindings","resolveProvider","lInjectablesBlueprint","providerFactory","beginIndex","isClassProvider","existingFactoryIndex","existingProvidersFactoryIndex","existingViewProvidersFactoryIndex","doesViewProvidersFactoryExist","multiFactory","f","componentProviders","multiFactoryAdd","multiViewProvidersFactoryResolver","multiProvidersFactoryResolver","isComponentProvider","multiResolve","factories","componentCount","multiProviders","ɵɵProvidersFeature","viewProviders","processProvidersFn","ComponentRef","ComponentFactory","noComponentFactoryError","ERROR_COMPONENT","R3ElementRef","R3TemplateRef","R3ViewContainerRef","_NullComponentFactoryResolver","resolveComponentFactory","ComponentFactoryResolver","CodegenComponentFactoryResolver","_ngModule","_factories","componentType","ComponentFactoryBoundToModule","_super","projectableNodes","rootSelectorOrNode","NgModuleRef","NgModuleFactory","ViewRef","_context","_componentIndex","_appRef","_viewContainerRef","_tViewNode","collectNativeNodes","tNodeChild","nativeNode","componentHost","currentProjectedNode","_lookUpContext","detach","storeCleanupFn","markForCheck","reattach","detectChanges","checkNoChanges","checkNoChangesInternal","attachToViewContainerRef","vcRef","detachFromAppRef","renderDetachView","attachToAppRef","appRef","RootViewRef","_view","checkNoChangesInRootView","createElementRef","ElementRefToken","ElementRef_","createTemplateRef","TemplateRefToken","TemplateRef_","_declarationParentView","elementRef","_tView","_hostLContainer","_injectorIndex","createEmbeddedView","createEmbeddedViewAndNode","viewRef","hostContainer","RendererStyleFlags2","ElementRef","nativeElement","SWITCH_ELEMENT_REF_FACTORY","SWITCH_ELEMENT_REF_FACTORY__POST_R3__","injectElementRef","RenderComponentType","slotCount","animations","RenderDebugInfo","Renderer","RootRenderer","RendererFactory2","Version","Renderer2","SWITCH_RENDERER2_FACTORY","SWITCH_RENDERER2_FACTORY__POST_R3__","injectRenderer2","nodeAtIndex","getOrCreateRenderer2","VERSION","full","major","minor","patch","DefaultIterableDifferFactory","supports","trackByFn","DefaultIterableDiffer","trackByIdentity","_linkedRecords","_unlinkedRecords","_previousItHead","_itHead","_itTail","_additionsHead","_additionsTail","_movesHead","_movesTail","_removalsHead","_removalsTail","_identityChangesHead","_identityChangesTail","_trackByFn","forEachItem","_next","forEachOperation","nextIt","nextRemove","addRemoveOffset","moveOffsets","currentIndex","getPreviousIndex","adjPreviousIndex","_nextRemoved","previousIndex","localMovePreviousIndex","localCurrentIndex","forEachPreviousItem","_nextPrevious","forEachAddedItem","_nextAdded","forEachMovedItem","_nextMoved","forEachRemovedItem","forEachIdentityChange","_nextIdentityChange","diff","collection","check","_reset","itemTrackBy","mayBeDirty","index_1","trackById","_verifyReinsertion","_addIdentityChange","_mismatch","iterateListLike","_truncate","nextRecord","previousRecord","_prev","_remove","_moveAfter","_reinsertAfter","_addAfter","IterableChangeRecord_","reinsertRecord","_addToMoves","_addToRemovals","_unlink","prevRecord","prev","_prevRemoved","_insertAfter","_DuplicateMap","put","toIndex","_prevDup","_nextDup","_DuplicateItemRecordList","_head","_tail","atOrAfterIndex","duplicates","recordList","moveOffset","DefaultKeyValueDifferFactory","DefaultKeyValueDiffer","_records","_mapHead","_appendAfter","_previousMapHead","_changesHead","_changesTail","forEachChangedItem","_nextChanged","_forEach","_maybeAddToChanges","_getOrCreateRecordForKey","_insertBeforeOrAppend","before","record_1","KeyValueChangeRecord_","_addToAdditions","_addToChanges","IterableDiffers","copied","extend","find","iterable","getTypeNameForDebugging","KeyValueDiffers","kv","ChangeDetectorRef","SWITCH_CHANGE_DETECTOR_REF_FACTORY","SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__","injectChangeDetectorRef","createViewRef","componentIndex","hostComponentView","keyValDiff","defaultIterableDiffers","defaultKeyValueDiffers","TemplateRef","SWITCH_TEMPLATE_REF_FACTORY","SWITCH_TEMPLATE_REF_FACTORY__POST_R3__","injectTemplateRef","ViewContainerRef","SWITCH_VIEW_CONTAINER_REF_FACTORY","SWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__","injectViewContainerRef","ViewContainerRefToken","createContainerRef","ViewContainerRef_","_lContainer","_hostTNode","_hostView","getParentInjectorTNode","startTNode","parentTNode_1","viewAmount","templateRef","allocateContainerIfNeeded","adjustedIdx","_adjustIndex","createComponent","componentFactory","ngModuleRef","contextInjector","parentInjector","componentRef","insert","move","shift","commentNode","nativeNextSibling","expressionChangedAfterItHasBeenCheckedError","isFirstCheck","viewDebugError","err","_addDebugContext","logError","viewDestroyedError","shiftInitState","priorInitState","newInitState","initState","initIndex","shouldCallLifecycleInitHook","asTextData","asElementData","asProviderData","asPureExpressionData","asQueryList","Services","setCurrentNode","createRootView","createComponentView","createNgModuleRef","overrideProvider","overrideComponentView","clearOverrides","checkAndUpdateView","checkNoChangesView","destroyView","resolveDep","createDebugContext","handleEvent","updateDirectives","updateRenderer","dirtyParentQueries","NOOP","_tokenKeyCache","tokenKey","_renderCompCount$1","checkBinding","bindingIdx","oldValues","checkAndUpdateBinding","checkBindingNoChanges","bindings","markParentViewsForCheck","currView","viewContainerParent","markParentViewsForCheckProjectedViews","endView","dispatchEvent","event","root","declaredViewContainer","parentNodeDef","viewParentEl","renderNode","renderElement","renderText","isComponentView","isEmbeddedView","filterQueryId","queryId","splitMatchedQueriesDsl","matchedQueriesDsl","matchedQueries","matchedQueryIds","references","valueType","splitDepsDsl","sourceName","getParentRenderElement","renderHost","componentRendererType","DEFINITION_CACHE","WeakMap","resolveDefinition","visitRootRenderNodes","lastRenderRootNode","visitSiblingRenderNodes","nodeDef","visitRenderNode","childCount","visitProjectedRenderNodes","ngContentIndex","compView","hostElDef","projectedNodes","execRenderNodeAction","ngContent","rn","bindingFlags","embeddedViews","viewContainer","_embeddedViews","NS_PREFIX_RE","splitNamespace","calcBindingFlags","_toStringWithNull","UNDEFINED_VALUE","InjectorRefTokenKey","INJECTORRefTokenKey","NgModuleRefTokenKey","resolveNgModuleDep","depDef","tokenKey_1","providerDef","_def","providersByKey","providerInstance","_createProviderInstance","targetsModule","moduleTransitivelyPresent","modules","injectable","_createClass","depValues","_callFactory","detachEmbeddedView","elementData","removeFromArray","renderDetachView$1","renderAttachEmbeddedView","prevView","prevRenderNode","addToArray","pop","EMPTY_CONTEXT","getComponentViewDefinitionFactory","viewDefFactory","ComponentFactory_","_inputs","_outputs","inputsArr","templateName","outputsArr","viewDef","componentNodeIndex","componentProvider","ComponentRef_","ViewRef_","_viewRef","_component","_elDef","changeDetectorRef","Injector_","createViewContainerData","elDef","elData","viewRef_","attachEmbeddedView","attachProjectedView","vcElementData","dvcElementData","projectedViews","_projectedViews","markNodeAsProjectedTemplate","nodeFlags","childFlags","moveEmbeddedView","oldViewIndex","newViewIndex","createChangeDetectorRef","rootRenderNodes","renderNodes","fs","disposables","createTemplateData","_parentView","createInjector$1","createRendererV1","RendererAdapter","delegate","selectorOrNode","namespaceAndName","createViewRoot","createTemplateAnchor","parentElement","projectNodes","attachViewAfter","viewRootNodes","viewAllNodes","listenGlobal","setElementProperty","propertyName","propertyValue","setElementAttribute","attributeValue","ns","setBindingDebugInfo","setElementClass","isAdd","setElementStyle","styleName","styleValue","invokeElementMethod","methodName","setText","animate","moduleType","bootstrapComponents","NgModuleRef_","_moduleType","_bootstrapComponents","_destroyListeners","initNgModule","provDef","injectFlags","callNgModuleLifecycle","lifecycles","RendererV1TokenKey","Renderer2TokenKey","ElementRefTokenKey","ViewContainerRefTokenKey","TemplateRefTokenKey","ChangeDetectorRefTokenKey","InjectorRefTokenKey$1","INJECTORRefTokenKey$1","checkIndex","depDefs","outputIndex","directChildFlags","childMatchedQueries","query","createProviderInstance","_createProviderInstance$1","createPipeInstance","createClass","createDirectiveInstance","output","outputObservable","eventHandlerClosure","allowPrivateServices","callFactory","NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR","searchView","findCompView","providerDef_1","allProviders","publicProviders","providerData","updateProp","changes","nonMinifiedName","callLifecycleHooksChildrenFirst","callProviderLifecycles","callElementProvidersLifecycles","ComponentFactoryResolver$1","ComponentFactory$1","toRefArray","array","nonMinified","LocaleDataIndex","ROOT_CONTEXT","SCHEDULER","isBoundToModule","isInternalRootView","rootViewInjector","createChainedInjector","hostRNode","rootFlags","isIsolated","tElementNode","rootLView","oldLView","nodesforSlot","ComponentRef$1","_rootLView","destroyCbs","LOCALE_DATA","ɵLocaleDataIndex","u","localeEn","plural","floor","abs","getLocalePluralCase","locale","findLocaleData","PluralCase","normalizedLocale","parentLocale","MARKER","ICU_BLOCK_REGEXP","SUBTEMPLATE_REGEXP","PH_REGEXP","BINDING_REGEXP","ICU_REGEXP","ROOT_TEMPLATE_ID","PP_MULTI_VALUE_PLACEHOLDERS_REGEXP","PP_PLACEHOLDERS_REGEXP","PP_ICU_VARS_REGEXP","PP_ICU_PLACEHOLDERS_REGEXP","PP_ICUS_REGEXP","PP_CLOSE_TEMPLATE_REGEXP","PP_TEMPLATE_ID_REGEXP","extractParts","pattern","prevPos","braceStack","braces","lastIndex","exec","pos","block","parseICUBlock","substring_1","cases","icuType","mainBinding","binding","parseInt","blocks","assertGreaterThan","expected","removeInnerTemplateTranslation","tagMatched","inTemplate","generateBindingUpdateOpCodes","destinationNode","updateOpCodes","textParts","textValue","toMaskBit","getBindingMask","icuExpression","valueArr","i18nIndexStack","i18nIndexStackPointer","min","i18nVarsCount","parentIndexStack","ɵɵi18nStart","subTemplateIndex","i18nStartFirstPass","parentIndexPointer","createOpCodes","icuExpressions","msgParts","replaceNgsp","NGSP_UNICODE_REGEXP","getTranslationForTemplate","search","phIndex","icuNodeIndex","icuStart","hasBinding","textNodeIndex","allocExpando","numSlotsToAlloc","update","appendI18nNode","previousTNode","ɵɵi18nPostprocess","replacements","matches_1","templateIdsStack_1","phs","tmpl","placeholders","placeholder","templateId","isCloseTemplateTag","currentTemplateId","_idx","ɵɵi18nEnd","i18nEndFirstPass","rootIndex","tI18n","lastCreatedNode","visitedNodes","readCreateOpCodes","removeNode","createDynamicNodeAtIndex","currentTNode","textRNode","destinationNodeIndex","elementNodeIndex","commentNodeIndex","commentRNode","activeCaseIndex","tagNameValue","removedPhTNode","removedPhRNode","ɵɵi18n","ɵɵi18nAttributes","i18nAttributesFirstPass","previousElementIndex","changeMask","shiftsCounter","ɵɵi18nExp","ɵɵi18nApply","readUpdateOpCodes","bindingsStartIndex","bypassCheckBit","caseCreated","icuTNode","removeCodes","removeOpCode","activeIndex","caseIndex","getCaseIndex","resolvedCase","getPluralCase","getLocaleId","LOCALE_ID","tIcus","createCodes","updateCodes","childIcus","nestedIcus","icuIndex","icuCase","parseIcuCase","opCodes","parseNodes","currentNode","nestedIcusToCreate","lowerAttrName","COMMENT_NODE","NESTED_ICU","nestedIcuIndex","ngDevMode","nestedIcu","nestedIcuNodeIndex","nestTIcuIndex","TRANSLATIONS","LOCALIZE_PH_REGEXP","ɵɵi18nLocalize","setLocaleId","localeId","assertSameOrNotExisting","incoming","registerNgModuleType","COMPONENT_FACTORY_RESOLVER","NgModuleRef$1","getNgLocaleIdDef","_r3Injector","NgModuleFactory$1","ɵɵpureFunction0","slotOffset","pureFn","thisArg","ɵɵpureFunction1","exp","ɵɵpureFunction2","ɵɵpureFunction3","ɵɵpureFunction4","ɵɵpureFunction5","exp5","ɵɵpureFunction6","exp6","ɵɵpureFunction7","exp7","ɵɵpureFunction8","exp8","ɵɵpureFunctionV","exps","ɵɵpipe","pipeName","getPipeDef$1","pipeInstance","ɵɵpipeBind1","unwrapValue$1","isPure","transform","ɵɵpipeBind2","ɵɵpipeBind3","ɵɵpipeBind4","ɵɵpipeBindV","EventEmitter","isAsync","__isAsync","emit","generatorOrNext","complete","schedulerFn","errorFn","completeFn","sink","Subscription","Subject","symbolIterator","_results","QueryList","symbol","proto","filter","reduce","init","toArray","reset","resultsTree","last","notifyOnChanges","LQuery","predicate","containerValues","LQueries_","shallow","deep","track","queryList","descend","read","createLQuery","shallowResults","copyQueriesToContainer","deepResults","copyQueriesToView","insertView$1","removeView$1","viewValuesIdx","getIdxOfMatchingSelector","queryByReadToken","matchingIdx","queryByTemplateRef","templateRefToken","templateRefResult","queryRead","queryByTNodeType","insertBeforeContainer","addMatch","matchingValue","insertBeforeViewMatches","createPredicate","_valuesTree","createQueryListInLView","isStatic","_static","storeCleanupWithContext","ɵɵqueryRefresh","queryListImpl","ɵɵstaticViewQuery","viewQueryInternal","ɵɵviewQuery","ɵɵloadViewQuery","ɵɵcontentQuery","contentQueryInternal","contentQuery","tViewContentQueries","ɵɵstaticContentQuery","ɵɵloadContentQuery","ɵɵtemplateRefExtractor","angularCoreEnv","ɵɵstyleSanitizer","EMPTY_ARRAY$3","moduleQueue","flushingModuleQueue","flushModuleScopingQueueAsMuchAsPossible","every","isResolvedDeclaration","setScopeOnDeclaredComponents","declaration","compileNgModule","compileNgModuleDefs","enqueueModuleForDelayedScoping","allowDuplicateDeclarationsInRoot","expandModuleWithProviders","emitInline","compileInjector","transitiveScopes","transitiveScopesFor","patchComponentDefWithScope","ngSelectorScope","compilation","dir","pipe","processNgModuleFn","isNgModule","scopes","exported","declared","importedType","importedScope","entry","exportedType","exportedScope","isModuleWithProviders","compileComponent","maybeQueueResolutionOfComponentResources","directiveMetadata","typeSourceSpan","createParseSourceSpan","preserveWhitespaces","interpolation","usesInheritance","addBaseDefToUndecoratedParents","hasSelectorScope","compileDirective","sourceMapUrl","facade","extendsDirectlyFromObject","extractQueriesMetadata","isContentQuery","lifecycle","usesOnChanges","part","viewQueries","objPrototype","extractBaseDefMetadata","compileBase","hasHostDecorators","field","ann","metadataName","bindingPropertyName","isQueryAnn","queriesMeta","_loop_2","annotations_1","isInputAnn","convertToR3QueryMetadata","splitByComma","piece","static","compilePipe","typeName","Directive","SWITCH_COMPILE_DIRECTIVE","Component","SWITCH_COMPILE_COMPONENT","Pipe","SWITCH_COMPILE_PIPE","Input","Output","HostBinding","hostPropertyName","HostListener","SWITCH_COMPILE_COMPONENT__POST_R3__","SWITCH_COMPILE_DIRECTIVE__POST_R3__","SWITCH_COMPILE_PIPE__POST_R3__","NgModule","SWITCH_COMPILE_NGMODULE","SWITCH_COMPILE_NGMODULE__POST_R3__","APP_INITIALIZER","ApplicationInitStatus","appInits","initialized","donePromise","rej","reject","runInitializers","asyncInitPromises","initResult","catch","ApplicationInitStatus_Factory","APP_ID","APP_ID_RANDOM_PROVIDER","_appIdRandomProviderFactory","_randomChar","fromCharCode","random","MissingTranslationStrategy","PLATFORM_INITIALIZER","PLATFORM_ID","APP_BOOTSTRAP_LISTENER","PACKAGE_ROOT_URL","Console","log","Console_Factory","LOCALE_ID$1","TRANSLATIONS$1","TRANSLATIONS_FORMAT","trace","events","ModuleWithComponentFactories","ngModuleFactory","componentFactories","Compiler_compileModuleSync__POST_R3__","Compiler_compileModuleSync","Compiler_compileModuleAsync__POST_R3__","Compiler_compileModuleAsync","Compiler_compileModuleAndAllComponentsSync__POST_R3__","Compiler_compileModuleAndAllComponentsSync","Compiler_compileModuleAndAllComponentsAsync__POST_R3__","Compiler_compileModuleAndAllComponentsAsync","Compiler","compileModuleSync","compileModuleAsync","compileModuleAndAllComponentsSync","compileModuleAndAllComponentsAsync","clearCache","clearCacheFor","getModuleId","Compiler_Factory","COMPILER_OPTIONS","CompilerFactory","wtfEnabled","detectWTF","wtf","noopScope","arg0","arg1","wtfCreateScope","createScope","wtfLeave","leave","leaveScope","wtfStartTimeRange","startTimeRange","rangeType","beginTimeRange","wtfEndTimeRange","endTimeRange","range","scheduleMicroTask","Zone","NgZone","enableLongStackTrace","hasPendingMicrotasks","hasPendingMacrotasks","isStable","onUnstable","onMicrotaskEmpty","onStable","onError","assertZonePatched","_nesting","_outer","_inner","fork","forkInnerZoneWithAngularBehavior","zone","properties","isAngularZone","onInvokeTask","task","applyThis","applyArgs","onEnter","invokeTask","onLeave","onInvoke","invoke","onHasTask","hasTaskState","hasTask","change","microTask","checkStable","macroTask","onHandleError","runOutsideAngular","isInAngularZone","assertInAngularZone","assertNotInAngularZone","run","runTask","scheduleEventTask","EMPTY_PAYLOAD","noop","cancelTask","runGuarded","_platform","NoopNgZone","Testability","_ngZone","_pendingCount","_isZoneStable","_didWork","_callbacks","taskTrackingZone","_watchAngularEvents","_runCallbacksIfReady","increasePendingRequestCount","decreasePendingRequestCount","cb","clearTimeout","timeoutId","doneCb","pending_1","getPendingTasks","updateCb","macroTasks","creationLocation","addCallback","timeout","whenStable","getPendingRequestCount","findProviders","using","exactMatch","Testability_Factory","TestabilityRegistry","_applications","_testabilityGetter","addToWindow","registerApplication","testability","unregisterApplication","unregisterAllApplications","getTestability","elem","getAllTestabilities","getAllRootElements","findTestabilityInTree","findInAncestors","TestabilityRegistry_Factory","_NoopGetTestability","compileNgModuleFactory","compileNgModuleFactory__POST_R3__","moduleFactory","isComponentResourceResolutionQueueEmpty","compilerProviders","_mergeArrays","resourceLoader","ResourceLoader","isBoundToModule__POST_R3__","cf","ALLOW_MULTIPLE_PLATFORMS","NgProbeToken","createPlatform","PlatformRef","inits","createPlatformFactory","parentPlatformFactory","desc","extraProviders","platform","getPlatform","injectedProviders","assertPlatform","requiredToken","_injector","_modules","bootstrapModuleFactory","ngZone","getNgZone","ngZoneOption","ngZoneInjector","moduleRef","exceptionHandler","_callAndReportToErrorHandler","initStatus","_moduleDoBootstrap","bootstrapModule","compilerOptions","optionsReducer","ApplicationRef","ngDoBootstrap","PlatformRef_Factory","_zone","_exceptionHandler","_componentFactoryResolver","_initStatus","_bootstrapListeners","_views","_runningTick","_enforceNoNewChanges","_stable","componentTypes","tick","isCurrentlyStable","Observable","observer","stableSub","unstableSub","share","componentOrFactory","compRef","_unloadComponent","_loadComponent","_tickScope","_d","_e","_f","attachView","ApplicationRef_Factory","NgModuleFactoryLoader","getModuleFactory__POST_R3__","getRegisteredNgModuleType","noModuleError","getModuleFactory","SystemJsNgModuleLoaderConfig","DEFAULT_CONFIG","factoryPathPrefix","factoryPathSuffix","SystemJsNgModuleLoader","_compiler","_config","load","path","loadAndCompile","exportName","System","import","checkNotEmpty","loadFactory","factoryClassSuffix","SystemJsNgModuleLoader_Factory","modulePath","ViewRef$1","EmbeddedViewRef","DebugEventListener","DebugNode__PRE_R3__","_debugContext","DebugElement__PRE_R3__","addChild","providerTokens","childNodes","childIndex","insertChildrenAfter","newChildren","siblingIndex","refChild","newChild","refIndex","queryAll","_queryElementChildren","queryAllNodes","_queryNodeChildren","triggerEventHandler","eventObj","DebugNode__POST_R3__","DebugElement__POST_R3__","getLocalRefs","discoverLocalRefs","getInjectionTokens","collectPropertyBindings","getFirstBindingIndex","metadataIndex","currentBindingIndex","metadataParts","hostProperties","collectHostPropertyBindings","hostPropIndex","collectClassNames","debugElement","tNodeAttrs","lowercaseTNodeAttrs","eAttrs","lContext","eClasses","eStyles","getPropertyValue","children","getDebugNode__POST_R3__","_queryAllR3","elementsOnly","_queryNodeChildrenR3","rootNativeNode","_addQueryMatchR3","_queryNodeChildrenInContainerR3","head","head_1","head_1_1","nextTNode","nextLView","childView","debugNode","getDebugNode","_nativeNodeToDebugNode","NG_DEBUG_PROPERTY","indexDebugNode","ViewAction","DebugNode","DebugElement","platformCore","APPLICATION_MODULE_PROVIDERS","zoneSchedulerFactory","queue","_iterableDiffersFactory","_keyValueDiffersFactory","_localeFactory","ApplicationModule","ApplicationModule_Factory","parentEl","listenToElementOutputs","handleEventClosure","renderEventHandlerClosure","listenTarget","listenerView","disposable","checkAndUpdateElementValue","securityContext","renderValue","unit","queryIds","nodeMatchedQueries","tplDef","filterId","checkAndUpdateQuery","elementDef","calcQueryValues","notify","boundValue","bindingType","queryDef","getQueryValue","dvc","queryValueType","appendNgContent","_pureExpressionDef","propertyNames","_addInterpolationPart","isNgContainer","validateNode","nodeCount","parentEnd","anchorDef","initView","createViewNodes","compRenderer","outputCount","bindingCount","nodeData","compViewDef","execComponentViewsAction","CreateViewNodes","execQueriesAction","markProjectedViewsForCheck","execEmbeddedViewsAction","CheckNoChanges","CheckAndUpdate","callInit","checkAndUpdateNode","argStyle","v8","v9","checkAndUpdateNodeInline","checkAndUpdateElementInline","bindLen","checkAndUpdateTextInline","checkAndUpdateDirectiveInline","checkAndUpdatePureExpressionInline","checkAndUpdateNodeDynamic","checkAndUpdateElementDynamic","checkAndUpdateTextDynamic","checkAndUpdateDirectiveDynamic","checkAndUpdatePureExpressionDynamic","checkNoChangesNode","checkNoChangesNodeInline","checkNoChangesNodeDynamic","checkNoChangesQuery","Destroy","detachProjectedView","destroyViewNodes","callViewAction","viewState","execProjectedViewsAction","CheckNoChangesProjectedViews","CheckAndUpdateProjectedViews","queryFlags","staticDynamicQueryFlag","checkType","initServicesIfNeeded","services","createDebugServices","debugSetCurrentNode","debugCreateRootView","debugCreateEmbeddedView","debugCreateComponentView","debugCreateNgModuleRef","debugOverrideProvider","debugOverrideComponentView","debugClearOverrides","debugCheckAndUpdateView","debugCheckNoChangesView","debugDestroyView","DebugContext_","debugHandleEvent","debugUpdateDirectives","debugUpdateRenderer","createProdServices","createProdRootView","prodCheckAndUpdateNode","prodCheckNoChangesNode","elInjector","createRootData","DebugRendererFactory2","defWithOverride","applyProviderOverridesToView","callWithDebugContext","DebugAction","viewDefOverrides","applyProviderOverridesToNgModule","calcHasOverrides","hasOverrides","hasDeprecatedOverrides","providerOverrides","override","deprecatedBehavior","providerOverridesWithScope","applyProviderOverrides","moduleSet_1","_currentAction","_currentView","_currentNodeIndex","comp","compFactory","hostViewDef","elementIndicesWithOverwrittenProviders","findElementIndicesWithOverwrittenProviders","elIndicesWithOverwrittenProviders","lastElementDef","applyProviderOverridesToElement","elIndex","nextDirectiveWithBinding","debugCheckDirectivesFn","debugCheckAndUpdateNode","debugCheckNoChangesNode","nextRenderNodeWithBinding","debugCheckRenderNodeFn","givenValues","bindingValues","camelCaseToDashCase","elView","elOrCompView","childDef","collectReferences","findHostElement","logViewDef","logNodeIndex","renderNodeIndex","getRenderNodeIndex","currRenderNodeIndex","refName","oldAction","oldNodeIndex","isViewDebugError","viewWrappedDebugError","getCurrentDebugContext","renderData","DebugRenderer2","whenRenderingDone","debugContextFactory","removeDebugNodeFromIndex","debugCtx","debugEl","debugChildEl","debugRefEl","oldChild","preserveContent","NgModuleFactory_","_ngModuleDefFactory","cloneNgModuleDefinition","destroyPlatform","enableProdMode","asNativeElements","debugEls","setTestabilityGetter","CUSTOM_ELEMENTS_SCHEMA","NO_ERRORS_SCHEMA","ɵNoopNgZone","ɵComponentFactory","ɵALLOW_MULTIPLE_PLATFORMS","ɵAPP_ID_RANDOM_PROVIDER","ɵdefaultIterableDiffers","ɵdefaultKeyValueDiffers","ɵdevModeEqual","ɵisListLikeIterable","ɵisDefaultChangeDetectionStrategy","isDefaultChangeDetectionStrategy","changeDetectionStrategy","ɵConsole","ɵsetCurrentInjector","ɵgetInjectableDef","ɵAPP_ROOT","ɵivyEnabled","ɵCodegenComponentFactoryResolver","ɵclearResolutionOfComponentResourcesQueue","ɵresolveComponentResources","ɵReflectionCapabilities","ɵRenderDebugInfo","ɵ_sanitizeHtml","ɵ_sanitizeStyle","ɵ_sanitizeUrl","ɵglobal","ɵlooseIdentical","ɵstringify","ɵmakeDecorator","ɵisObservable","ɵisPromise","ɵclearOverrides","ɵinitServicesIfNeeded","ɵoverrideComponentView","ɵoverrideProvider","ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR","ɵgetLocalePluralCase","ɵfindLocaleData","ɵLOCALE_DATA","ɵdetectChanges","ɵrenderComponent","renderComponent","ɵRender3ComponentFactory","ɵRender3ComponentRef","ɵLifecycleHooksFeature","ɵRender3NgModuleRef","ɵmarkDirty","ɵNgModuleFactory","ɵNO_CHANGE","ɵgetDirectives","ɵgetHostElement","ɵstore","ɵwhenRendered","whenRendered","ɵi18nConfigureLocalize","i18nConfigureLocalize","translations","ɵsetLocaleId","ɵDEFAULT_LOCALE_ID","ɵsetClassMetadata","setClassMetadata","clazz","parentPrototype","parentConstructor","ɵcompileComponent","ɵcompileDirective","ɵcompileNgModule","ɵcompileNgModuleDefs","ɵpatchComponentDefWithScope","ɵresetCompiledComponents","resetCompiledComponents","ɵflushModuleScopingQueueAsMuchAsPossible","ɵtransitiveScopesFor","ɵcompilePipe","ɵbypassSanitizationTrustHtml","bypassSanitizationTrustHtml","trustedHtml","ɵbypassSanitizationTrustStyle","bypassSanitizationTrustStyle","trustedStyle","ɵbypassSanitizationTrustScript","bypassSanitizationTrustScript","trustedScript","ɵbypassSanitizationTrustUrl","bypassSanitizationTrustUrl","trustedUrl","ɵbypassSanitizationTrustResourceUrl","bypassSanitizationTrustResourceUrl","trustedResourceUrl","ɵgetLContext","ɵNG_ELEMENT_ID","ɵNG_COMPONENT_DEF","ɵNG_DIRECTIVE_DEF","ɵNG_PIPE_DEF","ɵNG_MODULE_DEF","ɵNG_BASE_DEF","ɵNG_INJECTABLE_DEF","ɵNG_INJECTOR_DEF","ɵbindPlayerFactory","bindPlayerFactory","ɵaddPlayer","addPlayer","getOrCreatePlayerContext","ɵgetPlayers","ɵcompileNgModuleFactory__POST_R3__","ɵisBoundToModule__POST_R3__","ɵSWITCH_COMPILE_COMPONENT__POST_R3__","ɵSWITCH_COMPILE_DIRECTIVE__POST_R3__","ɵSWITCH_COMPILE_PIPE__POST_R3__","ɵSWITCH_COMPILE_NGMODULE__POST_R3__","ɵgetDebugNode__POST_R3__","ɵSWITCH_COMPILE_INJECTABLE__POST_R3__","ɵSWITCH_IVY_ENABLED__POST_R3__","ɵSWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__","ɵCompiler_compileModuleSync__POST_R3__","ɵCompiler_compileModuleAsync__POST_R3__","ɵCompiler_compileModuleAndAllComponentsSync__POST_R3__","ɵCompiler_compileModuleAndAllComponentsAsync__POST_R3__","ɵSWITCH_ELEMENT_REF_FACTORY__POST_R3__","ɵSWITCH_TEMPLATE_REF_FACTORY__POST_R3__","ɵSWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__","ɵSWITCH_RENDERER2_FACTORY__POST_R3__","ɵgetModuleFactory__POST_R3__","ɵregisterNgModuleType","ɵpublishGlobalUtil","ɵpublishDefaultGlobalUtils","publishDefaultGlobalUtils","ɵcreateInjector","ɵINJECTOR_IMPL__POST_R3__","ɵregisterModuleFactory","registerModuleFactory","ɵEMPTY_ARRAY","ɵEMPTY_MAP","ɵand","templateFactory","ɵccf","createComponentFactory","ɵcmf","createNgModuleFactory","defFactory","ɵcrt","createRendererType2","ɵdid","outputDefs","ɵeld","fixedAttrs","bindingDefs","suffixOrSecurityContext","ns_1","resolveRendererType2","isFilled","None","ɵgetComponentViewDefinitionFactory","ɵinlineInterpolate","inlineInterpolate","valueCount","c0","a1","c1","a2","c2","a3","c3","a4","c4","a5","c5","a6","c6","a7","c7","a8","c8","a9","c9","ɵinterpolate","interpolate","constAndInterp","ɵmod","moduleDef","ɵmpd","moduleProvideDef","ɵncd","ngContentDef","ɵnov","ɵpid","ɵprd","ɵpad","pureArrayDef","argCount","ɵpod","pureObjectDef","propToIndex","nbKeys","ɵppd","purePipeDef","ɵqud","ɵted","textDef","staticText","ɵunv","unwrapValue","nodeIdx","globalBindingIdx","ɵvid","viewBindingCount","viewDisposableCount","viewNodeFlags","viewRootNodeFlags","viewMatchedQueries","currentParent","currentRenderParent","currentElementHasPublicProviders","currentElementHasPrivateProviders","newParent","rootNodeFlags"],"mappings":"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","sourcesContent":["/**\n * @license Angular v8.2.0-next.2+31.sha-f10d6c6.with-local-changes\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs'), require('rxjs/operators')) :\n    typeof define === 'function' && define.amd ? define('@angular/core', ['exports', 'rxjs', 'rxjs/operators'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.core = {}), global.rxjs, global.rxjs.operators));\n}(this, function (exports, rxjs, operators) { 'use strict';\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\r\n\r\n    function __values(o) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n        if (m) return m.call(o);\r\n        return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n    }\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\r\n\r\n    function __spread() {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var ANNOTATIONS = '__annotations__';\n    var PARAMETERS = '__parameters__';\n    var PROP_METADATA = '__prop__metadata__';\n    /**\n     * @suppress {globalThis}\n     */\n    function makeDecorator(name, props, parentClass, additionalProcessing, typeFn) {\n        var metaCtor = makeMetadataCtor(props);\n        function DecoratorFactory() {\n            var _a;\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            if (this instanceof DecoratorFactory) {\n                metaCtor.call.apply(metaCtor, __spread([this], args));\n                return this;\n            }\n            var annotationInstance = new ((_a = DecoratorFactory).bind.apply(_a, __spread([void 0], args)))();\n            return function TypeDecorator(cls) {\n                if (typeFn)\n                    typeFn.apply(void 0, __spread([cls], args));\n                // Use of Object.defineProperty is important since it creates non-enumerable property which\n                // prevents the property is copied during subclassing.\n                var annotations = cls.hasOwnProperty(ANNOTATIONS) ?\n                    cls[ANNOTATIONS] :\n                    Object.defineProperty(cls, ANNOTATIONS, { value: [] })[ANNOTATIONS];\n                annotations.push(annotationInstance);\n                if (additionalProcessing)\n                    additionalProcessing(cls);\n                return cls;\n            };\n        }\n        if (parentClass) {\n            DecoratorFactory.prototype = Object.create(parentClass.prototype);\n        }\n        DecoratorFactory.prototype.ngMetadataName = name;\n        DecoratorFactory.annotationCls = DecoratorFactory;\n        return DecoratorFactory;\n    }\n    function makeMetadataCtor(props) {\n        return function ctor() {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            if (props) {\n                var values = props.apply(void 0, __spread(args));\n                for (var propName in values) {\n                    this[propName] = values[propName];\n                }\n            }\n        };\n    }\n    function makeParamDecorator(name, props, parentClass) {\n        var metaCtor = makeMetadataCtor(props);\n        function ParamDecoratorFactory() {\n            var _a;\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            if (this instanceof ParamDecoratorFactory) {\n                metaCtor.apply(this, args);\n                return this;\n            }\n            var annotationInstance = new ((_a = ParamDecoratorFactory).bind.apply(_a, __spread([void 0], args)))();\n            ParamDecorator.annotation = annotationInstance;\n            return ParamDecorator;\n            function ParamDecorator(cls, unusedKey, index) {\n                // Use of Object.defineProperty is important since it creates non-enumerable property which\n                // prevents the property is copied during subclassing.\n                var parameters = cls.hasOwnProperty(PARAMETERS) ?\n                    cls[PARAMETERS] :\n                    Object.defineProperty(cls, PARAMETERS, { value: [] })[PARAMETERS];\n                // there might be gaps if some in between parameters do not have annotations.\n                // we pad with nulls.\n                while (parameters.length <= index) {\n                    parameters.push(null);\n                }\n                (parameters[index] = parameters[index] || []).push(annotationInstance);\n                return cls;\n            }\n        }\n        if (parentClass) {\n            ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);\n        }\n        ParamDecoratorFactory.prototype.ngMetadataName = name;\n        ParamDecoratorFactory.annotationCls = ParamDecoratorFactory;\n        return ParamDecoratorFactory;\n    }\n    function makePropDecorator(name, props, parentClass, additionalProcessing) {\n        var metaCtor = makeMetadataCtor(props);\n        function PropDecoratorFactory() {\n            var _a;\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            if (this instanceof PropDecoratorFactory) {\n                metaCtor.apply(this, args);\n                return this;\n            }\n            var decoratorInstance = new ((_a = PropDecoratorFactory).bind.apply(_a, __spread([void 0], args)))();\n            function PropDecorator(target, name) {\n                var constructor = target.constructor;\n                // Use of Object.defineProperty is important since it creates non-enumerable property which\n                // prevents the property is copied during subclassing.\n                var meta = constructor.hasOwnProperty(PROP_METADATA) ?\n                    constructor[PROP_METADATA] :\n                    Object.defineProperty(constructor, PROP_METADATA, { value: {} })[PROP_METADATA];\n                meta[name] = meta.hasOwnProperty(name) && meta[name] || [];\n                meta[name].unshift(decoratorInstance);\n                if (additionalProcessing)\n                    additionalProcessing.apply(void 0, __spread([target, name], args));\n            }\n            return PropDecorator;\n        }\n        if (parentClass) {\n            PropDecoratorFactory.prototype = Object.create(parentClass.prototype);\n        }\n        PropDecoratorFactory.prototype.ngMetadataName = name;\n        PropDecoratorFactory.annotationCls = PropDecoratorFactory;\n        return PropDecoratorFactory;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Inject decorator and metadata.\n     *\n     * @Annotation\n     * @publicApi\n     */\n    var Inject = makeParamDecorator('Inject', function (token) { return ({ token: token }); });\n    /**\n     * Optional decorator and metadata.\n     *\n     * @Annotation\n     * @publicApi\n     */\n    var Optional = makeParamDecorator('Optional');\n    /**\n     * Self decorator and metadata.\n     *\n     * @Annotation\n     * @publicApi\n     */\n    var Self = makeParamDecorator('Self');\n    /**\n     * SkipSelf decorator and metadata.\n     *\n     * @Annotation\n     * @publicApi\n     */\n    var SkipSelf = makeParamDecorator('SkipSelf');\n    /**\n     * Host decorator and metadata.\n     *\n     * @Annotation\n     * @publicApi\n     */\n    var Host = makeParamDecorator('Host');\n    /**\n     * Attribute decorator and metadata.\n     *\n     * @Annotation\n     * @publicApi\n     */\n    var Attribute = makeParamDecorator('Attribute', function (attributeName) { return ({ attributeName: attributeName }); });\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    (function (InjectFlags) {\n        // TODO(alxhub): make this 'const' when ngc no longer writes exports of it into ngfactory files.\n        /** Check self and check parent injector if needed */\n        InjectFlags[InjectFlags[\"Default\"] = 0] = \"Default\";\n        /**\n         * Specifies that an injector should retrieve a dependency from any injector until reaching the\n         * host element of the current component. (Only used with Element Injector)\n         */\n        InjectFlags[InjectFlags[\"Host\"] = 1] = \"Host\";\n        /** Don't ascend to ancestors of the node requesting injection. */\n        InjectFlags[InjectFlags[\"Self\"] = 2] = \"Self\";\n        /** Skip the node that is requesting injection. */\n        InjectFlags[InjectFlags[\"SkipSelf\"] = 4] = \"SkipSelf\";\n        /** Inject `defaultValue` instead if token not found. */\n        InjectFlags[InjectFlags[\"Optional\"] = 8] = \"Optional\";\n    })(exports.InjectFlags || (exports.InjectFlags = {}));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function getClosureSafeProperty(objWithPropertyToExtract) {\n        for (var key in objWithPropertyToExtract) {\n            if (objWithPropertyToExtract[key] === getClosureSafeProperty) {\n                return key;\n            }\n        }\n        throw Error('Could not find renamed property on target object.');\n    }\n    /**\n     * Sets properties on a target object from a source object, but only if\n     * the property doesn't already exist on the target object.\n     * @param target The target to set properties on\n     * @param source The source of the property keys and values to set\n     */\n    function fillProperties(target, source) {\n        for (var key in source) {\n            if (source.hasOwnProperty(key) && !target.hasOwnProperty(key)) {\n                target[key] = source[key];\n            }\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Construct an `InjectableDef` which defines how a token will be constructed by the DI system, and\n     * in which injectors (if any) it will be available.\n     *\n     * This should be assigned to a static `ngInjectableDef` field on a type, which will then be an\n     * `InjectableType`.\n     *\n     * Options:\n     * * `providedIn` determines which injectors will include the injectable, by either associating it\n     *   with an `@NgModule` or other `InjectorType`, or by specifying that this injectable should be\n     *   provided in the `'root'` injector, which will be the application-level injector in most apps.\n     * * `factory` gives the zero argument function which will create an instance of the injectable.\n     *   The factory can call `inject` to access the `Injector` and request injection of dependencies.\n     *\n     * @codeGenApi\n     */\n    function ɵɵdefineInjectable(opts) {\n        return {\n            token: opts.token, providedIn: opts.providedIn || null, factory: opts.factory,\n            value: undefined,\n        };\n    }\n    /**\n     * @deprecated in v8, delete after v10. This API should be used only be generated code, and that\n     * code should now use ɵɵdefineInjectable instead.\n     * @publicApi\n     */\n    var defineInjectable = ɵɵdefineInjectable;\n    /**\n     * Construct an `InjectorDef` which configures an injector.\n     *\n     * This should be assigned to a static `ngInjectorDef` field on a type, which will then be an\n     * `InjectorType`.\n     *\n     * Options:\n     *\n     * * `factory`: an `InjectorType` is an instantiable type, so a zero argument `factory` function to\n     *   create the type must be provided. If that factory function needs to inject arguments, it can\n     *   use the `inject` function.\n     * * `providers`: an optional array of providers to add to the injector. Each provider must\n     *   either have a factory or point to a type which has an `ngInjectableDef` static property (the\n     *   type must be an `InjectableType`).\n     * * `imports`: an optional array of imports of other `InjectorType`s or `InjectorTypeWithModule`s\n     *   whose providers will also be added to the injector. Locally provided types will override\n     *   providers from imports.\n     *\n     * @publicApi\n     */\n    function ɵɵdefineInjector(options) {\n        return {\n            factory: options.factory, providers: options.providers || [], imports: options.imports || [],\n        };\n    }\n    /**\n     * Read the `ngInjectableDef` for `type` in a way which is immune to accidentally reading inherited\n     * value.\n     *\n     * @param type A type which may have its own (non-inherited) `ngInjectableDef`.\n     */\n    function getInjectableDef(type) {\n        var def = type[NG_INJECTABLE_DEF];\n        // The definition read above may come from a base class. `hasOwnProperty` is not sufficient to\n        // distinguish this case, as in older browsers (e.g. IE10) static property inheritance is\n        // implemented by copying the properties.\n        //\n        // Instead, the ngInjectableDef's token is compared to the type, and if they don't match then the\n        // property was not defined directly on the type itself, and was likely inherited. The definition\n        // is only returned if the type matches the def.token.\n        return def && def.token === type ? def : null;\n    }\n    /**\n     * Read the `ngInjectableDef` for `type` or read the `ngInjectableDef` from one of its ancestors.\n     *\n     * @param type A type which may have `ngInjectableDef`, via inheritance.\n     *\n     * @deprecated Will be removed in v10, where an error will occur in the scenario if we find the\n     * `ngInjectableDef` on an ancestor only.\n     */\n    function getInheritedInjectableDef(type) {\n        if (type && type[NG_INJECTABLE_DEF]) {\n            // TODO(FW-1307): Re-add ngDevMode when closure can handle it\n            // ngDevMode &&\n            console.warn(\"DEPRECATED: DI is instantiating a token \\\"\" + type.name + \"\\\" that inherits its @Injectable decorator but does not provide one itself.\\n\" +\n                (\"This will become an error in v10. Please add @Injectable() to the \\\"\" + type.name + \"\\\" class.\"));\n            return type[NG_INJECTABLE_DEF];\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Read the `ngInjectorDef` type in a way which is immune to accidentally reading inherited value.\n     *\n     * @param type type which may have `ngInjectorDef`\n     */\n    function getInjectorDef(type) {\n        return type && type.hasOwnProperty(NG_INJECTOR_DEF) ? type[NG_INJECTOR_DEF] : null;\n    }\n    var NG_INJECTABLE_DEF = getClosureSafeProperty({ ngInjectableDef: getClosureSafeProperty });\n    var NG_INJECTOR_DEF = getClosureSafeProperty({ ngInjectorDef: getClosureSafeProperty });\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function stringify(token) {\n        if (typeof token === 'string') {\n            return token;\n        }\n        if (token instanceof Array) {\n            return '[' + token.map(stringify).join(', ') + ']';\n        }\n        if (token == null) {\n            return '' + token;\n        }\n        if (token.overriddenName) {\n            return \"\" + token.overriddenName;\n        }\n        if (token.name) {\n            return \"\" + token.name;\n        }\n        var res = token.toString();\n        if (res == null) {\n            return '' + res;\n        }\n        var newLineIndex = res.indexOf('\\n');\n        return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __forward_ref__ = getClosureSafeProperty({ __forward_ref__: getClosureSafeProperty });\n    /**\n     * Allows to refer to references which are not yet defined.\n     *\n     * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\n     * DI is declared, but not yet defined. It is also used when the `token` which we use when creating\n     * a query is not yet defined.\n     *\n     * @usageNotes\n     * ### Example\n     * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\n     * @publicApi\n     */\n    function forwardRef(forwardRefFn) {\n        forwardRefFn.__forward_ref__ = forwardRef;\n        forwardRefFn.toString = function () { return stringify(this()); };\n        return forwardRefFn;\n    }\n    /**\n     * Lazily retrieves the reference value from a forwardRef.\n     *\n     * Acts as the identity function when given a non-forward-ref value.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\n     *\n     * @see `forwardRef`\n     * @publicApi\n     */\n    function resolveForwardRef(type) {\n        var fn = type;\n        if (typeof fn === 'function' && fn.hasOwnProperty(__forward_ref__) &&\n            fn.__forward_ref__ === forwardRef) {\n            return fn();\n        }\n        else {\n            return type;\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __globalThis = typeof globalThis !== 'undefined' && globalThis;\n    var __window = typeof window !== 'undefined' && window;\n    var __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n        self instanceof WorkerGlobalScope && self;\n    var __global = typeof global !== 'undefined' && global;\n    // Always use __globalThis if available, which is the spec-defined global variable across all\n    // environments, then fallback to __global first, because in Node tests both __global and\n    // __window may be defined and _global should be __global in that case.\n    var _global = __globalThis || __global || __window || __self;\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var R3ResolvedDependencyType;\n    (function (R3ResolvedDependencyType) {\n        R3ResolvedDependencyType[R3ResolvedDependencyType[\"Token\"] = 0] = \"Token\";\n        R3ResolvedDependencyType[R3ResolvedDependencyType[\"Attribute\"] = 1] = \"Attribute\";\n    })(R3ResolvedDependencyType || (R3ResolvedDependencyType = {}));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function getCompilerFacade() {\n        var globalNg = _global['ng'];\n        if (!globalNg || !globalNg.ɵcompilerFacade) {\n            throw new Error(\"Angular JIT compilation failed: '@angular/compiler' not loaded!\\n\" +\n                \"  - JIT compilation is discouraged for production use-cases! Consider AOT mode instead.\\n\" +\n                \"  - Did you bootstrap using '@angular/platform-browser-dynamic' or '@angular/platform-server'?\\n\" +\n                \"  - Alternatively provide the compiler with 'import \\\"@angular/compiler\\\";' before bootstrapping.\");\n        }\n        return globalNg.ɵcompilerFacade;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Creates a token that can be used in a DI Provider.\n     *\n     * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a\n     * runtime representation) such as when injecting an interface, callable type, array or\n     * parameterized type.\n     *\n     * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by\n     * the `Injector`. This provides additional level of type safety.\n     *\n     * ```\n     * interface MyInterface {...}\n     * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));\n     * // myInterface is inferred to be MyInterface.\n     * ```\n     *\n     * When creating an `InjectionToken`, you can optionally specify a factory function which returns\n     * (possibly by creating) a default value of the parameterized type `T`. This sets up the\n     * `InjectionToken` using this factory as a provider as if it was defined explicitly in the\n     * application's root injector. If the factory function, which takes zero arguments, needs to inject\n     * dependencies, it can do so using the `inject` function. See below for an example.\n     *\n     * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which\n     * overrides the above behavior and marks the token as belonging to a particular `@NgModule`. As\n     * mentioned above, `'root'` is the default value for `providedIn`.\n     *\n     * @usageNotes\n     * ### Basic Example\n     *\n     * ### Plain InjectionToken\n     *\n     * {@example core/di/ts/injector_spec.ts region='InjectionToken'}\n     *\n     * ### Tree-shakable InjectionToken\n     *\n     * {@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}\n     *\n     *\n     * @publicApi\n     */\n    var InjectionToken = /** @class */ (function () {\n        function InjectionToken(_desc, options) {\n            this._desc = _desc;\n            /** @internal */\n            this.ngMetadataName = 'InjectionToken';\n            this.ngInjectableDef = undefined;\n            if (typeof options == 'number') {\n                // This is a special hack to assign __NG_ELEMENT_ID__ to this instance.\n                // __NG_ELEMENT_ID__ is Used by Ivy to determine bloom filter id.\n                // We are using it to assign `-1` which is used to identify `Injector`.\n                this.__NG_ELEMENT_ID__ = options;\n            }\n            else if (options !== undefined) {\n                this.ngInjectableDef = ɵɵdefineInjectable({\n                    token: this,\n                    providedIn: options.providedIn || 'root',\n                    factory: options.factory,\n                });\n            }\n        }\n        InjectionToken.prototype.toString = function () { return \"InjectionToken \" + this._desc; };\n        return InjectionToken;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * An InjectionToken that gets the current `Injector` for `createInjector()`-style injectors.\n     *\n     * Requesting this token instead of `Injector` allows `StaticInjector` to be tree-shaken from a\n     * project.\n     *\n     * @publicApi\n     */\n    var INJECTOR = new InjectionToken('INJECTOR', -1 // `-1` is used by Ivy DI system as special value to recognize it as `Injector`.\n    );\n    var _THROW_IF_NOT_FOUND = new Object();\n    var THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n    var NG_TEMP_TOKEN_PATH = 'ngTempTokenPath';\n    var NG_TOKEN_PATH = 'ngTokenPath';\n    var NEW_LINE = /\\n/gm;\n    var NO_NEW_LINE = 'ɵ';\n    var SOURCE = '__source';\n    var USE_VALUE = getClosureSafeProperty({ provide: String, useValue: getClosureSafeProperty });\n    /**\n     * Current injector value used by `inject`.\n     * - `undefined`: it is an error to call `inject`\n     * - `null`: `inject` can be called but there is no injector (limp-mode).\n     * - Injector instance: Use the injector for resolution.\n     */\n    var _currentInjector = undefined;\n    function setCurrentInjector(injector) {\n        var former = _currentInjector;\n        _currentInjector = injector;\n        return former;\n    }\n    /**\n     * Current implementation of inject.\n     *\n     * By default, it is `injectInjectorOnly`, which makes it `Injector`-only aware. It can be changed\n     * to `directiveInject`, which brings in the `NodeInjector` system of ivy. It is designed this\n     * way for two reasons:\n     *  1. `Injector` should not depend on ivy logic.\n     *  2. To maintain tree shake-ability we don't want to bring in unnecessary code.\n     */\n    var _injectImplementation;\n    /**\n     * Sets the current inject implementation.\n     */\n    function setInjectImplementation(impl) {\n        var previous = _injectImplementation;\n        _injectImplementation = impl;\n        return previous;\n    }\n    function injectInjectorOnly(token, flags) {\n        if (flags === void 0) { flags = exports.InjectFlags.Default; }\n        if (_currentInjector === undefined) {\n            throw new Error(\"inject() must be called from an injection context\");\n        }\n        else if (_currentInjector === null) {\n            return injectRootLimpMode(token, undefined, flags);\n        }\n        else {\n            return _currentInjector.get(token, flags & exports.InjectFlags.Optional ? null : undefined, flags);\n        }\n    }\n    function ɵɵinject(token, flags) {\n        if (flags === void 0) { flags = exports.InjectFlags.Default; }\n        return (_injectImplementation || injectInjectorOnly)(token, flags);\n    }\n    /**\n     * Injects a token from the currently active injector.\n     *\n     * Must be used in the context of a factory function such as one defined for an\n     * `InjectionToken`. Throws an error if not called from such a context.\n     *\n     * Within such a factory function, using this function to request injection of a dependency\n     * is faster and more type-safe than providing an additional array of dependencies\n     * (as has been common with `useFactory` providers).\n     *\n     * @param token The injection token for the dependency to be injected.\n     * @param flags Optional flags that control how injection is executed.\n     * The flags correspond to injection strategies that can be specified with\n     * parameter decorators `@Host`, `@Self`, `@SkipSef`, and `@Optional`.\n     * @returns True if injection is successful, null otherwise.\n     *\n     * @usageNotes\n     *\n     * ### Example\n     *\n     * {@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}\n     *\n     * @publicApi\n     */\n    var inject = ɵɵinject;\n    /**\n     * Injects `root` tokens in limp mode.\n     *\n     * If no injector exists, we can still inject tree-shakable providers which have `providedIn` set to\n     * `\"root\"`. This is known as the limp mode injection. In such case the value is stored in the\n     * `InjectableDef`.\n     */\n    function injectRootLimpMode(token, notFoundValue, flags) {\n        var injectableDef = getInjectableDef(token);\n        if (injectableDef && injectableDef.providedIn == 'root') {\n            return injectableDef.value === undefined ? injectableDef.value = injectableDef.factory() :\n                injectableDef.value;\n        }\n        if (flags & exports.InjectFlags.Optional)\n            return null;\n        if (notFoundValue !== undefined)\n            return notFoundValue;\n        throw new Error(\"Injector: NOT_FOUND [\" + stringify(token) + \"]\");\n    }\n    function injectArgs(types) {\n        var args = [];\n        for (var i = 0; i < types.length; i++) {\n            var arg = resolveForwardRef(types[i]);\n            if (Array.isArray(arg)) {\n                if (arg.length === 0) {\n                    throw new Error('Arguments array must have arguments.');\n                }\n                var type = undefined;\n                var flags = exports.InjectFlags.Default;\n                for (var j = 0; j < arg.length; j++) {\n                    var meta = arg[j];\n                    if (meta instanceof Optional || meta.ngMetadataName === 'Optional' || meta === Optional) {\n                        flags |= exports.InjectFlags.Optional;\n                    }\n                    else if (meta instanceof SkipSelf || meta.ngMetadataName === 'SkipSelf' || meta === SkipSelf) {\n                        flags |= exports.InjectFlags.SkipSelf;\n                    }\n                    else if (meta instanceof Self || meta.ngMetadataName === 'Self' || meta === Self) {\n                        flags |= exports.InjectFlags.Self;\n                    }\n                    else if (meta instanceof Inject || meta === Inject) {\n                        type = meta.token;\n                    }\n                    else {\n                        type = meta;\n                    }\n                }\n                args.push(ɵɵinject(type, flags));\n            }\n            else {\n                args.push(ɵɵinject(arg));\n            }\n        }\n        return args;\n    }\n    var NullInjector = /** @class */ (function () {\n        function NullInjector() {\n        }\n        NullInjector.prototype.get = function (token, notFoundValue) {\n            if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }\n            if (notFoundValue === THROW_IF_NOT_FOUND) {\n                // Intentionally left behind: With dev tools open the debugger will stop here. There is no\n                // reason why correctly written application should cause this exception.\n                // TODO(misko): uncomment the next line once `ngDevMode` works with closure.\n                // if(ngDevMode) debugger;\n                var error = new Error(\"NullInjectorError: No provider for \" + stringify(token) + \"!\");\n                error.name = 'NullInjectorError';\n                throw error;\n            }\n            return notFoundValue;\n        };\n        return NullInjector;\n    }());\n    function catchInjectorError(e, token, injectorErrorName, source) {\n        var tokenPath = e[NG_TEMP_TOKEN_PATH];\n        if (token[SOURCE]) {\n            tokenPath.unshift(token[SOURCE]);\n        }\n        e.message = formatError('\\n' + e.message, tokenPath, injectorErrorName, source);\n        e[NG_TOKEN_PATH] = tokenPath;\n        e[NG_TEMP_TOKEN_PATH] = null;\n        throw e;\n    }\n    function formatError(text, obj, injectorErrorName, source) {\n        if (source === void 0) { source = null; }\n        text = text && text.charAt(0) === '\\n' && text.charAt(1) == NO_NEW_LINE ? text.substr(2) : text;\n        var context = stringify(obj);\n        if (obj instanceof Array) {\n            context = obj.map(stringify).join(' -> ');\n        }\n        else if (typeof obj === 'object') {\n            var parts = [];\n            for (var key in obj) {\n                if (obj.hasOwnProperty(key)) {\n                    var value = obj[key];\n                    parts.push(key + ':' + (typeof value === 'string' ? JSON.stringify(value) : stringify(value)));\n                }\n            }\n            context = \"{\" + parts.join(', ') + \"}\";\n        }\n        return \"\" + injectorErrorName + (source ? '(' + source + ')' : '') + \"[\" + context + \"]: \" + text.replace(NEW_LINE, '\\n  ');\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A mapping of the @angular/core API surface used in generated expressions to the actual symbols.\n     *\n     * This should be kept up to date with the public exports of @angular/core.\n     */\n    var angularCoreDiEnv = {\n        'ɵɵdefineInjectable': ɵɵdefineInjectable,\n        'ɵɵdefineInjector': ɵɵdefineInjector,\n        'ɵɵinject': ɵɵinject,\n        'ɵɵgetFactoryOf': getFactoryOf,\n    };\n    function getFactoryOf(type) {\n        var typeAny = type;\n        var def = getInjectableDef(typeAny) || getInjectorDef(typeAny);\n        if (!def || def.factory === undefined) {\n            return null;\n        }\n        return def.factory;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * @description\n     *\n     * Represents a type that a Component or other object is instances of.\n     *\n     * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by\n     * the `MyCustomComponent` constructor function.\n     *\n     * @publicApi\n     */\n    var Type = Function;\n    function isType(v) {\n        return typeof v === 'function';\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Attention: These regex has to hold even if the code is minified!\n     */\n    var DELEGATE_CTOR = /^function\\s+\\S+\\(\\)\\s*{[\\s\\S]+\\.apply\\(this,\\s*arguments\\)/;\n    var INHERITED_CLASS = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{/;\n    var INHERITED_CLASS_WITH_CTOR = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{[\\s\\S]*constructor\\s*\\(/;\n    var INHERITED_CLASS_WITH_DELEGATE_CTOR = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{[\\s\\S]*constructor\\s*\\(\\)\\s*{\\s+super\\(\\.\\.\\.arguments\\)/;\n    /**\n     * Determine whether a stringified type is a class which delegates its constructor\n     * to its parent.\n     *\n     * This is not trivial since compiled code can actually contain a constructor function\n     * even if the original source code did not. For instance, when the child class contains\n     * an initialized instance property.\n     */\n    function isDelegateCtor(typeStr) {\n        return DELEGATE_CTOR.test(typeStr) || INHERITED_CLASS_WITH_DELEGATE_CTOR.test(typeStr) ||\n            (INHERITED_CLASS.test(typeStr) && !INHERITED_CLASS_WITH_CTOR.test(typeStr));\n    }\n    var ReflectionCapabilities = /** @class */ (function () {\n        function ReflectionCapabilities(reflect) {\n            this._reflect = reflect || _global['Reflect'];\n        }\n        ReflectionCapabilities.prototype.isReflectionEnabled = function () { return true; };\n        ReflectionCapabilities.prototype.factory = function (t) { return function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            return new (t.bind.apply(t, __spread([void 0], args)))();\n        }; };\n        /** @internal */\n        ReflectionCapabilities.prototype._zipTypesAndAnnotations = function (paramTypes, paramAnnotations) {\n            var result;\n            if (typeof paramTypes === 'undefined') {\n                result = new Array(paramAnnotations.length);\n            }\n            else {\n                result = new Array(paramTypes.length);\n            }\n            for (var i = 0; i < result.length; i++) {\n                // TS outputs Object for parameters without types, while Traceur omits\n                // the annotations. For now we preserve the Traceur behavior to aid\n                // migration, but this can be revisited.\n                if (typeof paramTypes === 'undefined') {\n                    result[i] = [];\n                }\n                else if (paramTypes[i] && paramTypes[i] != Object) {\n                    result[i] = [paramTypes[i]];\n                }\n                else {\n                    result[i] = [];\n                }\n                if (paramAnnotations && paramAnnotations[i] != null) {\n                    result[i] = result[i].concat(paramAnnotations[i]);\n                }\n            }\n            return result;\n        };\n        ReflectionCapabilities.prototype._ownParameters = function (type, parentCtor) {\n            var typeStr = type.toString();\n            // If we have no decorators, we only have function.length as metadata.\n            // In that case, to detect whether a child class declared an own constructor or not,\n            // we need to look inside of that constructor to check whether it is\n            // just calling the parent.\n            // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439\n            // that sets 'design:paramtypes' to []\n            // if a class inherits from another class but has no ctor declared itself.\n            if (isDelegateCtor(typeStr)) {\n                return null;\n            }\n            // Prefer the direct API.\n            if (type.parameters && type.parameters !== parentCtor.parameters) {\n                return type.parameters;\n            }\n            // API of tsickle for lowering decorators to properties on the class.\n            var tsickleCtorParams = type.ctorParameters;\n            if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {\n                // Newer tsickle uses a function closure\n                // Retain the non-function case for compatibility with older tsickle\n                var ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;\n                var paramTypes_1 = ctorParameters.map(function (ctorParam) { return ctorParam && ctorParam.type; });\n                var paramAnnotations_1 = ctorParameters.map(function (ctorParam) {\n                    return ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators);\n                });\n                return this._zipTypesAndAnnotations(paramTypes_1, paramAnnotations_1);\n            }\n            // API for metadata created by invoking the decorators.\n            var paramAnnotations = type.hasOwnProperty(PARAMETERS) && type[PARAMETERS];\n            var paramTypes = this._reflect && this._reflect.getOwnMetadata &&\n                this._reflect.getOwnMetadata('design:paramtypes', type);\n            if (paramTypes || paramAnnotations) {\n                return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n            }\n            // If a class has no decorators, at least create metadata\n            // based on function.length.\n            // Note: We know that this is a real constructor as we checked\n            // the content of the constructor above.\n            return new Array(type.length).fill(undefined);\n        };\n        ReflectionCapabilities.prototype.parameters = function (type) {\n            // Note: only report metadata if we have at least one class decorator\n            // to stay in sync with the static reflector.\n            if (!isType(type)) {\n                return [];\n            }\n            var parentCtor = getParentCtor(type);\n            var parameters = this._ownParameters(type, parentCtor);\n            if (!parameters && parentCtor !== Object) {\n                parameters = this.parameters(parentCtor);\n            }\n            return parameters || [];\n        };\n        ReflectionCapabilities.prototype._ownAnnotations = function (typeOrFunc, parentCtor) {\n            // Prefer the direct API.\n            if (typeOrFunc.annotations && typeOrFunc.annotations !== parentCtor.annotations) {\n                var annotations = typeOrFunc.annotations;\n                if (typeof annotations === 'function' && annotations.annotations) {\n                    annotations = annotations.annotations;\n                }\n                return annotations;\n            }\n            // API of tsickle for lowering decorators to properties on the class.\n            if (typeOrFunc.decorators && typeOrFunc.decorators !== parentCtor.decorators) {\n                return convertTsickleDecoratorIntoMetadata(typeOrFunc.decorators);\n            }\n            // API for metadata created by invoking the decorators.\n            if (typeOrFunc.hasOwnProperty(ANNOTATIONS)) {\n                return typeOrFunc[ANNOTATIONS];\n            }\n            return null;\n        };\n        ReflectionCapabilities.prototype.annotations = function (typeOrFunc) {\n            if (!isType(typeOrFunc)) {\n                return [];\n            }\n            var parentCtor = getParentCtor(typeOrFunc);\n            var ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];\n            var parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];\n            return parentAnnotations.concat(ownAnnotations);\n        };\n        ReflectionCapabilities.prototype._ownPropMetadata = function (typeOrFunc, parentCtor) {\n            // Prefer the direct API.\n            if (typeOrFunc.propMetadata &&\n                typeOrFunc.propMetadata !== parentCtor.propMetadata) {\n                var propMetadata = typeOrFunc.propMetadata;\n                if (typeof propMetadata === 'function' && propMetadata.propMetadata) {\n                    propMetadata = propMetadata.propMetadata;\n                }\n                return propMetadata;\n            }\n            // API of tsickle for lowering decorators to properties on the class.\n            if (typeOrFunc.propDecorators &&\n                typeOrFunc.propDecorators !== parentCtor.propDecorators) {\n                var propDecorators_1 = typeOrFunc.propDecorators;\n                var propMetadata_1 = {};\n                Object.keys(propDecorators_1).forEach(function (prop) {\n                    propMetadata_1[prop] = convertTsickleDecoratorIntoMetadata(propDecorators_1[prop]);\n                });\n                return propMetadata_1;\n            }\n            // API for metadata created by invoking the decorators.\n            if (typeOrFunc.hasOwnProperty(PROP_METADATA)) {\n                return typeOrFunc[PROP_METADATA];\n            }\n            return null;\n        };\n        ReflectionCapabilities.prototype.propMetadata = function (typeOrFunc) {\n            if (!isType(typeOrFunc)) {\n                return {};\n            }\n            var parentCtor = getParentCtor(typeOrFunc);\n            var propMetadata = {};\n            if (parentCtor !== Object) {\n                var parentPropMetadata_1 = this.propMetadata(parentCtor);\n                Object.keys(parentPropMetadata_1).forEach(function (propName) {\n                    propMetadata[propName] = parentPropMetadata_1[propName];\n                });\n            }\n            var ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);\n            if (ownPropMetadata) {\n                Object.keys(ownPropMetadata).forEach(function (propName) {\n                    var decorators = [];\n                    if (propMetadata.hasOwnProperty(propName)) {\n                        decorators.push.apply(decorators, __spread(propMetadata[propName]));\n                    }\n                    decorators.push.apply(decorators, __spread(ownPropMetadata[propName]));\n                    propMetadata[propName] = decorators;\n                });\n            }\n            return propMetadata;\n        };\n        ReflectionCapabilities.prototype.ownPropMetadata = function (typeOrFunc) {\n            if (!isType(typeOrFunc)) {\n                return {};\n            }\n            return this._ownPropMetadata(typeOrFunc, getParentCtor(typeOrFunc)) || {};\n        };\n        ReflectionCapabilities.prototype.hasLifecycleHook = function (type, lcProperty) {\n            return type instanceof Type && lcProperty in type.prototype;\n        };\n        ReflectionCapabilities.prototype.guards = function (type) { return {}; };\n        ReflectionCapabilities.prototype.getter = function (name) { return new Function('o', 'return o.' + name + ';'); };\n        ReflectionCapabilities.prototype.setter = function (name) {\n            return new Function('o', 'v', 'return o.' + name + ' = v;');\n        };\n        ReflectionCapabilities.prototype.method = function (name) {\n            var functionBody = \"if (!o.\" + name + \") throw new Error('\\\"\" + name + \"\\\" is undefined');\\n        return o.\" + name + \".apply(o, args);\";\n            return new Function('o', 'args', functionBody);\n        };\n        // There is not a concept of import uri in Js, but this is useful in developing Dart applications.\n        ReflectionCapabilities.prototype.importUri = function (type) {\n            // StaticSymbol\n            if (typeof type === 'object' && type['filePath']) {\n                return type['filePath'];\n            }\n            // Runtime type\n            return \"./\" + stringify(type);\n        };\n        ReflectionCapabilities.prototype.resourceUri = function (type) { return \"./\" + stringify(type); };\n        ReflectionCapabilities.prototype.resolveIdentifier = function (name, moduleUrl, members, runtime) {\n            return runtime;\n        };\n        ReflectionCapabilities.prototype.resolveEnum = function (enumIdentifier, name) { return enumIdentifier[name]; };\n        return ReflectionCapabilities;\n    }());\n    function convertTsickleDecoratorIntoMetadata(decoratorInvocations) {\n        if (!decoratorInvocations) {\n            return [];\n        }\n        return decoratorInvocations.map(function (decoratorInvocation) {\n            var decoratorType = decoratorInvocation.type;\n            var annotationCls = decoratorType.annotationCls;\n            var annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];\n            return new (annotationCls.bind.apply(annotationCls, __spread([void 0], annotationArgs)))();\n        });\n    }\n    function getParentCtor(ctor) {\n        var parentProto = ctor.prototype ? Object.getPrototypeOf(ctor.prototype) : null;\n        var parentCtor = parentProto ? parentProto.constructor : null;\n        // Note: We always use `Object` as the null value\n        // to simplify checking later on.\n        return parentCtor || Object;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var _reflect = null;\n    function getReflect() {\n        return (_reflect = _reflect || new ReflectionCapabilities());\n    }\n    function reflectDependencies(type) {\n        return convertDependencies(getReflect().parameters(type));\n    }\n    function convertDependencies(deps) {\n        var compiler = getCompilerFacade();\n        return deps.map(function (dep) { return reflectDependency(compiler, dep); });\n    }\n    function reflectDependency(compiler, dep) {\n        var meta = {\n            token: null,\n            host: false,\n            optional: false,\n            resolved: compiler.R3ResolvedDependencyType.Token,\n            self: false,\n            skipSelf: false,\n        };\n        function setTokenAndResolvedType(token) {\n            meta.resolved = compiler.R3ResolvedDependencyType.Token;\n            meta.token = token;\n        }\n        if (Array.isArray(dep)) {\n            if (dep.length === 0) {\n                throw new Error('Dependency array must have arguments.');\n            }\n            for (var j = 0; j < dep.length; j++) {\n                var param = dep[j];\n                if (param === undefined) {\n                    // param may be undefined if type of dep is not set by ngtsc\n                    continue;\n                }\n                else if (param instanceof Optional || param.__proto__.ngMetadataName === 'Optional') {\n                    meta.optional = true;\n                }\n                else if (param instanceof SkipSelf || param.__proto__.ngMetadataName === 'SkipSelf') {\n                    meta.skipSelf = true;\n                }\n                else if (param instanceof Self || param.__proto__.ngMetadataName === 'Self') {\n                    meta.self = true;\n                }\n                else if (param instanceof Host || param.__proto__.ngMetadataName === 'Host') {\n                    meta.host = true;\n                }\n                else if (param instanceof Inject) {\n                    meta.token = param.token;\n                }\n                else if (param instanceof Attribute) {\n                    if (param.attributeName === undefined) {\n                        throw new Error(\"Attribute name must be defined.\");\n                    }\n                    meta.token = param.attributeName;\n                    meta.resolved = compiler.R3ResolvedDependencyType.Attribute;\n                }\n                else {\n                    setTokenAndResolvedType(param);\n                }\n            }\n        }\n        else {\n            setTokenAndResolvedType(dep);\n        }\n        return meta;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Compile an Angular injectable according to its `Injectable` metadata, and patch the resulting\n     * `ngInjectableDef` onto the injectable type.\n     */\n    function compileInjectable(type, srcMeta) {\n        var def = null;\n        // if NG_INJECTABLE_DEF is already defined on this class then don't overwrite it\n        if (type.hasOwnProperty(NG_INJECTABLE_DEF))\n            return;\n        Object.defineProperty(type, NG_INJECTABLE_DEF, {\n            get: function () {\n                if (def === null) {\n                    // Allow the compilation of a class with a `@Injectable()` decorator without parameters\n                    var meta = srcMeta || { providedIn: null };\n                    var hasAProvider = isUseClassProvider(meta) || isUseFactoryProvider(meta) ||\n                        isUseValueProvider(meta) || isUseExistingProvider(meta);\n                    var compilerMeta = {\n                        name: type.name,\n                        type: type,\n                        typeArgumentCount: 0,\n                        providedIn: meta.providedIn,\n                        ctorDeps: reflectDependencies(type),\n                        userDeps: undefined,\n                    };\n                    if ((isUseClassProvider(meta) || isUseFactoryProvider(meta)) && meta.deps !== undefined) {\n                        compilerMeta.userDeps = convertDependencies(meta.deps);\n                    }\n                    if (!hasAProvider) {\n                        // In the case the user specifies a type provider, treat it as {provide: X, useClass: X}.\n                        // The deps will have been reflected above, causing the factory to create the class by\n                        // calling\n                        // its constructor with injected deps.\n                        compilerMeta.useClass = type;\n                    }\n                    else if (isUseClassProvider(meta)) {\n                        // The user explicitly specified useClass, and may or may not have provided deps.\n                        compilerMeta.useClass = meta.useClass;\n                    }\n                    else if (isUseValueProvider(meta)) {\n                        // The user explicitly specified useValue.\n                        compilerMeta.useValue = meta.useValue;\n                    }\n                    else if (isUseFactoryProvider(meta)) {\n                        // The user explicitly specified useFactory.\n                        compilerMeta.useFactory = meta.useFactory;\n                    }\n                    else if (isUseExistingProvider(meta)) {\n                        // The user explicitly specified useExisting.\n                        compilerMeta.useExisting = meta.useExisting;\n                    }\n                    else {\n                        // Can't happen - either hasAProvider will be false, or one of the providers will be set.\n                        throw new Error(\"Unreachable state.\");\n                    }\n                    def = getCompilerFacade().compileInjectable(angularCoreDiEnv, \"ng:///\" + type.name + \"/ngInjectableDef.js\", compilerMeta);\n                }\n                return def;\n            },\n        });\n    }\n    var USE_VALUE$1 = getClosureSafeProperty({ provide: String, useValue: getClosureSafeProperty });\n    function isUseClassProvider(meta) {\n        return meta.useClass !== undefined;\n    }\n    function isUseValueProvider(meta) {\n        return USE_VALUE$1 in meta;\n    }\n    function isUseFactoryProvider(meta) {\n        return meta.useFactory !== undefined;\n    }\n    function isUseExistingProvider(meta) {\n        return meta.useExisting !== undefined;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var USE_VALUE$2 = getClosureSafeProperty({ provide: String, useValue: getClosureSafeProperty });\n\n    /**\n     * Injectable decorator and metadata.\n     *\n     * @Annotation\n     * @publicApi\n     */\n    var Injectable = makeDecorator('Injectable', undefined, undefined, undefined, function (type, meta) { return SWITCH_COMPILE_INJECTABLE(type, meta); });\n    var SWITCH_COMPILE_INJECTABLE__POST_R3__ = compileInjectable;\n    var SWITCH_COMPILE_INJECTABLE = SWITCH_COMPILE_INJECTABLE__POST_R3__;\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function ngDevModeResetPerfCounters() {\n        var locationString = typeof location !== 'undefined' ? location.toString() : '';\n        var newCounters = {\n            namedConstructors: locationString.indexOf('ngDevMode=namedConstructors') != -1,\n            firstTemplatePass: 0,\n            tNode: 0,\n            tView: 0,\n            rendererCreateTextNode: 0,\n            rendererSetText: 0,\n            rendererCreateElement: 0,\n            rendererAddEventListener: 0,\n            rendererSetAttribute: 0,\n            rendererRemoveAttribute: 0,\n            rendererSetProperty: 0,\n            rendererSetClassName: 0,\n            rendererAddClass: 0,\n            rendererRemoveClass: 0,\n            rendererSetStyle: 0,\n            rendererRemoveStyle: 0,\n            rendererDestroy: 0,\n            rendererDestroyNode: 0,\n            rendererMoveNode: 0,\n            rendererRemoveNode: 0,\n            rendererAppendChild: 0,\n            rendererInsertBefore: 0,\n            rendererCreateComment: 0,\n            styleMap: 0,\n            styleMapCacheMiss: 0,\n            classMap: 0,\n            classMapCacheMiss: 0,\n            stylingProp: 0,\n            stylingPropCacheMiss: 0,\n            stylingApply: 0,\n            stylingApplyCacheMiss: 0,\n        };\n        // Make sure to refer to ngDevMode as ['ngDevMode'] for closure.\n        var allowNgDevModeTrue = locationString.indexOf('ngDevMode=false') === -1;\n        _global['ngDevMode'] = allowNgDevModeTrue && newCounters;\n        return newCounters;\n    }\n    /**\n     * This checks to see if the `ngDevMode` has been set. If yes,\n     * then we honor it, otherwise we default to dev mode with additional checks.\n     *\n     * The idea is that unless we are doing production build where we explicitly\n     * set `ngDevMode == false` we should be helping the developer by providing\n     * as much early warning and errors as possible.\n     *\n     * NOTE: changes to the `ngDevMode` name must be synced with `compiler-cli/src/tooling.ts`.\n     */\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        ngDevModeResetPerfCounters();\n    }\n\n    /** Called when directives inject each other (creating a circular dependency) */\n    function throwCyclicDependencyError(token) {\n        throw new Error(\"Cannot instantiate cyclic dependency! \" + token);\n    }\n    /** Called when there are multiple component selectors that match a given node */\n    function throwMultipleComponentError(tNode) {\n        throw new Error(\"Multiple components match node with tagname \" + tNode.tagName);\n    }\n    /** Throws an ExpressionChangedAfterChecked error if checkNoChanges mode is on. */\n    function throwErrorIfNoChangesMode(creationMode, oldValue, currValue) {\n        var msg = \"ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '\" + oldValue + \"'. Current value: '\" + currValue + \"'.\";\n        if (creationMode) {\n            msg +=\n                \" It seems like the view has been created after its parent and its children have been dirty checked.\" +\n                    \" Has it been created in a change detection hook ?\";\n        }\n        // TODO: include debug context\n        throw new Error(msg);\n    }\n    function throwMixedMultiProviderError() {\n        throw new Error(\"Cannot mix multi providers and regular providers\");\n    }\n    function throwInvalidProviderError(ngModuleType, providers, provider) {\n        var ngModuleDetail = '';\n        if (ngModuleType && providers) {\n            var providerDetail = providers.map(function (v) { return v == provider ? '?' + provider + '?' : '...'; });\n            ngModuleDetail =\n                \" - only instances of Provider and Type are allowed, got: [\" + providerDetail.join(', ') + \"]\";\n        }\n        throw new Error(\"Invalid provider for the NgModule '\" + stringify(ngModuleType) + \"'\" + ngModuleDetail);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n    * Equivalent to ES6 spread, add each item to an array.\n    *\n    * @param items The items to add\n    * @param arr The array to which you want to add the items\n    */\n    function addAllToArray(items, arr) {\n        for (var i = 0; i < items.length; i++) {\n            arr.push(items[i]);\n        }\n    }\n    /**\n     * Flattens an array.\n     */\n    function flatten(list, dst) {\n        if (dst === undefined)\n            dst = list;\n        for (var i = 0; i < list.length; i++) {\n            var item = list[i];\n            if (Array.isArray(item)) {\n                // we need to inline it.\n                if (dst === list) {\n                    // Our assumption that the list was already flat was wrong and\n                    // we need to clone flat since we need to write to it.\n                    dst = list.slice(0, i);\n                }\n                flatten(item, dst);\n            }\n            else if (dst !== list) {\n                dst.push(item);\n            }\n        }\n        return dst;\n    }\n    function deepForEach(input, fn) {\n        input.forEach(function (value) { return Array.isArray(value) ? deepForEach(value, fn) : fn(value); });\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * An internal token whose presence in an injector indicates that the injector should treat itself\n     * as a root scoped injector when processing requests for unknown tokens which may indicate\n     * they are provided in the root scope.\n     */\n    var APP_ROOT = new InjectionToken('The presence of this token marks an injector as being the root injector.');\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Marker which indicates that a value has not yet been created from the factory function.\n     */\n    var NOT_YET = {};\n    /**\n     * Marker which indicates that the factory function for a token is in the process of being called.\n     *\n     * If the injector is asked to inject a token with its value set to CIRCULAR, that indicates\n     * injection of a dependency has recursively attempted to inject the original token, and there is\n     * a circular dependency among the providers.\n     */\n    var CIRCULAR = {};\n    var EMPTY_ARRAY = [];\n    /**\n     * A lazily initialized NullInjector.\n     */\n    var NULL_INJECTOR = undefined;\n    function getNullInjector() {\n        if (NULL_INJECTOR === undefined) {\n            NULL_INJECTOR = new NullInjector();\n        }\n        return NULL_INJECTOR;\n    }\n    /**\n     * Create a new `Injector` which is configured using a `defType` of `InjectorType<any>`s.\n     *\n     * @publicApi\n     */\n    function createInjector(defType, parent, additionalProviders, name) {\n        if (parent === void 0) { parent = null; }\n        if (additionalProviders === void 0) { additionalProviders = null; }\n        parent = parent || getNullInjector();\n        return new R3Injector(defType, additionalProviders, parent, name);\n    }\n    var R3Injector = /** @class */ (function () {\n        function R3Injector(def, additionalProviders, parent, source) {\n            var _this = this;\n            if (source === void 0) { source = null; }\n            this.parent = parent;\n            /**\n             * Map of tokens to records which contain the instances of those tokens.\n             */\n            this.records = new Map();\n            /**\n             * The transitive set of `InjectorType`s which define this injector.\n             */\n            this.injectorDefTypes = new Set();\n            /**\n             * Set of values instantiated by this injector which contain `ngOnDestroy` lifecycle hooks.\n             */\n            this.onDestroy = new Set();\n            this._destroyed = false;\n            // Start off by creating Records for every provider declared in every InjectorType\n            // included transitively in `def`.\n            var dedupStack = [];\n            deepForEach([def], function (injectorDef) { return _this.processInjectorType(injectorDef, [], dedupStack); });\n            additionalProviders && deepForEach(additionalProviders, function (provider) { return _this.processProvider(provider, def, additionalProviders); });\n            // Make sure the INJECTOR token provides this injector.\n            this.records.set(INJECTOR, makeRecord(undefined, this));\n            // Detect whether this injector has the APP_ROOT_SCOPE token and thus should provide\n            // any injectable scoped to APP_ROOT_SCOPE.\n            this.isRootInjector = this.records.has(APP_ROOT);\n            // Eagerly instantiate the InjectorType classes themselves.\n            this.injectorDefTypes.forEach(function (defType) { return _this.get(defType); });\n            // Source name, used for debugging\n            this.source = source || (typeof def === 'object' ? null : stringify(def));\n        }\n        Object.defineProperty(R3Injector.prototype, \"destroyed\", {\n            /**\n             * Flag indicating that this injector was previously destroyed.\n             */\n            get: function () { return this._destroyed; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Destroy the injector and release references to every instance or provider associated with it.\n         *\n         * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a\n         * hook was found.\n         */\n        R3Injector.prototype.destroy = function () {\n            this.assertNotDestroyed();\n            // Set destroyed = true first, in case lifecycle hooks re-enter destroy().\n            this._destroyed = true;\n            try {\n                // Call all the lifecycle hooks.\n                this.onDestroy.forEach(function (service) { return service.ngOnDestroy(); });\n            }\n            finally {\n                // Release all references.\n                this.records.clear();\n                this.onDestroy.clear();\n                this.injectorDefTypes.clear();\n            }\n        };\n        R3Injector.prototype.get = function (token, notFoundValue, flags) {\n            if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }\n            if (flags === void 0) { flags = exports.InjectFlags.Default; }\n            this.assertNotDestroyed();\n            // Set the injection context.\n            var previousInjector = setCurrentInjector(this);\n            try {\n                // Check for the SkipSelf flag.\n                if (!(flags & exports.InjectFlags.SkipSelf)) {\n                    // SkipSelf isn't set, check if the record belongs to this injector.\n                    var record = this.records.get(token);\n                    if (record === undefined) {\n                        // No record, but maybe the token is scoped to this injector. Look for an ngInjectableDef\n                        // with a scope matching this injector.\n                        var def = couldBeInjectableType(token) && getInjectableDef(token);\n                        if (def && this.injectableDefInScope(def)) {\n                            // Found an ngInjectableDef and it's scoped to this injector. Pretend as if it was here\n                            // all along.\n                            record = makeRecord(injectableDefOrInjectorDefFactory(token), NOT_YET);\n                            this.records.set(token, record);\n                        }\n                    }\n                    // If a record was found, get the instance for it and return it.\n                    if (record !== undefined) {\n                        return this.hydrate(token, record);\n                    }\n                }\n                // Select the next injector based on the Self flag - if self is set, the next injector is\n                // the NullInjector, otherwise it's the parent.\n                var nextInjector = !(flags & exports.InjectFlags.Self) ? this.parent : getNullInjector();\n                return nextInjector.get(token, flags & exports.InjectFlags.Optional ? null : notFoundValue);\n            }\n            catch (e) {\n                if (e.name === 'NullInjectorError') {\n                    var path = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];\n                    path.unshift(stringify(token));\n                    if (previousInjector) {\n                        // We still have a parent injector, keep throwing\n                        throw e;\n                    }\n                    else {\n                        // Format & throw the final error message when we don't have any previous injector\n                        return catchInjectorError(e, token, 'R3InjectorError', this.source);\n                    }\n                }\n                else {\n                    throw e;\n                }\n            }\n            finally {\n                // Lastly, clean up the state by restoring the previous injector.\n                setCurrentInjector(previousInjector);\n            }\n        };\n        R3Injector.prototype.toString = function () {\n            var tokens = [], records = this.records;\n            records.forEach(function (v, token) { return tokens.push(stringify(token)); });\n            return \"R3Injector[\" + tokens.join(', ') + \"]\";\n        };\n        R3Injector.prototype.assertNotDestroyed = function () {\n            if (this._destroyed) {\n                throw new Error('Injector has already been destroyed.');\n            }\n        };\n        /**\n         * Add an `InjectorType` or `InjectorTypeWithProviders` and all of its transitive providers\n         * to this injector.\n         *\n         * If an `InjectorTypeWithProviders` that declares providers besides the type is specified,\n         * the function will return \"true\" to indicate that the providers of the type definition need\n         * to be processed. This allows us to process providers of injector types after all imports of\n         * an injector definition are processed. (following View Engine semantics: see FW-1349)\n         */\n        R3Injector.prototype.processInjectorType = function (defOrWrappedDef, parents, dedupStack) {\n            var _this = this;\n            defOrWrappedDef = resolveForwardRef(defOrWrappedDef);\n            if (!defOrWrappedDef)\n                return false;\n            // Either the defOrWrappedDef is an InjectorType (with ngInjectorDef) or an\n            // InjectorDefTypeWithProviders (aka ModuleWithProviders). Detecting either is a megamorphic\n            // read, so care is taken to only do the read once.\n            // First attempt to read the ngInjectorDef.\n            var def = getInjectorDef(defOrWrappedDef);\n            // If that's not present, then attempt to read ngModule from the InjectorDefTypeWithProviders.\n            var ngModule = (def == null) && defOrWrappedDef.ngModule || undefined;\n            // Determine the InjectorType. In the case where `defOrWrappedDef` is an `InjectorType`,\n            // then this is easy. In the case of an InjectorDefTypeWithProviders, then the definition type\n            // is the `ngModule`.\n            var defType = (ngModule === undefined) ? defOrWrappedDef : ngModule;\n            // Check for circular dependencies.\n            if (ngDevMode && parents.indexOf(defType) !== -1) {\n                var defName = stringify(defType);\n                throw new Error(\"Circular dependency in DI detected for type \" + defName + \". Dependency path: \" + parents.map(function (defType) { return stringify(defType); }).join(' > ') + \" > \" + defName + \".\");\n            }\n            // Check for multiple imports of the same module\n            var isDuplicate = dedupStack.indexOf(defType) !== -1;\n            // Finally, if defOrWrappedType was an `InjectorDefTypeWithProviders`, then the actual\n            // `InjectorDef` is on its `ngModule`.\n            if (ngModule !== undefined) {\n                def = getInjectorDef(ngModule);\n            }\n            // If no definition was found, it might be from exports. Remove it.\n            if (def == null) {\n                return false;\n            }\n            // Track the InjectorType and add a provider for it.\n            this.injectorDefTypes.add(defType);\n            this.records.set(defType, makeRecord(def.factory, NOT_YET));\n            // Add providers in the same way that @NgModule resolution did:\n            // First, include providers from any imports.\n            if (def.imports != null && !isDuplicate) {\n                // Before processing defType's imports, add it to the set of parents. This way, if it ends\n                // up deeply importing itself, this can be detected.\n                ngDevMode && parents.push(defType);\n                // Add it to the set of dedups. This way we can detect multiple imports of the same module\n                dedupStack.push(defType);\n                var importTypesWithProviders_1;\n                try {\n                    deepForEach(def.imports, function (imported) {\n                        if (_this.processInjectorType(imported, parents, dedupStack)) {\n                            if (importTypesWithProviders_1 === undefined)\n                                importTypesWithProviders_1 = [];\n                            // If the processed import is an injector type with providers, we store it in the\n                            // list of import types with providers, so that we can process those afterwards.\n                            importTypesWithProviders_1.push(imported);\n                        }\n                    });\n                }\n                finally {\n                    // Remove it from the parents set when finished.\n                    ngDevMode && parents.pop();\n                }\n                // Imports which are declared with providers (TypeWithProviders) need to be processed\n                // after all imported modules are processed. This is similar to how View Engine\n                // processes/merges module imports in the metadata resolver. See: FW-1349.\n                if (importTypesWithProviders_1 !== undefined) {\n                    var _loop_1 = function (i) {\n                        var _a = importTypesWithProviders_1[i], ngModule_1 = _a.ngModule, providers = _a.providers;\n                        deepForEach(providers, function (provider) { return _this.processProvider(provider, ngModule_1, providers || EMPTY_ARRAY); });\n                    };\n                    for (var i = 0; i < importTypesWithProviders_1.length; i++) {\n                        _loop_1(i);\n                    }\n                }\n            }\n            // Next, include providers listed on the definition itself.\n            var defProviders = def.providers;\n            if (defProviders != null && !isDuplicate) {\n                var injectorType_1 = defOrWrappedDef;\n                deepForEach(defProviders, function (provider) { return _this.processProvider(provider, injectorType_1, defProviders); });\n            }\n            return (ngModule !== undefined &&\n                defOrWrappedDef.providers !== undefined);\n        };\n        /**\n         * Process a `SingleProvider` and add it.\n         */\n        R3Injector.prototype.processProvider = function (provider, ngModuleType, providers) {\n            // Determine the token from the provider. Either it's its own token, or has a {provide: ...}\n            // property.\n            provider = resolveForwardRef(provider);\n            var token = isTypeProvider(provider) ? provider : resolveForwardRef(provider && provider.provide);\n            // Construct a `Record` for the provider.\n            var record = providerToRecord(provider, ngModuleType, providers);\n            if (!isTypeProvider(provider) && provider.multi === true) {\n                // If the provider indicates that it's a multi-provider, process it specially.\n                // First check whether it's been defined already.\n                var multiRecord_1 = this.records.get(token);\n                if (multiRecord_1) {\n                    // It has. Throw a nice error if\n                    if (multiRecord_1.multi === undefined) {\n                        throwMixedMultiProviderError();\n                    }\n                }\n                else {\n                    multiRecord_1 = makeRecord(undefined, NOT_YET, true);\n                    multiRecord_1.factory = function () { return injectArgs(multiRecord_1.multi); };\n                    this.records.set(token, multiRecord_1);\n                }\n                token = provider;\n                multiRecord_1.multi.push(provider);\n            }\n            else {\n                var existing = this.records.get(token);\n                if (existing && existing.multi !== undefined) {\n                    throwMixedMultiProviderError();\n                }\n            }\n            this.records.set(token, record);\n        };\n        R3Injector.prototype.hydrate = function (token, record) {\n            if (record.value === CIRCULAR) {\n                throwCyclicDependencyError(stringify(token));\n            }\n            else if (record.value === NOT_YET) {\n                record.value = CIRCULAR;\n                record.value = record.factory();\n            }\n            if (typeof record.value === 'object' && record.value && hasOnDestroy(record.value)) {\n                this.onDestroy.add(record.value);\n            }\n            return record.value;\n        };\n        R3Injector.prototype.injectableDefInScope = function (def) {\n            if (!def.providedIn) {\n                return false;\n            }\n            else if (typeof def.providedIn === 'string') {\n                return def.providedIn === 'any' || (def.providedIn === 'root' && this.isRootInjector);\n            }\n            else {\n                return this.injectorDefTypes.has(def.providedIn);\n            }\n        };\n        return R3Injector;\n    }());\n    function injectableDefOrInjectorDefFactory(token) {\n        // Most tokens will have an ngInjectableDef directly on them, which specifies a factory directly.\n        var injectableDef = getInjectableDef(token);\n        if (injectableDef !== null) {\n            return injectableDef.factory;\n        }\n        // If the token is an NgModule, it's also injectable but the factory is on its ngInjectorDef.\n        var injectorDef = getInjectorDef(token);\n        if (injectorDef !== null) {\n            return injectorDef.factory;\n        }\n        // InjectionTokens should have an ngInjectableDef and thus should be handled above.\n        // If it's missing that, it's an error.\n        if (token instanceof InjectionToken) {\n            throw new Error(\"Token \" + stringify(token) + \" is missing an ngInjectableDef definition.\");\n        }\n        // Undecorated types can sometimes be created if they have no constructor arguments.\n        if (token instanceof Function) {\n            return getUndecoratedInjectableFactory(token);\n        }\n        // There was no way to resolve a factory for this token.\n        throw new Error('unreachable');\n    }\n    function getUndecoratedInjectableFactory(token) {\n        // If the token has parameters then it has dependencies that we cannot resolve implicitly.\n        var paramLength = token.length;\n        if (paramLength > 0) {\n            var args = new Array(paramLength).fill('?');\n            throw new Error(\"Can't resolve all parameters for \" + stringify(token) + \": (\" + args.join(', ') + \").\");\n        }\n        // The constructor function appears to have no parameters.\n        // This might be because it inherits from a super-class. In which case, use an ngInjectableDef\n        // from an ancestor if there is one.\n        // Otherwise this really is a simple class with no dependencies, so return a factory that\n        // just instantiates the zero-arg constructor.\n        var inheritedInjectableDef = getInheritedInjectableDef(token);\n        if (inheritedInjectableDef !== null) {\n            return function () { return inheritedInjectableDef.factory(token); };\n        }\n        else {\n            return function () { return new token(); };\n        }\n    }\n    function providerToRecord(provider, ngModuleType, providers) {\n        var factory = providerToFactory(provider, ngModuleType, providers);\n        if (isValueProvider(provider)) {\n            return makeRecord(undefined, provider.useValue);\n        }\n        else {\n            return makeRecord(factory, NOT_YET);\n        }\n    }\n    /**\n     * Converts a `SingleProvider` into a factory function.\n     *\n     * @param provider provider to convert to factory\n     */\n    function providerToFactory(provider, ngModuleType, providers) {\n        var factory = undefined;\n        if (isTypeProvider(provider)) {\n            return injectableDefOrInjectorDefFactory(resolveForwardRef(provider));\n        }\n        else {\n            if (isValueProvider(provider)) {\n                factory = function () { return resolveForwardRef(provider.useValue); };\n            }\n            else if (isExistingProvider(provider)) {\n                factory = function () { return ɵɵinject(resolveForwardRef(provider.useExisting)); };\n            }\n            else if (isFactoryProvider(provider)) {\n                factory = function () { return provider.useFactory.apply(provider, __spread(injectArgs(provider.deps || []))); };\n            }\n            else {\n                var classRef_1 = resolveForwardRef(provider &&\n                    (provider.useClass || provider.provide));\n                if (!classRef_1) {\n                    throwInvalidProviderError(ngModuleType, providers, provider);\n                }\n                if (hasDeps(provider)) {\n                    factory = function () { return new ((classRef_1).bind.apply((classRef_1), __spread([void 0], injectArgs(provider.deps))))(); };\n                }\n                else {\n                    return injectableDefOrInjectorDefFactory(classRef_1);\n                }\n            }\n        }\n        return factory;\n    }\n    function makeRecord(factory, value, multi) {\n        if (multi === void 0) { multi = false; }\n        return {\n            factory: factory,\n            value: value,\n            multi: multi ? [] : undefined,\n        };\n    }\n    function isValueProvider(value) {\n        return value !== null && typeof value == 'object' && USE_VALUE in value;\n    }\n    function isExistingProvider(value) {\n        return !!(value && value.useExisting);\n    }\n    function isFactoryProvider(value) {\n        return !!(value && value.useFactory);\n    }\n    function isTypeProvider(value) {\n        return typeof value === 'function';\n    }\n    function isClassProvider(value) {\n        return !!value.useClass;\n    }\n    function hasDeps(value) {\n        return !!value.deps;\n    }\n    function hasOnDestroy(value) {\n        return value !== null && typeof value === 'object' &&\n            typeof value.ngOnDestroy === 'function';\n    }\n    function couldBeInjectableType(value) {\n        return (typeof value === 'function') ||\n            (typeof value === 'object' && value instanceof InjectionToken);\n    }\n\n    function INJECTOR_IMPL__POST_R3__(providers, parent, name) {\n        return createInjector({ name: name }, parent, providers, name);\n    }\n    var INJECTOR_IMPL = INJECTOR_IMPL__POST_R3__;\n    /**\n     * Concrete injectors implement this interface.\n     *\n     * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example core/di/ts/injector_spec.ts region='Injector'}\n     *\n     * `Injector` returns itself when given `Injector` as a token:\n     *\n     * {@example core/di/ts/injector_spec.ts region='injectInjector'}\n     *\n     * @publicApi\n     */\n    var Injector = /** @class */ (function () {\n        function Injector() {\n        }\n        /**\n         * Create a new Injector which is configure using `StaticProvider`s.\n         *\n         * @usageNotes\n         * ### Example\n         *\n         * {@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n         */\n        Injector.create = function (options, parent) {\n            if (Array.isArray(options)) {\n                return INJECTOR_IMPL(options, parent, '');\n            }\n            else {\n                return INJECTOR_IMPL(options.providers, options.parent, options.name || '');\n            }\n        };\n        Injector.THROW_IF_NOT_FOUND = THROW_IF_NOT_FOUND;\n        Injector.NULL = new NullInjector();\n        /** @nocollapse */\n        Injector.ngInjectableDef = ɵɵdefineInjectable({\n            token: Injector,\n            providedIn: 'any',\n            factory: function () { return ɵɵinject(INJECTOR); },\n        });\n        /**\n         * @internal\n         * @nocollapse\n         */\n        Injector.__NG_ELEMENT_ID__ = -1;\n        return Injector;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var ERROR_DEBUG_CONTEXT = 'ngDebugContext';\n    var ERROR_ORIGINAL_ERROR = 'ngOriginalError';\n    var ERROR_LOGGER = 'ngErrorLogger';\n    function wrappedError(message, originalError) {\n        var msg = message + \" caused by: \" + (originalError instanceof Error ? originalError.message : originalError);\n        var error = Error(msg);\n        error[ERROR_ORIGINAL_ERROR] = originalError;\n        return error;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function findFirstClosedCycle(keys) {\n        var res = [];\n        for (var i = 0; i < keys.length; ++i) {\n            if (res.indexOf(keys[i]) > -1) {\n                res.push(keys[i]);\n                return res;\n            }\n            res.push(keys[i]);\n        }\n        return res;\n    }\n    function constructResolvingPath(keys) {\n        if (keys.length > 1) {\n            var reversed = findFirstClosedCycle(keys.slice().reverse());\n            var tokenStrs = reversed.map(function (k) { return stringify(k.token); });\n            return ' (' + tokenStrs.join(' -> ') + ')';\n        }\n        return '';\n    }\n    function injectionError(injector, key, constructResolvingMessage, originalError) {\n        var keys = [key];\n        var errMsg = constructResolvingMessage(keys);\n        var error = (originalError ? wrappedError(errMsg, originalError) : Error(errMsg));\n        error.addKey = addKey;\n        error.keys = keys;\n        error.injectors = [injector];\n        error.constructResolvingMessage = constructResolvingMessage;\n        error[ERROR_ORIGINAL_ERROR] = originalError;\n        return error;\n    }\n    function addKey(injector, key) {\n        this.injectors.push(injector);\n        this.keys.push(key);\n        // Note: This updated message won't be reflected in the `.stack` property\n        this.message = this.constructResolvingMessage(this.keys);\n    }\n    /**\n     * Thrown when trying to retrieve a dependency by key from {@link Injector}, but the\n     * {@link Injector} does not have a {@link Provider} for the given key.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * class A {\n     *   constructor(b:B) {}\n     * }\n     *\n     * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n     * ```\n     */\n    function noProviderError(injector, key) {\n        return injectionError(injector, key, function (keys) {\n            var first = stringify(keys[0].token);\n            return \"No provider for \" + first + \"!\" + constructResolvingPath(keys);\n        });\n    }\n    /**\n     * Thrown when dependencies form a cycle.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * var injector = Injector.resolveAndCreate([\n     *   {provide: \"one\", useFactory: (two) => \"two\", deps: [[new Inject(\"two\")]]},\n     *   {provide: \"two\", useFactory: (one) => \"one\", deps: [[new Inject(\"one\")]]}\n     * ]);\n     *\n     * expect(() => injector.get(\"one\")).toThrowError();\n     * ```\n     *\n     * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.\n     */\n    function cyclicDependencyError(injector, key) {\n        return injectionError(injector, key, function (keys) {\n            return \"Cannot instantiate cyclic dependency!\" + constructResolvingPath(keys);\n        });\n    }\n    /**\n     * Thrown when a constructing type returns with an Error.\n     *\n     * The `InstantiationError` class contains the original error plus the dependency graph which caused\n     * this object to be instantiated.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * class A {\n     *   constructor() {\n     *     throw new Error('message');\n     *   }\n     * }\n     *\n     * var injector = Injector.resolveAndCreate([A]);\n\n     * try {\n     *   injector.get(A);\n     * } catch (e) {\n     *   expect(e instanceof InstantiationError).toBe(true);\n     *   expect(e.originalException.message).toEqual(\"message\");\n     *   expect(e.originalStack).toBeDefined();\n     * }\n     * ```\n     */\n    function instantiationError(injector, originalException, originalStack, key) {\n        return injectionError(injector, key, function (keys) {\n            var first = stringify(keys[0].token);\n            return originalException.message + \": Error during instantiation of \" + first + \"!\" + constructResolvingPath(keys) + \".\";\n        }, originalException);\n    }\n    /**\n     * Thrown when an object other then {@link Provider} (or `Type`) is passed to {@link Injector}\n     * creation.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * expect(() => Injector.resolveAndCreate([\"not a type\"])).toThrowError();\n     * ```\n     */\n    function invalidProviderError(provider) {\n        return Error(\"Invalid provider - only instances of Provider and Type are allowed, got: \" + provider);\n    }\n    /**\n     * Thrown when the class has no annotation information.\n     *\n     * Lack of annotation information prevents the {@link Injector} from determining which dependencies\n     * need to be injected into the constructor.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * class A {\n     *   constructor(b) {}\n     * }\n     *\n     * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n     * ```\n     *\n     * This error is also thrown when the class not marked with {@link Injectable} has parameter types.\n     *\n     * ```typescript\n     * class B {}\n     *\n     * class A {\n     *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.\n     * }\n     *\n     * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();\n     * ```\n     *\n     */\n    function noAnnotationError(typeOrFunc, params) {\n        var signature = [];\n        for (var i = 0, ii = params.length; i < ii; i++) {\n            var parameter = params[i];\n            if (!parameter || parameter.length == 0) {\n                signature.push('?');\n            }\n            else {\n                signature.push(parameter.map(stringify).join(' '));\n            }\n        }\n        return Error('Cannot resolve all parameters for \\'' + stringify(typeOrFunc) + '\\'(' +\n            signature.join(', ') + '). ' +\n            'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \\'' +\n            stringify(typeOrFunc) + '\\' is decorated with Injectable.');\n    }\n    /**\n     * Thrown when getting an object by index.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * class A {}\n     *\n     * var injector = Injector.resolveAndCreate([A]);\n     *\n     * expect(() => injector.getAt(100)).toThrowError();\n     * ```\n     *\n     */\n    function outOfBoundsError(index) {\n        return Error(\"Index \" + index + \" is out-of-bounds.\");\n    }\n    // TODO: add a working example after alpha38 is released\n    /**\n     * Thrown when a multi provider and a regular provider are bound to the same token.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * expect(() => Injector.resolveAndCreate([\n     *   { provide: \"Strings\", useValue: \"string1\", multi: true},\n     *   { provide: \"Strings\", useValue: \"string2\", multi: false}\n     * ])).toThrowError();\n     * ```\n     */\n    function mixingMultiProvidersWithRegularProvidersError(provider1, provider2) {\n        return Error(\"Cannot mix multi providers and regular providers, got: \" + provider1 + \" \" + provider2);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A unique object used for retrieving items from the {@link ReflectiveInjector}.\n     *\n     * Keys have:\n     * - a system-wide unique `id`.\n     * - a `token`.\n     *\n     * `Key` is used internally by {@link ReflectiveInjector} because its system-wide unique `id` allows\n     * the\n     * injector to store created objects in a more efficient way.\n     *\n     * `Key` should not be created directly. {@link ReflectiveInjector} creates keys automatically when\n     * resolving\n     * providers.\n     *\n     * @deprecated No replacement\n     * @publicApi\n     */\n    var ReflectiveKey = /** @class */ (function () {\n        /**\n         * Private\n         */\n        function ReflectiveKey(token, id) {\n            this.token = token;\n            this.id = id;\n            if (!token) {\n                throw new Error('Token must be defined!');\n            }\n            this.displayName = stringify(this.token);\n        }\n        /**\n         * Retrieves a `Key` for a token.\n         */\n        ReflectiveKey.get = function (token) {\n            return _globalKeyRegistry.get(resolveForwardRef(token));\n        };\n        Object.defineProperty(ReflectiveKey, \"numberOfKeys\", {\n            /**\n             * @returns the number of keys registered in the system.\n             */\n            get: function () { return _globalKeyRegistry.numberOfKeys; },\n            enumerable: true,\n            configurable: true\n        });\n        return ReflectiveKey;\n    }());\n    var KeyRegistry = /** @class */ (function () {\n        function KeyRegistry() {\n            this._allKeys = new Map();\n        }\n        KeyRegistry.prototype.get = function (token) {\n            if (token instanceof ReflectiveKey)\n                return token;\n            if (this._allKeys.has(token)) {\n                return this._allKeys.get(token);\n            }\n            var newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);\n            this._allKeys.set(token, newKey);\n            return newKey;\n        };\n        Object.defineProperty(KeyRegistry.prototype, \"numberOfKeys\", {\n            get: function () { return this._allKeys.size; },\n            enumerable: true,\n            configurable: true\n        });\n        return KeyRegistry;\n    }());\n    var _globalKeyRegistry = new KeyRegistry();\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Provides access to reflection data about symbols. Used internally by Angular\n     * to power dependency injection and compilation.\n     */\n    var Reflector = /** @class */ (function () {\n        function Reflector(reflectionCapabilities) {\n            this.reflectionCapabilities = reflectionCapabilities;\n        }\n        Reflector.prototype.updateCapabilities = function (caps) { this.reflectionCapabilities = caps; };\n        Reflector.prototype.factory = function (type) { return this.reflectionCapabilities.factory(type); };\n        Reflector.prototype.parameters = function (typeOrFunc) {\n            return this.reflectionCapabilities.parameters(typeOrFunc);\n        };\n        Reflector.prototype.annotations = function (typeOrFunc) {\n            return this.reflectionCapabilities.annotations(typeOrFunc);\n        };\n        Reflector.prototype.propMetadata = function (typeOrFunc) {\n            return this.reflectionCapabilities.propMetadata(typeOrFunc);\n        };\n        Reflector.prototype.hasLifecycleHook = function (type, lcProperty) {\n            return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);\n        };\n        Reflector.prototype.getter = function (name) { return this.reflectionCapabilities.getter(name); };\n        Reflector.prototype.setter = function (name) { return this.reflectionCapabilities.setter(name); };\n        Reflector.prototype.method = function (name) { return this.reflectionCapabilities.method(name); };\n        Reflector.prototype.importUri = function (type) { return this.reflectionCapabilities.importUri(type); };\n        Reflector.prototype.resourceUri = function (type) { return this.reflectionCapabilities.resourceUri(type); };\n        Reflector.prototype.resolveIdentifier = function (name, moduleUrl, members, runtime) {\n            return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, members, runtime);\n        };\n        Reflector.prototype.resolveEnum = function (identifier, name) {\n            return this.reflectionCapabilities.resolveEnum(identifier, name);\n        };\n        return Reflector;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * The {@link Reflector} used internally in Angular to access metadata\n     * about symbols.\n     */\n    var reflector = new Reflector(new ReflectionCapabilities());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * `Dependency` is used by the framework to extend DI.\n     * This is internal to Angular and should not be used directly.\n     */\n    var ReflectiveDependency = /** @class */ (function () {\n        function ReflectiveDependency(key, optional, visibility) {\n            this.key = key;\n            this.optional = optional;\n            this.visibility = visibility;\n        }\n        ReflectiveDependency.fromKey = function (key) {\n            return new ReflectiveDependency(key, false, null);\n        };\n        return ReflectiveDependency;\n    }());\n    var _EMPTY_LIST = [];\n    var ResolvedReflectiveProvider_ = /** @class */ (function () {\n        function ResolvedReflectiveProvider_(key, resolvedFactories, multiProvider) {\n            this.key = key;\n            this.resolvedFactories = resolvedFactories;\n            this.multiProvider = multiProvider;\n            this.resolvedFactory = this.resolvedFactories[0];\n        }\n        return ResolvedReflectiveProvider_;\n    }());\n    /**\n     * An internal resolved representation of a factory function created by resolving `Provider`.\n     * @publicApi\n     */\n    var ResolvedReflectiveFactory = /** @class */ (function () {\n        function ResolvedReflectiveFactory(\n        /**\n         * Factory function which can return an instance of an object represented by a key.\n         */\n        factory, \n        /**\n         * Arguments (dependencies) to the `factory` function.\n         */\n        dependencies) {\n            this.factory = factory;\n            this.dependencies = dependencies;\n        }\n        return ResolvedReflectiveFactory;\n    }());\n    /**\n     * Resolve a single provider.\n     */\n    function resolveReflectiveFactory(provider) {\n        var factoryFn;\n        var resolvedDeps;\n        if (provider.useClass) {\n            var useClass = resolveForwardRef(provider.useClass);\n            factoryFn = reflector.factory(useClass);\n            resolvedDeps = _dependenciesFor(useClass);\n        }\n        else if (provider.useExisting) {\n            factoryFn = function (aliasInstance) { return aliasInstance; };\n            resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];\n        }\n        else if (provider.useFactory) {\n            factoryFn = provider.useFactory;\n            resolvedDeps = constructDependencies(provider.useFactory, provider.deps);\n        }\n        else {\n            factoryFn = function () { return provider.useValue; };\n            resolvedDeps = _EMPTY_LIST;\n        }\n        return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);\n    }\n    /**\n     * Converts the `Provider` into `ResolvedProvider`.\n     *\n     * `Injector` internally only uses `ResolvedProvider`, `Provider` contains convenience provider\n     * syntax.\n     */\n    function resolveReflectiveProvider(provider) {\n        return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi || false);\n    }\n    /**\n     * Resolve a list of Providers.\n     */\n    function resolveReflectiveProviders(providers) {\n        var normalized = _normalizeProviders(providers, []);\n        var resolved = normalized.map(resolveReflectiveProvider);\n        var resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());\n        return Array.from(resolvedProviderMap.values());\n    }\n    /**\n     * Merges a list of ResolvedProviders into a list where each key is contained exactly once and\n     * multi providers have been merged.\n     */\n    function mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {\n        for (var i = 0; i < providers.length; i++) {\n            var provider = providers[i];\n            var existing = normalizedProvidersMap.get(provider.key.id);\n            if (existing) {\n                if (provider.multiProvider !== existing.multiProvider) {\n                    throw mixingMultiProvidersWithRegularProvidersError(existing, provider);\n                }\n                if (provider.multiProvider) {\n                    for (var j = 0; j < provider.resolvedFactories.length; j++) {\n                        existing.resolvedFactories.push(provider.resolvedFactories[j]);\n                    }\n                }\n                else {\n                    normalizedProvidersMap.set(provider.key.id, provider);\n                }\n            }\n            else {\n                var resolvedProvider = void 0;\n                if (provider.multiProvider) {\n                    resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);\n                }\n                else {\n                    resolvedProvider = provider;\n                }\n                normalizedProvidersMap.set(provider.key.id, resolvedProvider);\n            }\n        }\n        return normalizedProvidersMap;\n    }\n    function _normalizeProviders(providers, res) {\n        providers.forEach(function (b) {\n            if (b instanceof Type) {\n                res.push({ provide: b, useClass: b });\n            }\n            else if (b && typeof b == 'object' && b.provide !== undefined) {\n                res.push(b);\n            }\n            else if (b instanceof Array) {\n                _normalizeProviders(b, res);\n            }\n            else {\n                throw invalidProviderError(b);\n            }\n        });\n        return res;\n    }\n    function constructDependencies(typeOrFunc, dependencies) {\n        if (!dependencies) {\n            return _dependenciesFor(typeOrFunc);\n        }\n        else {\n            var params_1 = dependencies.map(function (t) { return [t]; });\n            return dependencies.map(function (t) { return _extractToken(typeOrFunc, t, params_1); });\n        }\n    }\n    function _dependenciesFor(typeOrFunc) {\n        var params = reflector.parameters(typeOrFunc);\n        if (!params)\n            return [];\n        if (params.some(function (p) { return p == null; })) {\n            throw noAnnotationError(typeOrFunc, params);\n        }\n        return params.map(function (p) { return _extractToken(typeOrFunc, p, params); });\n    }\n    function _extractToken(typeOrFunc, metadata, params) {\n        var token = null;\n        var optional = false;\n        if (!Array.isArray(metadata)) {\n            if (metadata instanceof Inject) {\n                return _createDependency(metadata.token, optional, null);\n            }\n            else {\n                return _createDependency(metadata, optional, null);\n            }\n        }\n        var visibility = null;\n        for (var i = 0; i < metadata.length; ++i) {\n            var paramMetadata = metadata[i];\n            if (paramMetadata instanceof Type) {\n                token = paramMetadata;\n            }\n            else if (paramMetadata instanceof Inject) {\n                token = paramMetadata.token;\n            }\n            else if (paramMetadata instanceof Optional) {\n                optional = true;\n            }\n            else if (paramMetadata instanceof Self || paramMetadata instanceof SkipSelf) {\n                visibility = paramMetadata;\n            }\n            else if (paramMetadata instanceof InjectionToken) {\n                token = paramMetadata;\n            }\n        }\n        token = resolveForwardRef(token);\n        if (token != null) {\n            return _createDependency(token, optional, visibility);\n        }\n        else {\n            throw noAnnotationError(typeOrFunc, params);\n        }\n    }\n    function _createDependency(token, optional, visibility) {\n        return new ReflectiveDependency(ReflectiveKey.get(token), optional, visibility);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // Threshold for the dynamic version\n    var UNDEFINED = new Object();\n    /**\n     * A ReflectiveDependency injection container used for instantiating objects and resolving\n     * dependencies.\n     *\n     * An `Injector` is a replacement for a `new` operator, which can automatically resolve the\n     * constructor dependencies.\n     *\n     * In typical use, application code asks for the dependencies in the constructor and they are\n     * resolved by the `Injector`.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example creates an `Injector` configured to create `Engine` and `Car`.\n     *\n     * ```typescript\n     * @Injectable()\n     * class Engine {\n     * }\n     *\n     * @Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n     * var car = injector.get(Car);\n     * expect(car instanceof Car).toBe(true);\n     * expect(car.engine instanceof Engine).toBe(true);\n     * ```\n     *\n     * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`\n     * resolve all of the object's dependencies automatically.\n     *\n     * @deprecated from v5 - slow and brings in a lot of code, Use `Injector.create` instead.\n     * @publicApi\n     */\n    var ReflectiveInjector = /** @class */ (function () {\n        function ReflectiveInjector() {\n        }\n        /**\n         * Turns an array of provider definitions into an array of resolved providers.\n         *\n         * A resolution is a process of flattening multiple nested arrays and converting individual\n         * providers into an array of `ResolvedReflectiveProvider`s.\n         *\n         * @usageNotes\n         * ### Example\n         *\n         * ```typescript\n         * @Injectable()\n         * class Engine {\n         * }\n         *\n         * @Injectable()\n         * class Car {\n         *   constructor(public engine:Engine) {}\n         * }\n         *\n         * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\n         *\n         * expect(providers.length).toEqual(2);\n         *\n         * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);\n         * expect(providers[0].key.displayName).toBe(\"Car\");\n         * expect(providers[0].dependencies.length).toEqual(1);\n         * expect(providers[0].factory).toBeDefined();\n         *\n         * expect(providers[1].key.displayName).toBe(\"Engine\");\n         * });\n         * ```\n         *\n         */\n        ReflectiveInjector.resolve = function (providers) {\n            return resolveReflectiveProviders(providers);\n        };\n        /**\n         * Resolves an array of providers and creates an injector from those providers.\n         *\n         * The passed-in providers can be an array of `Type`, `Provider`,\n         * or a recursive array of more providers.\n         *\n         * @usageNotes\n         * ### Example\n         *\n         * ```typescript\n         * @Injectable()\n         * class Engine {\n         * }\n         *\n         * @Injectable()\n         * class Car {\n         *   constructor(public engine:Engine) {}\n         * }\n         *\n         * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n         * expect(injector.get(Car) instanceof Car).toBe(true);\n         * ```\n         */\n        ReflectiveInjector.resolveAndCreate = function (providers, parent) {\n            var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n            return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);\n        };\n        /**\n         * Creates an injector from previously resolved providers.\n         *\n         * This API is the recommended way to construct injectors in performance-sensitive parts.\n         *\n         * @usageNotes\n         * ### Example\n         *\n         * ```typescript\n         * @Injectable()\n         * class Engine {\n         * }\n         *\n         * @Injectable()\n         * class Car {\n         *   constructor(public engine:Engine) {}\n         * }\n         *\n         * var providers = ReflectiveInjector.resolve([Car, Engine]);\n         * var injector = ReflectiveInjector.fromResolvedProviders(providers);\n         * expect(injector.get(Car) instanceof Car).toBe(true);\n         * ```\n         */\n        ReflectiveInjector.fromResolvedProviders = function (providers, parent) {\n            return new ReflectiveInjector_(providers, parent);\n        };\n        return ReflectiveInjector;\n    }());\n    var ReflectiveInjector_ = /** @class */ (function () {\n        /**\n         * Private\n         */\n        function ReflectiveInjector_(_providers, _parent) {\n            /** @internal */\n            this._constructionCounter = 0;\n            this._providers = _providers;\n            this.parent = _parent || null;\n            var len = _providers.length;\n            this.keyIds = new Array(len);\n            this.objs = new Array(len);\n            for (var i = 0; i < len; i++) {\n                this.keyIds[i] = _providers[i].key.id;\n                this.objs[i] = UNDEFINED;\n            }\n        }\n        ReflectiveInjector_.prototype.get = function (token, notFoundValue) {\n            if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }\n            return this._getByKey(ReflectiveKey.get(token), null, notFoundValue);\n        };\n        ReflectiveInjector_.prototype.resolveAndCreateChild = function (providers) {\n            var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n            return this.createChildFromResolved(ResolvedReflectiveProviders);\n        };\n        ReflectiveInjector_.prototype.createChildFromResolved = function (providers) {\n            var inj = new ReflectiveInjector_(providers);\n            inj.parent = this;\n            return inj;\n        };\n        ReflectiveInjector_.prototype.resolveAndInstantiate = function (provider) {\n            return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);\n        };\n        ReflectiveInjector_.prototype.instantiateResolved = function (provider) {\n            return this._instantiateProvider(provider);\n        };\n        ReflectiveInjector_.prototype.getProviderAtIndex = function (index) {\n            if (index < 0 || index >= this._providers.length) {\n                throw outOfBoundsError(index);\n            }\n            return this._providers[index];\n        };\n        /** @internal */\n        ReflectiveInjector_.prototype._new = function (provider) {\n            if (this._constructionCounter++ > this._getMaxNumberOfObjects()) {\n                throw cyclicDependencyError(this, provider.key);\n            }\n            return this._instantiateProvider(provider);\n        };\n        ReflectiveInjector_.prototype._getMaxNumberOfObjects = function () { return this.objs.length; };\n        ReflectiveInjector_.prototype._instantiateProvider = function (provider) {\n            if (provider.multiProvider) {\n                var res = new Array(provider.resolvedFactories.length);\n                for (var i = 0; i < provider.resolvedFactories.length; ++i) {\n                    res[i] = this._instantiate(provider, provider.resolvedFactories[i]);\n                }\n                return res;\n            }\n            else {\n                return this._instantiate(provider, provider.resolvedFactories[0]);\n            }\n        };\n        ReflectiveInjector_.prototype._instantiate = function (provider, ResolvedReflectiveFactory) {\n            var _this = this;\n            var factory = ResolvedReflectiveFactory.factory;\n            var deps;\n            try {\n                deps =\n                    ResolvedReflectiveFactory.dependencies.map(function (dep) { return _this._getByReflectiveDependency(dep); });\n            }\n            catch (e) {\n                if (e.addKey) {\n                    e.addKey(this, provider.key);\n                }\n                throw e;\n            }\n            var obj;\n            try {\n                obj = factory.apply(void 0, __spread(deps));\n            }\n            catch (e) {\n                throw instantiationError(this, e, e.stack, provider.key);\n            }\n            return obj;\n        };\n        ReflectiveInjector_.prototype._getByReflectiveDependency = function (dep) {\n            return this._getByKey(dep.key, dep.visibility, dep.optional ? null : THROW_IF_NOT_FOUND);\n        };\n        ReflectiveInjector_.prototype._getByKey = function (key, visibility, notFoundValue) {\n            if (key === ReflectiveInjector_.INJECTOR_KEY) {\n                return this;\n            }\n            if (visibility instanceof Self) {\n                return this._getByKeySelf(key, notFoundValue);\n            }\n            else {\n                return this._getByKeyDefault(key, notFoundValue, visibility);\n            }\n        };\n        ReflectiveInjector_.prototype._getObjByKeyId = function (keyId) {\n            for (var i = 0; i < this.keyIds.length; i++) {\n                if (this.keyIds[i] === keyId) {\n                    if (this.objs[i] === UNDEFINED) {\n                        this.objs[i] = this._new(this._providers[i]);\n                    }\n                    return this.objs[i];\n                }\n            }\n            return UNDEFINED;\n        };\n        /** @internal */\n        ReflectiveInjector_.prototype._throwOrNull = function (key, notFoundValue) {\n            if (notFoundValue !== THROW_IF_NOT_FOUND) {\n                return notFoundValue;\n            }\n            else {\n                throw noProviderError(this, key);\n            }\n        };\n        /** @internal */\n        ReflectiveInjector_.prototype._getByKeySelf = function (key, notFoundValue) {\n            var obj = this._getObjByKeyId(key.id);\n            return (obj !== UNDEFINED) ? obj : this._throwOrNull(key, notFoundValue);\n        };\n        /** @internal */\n        ReflectiveInjector_.prototype._getByKeyDefault = function (key, notFoundValue, visibility) {\n            var inj;\n            if (visibility instanceof SkipSelf) {\n                inj = this.parent;\n            }\n            else {\n                inj = this;\n            }\n            while (inj instanceof ReflectiveInjector_) {\n                var inj_ = inj;\n                var obj = inj_._getObjByKeyId(key.id);\n                if (obj !== UNDEFINED)\n                    return obj;\n                inj = inj_.parent;\n            }\n            if (inj !== null) {\n                return inj.get(key.token, notFoundValue);\n            }\n            else {\n                return this._throwOrNull(key, notFoundValue);\n            }\n        };\n        Object.defineProperty(ReflectiveInjector_.prototype, \"displayName\", {\n            get: function () {\n                var providers = _mapProviders(this, function (b) { return ' \"' + b.key.displayName + '\" '; })\n                    .join(', ');\n                return \"ReflectiveInjector(providers: [\" + providers + \"])\";\n            },\n            enumerable: true,\n            configurable: true\n        });\n        ReflectiveInjector_.prototype.toString = function () { return this.displayName; };\n        ReflectiveInjector_.INJECTOR_KEY = ReflectiveKey.get(Injector);\n        return ReflectiveInjector_;\n    }());\n    function _mapProviders(injector, fn) {\n        var res = new Array(injector._providers.length);\n        for (var i = 0; i < injector._providers.length; ++i) {\n            res[i] = fn(injector.getProviderAtIndex(i));\n        }\n        return res;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A DI token that you can use to create a virtual [provider](guide/glossary#provider)\n     * that will populate the `entryComponents` field of components and NgModules\n     * based on its `useValue` property value.\n     * All components that are referenced in the `useValue` value (either directly\n     * or in a nested array or map) are added to the `entryComponents` property.\n     *\n     * @usageNotes\n     *\n     * The following example shows how the router can populate the `entryComponents`\n     * field of an NgModule based on a router configuration that refers\n     * to components.\n     *\n     * ```typescript\n     * // helper function inside the router\n     * function provideRoutes(routes) {\n     *   return [\n     *     {provide: ROUTES, useValue: routes},\n     *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}\n     *   ];\n     * }\n     *\n     * // user code\n     * let routes = [\n     *   {path: '/root', component: RootComp},\n     *   {path: '/teams', component: TeamsComp}\n     * ];\n     *\n     * @NgModule({\n     *   providers: [provideRoutes(routes)]\n     * })\n     * class ModuleWithRoutes {}\n     * ```\n     *\n     * @publicApi\n     */\n    var ANALYZE_FOR_ENTRY_COMPONENTS = new InjectionToken('AnalyzeForEntryComponents');\n    /**\n     * Base class for query metadata.\n     *\n     * @see `ContentChildren`.\n     * @see `ContentChild`.\n     * @see `ViewChildren`.\n     * @see `ViewChild`.\n     *\n     * @publicApi\n     */\n    var Query = /** @class */ (function () {\n        function Query() {\n        }\n        return Query;\n    }());\n    /**\n     * ContentChildren decorator and metadata.\n     *\n     *\n     * @Annotation\n     * @publicApi\n     */\n    var ContentChildren = makePropDecorator('ContentChildren', function (selector, data) {\n        if (data === void 0) { data = {}; }\n        return (__assign({ selector: selector, first: false, isViewQuery: false, descendants: false }, data));\n    }, Query);\n    /**\n     * ContentChild decorator and metadata.\n     *\n     *\n     * @Annotation\n     *\n     * @publicApi\n     */\n    var ContentChild = makePropDecorator('ContentChild', function (selector, data) {\n        if (data === void 0) { data = {}; }\n        return (__assign({ selector: selector, first: true, isViewQuery: false, descendants: true }, data));\n    }, Query);\n    /**\n     * ViewChildren decorator and metadata.\n     *\n     * @Annotation\n     * @publicApi\n     */\n    var ViewChildren = makePropDecorator('ViewChildren', function (selector, data) {\n        if (data === void 0) { data = {}; }\n        return (__assign({ selector: selector, first: false, isViewQuery: true, descendants: true }, data));\n    }, Query);\n    /**\n     * ViewChild decorator and metadata.\n     *\n     * @Annotation\n     * @publicApi\n     */\n    var ViewChild = makePropDecorator('ViewChild', function (selector, data) {\n        return (__assign({ selector: selector, first: true, isViewQuery: true, descendants: true }, data));\n    }, Query);\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    (function (ChangeDetectionStrategy) {\n        /**\n         * Use the `CheckOnce` strategy, meaning that automatic change detection is deactivated\n         * until reactivated by setting the strategy to `Default` (`CheckAlways`).\n         * Change detection can still be explicitly invoked.\n         * This strategy applies to all child directives and cannot be overridden.\n         */\n        ChangeDetectionStrategy[ChangeDetectionStrategy[\"OnPush\"] = 0] = \"OnPush\";\n        /**\n         * Use the default `CheckAlways` strategy, in which change detection is automatic until\n         * explicitly deactivated.\n         */\n        ChangeDetectionStrategy[ChangeDetectionStrategy[\"Default\"] = 1] = \"Default\";\n    })(exports.ChangeDetectionStrategy || (exports.ChangeDetectionStrategy = {}));\n    (function (ChangeDetectorStatus) {\n        /**\n         * A state in which, after calling `detectChanges()`, the change detector\n         * state becomes `Checked`, and must be explicitly invoked or reactivated.\n         */\n        ChangeDetectorStatus[ChangeDetectorStatus[\"CheckOnce\"] = 0] = \"CheckOnce\";\n        /**\n         * A state in which change detection is skipped until the change detector mode\n         * becomes `CheckOnce`.\n         */\n        ChangeDetectorStatus[ChangeDetectorStatus[\"Checked\"] = 1] = \"Checked\";\n        /**\n         * A state in which change detection continues automatically until explicitly\n         * deactivated.\n         */\n        ChangeDetectorStatus[ChangeDetectorStatus[\"CheckAlways\"] = 2] = \"CheckAlways\";\n        /**\n         * A state in which a change detector sub tree is not a part of the main tree and\n         * should be skipped.\n         */\n        ChangeDetectorStatus[ChangeDetectorStatus[\"Detached\"] = 3] = \"Detached\";\n        /**\n         * Indicates that the change detector encountered an error checking a binding\n         * or calling a directive lifecycle method and is now in an inconsistent state. Change\n         * detectors in this state do not detect changes.\n         */\n        ChangeDetectorStatus[ChangeDetectorStatus[\"Errored\"] = 4] = \"Errored\";\n        /**\n         * Indicates that the change detector has been destroyed.\n         */\n        ChangeDetectorStatus[ChangeDetectorStatus[\"Destroyed\"] = 5] = \"Destroyed\";\n    })(exports.ɵChangeDetectorStatus || (exports.ɵChangeDetectorStatus = {}));\n    /**\n     * Reports whether a given strategy is currently the default for change detection.\n     * @param changeDetectionStrategy The strategy to check.\n     * @returns True if the given strategy is the current default, false otherwise.\n     * @see `ChangeDetectorStatus`\n     * @see `ChangeDetectorRef`\n     */\n    function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {\n        return changeDetectionStrategy == null ||\n            changeDetectionStrategy === exports.ChangeDetectionStrategy.Default;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Used to resolve resource URLs on `@Component` when used with JIT compilation.\n     *\n     * Example:\n     * ```\n     * @Component({\n     *   selector: 'my-comp',\n     *   templateUrl: 'my-comp.html', // This requires asynchronous resolution\n     * })\n     * class MyComponent{\n     * }\n     *\n     * // Calling `renderComponent` will fail because `renderComponent` is a synchronous process\n     * // and `MyComponent`'s `@Component.templateUrl` needs to be resolved asynchronously.\n     *\n     * // Calling `resolveComponentResources()` will resolve `@Component.templateUrl` into\n     * // `@Component.template`, which allows `renderComponent` to proceed in a synchronous manner.\n     *\n     * // Use browser's `fetch()` function as the default resource resolution strategy.\n     * resolveComponentResources(fetch).then(() => {\n     *   // After resolution all URLs have been converted into `template` strings.\n     *   renderComponent(MyComponent);\n     * });\n     *\n     * ```\n     *\n     * NOTE: In AOT the resolution happens during compilation, and so there should be no need\n     * to call this method outside JIT mode.\n     *\n     * @param resourceResolver a function which is responsible for returning a `Promise` to the\n     * contents of the resolved URL. Browser's `fetch()` method is a good default implementation.\n     */\n    function resolveComponentResources(resourceResolver) {\n        // Store all promises which are fetching the resources.\n        var componentResolved = [];\n        // Cache so that we don't fetch the same resource more than once.\n        var urlMap = new Map();\n        function cachedResourceResolve(url) {\n            var promise = urlMap.get(url);\n            if (!promise) {\n                var resp = resourceResolver(url);\n                urlMap.set(url, promise = resp.then(unwrapResponse));\n            }\n            return promise;\n        }\n        componentResourceResolutionQueue.forEach(function (component, type) {\n            var promises = [];\n            if (component.templateUrl) {\n                promises.push(cachedResourceResolve(component.templateUrl).then(function (template) {\n                    component.template = template;\n                }));\n            }\n            var styleUrls = component.styleUrls;\n            var styles = component.styles || (component.styles = []);\n            var styleOffset = component.styles.length;\n            styleUrls && styleUrls.forEach(function (styleUrl, index) {\n                styles.push(''); // pre-allocate array.\n                promises.push(cachedResourceResolve(styleUrl).then(function (style) {\n                    styles[styleOffset + index] = style;\n                    styleUrls.splice(styleUrls.indexOf(styleUrl), 1);\n                    if (styleUrls.length == 0) {\n                        component.styleUrls = undefined;\n                    }\n                }));\n            });\n            var fullyResolved = Promise.all(promises).then(function () { return componentDefResolved(type); });\n            componentResolved.push(fullyResolved);\n        });\n        clearResolutionOfComponentResourcesQueue();\n        return Promise.all(componentResolved).then(function () { return undefined; });\n    }\n    var componentResourceResolutionQueue = new Map();\n    // Track when existing ngComponentDef for a Type is waiting on resources.\n    var componentDefPendingResolution = new Set();\n    function maybeQueueResolutionOfComponentResources(type, metadata) {\n        if (componentNeedsResolution(metadata)) {\n            componentResourceResolutionQueue.set(type, metadata);\n            componentDefPendingResolution.add(type);\n        }\n    }\n    function componentNeedsResolution(component) {\n        return !!((component.templateUrl && !component.hasOwnProperty('template')) ||\n            component.styleUrls && component.styleUrls.length);\n    }\n    function clearResolutionOfComponentResourcesQueue() {\n        var old = componentResourceResolutionQueue;\n        componentResourceResolutionQueue = new Map();\n        return old;\n    }\n    function isComponentResourceResolutionQueueEmpty() {\n        return componentResourceResolutionQueue.size === 0;\n    }\n    function unwrapResponse(response) {\n        return typeof response == 'string' ? response : response.text();\n    }\n    function componentDefResolved(type) {\n        componentDefPendingResolution.delete(type);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    (function (ViewEncapsulation) {\n        /**\n         * Emulate `Native` scoping of styles by adding an attribute containing surrogate id to the Host\n         * Element and pre-processing the style rules provided via {@link Component#styles styles} or\n         * {@link Component#styleUrls styleUrls}, and adding the new Host Element attribute to all\n         * selectors.\n         *\n         * This is the default option.\n         */\n        ViewEncapsulation[ViewEncapsulation[\"Emulated\"] = 0] = \"Emulated\";\n        /**\n         * @deprecated v6.1.0 - use {ViewEncapsulation.ShadowDom} instead.\n         * Use the native encapsulation mechanism of the renderer.\n         *\n         * For the DOM this means using the deprecated [Shadow DOM\n         * v0](https://w3c.github.io/webcomponents/spec/shadow/) and\n         * creating a ShadowRoot for Component's Host Element.\n         */\n        ViewEncapsulation[ViewEncapsulation[\"Native\"] = 1] = \"Native\";\n        /**\n         * Don't provide any template or style encapsulation.\n         */\n        ViewEncapsulation[ViewEncapsulation[\"None\"] = 2] = \"None\";\n        /**\n         * Use Shadow DOM to encapsulate styles.\n         *\n         * For the DOM this means using modern [Shadow\n         * DOM](https://w3c.github.io/webcomponents/spec/shadow/) and\n         * creating a ShadowRoot for Component's Host Element.\n         */\n        ViewEncapsulation[ViewEncapsulation[\"ShadowDom\"] = 3] = \"ShadowDom\";\n    })(exports.ViewEncapsulation || (exports.ViewEncapsulation = {}));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Convince closure compiler that the wrapped function has no side-effects.\n     *\n     * Closure compiler always assumes that `toString` has no side-effects. We use this quirk to\n     * allow us to execute a function but have closure compiler mark the call as no-side-effects.\n     * It is important that the return value for the `noSideEffects` function be assigned\n     * to something which is retained otherwise the call to `noSideEffects` will be removed by closure\n     * compiler.\n     */\n    function noSideEffects(fn) {\n        return '' + { toString: fn };\n    }\n\n    /**\n    * @license\n    * Copyright Google Inc. All Rights Reserved.\n    *\n    * Use of this source code is governed by an MIT-style license that can be\n    * found in the LICENSE file at https://angular.io/license\n    */\n    /**\n     * This file contains reuseable \"empty\" symbols that can be used as default return values\n     * in different parts of the rendering code. Because the same symbols are returned, this\n     * allows for identity checks against these values to be consistently used by the framework\n     * code.\n     */\n    var EMPTY_OBJ = {};\n    var EMPTY_ARRAY$1 = [];\n    // freezing the values prevents any code from accidentally inserting new values in\n    if (typeof ngDevMode !== 'undefined' && ngDevMode) {\n        // These property accesses can be ignored because ngDevMode will be set to false\n        // when optimizing code and the whole if statement will be dropped.\n        // tslint:disable-next-line:no-toplevel-property-access\n        Object.freeze(EMPTY_OBJ);\n        // tslint:disable-next-line:no-toplevel-property-access\n        Object.freeze(EMPTY_ARRAY$1);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var NG_COMPONENT_DEF = getClosureSafeProperty({ ngComponentDef: getClosureSafeProperty });\n    var NG_DIRECTIVE_DEF = getClosureSafeProperty({ ngDirectiveDef: getClosureSafeProperty });\n    var NG_PIPE_DEF = getClosureSafeProperty({ ngPipeDef: getClosureSafeProperty });\n    var NG_MODULE_DEF = getClosureSafeProperty({ ngModuleDef: getClosureSafeProperty });\n    var NG_LOCALE_ID_DEF = getClosureSafeProperty({ ngLocaleIdDef: getClosureSafeProperty });\n    var NG_BASE_DEF = getClosureSafeProperty({ ngBaseDef: getClosureSafeProperty });\n    /**\n     * If a directive is diPublic, bloomAdd sets a property on the type with this constant as\n     * the key and the directive's unique ID as the value. This allows us to map directives to their\n     * bloom filter bit for DI.\n     */\n    // TODO(misko): This is wrong. The NG_ELEMENT_ID should never be minified.\n    var NG_ELEMENT_ID = getClosureSafeProperty({ __NG_ELEMENT_ID__: getClosureSafeProperty });\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var _renderCompCount = 0;\n    /**\n     * Create a component definition object.\n     *\n     *\n     * # Example\n     * ```\n     * class MyDirective {\n     *   // Generated by Angular Template Compiler\n     *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n     *   static ngComponentDef = defineComponent({\n     *     ...\n     *   });\n     * }\n     * ```\n     * @codeGenApi\n     */\n    function ɵɵdefineComponent(componentDefinition) {\n        var type = componentDefinition.type;\n        var typePrototype = type.prototype;\n        var declaredInputs = {};\n        var def = {\n            type: type,\n            providersResolver: null,\n            consts: componentDefinition.consts,\n            vars: componentDefinition.vars,\n            factory: componentDefinition.factory,\n            template: componentDefinition.template || null,\n            ngContentSelectors: componentDefinition.ngContentSelectors,\n            hostBindings: componentDefinition.hostBindings || null,\n            contentQueries: componentDefinition.contentQueries || null,\n            declaredInputs: declaredInputs,\n            inputs: null,\n            outputs: null,\n            exportAs: componentDefinition.exportAs || null,\n            onChanges: null,\n            onInit: typePrototype.ngOnInit || null,\n            doCheck: typePrototype.ngDoCheck || null,\n            afterContentInit: typePrototype.ngAfterContentInit || null,\n            afterContentChecked: typePrototype.ngAfterContentChecked || null,\n            afterViewInit: typePrototype.ngAfterViewInit || null,\n            afterViewChecked: typePrototype.ngAfterViewChecked || null,\n            onDestroy: typePrototype.ngOnDestroy || null,\n            onPush: componentDefinition.changeDetection === exports.ChangeDetectionStrategy.OnPush,\n            directiveDefs: null,\n            pipeDefs: null,\n            selectors: componentDefinition.selectors,\n            viewQuery: componentDefinition.viewQuery || null,\n            features: componentDefinition.features || null,\n            data: componentDefinition.data || {},\n            // TODO(misko): convert ViewEncapsulation into const enum so that it can be used directly in the\n            // next line. Also `None` should be 0 not 2.\n            encapsulation: componentDefinition.encapsulation || exports.ViewEncapsulation.Emulated,\n            id: 'c',\n            styles: componentDefinition.styles || EMPTY_ARRAY$1,\n            _: null,\n            setInput: null,\n            schemas: componentDefinition.schemas || null,\n            tView: null,\n        };\n        def._ = noSideEffects(function () {\n            var directiveTypes = componentDefinition.directives;\n            var feature = componentDefinition.features;\n            var pipeTypes = componentDefinition.pipes;\n            def.id += _renderCompCount++;\n            def.inputs = invertObject(componentDefinition.inputs, declaredInputs),\n                def.outputs = invertObject(componentDefinition.outputs),\n                feature && feature.forEach(function (fn) { return fn(def); });\n            def.directiveDefs = directiveTypes ?\n                function () { return (typeof directiveTypes === 'function' ? directiveTypes() : directiveTypes)\n                    .map(extractDirectiveDef); } :\n                null;\n            def.pipeDefs = pipeTypes ?\n                function () { return (typeof pipeTypes === 'function' ? pipeTypes() : pipeTypes).map(extractPipeDef); } :\n                null;\n            // Add ngInjectableDef so components are reachable through the module injector by default\n            // (unless it has already been set by the @Injectable decorator). This is mostly to\n            // support injecting components in tests. In real application code, components should\n            // be retrieved through the node injector, so this isn't a problem.\n            if (!type.hasOwnProperty(NG_INJECTABLE_DEF)) {\n                type[NG_INJECTABLE_DEF] =\n                    ɵɵdefineInjectable({ token: type, factory: componentDefinition.factory });\n            }\n        });\n        return def;\n    }\n    /**\n     * @codeGenApi\n     */\n    function ɵɵsetComponentScope(type, directives, pipes) {\n        var def = type.ngComponentDef;\n        def.directiveDefs = function () { return directives.map(extractDirectiveDef); };\n        def.pipeDefs = function () { return pipes.map(extractPipeDef); };\n    }\n    function extractDirectiveDef(type) {\n        var def = getComponentDef(type) || getDirectiveDef(type);\n        if (ngDevMode && !def) {\n            throw new Error(\"'\" + type.name + \"' is neither 'ComponentType' or 'DirectiveType'.\");\n        }\n        return def;\n    }\n    function extractPipeDef(type) {\n        var def = getPipeDef(type);\n        if (ngDevMode && !def) {\n            throw new Error(\"'\" + type.name + \"' is not a 'PipeType'.\");\n        }\n        return def;\n    }\n    /**\n     * @codeGenApi\n     */\n    function ɵɵdefineNgModule(def) {\n        var res = {\n            type: def.type,\n            bootstrap: def.bootstrap || EMPTY_ARRAY$1,\n            declarations: def.declarations || EMPTY_ARRAY$1,\n            imports: def.imports || EMPTY_ARRAY$1,\n            exports: def.exports || EMPTY_ARRAY$1,\n            transitiveCompileScopes: null,\n            schemas: def.schemas || null,\n            id: def.id || null,\n        };\n        return res;\n    }\n    /**\n     * Adds the module metadata that is necessary to compute the module's transitive scope to an\n     * existing module definition.\n     *\n     * Scope metadata of modules is not used in production builds, so calls to this function can be\n     * marked pure to tree-shake it from the bundle, allowing for all referenced declarations\n     * to become eligible for tree-shaking as well.\n     *\n     * @codeGenApi\n     */\n    function ɵɵsetNgModuleScope(type, scope) {\n        return noSideEffects(function () {\n            var ngModuleDef = getNgModuleDef(type, true);\n            ngModuleDef.declarations = scope.declarations || EMPTY_ARRAY$1;\n            ngModuleDef.imports = scope.imports || EMPTY_ARRAY$1;\n            ngModuleDef.exports = scope.exports || EMPTY_ARRAY$1;\n        });\n    }\n    /**\n     * Inverts an inputs or outputs lookup such that the keys, which were the\n     * minified keys, are part of the values, and the values are parsed so that\n     * the publicName of the property is the new key\n     *\n     * e.g. for\n     *\n     * ```\n     * class Comp {\n     *   @Input()\n     *   propName1: string;\n     *\n     *   @Input('publicName2')\n     *   declaredPropName2: number;\n     * }\n     * ```\n     *\n     * will be serialized as\n     *\n     * ```\n     * {\n     *   propName1: 'propName1',\n     *   declaredPropName2: ['publicName2', 'declaredPropName2'],\n     * }\n     * ```\n     *\n     * which is than translated by the minifier as:\n     *\n     * ```\n     * {\n     *   minifiedPropName1: 'propName1',\n     *   minifiedPropName2: ['publicName2', 'declaredPropName2'],\n     * }\n     * ```\n     *\n     * becomes: (public name => minifiedName)\n     *\n     * ```\n     * {\n     *  'propName1': 'minifiedPropName1',\n     *  'publicName2': 'minifiedPropName2',\n     * }\n     * ```\n     *\n     * Optionally the function can take `secondary` which will result in: (public name => declared name)\n     *\n     * ```\n     * {\n     *  'propName1': 'propName1',\n     *  'publicName2': 'declaredPropName2',\n     * }\n     * ```\n     *\n\n     */\n    function invertObject(obj, secondary) {\n        if (obj == null)\n            return EMPTY_OBJ;\n        var newLookup = {};\n        for (var minifiedKey in obj) {\n            if (obj.hasOwnProperty(minifiedKey)) {\n                var publicName = obj[minifiedKey];\n                var declaredName = publicName;\n                if (Array.isArray(publicName)) {\n                    declaredName = publicName[1];\n                    publicName = publicName[0];\n                }\n                newLookup[publicName] = minifiedKey;\n                if (secondary) {\n                    (secondary[publicName] = declaredName);\n                }\n            }\n        }\n        return newLookup;\n    }\n    /**\n     * Create a base definition\n     *\n     * # Example\n     * ```ts\n     * class ShouldBeInherited {\n     *   static ngBaseDef = ɵɵdefineBase({\n     *      ...\n     *   })\n     * }\n     * ```\n     *\n     * @param baseDefinition The base definition parameters\n     *\n     * @codeGenApi\n     */\n    function ɵɵdefineBase(baseDefinition) {\n        var declaredInputs = {};\n        return {\n            inputs: invertObject(baseDefinition.inputs, declaredInputs),\n            declaredInputs: declaredInputs,\n            outputs: invertObject(baseDefinition.outputs),\n            viewQuery: baseDefinition.viewQuery || null,\n            contentQueries: baseDefinition.contentQueries || null,\n            hostBindings: baseDefinition.hostBindings || null\n        };\n    }\n    /**\n     * Create a directive definition object.\n     *\n     * # Example\n     * ```ts\n     * class MyDirective {\n     *   // Generated by Angular Template Compiler\n     *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n     *   static ngDirectiveDef = ɵɵdefineDirective({\n     *     ...\n     *   });\n     * }\n     * ```\n     *\n     * @codeGenApi\n     */\n    var ɵɵdefineDirective = ɵɵdefineComponent;\n    /**\n     * Create a pipe definition object.\n     *\n     * # Example\n     * ```\n     * class MyPipe implements PipeTransform {\n     *   // Generated by Angular Template Compiler\n     *   static ngPipeDef = definePipe({\n     *     ...\n     *   });\n     * }\n     * ```\n     * @param pipeDef Pipe definition generated by the compiler\n     *\n     * @codeGenApi\n     */\n    function ɵɵdefinePipe(pipeDef) {\n        return {\n            name: pipeDef.name,\n            factory: pipeDef.factory,\n            pure: pipeDef.pure !== false,\n            onDestroy: pipeDef.type.prototype.ngOnDestroy || null\n        };\n    }\n    /**\n     * The following getter methods retrieve the definition form the type. Currently the retrieval\n     * honors inheritance, but in the future we may change the rule to require that definitions are\n     * explicit. This would require some sort of migration strategy.\n     */\n    function getComponentDef(type) {\n        return type[NG_COMPONENT_DEF] || null;\n    }\n    function getDirectiveDef(type) {\n        return type[NG_DIRECTIVE_DEF] || null;\n    }\n    function getPipeDef(type) {\n        return type[NG_PIPE_DEF] || null;\n    }\n    function getBaseDef(type) {\n        return type[NG_BASE_DEF] || null;\n    }\n    function getNgModuleDef(type, throwNotFound) {\n        var ngModuleDef = type[NG_MODULE_DEF] || null;\n        if (!ngModuleDef && throwNotFound === true) {\n            throw new Error(\"Type \" + stringify(type) + \" does not have 'ngModuleDef' property.\");\n        }\n        return ngModuleDef;\n    }\n    function getNgLocaleIdDef(type) {\n        return type[NG_LOCALE_ID_DEF] || null;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Returns whether the values are different from a change detection stand point.\n     *\n     * Constraints are relaxed in checkNoChanges mode. See `devModeEqual` for details.\n     */\n    function isDifferent(a, b) {\n        // NaN is the only value that is not equal to itself so the first\n        // test checks if both a and b are not NaN\n        return !(a !== a && b !== b) && a !== b;\n    }\n    /**\n     * Used for stringify render output in Ivy.\n     * Important! This function is very performance-sensitive and we should\n     * be extra careful not to introduce megamorphic reads in it.\n     */\n    function renderStringify(value) {\n        if (typeof value === 'string')\n            return value;\n        if (value == null)\n            return '';\n        return '' + value;\n    }\n    /**\n     * Used to stringify a value so that it can be displayed in an error message.\n     * Important! This function contains a megamorphic read and should only be\n     * used for error messages.\n     */\n    function stringifyForError(value) {\n        if (typeof value === 'function')\n            return value.name || value.toString();\n        if (typeof value === 'object' && value != null && typeof value.type === 'function') {\n            return value.type.name || value.type.toString();\n        }\n        return renderStringify(value);\n    }\n    var defaultScheduler = (function () {\n        return (typeof requestAnimationFrame !== 'undefined' && requestAnimationFrame || // browser only\n            setTimeout // everything else\n        ).bind(_global);\n    })();\n    /**\n     *\n     * @codeGenApi\n     */\n    function ɵɵresolveWindow(element) {\n        return { name: 'window', target: element.ownerDocument.defaultView };\n    }\n    /**\n     *\n     * @codeGenApi\n     */\n    function ɵɵresolveDocument(element) {\n        return { name: 'document', target: element.ownerDocument };\n    }\n    /**\n     *\n     * @codeGenApi\n     */\n    function ɵɵresolveBody(element) {\n        return { name: 'body', target: element.ownerDocument.body };\n    }\n    /**\n     * The special delimiter we use to separate property names, prefixes, and suffixes\n     * in property binding metadata. See storeBindingMetadata().\n     *\n     * We intentionally use the Unicode \"REPLACEMENT CHARACTER\" (U+FFFD) as a delimiter\n     * because it is a very uncommon character that is unlikely to be part of a user's\n     * property names or interpolation strings. If it is in fact used in a property\n     * binding, DebugElement.properties will not return the correct value for that\n     * binding. However, there should be no runtime effect for real applications.\n     *\n     * This character is typically rendered as a question mark inside of a diamond.\n     * See https://en.wikipedia.org/wiki/Specials_(Unicode_block)\n     *\n     */\n    var INTERPOLATION_DELIMITER = \"\\uFFFD\";\n    /**\n     * Determines whether or not the given string is a property metadata string.\n     * See storeBindingMetadata().\n     */\n    function isPropMetadataString(str) {\n        return str.indexOf(INTERPOLATION_DELIMITER) >= 0;\n    }\n    /**\n     * Unwrap a value which might be behind a closure (for forward declaration reasons).\n     */\n    function maybeUnwrapFn(value) {\n        if (value instanceof Function) {\n            return value();\n        }\n        else {\n            return value;\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // Below are constants for LView indices to help us look up LView members\n    // without having to remember the specific indices.\n    // Uglify will inline these when minifying so there shouldn't be a cost.\n    var HOST = 0;\n    var TVIEW = 1;\n    var FLAGS = 2;\n    var PARENT = 3;\n    var NEXT = 4;\n    var QUERIES = 5;\n    var T_HOST = 6;\n    var BINDING_INDEX = 7;\n    var CLEANUP = 8;\n    var CONTEXT = 9;\n    var INJECTOR$1 = 10;\n    var RENDERER_FACTORY = 11;\n    var RENDERER = 12;\n    var SANITIZER = 13;\n    var CHILD_HEAD = 14;\n    var CHILD_TAIL = 15;\n    var CONTENT_QUERIES = 16;\n    var DECLARATION_VIEW = 17;\n    var PREORDER_HOOK_FLAGS = 18;\n    /** Size of LView's header. Necessary to adjust for it when setting slots.  */\n    var HEADER_OFFSET = 20;\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function assertEqual(actual, expected, msg) {\n        if (actual != expected) {\n            throwError(msg);\n        }\n    }\n    function assertNotEqual(actual, expected, msg) {\n        if (actual == expected) {\n            throwError(msg);\n        }\n    }\n    function assertNotSame(actual, expected, msg) {\n        if (actual === expected) {\n            throwError(msg);\n        }\n    }\n    function assertLessThan(actual, expected, msg) {\n        if (actual >= expected) {\n            throwError(msg);\n        }\n    }\n    function assertGreaterThan(actual, expected, msg) {\n        if (actual <= expected) {\n            throwError(msg);\n        }\n    }\n    function assertDefined(actual, msg) {\n        if (actual == null) {\n            throwError(msg);\n        }\n    }\n    function throwError(msg) {\n        // tslint:disable-next-line\n        debugger; // Left intentionally for better debugger experience.\n        throw new Error(\"ASSERTION ERROR: \" + msg);\n    }\n    function assertDomNode(node) {\n        // If we're in a worker, `Node` will not be defined.\n        assertEqual((typeof Node !== 'undefined' && node instanceof Node) ||\n            (typeof node === 'object' && node != null &&\n                node.constructor.name === 'WebWorkerRenderNode'), true, \"The provided value must be an instance of a DOM Node but got \" + stringify(node));\n    }\n    function assertDataInRange(arr, index) {\n        var maxLen = arr ? arr.length : 0;\n        assertLessThan(index, maxLen, \"Index expected to be less than \" + maxLen + \" but got \" + index);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Special location which allows easy identification of type. If we have an array which was\n     * retrieved from the `LView` and that array has `true` at `TYPE` location, we know it is\n     * `LContainer`.\n     */\n    var TYPE = 1;\n    /**\n     * Below are constants for LContainer indices to help us look up LContainer members\n     * without having to remember the specific indices.\n     * Uglify will inline these when minifying so there shouldn't be a cost.\n     */\n    var ACTIVE_INDEX = 2;\n    // PARENT, NEXT, QUERIES and T_HOST are indices 3, 4, 5 and 6.\n    // As we already have these constants in LView, we don't need to re-create them.\n    var NATIVE = 7;\n    var VIEW_REFS = 8;\n    /**\n     * Size of LContainer's header. Represents the index after which all views in the\n     * container will be inserted. We need to keep a record of current views so we know\n     * which views are already in the DOM (and don't need to be re-added) and so we can\n     * remove views from the DOM when they are no longer required.\n     */\n    var CONTAINER_HEADER_OFFSET = 9;\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * This property will be monkey-patched on elements, components and directives\n     */\n    var MONKEY_PATCH_KEY_NAME = '__ngContext__';\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * For efficiency reasons we often put several different data types (`RNode`, `LView`, `LContainer`,\n     * `StylingContext`) in same location in `LView`. This is because we don't want to pre-allocate\n     * space for it because the storage is sparse. This file contains utilities for dealing with such\n     * data types.\n     *\n     * How do we know what is stored at a given location in `LView`.\n     * - `Array.isArray(value) === false` => `RNode` (The normal storage value)\n     * - `Array.isArray(value) === true` => then the `value[0]` represents the wrapped value.\n     *   - `typeof value[TYPE] === 'object'` => `LView`\n     *      - This happens when we have a component at a given location\n     *   - `typeof value[TYPE] === 'number'` => `StylingContext`\n     *      - This happens when we have style/class binding at a given location.\n     *   - `typeof value[TYPE] === true` => `LContainer`\n     *      - This happens when we have `LContainer` binding at a given location.\n     *\n     *\n     * NOTE: it is assumed that `Array.isArray` and `typeof` operations are very efficient.\n     */\n    /**\n     * Returns `RNode`.\n     * @param value wrapped value of `RNode`, `LView`, `LContainer`, `StylingContext`\n     */\n    function unwrapRNode(value) {\n        while (Array.isArray(value)) {\n            value = value[HOST];\n        }\n        return value;\n    }\n    /**\n     * True if `value` is `LView`.\n     * @param value wrapped value of `RNode`, `LView`, `LContainer`, `StylingContext`\n     */\n    function isLView(value) {\n        return Array.isArray(value) && typeof value[TYPE] === 'object';\n    }\n    /**\n     * True if `value` is `LContainer`.\n     * @param value wrapped value of `RNode`, `LView`, `LContainer`, `StylingContext`\n     */\n    function isLContainer(value) {\n        return Array.isArray(value) && value[TYPE] === true;\n    }\n    /**\n     * True if `value` is `StylingContext`.\n     * @param value wrapped value of `RNode`, `LView`, `LContainer`, `StylingContext`\n     */\n    function isStylingContext(value) {\n        return Array.isArray(value) && typeof value[TYPE] === 'number';\n    }\n    /**\n     * Retrieves an element value from the provided `viewData`, by unwrapping\n     * from any containers, component views, or style contexts.\n     */\n    function getNativeByIndex(index, lView) {\n        return unwrapRNode(lView[index + HEADER_OFFSET]);\n    }\n    /**\n     * Retrieve an `RNode` for a given `TNode` and `LView`.\n     *\n     * This function guarantees in dev mode to retrieve a non-null `RNode`.\n     *\n     * @param tNode\n     * @param lView\n     */\n    function getNativeByTNode(tNode, lView) {\n        ngDevMode && assertTNodeForLView(tNode, lView);\n        ngDevMode && assertDataInRange(lView, tNode.index);\n        var node = unwrapRNode(lView[tNode.index]);\n        ngDevMode && assertDomNode(node);\n        return node;\n    }\n    /**\n     * Retrieve an `RNode` or `null` for a given `TNode` and `LView`.\n     *\n     * Some `TNode`s don't have associated `RNode`s. For example `Projection`\n     *\n     * @param tNode\n     * @param lView\n     */\n    function getNativeByTNodeOrNull(tNode, lView) {\n        ngDevMode && assertTNodeForLView(tNode, lView);\n        var index = tNode.index;\n        var node = index == -1 ? null : unwrapRNode(lView[index]);\n        ngDevMode && node !== null && assertDomNode(node);\n        return node;\n    }\n    /**\n     * A helper function that returns `true` if a given `TNode` has any matching directives.\n     */\n    function hasDirectives(tNode) {\n        return tNode.directiveEnd > tNode.directiveStart;\n    }\n    function getTNode(index, view) {\n        ngDevMode && assertGreaterThan(index, -1, 'wrong index for TNode');\n        ngDevMode && assertLessThan(index, view[TVIEW].data.length, 'wrong index for TNode');\n        return view[TVIEW].data[index + HEADER_OFFSET];\n    }\n    /** Retrieves a value from any `LView` or `TData`. */\n    function loadInternal(view, index) {\n        ngDevMode && assertDataInRange(view, index + HEADER_OFFSET);\n        return view[index + HEADER_OFFSET];\n    }\n    function getComponentViewByIndex(nodeIndex, hostView) {\n        // Could be an LView or an LContainer. If LContainer, unwrap to find LView.\n        var slotValue = hostView[nodeIndex];\n        var lView = isLView(slotValue) ? slotValue : slotValue[HOST];\n        return lView;\n    }\n    function isContentQueryHost(tNode) {\n        return (tNode.flags & 4 /* hasContentQuery */) !== 0;\n    }\n    function isComponent(tNode) {\n        return (tNode.flags & 1 /* isComponent */) === 1 /* isComponent */;\n    }\n    function isComponentDef(def) {\n        return def.template !== null;\n    }\n    function isRootView(target) {\n        return (target[FLAGS] & 512 /* IsRoot */) !== 0;\n    }\n    /**\n     * Returns the monkey-patch value data present on the target (which could be\n     * a component, directive or a DOM node).\n     */\n    function readPatchedData(target) {\n        ngDevMode && assertDefined(target, 'Target expected');\n        return target[MONKEY_PATCH_KEY_NAME];\n    }\n    function readPatchedLView(target) {\n        var value = readPatchedData(target);\n        if (value) {\n            return Array.isArray(value) ? value : value.lView;\n        }\n        return null;\n    }\n    /**\n     * Returns a boolean for whether the view is attached to the change detection tree.\n     *\n     * Note: This determines whether a view should be checked, not whether it's inserted\n     * into a container. For that, you'll want `viewAttachedToContainer` below.\n     */\n    function viewAttachedToChangeDetector(view) {\n        return (view[FLAGS] & 128 /* Attached */) === 128 /* Attached */;\n    }\n    /** Returns a boolean for whether the view is attached to a container. */\n    function viewAttachedToContainer(view) {\n        return isLContainer(view[PARENT]);\n    }\n    /**\n     * Resets the pre-order hook flags of the view.\n     * @param lView the LView on which the flags are reset\n     */\n    function resetPreOrderHookFlags(lView) {\n        lView[PREORDER_HOOK_FLAGS] = 0;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function assertTNodeForLView(tNode, lView) {\n        tNode.hasOwnProperty('tView_') && assertEqual(tNode.tView_, lView[TVIEW], 'This TNode does not belong to this LView.');\n    }\n    function assertComponentType(actual, msg) {\n        if (msg === void 0) { msg = 'Type passed in is not ComponentType, it does not have \\'ngComponentDef\\' property.'; }\n        if (!getComponentDef(actual)) {\n            throwError(msg);\n        }\n    }\n    function assertNgModuleType(actual, msg) {\n        if (msg === void 0) { msg = 'Type passed in is not NgModuleType, it does not have \\'ngModuleDef\\' property.'; }\n        if (!getNgModuleDef(actual)) {\n            throwError(msg);\n        }\n    }\n    function assertPreviousIsParent(isParent) {\n        assertEqual(isParent, true, 'previousOrParentTNode should be a parent');\n    }\n    function assertHasParent(tNode) {\n        assertDefined(tNode, 'previousOrParentTNode should exist!');\n        assertDefined(tNode.parent, 'previousOrParentTNode should have a parent');\n    }\n    function assertLContainerOrUndefined(value) {\n        value && assertEqual(isLContainer(value), true, 'Expecting LContainer or undefined or null');\n    }\n    function assertLContainer(value) {\n        assertDefined(value, 'LContainer must be defined');\n        assertEqual(isLContainer(value), true, 'Expecting LContainer');\n    }\n    function assertLViewOrUndefined(value) {\n        value && assertEqual(isLView(value), true, 'Expecting LView or undefined or null');\n    }\n    function assertLView(value) {\n        assertDefined(value, 'LView must be defined');\n        assertEqual(isLView(value), true, 'Expecting LView');\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Adds all directive lifecycle hooks from the given `DirectiveDef` to the given `TView`.\n     *\n     * Must be run *only* on the first template pass.\n     *\n     * Sets up the pre-order hooks on the provided `tView`,\n     * see {@link HookData} for details about the data structure.\n     *\n     * @param directiveIndex The index of the directive in LView\n     * @param directiveDef The definition containing the hooks to setup in tView\n     * @param tView The current TView\n     * @param nodeIndex The index of the node to which the directive is attached\n     * @param initialPreOrderHooksLength the number of pre-order hooks already registered before the\n     * current process, used to know if the node index has to be added to the array. If it is -1,\n     * the node index is never added.\n     * @param initialPreOrderCheckHooksLength same as previous for pre-order check hooks\n     */\n    function registerPreOrderHooks(directiveIndex, directiveDef, tView, nodeIndex, initialPreOrderHooksLength, initialPreOrderCheckHooksLength) {\n        ngDevMode &&\n            assertEqual(tView.firstTemplatePass, true, 'Should only be called on first template pass');\n        var onChanges = directiveDef.onChanges, onInit = directiveDef.onInit, doCheck = directiveDef.doCheck;\n        if (initialPreOrderHooksLength >= 0 &&\n            (!tView.preOrderHooks || initialPreOrderHooksLength === tView.preOrderHooks.length) &&\n            (onChanges || onInit || doCheck)) {\n            (tView.preOrderHooks || (tView.preOrderHooks = [])).push(nodeIndex);\n        }\n        if (initialPreOrderCheckHooksLength >= 0 &&\n            (!tView.preOrderCheckHooks ||\n                initialPreOrderCheckHooksLength === tView.preOrderCheckHooks.length) &&\n            (onChanges || doCheck)) {\n            (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = [])).push(nodeIndex);\n        }\n        if (onChanges) {\n            (tView.preOrderHooks || (tView.preOrderHooks = [])).push(directiveIndex, onChanges);\n            (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = [])).push(directiveIndex, onChanges);\n        }\n        if (onInit) {\n            (tView.preOrderHooks || (tView.preOrderHooks = [])).push(-directiveIndex, onInit);\n        }\n        if (doCheck) {\n            (tView.preOrderHooks || (tView.preOrderHooks = [])).push(directiveIndex, doCheck);\n            (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = [])).push(directiveIndex, doCheck);\n        }\n    }\n    /**\n     *\n     * Loops through the directives on the provided `tNode` and queues hooks to be\n     * run that are not initialization hooks.\n     *\n     * Should be executed during `elementEnd()` and similar to\n     * preserve hook execution order. Content, view, and destroy hooks for projected\n     * components and directives must be called *before* their hosts.\n     *\n     * Sets up the content, view, and destroy hooks on the provided `tView`,\n     * see {@link HookData} for details about the data structure.\n     *\n     * NOTE: This does not set up `onChanges`, `onInit` or `doCheck`, those are set up\n     * separately at `elementStart`.\n     *\n     * @param tView The current TView\n     * @param tNode The TNode whose directives are to be searched for hooks to queue\n     */\n    function registerPostOrderHooks(tView, tNode) {\n        if (tView.firstTemplatePass) {\n            // It's necessary to loop through the directives at elementEnd() (rather than processing in\n            // directiveCreate) so we can preserve the current hook order. Content, view, and destroy\n            // hooks for projected components and directives must be called *before* their hosts.\n            for (var i = tNode.directiveStart, end = tNode.directiveEnd; i < end; i++) {\n                var directiveDef = tView.data[i];\n                if (directiveDef.afterContentInit) {\n                    (tView.contentHooks || (tView.contentHooks = [])).push(-i, directiveDef.afterContentInit);\n                }\n                if (directiveDef.afterContentChecked) {\n                    (tView.contentHooks || (tView.contentHooks = [])).push(i, directiveDef.afterContentChecked);\n                    (tView.contentCheckHooks || (tView.contentCheckHooks = [])).push(i, directiveDef.afterContentChecked);\n                }\n                if (directiveDef.afterViewInit) {\n                    (tView.viewHooks || (tView.viewHooks = [])).push(-i, directiveDef.afterViewInit);\n                }\n                if (directiveDef.afterViewChecked) {\n                    (tView.viewHooks || (tView.viewHooks = [])).push(i, directiveDef.afterViewChecked);\n                    (tView.viewCheckHooks || (tView.viewCheckHooks = [])).push(i, directiveDef.afterViewChecked);\n                }\n                if (directiveDef.onDestroy != null) {\n                    (tView.destroyHooks || (tView.destroyHooks = [])).push(i, directiveDef.onDestroy);\n                }\n            }\n        }\n    }\n    /**\n     * Executing hooks requires complex logic as we need to deal with 2 constraints.\n     *\n     * 1. Init hooks (ngOnInit, ngAfterContentInit, ngAfterViewInit) must all be executed once and only\n     * once, across many change detection cycles. This must be true even if some hooks throw, or if\n     * some recursively trigger a change detection cycle.\n     * To solve that, it is required to track the state of the execution of these init hooks.\n     * This is done by storing and maintaining flags in the view: the {@link InitPhaseState},\n     * and the index within that phase. They can be seen as a cursor in the following structure:\n     * [[onInit1, onInit2], [afterContentInit1], [afterViewInit1, afterViewInit2, afterViewInit3]]\n     * They are are stored as flags in LView[FLAGS].\n     *\n     * 2. Pre-order hooks can be executed in batches, because of the select instruction.\n     * To be able to pause and resume their execution, we also need some state about the hook's array\n     * that is being processed:\n     * - the index of the next hook to be executed\n     * - the number of init hooks already found in the processed part of the  array\n     * They are are stored as flags in LView[PREORDER_HOOK_FLAGS].\n     */\n    /**\n     * Executes necessary hooks at the start of executing a template.\n     *\n     * Executes hooks that are to be run during the initialization of a directive such\n     * as `onChanges`, `onInit`, and `doCheck`.\n     *\n     * @param lView The current view\n     * @param tView Static data for the view containing the hooks to be executed\n     * @param checkNoChangesMode Whether or not we're in checkNoChanges mode.\n     * @param @param currentNodeIndex 2 cases depending the the value:\n     * - undefined: execute hooks only from the saved index until the end of the array (pre-order case,\n     * when flushing the remaining hooks)\n     * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n     * case, when executing select(number))\n     */\n    function executePreOrderHooks(currentView, tView, checkNoChangesMode, currentNodeIndex) {\n        if (!checkNoChangesMode) {\n            executeHooks(currentView, tView.preOrderHooks, tView.preOrderCheckHooks, checkNoChangesMode, 0 /* OnInitHooksToBeRun */, currentNodeIndex !== undefined ? currentNodeIndex : null);\n        }\n    }\n    /**\n     * Executes hooks against the given `LView` based off of whether or not\n     * This is the first pass.\n     *\n     * @param currentView The view instance data to run the hooks against\n     * @param firstPassHooks An array of hooks to run if we're in the first view pass\n     * @param checkHooks An Array of hooks to run if we're not in the first view pass.\n     * @param checkNoChangesMode Whether or not we're in no changes mode.\n     * @param initPhaseState the current state of the init phase\n     * @param currentNodeIndex 3 cases depending the the value:\n     * - undefined: all hooks from the array should be executed (post-order case)\n     * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\n     * flushing the remaining hooks)\n     * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n     * case, when executing select(number))\n     */\n    function executeHooks(currentView, firstPassHooks, checkHooks, checkNoChangesMode, initPhaseState, currentNodeIndex) {\n        if (checkNoChangesMode)\n            return;\n        var hooksToCall = (currentView[FLAGS] & 3 /* InitPhaseStateMask */) === initPhaseState ?\n            firstPassHooks :\n            checkHooks;\n        if (hooksToCall) {\n            callHooks(currentView, hooksToCall, initPhaseState, currentNodeIndex);\n        }\n        // The init phase state must be always checked here as it may have been recursively updated\n        if (currentNodeIndex == null &&\n            (currentView[FLAGS] & 3 /* InitPhaseStateMask */) === initPhaseState &&\n            initPhaseState !== 3 /* InitPhaseCompleted */) {\n            currentView[FLAGS] &= 1023 /* IndexWithinInitPhaseReset */;\n            currentView[FLAGS] += 1 /* InitPhaseStateIncrementer */;\n        }\n    }\n    /**\n     * Calls lifecycle hooks with their contexts, skipping init hooks if it's not\n     * the first LView pass\n     *\n     * @param currentView The current view\n     * @param arr The array in which the hooks are found\n     * @param initPhaseState the current state of the init phase\n     * @param currentNodeIndex 3 cases depending the the value:\n     * - undefined: all hooks from the array should be executed (post-order case)\n     * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\n     * flushing the remaining hooks)\n     * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n     * case, when executing select(number))\n     */\n    function callHooks(currentView, arr, initPhase, currentNodeIndex) {\n        var startIndex = currentNodeIndex !== undefined ?\n            (currentView[PREORDER_HOOK_FLAGS] & 65535 /* IndexOfTheNextPreOrderHookMaskMask */) :\n            0;\n        var nodeIndexLimit = currentNodeIndex != null ? currentNodeIndex : -1;\n        var lastNodeIndexFound = 0;\n        for (var i = startIndex; i < arr.length; i++) {\n            var hook = arr[i + 1];\n            if (typeof hook === 'number') {\n                lastNodeIndexFound = arr[i];\n                if (currentNodeIndex != null && lastNodeIndexFound >= currentNodeIndex) {\n                    break;\n                }\n            }\n            else {\n                var isInitHook = arr[i] < 0;\n                if (isInitHook)\n                    currentView[PREORDER_HOOK_FLAGS] += 65536 /* NumberOfInitHooksCalledIncrementer */;\n                if (lastNodeIndexFound < nodeIndexLimit || nodeIndexLimit == -1) {\n                    callHook(currentView, initPhase, arr, i);\n                    currentView[PREORDER_HOOK_FLAGS] =\n                        (currentView[PREORDER_HOOK_FLAGS] & 4294901760 /* NumberOfInitHooksCalledMask */) + i +\n                            2;\n                }\n                i++;\n            }\n        }\n    }\n    /**\n     * Execute one hook against the current `LView`.\n     *\n     * @param currentView The current view\n     * @param initPhaseState the current state of the init phase\n     * @param arr The array in which the hooks are found\n     * @param i The current index within the hook data array\n     */\n    function callHook(currentView, initPhase, arr, i) {\n        var isInitHook = arr[i] < 0;\n        var hook = arr[i + 1];\n        var directiveIndex = isInitHook ? -arr[i] : arr[i];\n        var directive = currentView[directiveIndex];\n        if (isInitHook) {\n            var indexWithintInitPhase = currentView[FLAGS] >> 10 /* IndexWithinInitPhaseShift */;\n            // The init phase state must be always checked here as it may have been recursively\n            // updated\n            if (indexWithintInitPhase <\n                (currentView[PREORDER_HOOK_FLAGS] >> 16 /* NumberOfInitHooksCalledShift */) &&\n                (currentView[FLAGS] & 3 /* InitPhaseStateMask */) === initPhase) {\n                currentView[FLAGS] += 1024 /* IndexWithinInitPhaseIncrementer */;\n                hook.call(directive);\n            }\n        }\n        else {\n            hook.call(directive);\n        }\n    }\n\n    var stylingContext = null;\n    /**\n     * Gets the most recent styling context value.\n     *\n     * Note that only one styling context is stored at a given time.\n     */\n    function getCachedStylingContext() {\n        return stylingContext;\n    }\n    /**\n     * Sets the most recent styling context value.\n     *\n     * Note that only one styling context is stored at a given time.\n     *\n     * @param context The styling context value that will be stored\n     */\n    function setCachedStylingContext(context) {\n        stylingContext = context;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Store the element depth count. This is used to identify the root elements of the template\n     * so that we can than attach `LView` to only those elements.\n     */\n    var elementDepthCount;\n    function getElementDepthCount() {\n        // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n        return elementDepthCount;\n    }\n    function increaseElementDepthCount() {\n        elementDepthCount++;\n    }\n    function decreaseElementDepthCount() {\n        elementDepthCount--;\n    }\n    var currentDirectiveDef = null;\n    function getCurrentDirectiveDef() {\n        // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n        return currentDirectiveDef;\n    }\n    function setCurrentDirectiveDef(def) {\n        currentDirectiveDef = def;\n    }\n    /**\n     * Stores whether directives should be matched to elements.\n     *\n     * When template contains `ngNonBindable` than we need to prevent the runtime form matching\n     * directives on children of that element.\n     *\n     * Example:\n     * ```\n     * <my-comp my-directive>\n     *   Should match component / directive.\n     * </my-comp>\n     * <div ngNonBindable>\n     *   <my-comp my-directive>\n     *     Should not match component / directive because we are in ngNonBindable.\n     *   </my-comp>\n     * </div>\n     * ```\n     */\n    var bindingsEnabled;\n    function getBindingsEnabled() {\n        // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n        return bindingsEnabled;\n    }\n    /**\n     * Enables directive matching on elements.\n     *\n     *  * Example:\n     * ```\n     * <my-comp my-directive>\n     *   Should match component / directive.\n     * </my-comp>\n     * <div ngNonBindable>\n     *   <!-- ɵɵdisableBindings() -->\n     *   <my-comp my-directive>\n     *     Should not match component / directive because we are in ngNonBindable.\n     *   </my-comp>\n     *   <!-- ɵɵenableBindings() -->\n     * </div>\n     * ```\n     *\n     * @codeGenApi\n     */\n    function ɵɵenableBindings() {\n        bindingsEnabled = true;\n    }\n    /**\n     * Disables directive matching on element.\n     *\n     *  * Example:\n     * ```\n     * <my-comp my-directive>\n     *   Should match component / directive.\n     * </my-comp>\n     * <div ngNonBindable>\n     *   <!-- ɵɵdisableBindings() -->\n     *   <my-comp my-directive>\n     *     Should not match component / directive because we are in ngNonBindable.\n     *   </my-comp>\n     *   <!-- ɵɵenableBindings() -->\n     * </div>\n     * ```\n     *\n     * @codeGenApi\n     */\n    function ɵɵdisableBindings() {\n        bindingsEnabled = false;\n    }\n    function getLView() {\n        return lView;\n    }\n    /**\n     * Used as the starting directive id value.\n     *\n     * All subsequent directives are incremented from this value onwards.\n     * The reason why this value is `1` instead of `0` is because the `0`\n     * value is reserved for the template.\n     */\n    var MIN_DIRECTIVE_ID = 1;\n    var activeDirectiveId = MIN_DIRECTIVE_ID;\n    /**\n     * Position depth (with respect from leaf to root) in a directive sub-class inheritance chain.\n     */\n    var activeDirectiveSuperClassDepthPosition = 0;\n    /**\n     * Total count of how many directives are a part of an inheritance chain.\n     *\n     * When directives are sub-classed (extended) from one to another, Angular\n     * needs to keep track of exactly how many were encountered so it can accurately\n     * generate the next directive id (once the next directive id is visited).\n     * Normally the next directive id just a single incremented value from the\n     * previous one, however, if the previous directive is a part of an inheritance\n     * chain (a series of sub-classed directives) then the incremented value must\n     * also take into account the total amount of sub-classed values.\n     *\n     * Note that this value resets back to zero once the next directive is\n     * visited (when `incrementActiveDirectiveId` or `setActiveHostElement`\n     * is called).\n     */\n    var activeDirectiveSuperClassHeight = 0;\n    /**\n     * Sets the active directive host element and resets the directive id value\n     * (when the provided elementIndex value has changed).\n     *\n     * @param elementIndex the element index value for the host element where\n     *                     the directive/component instance lives\n     */\n    function setActiveHostElement(elementIndex) {\n        if (elementIndex === void 0) { elementIndex = null; }\n        if (_selectedIndex !== elementIndex) {\n            setSelectedIndex(elementIndex == null ? -1 : elementIndex);\n            activeDirectiveId = elementIndex == null ? 0 : MIN_DIRECTIVE_ID;\n            activeDirectiveSuperClassDepthPosition = 0;\n            activeDirectiveSuperClassHeight = 0;\n        }\n    }\n    /**\n     * Returns the current id value of the current directive.\n     *\n     * For example we have an element that has two directives on it:\n     * <div dir-one dir-two></div>\n     *\n     * dirOne->hostBindings() (id == 1)\n     * dirTwo->hostBindings() (id == 2)\n     *\n     * Note that this is only active when `hostBinding` functions are being processed.\n     *\n     * Note that directive id values are specific to an element (this means that\n     * the same id value could be present on another element with a completely\n     * different set of directives).\n     */\n    function getActiveDirectiveId() {\n        return activeDirectiveId;\n    }\n    /**\n     * Increments the current directive id value.\n     *\n     * For example we have an element that has two directives on it:\n     * <div dir-one dir-two></div>\n     *\n     * dirOne->hostBindings() (index = 1)\n     * // increment\n     * dirTwo->hostBindings() (index = 2)\n     *\n     * Depending on whether or not a previous directive had any inherited\n     * directives present, that value will be incremented in addition\n     * to the id jumping up by one.\n     *\n     * Note that this is only active when `hostBinding` functions are being processed.\n     *\n     * Note that directive id values are specific to an element (this means that\n     * the same id value could be present on another element with a completely\n     * different set of directives).\n     */\n    function incrementActiveDirectiveId() {\n        activeDirectiveId += 1 + activeDirectiveSuperClassHeight;\n        // because we are dealing with a new directive this\n        // means we have exited out of the inheritance chain\n        activeDirectiveSuperClassDepthPosition = 0;\n        activeDirectiveSuperClassHeight = 0;\n    }\n    /**\n     * Set the current super class (reverse inheritance) position depth for a directive.\n     *\n     * For example we have two directives: Child and Other (but Child is a sub-class of Parent)\n     * <div child-dir other-dir></div>\n     *\n     * // increment\n     * parentInstance->hostBindings() (depth = 1)\n     * // decrement\n     * childInstance->hostBindings() (depth = 0)\n     * otherInstance->hostBindings() (depth = 0 b/c it's a different directive)\n     *\n     * Note that this is only active when `hostBinding` functions are being processed.\n     */\n    function adjustActiveDirectiveSuperClassDepthPosition(delta) {\n        activeDirectiveSuperClassDepthPosition += delta;\n        // we keep track of the height value so that when the next directive is visited\n        // then Angular knows to generate a new directive id value which has taken into\n        // account how many sub-class directives were a part of the previous directive.\n        activeDirectiveSuperClassHeight =\n            Math.max(activeDirectiveSuperClassHeight, activeDirectiveSuperClassDepthPosition);\n    }\n    /**\n     * Returns he current depth of the super/sub class inheritance chain.\n     *\n     * This will return how many inherited directive/component classes\n     * exist in the current chain.\n     *\n     * ```typescript\n     * @Directive({ selector: '[super-dir]' })\n     * class SuperDir {}\n     *\n     * @Directive({ selector: '[sub-dir]' })\n     * class SubDir extends SuperDir {}\n     *\n     * // if `<div sub-dir>` is used then the super class height is `1`\n     * // if `<div super-dir>` is used then the super class height is `0`\n     * ```\n     */\n    function getActiveDirectiveSuperClassHeight() {\n        return activeDirectiveSuperClassHeight;\n    }\n    /**\n     * Returns the current super class (reverse inheritance) depth for a directive.\n     *\n     * This is designed to help instruction code distinguish different hostBindings\n     * calls from each other when a directive has extended from another directive.\n     * Normally using the directive id value is enough, but with the case\n     * of parent/sub-class directive inheritance more information is required.\n     *\n     * Note that this is only active when `hostBinding` functions are being processed.\n     */\n    function getActiveDirectiveSuperClassDepth() {\n        return activeDirectiveSuperClassDepthPosition;\n    }\n    /**\n     * Restores `contextViewData` to the given OpaqueViewState instance.\n     *\n     * Used in conjunction with the getCurrentView() instruction to save a snapshot\n     * of the current view and restore it when listeners are invoked. This allows\n     * walking the declaration view tree in listeners to get vars from parent views.\n     *\n     * @param viewToRestore The OpaqueViewState instance to restore.\n     *\n     * @codeGenApi\n     */\n    function ɵɵrestoreView(viewToRestore) {\n        contextLView = viewToRestore;\n    }\n    /** Used to set the parent property when nodes are created and track query results. */\n    var previousOrParentTNode;\n    function getPreviousOrParentTNode() {\n        // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n        return previousOrParentTNode;\n    }\n    function setPreviousOrParentTNode(tNode, _isParent) {\n        previousOrParentTNode = tNode;\n        isParent = _isParent;\n    }\n    function setTNodeAndViewData(tNode, view) {\n        ngDevMode && assertLViewOrUndefined(view);\n        previousOrParentTNode = tNode;\n        lView = view;\n    }\n    /**\n     * If `isParent` is:\n     *  - `true`: then `previousOrParentTNode` points to a parent node.\n     *  - `false`: then `previousOrParentTNode` points to previous node (sibling).\n     */\n    var isParent;\n    function getIsParent() {\n        // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n        return isParent;\n    }\n    function setIsNotParent() {\n        isParent = false;\n    }\n    function setIsParent() {\n        isParent = true;\n    }\n    /** Checks whether a given view is in creation mode */\n    function isCreationMode(view) {\n        if (view === void 0) { view = lView; }\n        return (view[FLAGS] & 4 /* CreationMode */) === 4 /* CreationMode */;\n    }\n    /**\n     * State of the current view being processed.\n     *\n     * An array of nodes (text, element, container, etc), pipes, their bindings, and\n     * any local variables that need to be stored between invocations.\n     */\n    var lView;\n    /**\n     * The last viewData retrieved by nextContext().\n     * Allows building nextContext() and reference() calls.\n     *\n     * e.g. const inner = x().$implicit; const outer = x().$implicit;\n     */\n    var contextLView = null;\n    function getContextLView() {\n        // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n        return contextLView;\n    }\n    /**\n     * In this mode, any changes in bindings will throw an ExpressionChangedAfterChecked error.\n     *\n     * Necessary to support ChangeDetectorRef.checkNoChanges().\n     */\n    var checkNoChangesMode = false;\n    function getCheckNoChangesMode() {\n        // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n        return checkNoChangesMode;\n    }\n    function setCheckNoChangesMode(mode) {\n        checkNoChangesMode = mode;\n    }\n    /**\n     * The root index from which pure function instructions should calculate their binding\n     * indices. In component views, this is TView.bindingStartIndex. In a host binding\n     * context, this is the TView.expandoStartIndex + any dirs/hostVars before the given dir.\n     */\n    var bindingRootIndex = -1;\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    function getBindingRoot() {\n        return bindingRootIndex;\n    }\n    function setBindingRoot(value) {\n        bindingRootIndex = value;\n    }\n    /**\n     * Current index of a View or Content Query which needs to be processed next.\n     * We iterate over the list of Queries and increment current query index at every step.\n     */\n    var currentQueryIndex = 0;\n    function getCurrentQueryIndex() {\n        // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n        return currentQueryIndex;\n    }\n    function setCurrentQueryIndex(value) {\n        currentQueryIndex = value;\n    }\n    /**\n     * Swap the current state with a new state.\n     *\n     * For performance reasons we store the state in the top level of the module.\n     * This way we minimize the number of properties to read. Whenever a new view\n     * is entered we have to store the state for later, and when the view is\n     * exited the state has to be restored\n     *\n     * @param newView New state to become active\n     * @param host Element to which the View is a child of\n     * @returns the previous state;\n     */\n    function enterView(newView, hostTNode) {\n        ngDevMode && assertLViewOrUndefined(newView);\n        var oldView = lView;\n        if (newView) {\n            var tView = newView[TVIEW];\n            bindingRootIndex = tView.bindingStartIndex;\n        }\n        previousOrParentTNode = hostTNode;\n        isParent = true;\n        lView = contextLView = newView;\n        return oldView;\n    }\n    function nextContextImpl(level) {\n        if (level === void 0) { level = 1; }\n        contextLView = walkUpViews(level, contextLView);\n        return contextLView[CONTEXT];\n    }\n    function walkUpViews(nestingLevel, currentView) {\n        while (nestingLevel > 0) {\n            ngDevMode && assertDefined(currentView[DECLARATION_VIEW], 'Declaration view should be defined if nesting level is greater than 0.');\n            currentView = currentView[DECLARATION_VIEW];\n            nestingLevel--;\n        }\n        return currentView;\n    }\n    /**\n     * Resets the application state.\n     */\n    function resetComponentState() {\n        isParent = false;\n        previousOrParentTNode = null;\n        elementDepthCount = 0;\n        bindingsEnabled = true;\n    }\n    /**\n     * Used in lieu of enterView to make it clear when we are exiting a child view. This makes\n     * the direction of traversal (up or down the view tree) a bit clearer.\n     *\n     * @param newView New state to become active\n     * @param safeToRunHooks Whether the runtime is in a state where running lifecycle hooks is valid.\n     * This is not always the case (for example, the application may have crashed and `leaveView` is\n     * being executed while unwinding the call stack).\n     */\n    function leaveView(newView, safeToRunHooks) {\n        var tView = lView[TVIEW];\n        if (isCreationMode(lView)) {\n            lView[FLAGS] &= ~4 /* CreationMode */;\n        }\n        else {\n            try {\n                resetPreOrderHookFlags(lView);\n                safeToRunHooks && executeHooks(lView, tView.viewHooks, tView.viewCheckHooks, checkNoChangesMode, 2 /* AfterViewInitHooksToBeRun */, undefined);\n            }\n            finally {\n                // Views are clean and in update mode after being checked, so these bits are cleared\n                lView[FLAGS] &= ~(64 /* Dirty */ | 8 /* FirstLViewPass */);\n                lView[BINDING_INDEX] = tView.bindingStartIndex;\n            }\n        }\n        setCachedStylingContext(null);\n        enterView(newView, null);\n    }\n    var _selectedIndex = -1;\n    /**\n     * Gets the most recent index passed to {@link select}\n     *\n     * Used with {@link property} instruction (and more in the future) to identify the index in the\n     * current `LView` to act on.\n     */\n    function getSelectedIndex() {\n        return _selectedIndex;\n    }\n    /**\n     * Sets the most recent index passed to {@link select}\n     *\n     * Used with {@link property} instruction (and more in the future) to identify the index in the\n     * current `LView` to act on.\n     */\n    function setSelectedIndex(index) {\n        _selectedIndex = index;\n        // remove the styling context from the cache\n        // because we are now on a different element\n        setCachedStylingContext(null);\n    }\n    var _currentNamespace = null;\n    /**\n     * Sets the namespace used to create elements to `'http://www.w3.org/2000/svg'` in global state.\n     *\n     * @codeGenApi\n     */\n    function ɵɵnamespaceSVG() {\n        _currentNamespace = 'http://www.w3.org/2000/svg';\n    }\n    /**\n     * Sets the namespace used to create elements to `'http://www.w3.org/1998/MathML/'` in global state.\n     *\n     * @codeGenApi\n     */\n    function ɵɵnamespaceMathML() {\n        _currentNamespace = 'http://www.w3.org/1998/MathML/';\n    }\n    /**\n     * Sets the namespace used to create elements to `null`, which forces element creation to use\n     * `createElement` rather than `createElementNS`.\n     *\n     * @codeGenApi\n     */\n    function ɵɵnamespaceHTML() {\n        namespaceHTMLInternal();\n    }\n    /**\n     * Sets the namespace used to create elements to `null`, which forces element creation to use\n     * `createElement` rather than `createElementNS`.\n     */\n    function namespaceHTMLInternal() {\n        _currentNamespace = null;\n    }\n    function getNamespace() {\n        return _currentNamespace;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var BRAND = '__SANITIZER_TRUSTED_BRAND__';\n    function allowSanitizationBypass(value, type) {\n        return (value instanceof String && value[BRAND] === type);\n    }\n    /**\n     * Mark `html` string as trusted.\n     *\n     * This function wraps the trusted string in `String` and brands it in a way which makes it\n     * recognizable to {@link htmlSanitizer} to be trusted implicitly.\n     *\n     * @param trustedHtml `html` string which needs to be implicitly trusted.\n     * @returns a `html` `String` which has been branded to be implicitly trusted.\n     */\n    function bypassSanitizationTrustHtml(trustedHtml) {\n        return bypassSanitizationTrustString(trustedHtml, \"Html\" /* Html */);\n    }\n    /**\n     * Mark `style` string as trusted.\n     *\n     * This function wraps the trusted string in `String` and brands it in a way which makes it\n     * recognizable to {@link styleSanitizer} to be trusted implicitly.\n     *\n     * @param trustedStyle `style` string which needs to be implicitly trusted.\n     * @returns a `style` `String` which has been branded to be implicitly trusted.\n     */\n    function bypassSanitizationTrustStyle(trustedStyle) {\n        return bypassSanitizationTrustString(trustedStyle, \"Style\" /* Style */);\n    }\n    /**\n     * Mark `script` string as trusted.\n     *\n     * This function wraps the trusted string in `String` and brands it in a way which makes it\n     * recognizable to {@link scriptSanitizer} to be trusted implicitly.\n     *\n     * @param trustedScript `script` string which needs to be implicitly trusted.\n     * @returns a `script` `String` which has been branded to be implicitly trusted.\n     */\n    function bypassSanitizationTrustScript(trustedScript) {\n        return bypassSanitizationTrustString(trustedScript, \"Script\" /* Script */);\n    }\n    /**\n     * Mark `url` string as trusted.\n     *\n     * This function wraps the trusted string in `String` and brands it in a way which makes it\n     * recognizable to {@link urlSanitizer} to be trusted implicitly.\n     *\n     * @param trustedUrl `url` string which needs to be implicitly trusted.\n     * @returns a `url` `String` which has been branded to be implicitly trusted.\n     */\n    function bypassSanitizationTrustUrl(trustedUrl) {\n        return bypassSanitizationTrustString(trustedUrl, \"Url\" /* Url */);\n    }\n    /**\n     * Mark `url` string as trusted.\n     *\n     * This function wraps the trusted string in `String` and brands it in a way which makes it\n     * recognizable to {@link resourceUrlSanitizer} to be trusted implicitly.\n     *\n     * @param trustedResourceUrl `url` string which needs to be implicitly trusted.\n     * @returns a `url` `String` which has been branded to be implicitly trusted.\n     */\n    function bypassSanitizationTrustResourceUrl(trustedResourceUrl) {\n        return bypassSanitizationTrustString(trustedResourceUrl, \"ResourceUrl\" /* ResourceUrl */);\n    }\n    function bypassSanitizationTrustString(trustedString, mode) {\n        var trusted = new String(trustedString);\n        trusted[BRAND] = mode;\n        return trusted;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * This file is used to control if the default rendering pipeline should be `ViewEngine` or `Ivy`.\n     *\n     * For more information on how to run and debug tests with either Ivy or View Engine (legacy),\n     * please see [BAZEL.md](./docs/BAZEL.md).\n     */\n    var _devMode = true;\n    var _runModeLocked = false;\n    /**\n     * Returns whether Angular is in development mode. After called once,\n     * the value is locked and won't change any more.\n     *\n     * By default, this is true, unless a user calls `enableProdMode` before calling this.\n     *\n     * @publicApi\n     */\n    function isDevMode() {\n        _runModeLocked = true;\n        return _devMode;\n    }\n    /**\n     * Disable Angular's development mode, which turns off assertions and other\n     * checks within the framework.\n     *\n     * One important assertion this disables verifies that a change detection pass\n     * does not result in additional changes to any bindings (also known as\n     * unidirectional data flow).\n     *\n     * @publicApi\n     */\n    function enableProdMode() {\n        if (_runModeLocked) {\n            throw new Error('Cannot enable prod mode after platform setup.');\n        }\n        _devMode = false;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * This helper class is used to get hold of an inert tree of DOM elements containing dirty HTML\n     * that needs sanitizing.\n     * Depending upon browser support we must use one of three strategies for doing this.\n     * Support: Safari 10.x -> XHR strategy\n     * Support: Firefox -> DomParser strategy\n     * Default: InertDocument strategy\n     */\n    var InertBodyHelper = /** @class */ (function () {\n        function InertBodyHelper(defaultDoc) {\n            this.defaultDoc = defaultDoc;\n            this.inertDocument = this.defaultDoc.implementation.createHTMLDocument('sanitization-inert');\n            this.inertBodyElement = this.inertDocument.body;\n            if (this.inertBodyElement == null) {\n                // usually there should be only one body element in the document, but IE doesn't have any, so\n                // we need to create one.\n                var inertHtml = this.inertDocument.createElement('html');\n                this.inertDocument.appendChild(inertHtml);\n                this.inertBodyElement = this.inertDocument.createElement('body');\n                inertHtml.appendChild(this.inertBodyElement);\n            }\n            this.inertBodyElement.innerHTML = '<svg><g onload=\"this.parentNode.remove()\"></g></svg>';\n            if (this.inertBodyElement.querySelector && !this.inertBodyElement.querySelector('svg')) {\n                // We just hit the Safari 10.1 bug - which allows JS to run inside the SVG G element\n                // so use the XHR strategy.\n                this.getInertBodyElement = this.getInertBodyElement_XHR;\n                return;\n            }\n            this.inertBodyElement.innerHTML =\n                '<svg><p><style><img src=\"</style><img src=x onerror=alert(1)//\">';\n            if (this.inertBodyElement.querySelector && this.inertBodyElement.querySelector('svg img')) {\n                // We just hit the Firefox bug - which prevents the inner img JS from being sanitized\n                // so use the DOMParser strategy, if it is available.\n                // If the DOMParser is not available then we are not in Firefox (Server/WebWorker?) so we\n                // fall through to the default strategy below.\n                if (isDOMParserAvailable()) {\n                    this.getInertBodyElement = this.getInertBodyElement_DOMParser;\n                    return;\n                }\n            }\n            // None of the bugs were hit so it is safe for us to use the default InertDocument strategy\n            this.getInertBodyElement = this.getInertBodyElement_InertDocument;\n        }\n        /**\n         * Use XHR to create and fill an inert body element (on Safari 10.1)\n         * See\n         * https://github.com/cure53/DOMPurify/blob/a992d3a75031cb8bb032e5ea8399ba972bdf9a65/src/purify.js#L439-L449\n         */\n        InertBodyHelper.prototype.getInertBodyElement_XHR = function (html) {\n            // We add these extra elements to ensure that the rest of the content is parsed as expected\n            // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\n            // `<head>` tag.\n            html = '<body><remove></remove>' + html + '</body>';\n            try {\n                html = encodeURI(html);\n            }\n            catch (_a) {\n                return null;\n            }\n            var xhr = new XMLHttpRequest();\n            xhr.responseType = 'document';\n            xhr.open('GET', 'data:text/html;charset=utf-8,' + html, false);\n            xhr.send(undefined);\n            var body = xhr.response.body;\n            body.removeChild(body.firstChild);\n            return body;\n        };\n        /**\n         * Use DOMParser to create and fill an inert body element (on Firefox)\n         * See https://github.com/cure53/DOMPurify/releases/tag/0.6.7\n         *\n         */\n        InertBodyHelper.prototype.getInertBodyElement_DOMParser = function (html) {\n            // We add these extra elements to ensure that the rest of the content is parsed as expected\n            // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\n            // `<head>` tag.\n            html = '<body><remove></remove>' + html + '</body>';\n            try {\n                var body = new window\n                    .DOMParser()\n                    .parseFromString(html, 'text/html')\n                    .body;\n                body.removeChild(body.firstChild);\n                return body;\n            }\n            catch (_a) {\n                return null;\n            }\n        };\n        /**\n         * Use an HTML5 `template` element, if supported, or an inert body element created via\n         * `createHtmlDocument` to create and fill an inert DOM element.\n         * This is the default sane strategy to use if the browser does not require one of the specialised\n         * strategies above.\n         */\n        InertBodyHelper.prototype.getInertBodyElement_InertDocument = function (html) {\n            // Prefer using <template> element if supported.\n            var templateEl = this.inertDocument.createElement('template');\n            if ('content' in templateEl) {\n                templateEl.innerHTML = html;\n                return templateEl;\n            }\n            this.inertBodyElement.innerHTML = html;\n            // Support: IE 9-11 only\n            // strip custom-namespaced attributes on IE<=11\n            if (this.defaultDoc.documentMode) {\n                this.stripCustomNsAttrs(this.inertBodyElement);\n            }\n            return this.inertBodyElement;\n        };\n        /**\n         * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'\n         * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g.\n         * 'ns1:xlink:foo').\n         *\n         * This is undesirable since we don't want to allow any of these custom attributes. This method\n         * strips them all.\n         */\n        InertBodyHelper.prototype.stripCustomNsAttrs = function (el) {\n            var elAttrs = el.attributes;\n            // loop backwards so that we can support removals.\n            for (var i = elAttrs.length - 1; 0 < i; i--) {\n                var attrib = elAttrs.item(i);\n                var attrName = attrib.name;\n                if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {\n                    el.removeAttribute(attrName);\n                }\n            }\n            var childNode = el.firstChild;\n            while (childNode) {\n                if (childNode.nodeType === Node.ELEMENT_NODE)\n                    this.stripCustomNsAttrs(childNode);\n                childNode = childNode.nextSibling;\n            }\n        };\n        return InertBodyHelper;\n    }());\n    /**\n     * We need to determine whether the DOMParser exists in the global context.\n     * The try-catch is because, on some browsers, trying to access this property\n     * on window can actually throw an error.\n     *\n     * @suppress {uselessCode}\n     */\n    function isDOMParserAvailable() {\n        try {\n            return !!window.DOMParser;\n        }\n        catch (_a) {\n            return false;\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A pattern that recognizes a commonly useful subset of URLs that are safe.\n     *\n     * This regular expression matches a subset of URLs that will not cause script\n     * execution if used in URL context within a HTML document. Specifically, this\n     * regular expression matches if (comment from here on and regex copied from\n     * Soy's EscapingConventions):\n     * (1) Either an allowed protocol (http, https, mailto or ftp).\n     * (2) or no protocol.  A protocol must be followed by a colon. The below\n     *     allows that by allowing colons only after one of the characters [/?#].\n     *     A colon after a hash (#) must be in the fragment.\n     *     Otherwise, a colon after a (?) must be in a query.\n     *     Otherwise, a colon after a single solidus (/) must be in a path.\n     *     Otherwise, a colon after a double solidus (//) must be in the authority\n     *     (before port).\n     *\n     * The pattern disallows &, used in HTML entity declarations before\n     * one of the characters in [/?#]. This disallows HTML entities used in the\n     * protocol name, which should never happen, e.g. \"h&#116;tp\" for \"http\".\n     * It also disallows HTML entities in the first path part of a relative path,\n     * e.g. \"foo&lt;bar/baz\".  Our existing escaping functions should not produce\n     * that. More importantly, it disallows masking of a colon,\n     * e.g. \"javascript&#58;...\".\n     *\n     * This regular expression was taken from the Closure sanitization library.\n     */\n    var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;\n    /** A pattern that matches safe data URLs. Only matches image, video and audio types. */\n    var DATA_URL_PATTERN = /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\\/]+=*$/i;\n    function _sanitizeUrl(url) {\n        url = String(url);\n        if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN))\n            return url;\n        if (isDevMode()) {\n            console.warn(\"WARNING: sanitizing unsafe URL value \" + url + \" (see http://g.co/ng/security#xss)\");\n        }\n        return 'unsafe:' + url;\n    }\n    function sanitizeSrcset(srcset) {\n        srcset = String(srcset);\n        return srcset.split(',').map(function (srcset) { return _sanitizeUrl(srcset.trim()); }).join(', ');\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function tagSet(tags) {\n        var e_1, _a;\n        var res = {};\n        try {\n            for (var _b = __values(tags.split(',')), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var t = _c.value;\n                res[t] = true;\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return res;\n    }\n    function merge() {\n        var e_2, _a;\n        var sets = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            sets[_i] = arguments[_i];\n        }\n        var res = {};\n        try {\n            for (var sets_1 = __values(sets), sets_1_1 = sets_1.next(); !sets_1_1.done; sets_1_1 = sets_1.next()) {\n                var s = sets_1_1.value;\n                for (var v in s) {\n                    if (s.hasOwnProperty(v))\n                        res[v] = true;\n                }\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (sets_1_1 && !sets_1_1.done && (_a = sets_1.return)) _a.call(sets_1);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n        return res;\n    }\n    // Good source of info about elements and attributes\n    // http://dev.w3.org/html5/spec/Overview.html#semantics\n    // http://simon.html5.org/html-elements\n    // Safe Void Elements - HTML5\n    // http://dev.w3.org/html5/spec/Overview.html#void-elements\n    var VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');\n    // Elements that you can, intentionally, leave open (and which close themselves)\n    // http://dev.w3.org/html5/spec/Overview.html#optional-tags\n    var OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');\n    var OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');\n    var OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);\n    // Safe Block Elements - HTML5\n    var BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' +\n        'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +\n        'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));\n    // Inline Elements - HTML5\n    var INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' +\n        'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' +\n        'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));\n    var VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);\n    // Attributes that have href and hence need to be sanitized\n    var URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');\n    // Attributes that have special href set hence need to be sanitized\n    var SRCSET_ATTRS = tagSet('srcset');\n    var HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' +\n        'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' +\n        'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' +\n        'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' +\n        'valign,value,vspace,width');\n    // Accessibility attributes as per WAI-ARIA 1.1 (W3C Working Draft 14 December 2018)\n    var ARIA_ATTRS = tagSet('aria-activedescendant,aria-atomic,aria-autocomplete,aria-busy,aria-checked,aria-colcount,aria-colindex,' +\n        'aria-colspan,aria-controls,aria-current,aria-describedby,aria-details,aria-disabled,aria-dropeffect,' +\n        'aria-errormessage,aria-expanded,aria-flowto,aria-grabbed,aria-haspopup,aria-hidden,aria-invalid,' +\n        'aria-keyshortcuts,aria-label,aria-labelledby,aria-level,aria-live,aria-modal,aria-multiline,' +\n        'aria-multiselectable,aria-orientation,aria-owns,aria-placeholder,aria-posinset,aria-pressed,aria-readonly,' +\n        'aria-relevant,aria-required,aria-roledescription,aria-rowcount,aria-rowindex,aria-rowspan,aria-selected,' +\n        'aria-setsize,aria-sort,aria-valuemax,aria-valuemin,aria-valuenow,aria-valuetext');\n    // NB: This currently consciously doesn't support SVG. SVG sanitization has had several security\n    // issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via\n    // innerHTML is required, SVG attributes should be added here.\n    // NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those\n    // can be sanitized, but they increase security surface area without a legitimate use case, so they\n    // are left out here.\n    var VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS, ARIA_ATTRS);\n    // Elements whose content should not be traversed/preserved, if the elements themselves are invalid.\n    //\n    // Typically, `<invalid>Some content</invalid>` would traverse (and in this case preserve)\n    // `Some content`, but strip `invalid-element` opening/closing tags. For some elements, though, we\n    // don't want to preserve the content, if the elements themselves are going to be removed.\n    var SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS = tagSet('script,style,template');\n    /**\n     * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe\n     * attributes.\n     */\n    var SanitizingHtmlSerializer = /** @class */ (function () {\n        function SanitizingHtmlSerializer() {\n            // Explicitly track if something was stripped, to avoid accidentally warning of sanitization just\n            // because characters were re-encoded.\n            this.sanitizedSomething = false;\n            this.buf = [];\n        }\n        SanitizingHtmlSerializer.prototype.sanitizeChildren = function (el) {\n            // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.\n            // However this code never accesses properties off of `document` before deleting its contents\n            // again, so it shouldn't be vulnerable to DOM clobbering.\n            var current = el.firstChild;\n            var traverseContent = true;\n            while (current) {\n                if (current.nodeType === Node.ELEMENT_NODE) {\n                    traverseContent = this.startElement(current);\n                }\n                else if (current.nodeType === Node.TEXT_NODE) {\n                    this.chars(current.nodeValue);\n                }\n                else {\n                    // Strip non-element, non-text nodes.\n                    this.sanitizedSomething = true;\n                }\n                if (traverseContent && current.firstChild) {\n                    current = current.firstChild;\n                    continue;\n                }\n                while (current) {\n                    // Leaving the element. Walk up and to the right, closing tags as we go.\n                    if (current.nodeType === Node.ELEMENT_NODE) {\n                        this.endElement(current);\n                    }\n                    var next = this.checkClobberedElement(current, current.nextSibling);\n                    if (next) {\n                        current = next;\n                        break;\n                    }\n                    current = this.checkClobberedElement(current, current.parentNode);\n                }\n            }\n            return this.buf.join('');\n        };\n        /**\n         * Sanitizes an opening element tag (if valid) and returns whether the element's contents should\n         * be traversed. Element content must always be traversed (even if the element itself is not\n         * valid/safe), unless the element is one of `SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS`.\n         *\n         * @param element The element to sanitize.\n         * @return True if the element's contents should be traversed.\n         */\n        SanitizingHtmlSerializer.prototype.startElement = function (element) {\n            var tagName = element.nodeName.toLowerCase();\n            if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\n                this.sanitizedSomething = true;\n                return !SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS.hasOwnProperty(tagName);\n            }\n            this.buf.push('<');\n            this.buf.push(tagName);\n            var elAttrs = element.attributes;\n            for (var i = 0; i < elAttrs.length; i++) {\n                var elAttr = elAttrs.item(i);\n                var attrName = elAttr.name;\n                var lower = attrName.toLowerCase();\n                if (!VALID_ATTRS.hasOwnProperty(lower)) {\n                    this.sanitizedSomething = true;\n                    continue;\n                }\n                var value = elAttr.value;\n                // TODO(martinprobst): Special case image URIs for data:image/...\n                if (URI_ATTRS[lower])\n                    value = _sanitizeUrl(value);\n                if (SRCSET_ATTRS[lower])\n                    value = sanitizeSrcset(value);\n                this.buf.push(' ', attrName, '=\"', encodeEntities(value), '\"');\n            }\n            this.buf.push('>');\n            return true;\n        };\n        SanitizingHtmlSerializer.prototype.endElement = function (current) {\n            var tagName = current.nodeName.toLowerCase();\n            if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {\n                this.buf.push('</');\n                this.buf.push(tagName);\n                this.buf.push('>');\n            }\n        };\n        SanitizingHtmlSerializer.prototype.chars = function (chars) { this.buf.push(encodeEntities(chars)); };\n        SanitizingHtmlSerializer.prototype.checkClobberedElement = function (node, nextNode) {\n            if (nextNode &&\n                (node.compareDocumentPosition(nextNode) &\n                    Node.DOCUMENT_POSITION_CONTAINED_BY) === Node.DOCUMENT_POSITION_CONTAINED_BY) {\n                throw new Error(\"Failed to sanitize html because the element is clobbered: \" + node.outerHTML);\n            }\n            return nextNode;\n        };\n        return SanitizingHtmlSerializer;\n    }());\n    // Regular Expressions for parsing tags and attributes\n    var SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n    // ! to ~ is the ASCII range.\n    var NON_ALPHANUMERIC_REGEXP = /([^\\#-~ |!])/g;\n    /**\n     * Escapes all potentially dangerous characters, so that the\n     * resulting string can be safely inserted into attribute or\n     * element text.\n     * @param value\n     */\n    function encodeEntities(value) {\n        return value.replace(/&/g, '&amp;')\n            .replace(SURROGATE_PAIR_REGEXP, function (match) {\n            var hi = match.charCodeAt(0);\n            var low = match.charCodeAt(1);\n            return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';\n        })\n            .replace(NON_ALPHANUMERIC_REGEXP, function (match) { return '&#' + match.charCodeAt(0) + ';'; })\n            .replace(/</g, '&lt;')\n            .replace(/>/g, '&gt;');\n    }\n    var inertBodyHelper;\n    /**\n     * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to\n     * the DOM in a browser environment.\n     */\n    function _sanitizeHtml(defaultDoc, unsafeHtmlInput) {\n        var inertBodyElement = null;\n        try {\n            inertBodyHelper = inertBodyHelper || new InertBodyHelper(defaultDoc);\n            // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).\n            var unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';\n            inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n            // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser\n            // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.\n            var mXSSAttempts = 5;\n            var parsedHtml = unsafeHtml;\n            do {\n                if (mXSSAttempts === 0) {\n                    throw new Error('Failed to sanitize html because the input is unstable');\n                }\n                mXSSAttempts--;\n                unsafeHtml = parsedHtml;\n                parsedHtml = inertBodyElement.innerHTML;\n                inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n            } while (unsafeHtml !== parsedHtml);\n            var sanitizer = new SanitizingHtmlSerializer();\n            var safeHtml = sanitizer.sanitizeChildren(getTemplateContent(inertBodyElement) || inertBodyElement);\n            if (isDevMode() && sanitizer.sanitizedSomething) {\n                console.warn('WARNING: sanitizing HTML stripped some content, see http://g.co/ng/security#xss');\n            }\n            return safeHtml;\n        }\n        finally {\n            // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.\n            if (inertBodyElement) {\n                var parent_1 = getTemplateContent(inertBodyElement) || inertBodyElement;\n                while (parent_1.firstChild) {\n                    parent_1.removeChild(parent_1.firstChild);\n                }\n            }\n        }\n    }\n    function getTemplateContent(el) {\n        return 'content' in el /** Microsoft/TypeScript#21517 */ && isTemplateElement(el) ?\n            el.content :\n            null;\n    }\n    function isTemplateElement(el) {\n        return el.nodeType === Node.ELEMENT_NODE && el.nodeName === 'TEMPLATE';\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    (function (SecurityContext) {\n        SecurityContext[SecurityContext[\"NONE\"] = 0] = \"NONE\";\n        SecurityContext[SecurityContext[\"HTML\"] = 1] = \"HTML\";\n        SecurityContext[SecurityContext[\"STYLE\"] = 2] = \"STYLE\";\n        SecurityContext[SecurityContext[\"SCRIPT\"] = 3] = \"SCRIPT\";\n        SecurityContext[SecurityContext[\"URL\"] = 4] = \"URL\";\n        SecurityContext[SecurityContext[\"RESOURCE_URL\"] = 5] = \"RESOURCE_URL\";\n    })(exports.SecurityContext || (exports.SecurityContext = {}));\n    /**\n     * Sanitizer is used by the views to sanitize potentially dangerous values.\n     *\n     * @publicApi\n     */\n    var Sanitizer = /** @class */ (function () {\n        function Sanitizer() {\n        }\n        return Sanitizer;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Regular expression for safe style values.\n     *\n     * Quotes (\" and ') are allowed, but a check must be done elsewhere to ensure they're balanced.\n     *\n     * ',' allows multiple values to be assigned to the same property (e.g. background-attachment or\n     * font-family) and hence could allow multiple values to get injected, but that should pose no risk\n     * of XSS.\n     *\n     * The function expression checks only for XSS safety, not for CSS validity.\n     *\n     * This regular expression was taken from the Closure sanitization library, and augmented for\n     * transformation values.\n     */\n    var VALUES = '[-,.\"\\'%_!# a-zA-Z0-9]+';\n    var TRANSFORMATION_FNS = '(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|Z|3d)?';\n    var COLOR_FNS = '(?:rgb|hsl)a?';\n    var GRADIENTS = '(?:repeating-)?(?:linear|radial)-gradient';\n    var CSS3_FNS = '(?:calc|attr)';\n    var FN_ARGS = '\\\\([-0-9.%, #a-zA-Z]+\\\\)';\n    var SAFE_STYLE_VALUE = new RegExp(\"^(\" + VALUES + \"|\" +\n        (\"(?:\" + TRANSFORMATION_FNS + \"|\" + COLOR_FNS + \"|\" + GRADIENTS + \"|\" + CSS3_FNS + \")\") +\n        (FN_ARGS + \")$\"), 'g');\n    /**\n     * Matches a `url(...)` value with an arbitrary argument as long as it does\n     * not contain parentheses.\n     *\n     * The URL value still needs to be sanitized separately.\n     *\n     * `url(...)` values are a very common use case, e.g. for `background-image`. With carefully crafted\n     * CSS style rules, it is possible to construct an information leak with `url` values in CSS, e.g.\n     * by observing whether scroll bars are displayed, or character ranges used by a font face\n     * definition.\n     *\n     * Angular only allows binding CSS values (as opposed to entire CSS rules), so it is unlikely that\n     * binding a URL value without further cooperation from the page will cause an information leak, and\n     * if so, it is just a leak, not a full blown XSS vulnerability.\n     *\n     * Given the common use case, low likelihood of attack vector, and low impact of an attack, this\n     * code is permissive and allows URLs that sanitize otherwise.\n     */\n    var URL_RE = /^url\\(([^)]+)\\)$/;\n    /**\n     * Checks that quotes (\" and ') are properly balanced inside a string. Assumes\n     * that neither escape (\\) nor any other character that could result in\n     * breaking out of a string parsing context are allowed;\n     * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.\n     *\n     * This code was taken from the Closure sanitization library.\n     */\n    function hasBalancedQuotes(value) {\n        var outsideSingle = true;\n        var outsideDouble = true;\n        for (var i = 0; i < value.length; i++) {\n            var c = value.charAt(i);\n            if (c === '\\'' && outsideDouble) {\n                outsideSingle = !outsideSingle;\n            }\n            else if (c === '\"' && outsideSingle) {\n                outsideDouble = !outsideDouble;\n            }\n        }\n        return outsideSingle && outsideDouble;\n    }\n    /**\n     * Sanitizes the given untrusted CSS style property value (i.e. not an entire object, just a single\n     * value) and returns a value that is safe to use in a browser environment.\n     */\n    function _sanitizeStyle(value) {\n        value = String(value).trim(); // Make sure it's actually a string.\n        if (!value)\n            return '';\n        // Single url(...) values are supported, but only for URLs that sanitize cleanly. See above for\n        // reasoning behind this.\n        var urlMatch = value.match(URL_RE);\n        if ((urlMatch && _sanitizeUrl(urlMatch[1]) === urlMatch[1]) ||\n            value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {\n            return value; // Safe style values.\n        }\n        if (isDevMode()) {\n            console.warn(\"WARNING: sanitizing unsafe style value \" + value + \" (see http://g.co/ng/security#xss).\");\n        }\n        return 'unsafe';\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * An `html` sanitizer which converts untrusted `html` **string** into trusted string by removing\n     * dangerous content.\n     *\n     * This method parses the `html` and locates potentially dangerous content (such as urls and\n     * javascript) and removes it.\n     *\n     * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustHtml}.\n     *\n     * @param unsafeHtml untrusted `html`, typically from the user.\n     * @returns `html` string which is safe to display to user, because all of the dangerous javascript\n     * and urls have been removed.\n     *\n     * @publicApi\n     */\n    function ɵɵsanitizeHtml(unsafeHtml) {\n        var sanitizer = getSanitizer();\n        if (sanitizer) {\n            return sanitizer.sanitize(exports.SecurityContext.HTML, unsafeHtml) || '';\n        }\n        if (allowSanitizationBypass(unsafeHtml, \"Html\" /* Html */)) {\n            return unsafeHtml.toString();\n        }\n        return _sanitizeHtml(document, renderStringify(unsafeHtml));\n    }\n    /**\n     * A `style` sanitizer which converts untrusted `style` **string** into trusted string by removing\n     * dangerous content.\n     *\n     * This method parses the `style` and locates potentially dangerous content (such as urls and\n     * javascript) and removes it.\n     *\n     * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustStyle}.\n     *\n     * @param unsafeStyle untrusted `style`, typically from the user.\n     * @returns `style` string which is safe to bind to the `style` properties, because all of the\n     * dangerous javascript and urls have been removed.\n     *\n     * @publicApi\n     */\n    function ɵɵsanitizeStyle(unsafeStyle) {\n        var sanitizer = getSanitizer();\n        if (sanitizer) {\n            return sanitizer.sanitize(exports.SecurityContext.STYLE, unsafeStyle) || '';\n        }\n        if (allowSanitizationBypass(unsafeStyle, \"Style\" /* Style */)) {\n            return unsafeStyle.toString();\n        }\n        return _sanitizeStyle(renderStringify(unsafeStyle));\n    }\n    /**\n     * A `url` sanitizer which converts untrusted `url` **string** into trusted string by removing\n     * dangerous\n     * content.\n     *\n     * This method parses the `url` and locates potentially dangerous content (such as javascript) and\n     * removes it.\n     *\n     * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustUrl}.\n     *\n     * @param unsafeUrl untrusted `url`, typically from the user.\n     * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n     * all of the dangerous javascript has been removed.\n     *\n     * @publicApi\n     */\n    function ɵɵsanitizeUrl(unsafeUrl) {\n        var sanitizer = getSanitizer();\n        if (sanitizer) {\n            return sanitizer.sanitize(exports.SecurityContext.URL, unsafeUrl) || '';\n        }\n        if (allowSanitizationBypass(unsafeUrl, \"Url\" /* Url */)) {\n            return unsafeUrl.toString();\n        }\n        return _sanitizeUrl(renderStringify(unsafeUrl));\n    }\n    /**\n     * A `url` sanitizer which only lets trusted `url`s through.\n     *\n     * This passes only `url`s marked trusted by calling {@link bypassSanitizationTrustResourceUrl}.\n     *\n     * @param unsafeResourceUrl untrusted `url`, typically from the user.\n     * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n     * only trusted `url`s have been allowed to pass.\n     *\n     * @publicApi\n     */\n    function ɵɵsanitizeResourceUrl(unsafeResourceUrl) {\n        var sanitizer = getSanitizer();\n        if (sanitizer) {\n            return sanitizer.sanitize(exports.SecurityContext.RESOURCE_URL, unsafeResourceUrl) || '';\n        }\n        if (allowSanitizationBypass(unsafeResourceUrl, \"ResourceUrl\" /* ResourceUrl */)) {\n            return unsafeResourceUrl.toString();\n        }\n        throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');\n    }\n    /**\n     * A `script` sanitizer which only lets trusted javascript through.\n     *\n     * This passes only `script`s marked trusted by calling {@link\n     * bypassSanitizationTrustScript}.\n     *\n     * @param unsafeScript untrusted `script`, typically from the user.\n     * @returns `url` string which is safe to bind to the `<script>` element such as `<img src>`,\n     * because only trusted `scripts` have been allowed to pass.\n     *\n     * @publicApi\n     */\n    function ɵɵsanitizeScript(unsafeScript) {\n        var sanitizer = getSanitizer();\n        if (sanitizer) {\n            return sanitizer.sanitize(exports.SecurityContext.SCRIPT, unsafeScript) || '';\n        }\n        if (allowSanitizationBypass(unsafeScript, \"Script\" /* Script */)) {\n            return unsafeScript.toString();\n        }\n        throw new Error('unsafe value used in a script context');\n    }\n    /**\n     * Detects which sanitizer to use for URL property, based on tag name and prop name.\n     *\n     * The rules are based on the RESOURCE_URL context config from\n     * `packages/compiler/src/schema/dom_security_schema.ts`.\n     * If tag and prop names don't match Resource URL schema, use URL sanitizer.\n     */\n    function getUrlSanitizer(tag, prop) {\n        if ((prop === 'src' && (tag === 'embed' || tag === 'frame' || tag === 'iframe' ||\n            tag === 'media' || tag === 'script')) ||\n            (prop === 'href' && (tag === 'base' || tag === 'link'))) {\n            return ɵɵsanitizeResourceUrl;\n        }\n        return ɵɵsanitizeUrl;\n    }\n    /**\n     * Sanitizes URL, selecting sanitizer function based on tag and property names.\n     *\n     * This function is used in case we can't define security context at compile time, when only prop\n     * name is available. This happens when we generate host bindings for Directives/Components. The\n     * host element is unknown at compile time, so we defer calculation of specific sanitizer to\n     * runtime.\n     *\n     * @param unsafeUrl untrusted `url`, typically from the user.\n     * @param tag target element tag name.\n     * @param prop name of the property that contains the value.\n     * @returns `url` string which is safe to bind.\n     *\n     * @publicApi\n     */\n    function ɵɵsanitizeUrlOrResourceUrl(unsafeUrl, tag, prop) {\n        return getUrlSanitizer(tag, prop)(unsafeUrl);\n    }\n    /**\n     * The default style sanitizer will handle sanitization for style properties by\n     * sanitizing any CSS property that can include a `url` value (usually image-based properties)\n     *\n     * @publicApi\n     */\n    var ɵɵdefaultStyleSanitizer = function (prop, value, mode) {\n        mode = mode || 3 /* ValidateAndSanitize */;\n        var doSanitizeValue = true;\n        if (mode & 1 /* ValidateProperty */) {\n            doSanitizeValue = prop === 'background-image' || prop === 'background' ||\n                prop === 'border-image' || prop === 'filter' || prop === 'list-style' ||\n                prop === 'list-style-image' || prop === 'clip-path';\n        }\n        if (mode & 2 /* SanitizeOnly */) {\n            return doSanitizeValue ? ɵɵsanitizeStyle(value) : value;\n        }\n        else {\n            return doSanitizeValue;\n        }\n    };\n    function validateAgainstEventProperties(name) {\n        if (name.toLowerCase().startsWith('on')) {\n            var msg = \"Binding to event property '\" + name + \"' is disallowed for security reasons, \" +\n                (\"please use (\" + name.slice(2) + \")=...\") +\n                (\"\\nIf '\" + name + \"' is a directive input, make sure the directive is imported by the\") +\n                \" current module.\";\n            throw new Error(msg);\n        }\n    }\n    function validateAgainstEventAttributes(name) {\n        if (name.toLowerCase().startsWith('on')) {\n            var msg = \"Binding to event attribute '\" + name + \"' is disallowed for security reasons, \" +\n                (\"please use (\" + name.slice(2) + \")=...\");\n            throw new Error(msg);\n        }\n    }\n    function getSanitizer() {\n        var lView = getLView();\n        return lView && lView[SANITIZER];\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var TNODE = 8;\n    var PARENT_INJECTOR = 8;\n    var INJECTOR_BLOOM_PARENT_SIZE = 9;\n    var NO_PARENT_INJECTOR = -1;\n    /**\n     * Each injector is saved in 9 contiguous slots in `LView` and 9 contiguous slots in\n     * `TView.data`. This allows us to store information about the current node's tokens (which\n     * can be shared in `TView`) as well as the tokens of its ancestor nodes (which cannot be\n     * shared, so they live in `LView`).\n     *\n     * Each of these slots (aside from the last slot) contains a bloom filter. This bloom filter\n     * determines whether a directive is available on the associated node or not. This prevents us\n     * from searching the directives array at this level unless it's probable the directive is in it.\n     *\n     * See: https://en.wikipedia.org/wiki/Bloom_filter for more about bloom filters.\n     *\n     * Because all injectors have been flattened into `LView` and `TViewData`, they cannot typed\n     * using interfaces as they were previously. The start index of each `LInjector` and `TInjector`\n     * will differ based on where it is flattened into the main array, so it's not possible to know\n     * the indices ahead of time and save their types here. The interfaces are still included here\n     * for documentation purposes.\n     *\n     * export interface LInjector extends Array<any> {\n     *\n     *    // Cumulative bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)\n     *    [0]: number;\n     *\n     *    // Cumulative bloom for directive IDs 32-63\n     *    [1]: number;\n     *\n     *    // Cumulative bloom for directive IDs 64-95\n     *    [2]: number;\n     *\n     *    // Cumulative bloom for directive IDs 96-127\n     *    [3]: number;\n     *\n     *    // Cumulative bloom for directive IDs 128-159\n     *    [4]: number;\n     *\n     *    // Cumulative bloom for directive IDs 160 - 191\n     *    [5]: number;\n     *\n     *    // Cumulative bloom for directive IDs 192 - 223\n     *    [6]: number;\n     *\n     *    // Cumulative bloom for directive IDs 224 - 255\n     *    [7]: number;\n     *\n     *    // We need to store a reference to the injector's parent so DI can keep looking up\n     *    // the injector tree until it finds the dependency it's looking for.\n     *    [PARENT_INJECTOR]: number;\n     * }\n     *\n     * export interface TInjector extends Array<any> {\n     *\n     *    // Shared node bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)\n     *    [0]: number;\n     *\n     *    // Shared node bloom for directive IDs 32-63\n     *    [1]: number;\n     *\n     *    // Shared node bloom for directive IDs 64-95\n     *    [2]: number;\n     *\n     *    // Shared node bloom for directive IDs 96-127\n     *    [3]: number;\n     *\n     *    // Shared node bloom for directive IDs 128-159\n     *    [4]: number;\n     *\n     *    // Shared node bloom for directive IDs 160 - 191\n     *    [5]: number;\n     *\n     *    // Shared node bloom for directive IDs 192 - 223\n     *    [6]: number;\n     *\n     *    // Shared node bloom for directive IDs 224 - 255\n     *    [7]: number;\n     *\n     *    // Necessary to find directive indices for a particular node.\n     *    [TNODE]: TElementNode|TElementContainerNode|TContainerNode;\n     *  }\n     */\n    /**\n    * Factory for creating instances of injectors in the NodeInjector.\n    *\n    * This factory is complicated by the fact that it can resolve `multi` factories as well.\n    *\n    * NOTE: Some of the fields are optional which means that this class has two hidden classes.\n    * - One without `multi` support (most common)\n    * - One with `multi` values, (rare).\n    *\n    * Since VMs can cache up to 4 inline hidden classes this is OK.\n    *\n    * - Single factory: Only `resolving` and `factory` is defined.\n    * - `providers` factory: `componentProviders` is a number and `index = -1`.\n    * - `viewProviders` factory: `componentProviders` is a number and `index` points to `providers`.\n    */\n    var NodeInjectorFactory = /** @class */ (function () {\n        function NodeInjectorFactory(\n        /**\n         * Factory to invoke in order to create a new instance.\n         */\n        factory, \n        /**\n         * Set to `true` if the token is declared in `viewProviders` (or if it is component).\n         */\n        isViewProvider, injectImplementation) {\n            this.factory = factory;\n            /**\n             * Marker set to true during factory invocation to see if we get into recursive loop.\n             * Recursive loop causes an error to be displayed.\n             */\n            this.resolving = false;\n            this.canSeeViewProviders = isViewProvider;\n            this.injectImpl = injectImplementation;\n        }\n        return NodeInjectorFactory;\n    }());\n    function isFactory(obj) {\n        // See: https://jsperf.com/instanceof-vs-getprototypeof\n        return obj !== null && typeof obj == 'object' &&\n            Object.getPrototypeOf(obj) == NodeInjectorFactory.prototype;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function assertNodeType(tNode, type) {\n        assertDefined(tNode, 'should be called with a TNode');\n        assertEqual(tNode.type, type, \"should be a \" + typeName(type));\n    }\n    function assertNodeOfPossibleTypes(tNode) {\n        var types = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            types[_i - 1] = arguments[_i];\n        }\n        assertDefined(tNode, 'should be called with a TNode');\n        var found = types.some(function (type) { return tNode.type === type; });\n        assertEqual(found, true, \"Should be one of \" + types.map(typeName).join(', ') + \" but got \" + typeName(tNode.type));\n    }\n    function typeName(type) {\n        if (type == 1 /* Projection */)\n            return 'Projection';\n        if (type == 0 /* Container */)\n            return 'Container';\n        if (type == 2 /* View */)\n            return 'View';\n        if (type == 3 /* Element */)\n            return 'Element';\n        if (type == 4 /* ElementContainer */)\n            return 'ElementContainer';\n        return '<unknown>';\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // TODO: cleanup once the code is merged in angular/angular\n    var RendererStyleFlags3;\n    (function (RendererStyleFlags3) {\n        RendererStyleFlags3[RendererStyleFlags3[\"Important\"] = 1] = \"Important\";\n        RendererStyleFlags3[RendererStyleFlags3[\"DashCase\"] = 2] = \"DashCase\";\n    })(RendererStyleFlags3 || (RendererStyleFlags3 = {}));\n    /** Returns whether the `renderer` is a `ProceduralRenderer3` */\n    function isProceduralRenderer(renderer) {\n        return !!(renderer.listen);\n    }\n    var domRendererFactory3 = {\n        createRenderer: function (hostElement, rendererType) { return document; }\n    };\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Returns the matching `LContext` data for a given DOM node, directive or component instance.\n     *\n     * This function will examine the provided DOM element, component, or directive instance\\'s\n     * monkey-patched property to derive the `LContext` data. Once called then the monkey-patched\n     * value will be that of the newly created `LContext`.\n     *\n     * If the monkey-patched value is the `LView` instance then the context value for that\n     * target will be created and the monkey-patch reference will be updated. Therefore when this\n     * function is called it may mutate the provided element\\'s, component\\'s or any of the associated\n     * directive\\'s monkey-patch values.\n     *\n     * If the monkey-patch value is not detected then the code will walk up the DOM until an element\n     * is found which contains a monkey-patch reference. When that occurs then the provided element\n     * will be updated with a new context (which is then returned). If the monkey-patch value is not\n     * detected for a component/directive instance then it will throw an error (all components and\n     * directives should be automatically monkey-patched by ivy).\n     *\n     * @param target Component, Directive or DOM Node.\n     */\n    function getLContext(target) {\n        var mpValue = readPatchedData(target);\n        if (mpValue) {\n            // only when it's an array is it considered an LView instance\n            // ... otherwise it's an already constructed LContext instance\n            if (Array.isArray(mpValue)) {\n                var lView = mpValue;\n                var nodeIndex = void 0;\n                var component = undefined;\n                var directives = undefined;\n                if (isComponentInstance(target)) {\n                    nodeIndex = findViaComponent(lView, target);\n                    if (nodeIndex == -1) {\n                        throw new Error('The provided component was not found in the application');\n                    }\n                    component = target;\n                }\n                else if (isDirectiveInstance(target)) {\n                    nodeIndex = findViaDirective(lView, target);\n                    if (nodeIndex == -1) {\n                        throw new Error('The provided directive was not found in the application');\n                    }\n                    directives = getDirectivesAtNodeIndex(nodeIndex, lView, false);\n                }\n                else {\n                    nodeIndex = findViaNativeElement(lView, target);\n                    if (nodeIndex == -1) {\n                        return null;\n                    }\n                }\n                // the goal is not to fill the entire context full of data because the lookups\n                // are expensive. Instead, only the target data (the element, component, container, ICU\n                // expression or directive details) are filled into the context. If called multiple times\n                // with different target values then the missing target data will be filled in.\n                var native = unwrapRNode(lView[nodeIndex]);\n                var existingCtx = readPatchedData(native);\n                var context = (existingCtx && !Array.isArray(existingCtx)) ?\n                    existingCtx :\n                    createLContext(lView, nodeIndex, native);\n                // only when the component has been discovered then update the monkey-patch\n                if (component && context.component === undefined) {\n                    context.component = component;\n                    attachPatchData(context.component, context);\n                }\n                // only when the directives have been discovered then update the monkey-patch\n                if (directives && context.directives === undefined) {\n                    context.directives = directives;\n                    for (var i = 0; i < directives.length; i++) {\n                        attachPatchData(directives[i], context);\n                    }\n                }\n                attachPatchData(context.native, context);\n                mpValue = context;\n            }\n        }\n        else {\n            var rElement = target;\n            ngDevMode && assertDomNode(rElement);\n            // if the context is not found then we need to traverse upwards up the DOM\n            // to find the nearest element that has already been monkey patched with data\n            var parent_1 = rElement;\n            while (parent_1 = parent_1.parentNode) {\n                var parentContext = readPatchedData(parent_1);\n                if (parentContext) {\n                    var lView = void 0;\n                    if (Array.isArray(parentContext)) {\n                        lView = parentContext;\n                    }\n                    else {\n                        lView = parentContext.lView;\n                    }\n                    // the edge of the app was also reached here through another means\n                    // (maybe because the DOM was changed manually).\n                    if (!lView) {\n                        return null;\n                    }\n                    var index = findViaNativeElement(lView, rElement);\n                    if (index >= 0) {\n                        var native = unwrapRNode(lView[index]);\n                        var context = createLContext(lView, index, native);\n                        attachPatchData(native, context);\n                        mpValue = context;\n                        break;\n                    }\n                }\n            }\n        }\n        return mpValue || null;\n    }\n    /**\n     * Creates an empty instance of a `LContext` context\n     */\n    function createLContext(lView, nodeIndex, native) {\n        return {\n            lView: lView,\n            nodeIndex: nodeIndex,\n            native: native,\n            component: undefined,\n            directives: undefined,\n            localRefs: undefined,\n        };\n    }\n    /**\n     * Takes a component instance and returns the view for that component.\n     *\n     * @param componentInstance\n     * @returns The component's view\n     */\n    function getComponentViewByInstance(componentInstance) {\n        var lView = readPatchedData(componentInstance);\n        var view;\n        if (Array.isArray(lView)) {\n            var nodeIndex = findViaComponent(lView, componentInstance);\n            view = getComponentViewByIndex(nodeIndex, lView);\n            var context = createLContext(lView, nodeIndex, view[HOST]);\n            context.component = componentInstance;\n            attachPatchData(componentInstance, context);\n            attachPatchData(context.native, context);\n        }\n        else {\n            var context = lView;\n            view = getComponentViewByIndex(context.nodeIndex, context.lView);\n        }\n        return view;\n    }\n    /**\n     * Assigns the given data to the given target (which could be a component,\n     * directive or DOM node instance) using monkey-patching.\n     */\n    function attachPatchData(target, data) {\n        target[MONKEY_PATCH_KEY_NAME] = data;\n    }\n    function isComponentInstance(instance) {\n        return instance && instance.constructor && instance.constructor.ngComponentDef;\n    }\n    function isDirectiveInstance(instance) {\n        return instance && instance.constructor && instance.constructor.ngDirectiveDef;\n    }\n    /**\n     * Locates the element within the given LView and returns the matching index\n     */\n    function findViaNativeElement(lView, target) {\n        var tNode = lView[TVIEW].firstChild;\n        while (tNode) {\n            var native = getNativeByTNodeOrNull(tNode, lView);\n            if (native === target) {\n                return tNode.index;\n            }\n            tNode = traverseNextElement(tNode);\n        }\n        return -1;\n    }\n    /**\n     * Locates the next tNode (child, sibling or parent).\n     */\n    function traverseNextElement(tNode) {\n        if (tNode.child) {\n            return tNode.child;\n        }\n        else if (tNode.next) {\n            return tNode.next;\n        }\n        else {\n            // Let's take the following template: <div><span>text</span></div><component/>\n            // After checking the text node, we need to find the next parent that has a \"next\" TNode,\n            // in this case the parent `div`, so that we can find the component.\n            while (tNode.parent && !tNode.parent.next) {\n                tNode = tNode.parent;\n            }\n            return tNode.parent && tNode.parent.next;\n        }\n    }\n    /**\n     * Locates the component within the given LView and returns the matching index\n     */\n    function findViaComponent(lView, componentInstance) {\n        var componentIndices = lView[TVIEW].components;\n        if (componentIndices) {\n            for (var i = 0; i < componentIndices.length; i++) {\n                var elementComponentIndex = componentIndices[i];\n                var componentView = getComponentViewByIndex(elementComponentIndex, lView);\n                if (componentView[CONTEXT] === componentInstance) {\n                    return elementComponentIndex;\n                }\n            }\n        }\n        else {\n            var rootComponentView = getComponentViewByIndex(HEADER_OFFSET, lView);\n            var rootComponent = rootComponentView[CONTEXT];\n            if (rootComponent === componentInstance) {\n                // we are dealing with the root element here therefore we know that the\n                // element is the very first element after the HEADER data in the lView\n                return HEADER_OFFSET;\n            }\n        }\n        return -1;\n    }\n    /**\n     * Locates the directive within the given LView and returns the matching index\n     */\n    function findViaDirective(lView, directiveInstance) {\n        // if a directive is monkey patched then it will (by default)\n        // have a reference to the LView of the current view. The\n        // element bound to the directive being search lives somewhere\n        // in the view data. We loop through the nodes and check their\n        // list of directives for the instance.\n        var tNode = lView[TVIEW].firstChild;\n        while (tNode) {\n            var directiveIndexStart = tNode.directiveStart;\n            var directiveIndexEnd = tNode.directiveEnd;\n            for (var i = directiveIndexStart; i < directiveIndexEnd; i++) {\n                if (lView[i] === directiveInstance) {\n                    return tNode.index;\n                }\n            }\n            tNode = traverseNextElement(tNode);\n        }\n        return -1;\n    }\n    /**\n     * Returns a list of directives extracted from the given view based on the\n     * provided list of directive index values.\n     *\n     * @param nodeIndex The node index\n     * @param lView The target view data\n     * @param includeComponents Whether or not to include components in returned directives\n     */\n    function getDirectivesAtNodeIndex(nodeIndex, lView, includeComponents) {\n        var tNode = lView[TVIEW].data[nodeIndex];\n        var directiveStartIndex = tNode.directiveStart;\n        if (directiveStartIndex == 0)\n            return EMPTY_ARRAY$1;\n        var directiveEndIndex = tNode.directiveEnd;\n        if (!includeComponents && tNode.flags & 1 /* isComponent */)\n            directiveStartIndex++;\n        return lView.slice(directiveStartIndex, directiveEndIndex);\n    }\n    function getComponentAtNodeIndex(nodeIndex, lView) {\n        var tNode = lView[TVIEW].data[nodeIndex];\n        var directiveStartIndex = tNode.directiveStart;\n        return tNode.flags & 1 /* isComponent */ ? lView[directiveStartIndex] : null;\n    }\n    /**\n     * Returns a map of local references (local reference name => element or directive instance) that\n     * exist on a given element.\n     */\n    function discoverLocalRefs(lView, nodeIndex) {\n        var tNode = lView[TVIEW].data[nodeIndex];\n        if (tNode && tNode.localNames) {\n            var result = {};\n            var localIndex = tNode.index + 1;\n            for (var i = 0; i < tNode.localNames.length; i += 2) {\n                result[tNode.localNames[i]] = lView[localIndex];\n                localIndex++;\n            }\n            return result;\n        }\n        return null;\n    }\n\n    var CorePlayerHandler = /** @class */ (function () {\n        function CorePlayerHandler() {\n            this._players = [];\n        }\n        CorePlayerHandler.prototype.flushPlayers = function () {\n            for (var i = 0; i < this._players.length; i++) {\n                var player = this._players[i];\n                if (!player.parent && player.state === 0 /* Pending */) {\n                    player.play();\n                }\n            }\n            this._players.length = 0;\n        };\n        CorePlayerHandler.prototype.queuePlayer = function (player) { this._players.push(player); };\n        return CorePlayerHandler;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * The default directive styling index value for template-based bindings.\n     *\n     * All host-level bindings (e.g. `hostStyleProp` and `hostStyleMap`) are\n     * assigned a directive styling index value based on the current directive\n     * uniqueId and the directive super-class inheritance depth. But for template\n     * bindings they always have the same directive styling index value.\n     */\n    var DEFAULT_TEMPLATE_DIRECTIVE_INDEX = 0;\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var ANIMATION_PROP_PREFIX = '@';\n    function createEmptyStylingContext(wrappedElement, sanitizer, initialStyles, initialClasses) {\n        var context = [\n            wrappedElement || null,\n            0,\n            [],\n            initialStyles || [null, null],\n            initialClasses || [null, null],\n            [0, 0],\n            [0],\n            [0],\n            null,\n            null,\n        ];\n        // whenever a context is created there is always a `null` directive\n        // that is registered (which is a placeholder for the \"template\").\n        allocateOrUpdateDirectiveIntoContext(context, DEFAULT_TEMPLATE_DIRECTIVE_INDEX);\n        return context;\n    }\n    /**\n     * Allocates (registers) a directive into the directive registry within the provided styling\n     * context.\n     *\n     * For each and every `[style]`, `[style.prop]`, `[class]`, `[class.name]` binding\n     * (as well as static style and class attributes) a directive, component or template\n     * is marked as the owner. When an owner is determined (this happens when the template\n     * is first passed over) the directive owner is allocated into the styling context. When\n     * this happens, each owner gets its own index value. This then ensures that once any\n     * style and/or class binding are assigned into the context then they are marked to\n     * that directive's index value.\n     *\n     * @param context the target StylingContext\n     * @param directiveRef the directive that will be allocated into the context\n     * @returns the index where the directive was inserted into\n     */\n    function allocateOrUpdateDirectiveIntoContext(context, directiveIndex, singlePropValuesIndex, styleSanitizer) {\n        if (singlePropValuesIndex === void 0) { singlePropValuesIndex = -1; }\n        var directiveRegistry = context[2 /* DirectiveRegistryPosition */];\n        var index = directiveIndex * 2 /* Size */;\n        // we preemptively make space into the directives array and then\n        // assign values slot-by-slot to ensure that if the directive ordering\n        // changes then it will still function\n        var limit = index + 2 /* Size */;\n        for (var i = directiveRegistry.length; i < limit; i += 2 /* Size */) {\n            // -1 is used to signal that the directive has been allocated, but\n            // no actual style or class bindings have been registered yet...\n            directiveRegistry.push(-1, null);\n        }\n        var propValuesStartPosition = index + 0 /* SinglePropValuesIndexOffset */;\n        if (singlePropValuesIndex >= 0 && directiveRegistry[propValuesStartPosition] === -1) {\n            directiveRegistry[propValuesStartPosition] = singlePropValuesIndex;\n            directiveRegistry[index + 1 /* StyleSanitizerOffset */] =\n                styleSanitizer || null;\n        }\n    }\n    /**\n     * Used clone a copy of a pre-computed template of a styling context.\n     *\n     * A pre-computed template is designed to be computed once for a given element\n     * (instructions.ts has logic for caching this).\n     */\n    function allocStylingContext(element, templateStyleContext) {\n        // each instance gets a copy\n        var context = templateStyleContext.slice();\n        // the HEADER values contain arrays which also need\n        // to be copied over into the new context\n        for (var i = 0; i < 10 /* SingleStylesStartPosition */; i++) {\n            var value = templateStyleContext[i];\n            if (Array.isArray(value)) {\n                context[i] = value.slice();\n            }\n        }\n        context[0 /* ElementPosition */] = element;\n        // this will prevent any other directives from extending the context\n        context[1 /* MasterFlagPosition */] |= 16 /* BindingAllocationLocked */;\n        return context;\n    }\n    /**\n     * Retrieve the `StylingContext` at a given index.\n     *\n     * This method lazily creates the `StylingContext`. This is because in most cases\n     * we have styling without any bindings. Creating `StylingContext` eagerly would mean that\n     * every style declaration such as `<div style=\"color: red\">` would result `StyleContext`\n     * which would create unnecessary memory pressure.\n     *\n     * @param index Index of the style allocation. See: `styling`.\n     * @param viewData The view to search for the styling context\n     */\n    function getStylingContextFromLView(index, viewData) {\n        var storageIndex = index;\n        var slotValue = viewData[storageIndex];\n        var wrapper = viewData;\n        while (Array.isArray(slotValue)) {\n            wrapper = slotValue;\n            slotValue = slotValue[HOST];\n        }\n        if (isStylingContext(wrapper)) {\n            return wrapper;\n        }\n        else {\n            // This is an LView or an LContainer\n            var stylingTemplate = getTNode(index - HEADER_OFFSET, viewData).stylingTemplate;\n            if (wrapper !== viewData) {\n                storageIndex = HOST;\n            }\n            return wrapper[storageIndex] = stylingTemplate ?\n                allocStylingContext(slotValue, stylingTemplate) :\n                createEmptyStylingContext(slotValue);\n        }\n    }\n    function isAnimationProp(name) {\n        return name[0] === ANIMATION_PROP_PREFIX;\n    }\n    function hasClassInput(tNode) {\n        return (tNode.flags & 8 /* hasClassInput */) !== 0;\n    }\n    function hasStyleInput(tNode) {\n        return (tNode.flags & 16 /* hasStyleInput */) !== 0;\n    }\n    function forceClassesAsString(classes) {\n        if (classes && typeof classes !== 'string') {\n            classes = Object.keys(classes).join(' ');\n        }\n        return classes || '';\n    }\n    function forceStylesAsString(styles) {\n        var str = '';\n        if (styles) {\n            var props = Object.keys(styles);\n            for (var i = 0; i < props.length; i++) {\n                var prop = props[i];\n                str += (i ? ';' : '') + (prop + \":\" + styles[prop]);\n            }\n        }\n        return str;\n    }\n    function addPlayerInternal(playerContext, rootContext, element, player, playerContextIndex, ref) {\n        ref = ref || element;\n        if (playerContextIndex) {\n            playerContext[playerContextIndex] = player;\n        }\n        else {\n            playerContext.push(player);\n        }\n        if (player) {\n            player.addEventListener(200 /* Destroyed */, function () {\n                var index = playerContext.indexOf(player);\n                var nonFactoryPlayerIndex = playerContext[0 /* NonBuilderPlayersStart */];\n                // if the player is being removed from the factory side of the context\n                // (which is where the [style] and [class] bindings do their thing) then\n                // that side of the array cannot be resized since the respective bindings\n                // have pointer index values that point to the associated factory instance\n                if (index) {\n                    if (index < nonFactoryPlayerIndex) {\n                        playerContext[index] = null;\n                    }\n                    else {\n                        playerContext.splice(index, 1);\n                    }\n                }\n                player.destroy();\n            });\n            var playerHandler = rootContext.playerHandler || (rootContext.playerHandler = new CorePlayerHandler());\n            playerHandler.queuePlayer(player, ref);\n            return true;\n        }\n        return false;\n    }\n    function getPlayersInternal(playerContext) {\n        var players = [];\n        var nonFactoryPlayersStart = playerContext[0 /* NonBuilderPlayersStart */];\n        // add all factory-based players (which are apart of [style] and [class] bindings)\n        for (var i = 1 /* PlayerBuildersStartPosition */ + 1 /* PlayerOffsetPosition */; i < nonFactoryPlayersStart; i += 2 /* PlayerAndPlayerBuildersTupleSize */) {\n            var player = playerContext[i];\n            if (player) {\n                players.push(player);\n            }\n        }\n        // add all custom players (not apart of [style] and [class] bindings)\n        for (var i = nonFactoryPlayersStart; i < playerContext.length; i++) {\n            players.push(playerContext[i]);\n        }\n        return players;\n    }\n    function getOrCreatePlayerContext(target, context) {\n        context = context || getLContext(target);\n        if (!context) {\n            ngDevMode && throwInvalidRefError();\n            return null;\n        }\n        var lView = context.lView, nodeIndex = context.nodeIndex;\n        var stylingContext = getStylingContextFromLView(nodeIndex, lView);\n        return getPlayerContext(stylingContext) || allocPlayerContext(stylingContext);\n    }\n    function getPlayerContext(stylingContext) {\n        return stylingContext[9 /* PlayerContext */];\n    }\n    function allocPlayerContext(data) {\n        return data[9 /* PlayerContext */] =\n            [5 /* SinglePlayerBuildersStartPosition */, null, null, null, null];\n    }\n    function throwInvalidRefError() {\n        throw new Error('Only elements that exist in an Angular application can be used for animations');\n    }\n\n    /**\n     * Assigns all attribute values to the provided element via the inferred renderer.\n     *\n     * This function accepts two forms of attribute entries:\n     *\n     * default: (key, value):\n     *  attrs = [key1, value1, key2, value2]\n     *\n     * namespaced: (NAMESPACE_MARKER, uri, name, value)\n     *  attrs = [NAMESPACE_MARKER, uri, name, value, NAMESPACE_MARKER, uri, name, value]\n     *\n     * The `attrs` array can contain a mix of both the default and namespaced entries.\n     * The \"default\" values are set without a marker, but if the function comes across\n     * a marker value then it will attempt to set a namespaced value. If the marker is\n     * not of a namespaced value then the function will quit and return the index value\n     * where it stopped during the iteration of the attrs array.\n     *\n     * See [AttributeMarker] to understand what the namespace marker value is.\n     *\n     * Note that this instruction does not support assigning style and class values to\n     * an element. See `elementStart` and `elementHostAttrs` to learn how styling values\n     * are applied to an element.\n     *\n     * @param native The element that the attributes will be assigned to\n     * @param attrs The attribute array of values that will be assigned to the element\n     * @returns the index value that was last accessed in the attributes array\n     */\n    function setUpAttributes(native, attrs) {\n        var renderer = getLView()[RENDERER];\n        var isProc = isProceduralRenderer(renderer);\n        var i = 0;\n        while (i < attrs.length) {\n            var value = attrs[i];\n            if (typeof value === 'number') {\n                // only namespaces are supported. Other value types (such as style/class\n                // entries) are not supported in this function.\n                if (value !== 0 /* NamespaceURI */) {\n                    break;\n                }\n                // we just landed on the marker value ... therefore\n                // we should skip to the next entry\n                i++;\n                var namespaceURI = attrs[i++];\n                var attrName = attrs[i++];\n                var attrVal = attrs[i++];\n                ngDevMode && ngDevMode.rendererSetAttribute++;\n                isProc ?\n                    renderer.setAttribute(native, attrName, attrVal, namespaceURI) :\n                    native.setAttributeNS(namespaceURI, attrName, attrVal);\n            }\n            else {\n                // attrName is string;\n                var attrName = value;\n                var attrVal = attrs[++i];\n                // Standard attributes\n                ngDevMode && ngDevMode.rendererSetAttribute++;\n                if (isAnimationProp(attrName)) {\n                    if (isProc) {\n                        renderer.setProperty(native, attrName, attrVal);\n                    }\n                }\n                else {\n                    isProc ?\n                        renderer\n                            .setAttribute(native, attrName, attrVal) :\n                        native.setAttribute(attrName, attrVal);\n                }\n                i++;\n            }\n        }\n        // another piece of code may iterate over the same attributes array. Therefore\n        // it may be helpful to return the exact spot where the attributes array exited\n        // whether by running into an unsupported marker or if all the static values were\n        // iterated over.\n        return i;\n    }\n    function attrsStylingIndexOf(attrs, startIndex) {\n        for (var i = startIndex; i < attrs.length; i++) {\n            var val = attrs[i];\n            if (val === 1 /* Classes */ || val === 2 /* Styles */) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    /**\n     * Test whether the given value is a marker that indicates that the following\n     * attribute values in a `TAttributes` array are only the names of attributes,\n     * and not name-value pairs.\n     * @param marker The attribute marker to test.\n     * @returns true if the marker is a \"name-only\" marker (e.g. `Bindings`, `Template` or `I18n`).\n     */\n    function isNameOnlyAttributeMarker(marker) {\n        return marker === 3 /* Bindings */ || marker === 4 /* Template */ ||\n            marker === 6 /* I18n */;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /// Parent Injector Utils ///////////////////////////////////////////////////////////////\n    function hasParentInjector(parentLocation) {\n        return parentLocation !== NO_PARENT_INJECTOR;\n    }\n    function getParentInjectorIndex(parentLocation) {\n        return parentLocation & 32767 /* InjectorIndexMask */;\n    }\n    function getParentInjectorViewOffset(parentLocation) {\n        return parentLocation >> 16 /* ViewOffsetShift */;\n    }\n    /**\n     * Unwraps a parent injector location number to find the view offset from the current injector,\n     * then walks up the declaration view tree until the view is found that contains the parent\n     * injector.\n     *\n     * @param location The location of the parent injector, which contains the view offset\n     * @param startView The LView instance from which to start walking up the view tree\n     * @returns The LView instance that contains the parent injector\n     */\n    function getParentInjectorView(location, startView) {\n        var viewOffset = getParentInjectorViewOffset(location);\n        var parentView = startView;\n        // For most cases, the parent injector can be found on the host node (e.g. for component\n        // or container), but we must keep the loop here to support the rarer case of deeply nested\n        // <ng-template> tags or inline views, where the parent injector might live many views\n        // above the child injector.\n        while (viewOffset > 0) {\n            parentView = parentView[DECLARATION_VIEW];\n            viewOffset--;\n        }\n        return parentView;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Gets the parent LView of the passed LView, if the PARENT is an LContainer, will get the parent of\n     * that LContainer, which is an LView\n     * @param lView the lView whose parent to get\n     */\n    function getLViewParent(lView) {\n        ngDevMode && assertLView(lView);\n        var parent = lView[PARENT];\n        return isLContainer(parent) ? parent[PARENT] : parent;\n    }\n    /**\n     * Retrieve the root view from any component or `LView` by walking the parent `LView` until\n     * reaching the root `LView`.\n     *\n     * @param componentOrLView any component or `LView`\n     */\n    function getRootView(componentOrLView) {\n        ngDevMode && assertDefined(componentOrLView, 'component');\n        var lView = isLView(componentOrLView) ? componentOrLView : readPatchedLView(componentOrLView);\n        while (lView && !(lView[FLAGS] & 512 /* IsRoot */)) {\n            lView = getLViewParent(lView);\n        }\n        ngDevMode && assertLView(lView);\n        return lView;\n    }\n    /**\n     * Given an `LView`, find the closest declaration view which is not an embedded view.\n     *\n     * This method searches for the `LView` associated with the component which declared the `LView`.\n     *\n     * This function may return itself if the `LView` passed in is not an embedded `LView`. Otherwise\n     * it walks the declaration parents until it finds a component view (non-embedded-view.)\n     *\n     * @param lView LView for which we want a host element node\n     * @returns The host node\n     */\n    function findComponentView(lView) {\n        var rootTNode = lView[T_HOST];\n        while (rootTNode !== null && rootTNode.type === 2 /* View */) {\n            ngDevMode && assertDefined(lView[DECLARATION_VIEW], 'lView[DECLARATION_VIEW]');\n            lView = lView[DECLARATION_VIEW];\n            rootTNode = lView[T_HOST];\n        }\n        ngDevMode && assertLView(lView);\n        return lView;\n    }\n    /**\n     * Returns the `RootContext` instance that is associated with\n     * the application where the target is situated. It does this by walking the parent views until it\n     * gets to the root view, then getting the context off of that.\n     *\n     * @param viewOrComponent the `LView` or component to get the root context for.\n     */\n    function getRootContext(viewOrComponent) {\n        var rootView = getRootView(viewOrComponent);\n        ngDevMode &&\n            assertDefined(rootView[CONTEXT], 'RootView has no context. Perhaps it is disconnected?');\n        return rootView[CONTEXT];\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Defines if the call to `inject` should include `viewProviders` in its resolution.\n     *\n     * This is set to true when we try to instantiate a component. This value is reset in\n     * `getNodeInjectable` to a value which matches the declaration location of the token about to be\n     * instantiated. This is done so that if we are injecting a token which was declared outside of\n     * `viewProviders` we don't accidentally pull `viewProviders` in.\n     *\n     * Example:\n     *\n     * ```\n     * @Injectable()\n     * class MyService {\n     *   constructor(public value: String) {}\n     * }\n     *\n     * @Component({\n     *   providers: [\n     *     MyService,\n     *     {provide: String, value: 'providers' }\n     *   ]\n     *   viewProviders: [\n     *     {provide: String, value: 'viewProviders'}\n     *   ]\n     * })\n     * class MyComponent {\n     *   constructor(myService: MyService, value: String) {\n     *     // We expect that Component can see into `viewProviders`.\n     *     expect(value).toEqual('viewProviders');\n     *     // `MyService` was not declared in `viewProviders` hence it can't see it.\n     *     expect(myService.value).toEqual('providers');\n     *   }\n     * }\n     *\n     * ```\n     */\n    var includeViewProviders = true;\n    function setIncludeViewProviders(v) {\n        var oldValue = includeViewProviders;\n        includeViewProviders = v;\n        return oldValue;\n    }\n    /**\n     * The number of slots in each bloom filter (used by DI). The larger this number, the fewer\n     * directives that will share slots, and thus, the fewer false positives when checking for\n     * the existence of a directive.\n     */\n    var BLOOM_SIZE = 256;\n    var BLOOM_MASK = BLOOM_SIZE - 1;\n    /** Counter used to generate unique IDs for directives. */\n    var nextNgElementId = 0;\n    /**\n     * Registers this directive as present in its node's injector by flipping the directive's\n     * corresponding bit in the injector's bloom filter.\n     *\n     * @param injectorIndex The index of the node injector where this token should be registered\n     * @param tView The TView for the injector's bloom filters\n     * @param type The directive token to register\n     */\n    function bloomAdd(injectorIndex, tView, type) {\n        ngDevMode && assertEqual(tView.firstTemplatePass, true, 'expected firstTemplatePass to be true');\n        var id = typeof type !== 'string' ? type[NG_ELEMENT_ID] : type.charCodeAt(0) || 0;\n        // Set a unique ID on the directive type, so if something tries to inject the directive,\n        // we can easily retrieve the ID and hash it into the bloom bit that should be checked.\n        if (id == null) {\n            id = type[NG_ELEMENT_ID] = nextNgElementId++;\n        }\n        // We only have BLOOM_SIZE (256) slots in our bloom filter (8 buckets * 32 bits each),\n        // so all unique IDs must be modulo-ed into a number from 0 - 255 to fit into the filter.\n        var bloomBit = id & BLOOM_MASK;\n        // Create a mask that targets the specific bit associated with the directive.\n        // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\n        // to bit positions 0 - 31 in a 32 bit integer.\n        var mask = 1 << bloomBit;\n        // Use the raw bloomBit number to determine which bloom filter bucket we should check\n        // e.g: bf0 = [0 - 31], bf1 = [32 - 63], bf2 = [64 - 95], bf3 = [96 - 127], etc\n        var b7 = bloomBit & 0x80;\n        var b6 = bloomBit & 0x40;\n        var b5 = bloomBit & 0x20;\n        var tData = tView.data;\n        if (b7) {\n            b6 ? (b5 ? (tData[injectorIndex + 7] |= mask) : (tData[injectorIndex + 6] |= mask)) :\n                (b5 ? (tData[injectorIndex + 5] |= mask) : (tData[injectorIndex + 4] |= mask));\n        }\n        else {\n            b6 ? (b5 ? (tData[injectorIndex + 3] |= mask) : (tData[injectorIndex + 2] |= mask)) :\n                (b5 ? (tData[injectorIndex + 1] |= mask) : (tData[injectorIndex] |= mask));\n        }\n    }\n    /**\n     * Creates (or gets an existing) injector for a given element or container.\n     *\n     * @param tNode for which an injector should be retrieved / created.\n     * @param hostView View where the node is stored\n     * @returns Node injector\n     */\n    function getOrCreateNodeInjectorForNode(tNode, hostView) {\n        var existingInjectorIndex = getInjectorIndex(tNode, hostView);\n        if (existingInjectorIndex !== -1) {\n            return existingInjectorIndex;\n        }\n        var tView = hostView[TVIEW];\n        if (tView.firstTemplatePass) {\n            tNode.injectorIndex = hostView.length;\n            insertBloom(tView.data, tNode); // foundation for node bloom\n            insertBloom(hostView, null); // foundation for cumulative bloom\n            insertBloom(tView.blueprint, null);\n            ngDevMode && assertEqual(tNode.flags === 0 || tNode.flags === 1 /* isComponent */, true, 'expected tNode.flags to not be initialized');\n        }\n        var parentLoc = getParentInjectorLocation(tNode, hostView);\n        var parentIndex = getParentInjectorIndex(parentLoc);\n        var parentLView = getParentInjectorView(parentLoc, hostView);\n        var injectorIndex = tNode.injectorIndex;\n        // If a parent injector can't be found, its location is set to -1.\n        // In that case, we don't need to set up a cumulative bloom\n        if (hasParentInjector(parentLoc)) {\n            var parentData = parentLView[TVIEW].data;\n            // Creates a cumulative bloom filter that merges the parent's bloom filter\n            // and its own cumulative bloom (which contains tokens for all ancestors)\n            for (var i = 0; i < 8; i++) {\n                hostView[injectorIndex + i] = parentLView[parentIndex + i] | parentData[parentIndex + i];\n            }\n        }\n        hostView[injectorIndex + PARENT_INJECTOR] = parentLoc;\n        return injectorIndex;\n    }\n    function insertBloom(arr, footer) {\n        arr.push(0, 0, 0, 0, 0, 0, 0, 0, footer);\n    }\n    function getInjectorIndex(tNode, hostView) {\n        if (tNode.injectorIndex === -1 ||\n            // If the injector index is the same as its parent's injector index, then the index has been\n            // copied down from the parent node. No injector has been created yet on this node.\n            (tNode.parent && tNode.parent.injectorIndex === tNode.injectorIndex) ||\n            // After the first template pass, the injector index might exist but the parent values\n            // might not have been calculated yet for this instance\n            hostView[tNode.injectorIndex + PARENT_INJECTOR] == null) {\n            return -1;\n        }\n        else {\n            return tNode.injectorIndex;\n        }\n    }\n    /**\n     * Finds the index of the parent injector, with a view offset if applicable. Used to set the\n     * parent injector initially.\n     *\n     * Returns a combination of number of `ViewData` we have to go up and index in that `Viewdata`\n     */\n    function getParentInjectorLocation(tNode, view) {\n        if (tNode.parent && tNode.parent.injectorIndex !== -1) {\n            return tNode.parent.injectorIndex; // ViewOffset is 0\n        }\n        // For most cases, the parent injector index can be found on the host node (e.g. for component\n        // or container), so this loop will be skipped, but we must keep the loop here to support\n        // the rarer case of deeply nested <ng-template> tags or inline views.\n        var hostTNode = view[T_HOST];\n        var viewOffset = 1;\n        while (hostTNode && hostTNode.injectorIndex === -1) {\n            view = view[DECLARATION_VIEW];\n            hostTNode = view ? view[T_HOST] : null;\n            viewOffset++;\n        }\n        return hostTNode ?\n            hostTNode.injectorIndex | (viewOffset << 16 /* ViewOffsetShift */) :\n            -1;\n    }\n    /**\n     * Makes a type or an injection token public to the DI system by adding it to an\n     * injector's bloom filter.\n     *\n     * @param di The node injector in which a directive will be added\n     * @param token The type or the injection token to be made public\n     */\n    function diPublicInInjector(injectorIndex, tView, token) {\n        bloomAdd(injectorIndex, tView, token);\n    }\n    /**\n     * Inject static attribute value into directive constructor.\n     *\n     * This method is used with `factory` functions which are generated as part of\n     * `defineDirective` or `defineComponent`. The method retrieves the static value\n     * of an attribute. (Dynamic attributes are not supported since they are not resolved\n     *  at the time of injection and can change over time.)\n     *\n     * # Example\n     * Given:\n     * ```\n     * @Component(...)\n     * class MyComponent {\n     *   constructor(@Attribute('title') title: string) { ... }\n     * }\n     * ```\n     * When instantiated with\n     * ```\n     * <my-component title=\"Hello\"></my-component>\n     * ```\n     *\n     * Then factory method generated is:\n     * ```\n     * MyComponent.ngComponentDef = defineComponent({\n     *   factory: () => new MyComponent(injectAttribute('title'))\n     *   ...\n     * })\n     * ```\n     *\n     * @publicApi\n     */\n    function injectAttributeImpl(tNode, attrNameToInject) {\n        ngDevMode && assertNodeOfPossibleTypes(tNode, 0 /* Container */, 3 /* Element */, 4 /* ElementContainer */);\n        ngDevMode && assertDefined(tNode, 'expecting tNode');\n        var attrs = tNode.attrs;\n        if (attrs) {\n            var attrsLength = attrs.length;\n            var i = 0;\n            while (i < attrsLength) {\n                var value = attrs[i];\n                // If we hit a `Bindings` or `Template` marker then we are done.\n                if (isNameOnlyAttributeMarker(value))\n                    break;\n                // Skip namespaced attributes\n                if (value === 0 /* NamespaceURI */) {\n                    // we skip the next two values\n                    // as namespaced attributes looks like\n                    // [..., AttributeMarker.NamespaceURI, 'http://someuri.com/test', 'test:exist',\n                    // 'existValue', ...]\n                    i = i + 2;\n                }\n                else if (typeof value === 'number') {\n                    // Skip to the first value of the marked attribute.\n                    i++;\n                    if (value === 1 /* Classes */ && attrNameToInject === 'class') {\n                        var accumulatedClasses = '';\n                        while (i < attrsLength && typeof attrs[i] === 'string') {\n                            accumulatedClasses += ' ' + attrs[i++];\n                        }\n                        return accumulatedClasses.trim();\n                    }\n                    else if (value === 2 /* Styles */ && attrNameToInject === 'style') {\n                        var accumulatedStyles = '';\n                        while (i < attrsLength && typeof attrs[i] === 'string') {\n                            accumulatedStyles += attrs[i++] + \": \" + attrs[i++] + \"; \";\n                        }\n                        return accumulatedStyles.trim();\n                    }\n                    else {\n                        while (i < attrsLength && typeof attrs[i] === 'string') {\n                            i++;\n                        }\n                    }\n                }\n                else if (value === attrNameToInject) {\n                    return attrs[i + 1];\n                }\n                else {\n                    i = i + 2;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Returns the value associated to the given token from the NodeInjectors => ModuleInjector.\n     *\n     * Look for the injector providing the token by walking up the node injector tree and then\n     * the module injector tree.\n     *\n     * This function patches `token` with `__NG_ELEMENT_ID__` which contains the id for the bloom\n     * filter. Negative values are reserved for special objects.\n     *   - `-1` is reserved for injecting `Injector` (implemented by `NodeInjector`)\n     *\n     * @param tNode The Node where the search for the injector should start\n     * @param lView The `LView` that contains the `tNode`\n     * @param token The token to look for\n     * @param flags Injection flags\n     * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`\n     * @returns the value from the injector, `null` when not found, or `notFoundValue` if provided\n     */\n    function getOrCreateInjectable(tNode, lView, token, flags, notFoundValue) {\n        if (flags === void 0) { flags = exports.InjectFlags.Default; }\n        if (tNode) {\n            var bloomHash = bloomHashBitOrFactory(token);\n            // If the ID stored here is a function, this is a special object like ElementRef or TemplateRef\n            // so just call the factory function to create it.\n            if (typeof bloomHash === 'function') {\n                var savePreviousOrParentTNode = getPreviousOrParentTNode();\n                var saveLView = getLView();\n                setTNodeAndViewData(tNode, lView);\n                try {\n                    var value = bloomHash();\n                    if (value == null && !(flags & exports.InjectFlags.Optional)) {\n                        throw new Error(\"No provider for \" + stringifyForError(token) + \"!\");\n                    }\n                    else {\n                        return value;\n                    }\n                }\n                finally {\n                    setTNodeAndViewData(savePreviousOrParentTNode, saveLView);\n                }\n            }\n            else if (typeof bloomHash == 'number') {\n                if (bloomHash === -1) {\n                    // `-1` is a special value used to identify `Injector` types.\n                    return new NodeInjector(tNode, lView);\n                }\n                // If the token has a bloom hash, then it is a token which could be in NodeInjector.\n                // A reference to the previous injector TView that was found while climbing the element\n                // injector tree. This is used to know if viewProviders can be accessed on the current\n                // injector.\n                var previousTView = null;\n                var injectorIndex = getInjectorIndex(tNode, lView);\n                var parentLocation = NO_PARENT_INJECTOR;\n                var hostTElementNode = flags & exports.InjectFlags.Host ? findComponentView(lView)[T_HOST] : null;\n                // If we should skip this injector, or if there is no injector on this node, start by\n                // searching\n                // the parent injector.\n                if (injectorIndex === -1 || flags & exports.InjectFlags.SkipSelf) {\n                    parentLocation = injectorIndex === -1 ? getParentInjectorLocation(tNode, lView) :\n                        lView[injectorIndex + PARENT_INJECTOR];\n                    if (!shouldSearchParent(flags, false)) {\n                        injectorIndex = -1;\n                    }\n                    else {\n                        previousTView = lView[TVIEW];\n                        injectorIndex = getParentInjectorIndex(parentLocation);\n                        lView = getParentInjectorView(parentLocation, lView);\n                    }\n                }\n                // Traverse up the injector tree until we find a potential match or until we know there\n                // *isn't* a match.\n                while (injectorIndex !== -1) {\n                    parentLocation = lView[injectorIndex + PARENT_INJECTOR];\n                    // Check the current injector. If it matches, see if it contains token.\n                    var tView = lView[TVIEW];\n                    if (bloomHasToken(bloomHash, injectorIndex, tView.data)) {\n                        // At this point, we have an injector which *may* contain the token, so we step through\n                        // the providers and directives associated with the injector's corresponding node to get\n                        // the instance.\n                        var instance = searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode);\n                        if (instance !== NOT_FOUND) {\n                            return instance;\n                        }\n                    }\n                    if (shouldSearchParent(flags, lView[TVIEW].data[injectorIndex + TNODE] === hostTElementNode) &&\n                        bloomHasToken(bloomHash, injectorIndex, lView)) {\n                        // The def wasn't found anywhere on this node, so it was a false positive.\n                        // Traverse up the tree and continue searching.\n                        previousTView = tView;\n                        injectorIndex = getParentInjectorIndex(parentLocation);\n                        lView = getParentInjectorView(parentLocation, lView);\n                    }\n                    else {\n                        // If we should not search parent OR If the ancestor bloom filter value does not have the\n                        // bit corresponding to the directive we can give up on traversing up to find the specific\n                        // injector.\n                        injectorIndex = -1;\n                    }\n                }\n            }\n        }\n        if (flags & exports.InjectFlags.Optional && notFoundValue === undefined) {\n            // This must be set or the NullInjector will throw for optional deps\n            notFoundValue = null;\n        }\n        if ((flags & (exports.InjectFlags.Self | exports.InjectFlags.Host)) === 0) {\n            var moduleInjector = lView[INJECTOR$1];\n            // switch to `injectInjectorOnly` implementation for module injector, since module injector\n            // should not have access to Component/Directive DI scope (that may happen through\n            // `directiveInject` implementation)\n            var previousInjectImplementation = setInjectImplementation(undefined);\n            try {\n                if (moduleInjector) {\n                    return moduleInjector.get(token, notFoundValue, flags & exports.InjectFlags.Optional);\n                }\n                else {\n                    return injectRootLimpMode(token, notFoundValue, flags & exports.InjectFlags.Optional);\n                }\n            }\n            finally {\n                setInjectImplementation(previousInjectImplementation);\n            }\n        }\n        if (flags & exports.InjectFlags.Optional) {\n            return notFoundValue;\n        }\n        else {\n            throw new Error(\"NodeInjector: NOT_FOUND [\" + stringifyForError(token) + \"]\");\n        }\n    }\n    var NOT_FOUND = {};\n    function searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode) {\n        var currentTView = lView[TVIEW];\n        var tNode = currentTView.data[injectorIndex + TNODE];\n        // First, we need to determine if view providers can be accessed by the starting element.\n        // There are two possibities\n        var canAccessViewProviders = previousTView == null ?\n            // 1) This is the first invocation `previousTView == null` which means that we are at the\n            // `TNode` of where injector is starting to look. In such a case the only time we are allowed\n            // to look into the ViewProviders is if:\n            // - we are on a component\n            // - AND the injector set `includeViewProviders` to true (implying that the token can see\n            // ViewProviders because it is the Component or a Service which itself was declared in\n            // ViewProviders)\n            (isComponent(tNode) && includeViewProviders) :\n            // 2) `previousTView != null` which means that we are now walking across the parent nodes.\n            // In such a case we are only allowed to look into the ViewProviders if:\n            // - We just crossed from child View to Parent View `previousTView != currentTView`\n            // - AND the parent TNode is an Element.\n            // This means that we just came from the Component's View and therefore are allowed to see\n            // into the ViewProviders.\n            (previousTView != currentTView && (tNode.type === 3 /* Element */));\n        // This special case happens when there is a @host on the inject and when we are searching\n        // on the host element node.\n        var isHostSpecialCase = (flags & exports.InjectFlags.Host) && hostTElementNode === tNode;\n        var injectableIdx = locateDirectiveOrProvider(tNode, currentTView, token, canAccessViewProviders, isHostSpecialCase);\n        if (injectableIdx !== null) {\n            return getNodeInjectable(currentTView.data, lView, injectableIdx, tNode);\n        }\n        else {\n            return NOT_FOUND;\n        }\n    }\n    /**\n     * Searches for the given token among the node's directives and providers.\n     *\n     * @param tNode TNode on which directives are present.\n     * @param tView The tView we are currently processing\n     * @param token Provider token or type of a directive to look for.\n     * @param canAccessViewProviders Whether view providers should be considered.\n     * @param isHostSpecialCase Whether the host special case applies.\n     * @returns Index of a found directive or provider, or null when none found.\n     */\n    function locateDirectiveOrProvider(tNode, tView, token, canAccessViewProviders, isHostSpecialCase) {\n        var nodeProviderIndexes = tNode.providerIndexes;\n        var tInjectables = tView.data;\n        var injectablesStart = nodeProviderIndexes & 65535 /* ProvidersStartIndexMask */;\n        var directivesStart = tNode.directiveStart;\n        var directiveEnd = tNode.directiveEnd;\n        var cptViewProvidersCount = nodeProviderIndexes >> 16 /* CptViewProvidersCountShift */;\n        var startingIndex = canAccessViewProviders ? injectablesStart : injectablesStart + cptViewProvidersCount;\n        // When the host special case applies, only the viewProviders and the component are visible\n        var endIndex = isHostSpecialCase ? injectablesStart + cptViewProvidersCount : directiveEnd;\n        for (var i = startingIndex; i < endIndex; i++) {\n            var providerTokenOrDef = tInjectables[i];\n            if (i < directivesStart && token === providerTokenOrDef ||\n                i >= directivesStart && providerTokenOrDef.type === token) {\n                return i;\n            }\n        }\n        if (isHostSpecialCase) {\n            var dirDef = tInjectables[directivesStart];\n            if (dirDef && isComponentDef(dirDef) && dirDef.type === token) {\n                return directivesStart;\n            }\n        }\n        return null;\n    }\n    /**\n    * Retrieve or instantiate the injectable from the `lData` at particular `index`.\n    *\n    * This function checks to see if the value has already been instantiated and if so returns the\n    * cached `injectable`. Otherwise if it detects that the value is still a factory it\n    * instantiates the `injectable` and caches the value.\n    */\n    function getNodeInjectable(tData, lData, index, tNode) {\n        var value = lData[index];\n        if (isFactory(value)) {\n            var factory = value;\n            if (factory.resolving) {\n                throw new Error(\"Circular dep for \" + stringifyForError(tData[index]));\n            }\n            var previousIncludeViewProviders = setIncludeViewProviders(factory.canSeeViewProviders);\n            factory.resolving = true;\n            var previousInjectImplementation = void 0;\n            if (factory.injectImpl) {\n                previousInjectImplementation = setInjectImplementation(factory.injectImpl);\n            }\n            var savePreviousOrParentTNode = getPreviousOrParentTNode();\n            var saveLView = getLView();\n            setTNodeAndViewData(tNode, lData);\n            try {\n                value = lData[index] = factory.factory(undefined, tData, lData, tNode);\n            }\n            finally {\n                if (factory.injectImpl)\n                    setInjectImplementation(previousInjectImplementation);\n                setIncludeViewProviders(previousIncludeViewProviders);\n                factory.resolving = false;\n                setTNodeAndViewData(savePreviousOrParentTNode, saveLView);\n            }\n        }\n        return value;\n    }\n    /**\n     * Returns the bit in an injector's bloom filter that should be used to determine whether or not\n     * the directive might be provided by the injector.\n     *\n     * When a directive is public, it is added to the bloom filter and given a unique ID that can be\n     * retrieved on the Type. When the directive isn't public or the token is not a directive `null`\n     * is returned as the node injector can not possibly provide that token.\n     *\n     * @param token the injection token\n     * @returns the matching bit to check in the bloom filter or `null` if the token is not known.\n     *   When the returned value is negative then it represents special values such as `Injector`.\n     */\n    function bloomHashBitOrFactory(token) {\n        ngDevMode && assertDefined(token, 'token must be defined');\n        if (typeof token === 'string') {\n            return token.charCodeAt(0) || 0;\n        }\n        var tokenId = token[NG_ELEMENT_ID];\n        // Negative token IDs are used for special objects such as `Injector`\n        return (typeof tokenId === 'number' && tokenId > 0) ? tokenId & BLOOM_MASK : tokenId;\n    }\n    function bloomHasToken(bloomHash, injectorIndex, injectorView) {\n        // Create a mask that targets the specific bit associated with the directive we're looking for.\n        // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\n        // to bit positions 0 - 31 in a 32 bit integer.\n        var mask = 1 << bloomHash;\n        var b7 = bloomHash & 0x80;\n        var b6 = bloomHash & 0x40;\n        var b5 = bloomHash & 0x20;\n        // Our bloom filter size is 256 bits, which is eight 32-bit bloom filter buckets:\n        // bf0 = [0 - 31], bf1 = [32 - 63], bf2 = [64 - 95], bf3 = [96 - 127], etc.\n        // Get the bloom filter value from the appropriate bucket based on the directive's bloomBit.\n        var value;\n        if (b7) {\n            value = b6 ? (b5 ? injectorView[injectorIndex + 7] : injectorView[injectorIndex + 6]) :\n                (b5 ? injectorView[injectorIndex + 5] : injectorView[injectorIndex + 4]);\n        }\n        else {\n            value = b6 ? (b5 ? injectorView[injectorIndex + 3] : injectorView[injectorIndex + 2]) :\n                (b5 ? injectorView[injectorIndex + 1] : injectorView[injectorIndex]);\n        }\n        // If the bloom filter value has the bit corresponding to the directive's bloomBit flipped on,\n        // this injector is a potential match.\n        return !!(value & mask);\n    }\n    /** Returns true if flags prevent parent injector from being searched for tokens */\n    function shouldSearchParent(flags, isFirstHostTNode) {\n        return !(flags & exports.InjectFlags.Self) && !(flags & exports.InjectFlags.Host && isFirstHostTNode);\n    }\n    var NodeInjector = /** @class */ (function () {\n        function NodeInjector(_tNode, _lView) {\n            this._tNode = _tNode;\n            this._lView = _lView;\n        }\n        NodeInjector.prototype.get = function (token, notFoundValue) {\n            return getOrCreateInjectable(this._tNode, this._lView, token, undefined, notFoundValue);\n        };\n        return NodeInjector;\n    }());\n    /**\n     * @codeGenApi\n     */\n    function ɵɵgetFactoryOf(type) {\n        var typeAny = type;\n        var def = getComponentDef(typeAny) || getDirectiveDef(typeAny) ||\n            getPipeDef(typeAny) || getInjectableDef(typeAny) || getInjectorDef(typeAny);\n        if (!def || def.factory === undefined) {\n            return null;\n        }\n        return def.factory;\n    }\n    /**\n     * @codeGenApi\n     */\n    function ɵɵgetInheritedFactory(type) {\n        var proto = Object.getPrototypeOf(type.prototype).constructor;\n        var factory = ɵɵgetFactoryOf(proto);\n        if (factory !== null) {\n            return factory;\n        }\n        else {\n            // There is no factory defined. Either this was improper usage of inheritance\n            // (no Angular decorator on the superclass) or there is no constructor at all\n            // in the inheritance chain. Since the two cases cannot be distinguished, the\n            // latter has to be assumed.\n            return function (t) { return new t(); };\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function getDebugContext(error) {\n        return error[ERROR_DEBUG_CONTEXT];\n    }\n    function getOriginalError(error) {\n        return error[ERROR_ORIGINAL_ERROR];\n    }\n    function getErrorLogger(error) {\n        return error[ERROR_LOGGER] || defaultErrorLogger;\n    }\n    function defaultErrorLogger(console) {\n        var values = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            values[_i - 1] = arguments[_i];\n        }\n        console.error.apply(console, __spread(values));\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Provides a hook for centralized exception handling.\n     *\n     * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n     * intercept error handling, write a custom exception handler that replaces this default as\n     * appropriate for your app.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```\n     * class MyErrorHandler implements ErrorHandler {\n     *   handleError(error) {\n     *     // do something with the exception\n     *   }\n     * }\n     *\n     * @NgModule({\n     *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n     * })\n     * class MyModule {}\n     * ```\n     *\n     * @publicApi\n     */\n    var ErrorHandler = /** @class */ (function () {\n        function ErrorHandler() {\n            /**\n             * @internal\n             */\n            this._console = console;\n        }\n        ErrorHandler.prototype.handleError = function (error) {\n            var originalError = this._findOriginalError(error);\n            var context = this._findContext(error);\n            // Note: Browser consoles show the place from where console.error was called.\n            // We can use this to give users additional information about the error.\n            var errorLogger = getErrorLogger(error);\n            errorLogger(this._console, \"ERROR\", error);\n            if (originalError) {\n                errorLogger(this._console, \"ORIGINAL ERROR\", originalError);\n            }\n            if (context) {\n                errorLogger(this._console, 'ERROR CONTEXT', context);\n            }\n        };\n        /** @internal */\n        ErrorHandler.prototype._findContext = function (error) {\n            if (error) {\n                return getDebugContext(error) ? getDebugContext(error) :\n                    this._findContext(getOriginalError(error));\n            }\n            return null;\n        };\n        /** @internal */\n        ErrorHandler.prototype._findOriginalError = function (error) {\n            var e = getOriginalError(error);\n            while (e && getOriginalError(e)) {\n                e = getOriginalError(e);\n            }\n            return e;\n        };\n        return ErrorHandler;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Defines a schema that allows an NgModule to contain the following:\n     * - Non-Angular elements named with dash case (`-`).\n     * - Element properties named with dash case (`-`).\n     * Dash case is the naming convention for custom elements.\n     *\n     * @publicApi\n     */\n    var CUSTOM_ELEMENTS_SCHEMA = {\n        name: 'custom-elements'\n    };\n    /**\n     * Defines a schema that allows any property on any element.\n     *\n     * @publicApi\n     */\n    var NO_ERRORS_SCHEMA = {\n        name: 'no-errors-schema'\n    };\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * THIS FILE CONTAINS CODE WHICH SHOULD BE TREE SHAKEN AND NEVER CALLED FROM PRODUCTION CODE!!!\n     */\n    /**\n     * Creates an `Array` construction with a given name. This is useful when\n     * looking for memory consumption to see what time of array it is.\n     *\n     *\n     * @param name Name to give to the constructor\n     * @returns A subclass of `Array` if possible. This can only be done in\n     *          environments which support `class` construct.\n     */\n    function createNamedArrayType(name) {\n        // This should never be called in prod mode, so let's verify that is the case.\n        if (ngDevMode) {\n            try {\n                // We need to do it this way so that TypeScript does not down-level the below code.\n                var FunctionConstructor = createNamedArrayType.constructor;\n                return (new FunctionConstructor('Array', \"return class ABC extends Array{}\"))(Array);\n            }\n            catch (e) {\n                // If it does not work just give up and fall back to regular Array.\n                return Array;\n            }\n        }\n        else {\n            throw new Error('Looks like we are in \\'prod mode\\', but we are creating a named Array type, which is wrong! Check your code');\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function normalizeDebugBindingName(name) {\n        // Attribute names with `$` (eg `x-y$`) are valid per spec, but unsupported by some browsers\n        name = camelCaseToDashCase(name.replace(/[$@]/g, '_'));\n        return \"ng-reflect-\" + name;\n    }\n    var CAMEL_CASE_REGEXP = /([A-Z])/g;\n    function camelCaseToDashCase(input) {\n        return input.replace(CAMEL_CASE_REGEXP, function () {\n            var m = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                m[_i] = arguments[_i];\n            }\n            return '-' + m[1].toLowerCase();\n        });\n    }\n    function normalizeDebugBindingValue(value) {\n        try {\n            // Limit the size of the value as otherwise the DOM just gets polluted.\n            return value != null ? value.toString().slice(0, 30) : value;\n        }\n        catch (e) {\n            return '[ERROR] Exception while trying to serialize the value';\n        }\n    }\n\n    // Note: This hack is necessary so we don't erroneously get a circular dependency\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** A special value which designates that a value has not changed. */\n    var NO_CHANGE = {};\n\n    /*\n     * This file contains the logic to defer all hostBindings-related styling code to run\n     * at a later point, instead of immediately (as is the case with how template-level\n     * styling instructions are run).\n     *\n     * Certain styling instructions, present within directives, components and sub-classed\n     * directives, are evaluated at different points (depending on priority) and will therefore\n     * not be applied to the styling context of an element immediately. They are instead\n     * designed to be applied just before styling is applied to an element.\n     *\n     * (The priority for when certain host-related styling operations are executed is discussed\n     * more within `interfaces/styling.ts`.)\n     */\n    function registerHostDirective(context, directiveIndex) {\n        var buffer = context[8 /* HostInstructionsQueue */];\n        if (!buffer) {\n            buffer = context[8 /* HostInstructionsQueue */] = [DEFAULT_TEMPLATE_DIRECTIVE_INDEX];\n        }\n        buffer[0 /* LastRegisteredDirectiveIndexPosition */] = directiveIndex;\n    }\n    /**\n     * Queues a styling instruction to be run just before `renderStyling()` is executed.\n     */\n    function enqueueHostInstruction(context, priority, instructionFn, instructionFnArgs) {\n        var buffer = context[8 /* HostInstructionsQueue */];\n        // Buffer may be null if host element is a template node. In this case, just ignore the style.\n        if (buffer != null) {\n            var index = findNextInsertionIndex(buffer, priority);\n            buffer.splice(index, 0, priority, instructionFn, instructionFnArgs);\n        }\n    }\n    /**\n     * Figures out where exactly to to insert the next host instruction queue entry.\n     */\n    function findNextInsertionIndex(buffer, priority) {\n        for (var i = 1 /* ValuesStartPosition */; i < buffer.length; i += 3 /* Size */) {\n            var p = buffer[i + 0 /* DirectiveIndexOffset */];\n            if (p > priority) {\n                return i;\n            }\n        }\n        return buffer.length;\n    }\n    /**\n     * Iterates through the host instructions queue (if present within the provided\n     * context) and executes each queued instruction entry.\n     */\n    function flushQueue(context) {\n        var buffer = context[8 /* HostInstructionsQueue */];\n        if (buffer) {\n            for (var i = 1 /* ValuesStartPosition */; i < buffer.length; i += 3 /* Size */) {\n                var fn = buffer[i + 1 /* InstructionFnOffset */];\n                var args = buffer[i + 2 /* ParamsOffset */];\n                fn.apply(this, args);\n            }\n            buffer.length = 1 /* ValuesStartPosition */;\n        }\n    }\n    /**\n     * Determines whether or not to allow the host instructions queue to be flushed or not.\n     *\n     * Because the hostBindings function code is unaware of the presence of other host bindings\n     * (as well as the template function) then styling is evaluated multiple times per element.\n     * To prevent style and class values from being applied to the element multiple times, a\n     * flush is only allowed when the last directive (the directive that was registered into\n     * the styling context) attempts to render its styling.\n     */\n    function allowFlush(context, directiveIndex) {\n        var buffer = context[8 /* HostInstructionsQueue */];\n        if (buffer) {\n            return buffer[0 /* LastRegisteredDirectiveIndexPosition */] ===\n                directiveIndex;\n        }\n        return true;\n    }\n\n    /**\n     * Combines the binding value and a factory for an animation player.\n     *\n     * Used to bind a player to an element template binding (currently only\n     * `[style]`, `[style.prop]`, `[class]` and `[class.name]` bindings\n     * supported). The provided `factoryFn` function will be run once all\n     * the associated bindings have been evaluated on the element and is\n     * designed to return a player which will then be placed on the element.\n     *\n     * @param factoryFn The function that is used to create a player\n     *   once all the rendering-related (styling values) have been\n     *   processed for the element binding.\n     * @param value The raw value that will be exposed to the binding\n     *   so that the binding can update its internal values when\n     *   any changes are evaluated.\n     */\n    function bindPlayerFactory(factoryFn, value) {\n        return new BoundPlayerFactory(factoryFn, value);\n    }\n    var BoundPlayerFactory = /** @class */ (function () {\n        function BoundPlayerFactory(fn, value) {\n            this.fn = fn;\n            this.value = value;\n        }\n        return BoundPlayerFactory;\n    }());\n\n    /**\n     * This file includes the code to power all styling-binding operations in Angular.\n     *\n     * These include:\n     * [style]=\"myStyleObj\"\n     * [class]=\"myClassObj\"\n     * [style.prop]=\"myPropValue\"\n     * [class.name]=\"myClassValue\"\n     *\n     * It also includes code that will allow style binding code to operate within host\n     * bindings for components/directives.\n     *\n     * There are many different ways in which these functions below are called. Please see\n     * `render3/interfaces/styling.ts` to get a better idea of how the styling algorithm works.\n     */\n    /**\n     * Creates a new StylingContext an fills it with the provided static styling attribute values.\n     */\n    function initializeStaticContext(attrs, stylingStartIndex, directiveIndex) {\n        if (directiveIndex === void 0) { directiveIndex = 0; }\n        var context = createEmptyStylingContext();\n        patchContextWithStaticAttrs(context, attrs, stylingStartIndex, directiveIndex);\n        return context;\n    }\n    /**\n     * Designed to update an existing styling context with new static styling\n     * data (classes and styles).\n     *\n     * @param context the existing styling context\n     * @param attrs an array of new static styling attributes that will be\n     *              assigned to the context\n     * @param attrsStylingStartIndex what index to start iterating within the\n     *              provided `attrs` array to start reading style and class values\n     */\n    function patchContextWithStaticAttrs(context, attrs, attrsStylingStartIndex, directiveIndex) {\n        // this means the context has already been set and instantiated\n        if (context[1 /* MasterFlagPosition */] & 16 /* BindingAllocationLocked */)\n            return;\n        allocateOrUpdateDirectiveIntoContext(context, directiveIndex);\n        var initialClasses = null;\n        var initialStyles = null;\n        var mode = -1;\n        for (var i = attrsStylingStartIndex; i < attrs.length; i++) {\n            var attr = attrs[i];\n            if (typeof attr == 'number') {\n                mode = attr;\n            }\n            else if (mode == 1 /* Classes */) {\n                initialClasses = initialClasses || context[4 /* InitialClassValuesPosition */];\n                patchInitialStylingValue(initialClasses, attr, true, directiveIndex);\n            }\n            else if (mode == 2 /* Styles */) {\n                initialStyles = initialStyles || context[3 /* InitialStyleValuesPosition */];\n                patchInitialStylingValue(initialStyles, attr, attrs[++i], directiveIndex);\n            }\n        }\n    }\n    /**\n     * Designed to add a style or class value into the existing set of initial styles.\n     *\n     * The function will search and figure out if a style/class value is already present\n     * within the provided initial styling array. If and when a style/class value is\n     * present (allocated) then the code below will set the new value depending on the\n     * following cases:\n     *\n     *  1) if the existing value is falsy (this happens because a `[class.prop]` or\n     *     `[style.prop]` binding was set, but there wasn't a matching static style\n     *     or class present on the context)\n     *  2) if the value was set already by the template, component or directive, but the\n     *     new value is set on a higher level (i.e. a sub component which extends a parent\n     *     component sets its value after the parent has already set the same one)\n     *  3) if the same directive provides a new set of styling values to set\n     *\n     * @param initialStyling the initial styling array where the new styling entry will be added to\n     * @param prop the property value of the new entry (e.g. `width` (styles) or `foo` (classes))\n     * @param value the styling value of the new entry (e.g. `absolute` (styles) or `true` (classes))\n     * @param directiveOwnerIndex the directive owner index value of the styling source responsible\n     *        for these styles (see `interfaces/styling.ts#directives` for more info)\n     */\n    function patchInitialStylingValue(initialStyling, prop, value, directiveOwnerIndex) {\n        for (var i = 2 /* KeyValueStartPosition */; i < initialStyling.length; i += 3 /* Size */) {\n            var key = initialStyling[i + 0 /* PropOffset */];\n            if (key === prop) {\n                var existingValue = initialStyling[i + 1 /* ValueOffset */];\n                var existingOwner = initialStyling[i + 2 /* DirectiveOwnerOffset */];\n                if (allowValueChange(existingValue, value, existingOwner, directiveOwnerIndex)) {\n                    addOrUpdateStaticStyle(i, initialStyling, prop, value, directiveOwnerIndex);\n                }\n                return;\n            }\n        }\n        // We did not find existing key, add a new one.\n        addOrUpdateStaticStyle(null, initialStyling, prop, value, directiveOwnerIndex);\n    }\n    /**\n     * Runs through the initial class values present in the provided\n     * context and renders them via the provided renderer on the element.\n     *\n     * @param element the element the styling will be applied to\n     * @param context the source styling context which contains the initial class values\n     * @param renderer the renderer instance that will be used to apply the class\n     * @returns the index that the classes were applied up until\n     */\n    function renderInitialClasses(element, context, renderer, startIndex) {\n        var initialClasses = context[4 /* InitialClassValuesPosition */];\n        var i = startIndex || 2 /* KeyValueStartPosition */;\n        while (i < initialClasses.length) {\n            var value = initialClasses[i + 1 /* ValueOffset */];\n            if (value) {\n                setClass(element, initialClasses[i + 0 /* PropOffset */], true, renderer, null);\n            }\n            i += 3 /* Size */;\n        }\n        return i;\n    }\n    /**\n     * Runs through the initial styles values present in the provided\n     * context and renders them via the provided renderer on the element.\n     *\n     * @param element the element the styling will be applied to\n     * @param context the source styling context which contains the initial class values\n     * @param renderer the renderer instance that will be used to apply the class\n     * @returns the index that the styles were applied up until\n     */\n    function renderInitialStyles(element, context, renderer, startIndex) {\n        var initialStyles = context[3 /* InitialStyleValuesPosition */];\n        var i = startIndex || 2 /* KeyValueStartPosition */;\n        while (i < initialStyles.length) {\n            var value = initialStyles[i + 1 /* ValueOffset */];\n            if (value) {\n                setStyle(element, initialStyles[i + 0 /* PropOffset */], value, renderer, null);\n            }\n            i += 3 /* Size */;\n        }\n        return i;\n    }\n    /**\n     * Adds in new binding values to a styling context.\n     *\n     * If a directive value is provided then all provided class/style binding names will\n     * reference the provided directive.\n     *\n     * @param context the existing styling context\n     * @param classBindingNames an array of class binding names that will be added to the context\n     * @param styleBindingNames an array of style binding names that will be added to the context\n     * @param styleSanitizer an optional sanitizer that handle all sanitization on for each of\n     *    the bindings added to the context. Note that if a directive is provided then the sanitizer\n     *    instance will only be active if and when the directive updates the bindings that it owns.\n     */\n    function updateContextWithBindings(context, directiveIndex, classBindingNames, styleBindingNames, styleSanitizer) {\n        if (context[1 /* MasterFlagPosition */] & 16 /* BindingAllocationLocked */)\n            return;\n        // this means the context has already been patched with the directive's bindings\n        var isNewDirective = findOrPatchDirectiveIntoRegistry(context, directiveIndex, false, styleSanitizer);\n        if (!isNewDirective) {\n            // this means the directive has already been patched in ... No point in doing anything\n            return;\n        }\n        if (styleBindingNames) {\n            styleBindingNames = hyphenateEntries(styleBindingNames);\n        }\n        // there are alot of variables being used below to track where in the context the new\n        // binding values will be placed. Because the context consists of multiple types of\n        // entries (single classes/styles and multi classes/styles) alot of the index positions\n        // need to be computed ahead of time and the context needs to be extended before the values\n        // are inserted in.\n        var singlePropOffsetValues = context[5 /* SinglePropOffsetPositions */];\n        var totalCurrentClassBindings = singlePropOffsetValues[1 /* ClassesCountPosition */];\n        var totalCurrentStyleBindings = singlePropOffsetValues[0 /* StylesCountPosition */];\n        var cachedClassMapValues = context[6 /* CachedMultiClasses */];\n        var cachedStyleMapValues = context[7 /* CachedMultiStyles */];\n        var classesOffset = totalCurrentClassBindings * 4 /* Size */;\n        var stylesOffset = totalCurrentStyleBindings * 4 /* Size */;\n        var singleStylesStartIndex = 10 /* SingleStylesStartPosition */;\n        var singleClassesStartIndex = singleStylesStartIndex + stylesOffset;\n        var multiStylesStartIndex = singleClassesStartIndex + classesOffset;\n        var multiClassesStartIndex = multiStylesStartIndex + stylesOffset;\n        // because we're inserting more bindings into the context, this means that the\n        // binding values need to be referenced the singlePropOffsetValues array so that\n        // the template/directive can easily find them inside of the `styleProp`\n        // and the `classProp` functions without iterating through the entire context.\n        // The first step to setting up these reference points is to mark how many bindings\n        // are being added. Even if these bindings already exist in the context, the directive\n        // or template code will still call them unknowingly. Therefore the total values need\n        // to be registered so that we know how many bindings are assigned to each directive.\n        var currentSinglePropsLength = singlePropOffsetValues.length;\n        singlePropOffsetValues.push(styleBindingNames ? styleBindingNames.length : 0, classBindingNames ? classBindingNames.length : 0);\n        // the code below will check to see if a new style binding already exists in the context\n        // if so then there is no point in inserting it into the context again. Whether or not it\n        // exists the styling offset code will now know exactly where it is\n        var insertionOffset = 0;\n        var filteredStyleBindingNames = [];\n        if (styleBindingNames && styleBindingNames.length) {\n            for (var i_1 = 0; i_1 < styleBindingNames.length; i_1++) {\n                var name_1 = styleBindingNames[i_1];\n                var singlePropIndex = getMatchingBindingIndex(context, name_1, singleStylesStartIndex, singleClassesStartIndex);\n                if (singlePropIndex == -1) {\n                    singlePropIndex = singleClassesStartIndex + insertionOffset;\n                    insertionOffset += 4 /* Size */;\n                    filteredStyleBindingNames.push(name_1);\n                }\n                singlePropOffsetValues.push(singlePropIndex);\n            }\n        }\n        // just like with the style binding loop above, the new class bindings get the same treatment...\n        var filteredClassBindingNames = [];\n        if (classBindingNames && classBindingNames.length) {\n            for (var i_2 = 0; i_2 < classBindingNames.length; i_2++) {\n                var name_2 = classBindingNames[i_2];\n                var singlePropIndex = getMatchingBindingIndex(context, name_2, singleClassesStartIndex, multiStylesStartIndex);\n                if (singlePropIndex == -1) {\n                    singlePropIndex = multiStylesStartIndex + insertionOffset;\n                    insertionOffset += 4 /* Size */;\n                    filteredClassBindingNames.push(name_2);\n                }\n                else {\n                    singlePropIndex += filteredStyleBindingNames.length * 4 /* Size */;\n                }\n                singlePropOffsetValues.push(singlePropIndex);\n            }\n        }\n        // because new styles are being inserted, this means the existing collection of style offset\n        // index values are incorrect (they point to the wrong values). The code below will run through\n        // the entire offset array and update the existing set of index values to point to their new\n        // locations while taking the new binding values into consideration.\n        var i = 2 /* ValueStartPosition */;\n        if (filteredStyleBindingNames.length) {\n            while (i < currentSinglePropsLength) {\n                var totalStyles = singlePropOffsetValues[i + 0 /* StylesCountPosition */];\n                var totalClasses = singlePropOffsetValues[i + 1 /* ClassesCountPosition */];\n                if (totalClasses) {\n                    var start = i + 2 /* ValueStartPosition */ + totalStyles;\n                    for (var j = start; j < start + totalClasses; j++) {\n                        singlePropOffsetValues[j] += filteredStyleBindingNames.length * 4 /* Size */;\n                    }\n                }\n                var total = totalStyles + totalClasses;\n                i += 2 /* ValueStartPosition */ + total;\n            }\n        }\n        var totalNewEntries = filteredClassBindingNames.length + filteredStyleBindingNames.length;\n        // in the event that there are new style values being inserted, all existing class and style\n        // bindings need to have their pointer values offsetted with the new amount of space that is\n        // used for the new style/class bindings.\n        for (var i_3 = singleStylesStartIndex; i_3 < context.length; i_3 += 4 /* Size */) {\n            var isMultiBased = i_3 >= multiStylesStartIndex;\n            var isClassBased = i_3 >= (isMultiBased ? multiClassesStartIndex : singleClassesStartIndex);\n            var flag = getPointers(context, i_3);\n            var staticIndex = getInitialIndex(flag);\n            var singleOrMultiIndex = getMultiOrSingleIndex(flag);\n            if (isMultiBased) {\n                singleOrMultiIndex +=\n                    isClassBased ? (filteredStyleBindingNames.length * 4 /* Size */) : 0;\n            }\n            else {\n                singleOrMultiIndex += (totalNewEntries * 4 /* Size */) +\n                    ((isClassBased ? filteredStyleBindingNames.length : 0) * 4 /* Size */);\n            }\n            setFlag(context, i_3, pointers(flag, staticIndex, singleOrMultiIndex));\n        }\n        // this is where we make space in the context for the new style bindings\n        for (var i_4 = 0; i_4 < filteredStyleBindingNames.length * 4 /* Size */; i_4++) {\n            context.splice(multiClassesStartIndex, 0, null);\n            context.splice(singleClassesStartIndex, 0, null);\n            singleClassesStartIndex++;\n            multiStylesStartIndex++;\n            multiClassesStartIndex += 2; // both single + multi slots were inserted\n        }\n        // this is where we make space in the context for the new class bindings\n        for (var i_5 = 0; i_5 < filteredClassBindingNames.length * 4 /* Size */; i_5++) {\n            context.splice(multiStylesStartIndex, 0, null);\n            context.push(null);\n            multiStylesStartIndex++;\n            multiClassesStartIndex++;\n        }\n        var initialClasses = context[4 /* InitialClassValuesPosition */];\n        var initialStyles = context[3 /* InitialStyleValuesPosition */];\n        // the code below will insert each new entry into the context and assign the appropriate\n        // flags and index values to them. It's important this runs at the end of this function\n        // because the context, property offset and index values have all been computed just before.\n        for (var i_6 = 0; i_6 < totalNewEntries; i_6++) {\n            var entryIsClassBased = i_6 >= filteredStyleBindingNames.length;\n            var adjustedIndex = entryIsClassBased ? (i_6 - filteredStyleBindingNames.length) : i_6;\n            var propName = entryIsClassBased ? filteredClassBindingNames[adjustedIndex] :\n                filteredStyleBindingNames[adjustedIndex];\n            var multiIndex = void 0, singleIndex = void 0;\n            if (entryIsClassBased) {\n                multiIndex = multiClassesStartIndex +\n                    ((totalCurrentClassBindings + adjustedIndex) * 4 /* Size */);\n                singleIndex = singleClassesStartIndex +\n                    ((totalCurrentClassBindings + adjustedIndex) * 4 /* Size */);\n            }\n            else {\n                multiIndex =\n                    multiStylesStartIndex + ((totalCurrentStyleBindings + adjustedIndex) * 4 /* Size */);\n                singleIndex = singleStylesStartIndex +\n                    ((totalCurrentStyleBindings + adjustedIndex) * 4 /* Size */);\n            }\n            // if a property is not found in the initial style values list then it\n            // is ALWAYS added in case a follow-up directive introduces the same initial\n            // style/class value later on.\n            var initialValuesToLookup = entryIsClassBased ? initialClasses : initialStyles;\n            var indexForInitial = getInitialStylingValuesIndexOf(initialValuesToLookup, propName);\n            if (indexForInitial === -1) {\n                indexForInitial = addOrUpdateStaticStyle(null, initialValuesToLookup, propName, entryIsClassBased ? false : null, directiveIndex) +\n                    1 /* ValueOffset */;\n            }\n            else {\n                indexForInitial += 1 /* ValueOffset */;\n            }\n            var initialFlag = prepareInitialFlag(context, propName, entryIsClassBased, styleSanitizer || null);\n            setFlag(context, singleIndex, pointers(initialFlag, indexForInitial, multiIndex));\n            setProp(context, singleIndex, propName);\n            setValue(context, singleIndex, null);\n            setPlayerBuilderIndex(context, singleIndex, 0, directiveIndex);\n            setFlag(context, multiIndex, pointers(initialFlag, indexForInitial, singleIndex));\n            setProp(context, multiIndex, propName);\n            setValue(context, multiIndex, null);\n            setPlayerBuilderIndex(context, multiIndex, 0, directiveIndex);\n        }\n        // the total classes/style values are updated so the next time the context is patched\n        // additional style/class bindings from another directive then it knows exactly where\n        // to insert them in the context\n        singlePropOffsetValues[1 /* ClassesCountPosition */] =\n            totalCurrentClassBindings + filteredClassBindingNames.length;\n        singlePropOffsetValues[0 /* StylesCountPosition */] =\n            totalCurrentStyleBindings + filteredStyleBindingNames.length;\n        // the map-based values also need to know how many entries got inserted\n        cachedClassMapValues[0 /* EntriesCountPosition */] +=\n            filteredClassBindingNames.length;\n        cachedStyleMapValues[0 /* EntriesCountPosition */] +=\n            filteredStyleBindingNames.length;\n        var newStylesSpaceAllocationSize = filteredStyleBindingNames.length * 4 /* Size */;\n        var newClassesSpaceAllocationSize = filteredClassBindingNames.length * 4 /* Size */;\n        // update the multi styles cache with a reference for the directive that was just inserted\n        var directiveMultiStylesStartIndex = multiStylesStartIndex + totalCurrentStyleBindings * 4 /* Size */;\n        var cachedStyleMapIndex = cachedStyleMapValues.length;\n        registerMultiMapEntry(context, directiveIndex, false, directiveMultiStylesStartIndex, filteredStyleBindingNames.length);\n        for (var i_7 = 1 /* ValuesStartPosition */; i_7 < cachedStyleMapIndex; i_7 += 4 /* Size */) {\n            // multi values start after all the single values (which is also where classes are) in the\n            // context therefore the new class allocation size should be taken into account\n            cachedStyleMapValues[i_7 + 1 /* PositionStartOffset */] +=\n                newClassesSpaceAllocationSize + newStylesSpaceAllocationSize;\n        }\n        // update the multi classes cache with a reference for the directive that was just inserted\n        var directiveMultiClassesStartIndex = multiClassesStartIndex + totalCurrentClassBindings * 4 /* Size */;\n        var cachedClassMapIndex = cachedClassMapValues.length;\n        registerMultiMapEntry(context, directiveIndex, true, directiveMultiClassesStartIndex, filteredClassBindingNames.length);\n        for (var i_8 = 1 /* ValuesStartPosition */; i_8 < cachedClassMapIndex; i_8 += 4 /* Size */) {\n            // the reason why both the styles + classes space is allocated to the existing offsets is\n            // because the styles show up before the classes in the context and any new inserted\n            // styles will offset any existing class entries in the context (even if there are no\n            // new class entries added) also the reason why it's *2 is because both single + multi\n            // entries for each new style have been added in the context before the multi class values\n            // actually start\n            cachedClassMapValues[i_8 + 1 /* PositionStartOffset */] +=\n                (newStylesSpaceAllocationSize * 2) + newClassesSpaceAllocationSize;\n        }\n        // there is no initial value flag for the master index since it doesn't\n        // reference an initial style value\n        var masterFlag = pointers(0, 0, multiStylesStartIndex);\n        setFlag(context, 1 /* MasterFlagPosition */, masterFlag);\n    }\n    /**\n     * Searches through the existing registry of directives\n     */\n    function findOrPatchDirectiveIntoRegistry(context, directiveIndex, staticModeOnly, styleSanitizer) {\n        var directiveRegistry = context[2 /* DirectiveRegistryPosition */];\n        var index = directiveIndex * 2 /* Size */;\n        var singlePropStartPosition = index + 0 /* SinglePropValuesIndexOffset */;\n        // this means that the directive has already been registered into the registry\n        if (index < directiveRegistry.length &&\n            directiveRegistry[singlePropStartPosition] >= 0)\n            return false;\n        var singlePropsStartIndex = staticModeOnly ? -1 : context[5 /* SinglePropOffsetPositions */].length;\n        allocateOrUpdateDirectiveIntoContext(context, directiveIndex, singlePropsStartIndex, styleSanitizer);\n        return true;\n    }\n    function getMatchingBindingIndex(context, bindingName, start, end) {\n        for (var j = start; j < end; j += 4 /* Size */) {\n            if (getProp(context, j) === bindingName)\n                return j;\n        }\n        return -1;\n    }\n    /**\n     * Registers the provided multi class values to the context.\n     *\n     * This function will iterate over the provided `classesInput` values and\n     * insert/update or remove them from the context at exactly the right spot.\n     *\n     * This function also takes in a directive which implies that the styling values will\n     * be evaluated for that directive with respect to any other styling that already exists\n     * on the context. When there are styles that conflict (e.g. say `ngClass` and `[class]`\n     * both update the `foo` className value at the same time) then the styling algorithm code below\n     * will decide which one wins based on the directive styling prioritization mechanism. (This\n     * mechanism is better explained in render3/interfaces/styling.ts#directives).\n     *\n     * This function will not render any styling values on screen, but is rather designed to\n     * prepare the context for that. `renderStyling` must be called afterwards to render any\n     * styling data that was set in this function (note that `updateClassProp` and\n     * `updateStyleProp` are designed to be run after this function is run).\n     *\n     * @param context The styling context that will be updated with the\n     *    newly provided style values.\n     * @param classesInput The key/value map of CSS class names that will be used for the update.\n     * @param stylesInput The key/value map of CSS styles that will be used for the update.\n     */\n    function updateClassMap(context, classesInput, directiveIndex) {\n        if (directiveIndex === void 0) { directiveIndex = 0; }\n        updateStylingMap(context, classesInput, true, directiveIndex);\n    }\n    /**\n     * Registers the provided multi style values to the context.\n     *\n     * This function will iterate over the provided `stylesInput` values and\n     * insert/update or remove them from the context at exactly the right spot.\n     *\n     * This function also takes in a directive which implies that the styling values will\n     * be evaluated for that directive with respect to any other styling that already exists\n     * on the context. When there are styles that conflict (e.g. say `ngStyle` and `[style]`\n     * both update the `width` property at the same time) then the styling algorithm code below\n     * will decide which one wins based on the directive styling prioritization mechanism. (This\n     * mechanism is better explained in render3/interfaces/styling.ts#directives).\n     *\n     * This function will not render any styling values on screen, but is rather designed to\n     * prepare the context for that. `renderStyling` must be called afterwards to render any\n     * styling data that was set in this function (note that `updateClassProp` and\n     * `updateStyleProp` are designed to be run after this function is run).\n     *\n     * @param context The styling context that will be updated with the\n     *    newly provided style values.\n     * @param stylesInput The key/value map of CSS styles that will be used for the update.\n     */\n    function updateStyleMap(context, stylesInput, directiveIndex) {\n        if (directiveIndex === void 0) { directiveIndex = 0; }\n        updateStylingMap(context, stylesInput, false, directiveIndex);\n    }\n    function updateStylingMap(context, input, entryIsClassBased, directiveIndex) {\n        if (directiveIndex === void 0) { directiveIndex = 0; }\n        ngDevMode && (entryIsClassBased ? ngDevMode.classMap++ : ngDevMode.styleMap++);\n        ngDevMode && assertValidDirectiveIndex(context, directiveIndex);\n        // early exit (this is what's done to avoid using ctx.bind() to cache the value)\n        if (isMultiValueCacheHit(context, entryIsClassBased, directiveIndex, input))\n            return;\n        input =\n            input === NO_CHANGE ? readCachedMapValue(context, entryIsClassBased, directiveIndex) : input;\n        var element = context[0 /* ElementPosition */];\n        var playerBuilder = input instanceof BoundPlayerFactory ?\n            new ClassAndStylePlayerBuilder(input, element, entryIsClassBased ? 1 /* Class */ : 2 /* Style */) :\n            null;\n        var rawValue = playerBuilder ? input.value : input;\n        // the position is always the same, but whether the player builder gets set\n        // at all (depending if its set) will be reflected in the index value below...\n        var playerBuilderPosition = entryIsClassBased ? 1 /* ClassMapPlayerBuilderPosition */ :\n            3 /* StyleMapPlayerBuilderPosition */;\n        var playerBuilderIndex = playerBuilder ? playerBuilderPosition : 0;\n        var playerBuildersAreDirty = false;\n        if (hasPlayerBuilderChanged(context, playerBuilder, playerBuilderPosition)) {\n            setPlayerBuilder(context, playerBuilder, playerBuilderPosition);\n            playerBuildersAreDirty = true;\n        }\n        // each time a string-based value pops up then it shouldn't require a deep\n        // check of what's changed.\n        var startIndex;\n        var endIndex;\n        var propNames;\n        var applyAll = false;\n        if (entryIsClassBased) {\n            if (typeof rawValue == 'string') {\n                propNames = rawValue.split(/\\s+/);\n                // this boolean is used to avoid having to create a key/value map of `true` values\n                // since a className string implies that all those classes are added\n                applyAll = true;\n            }\n            else {\n                propNames = rawValue ? Object.keys(rawValue) : EMPTY_ARRAY$1;\n            }\n            startIndex = getMultiClassesStartIndex(context);\n            endIndex = context.length;\n        }\n        else {\n            startIndex = getMultiStylesStartIndex(context);\n            endIndex = getMultiClassesStartIndex(context);\n            propNames = rawValue ? Object.keys(rawValue) : EMPTY_ARRAY$1;\n        }\n        var values = (rawValue || EMPTY_OBJ);\n        patchStylingMapIntoContext(context, directiveIndex, playerBuilderIndex, startIndex, endIndex, propNames, applyAll || values, input, entryIsClassBased);\n        if (playerBuildersAreDirty) {\n            setContextPlayersDirty(context, true);\n        }\n        ngDevMode && (entryIsClassBased ? ngDevMode.classMapCacheMiss++ : ngDevMode.styleMapCacheMiss++);\n    }\n    /**\n     * Applies the given multi styling (styles or classes) values to the context.\n     *\n     * The styling algorithm code that applies multi-level styling (things like `[style]` and `[class]`\n     * values) resides here.\n     *\n     * Because this function understands that multiple directives may all write to the `[style]` and\n     * `[class]` bindings (through host bindings), it relies of each directive applying its binding\n     * value in order. This means that a directive like `classADirective` will always fire before\n     * `classBDirective` and therefore its styling values (classes and styles) will always be evaluated\n     * in the same order. Because of this consistent ordering, the first directive has a higher priority\n     * than the second one. It is with this prioritzation mechanism that the styling algorithm knows how\n     * to merge and apply redudant styling properties.\n     *\n     * The function itself applies the key/value entries (or an array of keys) to\n     * the context in the following steps.\n     *\n     * STEP 1:\n     *    First check to see what properties are already set and in use by another directive in the\n     *    context (e.g. `ngClass` set the `width` value and `[style.width]=\"w\"` in a directive is\n     *    attempting to set it as well).\n     *\n     * STEP 2:\n     *    All remaining properties (that were not set prior to this directive) are now updated in\n     *    the context. Any new properties are inserted exactly at their spot in the context and any\n     *    previously set properties are shifted to exactly where the cursor sits while iterating over\n     *    the context. The end result is a balanced context that includes the exact ordering of the\n     *    styling properties/values for the provided input from the directive.\n     *\n     * STEP 3:\n     *    Any unmatched properties in the context that belong to the directive are set to null\n     *\n     * Once the updating phase is done, then the algorithm will decide whether or not to flag the\n     * follow-up directives (the directives that will pass in their styling values) depending on if\n     * the \"shape\" of the multi-value map has changed (either if any keys are removed or added or\n     * if there are any new `null` values). If any follow-up directives are flagged as dirty then the\n     * algorithm will run again for them. Otherwise if the shape did not change then any follow-up\n     * directives will not run (so long as their binding values stay the same).\n     *\n     * @returns the total amount of new slots that were allocated into the context due to new styling\n     *          properties that were detected.\n     */\n    function patchStylingMapIntoContext(context, directiveIndex, playerBuilderIndex, ctxStart, ctxEnd, props, values, cacheValue, entryIsClassBased) {\n        var dirty = false;\n        var cacheIndex = 1 /* ValuesStartPosition */ +\n            directiveIndex * 4 /* Size */;\n        // the cachedValues array is the registry of all multi style values (map values). Each\n        // value is stored (cached) each time is updated.\n        var cachedValues = context[entryIsClassBased ? 6 /* CachedMultiClasses */ : 7 /* CachedMultiStyles */];\n        // this is the index in which this directive has ownership access to write to this\n        // value (anything before is owned by a previous directive that is more important)\n        var ownershipValuesStartIndex = cachedValues[cacheIndex + 1 /* PositionStartOffset */];\n        var existingCachedValue = cachedValues[cacheIndex + 2 /* ValueOffset */];\n        var existingCachedValueCount = cachedValues[cacheIndex + 3 /* ValueCountOffset */];\n        var existingCachedValueIsDirty = cachedValues[cacheIndex + 0 /* DirtyFlagOffset */] === 1;\n        // A shape change means the provided map value has either removed or added new properties\n        // compared to what were in the last time. If a shape change occurs then it means that all\n        // follow-up multi-styling entries are obsolete and will be examined again when CD runs\n        // them. If a shape change has not occurred then there is no reason to check any other\n        // directive values if their identity has not changed. If a previous directive set this\n        // value as dirty (because its own shape changed) then this means that the object has been\n        // offset to a different area in the context. Because its value has been offset then it\n        // can't write to a region that it wrote to before (which may have been apart of another\n        // directive) and therefore its shape changes too.\n        var valuesEntryShapeChange = existingCachedValueIsDirty || ((!existingCachedValue && cacheValue) ? true : false);\n        var totalUniqueValues = 0;\n        var totalNewAllocatedSlots = 0;\n        // this is a trick to avoid building {key:value} map where all the values\n        // are `true` (this happens when a className string is provided instead of a\n        // map as an input value to this styling algorithm)\n        var applyAllProps = values === true;\n        // STEP 1:\n        // loop through the earlier directives and figure out if any properties here will be placed\n        // in their area (this happens when the value is null because the earlier directive erased it).\n        var ctxIndex = ctxStart;\n        var totalRemainingProperties = props.length;\n        while (ctxIndex < ownershipValuesStartIndex) {\n            var currentProp = getProp(context, ctxIndex);\n            if (totalRemainingProperties) {\n                for (var i = 0; i < props.length; i++) {\n                    var mapProp = props[i];\n                    var normalizedProp = mapProp ? (entryIsClassBased ? mapProp : hyphenate(mapProp)) : null;\n                    if (normalizedProp && currentProp === normalizedProp) {\n                        var currentValue = getValue(context, ctxIndex);\n                        var currentDirectiveIndex = getDirectiveIndexFromEntry(context, ctxIndex);\n                        var value = applyAllProps ? true : values[normalizedProp];\n                        var currentFlag = getPointers(context, ctxIndex);\n                        if (hasValueChanged(currentFlag, currentValue, value) &&\n                            allowValueChange(currentValue, value, currentDirectiveIndex, directiveIndex)) {\n                            setValue(context, ctxIndex, value);\n                            setPlayerBuilderIndex(context, ctxIndex, playerBuilderIndex, directiveIndex);\n                            if (hasInitialValueChanged(context, currentFlag, value)) {\n                                setDirty(context, ctxIndex, true);\n                                dirty = true;\n                            }\n                        }\n                        props[i] = null;\n                        totalRemainingProperties--;\n                        break;\n                    }\n                }\n            }\n            ctxIndex += 4 /* Size */;\n        }\n        // STEP 2:\n        // apply the left over properties to the context in the correct order.\n        if (totalRemainingProperties) {\n            var sanitizer = entryIsClassBased ? null : getStyleSanitizer(context, directiveIndex);\n            propertiesLoop: for (var i = 0; i < props.length; i++) {\n                var mapProp = props[i];\n                if (!mapProp) {\n                    // this is an early exit in case a value was already encountered above in the\n                    // previous loop (which means that the property was applied or rejected)\n                    continue;\n                }\n                var value = applyAllProps ? true : values[mapProp];\n                var normalizedProp = entryIsClassBased ? mapProp : hyphenate(mapProp);\n                var isInsideOwnershipArea = ctxIndex >= ownershipValuesStartIndex;\n                for (var j = ctxIndex; j < ctxEnd; j += 4 /* Size */) {\n                    var distantCtxProp = getProp(context, j);\n                    if (distantCtxProp === normalizedProp) {\n                        var distantCtxDirectiveIndex = getDirectiveIndexFromEntry(context, j);\n                        var distantCtxPlayerBuilderIndex = getPlayerBuilderIndex(context, j);\n                        var distantCtxValue = getValue(context, j);\n                        var distantCtxFlag = getPointers(context, j);\n                        if (allowValueChange(distantCtxValue, value, distantCtxDirectiveIndex, directiveIndex)) {\n                            // even if the entry isn't updated (by value or directiveIndex) then\n                            // it should still be moved over to the correct spot in the array so\n                            // the iteration loop is tighter.\n                            if (isInsideOwnershipArea) {\n                                swapMultiContextEntries(context, ctxIndex, j);\n                                totalUniqueValues++;\n                            }\n                            if (hasValueChanged(distantCtxFlag, distantCtxValue, value)) {\n                                if (value === null || value === undefined && value !== distantCtxValue) {\n                                    valuesEntryShapeChange = true;\n                                }\n                                setValue(context, ctxIndex, value);\n                                // SKIP IF INITIAL CHECK\n                                // If the former `value` is `null` then it means that an initial value\n                                // could be being rendered on screen. If that is the case then there is\n                                // no point in updating the value in case it matches. In other words if the\n                                // new value is the exact same as the previously rendered value (which\n                                // happens to be the initial value) then do nothing.\n                                if (distantCtxValue !== null ||\n                                    hasInitialValueChanged(context, distantCtxFlag, value)) {\n                                    setDirty(context, ctxIndex, true);\n                                    dirty = true;\n                                }\n                            }\n                            if (distantCtxDirectiveIndex !== directiveIndex ||\n                                playerBuilderIndex !== distantCtxPlayerBuilderIndex) {\n                                setPlayerBuilderIndex(context, ctxIndex, playerBuilderIndex, directiveIndex);\n                            }\n                        }\n                        ctxIndex += 4 /* Size */;\n                        continue propertiesLoop;\n                    }\n                }\n                // fallback case ... value not found at all in the context\n                if (value != null) {\n                    valuesEntryShapeChange = true;\n                    totalUniqueValues++;\n                    var flag = prepareInitialFlag(context, normalizedProp, entryIsClassBased, sanitizer) |\n                        1 /* Dirty */;\n                    var insertionIndex = isInsideOwnershipArea ?\n                        ctxIndex :\n                        (ownershipValuesStartIndex + totalNewAllocatedSlots * 4 /* Size */);\n                    insertNewMultiProperty(context, insertionIndex, entryIsClassBased, normalizedProp, flag, value, directiveIndex, playerBuilderIndex);\n                    totalNewAllocatedSlots++;\n                    ctxEnd += 4 /* Size */;\n                    ctxIndex += 4 /* Size */;\n                    dirty = true;\n                }\n            }\n        }\n        // STEP 3:\n        // Remove (nullify) any existing entries in the context that were not apart of the\n        // map input value that was passed into this algorithm for this directive.\n        while (ctxIndex < ctxEnd) {\n            valuesEntryShapeChange = true; // some values are missing\n            var ctxValue = getValue(context, ctxIndex);\n            var ctxFlag = getPointers(context, ctxIndex);\n            var ctxDirective = getDirectiveIndexFromEntry(context, ctxIndex);\n            if (ctxValue != null) {\n                valuesEntryShapeChange = true;\n            }\n            if (hasValueChanged(ctxFlag, ctxValue, null)) {\n                setValue(context, ctxIndex, null);\n                // only if the initial value is falsy then\n                if (hasInitialValueChanged(context, ctxFlag, ctxValue)) {\n                    setDirty(context, ctxIndex, true);\n                    dirty = true;\n                }\n                setPlayerBuilderIndex(context, ctxIndex, playerBuilderIndex, directiveIndex);\n            }\n            ctxIndex += 4 /* Size */;\n        }\n        // Because the object shape has changed, this means that all follow-up directives will need to\n        // reapply their values into the object. For this to happen, the cached array needs to be updated\n        // with dirty flags so that follow-up calls to `updateStylingMap` will reapply their styling code.\n        // the reapplication of styling code within the context will reshape it and update the offset\n        // values (also follow-up directives can write new values in case earlier directives set anything\n        // to null due to removals or falsy values).\n        valuesEntryShapeChange = valuesEntryShapeChange || existingCachedValueCount !== totalUniqueValues;\n        updateCachedMapValue(context, directiveIndex, entryIsClassBased, cacheValue, ownershipValuesStartIndex, ctxEnd, totalUniqueValues, valuesEntryShapeChange);\n        if (dirty) {\n            setContextDirty(context, true);\n        }\n        return totalNewAllocatedSlots;\n    }\n    /**\n     * Sets and resolves a single class value on the provided `StylingContext` so\n     * that they can be applied to the element once `renderStyling` is called.\n     *\n     * @param context The styling context that will be updated with the\n     *    newly provided class value.\n     * @param offset The index of the CSS class which is being updated.\n     * @param addOrRemove Whether or not to add or remove the CSS class\n     * @param forceOverride whether or not to skip all directive prioritization\n     *    and just apply the value regardless.\n     */\n    function updateClassProp(context, offset, input, directiveIndex, forceOverride) {\n        if (directiveIndex === void 0) { directiveIndex = 0; }\n        updateSingleStylingValue(context, offset, input, true, directiveIndex, forceOverride);\n    }\n    /**\n     * Sets and resolves a single style value on the provided `StylingContext` so\n     * that they can be applied to the element once `renderStyling` is called.\n     *\n     * Note that prop-level styling values are considered higher priority than any styling that\n     * has been applied using `updateStylingMap`, therefore, when styling values are rendered\n     * then any styles/classes that have been applied using this function will be considered first\n     * (then multi values second and then initial values as a backup).\n     *\n     * @param context The styling context that will be updated with the\n     *    newly provided style value.\n     * @param offset The index of the property which is being updated.\n     * @param value The CSS style value that will be assigned\n     * @param forceOverride whether or not to skip all directive prioritization\n     *    and just apply the value regardless.\n     */\n    function updateStyleProp(context, offset, input, directiveIndex, forceOverride) {\n        if (directiveIndex === void 0) { directiveIndex = 0; }\n        updateSingleStylingValue(context, offset, input, false, directiveIndex, forceOverride);\n    }\n    function updateSingleStylingValue(context, offset, input, isClassBased, directiveIndex, forceOverride) {\n        ngDevMode && assertValidDirectiveIndex(context, directiveIndex);\n        var singleIndex = getSinglePropIndexValue(context, directiveIndex, offset, isClassBased);\n        var currValue = getValue(context, singleIndex);\n        var currFlag = getPointers(context, singleIndex);\n        var currDirective = getDirectiveIndexFromEntry(context, singleIndex);\n        var value = (input instanceof BoundPlayerFactory) ? input.value : input;\n        ngDevMode && ngDevMode.stylingProp++;\n        if (hasValueChanged(currFlag, currValue, value) &&\n            (forceOverride || allowValueChange(currValue, value, currDirective, directiveIndex))) {\n            var isClassBased_1 = (currFlag & 2 /* Class */) === 2 /* Class */;\n            var element = context[0 /* ElementPosition */];\n            var playerBuilder = input instanceof BoundPlayerFactory ?\n                new ClassAndStylePlayerBuilder(input, element, isClassBased_1 ? 1 /* Class */ : 2 /* Style */) :\n                null;\n            var value_1 = (playerBuilder ? input.value : input);\n            var currPlayerIndex = getPlayerBuilderIndex(context, singleIndex);\n            var playerBuildersAreDirty = false;\n            var playerBuilderIndex = playerBuilder ? currPlayerIndex : 0;\n            if (hasPlayerBuilderChanged(context, playerBuilder, currPlayerIndex)) {\n                var newIndex = setPlayerBuilder(context, playerBuilder, currPlayerIndex);\n                playerBuilderIndex = playerBuilder ? newIndex : 0;\n                playerBuildersAreDirty = true;\n            }\n            if (playerBuildersAreDirty || currDirective !== directiveIndex) {\n                setPlayerBuilderIndex(context, singleIndex, playerBuilderIndex, directiveIndex);\n            }\n            if (currDirective !== directiveIndex) {\n                var prop = getProp(context, singleIndex);\n                var sanitizer = getStyleSanitizer(context, directiveIndex);\n                setSanitizeFlag(context, singleIndex, (sanitizer && sanitizer(prop, null, 1 /* ValidateProperty */)) ? true : false);\n            }\n            // the value will always get updated (even if the dirty flag is skipped)\n            setValue(context, singleIndex, value_1);\n            var indexForMulti = getMultiOrSingleIndex(currFlag);\n            // if the value is the same in the multi-area then there's no point in re-assembling\n            var valueForMulti = getValue(context, indexForMulti);\n            if (!valueForMulti || hasValueChanged(currFlag, valueForMulti, value_1)) {\n                var multiDirty = false;\n                var singleDirty = true;\n                // only when the value is set to `null` should the multi-value get flagged\n                if (!valueExists(value_1, isClassBased_1) && valueExists(valueForMulti, isClassBased_1)) {\n                    multiDirty = true;\n                    singleDirty = false;\n                }\n                setDirty(context, indexForMulti, multiDirty);\n                setDirty(context, singleIndex, singleDirty);\n                setContextDirty(context, true);\n            }\n            if (playerBuildersAreDirty) {\n                setContextPlayersDirty(context, true);\n            }\n            ngDevMode && ngDevMode.stylingPropCacheMiss++;\n        }\n    }\n    /**\n     * Renders all queued styling using a renderer onto the given element.\n     *\n     * This function works by rendering any styles (that have been applied\n     * using `updateStylingMap`) and any classes (that have been applied using\n     * `updateStyleProp`) onto the provided element using the provided renderer.\n     * Just before the styles/classes are rendered a final key/value style map\n     * will be assembled (if `styleStore` or `classStore` are provided).\n     *\n     * @param lElement the element that the styles will be rendered on\n     * @param context The styling context that will be used to determine\n     *      what styles will be rendered\n     * @param renderer the renderer that will be used to apply the styling\n     * @param classesStore if provided, the updated class values will be applied\n     *    to this key/value map instead of being renderered via the renderer.\n     * @param stylesStore if provided, the updated style values will be applied\n     *    to this key/value map instead of being renderered via the renderer.\n     * @returns number the total amount of players that got queued for animation (if any)\n     */\n    function renderStyling(context, renderer, rootOrView, isFirstRender, classesStore, stylesStore, directiveIndex) {\n        if (directiveIndex === void 0) { directiveIndex = 0; }\n        var totalPlayersQueued = 0;\n        ngDevMode && ngDevMode.stylingApply++;\n        // this prevents multiple attempts to render style/class values on\n        // the same element...\n        if (allowFlush(context, directiveIndex)) {\n            // all styling instructions present within any hostBindings functions\n            // do not update the context immediately when called. They are instead\n            // queued up and applied to the context right at this point. Why? This\n            // is because Angular evaluates component/directive and directive\n            // sub-class code at different points and it's important that the\n            // styling values are applied to the context in the right order\n            // (see `interfaces/styling.ts` for more information).\n            flushQueue(context);\n            if (isContextDirty(context)) {\n                ngDevMode && ngDevMode.stylingApplyCacheMiss++;\n                // this is here to prevent things like <ng-container [style] [class]>...</ng-container>\n                // or if there are any host style or class bindings present in a directive set on\n                // a container node\n                var native = context[0 /* ElementPosition */];\n                var flushPlayerBuilders = context[1 /* MasterFlagPosition */] & 8 /* PlayerBuildersDirty */;\n                var multiStartIndex = getMultiStylesStartIndex(context);\n                for (var i = 10 /* SingleStylesStartPosition */; i < context.length; i += 4 /* Size */) {\n                    // there is no point in rendering styles that have not changed on screen\n                    if (isDirty(context, i)) {\n                        var flag = getPointers(context, i);\n                        var directiveIndex_1 = getDirectiveIndexFromEntry(context, i);\n                        var prop = getProp(context, i);\n                        var value = getValue(context, i);\n                        var styleSanitizer = (flag & 4 /* Sanitize */) ? getStyleSanitizer(context, directiveIndex_1) : null;\n                        var playerBuilder = getPlayerBuilder(context, i);\n                        var isClassBased = flag & 2 /* Class */ ? true : false;\n                        var isInSingleRegion = i < multiStartIndex;\n                        var valueToApply = value;\n                        // VALUE DEFER CASE 1: Use a multi value instead of a null single value\n                        // this check implies that a single value was removed and we\n                        // should now defer to a multi value and use that (if set).\n                        if (isInSingleRegion && !valueExists(valueToApply, isClassBased)) {\n                            // single values ALWAYS have a reference to a multi index\n                            var multiIndex = getMultiOrSingleIndex(flag);\n                            valueToApply = getValue(context, multiIndex);\n                        }\n                        // VALUE DEFER CASE 2: Use the initial value if all else fails (is falsy)\n                        // the initial value will always be a string or null,\n                        // therefore we can safely adopt it in case there's nothing else\n                        // note that this should always be a falsy check since `false` is used\n                        // for both class and style comparisons (styles can't be false and false\n                        // classes are turned off and should therefore defer to their initial values)\n                        // Note that we ignore class-based deferals because otherwise a class can never\n                        // be removed in the case that it exists as true in the initial classes list...\n                        if (!valueExists(valueToApply, isClassBased)) {\n                            valueToApply = getInitialValue(context, flag);\n                        }\n                        // if the first render is true then we do not want to start applying falsy\n                        // values to the DOM element's styling. Otherwise then we know there has\n                        // been a change and even if it's falsy then it's removing something that\n                        // was truthy before.\n                        var doApplyValue = renderer && (isFirstRender ? valueToApply : true);\n                        if (doApplyValue) {\n                            if (isClassBased) {\n                                setClass(native, prop, valueToApply ? true : false, renderer, classesStore, playerBuilder);\n                            }\n                            else {\n                                setStyle(native, prop, valueToApply, renderer, styleSanitizer, stylesStore, playerBuilder);\n                            }\n                        }\n                        setDirty(context, i, false);\n                    }\n                }\n                if (flushPlayerBuilders) {\n                    var rootContext = Array.isArray(rootOrView) ? getRootContext(rootOrView) : rootOrView;\n                    var playerContext = getPlayerContext(context);\n                    var playersStartIndex = playerContext[0 /* NonBuilderPlayersStart */];\n                    for (var i = 1 /* PlayerBuildersStartPosition */; i < playersStartIndex; i += 2 /* PlayerAndPlayerBuildersTupleSize */) {\n                        var builder = playerContext[i];\n                        var playerInsertionIndex = i + 1 /* PlayerOffsetPosition */;\n                        var oldPlayer = playerContext[playerInsertionIndex];\n                        if (builder) {\n                            var player = builder.buildPlayer(oldPlayer, isFirstRender);\n                            if (player !== undefined) {\n                                if (player != null) {\n                                    var wasQueued = addPlayerInternal(playerContext, rootContext, native, player, playerInsertionIndex);\n                                    wasQueued && totalPlayersQueued++;\n                                }\n                                if (oldPlayer) {\n                                    oldPlayer.destroy();\n                                }\n                            }\n                        }\n                        else if (oldPlayer) {\n                            // the player builder has been removed ... therefore we should delete the associated\n                            // player\n                            oldPlayer.destroy();\n                        }\n                    }\n                    setContextPlayersDirty(context, false);\n                }\n                setContextDirty(context, false);\n            }\n        }\n        return totalPlayersQueued;\n    }\n    /**\n     * Assigns a style value to a style property for the given element.\n     *\n     * This function renders a given CSS prop/value entry using the\n     * provided renderer. If a `store` value is provided then\n     * that will be used a render context instead of the provided\n     * renderer.\n     *\n     * @param native the DOM Element\n     * @param prop the CSS style property that will be rendered\n     * @param value the CSS style value that will be rendered\n     * @param renderer\n     * @param store an optional key/value map that will be used as a context to render styles on\n     */\n    function setStyle(native, prop, value, renderer, sanitizer, store, playerBuilder) {\n        value =\n            sanitizer && value ? sanitizer(prop, value, 3 /* ValidateAndSanitize */) : value;\n        if (store || playerBuilder) {\n            if (store) {\n                store.setValue(prop, value);\n            }\n            if (playerBuilder) {\n                playerBuilder.setValue(prop, value);\n            }\n        }\n        else if (value) {\n            value = value.toString(); // opacity, z-index and flexbox all have number values which may not\n            // assign as numbers\n            ngDevMode && ngDevMode.rendererSetStyle++;\n            isProceduralRenderer(renderer) ?\n                renderer.setStyle(native, prop, value, RendererStyleFlags3.DashCase) :\n                native.style.setProperty(prop, value);\n        }\n        else {\n            ngDevMode && ngDevMode.rendererRemoveStyle++;\n            isProceduralRenderer(renderer) ?\n                renderer.removeStyle(native, prop, RendererStyleFlags3.DashCase) :\n                native.style.removeProperty(prop);\n        }\n    }\n    /**\n     * Adds/removes the provided className value to the provided element.\n     *\n     * This function renders a given CSS class value using the provided\n     * renderer (by adding or removing it from the provided element).\n     * If a `store` value is provided then that will be used a render\n     * context instead of the provided renderer.\n     *\n     * @param native the DOM Element\n     * @param prop the CSS style property that will be rendered\n     * @param value the CSS style value that will be rendered\n     * @param renderer\n     * @param store an optional key/value map that will be used as a context to render styles on\n     */\n    function setClass(native, className, add, renderer, store, playerBuilder) {\n        if (store || playerBuilder) {\n            if (store) {\n                store.setValue(className, add);\n            }\n            if (playerBuilder) {\n                playerBuilder.setValue(className, add);\n            }\n            // DOMTokenList will throw if we try to add or remove an empty string.\n        }\n        else if (className !== '') {\n            if (add) {\n                ngDevMode && ngDevMode.rendererAddClass++;\n                isProceduralRenderer(renderer) ? renderer.addClass(native, className) :\n                    native['classList'].add(className);\n            }\n            else {\n                ngDevMode && ngDevMode.rendererRemoveClass++;\n                isProceduralRenderer(renderer) ? renderer.removeClass(native, className) :\n                    native['classList'].remove(className);\n            }\n        }\n    }\n    function setSanitizeFlag(context, index, sanitizeYes) {\n        if (sanitizeYes) {\n            context[index] |= 4 /* Sanitize */;\n        }\n        else {\n            context[index] &= ~4 /* Sanitize */;\n        }\n    }\n    function setDirty(context, index, isDirtyYes) {\n        var adjustedIndex = index >= 10 /* SingleStylesStartPosition */ ? (index + 0 /* FlagsOffset */) : index;\n        if (isDirtyYes) {\n            context[adjustedIndex] |= 1 /* Dirty */;\n        }\n        else {\n            context[adjustedIndex] &= ~1 /* Dirty */;\n        }\n    }\n    function isDirty(context, index) {\n        var adjustedIndex = index >= 10 /* SingleStylesStartPosition */ ? (index + 0 /* FlagsOffset */) : index;\n        return (context[adjustedIndex] & 1 /* Dirty */) == 1 /* Dirty */;\n    }\n    function isClassBasedValue(context, index) {\n        var adjustedIndex = index >= 10 /* SingleStylesStartPosition */ ? (index + 0 /* FlagsOffset */) : index;\n        return (context[adjustedIndex] & 2 /* Class */) == 2 /* Class */;\n    }\n    function isSanitizable(context, index) {\n        var adjustedIndex = index >= 10 /* SingleStylesStartPosition */ ? (index + 0 /* FlagsOffset */) : index;\n        return (context[adjustedIndex] & 4 /* Sanitize */) == 4 /* Sanitize */;\n    }\n    function pointers(configFlag, staticIndex, dynamicIndex) {\n        return (configFlag & 31 /* BitMask */) | (staticIndex << 5 /* BitCountSize */) |\n            (dynamicIndex << (14 /* BitCountSize */ + 5 /* BitCountSize */));\n    }\n    function getInitialValue(context, flag) {\n        var index = getInitialIndex(flag);\n        var entryIsClassBased = flag & 2 /* Class */;\n        var initialValues = entryIsClassBased ? context[4 /* InitialClassValuesPosition */] :\n            context[3 /* InitialStyleValuesPosition */];\n        return initialValues[index];\n    }\n    function getInitialIndex(flag) {\n        return (flag >> 5 /* BitCountSize */) & 16383 /* BitMask */;\n    }\n    function getMultiOrSingleIndex(flag) {\n        var index = (flag >> (14 /* BitCountSize */ + 5 /* BitCountSize */)) & 16383 /* BitMask */;\n        return index >= 10 /* SingleStylesStartPosition */ ? index : -1;\n    }\n    function getMultiClassesStartIndex(context) {\n        var classCache = context[6 /* CachedMultiClasses */];\n        return classCache[1 /* ValuesStartPosition */ +\n            1 /* PositionStartOffset */];\n    }\n    function getMultiStylesStartIndex(context) {\n        var stylesCache = context[7 /* CachedMultiStyles */];\n        return stylesCache[1 /* ValuesStartPosition */ +\n            1 /* PositionStartOffset */];\n    }\n    function setProp(context, index, prop) {\n        context[index + 1 /* PropertyOffset */] = prop;\n    }\n    function setValue(context, index, value) {\n        context[index + 2 /* ValueOffset */] = value;\n    }\n    function hasPlayerBuilderChanged(context, builder, index) {\n        var playerContext = context[9 /* PlayerContext */];\n        if (builder) {\n            if (!playerContext || index === 0) {\n                return true;\n            }\n        }\n        else if (!playerContext) {\n            return false;\n        }\n        return playerContext[index] !== builder;\n    }\n    function setPlayerBuilder(context, builder, insertionIndex) {\n        var playerContext = context[9 /* PlayerContext */] || allocPlayerContext(context);\n        if (insertionIndex > 0) {\n            playerContext[insertionIndex] = builder;\n        }\n        else {\n            insertionIndex = playerContext[0 /* NonBuilderPlayersStart */];\n            playerContext.splice(insertionIndex, 0, builder, null);\n            playerContext[0 /* NonBuilderPlayersStart */] +=\n                2 /* PlayerAndPlayerBuildersTupleSize */;\n        }\n        return insertionIndex;\n    }\n    function directiveOwnerPointers(directiveIndex, playerIndex) {\n        return (playerIndex << 16 /* BitCountSize */) | directiveIndex;\n    }\n    function setPlayerBuilderIndex(context, index, playerBuilderIndex, directiveIndex) {\n        var value = directiveOwnerPointers(directiveIndex, playerBuilderIndex);\n        context[index + 3 /* PlayerBuilderIndexOffset */] = value;\n    }\n    function getPlayerBuilderIndex(context, index) {\n        var flag = context[index + 3 /* PlayerBuilderIndexOffset */];\n        var playerBuilderIndex = (flag >> 16 /* BitCountSize */) &\n            65535 /* BitMask */;\n        return playerBuilderIndex;\n    }\n    function getPlayerBuilder(context, index) {\n        var playerBuilderIndex = getPlayerBuilderIndex(context, index);\n        if (playerBuilderIndex) {\n            var playerContext = context[9 /* PlayerContext */];\n            if (playerContext) {\n                return playerContext[playerBuilderIndex];\n            }\n        }\n        return null;\n    }\n    function setFlag(context, index, flag) {\n        var adjustedIndex = index === 1 /* MasterFlagPosition */ ? index : (index + 0 /* FlagsOffset */);\n        context[adjustedIndex] = flag;\n    }\n    function getPointers(context, index) {\n        var adjustedIndex = index === 1 /* MasterFlagPosition */ ? index : (index + 0 /* FlagsOffset */);\n        return context[adjustedIndex];\n    }\n    function getValue(context, index) {\n        return context[index + 2 /* ValueOffset */];\n    }\n    function getProp(context, index) {\n        return context[index + 1 /* PropertyOffset */];\n    }\n    function isContextDirty(context) {\n        return isDirty(context, 1 /* MasterFlagPosition */);\n    }\n    function setContextDirty(context, isDirtyYes) {\n        setDirty(context, 1 /* MasterFlagPosition */, isDirtyYes);\n    }\n    function setContextPlayersDirty(context, isDirtyYes) {\n        if (isDirtyYes) {\n            context[1 /* MasterFlagPosition */] |= 8 /* PlayerBuildersDirty */;\n        }\n        else {\n            context[1 /* MasterFlagPosition */] &= ~8 /* PlayerBuildersDirty */;\n        }\n    }\n    function swapMultiContextEntries(context, indexA, indexB) {\n        if (indexA === indexB)\n            return;\n        var tmpValue = getValue(context, indexA);\n        var tmpProp = getProp(context, indexA);\n        var tmpFlag = getPointers(context, indexA);\n        var tmpPlayerBuilderIndex = getPlayerBuilderIndex(context, indexA);\n        var tmpDirectiveIndex = getDirectiveIndexFromEntry(context, indexA);\n        var flagA = tmpFlag;\n        var flagB = getPointers(context, indexB);\n        var singleIndexA = getMultiOrSingleIndex(flagA);\n        if (singleIndexA >= 0) {\n            var _flag = getPointers(context, singleIndexA);\n            var _initial = getInitialIndex(_flag);\n            setFlag(context, singleIndexA, pointers(_flag, _initial, indexB));\n        }\n        var singleIndexB = getMultiOrSingleIndex(flagB);\n        if (singleIndexB >= 0) {\n            var _flag = getPointers(context, singleIndexB);\n            var _initial = getInitialIndex(_flag);\n            setFlag(context, singleIndexB, pointers(_flag, _initial, indexA));\n        }\n        setValue(context, indexA, getValue(context, indexB));\n        setProp(context, indexA, getProp(context, indexB));\n        setFlag(context, indexA, getPointers(context, indexB));\n        var playerIndexA = getPlayerBuilderIndex(context, indexB);\n        var directiveIndexA = getDirectiveIndexFromEntry(context, indexB);\n        setPlayerBuilderIndex(context, indexA, playerIndexA, directiveIndexA);\n        setValue(context, indexB, tmpValue);\n        setProp(context, indexB, tmpProp);\n        setFlag(context, indexB, tmpFlag);\n        setPlayerBuilderIndex(context, indexB, tmpPlayerBuilderIndex, tmpDirectiveIndex);\n    }\n    function updateSinglePointerValues(context, indexStartPosition) {\n        for (var i = indexStartPosition; i < context.length; i += 4 /* Size */) {\n            var multiFlag = getPointers(context, i);\n            var singleIndex = getMultiOrSingleIndex(multiFlag);\n            if (singleIndex > 0) {\n                var singleFlag = getPointers(context, singleIndex);\n                var initialIndexForSingle = getInitialIndex(singleFlag);\n                var flagValue = (isDirty(context, singleIndex) ? 1 /* Dirty */ : 0 /* None */) |\n                    (isClassBasedValue(context, singleIndex) ? 2 /* Class */ : 0 /* None */) |\n                    (isSanitizable(context, singleIndex) ? 4 /* Sanitize */ : 0 /* None */);\n                var updatedFlag = pointers(flagValue, initialIndexForSingle, i);\n                setFlag(context, singleIndex, updatedFlag);\n            }\n        }\n    }\n    function insertNewMultiProperty(context, index, classBased, name, flag, value, directiveIndex, playerIndex) {\n        var doShift = index < context.length;\n        // prop does not exist in the list, add it in\n        context.splice(index, 0, flag | 1 /* Dirty */ | (classBased ? 2 /* Class */ : 0 /* None */), name, value, 0);\n        setPlayerBuilderIndex(context, index, playerIndex, directiveIndex);\n        if (doShift) {\n            // because the value was inserted midway into the array then we\n            // need to update all the shifted multi values' single value\n            // pointers to point to the newly shifted location\n            updateSinglePointerValues(context, index + 4 /* Size */);\n        }\n    }\n    function valueExists(value, isClassBased) {\n        return value !== null;\n    }\n    function prepareInitialFlag(context, prop, entryIsClassBased, sanitizer) {\n        var flag = (sanitizer && sanitizer(prop, null, 1 /* ValidateProperty */)) ?\n            4 /* Sanitize */ :\n            0 /* None */;\n        var initialIndex;\n        if (entryIsClassBased) {\n            flag |= 2 /* Class */;\n            initialIndex =\n                getInitialStylingValuesIndexOf(context[4 /* InitialClassValuesPosition */], prop);\n        }\n        else {\n            initialIndex =\n                getInitialStylingValuesIndexOf(context[3 /* InitialStyleValuesPosition */], prop);\n        }\n        initialIndex = initialIndex > 0 ? (initialIndex + 1 /* ValueOffset */) : 0;\n        return pointers(flag, initialIndex, 0);\n    }\n    function hasInitialValueChanged(context, flag, newValue) {\n        var initialValue = getInitialValue(context, flag);\n        return !initialValue || hasValueChanged(flag, initialValue, newValue);\n    }\n    function hasValueChanged(flag, a, b) {\n        var isClassBased = flag & 2 /* Class */;\n        var hasValues = a && b;\n        var usesSanitizer = flag & 4 /* Sanitize */;\n        // the toString() comparison ensures that a value is checked\n        // ... otherwise (during sanitization bypassing) the === comparsion\n        // would fail since a new String() instance is created\n        if (!isClassBased && hasValues && usesSanitizer) {\n            // we know for sure we're dealing with strings at this point\n            return a.toString() !== b.toString();\n        }\n        // everything else is safe to check with a normal equality check\n        return a !== b;\n    }\n    var ClassAndStylePlayerBuilder = /** @class */ (function () {\n        function ClassAndStylePlayerBuilder(factory, _element, _type) {\n            this._element = _element;\n            this._type = _type;\n            this._values = {};\n            this._dirty = false;\n            this._factory = factory;\n        }\n        ClassAndStylePlayerBuilder.prototype.setValue = function (prop, value) {\n            if (this._values[prop] !== value) {\n                this._values[prop] = value;\n                this._dirty = true;\n            }\n        };\n        ClassAndStylePlayerBuilder.prototype.buildPlayer = function (currentPlayer, isFirstRender) {\n            // if no values have been set here then this means the binding didn't\n            // change and therefore the binding values were not updated through\n            // `setValue` which means no new player will be provided.\n            if (this._dirty) {\n                var player = this._factory.fn(this._element, this._type, this._values, isFirstRender, currentPlayer || null);\n                this._values = {};\n                this._dirty = false;\n                return player;\n            }\n            return undefined;\n        };\n        return ClassAndStylePlayerBuilder;\n    }());\n    function getDirectiveIndexFromEntry(context, index) {\n        var value = context[index + 3 /* PlayerBuilderIndexOffset */];\n        return value & 65535 /* BitMask */;\n    }\n    function getInitialStylingValuesIndexOf(keyValues, key) {\n        for (var i = 2 /* KeyValueStartPosition */; i < keyValues.length; i += 3 /* Size */) {\n            if (keyValues[i] === key)\n                return i;\n        }\n        return -1;\n    }\n    function getSinglePropIndexValue(context, directiveIndex, offset, isClassBased) {\n        var singlePropOffsetRegistryIndex = context[2 /* DirectiveRegistryPosition */][(directiveIndex * 2 /* Size */) +\n            0 /* SinglePropValuesIndexOffset */];\n        var offsets = context[5 /* SinglePropOffsetPositions */];\n        var indexForOffset = singlePropOffsetRegistryIndex +\n            2 /* ValueStartPosition */ +\n            (isClassBased ?\n                offsets[singlePropOffsetRegistryIndex + 0 /* StylesCountPosition */] :\n                0) +\n            offset;\n        return offsets[indexForOffset];\n    }\n    function getStyleSanitizer(context, directiveIndex) {\n        var dirs = context[2 /* DirectiveRegistryPosition */];\n        var value = dirs[directiveIndex * 2 /* Size */ +\n            1 /* StyleSanitizerOffset */] ||\n            dirs[1 /* StyleSanitizerOffset */] || null;\n        return value;\n    }\n    function allowValueChange(currentValue, newValue, currentDirectiveOwner, newDirectiveOwner) {\n        // the code below relies the importance of directive's being tied to their\n        // index value. The index values for each directive are derived from being\n        // registered into the styling context directive registry. The most important\n        // directive is the parent component directive (the template) and each directive\n        // that is added after is considered less important than the previous entry. This\n        // prioritization of directives enables the styling algorithm to decide if a style\n        // or class should be allowed to be updated/replaced in case an earlier directive\n        // already wrote to the exact same style-property or className value. In other words\n        // this decides what to do if and when there is a collision.\n        if (currentValue != null) {\n            if (newValue != null) {\n                // if a directive index is lower than it always has priority over the\n                // previous directive's value...\n                return newDirectiveOwner <= currentDirectiveOwner;\n            }\n            else {\n                // only write a null value in case it's the same owner writing it.\n                // this avoids having a higher-priority directive write to null\n                // only to have a lesser-priority directive change right to a\n                // non-null value immediately afterwards.\n                return currentDirectiveOwner === newDirectiveOwner;\n            }\n        }\n        return true;\n    }\n    /**\n     * Returns the className string of all the initial classes for the element.\n     *\n     * This function is designed to populate and cache all the static class\n     * values into a className string. The caching mechanism works by placing\n     * the completed className string into the initial values array into a\n     * dedicated slot. This will prevent the function from having to populate\n     * the string each time an element is created or matched.\n     *\n     * @returns the className string (e.g. `on active red`)\n     */\n    function getInitialClassNameValue(context) {\n        var initialClassValues = context[4 /* InitialClassValuesPosition */];\n        var className = initialClassValues[1 /* CachedStringValuePosition */];\n        if (className === null) {\n            className = '';\n            for (var i = 2 /* KeyValueStartPosition */; i < initialClassValues.length; i += 3 /* Size */) {\n                var isPresent = initialClassValues[i + 1];\n                if (isPresent) {\n                    className += (className.length ? ' ' : '') + initialClassValues[i];\n                }\n            }\n            initialClassValues[1 /* CachedStringValuePosition */] = className;\n        }\n        return className;\n    }\n    /**\n     * Returns the style string of all the initial styles for the element.\n     *\n     * This function is designed to populate and cache all the static style\n     * values into a style string. The caching mechanism works by placing\n     * the completed style string into the initial values array into a\n     * dedicated slot. This will prevent the function from having to populate\n     * the string each time an element is created or matched.\n     *\n     * @returns the style string (e.g. `width:100px;height:200px`)\n     */\n    function getInitialStyleStringValue(context) {\n        var initialStyleValues = context[3 /* InitialStyleValuesPosition */];\n        var styleString = initialStyleValues[1 /* CachedStringValuePosition */];\n        if (styleString === null) {\n            styleString = '';\n            for (var i = 2 /* KeyValueStartPosition */; i < initialStyleValues.length; i += 3 /* Size */) {\n                var value = initialStyleValues[i + 1];\n                if (value !== null) {\n                    styleString += (styleString.length ? ';' : '') + (initialStyleValues[i] + \":\" + value);\n                }\n            }\n            initialStyleValues[1 /* CachedStringValuePosition */] = styleString;\n        }\n        return styleString;\n    }\n    /**\n     * Returns the current cached multi-value for a given directiveIndex within the provided context.\n     */\n    function readCachedMapValue(context, entryIsClassBased, directiveIndex) {\n        var values = context[entryIsClassBased ? 6 /* CachedMultiClasses */ : 7 /* CachedMultiStyles */];\n        var index = 1 /* ValuesStartPosition */ +\n            directiveIndex * 4 /* Size */;\n        return values[index + 2 /* ValueOffset */] || null;\n    }\n    /**\n     * Determines whether the provided multi styling value should be updated or not.\n     *\n     * Because `[style]` and `[class]` bindings rely on an identity change to occur before\n     * applying new values, the styling algorithm may not update an existing entry into\n     * the context if a previous directive's entry changed shape.\n     *\n     * This function will decide whether or not a value should be applied (if there is a\n     * cache miss) to the context based on the following rules:\n     *\n     * - If there is an identity change between the existing value and new value\n     * - If there is no existing value cached (first write)\n     * - If a previous directive flagged the existing cached value as dirty\n     */\n    function isMultiValueCacheHit(context, entryIsClassBased, directiveIndex, newValue) {\n        var indexOfCachedValues = entryIsClassBased ? 6 /* CachedMultiClasses */ : 7 /* CachedMultiStyles */;\n        var cachedValues = context[indexOfCachedValues];\n        var index = 1 /* ValuesStartPosition */ +\n            directiveIndex * 4 /* Size */;\n        if (cachedValues[index + 0 /* DirtyFlagOffset */])\n            return false;\n        return newValue === NO_CHANGE ||\n            readCachedMapValue(context, entryIsClassBased, directiveIndex) === newValue;\n    }\n    /**\n     * Updates the cached status of a multi-styling value in the context.\n     *\n     * The cached map array (which exists in the context) contains a manifest of\n     * each multi-styling entry (`[style]` and `[class]` entries) for the template\n     * as well as all directives.\n     *\n     * This function will update the cached status of the provided multi-style\n     * entry within the cache.\n     *\n     * When called, this function will update the following information:\n     * - The actual cached value (the raw value that was passed into `[style]` or `[class]`)\n     * - The total amount of unique styling entries that this value has written into the context\n     * - The exact position of where the multi styling entries start in the context for this binding\n     * - The dirty flag will be set to true\n     *\n     * If the `dirtyFutureValues` param is provided then it will update all future entries (binding\n     * entries that exist as apart of other directives) to be dirty as well. This will force the\n     * styling algorithm to reapply those values once change detection checks them (which will in\n     * turn cause the styling context to update itself and the correct styling values will be\n     * rendered on screen).\n     */\n    function updateCachedMapValue(context, directiveIndex, entryIsClassBased, cacheValue, startPosition, endPosition, totalValues, dirtyFutureValues) {\n        var values = context[entryIsClassBased ? 6 /* CachedMultiClasses */ : 7 /* CachedMultiStyles */];\n        var index = 1 /* ValuesStartPosition */ +\n            directiveIndex * 4 /* Size */;\n        // in the event that this is true we assume that future values are dirty and therefore\n        // will be checked again in the next CD cycle\n        if (dirtyFutureValues) {\n            var nextStartPosition = startPosition + totalValues * 4 /* Size */;\n            for (var i = index + 4 /* Size */; i < values.length; i += 4 /* Size */) {\n                values[i + 1 /* PositionStartOffset */] = nextStartPosition;\n                values[i + 0 /* DirtyFlagOffset */] = 1;\n            }\n        }\n        values[index + 0 /* DirtyFlagOffset */] = 0;\n        values[index + 1 /* PositionStartOffset */] = startPosition;\n        values[index + 2 /* ValueOffset */] = cacheValue;\n        values[index + 3 /* ValueCountOffset */] = totalValues;\n        // the code below counts the total amount of styling values that exist in\n        // the context up until this directive. This value will be later used to\n        // update the cached value map's total counter value.\n        var totalStylingEntries = totalValues;\n        for (var i = 1 /* ValuesStartPosition */; i < index; i += 4 /* Size */) {\n            totalStylingEntries += values[i + 3 /* ValueCountOffset */];\n        }\n        // because style values come before class values in the context this means\n        // that if any new values were inserted then the cache values array for\n        // classes is out of sync. The code below will update the offsets to point\n        // to their new values.\n        if (!entryIsClassBased) {\n            var classCache = context[6 /* CachedMultiClasses */];\n            var classesStartPosition = classCache[1 /* ValuesStartPosition */ +\n                1 /* PositionStartOffset */];\n            var diffInStartPosition = endPosition - classesStartPosition;\n            for (var i = 1 /* ValuesStartPosition */; i < classCache.length; i += 4 /* Size */) {\n                classCache[i + 1 /* PositionStartOffset */] += diffInStartPosition;\n            }\n        }\n        values[0 /* EntriesCountPosition */] = totalStylingEntries;\n    }\n    function hyphenateEntries(entries) {\n        var newEntries = [];\n        for (var i = 0; i < entries.length; i++) {\n            newEntries.push(hyphenate(entries[i]));\n        }\n        return newEntries;\n    }\n    function hyphenate(value) {\n        return value.replace(/[a-z][A-Z]/g, function (match) { return match.charAt(0) + \"-\" + match.charAt(1).toLowerCase(); });\n    }\n    function registerMultiMapEntry(context, directiveIndex, entryIsClassBased, startPosition, count) {\n        if (count === void 0) { count = 0; }\n        var cachedValues = context[entryIsClassBased ? 6 /* CachedMultiClasses */ : 7 /* CachedMultiStyles */];\n        if (directiveIndex > 0) {\n            var limit = 1 /* ValuesStartPosition */ +\n                (directiveIndex * 4 /* Size */);\n            while (cachedValues.length < limit) {\n                // this means that ONLY directive class styling (like ngClass) was used\n                // therefore the root directive will still need to be filled in as well\n                // as any other directive spaces in case they only used static values\n                cachedValues.push(0, startPosition, null, 0);\n            }\n        }\n        cachedValues.push(0, startPosition, null, count);\n    }\n    /**\n     * Inserts or updates an existing entry in the provided `staticStyles` collection.\n     *\n     * @param index the index representing an existing styling entry in the collection:\n     *  if provided (numeric): then it will update the existing entry at the given position\n     *  if null: then it will insert a new entry within the collection\n     * @param staticStyles a collection of style or class entries where the value will\n     *  be inserted or patched\n     * @param prop the property value of the entry (e.g. `width` (styles) or `foo` (classes))\n     * @param value the styling value of the entry (e.g. `absolute` (styles) or `true` (classes))\n     * @param directiveOwnerIndex the directive owner index value of the styling source responsible\n     *        for these styles (see `interfaces/styling.ts#directives` for more info)\n     * @returns the index of the updated or new entry within the collection\n     */\n    function addOrUpdateStaticStyle(index, staticStyles, prop, value, directiveOwnerIndex) {\n        if (index === null) {\n            index = staticStyles.length;\n            staticStyles.push(null, null, null);\n            staticStyles[index + 0 /* PropOffset */] = prop;\n        }\n        staticStyles[index + 1 /* ValueOffset */] = value;\n        staticStyles[index + 2 /* DirectiveOwnerOffset */] = directiveOwnerIndex;\n        return index;\n    }\n    function assertValidDirectiveIndex(context, directiveIndex) {\n        var dirs = context[2 /* DirectiveRegistryPosition */];\n        var index = directiveIndex * 2 /* Size */;\n        if (index >= dirs.length ||\n            dirs[index + 0 /* SinglePropValuesIndexOffset */] === -1) {\n            throw new Error('The provided directive is not registered with the styling context');\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var NG_TEMPLATE_SELECTOR = 'ng-template';\n    function isCssClassMatching(nodeClassAttrVal, cssClassToMatch) {\n        var nodeClassesLen = nodeClassAttrVal.length;\n        var matchIndex = nodeClassAttrVal.indexOf(cssClassToMatch);\n        var matchEndIdx = matchIndex + cssClassToMatch.length;\n        if (matchIndex === -1 // no match\n            || (matchIndex > 0 && nodeClassAttrVal[matchIndex - 1] !== ' ') // no space before\n            ||\n                (matchEndIdx < nodeClassesLen && nodeClassAttrVal[matchEndIdx] !== ' ')) // no space after\n         {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Function that checks whether a given tNode matches tag-based selector and has a valid type.\n     *\n     * Matching can be performed in 2 modes: projection mode (when we project nodes) and regular\n     * directive matching mode:\n     * - in the \"directive matching\" mode we do _not_ take TContainer's tagName into account if it is\n     * different from NG_TEMPLATE_SELECTOR (value different from NG_TEMPLATE_SELECTOR indicates that a\n     * tag name was extracted from * syntax so we would match the same directive twice);\n     * - in the \"projection\" mode, we use a tag name potentially extracted from the * syntax processing\n     * (applicable to TNodeType.Container only).\n     */\n    function hasTagAndTypeMatch(tNode, currentSelector, isProjectionMode) {\n        var tagNameToCompare = tNode.type === 0 /* Container */ && !isProjectionMode ?\n            NG_TEMPLATE_SELECTOR :\n            tNode.tagName;\n        return currentSelector === tagNameToCompare;\n    }\n    /**\n     * A utility function to match an Ivy node static data against a simple CSS selector\n     *\n     * @param node static data of the node to match\n     * @param selector The selector to try matching against the node.\n     * @param isProjectionMode if `true` we are matching for content projection, otherwise we are doing\n     * directive matching.\n     * @returns true if node matches the selector.\n     */\n    function isNodeMatchingSelector(tNode, selector, isProjectionMode) {\n        ngDevMode && assertDefined(selector[0], 'Selector should have a tag name');\n        var mode = 4 /* ELEMENT */;\n        var nodeAttrs = tNode.attrs || [];\n        // Find the index of first attribute that has no value, only a name.\n        var nameOnlyMarkerIdx = getNameOnlyMarkerIndex(nodeAttrs);\n        // When processing \":not\" selectors, we skip to the next \":not\" if the\n        // current one doesn't match\n        var skipToNextSelector = false;\n        for (var i = 0; i < selector.length; i++) {\n            var current = selector[i];\n            if (typeof current === 'number') {\n                // If we finish processing a :not selector and it hasn't failed, return false\n                if (!skipToNextSelector && !isPositive(mode) && !isPositive(current)) {\n                    return false;\n                }\n                // If we are skipping to the next :not() and this mode flag is positive,\n                // it's a part of the current :not() selector, and we should keep skipping\n                if (skipToNextSelector && isPositive(current))\n                    continue;\n                skipToNextSelector = false;\n                mode = current | (mode & 1 /* NOT */);\n                continue;\n            }\n            if (skipToNextSelector)\n                continue;\n            if (mode & 4 /* ELEMENT */) {\n                mode = 2 /* ATTRIBUTE */ | mode & 1 /* NOT */;\n                if (current !== '' && !hasTagAndTypeMatch(tNode, current, isProjectionMode) ||\n                    current === '' && selector.length === 1) {\n                    if (isPositive(mode))\n                        return false;\n                    skipToNextSelector = true;\n                }\n            }\n            else {\n                var selectorAttrValue = mode & 8 /* CLASS */ ? current : selector[++i];\n                // special case for matching against classes when a tNode has been instantiated with\n                // class and style values as separate attribute values (e.g. ['title', CLASS, 'foo'])\n                if ((mode & 8 /* CLASS */) && tNode.stylingTemplate) {\n                    if (!isCssClassMatching(readClassValueFromTNode(tNode), selectorAttrValue)) {\n                        if (isPositive(mode))\n                            return false;\n                        skipToNextSelector = true;\n                    }\n                    continue;\n                }\n                var isInlineTemplate = tNode.type == 0 /* Container */ && tNode.tagName !== NG_TEMPLATE_SELECTOR;\n                var attrName = (mode & 8 /* CLASS */) ? 'class' : current;\n                var attrIndexInNode = findAttrIndexInNode(attrName, nodeAttrs, isInlineTemplate, isProjectionMode);\n                if (attrIndexInNode === -1) {\n                    if (isPositive(mode))\n                        return false;\n                    skipToNextSelector = true;\n                    continue;\n                }\n                if (selectorAttrValue !== '') {\n                    var nodeAttrValue = void 0;\n                    if (attrIndexInNode > nameOnlyMarkerIdx) {\n                        nodeAttrValue = '';\n                    }\n                    else {\n                        ngDevMode && assertNotEqual(nodeAttrs[attrIndexInNode], 0 /* NamespaceURI */, 'We do not match directives on namespaced attributes');\n                        nodeAttrValue = nodeAttrs[attrIndexInNode + 1];\n                    }\n                    var compareAgainstClassName = mode & 8 /* CLASS */ ? nodeAttrValue : null;\n                    if (compareAgainstClassName &&\n                        !isCssClassMatching(compareAgainstClassName, selectorAttrValue) ||\n                        mode & 2 /* ATTRIBUTE */ && selectorAttrValue !== nodeAttrValue) {\n                        if (isPositive(mode))\n                            return false;\n                        skipToNextSelector = true;\n                    }\n                }\n            }\n        }\n        return isPositive(mode) || skipToNextSelector;\n    }\n    function isPositive(mode) {\n        return (mode & 1 /* NOT */) === 0;\n    }\n    function readClassValueFromTNode(tNode) {\n        // comparing against CSS class values is complex because the compiler doesn't place them as\n        // regular attributes when an element is created. Instead, the classes (and styles for\n        // that matter) are placed in a special styling context that is used for resolving all\n        // class/style values across static attributes, [style]/[class] and [style.prop]/[class.name]\n        // bindings. Therefore if and when the styling context exists then the class values are to be\n        // extracted by the context helper code below...\n        return tNode.stylingTemplate ? getInitialClassNameValue(tNode.stylingTemplate) : '';\n    }\n    /**\n     * Examines the attribute's definition array for a node to find the index of the\n     * attribute that matches the given `name`.\n     *\n     * NOTE: This will not match namespaced attributes.\n     *\n     * Attribute matching depends upon `isInlineTemplate` and `isProjectionMode`.\n     * The following table summarizes which types of attributes we attempt to match:\n     *\n     * ===========================================================================================================\n     * Modes                   | Normal Attributes | Bindings Attributes | Template Attributes | I18n\n     * Attributes\n     * ===========================================================================================================\n     * Inline + Projection     | YES               | YES                 | NO                  | YES\n     * -----------------------------------------------------------------------------------------------------------\n     * Inline + Directive      | NO                | NO                  | YES                 | NO\n     * -----------------------------------------------------------------------------------------------------------\n     * Non-inline + Projection | YES               | YES                 | NO                  | YES\n     * -----------------------------------------------------------------------------------------------------------\n     * Non-inline + Directive  | YES               | YES                 | NO                  | YES\n     * ===========================================================================================================\n     *\n     * @param name the name of the attribute to find\n     * @param attrs the attribute array to examine\n     * @param isInlineTemplate true if the node being matched is an inline template (e.g. `*ngFor`)\n     * rather than a manually expanded template node (e.g `<ng-template>`).\n     * @param isProjectionMode true if we are matching against content projection otherwise we are\n     * matching against directives.\n     */\n    function findAttrIndexInNode(name, attrs, isInlineTemplate, isProjectionMode) {\n        if (attrs === null)\n            return -1;\n        var i = 0;\n        if (isProjectionMode || !isInlineTemplate) {\n            var bindingsMode = false;\n            while (i < attrs.length) {\n                var maybeAttrName = attrs[i];\n                if (maybeAttrName === name) {\n                    return i;\n                }\n                else if (maybeAttrName === 3 /* Bindings */ || maybeAttrName === 6 /* I18n */) {\n                    bindingsMode = true;\n                }\n                else if (maybeAttrName === 1 /* Classes */) {\n                    var value = attrs[++i];\n                    // We should skip classes here because we have a separate mechanism for\n                    // matching classes in projection mode.\n                    while (typeof value === 'string') {\n                        value = attrs[++i];\n                    }\n                    continue;\n                }\n                else if (maybeAttrName === 4 /* Template */) {\n                    // We do not care about Template attributes in this scenario.\n                    break;\n                }\n                else if (maybeAttrName === 0 /* NamespaceURI */) {\n                    // Skip the whole namespaced attribute and value. This is by design.\n                    i += 4;\n                    continue;\n                }\n                // In binding mode there are only names, rather than name-value pairs.\n                i += bindingsMode ? 1 : 2;\n            }\n            // We did not match the attribute\n            return -1;\n        }\n        else {\n            return matchTemplateAttribute(attrs, name);\n        }\n    }\n    function isNodeMatchingSelectorList(tNode, selector, isProjectionMode) {\n        if (isProjectionMode === void 0) { isProjectionMode = false; }\n        for (var i = 0; i < selector.length; i++) {\n            if (isNodeMatchingSelector(tNode, selector[i], isProjectionMode)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    function getProjectAsAttrValue(tNode) {\n        var nodeAttrs = tNode.attrs;\n        if (nodeAttrs != null) {\n            var ngProjectAsAttrIdx = nodeAttrs.indexOf(5 /* ProjectAs */);\n            // only check for ngProjectAs in attribute names, don't accidentally match attribute's value\n            // (attribute names are stored at even indexes)\n            if ((ngProjectAsAttrIdx & 1) === 0) {\n                return nodeAttrs[ngProjectAsAttrIdx + 1];\n            }\n        }\n        return null;\n    }\n    function getNameOnlyMarkerIndex(nodeAttrs) {\n        for (var i = 0; i < nodeAttrs.length; i++) {\n            var nodeAttr = nodeAttrs[i];\n            if (isNameOnlyAttributeMarker(nodeAttr)) {\n                return i;\n            }\n        }\n        return nodeAttrs.length;\n    }\n    function matchTemplateAttribute(attrs, name) {\n        var i = attrs.indexOf(4 /* Template */);\n        if (i > -1) {\n            i++;\n            while (i < attrs.length) {\n                if (attrs[i] === name)\n                    return i;\n                i++;\n            }\n        }\n        return -1;\n    }\n    /**\n     * Checks whether a selector is inside a CssSelectorList\n     * @param selector Selector to be checked.\n     * @param list List in which to look for the selector.\n     */\n    function isSelectorInSelectorList(selector, list) {\n        selectorListLoop: for (var i = 0; i < list.length; i++) {\n            var currentSelectorInList = list[i];\n            if (selector.length !== currentSelectorInList.length) {\n                continue;\n            }\n            for (var j = 0; j < selector.length; j++) {\n                if (selector[j] !== currentSelectorInList[j]) {\n                    continue selectorListLoop;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Marks that the next string is for element.\n     *\n     * See `I18nMutateOpCodes` documentation.\n     */\n    var ELEMENT_MARKER = {\n        marker: 'element'\n    };\n    /**\n     * Marks that the next string is for comment.\n     *\n     * See `I18nMutateOpCodes` documentation.\n     */\n    var COMMENT_MARKER = {\n        marker: 'comment'\n    };\n\n    var _stylingMode = 0;\n    function runtimeIsNewStylingInUse() {\n        return _stylingMode > 0 /* UseOld */;\n    }\n    function runtimeAllowOldStyling() {\n        return _stylingMode < 2 /* UseNew */;\n    }\n    var _currentSanitizer;\n    function setCurrentStyleSanitizer(sanitizer) {\n        _currentSanitizer = sanitizer;\n    }\n    function getCurrentStyleSanitizer() {\n        return _currentSanitizer;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function attachDebugObject(obj, debug) {\n        Object.defineProperty(obj, 'debug', { value: debug, enumerable: false });\n    }\n\n    /**\n    * @license\n    * Copyright Google Inc. All Rights Reserved.\n    *\n    * Use of this source code is governed by an MIT-style license that can be\n    * found in the LICENSE file at https://angular.io/license\n    */\n    var MAP_BASED_ENTRY_PROP_NAME = '--MAP--';\n    /**\n     * Creates a new instance of the `TStylingContext`.\n     *\n     * This function will also pre-fill the context with data\n     * for map-based bindings.\n     */\n    function allocTStylingContext() {\n        // because map-based bindings deal with a dynamic set of values, there\n        // is no way to know ahead of time whether or not sanitization is required.\n        // For this reason the configuration will always mark sanitization as active\n        // (this means that when map-based values are applied then sanitization will\n        // be checked against each property).\n        var mapBasedConfig = 1 /* SanitizationRequired */;\n        return [0 /* Initial */, 0, mapBasedConfig, 0, MAP_BASED_ENTRY_PROP_NAME];\n    }\n    /**\n     * Temporary function that allows for a string-based property name to be\n     * obtained from an index-based property identifier.\n     *\n     * This function will be removed once the new styling refactor code (which\n     * lives inside of `render3/styling_next/`) replaces the existing styling\n     * implementation.\n     */\n    function getBindingNameFromIndex(stylingContext, offset, directiveIndex, isClassBased) {\n        var singleIndex = getSinglePropIndexValue(stylingContext, directiveIndex, offset, isClassBased);\n        return getProp(stylingContext, singleIndex);\n    }\n    function updateContextDirectiveIndex(context, index) {\n        context[1 /* MaxDirectiveIndexPosition */] = index;\n    }\n    function getConfig(context) {\n        return context[0 /* ConfigPosition */];\n    }\n    function setConfig(context, value) {\n        context[0 /* ConfigPosition */] = value;\n    }\n    function getProp$1(context, index) {\n        return context[index + 2 /* PropOffset */];\n    }\n    function getPropConfig(context, index) {\n        return context[index + 0 /* ConfigAndGuardOffset */] &\n            1 /* Mask */;\n    }\n    function isSanitizationRequired(context, index) {\n        return (getPropConfig(context, index) & 1 /* SanitizationRequired */) > 0;\n    }\n    function getGuardMask(context, index) {\n        var configGuardValue = context[index + 0 /* ConfigAndGuardOffset */];\n        return configGuardValue >> 1 /* TotalBits */;\n    }\n    function setGuardMask(context, index, maskValue) {\n        var config = getPropConfig(context, index);\n        var guardMask = maskValue << 1 /* TotalBits */;\n        context[index + 0 /* ConfigAndGuardOffset */] = config | guardMask;\n    }\n    function getValuesCount(context, index) {\n        return context[index + 1 /* ValuesCountOffset */];\n    }\n    function getBindingValue(context, index, offset) {\n        return context[index + 3 /* BindingsStartOffset */ + offset];\n    }\n    function getDefaultValue(context, index) {\n        var valuesCount = getValuesCount(context, index);\n        return context[index + 3 /* BindingsStartOffset */ + valuesCount - 1];\n    }\n    /**\n     * Temporary function which determines whether or not a context is\n     * allowed to be flushed based on the provided directive index.\n     */\n    function allowStylingFlush(context, index) {\n        return index === context[1 /* MaxDirectiveIndexPosition */];\n    }\n    function lockContext(context) {\n        setConfig(context, getConfig(context) | 1 /* Locked */);\n    }\n    function isContextLocked(context) {\n        return (getConfig(context) & 1 /* Locked */) > 0;\n    }\n    function getPropValuesStartPosition(context) {\n        return 5 /* MapBindingsBindingsStartPosition */ +\n            context[3 /* MapBindingsValuesCountPosition */];\n    }\n    function hasValueChanged$1(a, b) {\n        var compareValueA = Array.isArray(a) ? a[0 /* RawValuePosition */] : a;\n        var compareValueB = Array.isArray(b) ? b[0 /* RawValuePosition */] : b;\n        return compareValueA !== compareValueB;\n    }\n    /**\n     * Determines whether the provided styling value is truthy or falsy.\n     */\n    function isStylingValueDefined(value) {\n        // the reason why null is compared against is because\n        // a CSS class value that is set to `false` must be\n        // respected (otherwise it would be treated as falsy).\n        // Empty string values are because developers usually\n        // set a value to an empty string to remove it.\n        return value != null && value !== '';\n    }\n    /**\n     * Returns the current style sanitizer function for the given view.\n     *\n     * The default style sanitizer (which lives inside of `LView`) will\n     * be returned depending on whether the `styleSanitizer` instruction\n     * was called or not prior to any styling instructions running.\n     */\n    function getCurrentOrLViewSanitizer(lView) {\n        var sanitizer = (getCurrentStyleSanitizer() || lView[SANITIZER]);\n        if (sanitizer && typeof sanitizer !== 'function') {\n            setCurrentStyleSanitizer(sanitizer);\n            return sanitizeUsingSanitizerObject;\n        }\n        return sanitizer;\n    }\n    /**\n     * Style sanitization function that internally uses a `Sanitizer` instance to handle style\n     * sanitization.\n     */\n    var sanitizeUsingSanitizerObject = function (prop, value, mode) {\n        var sanitizer = getCurrentStyleSanitizer();\n        if (sanitizer) {\n            if (mode !== undefined && mode & 2 /* SanitizeOnly */) {\n                return sanitizer.sanitize(exports.SecurityContext.STYLE, value);\n            }\n            else {\n                return true;\n            }\n        }\n        return value;\n    };\n\n    /**\n     * --------\n     *\n     * This file contains the core logic for styling in Angular.\n     *\n     * All styling bindings (i.e. `[style]`, `[style.prop]`, `[class]` and `[class.name]`)\n     * will have their values be applied through the logic in this file.\n     *\n     * When a binding is encountered (e.g. `<div [style.width]=\"w\">`) then\n     * the binding data will be populated into a `TStylingContext` data-structure.\n     * There is only one `TStylingContext` per `TNode` and each element instance\n     * will update its style/class binding values in concert with the styling\n     * context.\n     *\n     * To learn more about the algorithm see `TStylingContext`.\n     *\n     * --------\n     */\n    var DEFAULT_BINDING_VALUE = null;\n    var DEFAULT_SIZE_VALUE = 1;\n    // The first bit value reflects a map-based binding value's bit.\n    // The reason why it's always activated for every entry in the map\n    // is so that if any map-binding values update then all other prop\n    // based bindings will pass the guard check automatically without\n    // any extra code or flags.\n    var DEFAULT_GUARD_MASK_VALUE = 1;\n    var STYLING_INDEX_FOR_MAP_BINDING = 0;\n    var STYLING_INDEX_START_VALUE = 1;\n    // the values below are global to all styling code below. Each value\n    // will either increment or mutate each time a styling instruction is\n    // executed. Do not modify the values below.\n    var currentStyleIndex = STYLING_INDEX_START_VALUE;\n    var currentClassIndex = STYLING_INDEX_START_VALUE;\n    var stylesBitMask = 0;\n    var classesBitMask = 0;\n    var deferredBindingQueue = [];\n    /**\n     * Visits a class-based binding and updates the new value (if changed).\n     *\n     * This function is called each time a class-based styling instruction\n     * is executed. It's important that it's always called (even if the value\n     * has not changed) so that the inner counter index value is incremented.\n     * This way, each instruction is always guaranteed to get the same counter\n     * state each time it's called (which then allows the `TStylingContext`\n     * and the bit mask values to be in sync).\n     */\n    function updateClassBinding(context, data, prop, bindingIndex, value, deferRegistration, forceUpdate) {\n        var isMapBased = !prop;\n        var index = isMapBased ? STYLING_INDEX_FOR_MAP_BINDING : currentClassIndex++;\n        var updated = updateBindingData(context, data, index, prop, bindingIndex, value, deferRegistration, forceUpdate, false);\n        if (updated || forceUpdate) {\n            classesBitMask |= 1 << index;\n        }\n    }\n    /**\n     * Visits a style-based binding and updates the new value (if changed).\n     *\n     * This function is called each time a style-based styling instruction\n     * is executed. It's important that it's always called (even if the value\n     * has not changed) so that the inner counter index value is incremented.\n     * This way, each instruction is always guaranteed to get the same counter\n     * state each time it's called (which then allows the `TStylingContext`\n     * and the bit mask values to be in sync).\n     */\n    function updateStyleBinding(context, data, prop, bindingIndex, value, sanitizer, deferRegistration, forceUpdate) {\n        var isMapBased = !prop;\n        var index = isMapBased ? STYLING_INDEX_FOR_MAP_BINDING : currentStyleIndex++;\n        var sanitizationRequired = isMapBased ?\n            true :\n            (sanitizer ? sanitizer(prop, null, 1 /* ValidateProperty */) : false);\n        var updated = updateBindingData(context, data, index, prop, bindingIndex, value, deferRegistration, forceUpdate, sanitizationRequired);\n        if (updated || forceUpdate) {\n            stylesBitMask |= 1 << index;\n        }\n    }\n    /**\n     * Called each time a binding value has changed within the provided `TStylingContext`.\n     *\n     * This function is designed to be called from `updateStyleBinding` and `updateClassBinding`.\n     * If called during the first update pass, the binding will be registered in the context.\n     * If the binding does get registered and the `deferRegistration` flag is true then the\n     * binding data will be queued up until the context is later flushed in `applyStyling`.\n     *\n     * This function will also update binding slot in the provided `LStylingData` with the\n     * new binding entry (if it has changed).\n     *\n     * @returns whether or not the binding value was updated in the `LStylingData`.\n     */\n    function updateBindingData(context, data, counterIndex, prop, bindingIndex, value, deferRegistration, forceUpdate, sanitizationRequired) {\n        if (!isContextLocked(context)) {\n            if (deferRegistration) {\n                deferBindingRegistration(context, counterIndex, prop, bindingIndex, sanitizationRequired);\n            }\n            else {\n                deferredBindingQueue.length && flushDeferredBindings();\n                // this will only happen during the first update pass of the\n                // context. The reason why we can't use `tNode.firstTemplatePass`\n                // here is because its not guaranteed to be true when the first\n                // update pass is executed (remember that all styling instructions\n                // are run in the update phase, and, as a result, are no more\n                // styling instructions that are run in the creation phase).\n                registerBinding(context, counterIndex, prop, bindingIndex, sanitizationRequired);\n            }\n        }\n        var changed = forceUpdate || hasValueChanged$1(data[bindingIndex], value);\n        if (changed) {\n            data[bindingIndex] = value;\n        }\n        return changed;\n    }\n    /**\n     * Schedules a binding registration to be run at a later point.\n     *\n     * The reasoning for this feature is to ensure that styling\n     * bindings are registered in the correct order for when\n     * directives/components have a super/sub class inheritance\n     * chains. Each directive's styling bindings must be\n     * registered into the context in reverse order. Therefore all\n     * bindings will be buffered in reverse order and then applied\n     * after the inheritance chain exits.\n     */\n    function deferBindingRegistration(context, counterIndex, prop, bindingIndex, sanitizationRequired) {\n        deferredBindingQueue.unshift(context, counterIndex, prop, bindingIndex, sanitizationRequired);\n    }\n    /**\n     * Flushes the collection of deferred bindings and causes each entry\n     * to be registered into the context.\n     */\n    function flushDeferredBindings() {\n        var i = 0;\n        while (i < deferredBindingQueue.length) {\n            var context = deferredBindingQueue[i++];\n            var count = deferredBindingQueue[i++];\n            var prop = deferredBindingQueue[i++];\n            var bindingIndex = deferredBindingQueue[i++];\n            var sanitizationRequired = deferredBindingQueue[i++];\n            registerBinding(context, count, prop, bindingIndex, sanitizationRequired);\n        }\n        deferredBindingQueue.length = 0;\n    }\n    /**\n     * Registers the provided binding (prop + bindingIndex) into the context.\n     *\n     * This function is shared between bindings that are assigned immediately\n     * (via `updateBindingData`) and at a deferred stage. When called, it will\n     * figure out exactly where to place the binding data in the context.\n     *\n     * It is needed because it will either update or insert a styling property\n     * into the context at the correct spot.\n     *\n     * When called, one of two things will happen:\n     *\n     * 1) If the property already exists in the context then it will just add\n     *    the provided `bindingValue` to the end of the binding sources region\n     *    for that particular property.\n     *\n     *    - If the binding value is a number then it will be added as a new\n     *      binding index source next to the other binding sources for the property.\n     *\n     *    - Otherwise, if the binding value is a string/boolean/null type then it will\n     *      replace the default value for the property if the default value is `null`.\n     *\n     * 2) If the property does not exist then it will be inserted into the context.\n     *    The styling context relies on all properties being stored in alphabetical\n     *    order, so it knows exactly where to store it.\n     *\n     *    When inserted, a default `null` value is created for the property which exists\n     *    as the default value for the binding. If the bindingValue property is inserted\n     *    and it is either a string, number or null value then that will replace the default\n     *    value.\n     *\n     * Note that this function is also used for map-based styling bindings. They are treated\n     * much the same as prop-based bindings, but, because they do not have a property value\n     * (since it's a map), all map-based entries are stored in an already populated area of\n     * the context at the top (which is reserved for map-based entries).\n     */\n    function registerBinding(context, countId, prop, bindingValue, sanitizationRequired) {\n        // prop-based bindings (e.g `<div [style.width]=\"w\" [class.foo]=\"f\">`)\n        if (prop) {\n            var found = false;\n            var i = getPropValuesStartPosition(context);\n            while (i < context.length) {\n                var valuesCount = getValuesCount(context, i);\n                var p = getProp$1(context, i);\n                found = prop <= p;\n                if (found) {\n                    // all style/class bindings are sorted by property name\n                    if (prop < p) {\n                        allocateNewContextEntry(context, i, prop, sanitizationRequired);\n                    }\n                    addBindingIntoContext(context, false, i, bindingValue, countId);\n                    break;\n                }\n                i += 3 /* BindingsStartOffset */ + valuesCount;\n            }\n            if (!found) {\n                allocateNewContextEntry(context, context.length, prop, sanitizationRequired);\n                addBindingIntoContext(context, false, i, bindingValue, countId);\n            }\n        }\n        else {\n            // map-based bindings (e.g `<div [style]=\"s\" [class]=\"{className:true}\">`)\n            // there is no need to allocate the map-based binding region into the context\n            // since it is already there when the context is first created.\n            addBindingIntoContext(context, true, 2 /* MapBindingsPosition */, bindingValue, countId);\n        }\n    }\n    function allocateNewContextEntry(context, index, prop, sanitizationRequired) {\n        // 1,2: splice index locations\n        // 3: each entry gets a config value (guard mask + flags)\n        // 4. each entry gets a size value (which is always one because there is always a default binding\n        // value)\n        // 5. the property that is getting allocated into the context\n        // 6. the default binding value (usually `null`)\n        var config = sanitizationRequired ? 1 /* SanitizationRequired */ :\n            0 /* Default */;\n        context.splice(index, 0, config, DEFAULT_SIZE_VALUE, prop, DEFAULT_BINDING_VALUE);\n        setGuardMask(context, index, DEFAULT_GUARD_MASK_VALUE);\n    }\n    /**\n     * Inserts a new binding value into a styling property tuple in the `TStylingContext`.\n     *\n     * A bindingValue is inserted into a context during the first update pass\n     * of a template or host bindings function. When this occurs, two things\n     * happen:\n     *\n     * - If the bindingValue value is a number then it is treated as a bindingIndex\n     *   value (a index in the `LView`) and it will be inserted next to the other\n     *   binding index entries.\n     *\n     * - Otherwise the binding value will update the default value for the property\n     *   and this will only happen if the default value is `null`.\n     *\n     * Note that this function also handles map-based bindings and will insert them\n     * at the top of the context.\n     */\n    function addBindingIntoContext(context, isMapBased, index, bindingValue, countId) {\n        var valuesCount = getValuesCount(context, index);\n        var lastValueIndex = index + 3 /* BindingsStartOffset */ + valuesCount;\n        if (!isMapBased) {\n            // prop-based values all have default values, but map-based entries do not.\n            // we want to access the index for the default value in this case and not just\n            // the bindings...\n            lastValueIndex--;\n        }\n        if (typeof bindingValue === 'number') {\n            context.splice(lastValueIndex, 0, bindingValue);\n            context[index + 1 /* ValuesCountOffset */]++;\n            // now that a new binding index has been added to the property\n            // the guard mask bit value (at the `countId` position) needs\n            // to be included into the existing mask value.\n            var guardMask = getGuardMask(context, index) | (1 << countId);\n            setGuardMask(context, index, guardMask);\n        }\n        else if (typeof bindingValue === 'string' && context[lastValueIndex] == null) {\n            context[lastValueIndex] = bindingValue;\n        }\n    }\n    /**\n     * Applies all class entries in the provided context to the provided element and resets\n     * any counter and/or bitMask values associated with class bindings.\n     *\n     * @returns whether or not the classes were flushed to the element.\n     */\n    function applyClasses(renderer, data, context, element, directiveIndex) {\n        var classesFlushed = false;\n        if (allowStylingFlush(context, directiveIndex)) {\n            var isFirstPass = !isContextLocked(context);\n            isFirstPass && lockContext(context);\n            if (classesBitMask) {\n                // there is no way to sanitize a class value therefore `sanitizer=null`\n                applyStyling(context, renderer, element, data, classesBitMask, setClass$1, null);\n                classesBitMask = 0;\n                classesFlushed = true;\n            }\n            currentClassIndex = STYLING_INDEX_START_VALUE;\n        }\n        return classesFlushed;\n    }\n    /**\n     * Applies all style entries in the provided context to the provided element and resets\n     * any counter and/or bitMask values associated with style bindings.\n     *\n     * @returns whether or not the styles were flushed to the element.\n     */\n    function applyStyles(renderer, data, context, element, directiveIndex, sanitizer) {\n        var stylesFlushed = false;\n        if (allowStylingFlush(context, directiveIndex)) {\n            var isFirstPass = !isContextLocked(context);\n            isFirstPass && lockContext(context);\n            if (stylesBitMask) {\n                applyStyling(context, renderer, element, data, stylesBitMask, setStyle$1, sanitizer);\n                stylesBitMask = 0;\n                stylesFlushed = true;\n            }\n            currentStyleIndex = STYLING_INDEX_START_VALUE;\n            return true;\n        }\n        return stylesFlushed;\n    }\n    /**\n     * Runs through the provided styling context and applies each value to\n     * the provided element (via the renderer) if one or more values are present.\n     *\n     * This function will iterate over all entries present in the provided\n     * `TStylingContext` array (both prop-based and map-based bindings).-\n     *\n     * Each entry, within the `TStylingContext` array, is stored alphabetically\n     * and this means that each prop/value entry will be applied in order\n     * (so long as it is marked dirty in the provided `bitMask` value).\n     *\n     * If there are any map-based entries present (which are applied to the\n     * element via the `[style]` and `[class]` bindings) then those entries\n     * will be applied as well. However, the code for that is not apart of\n     * this function. Instead, each time a property is visited, then the\n     * code below will call an external function called `stylingMapsSyncFn`\n     * and, if present, it will keep the application of styling values in\n     * map-based bindings up to sync with the application of prop-based\n     * bindings.\n     *\n     * Visit `styling_next/map_based_bindings.ts` to learn more about how the\n     * algorithm works for map-based styling bindings.\n     *\n     * Note that this function is not designed to be called in isolation (use\n     * `applyClasses` and `applyStyles` to actually apply styling values).\n     */\n    function applyStyling(context, renderer, element, bindingData, bitMaskValue, applyStylingFn, sanitizer) {\n        deferredBindingQueue.length && flushDeferredBindings();\n        var bitMask = normalizeBitMaskValue(bitMaskValue);\n        var stylingMapsSyncFn = getStylingMapsSyncFn();\n        var mapsGuardMask = getGuardMask(context, 2 /* MapBindingsPosition */);\n        var applyAllValues = (bitMask & mapsGuardMask) > 0;\n        var mapsMode = applyAllValues ? 1 /* ApplyAllValues */ : 0 /* TraverseValues */;\n        var i = getPropValuesStartPosition(context);\n        while (i < context.length) {\n            var valuesCount = getValuesCount(context, i);\n            var guardMask = getGuardMask(context, i);\n            if (bitMask & guardMask) {\n                var valueApplied = false;\n                var prop = getProp$1(context, i);\n                var valuesCountUpToDefault = valuesCount - 1;\n                var defaultValue = getBindingValue(context, i, valuesCountUpToDefault);\n                // case 1: apply prop-based values\n                // try to apply the binding values and see if a non-null\n                // value gets set for the styling binding\n                for (var j = 0; j < valuesCountUpToDefault; j++) {\n                    var bindingIndex = getBindingValue(context, i, j);\n                    var value = bindingData[bindingIndex];\n                    if (isStylingValueDefined(value)) {\n                        var finalValue = sanitizer && isSanitizationRequired(context, i) ?\n                            sanitizer(prop, value, 2 /* SanitizeOnly */) :\n                            value;\n                        applyStylingFn(renderer, element, prop, finalValue, bindingIndex);\n                        valueApplied = true;\n                        break;\n                    }\n                }\n                // case 2: apply map-based values\n                // traverse through each map-based styling binding and update all values up to\n                // the provided `prop` value. If the property was not applied in the loop above\n                // then it will be attempted to be applied in the maps sync code below.\n                if (stylingMapsSyncFn) {\n                    // determine whether or not to apply the target property or to skip it\n                    var mode = mapsMode | (valueApplied ? 4 /* SkipTargetProp */ :\n                        2 /* ApplyTargetProp */);\n                    var valueAppliedWithinMap = stylingMapsSyncFn(context, renderer, element, bindingData, applyStylingFn, sanitizer, mode, prop, defaultValue);\n                    valueApplied = valueApplied || valueAppliedWithinMap;\n                }\n                // case 3: apply the default value\n                // if the value has not yet been applied then a truthy value does not exist in the\n                // prop-based or map-based bindings code. If and when this happens, just apply the\n                // default value (even if the default value is `null`).\n                if (!valueApplied) {\n                    applyStylingFn(renderer, element, prop, defaultValue);\n                }\n            }\n            i += 3 /* BindingsStartOffset */ + valuesCount;\n        }\n        // the map-based styling entries may have not applied all their\n        // values. For this reason, one more call to the sync function\n        // needs to be issued at the end.\n        if (stylingMapsSyncFn) {\n            stylingMapsSyncFn(context, renderer, element, bindingData, applyStylingFn, sanitizer, mapsMode);\n        }\n    }\n    function normalizeBitMaskValue(value) {\n        // if pass => apply all values (-1 implies that all bits are flipped to true)\n        if (value === true)\n            return -1;\n        // if pass => skip all values\n        if (value === false)\n            return 0;\n        // return the bit mask value as is\n        return value;\n    }\n    var _activeStylingMapApplyFn = null;\n    function getStylingMapsSyncFn() {\n        return _activeStylingMapApplyFn;\n    }\n    function setStylingMapsSyncFn(fn) {\n        _activeStylingMapApplyFn = fn;\n    }\n    /**\n     * Assigns a style value to a style property for the given element.\n     */\n    var setStyle$1 = function (renderer, native, prop, value) {\n        if (value) {\n            // opacity, z-index and flexbox all have number values\n            // and these need to be converted into strings so that\n            // they can be assigned properly.\n            value = value.toString();\n            ngDevMode && ngDevMode.rendererSetStyle++;\n            renderer && isProceduralRenderer(renderer) ?\n                renderer.setStyle(native, prop, value, RendererStyleFlags3.DashCase) :\n                native.style.setProperty(prop, value);\n        }\n        else {\n            ngDevMode && ngDevMode.rendererRemoveStyle++;\n            renderer && isProceduralRenderer(renderer) ?\n                renderer.removeStyle(native, prop, RendererStyleFlags3.DashCase) :\n                native.style.removeProperty(prop);\n        }\n    };\n    /**\n     * Adds/removes the provided className value to the provided element.\n     */\n    var setClass$1 = function (renderer, native, className, value) {\n        if (className !== '') {\n            if (value) {\n                ngDevMode && ngDevMode.rendererAddClass++;\n                renderer && isProceduralRenderer(renderer) ? renderer.addClass(native, className) :\n                    native.classList.add(className);\n            }\n            else {\n                ngDevMode && ngDevMode.rendererRemoveClass++;\n                renderer && isProceduralRenderer(renderer) ? renderer.removeClass(native, className) :\n                    native.classList.remove(className);\n            }\n        }\n    };\n\n    /**\n     * --------\n     *\n     * This file contains the algorithm logic for applying map-based bindings\n     * such as `[style]` and `[class]`.\n     *\n     * --------\n     */\n    /**\n     * Used to apply styling values presently within any map-based bindings on an element.\n     *\n     * Angular supports map-based styling bindings which can be applied via the\n     * `[style]` and `[class]` bindings which can be placed on any HTML element.\n     * These bindings can work independently, together or alongside prop-based\n     * styling bindings (e.g. `<div [style]=\"x\" [style.width]=\"w\">`).\n     *\n     * If a map-based styling binding is detected by the compiler, the following\n     * AOT code is produced:\n     *\n     * ```typescript\n     * styleMap(ctx.styles); // styles = {key:value}\n     * classMap(ctx.classes); // classes = {key:value}|string\n     * ```\n     *\n     * If and when either of the instructions above are evaluated, then the code\n     * present in this file is included into the bundle. The mechanism used, to\n     * activate support for map-based bindings at runtime is possible via the\n     * `activeStylingMapFeature` function (which is also present in this file).\n     *\n     * # The Algorithm\n     * Whenever a map-based binding updates (which is when the identity of the\n     * map-value changes) then the map is iterated over and a `LStylingMap` array\n     * is produced. The `LStylingMap` instance is stored in the binding location\n     * where the `BINDING_INDEX` is situated when the `styleMap()` or `classMap()`\n     * instruction were called. Once the binding changes, then the internal `bitMask`\n     * value is marked as dirty.\n     *\n     * Styling values are applied once CD exits the element (which happens when\n     * the `select(n)` instruction is called or the template function exits). When\n     * this occurs, all prop-based bindings are applied. If a map-based binding is\n     * present then a special flushing function (called a sync function) is made\n     * available and it will be called each time a styling property is flushed.\n     *\n     * The flushing algorithm is designed to apply styling for a property (which is\n     * a CSS property or a className value) one by one. If map-based bindings\n     * are present, then the flushing algorithm will keep calling the maps styling\n     * sync function each time a property is visited. This way, the flushing\n     * behavior of map-based bindings will always be at the same property level\n     * as the current prop-based property being iterated over (because everything\n     * is alphabetically sorted).\n     *\n     * Let's imagine we have the following HTML template code:\n     *\n     * ```html\n     * <div [style]=\"{width:'100px', height:'200px', 'z-index':'10'}\"\n     *      [style.width.px]=\"200\">...</div>\n     * ```\n     *\n     * When CD occurs, both the `[style]` and `[style.width]` bindings\n     * are evaluated. Then when the styles are flushed on screen, the\n     * following operations happen:\n     *\n     * 1. `[style.width]` is attempted to be written to the element.\n     *\n     * 2.  Once that happens, the algorithm instructs the map-based\n     *     entries (`[style]` in this case) to \"catch up\" and apply\n     *     all values up to the `width` value. When this happens the\n     *     `height` value is applied to the element (since it is\n     *     alphabetically situated before the `width` property).\n     *\n     * 3. Since there are no more prop-based entries anymore, the\n     *    loop exits and then, just before the flushing ends, it\n     *    instructs all map-based bindings to \"finish up\" applying\n     *    their values.\n     *\n     * 4. The only remaining value within the map-based entries is\n     *    the `z-index` value (`width` got skipped because it was\n     *    successfully applied via the prop-based `[style.width]`\n     *    binding). Since all map-based entries are told to \"finish up\",\n     *    the `z-index` value is iterated over and it is then applied\n     *    to the element.\n     *\n     * The most important thing to take note of here is that prop-based\n     * bindings are evaluated in order alongside map-based bindings.\n     * This allows all styling across an element to be applied in O(n)\n     * time (a similar algorithm is that of the array merge algorithm\n     * in merge sort).\n     */\n    var syncStylingMap = function (context, renderer, element, data, applyStylingFn, sanitizer, mode, targetProp, defaultValue) {\n        var targetPropValueWasApplied = false;\n        // once the map-based styling code is activate it is never deactivated. For this reason a\n        // check to see if the current styling context has any map based bindings is required.\n        var totalMaps = getValuesCount(context, 2 /* MapBindingsPosition */);\n        if (totalMaps) {\n            var runTheSyncAlgorithm = true;\n            var loopUntilEnd = !targetProp;\n            // If the code is told to finish up (run until the end), but the mode\n            // hasn't been flagged to apply values (it only traverses values) then\n            // there is no point in iterating over the array because nothing will\n            // be applied to the element.\n            if (loopUntilEnd && (mode & ~1 /* ApplyAllValues */)) {\n                runTheSyncAlgorithm = false;\n                targetPropValueWasApplied = true;\n            }\n            if (runTheSyncAlgorithm) {\n                targetPropValueWasApplied = innerSyncStylingMap(context, renderer, element, data, applyStylingFn, sanitizer, mode, targetProp || null, 0, defaultValue || null);\n            }\n            if (loopUntilEnd) {\n                resetSyncCursors();\n            }\n        }\n        return targetPropValueWasApplied;\n    };\n    /**\n     * Recursive function designed to apply map-based styling to an element one map at a time.\n     *\n     * This function is designed to be called from the `syncStylingMap` function and will\n     * apply map-based styling data one map at a time to the provided `element`.\n     *\n     * This function is recursive and it will call itself if a follow-up map value is to be\n     * processed. To learn more about how the algorithm works, see `syncStylingMap`.\n     */\n    function innerSyncStylingMap(context, renderer, element, data, applyStylingFn, sanitizer, mode, targetProp, currentMapIndex, defaultValue) {\n        var targetPropValueWasApplied = false;\n        var totalMaps = getValuesCount(context, 2 /* MapBindingsPosition */);\n        if (currentMapIndex < totalMaps) {\n            var bindingIndex = getBindingValue(context, 2 /* MapBindingsPosition */, currentMapIndex);\n            var lStylingMap = data[bindingIndex];\n            var cursor = getCurrentSyncCursor(currentMapIndex);\n            while (cursor < lStylingMap.length) {\n                var prop = getMapProp(lStylingMap, cursor);\n                var iteratedTooFar = targetProp && prop > targetProp;\n                var isTargetPropMatched = !iteratedTooFar && prop === targetProp;\n                var value = getMapValue(lStylingMap, cursor);\n                var valueIsDefined = isStylingValueDefined(value);\n                // the recursive code is designed to keep applying until\n                // it reaches or goes past the target prop. If and when\n                // this happens then it will stop processing values, but\n                // all other map values must also catch up to the same\n                // point. This is why a recursive call is still issued\n                // even if the code has iterated too far.\n                var innerMode = iteratedTooFar ? mode : resolveInnerMapMode(mode, valueIsDefined, isTargetPropMatched);\n                var innerProp = iteratedTooFar ? targetProp : prop;\n                var valueApplied = innerSyncStylingMap(context, renderer, element, data, applyStylingFn, sanitizer, innerMode, innerProp, currentMapIndex + 1, defaultValue);\n                if (iteratedTooFar) {\n                    break;\n                }\n                if (!valueApplied && isValueAllowedToBeApplied(mode, isTargetPropMatched)) {\n                    var useDefault = isTargetPropMatched && !valueIsDefined;\n                    var valueToApply = useDefault ? defaultValue : value;\n                    var bindingIndexToApply = useDefault ? bindingIndex : null;\n                    var finalValue = sanitizer ?\n                        sanitizer(prop, valueToApply, 3 /* ValidateAndSanitize */) :\n                        valueToApply;\n                    applyStylingFn(renderer, element, prop, finalValue, bindingIndexToApply);\n                    valueApplied = true;\n                }\n                targetPropValueWasApplied = valueApplied && isTargetPropMatched;\n                cursor += 2 /* TupleSize */;\n            }\n            setCurrentSyncCursor(currentMapIndex, cursor);\n        }\n        return targetPropValueWasApplied;\n    }\n    /**\n     * Enables support for map-based styling bindings (e.g. `[style]` and `[class]` bindings).\n     */\n    function activeStylingMapFeature() {\n        setStylingMapsSyncFn(syncStylingMap);\n    }\n    /**\n     * Used to determine the mode for the inner recursive call.\n     *\n     * If an inner map is iterated on then this is done so for one\n     * of two reasons:\n     *\n     * - The target property was detected and the inner map\n     *   must now \"catch up\" (pointer-wise) up to where the current\n     *   map's cursor is situated.\n     *\n     * - The target property was not detected in the current map\n     *   and must be found in an inner map. This can only be allowed\n     *   if the current map iteration is not set to skip the target\n     *   property.\n     */\n    function resolveInnerMapMode(currentMode, valueIsDefined, isExactMatch) {\n        var innerMode = currentMode;\n        if (!valueIsDefined && isExactMatch && !(currentMode & 4 /* SkipTargetProp */)) {\n            // case 1: set the mode to apply the targeted prop value if it\n            // ends up being encountered in another map value\n            innerMode |= 2 /* ApplyTargetProp */;\n            innerMode &= ~4 /* SkipTargetProp */;\n        }\n        else {\n            // case 2: set the mode to skip the targeted prop value if it\n            // ends up being encountered in another map value\n            innerMode |= 4 /* SkipTargetProp */;\n            innerMode &= ~2 /* ApplyTargetProp */;\n        }\n        return innerMode;\n    }\n    /**\n     * Decides whether or not a prop/value entry will be applied to an element.\n     *\n     * To determine whether or not a value is to be applied,\n     * the following procedure is evaluated:\n     *\n     * First check to see the current `mode` status:\n     *  1. If the mode value permits all props to be applied then allow.\n     *    - But do not allow if the current prop is set to be skipped.\n     *  2. Otherwise if the current prop is permitted then allow.\n     */\n    function isValueAllowedToBeApplied(mode, isTargetPropMatched) {\n        var doApplyValue = (mode & 1 /* ApplyAllValues */) > 0;\n        if (!doApplyValue) {\n            if (mode & 2 /* ApplyTargetProp */) {\n                doApplyValue = isTargetPropMatched;\n            }\n        }\n        else if ((mode & 4 /* SkipTargetProp */) && isTargetPropMatched) {\n            doApplyValue = false;\n        }\n        return doApplyValue;\n    }\n    /**\n     * Used to keep track of concurrent cursor values for multiple map-based styling bindings present on\n     * an element.\n     */\n    var MAP_CURSORS = [];\n    /**\n     * Used to reset the state of each cursor value being used to iterate over map-based styling\n     * bindings.\n     */\n    function resetSyncCursors() {\n        for (var i = 0; i < MAP_CURSORS.length; i++) {\n            MAP_CURSORS[i] = 1 /* ValuesStartPosition */;\n        }\n    }\n    /**\n     * Returns an active cursor value at a given mapIndex location.\n     */\n    function getCurrentSyncCursor(mapIndex) {\n        if (mapIndex >= MAP_CURSORS.length) {\n            MAP_CURSORS.push(1 /* ValuesStartPosition */);\n        }\n        return MAP_CURSORS[mapIndex];\n    }\n    /**\n     * Sets a cursor value at a given mapIndex location.\n     */\n    function setCurrentSyncCursor(mapIndex, indexValue) {\n        MAP_CURSORS[mapIndex] = indexValue;\n    }\n    /**\n     * Used to convert a {key:value} map into a `LStylingMap` array.\n     *\n     * This function will either generate a new `LStylingMap` instance\n     * or it will patch the provided `newValues` map value into an\n     * existing `LStylingMap` value (this only happens if `bindingValue`\n     * is an instance of `LStylingMap`).\n     *\n     * If a new key/value map is provided with an old `LStylingMap`\n     * value then all properties will be overwritten with their new\n     * values or with `null`. This means that the array will never\n     * shrink in size (but it will also not be created and thrown\n     * away whenever the {key:value} map entries change).\n     */\n    function normalizeIntoStylingMap(bindingValue, newValues) {\n        var lStylingMap = Array.isArray(bindingValue) ? bindingValue : [null];\n        lStylingMap[0 /* RawValuePosition */] = newValues || null;\n        // because the new values may not include all the properties\n        // that the old ones had, all values are set to `null` before\n        // the new values are applied. This way, when flushed, the\n        // styling algorithm knows exactly what style/class values\n        // to remove from the element (since they are `null`).\n        for (var j = 1 /* ValuesStartPosition */; j < lStylingMap.length; j += 2 /* TupleSize */) {\n            setMapValue(lStylingMap, j, null);\n        }\n        var props = null;\n        var map;\n        var allValuesTrue = false;\n        if (typeof newValues === 'string') { // [class] bindings allow string values\n            if (newValues.length) {\n                props = newValues.split(/\\s+/);\n                allValuesTrue = true;\n            }\n        }\n        else {\n            props = newValues ? Object.keys(newValues) : null;\n            map = newValues;\n        }\n        if (props) {\n            outer: for (var i = 0; i < props.length; i++) {\n                var prop = props[i];\n                var value = allValuesTrue ? true : map[prop];\n                for (var j = 1 /* ValuesStartPosition */; j < lStylingMap.length; j += 2 /* TupleSize */) {\n                    var propAtIndex = getMapProp(lStylingMap, j);\n                    if (prop <= propAtIndex) {\n                        if (propAtIndex === prop) {\n                            setMapValue(lStylingMap, j, value);\n                        }\n                        else {\n                            lStylingMap.splice(j, 0, prop, value);\n                        }\n                        continue outer;\n                    }\n                }\n                lStylingMap.push(prop, value);\n            }\n        }\n        return lStylingMap;\n    }\n    function getMapProp(map, index) {\n        return map[index + 0 /* PropOffset */];\n    }\n    function setMapValue(map, index, value) {\n        map[index + 1 /* ValueOffset */] = value;\n    }\n    function getMapValue(map, index) {\n        return map[index + 1 /* ValueOffset */];\n    }\n\n    /**\n     * Instantiates and attaches an instance of `TStylingContextDebug` to the provided context.\n     */\n    function attachStylingDebugObject(context) {\n        var debug = new TStylingContextDebug(context);\n        attachDebugObject(context, debug);\n        return debug;\n    }\n    /**\n     * A human-readable debug summary of the styling data present within `TStylingContext`.\n     *\n     * This class is designed to be used within testing code or when an\n     * application has `ngDevMode` activated.\n     */\n    var TStylingContextDebug = /** @class */ (function () {\n        function TStylingContextDebug(context) {\n            this.context = context;\n        }\n        Object.defineProperty(TStylingContextDebug.prototype, \"isLocked\", {\n            get: function () { return isContextLocked(this.context); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(TStylingContextDebug.prototype, \"entries\", {\n            /**\n             * Returns a detailed summary of each styling entry in the context.\n             *\n             * See `TStylingTupleSummary`.\n             */\n            get: function () {\n                var context = this.context;\n                var entries = {};\n                var start = 2 /* MapBindingsPosition */;\n                var i = start;\n                while (i < context.length) {\n                    var valuesCount = getValuesCount(context, i);\n                    // the context may contain placeholder values which are populated ahead of time,\n                    // but contain no actual binding values. In this situation there is no point in\n                    // classifying this as an \"entry\" since no real data is stored here yet.\n                    if (valuesCount) {\n                        var prop = getProp$1(context, i);\n                        var guardMask = getGuardMask(context, i);\n                        var defaultValue = getDefaultValue(context, i);\n                        var sanitizationRequired = isSanitizationRequired(context, i);\n                        var bindingsStartPosition = i + 3 /* BindingsStartOffset */;\n                        var sources = [];\n                        for (var j = 0; j < valuesCount; j++) {\n                            sources.push(context[bindingsStartPosition + j]);\n                        }\n                        entries[prop] = { prop: prop, guardMask: guardMask, sanitizationRequired: sanitizationRequired, valuesCount: valuesCount, defaultValue: defaultValue, sources: sources };\n                    }\n                    i += 3 /* BindingsStartOffset */ + valuesCount;\n                }\n                return entries;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return TStylingContextDebug;\n    }());\n    /**\n     * A human-readable debug summary of the styling data present for a `DebugNode` instance.\n     *\n     * This class is designed to be used within testing code or when an\n     * application has `ngDevMode` activated.\n     */\n    var NodeStylingDebug = /** @class */ (function () {\n        function NodeStylingDebug(context, _data, _isClassBased) {\n            this.context = context;\n            this._data = _data;\n            this._isClassBased = _isClassBased;\n            this._sanitizer = null;\n        }\n        /**\n         * Overrides the sanitizer used to process styles.\n         */\n        NodeStylingDebug.prototype.overrideSanitizer = function (sanitizer) { this._sanitizer = sanitizer; };\n        Object.defineProperty(NodeStylingDebug.prototype, \"summary\", {\n            /**\n             * Returns a detailed summary of each styling entry in the context and\n             * what their runtime representation is.\n             *\n             * See `LStylingSummary`.\n             */\n            get: function () {\n                var entries = {};\n                this._mapValues(function (prop, value, bindingIndex) {\n                    entries[prop] = { prop: prop, value: value, bindingIndex: bindingIndex };\n                });\n                return entries;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NodeStylingDebug.prototype, \"values\", {\n            /**\n             * Returns a key/value map of all the styles/classes that were last applied to the element.\n             */\n            get: function () {\n                var entries = {};\n                this._mapValues(function (prop, value) { entries[prop] = value; });\n                return entries;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        NodeStylingDebug.prototype._mapValues = function (fn) {\n            // there is no need to store/track an element instance. The\n            // element is only used when the styling algorithm attempts to\n            // style the value (and we mock out the stylingApplyFn anyway).\n            var mockElement = {};\n            var hasMaps = getValuesCount(this.context, 2 /* MapBindingsPosition */) > 0;\n            if (hasMaps) {\n                activeStylingMapFeature();\n            }\n            var mapFn = function (renderer, element, prop, value, bindingIndex) { fn(prop, value, bindingIndex || null); };\n            var sanitizer = this._isClassBased ? null : (this._sanitizer ||\n                getCurrentOrLViewSanitizer(this._data));\n            applyStyling(this.context, null, mockElement, this._data, true, mapFn, sanitizer);\n        };\n        return NodeStylingDebug;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /*\n     * This file contains conditionally attached classes which provide human readable (debug) level\n     * information for `LView`, `LContainer` and other internal data structures. These data structures\n     * are stored internally as array which makes it very difficult during debugging to reason about the\n     * current state of the system.\n     *\n     * Patching the array with extra property does change the array's hidden class' but it does not\n     * change the cost of access, therefore this patching should not have significant if any impact in\n     * `ngDevMode` mode. (see: https://jsperf.com/array-vs-monkey-patch-array)\n     *\n     * So instead of seeing:\n     * ```\n     * Array(30) [Object, 659, null, …]\n     * ```\n     *\n     * You get to see:\n     * ```\n     * LViewDebug {\n     *   views: [...],\n     *   flags: {attached: true, ...}\n     *   nodes: [\n     *     {html: '<div id=\"123\">', ..., nodes: [\n     *       {html: '<span>', ..., nodes: null}\n     *     ]}\n     *   ]\n     * }\n     * ```\n     */\n    var LViewArray = ngDevMode && createNamedArrayType('LView');\n    var LVIEW_EMPTY; // can't initialize here or it will not be tree shaken, because `LView`\n    // constructor could have side-effects.\n    /**\n     * This function clones a blueprint and creates LView.\n     *\n     * Simple slice will keep the same type, and we need it to be LView\n     */\n    function cloneToLView(list) {\n        if (LVIEW_EMPTY === undefined)\n            LVIEW_EMPTY = new LViewArray();\n        return LVIEW_EMPTY.concat(list);\n    }\n    /**\n     * This class is a debug version of Object literal so that we can have constructor name show up in\n     * debug tools in ngDevMode.\n     */\n    var TViewConstructor = /** @class */ (function () {\n        function TView(id, //\n        blueprint, //\n        template, //\n        viewQuery, //\n        node, //\n        data, //\n        bindingStartIndex, //\n        viewQueryStartIndex, //\n        expandoStartIndex, //\n        expandoInstructions, //\n        firstTemplatePass, //\n        staticViewQueries, //\n        staticContentQueries, //\n        preOrderHooks, //\n        preOrderCheckHooks, //\n        contentHooks, //\n        contentCheckHooks, //\n        viewHooks, //\n        viewCheckHooks, //\n        destroyHooks, //\n        cleanup, //\n        contentQueries, //\n        components, //\n        directiveRegistry, //\n        pipeRegistry, //\n        firstChild, //\n        schemas) {\n            this.id = id;\n            this.blueprint = blueprint;\n            this.template = template;\n            this.viewQuery = viewQuery;\n            this.node = node;\n            this.data = data;\n            this.bindingStartIndex = bindingStartIndex;\n            this.viewQueryStartIndex = viewQueryStartIndex;\n            this.expandoStartIndex = expandoStartIndex;\n            this.expandoInstructions = expandoInstructions;\n            this.firstTemplatePass = firstTemplatePass;\n            this.staticViewQueries = staticViewQueries;\n            this.staticContentQueries = staticContentQueries;\n            this.preOrderHooks = preOrderHooks;\n            this.preOrderCheckHooks = preOrderCheckHooks;\n            this.contentHooks = contentHooks;\n            this.contentCheckHooks = contentCheckHooks;\n            this.viewHooks = viewHooks;\n            this.viewCheckHooks = viewCheckHooks;\n            this.destroyHooks = destroyHooks;\n            this.cleanup = cleanup;\n            this.contentQueries = contentQueries;\n            this.components = components;\n            this.directiveRegistry = directiveRegistry;\n            this.pipeRegistry = pipeRegistry;\n            this.firstChild = firstChild;\n            this.schemas = schemas;\n        }\n        return TView;\n    }());\n    var TNodeConstructor = /** @class */ (function () {\n        function TNode(tView_, //\n        type, //\n        index, //\n        injectorIndex, //\n        directiveStart, //\n        directiveEnd, //\n        propertyMetadataStartIndex, //\n        propertyMetadataEndIndex, //\n        flags, //\n        providerIndexes, //\n        tagName, //\n        attrs, //\n        localNames, //\n        initialInputs, //\n        inputs, //\n        outputs, //\n        tViews, //\n        next, //\n        projectionNext, //\n        child, //\n        parent, //\n        stylingTemplate, //\n        projection, //\n        onElementCreationFns, //\n        newStyles, //\n        newClasses) {\n            this.tView_ = tView_;\n            this.type = type;\n            this.index = index;\n            this.injectorIndex = injectorIndex;\n            this.directiveStart = directiveStart;\n            this.directiveEnd = directiveEnd;\n            this.propertyMetadataStartIndex = propertyMetadataStartIndex;\n            this.propertyMetadataEndIndex = propertyMetadataEndIndex;\n            this.flags = flags;\n            this.providerIndexes = providerIndexes;\n            this.tagName = tagName;\n            this.attrs = attrs;\n            this.localNames = localNames;\n            this.initialInputs = initialInputs;\n            this.inputs = inputs;\n            this.outputs = outputs;\n            this.tViews = tViews;\n            this.next = next;\n            this.projectionNext = projectionNext;\n            this.child = child;\n            this.parent = parent;\n            this.stylingTemplate = stylingTemplate;\n            this.projection = projection;\n            this.onElementCreationFns = onElementCreationFns;\n            this.newStyles = newStyles;\n            this.newClasses = newClasses;\n        }\n        Object.defineProperty(TNode.prototype, \"type_\", {\n            get: function () {\n                switch (this.type) {\n                    case 0 /* Container */:\n                        return 'TNodeType.Container';\n                    case 3 /* Element */:\n                        return 'TNodeType.Element';\n                    case 4 /* ElementContainer */:\n                        return 'TNodeType.ElementContainer';\n                    case 5 /* IcuContainer */:\n                        return 'TNodeType.IcuContainer';\n                    case 1 /* Projection */:\n                        return 'TNodeType.Projection';\n                    case 2 /* View */:\n                        return 'TNodeType.View';\n                    default:\n                        return 'TNodeType.???';\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(TNode.prototype, \"flags_\", {\n            get: function () {\n                var flags = [];\n                if (this.flags & 8 /* hasClassInput */)\n                    flags.push('TNodeFlags.hasClassInput');\n                if (this.flags & 4 /* hasContentQuery */)\n                    flags.push('TNodeFlags.hasContentQuery');\n                if (this.flags & 16 /* hasStyleInput */)\n                    flags.push('TNodeFlags.hasStyleInput');\n                if (this.flags & 1 /* isComponent */)\n                    flags.push('TNodeFlags.isComponent');\n                if (this.flags & 32 /* isDetached */)\n                    flags.push('TNodeFlags.isDetached');\n                if (this.flags & 2 /* isProjected */)\n                    flags.push('TNodeFlags.isProjected');\n                return flags.join('|');\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return TNode;\n    }());\n    var TViewData = ngDevMode && createNamedArrayType('TViewData');\n    var TVIEWDATA_EMPTY; // can't initialize here or it will not be tree shaken, because `LView`\n    // constructor could have side-effects.\n    /**\n     * This function clones a blueprint and creates TData.\n     *\n     * Simple slice will keep the same type, and we need it to be TData\n     */\n    function cloneToTViewData(list) {\n        if (TVIEWDATA_EMPTY === undefined)\n            TVIEWDATA_EMPTY = new TViewData();\n        return TVIEWDATA_EMPTY.concat(list);\n    }\n    var LViewBlueprint = ngDevMode && createNamedArrayType('LViewBlueprint');\n    var MatchesArray = ngDevMode && createNamedArrayType('MatchesArray');\n    var TViewComponents = ngDevMode && createNamedArrayType('TViewComponents');\n    var TNodeLocalNames = ngDevMode && createNamedArrayType('TNodeLocalNames');\n    var TNodeInitialInputs = ngDevMode && createNamedArrayType('TNodeInitialInputs');\n    var TNodeInitialData = ngDevMode && createNamedArrayType('TNodeInitialData');\n    var LCleanup = ngDevMode && createNamedArrayType('LCleanup');\n    var TCleanup = ngDevMode && createNamedArrayType('TCleanup');\n    function attachLViewDebug(lView) {\n        attachDebugObject(lView, new LViewDebug(lView));\n    }\n    function attachLContainerDebug(lContainer) {\n        attachDebugObject(lContainer, new LContainerDebug(lContainer));\n    }\n    function toDebug(obj) {\n        if (obj) {\n            var debug = obj.debug;\n            assertDefined(debug, 'Object does not have a debug representation.');\n            return debug;\n        }\n        else {\n            return obj;\n        }\n    }\n    /**\n     * Use this method to unwrap a native element in `LView` and convert it into HTML for easier\n     * reading.\n     *\n     * @param value possibly wrapped native DOM node.\n     * @param includeChildren If `true` then the serialized HTML form will include child elements (same\n     * as `outerHTML`). If `false` then the serialized HTML form will only contain the element itself\n     * (will not serialize child elements).\n     */\n    function toHtml(value, includeChildren) {\n        if (includeChildren === void 0) { includeChildren = false; }\n        var node = unwrapRNode(value);\n        if (node) {\n            var isTextNode = node.nodeType === Node.TEXT_NODE;\n            var outerHTML = (isTextNode ? node.textContent : node.outerHTML) || '';\n            if (includeChildren || isTextNode) {\n                return outerHTML;\n            }\n            else {\n                var innerHTML = node.innerHTML;\n                return outerHTML.split(innerHTML)[0] || null;\n            }\n        }\n        else {\n            return null;\n        }\n    }\n    var LViewDebug = /** @class */ (function () {\n        function LViewDebug(_raw_lView) {\n            this._raw_lView = _raw_lView;\n        }\n        Object.defineProperty(LViewDebug.prototype, \"flags\", {\n            /**\n             * Flags associated with the `LView` unpacked into a more readable state.\n             */\n            get: function () {\n                var flags = this._raw_lView[FLAGS];\n                return {\n                    __raw__flags__: flags,\n                    initPhaseState: flags & 3 /* InitPhaseStateMask */,\n                    creationMode: !!(flags & 4 /* CreationMode */),\n                    firstViewPass: !!(flags & 8 /* FirstLViewPass */),\n                    checkAlways: !!(flags & 16 /* CheckAlways */),\n                    dirty: !!(flags & 64 /* Dirty */),\n                    attached: !!(flags & 128 /* Attached */),\n                    destroyed: !!(flags & 256 /* Destroyed */),\n                    isRoot: !!(flags & 512 /* IsRoot */),\n                    indexWithinInitPhase: flags >> 10 /* IndexWithinInitPhaseShift */,\n                };\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LViewDebug.prototype, \"parent\", {\n            get: function () { return toDebug(this._raw_lView[PARENT]); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LViewDebug.prototype, \"host\", {\n            get: function () { return toHtml(this._raw_lView[HOST], true); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LViewDebug.prototype, \"context\", {\n            get: function () { return this._raw_lView[CONTEXT]; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LViewDebug.prototype, \"nodes\", {\n            /**\n             * The tree of nodes associated with the current `LView`. The nodes have been normalized into a\n             * tree structure with relevant details pulled out for readability.\n             */\n            get: function () {\n                var lView = this._raw_lView;\n                var tNode = lView[TVIEW].firstChild;\n                return toDebugNodes(tNode, lView);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LViewDebug.prototype, \"__other__\", {\n            /**\n             * Additional information which is hidden behind a property. The extra level of indirection is\n             * done so that the debug view would not be cluttered with properties which are only rarely\n             * relevant to the developer.\n             */\n            get: function () {\n                return {\n                    tView: this._raw_lView[TVIEW],\n                    cleanup: this._raw_lView[CLEANUP],\n                    injector: this._raw_lView[INJECTOR$1],\n                    rendererFactory: this._raw_lView[RENDERER_FACTORY],\n                    renderer: this._raw_lView[RENDERER],\n                    sanitizer: this._raw_lView[SANITIZER],\n                    childHead: toDebug(this._raw_lView[CHILD_HEAD]),\n                    next: toDebug(this._raw_lView[NEXT]),\n                    childTail: toDebug(this._raw_lView[CHILD_TAIL]),\n                    declarationView: toDebug(this._raw_lView[DECLARATION_VIEW]),\n                    contentQueries: this._raw_lView[CONTENT_QUERIES],\n                    queries: this._raw_lView[QUERIES],\n                    tHost: this._raw_lView[T_HOST],\n                    bindingIndex: this._raw_lView[BINDING_INDEX],\n                };\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LViewDebug.prototype, \"childViews\", {\n            /**\n             * Normalized view of child views (and containers) attached at this location.\n             */\n            get: function () {\n                var childViews = [];\n                var child = this.__other__.childHead;\n                while (child) {\n                    childViews.push(child);\n                    child = child.__other__.next;\n                }\n                return childViews;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return LViewDebug;\n    }());\n    /**\n     * Turns a flat list of nodes into a tree by walking the associated `TNode` tree.\n     *\n     * @param tNode\n     * @param lView\n     */\n    function toDebugNodes(tNode, lView) {\n        if (tNode) {\n            var debugNodes = [];\n            var tNodeCursor = tNode;\n            while (tNodeCursor) {\n                var rawValue = lView[tNode.index];\n                var native = unwrapRNode(rawValue);\n                var componentLViewDebug = isStylingContext(rawValue) ? null : toDebug(readLViewValue(rawValue));\n                var styles = null;\n                var classes = null;\n                if (runtimeIsNewStylingInUse()) {\n                    styles = tNode.newStyles ? new NodeStylingDebug(tNode.newStyles, lView, false) : null;\n                    classes = tNode.newClasses ? new NodeStylingDebug(tNode.newClasses, lView, true) : null;\n                }\n                debugNodes.push({\n                    html: toHtml(native),\n                    native: native, styles: styles, classes: classes,\n                    nodes: toDebugNodes(tNode.child, lView),\n                    component: componentLViewDebug,\n                });\n                tNodeCursor = tNodeCursor.next;\n            }\n            return debugNodes;\n        }\n        else {\n            return null;\n        }\n    }\n    var LContainerDebug = /** @class */ (function () {\n        function LContainerDebug(_raw_lContainer) {\n            this._raw_lContainer = _raw_lContainer;\n        }\n        Object.defineProperty(LContainerDebug.prototype, \"activeIndex\", {\n            get: function () { return this._raw_lContainer[ACTIVE_INDEX]; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LContainerDebug.prototype, \"views\", {\n            get: function () {\n                return this._raw_lContainer.slice(CONTAINER_HEADER_OFFSET)\n                    .map(toDebug);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LContainerDebug.prototype, \"parent\", {\n            get: function () { return toDebug(this._raw_lContainer[PARENT]); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LContainerDebug.prototype, \"queries\", {\n            get: function () { return this._raw_lContainer[QUERIES]; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LContainerDebug.prototype, \"host\", {\n            get: function () { return this._raw_lContainer[HOST]; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LContainerDebug.prototype, \"native\", {\n            get: function () { return this._raw_lContainer[NATIVE]; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LContainerDebug.prototype, \"__other__\", {\n            get: function () {\n                return {\n                    next: toDebug(this._raw_lContainer[NEXT]),\n                };\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return LContainerDebug;\n    }());\n    /**\n     * Return an `LView` value if found.\n     *\n     * @param value `LView` if any\n     */\n    function readLViewValue(value) {\n        while (Array.isArray(value)) {\n            // This check is not quite right, as it does not take into account `StylingContext`\n            // This is why it is in debug, not in util.ts\n            if (value.length >= HEADER_OFFSET - 1)\n                return value;\n            value = value[HOST];\n        }\n        return null;\n    }\n    var I18NDebugItem = /** @class */ (function () {\n        function I18NDebugItem(__raw_opCode, _lView, nodeIndex, type) {\n            this.__raw_opCode = __raw_opCode;\n            this._lView = _lView;\n            this.nodeIndex = nodeIndex;\n            this.type = type;\n        }\n        Object.defineProperty(I18NDebugItem.prototype, \"tNode\", {\n            get: function () { return getTNode(this.nodeIndex, this._lView); },\n            enumerable: true,\n            configurable: true\n        });\n        return I18NDebugItem;\n    }());\n    /**\n     * Turns a list of \"Create\" & \"Update\" OpCodes into a human-readable list of operations for\n     * debugging purposes.\n     * @param mutateOpCodes mutation opCodes to read\n     * @param updateOpCodes update opCodes to read\n     * @param icus list of ICU expressions\n     * @param lView The view the opCodes are acting on\n     */\n    function attachI18nOpCodesDebug(mutateOpCodes, updateOpCodes, icus, lView) {\n        attachDebugObject(mutateOpCodes, new I18nMutateOpCodesDebug(mutateOpCodes, lView));\n        attachDebugObject(updateOpCodes, new I18nUpdateOpCodesDebug(updateOpCodes, icus, lView));\n        if (icus) {\n            icus.forEach(function (icu) {\n                icu.create.forEach(function (icuCase) { attachDebugObject(icuCase, new I18nMutateOpCodesDebug(icuCase, lView)); });\n                icu.update.forEach(function (icuCase) {\n                    attachDebugObject(icuCase, new I18nUpdateOpCodesDebug(icuCase, icus, lView));\n                });\n            });\n        }\n    }\n    var I18nMutateOpCodesDebug = /** @class */ (function () {\n        function I18nMutateOpCodesDebug(__raw_opCodes, __lView) {\n            this.__raw_opCodes = __raw_opCodes;\n            this.__lView = __lView;\n        }\n        Object.defineProperty(I18nMutateOpCodesDebug.prototype, \"operations\", {\n            /**\n             * A list of operation information about how the OpCodes will act on the view.\n             */\n            get: function () {\n                var _a = this, __lView = _a.__lView, __raw_opCodes = _a.__raw_opCodes;\n                var results = [];\n                for (var i = 0; i < __raw_opCodes.length; i++) {\n                    var opCode = __raw_opCodes[i];\n                    var result = void 0;\n                    if (typeof opCode === 'string') {\n                        result = {\n                            __raw_opCode: opCode,\n                            type: 'Create Text Node',\n                            nodeIndex: __raw_opCodes[++i],\n                            text: opCode,\n                        };\n                    }\n                    if (typeof opCode === 'number') {\n                        switch (opCode & 7 /* MASK_OPCODE */) {\n                            case 1 /* AppendChild */:\n                                var destinationNodeIndex = opCode >>> 17 /* SHIFT_PARENT */;\n                                result = new I18NDebugItem(opCode, __lView, destinationNodeIndex, 'AppendChild');\n                                break;\n                            case 0 /* Select */:\n                                var nodeIndex = opCode >>> 3 /* SHIFT_REF */;\n                                result = new I18NDebugItem(opCode, __lView, nodeIndex, 'Select');\n                                break;\n                            case 5 /* ElementEnd */:\n                                var elementIndex = opCode >>> 3 /* SHIFT_REF */;\n                                result = new I18NDebugItem(opCode, __lView, elementIndex, 'ElementEnd');\n                                break;\n                            case 4 /* Attr */:\n                                elementIndex = opCode >>> 3 /* SHIFT_REF */;\n                                result = new I18NDebugItem(opCode, __lView, elementIndex, 'Attr');\n                                result['attrName'] = __raw_opCodes[++i];\n                                result['attrValue'] = __raw_opCodes[++i];\n                                break;\n                        }\n                    }\n                    if (!result) {\n                        switch (opCode) {\n                            case COMMENT_MARKER:\n                                result = {\n                                    __raw_opCode: opCode,\n                                    type: 'COMMENT_MARKER',\n                                    commentValue: __raw_opCodes[++i],\n                                    nodeIndex: __raw_opCodes[++i],\n                                };\n                                break;\n                            case ELEMENT_MARKER:\n                                result = {\n                                    __raw_opCode: opCode,\n                                    type: 'ELEMENT_MARKER',\n                                };\n                                break;\n                        }\n                    }\n                    if (!result) {\n                        result = {\n                            __raw_opCode: opCode,\n                            type: 'Unknown Op Code',\n                            code: opCode,\n                        };\n                    }\n                    results.push(result);\n                }\n                return results;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return I18nMutateOpCodesDebug;\n    }());\n    var I18nUpdateOpCodesDebug = /** @class */ (function () {\n        function I18nUpdateOpCodesDebug(__raw_opCodes, icus, __lView) {\n            this.__raw_opCodes = __raw_opCodes;\n            this.icus = icus;\n            this.__lView = __lView;\n        }\n        Object.defineProperty(I18nUpdateOpCodesDebug.prototype, \"operations\", {\n            /**\n             * A list of operation information about how the OpCodes will act on the view.\n             */\n            get: function () {\n                var _a = this, __lView = _a.__lView, __raw_opCodes = _a.__raw_opCodes, icus = _a.icus;\n                var results = [];\n                for (var i = 0; i < __raw_opCodes.length; i++) {\n                    // bit code to check if we should apply the next update\n                    var checkBit = __raw_opCodes[i];\n                    // Number of opCodes to skip until next set of update codes\n                    var skipCodes = __raw_opCodes[++i];\n                    var value = '';\n                    for (var j = i + 1; j <= (i + skipCodes); j++) {\n                        var opCode = __raw_opCodes[j];\n                        if (typeof opCode === 'string') {\n                            value += opCode;\n                        }\n                        else if (typeof opCode == 'number') {\n                            if (opCode < 0) {\n                                // It's a binding index whose value is negative\n                                // We cannot know the value of the binding so we only show the index\n                                value += \"\\uFFFD\" + (-opCode - 1) + \"\\uFFFD\";\n                            }\n                            else {\n                                var nodeIndex = opCode >>> 2 /* SHIFT_REF */;\n                                var tIcuIndex = void 0;\n                                var tIcu = void 0;\n                                switch (opCode & 3 /* MASK_OPCODE */) {\n                                    case 1 /* Attr */:\n                                        var attrName = __raw_opCodes[++j];\n                                        var sanitizeFn = __raw_opCodes[++j];\n                                        results.push({\n                                            __raw_opCode: opCode,\n                                            checkBit: checkBit,\n                                            type: 'Attr',\n                                            attrValue: value, attrName: attrName, sanitizeFn: sanitizeFn,\n                                        });\n                                        break;\n                                    case 0 /* Text */:\n                                        results.push({\n                                            __raw_opCode: opCode,\n                                            checkBit: checkBit,\n                                            type: 'Text', nodeIndex: nodeIndex,\n                                            text: value,\n                                        });\n                                        break;\n                                    case 2 /* IcuSwitch */:\n                                        tIcuIndex = __raw_opCodes[++j];\n                                        tIcu = icus[tIcuIndex];\n                                        var result = new I18NDebugItem(opCode, __lView, nodeIndex, 'IcuSwitch');\n                                        result['tIcuIndex'] = tIcuIndex;\n                                        result['checkBit'] = checkBit;\n                                        result['mainBinding'] = value;\n                                        result['tIcu'] = tIcu;\n                                        results.push(result);\n                                        break;\n                                    case 3 /* IcuUpdate */:\n                                        tIcuIndex = __raw_opCodes[++j];\n                                        tIcu = icus[tIcuIndex];\n                                        result = new I18NDebugItem(opCode, __lView, nodeIndex, 'IcuUpdate');\n                                        result['tIcuIndex'] = tIcuIndex;\n                                        result['checkBit'] = checkBit;\n                                        result['tIcu'] = tIcu;\n                                        results.push(result);\n                                        break;\n                                }\n                            }\n                        }\n                    }\n                    i += skipCodes;\n                }\n                return results;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return I18nUpdateOpCodesDebug;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Selects an element for later binding instructions.\n     *\n     * Used in conjunction with instructions like {@link property} to act on elements with specified\n     * indices, for example those created with {@link element} or {@link elementStart}.\n     *\n     * ```ts\n     * (rf: RenderFlags, ctx: any) => {\n     *   if (rf & 1) {\n     *     element(0, 'div');\n     *   }\n     *   if (rf & 2) {\n     *     select(0); // Select the <div/> created above.\n     *     property('title', 'test');\n     *   }\n     *  }\n     * ```\n     * @param index the index of the item to act on with the following instructions\n     *\n     * @codeGenApi\n     */\n    function ɵɵselect(index) {\n        ngDevMode && assertGreaterThan(index, -1, 'Invalid index');\n        ngDevMode &&\n            assertLessThan(index, getLView().length - HEADER_OFFSET, 'Should be within range for the view data');\n        var lView = getLView();\n        selectInternal(lView, index);\n    }\n    function selectInternal(lView, index) {\n        // Flush the initial hooks for elements in the view that have been added up to this point.\n        executePreOrderHooks(lView, lView[TVIEW], getCheckNoChangesMode(), index);\n        // We must set the selected index *after* running the hooks, because hooks may have side-effects\n        // that cause other template functions to run, thus updating the selected index, which is global\n        // state. If we run `setSelectedIndex` *before* we run the hooks, in some cases the selected index\n        // will be altered by the time we leave the `ɵɵselect` instruction.\n        setSelectedIndex(index);\n    }\n\n    /**\n     * A permanent marker promise which signifies that the current CD tree is\n     * clean.\n     */\n    var _CLEAN_PROMISE = (function () { return Promise.resolve(null); })();\n    /**\n     * Refreshes the view, executing the following steps in that order:\n     * triggers init hooks, refreshes dynamic embedded views, triggers content hooks, sets host\n     * bindings, refreshes child components.\n     * Note: view hooks are triggered later when leaving the view.\n     */\n    function refreshDescendantViews(lView) {\n        var tView = lView[TVIEW];\n        var creationMode = isCreationMode(lView);\n        // This needs to be set before children are processed to support recursive components\n        tView.firstTemplatePass = false;\n        // Resetting the bindingIndex of the current LView as the next steps may trigger change detection.\n        lView[BINDING_INDEX] = tView.bindingStartIndex;\n        // If this is a creation pass, we should not call lifecycle hooks or evaluate bindings.\n        // This will be done in the update pass.\n        if (!creationMode) {\n            var checkNoChangesMode = getCheckNoChangesMode();\n            executePreOrderHooks(lView, tView, checkNoChangesMode, undefined);\n            refreshDynamicEmbeddedViews(lView);\n            // Content query results must be refreshed before content hooks are called.\n            refreshContentQueries(tView, lView);\n            resetPreOrderHookFlags(lView);\n            executeHooks(lView, tView.contentHooks, tView.contentCheckHooks, checkNoChangesMode, 1 /* AfterContentInitHooksToBeRun */, undefined);\n            setHostBindings(tView, lView);\n        }\n        // We resolve content queries specifically marked as `static` in creation mode. Dynamic\n        // content queries are resolved during change detection (i.e. update mode), after embedded\n        // views are refreshed (see block above).\n        if (creationMode && tView.staticContentQueries) {\n            refreshContentQueries(tView, lView);\n        }\n        refreshChildComponents(tView.components);\n    }\n    /** Sets the host bindings for the current view. */\n    function setHostBindings(tView, viewData) {\n        var selectedIndex = getSelectedIndex();\n        try {\n            if (tView.expandoInstructions) {\n                var bindingRootIndex = viewData[BINDING_INDEX] = tView.expandoStartIndex;\n                setBindingRoot(bindingRootIndex);\n                var currentDirectiveIndex = -1;\n                var currentElementIndex = -1;\n                for (var i = 0; i < tView.expandoInstructions.length; i++) {\n                    var instruction = tView.expandoInstructions[i];\n                    if (typeof instruction === 'number') {\n                        if (instruction <= 0) {\n                            // Negative numbers mean that we are starting new EXPANDO block and need to update\n                            // the current element and directive index.\n                            currentElementIndex = -instruction;\n                            setActiveHostElement(currentElementIndex);\n                            // Injector block and providers are taken into account.\n                            var providerCount = tView.expandoInstructions[++i];\n                            bindingRootIndex += INJECTOR_BLOOM_PARENT_SIZE + providerCount;\n                            currentDirectiveIndex = bindingRootIndex;\n                        }\n                        else {\n                            // This is either the injector size (so the binding root can skip over directives\n                            // and get to the first set of host bindings on this node) or the host var count\n                            // (to get to the next set of host bindings on this node).\n                            bindingRootIndex += instruction;\n                        }\n                        setBindingRoot(bindingRootIndex);\n                    }\n                    else {\n                        // If it's not a number, it's a host binding function that needs to be executed.\n                        if (instruction !== null) {\n                            viewData[BINDING_INDEX] = bindingRootIndex;\n                            var hostCtx = unwrapRNode(viewData[currentDirectiveIndex]);\n                            instruction(2 /* Update */, hostCtx, currentElementIndex);\n                            // Each directive gets a uniqueId value that is the same for both\n                            // create and update calls when the hostBindings function is called. The\n                            // directive uniqueId is not set anywhere--it is just incremented between\n                            // each hostBindings call and is useful for helping instruction code\n                            // uniquely determine which directive is currently active when executed.\n                            incrementActiveDirectiveId();\n                        }\n                        currentDirectiveIndex++;\n                    }\n                }\n            }\n        }\n        finally {\n            setActiveHostElement(selectedIndex);\n        }\n    }\n    /** Refreshes content queries for all directives in the given view. */\n    function refreshContentQueries(tView, lView) {\n        if (tView.contentQueries != null) {\n            setCurrentQueryIndex(0);\n            for (var i = 0; i < tView.contentQueries.length; i++) {\n                var directiveDefIdx = tView.contentQueries[i];\n                var directiveDef = tView.data[directiveDefIdx];\n                ngDevMode &&\n                    assertDefined(directiveDef.contentQueries, 'contentQueries function should be defined');\n                directiveDef.contentQueries(2 /* Update */, lView[directiveDefIdx], directiveDefIdx);\n            }\n        }\n    }\n    /** Refreshes child components in the current view. */\n    function refreshChildComponents(components) {\n        if (components != null) {\n            for (var i = 0; i < components.length; i++) {\n                componentRefresh(components[i]);\n            }\n        }\n    }\n    /**\n     * Creates a native element from a tag name, using a renderer.\n     * @param name the tag name\n     * @param overriddenRenderer Optional A renderer to override the default one\n     * @returns the element created\n     */\n    function elementCreate(name, overriddenRenderer) {\n        var native;\n        var rendererToUse = overriddenRenderer || getLView()[RENDERER];\n        var namespace = getNamespace();\n        if (isProceduralRenderer(rendererToUse)) {\n            native = rendererToUse.createElement(name, namespace);\n        }\n        else {\n            if (namespace === null) {\n                native = rendererToUse.createElement(name);\n            }\n            else {\n                native = rendererToUse.createElementNS(namespace, name);\n            }\n        }\n        return native;\n    }\n    function createLView(parentLView, tView, context, flags, host, tHostNode, rendererFactory, renderer, sanitizer, injector) {\n        var lView = ngDevMode ? cloneToLView(tView.blueprint) : tView.blueprint.slice();\n        lView[HOST] = host;\n        lView[FLAGS] = flags | 4 /* CreationMode */ | 128 /* Attached */ | 8 /* FirstLViewPass */;\n        resetPreOrderHookFlags(lView);\n        lView[PARENT] = lView[DECLARATION_VIEW] = parentLView;\n        lView[CONTEXT] = context;\n        lView[RENDERER_FACTORY] = (rendererFactory || parentLView && parentLView[RENDERER_FACTORY]);\n        ngDevMode && assertDefined(lView[RENDERER_FACTORY], 'RendererFactory is required');\n        lView[RENDERER] = (renderer || parentLView && parentLView[RENDERER]);\n        ngDevMode && assertDefined(lView[RENDERER], 'Renderer is required');\n        lView[SANITIZER] = sanitizer || parentLView && parentLView[SANITIZER] || null;\n        lView[INJECTOR$1] = injector || parentLView && parentLView[INJECTOR$1] || null;\n        lView[T_HOST] = tHostNode;\n        ngDevMode && attachLViewDebug(lView);\n        return lView;\n    }\n    function getOrCreateTNode(tView, tHostNode, index, type, name, attrs) {\n        // Keep this function short, so that the VM will inline it.\n        var adjustedIndex = index + HEADER_OFFSET;\n        var tNode = tView.data[adjustedIndex] ||\n            createTNodeAtIndex(tView, tHostNode, adjustedIndex, type, name, attrs, index);\n        setPreviousOrParentTNode(tNode, true);\n        return tNode;\n    }\n    function createTNodeAtIndex(tView, tHostNode, adjustedIndex, type, name, attrs, index) {\n        var previousOrParentTNode = getPreviousOrParentTNode();\n        var isParent = getIsParent();\n        var parent = isParent ? previousOrParentTNode : previousOrParentTNode && previousOrParentTNode.parent;\n        // Parents cannot cross component boundaries because components will be used in multiple places,\n        // so it's only set if the view is the same.\n        var parentInSameView = parent && parent !== tHostNode;\n        var tParentNode = parentInSameView ? parent : null;\n        var tNode = tView.data[adjustedIndex] =\n            createTNode(tView, tParentNode, type, adjustedIndex, name, attrs);\n        // The first node is not always the one at index 0, in case of i18n, index 0 can be the\n        // instruction `i18nStart` and the first node has the index 1 or more\n        if (index === 0 || !tView.firstChild) {\n            tView.firstChild = tNode;\n        }\n        // Now link ourselves into the tree.\n        if (previousOrParentTNode) {\n            if (isParent && previousOrParentTNode.child == null &&\n                (tNode.parent !== null || previousOrParentTNode.type === 2 /* View */)) {\n                // We are in the same view, which means we are adding content node to the parent view.\n                previousOrParentTNode.child = tNode;\n            }\n            else if (!isParent) {\n                previousOrParentTNode.next = tNode;\n            }\n        }\n        return tNode;\n    }\n    function assignTViewNodeToLView(tView, tParentNode, index, lView) {\n        // View nodes are not stored in data because they can be added / removed at runtime (which\n        // would cause indices to change). Their TNodes are instead stored in tView.node.\n        var tNode = tView.node;\n        if (tNode == null) {\n            ngDevMode && tParentNode &&\n                assertNodeOfPossibleTypes(tParentNode, 3 /* Element */, 0 /* Container */);\n            tView.node = tNode = createTNode(tView, tParentNode, //\n            2 /* View */, index, null, null);\n        }\n        return lView[T_HOST] = tNode;\n    }\n    /**\n     * When elements are created dynamically after a view blueprint is created (e.g. through\n     * i18nApply() or ComponentFactory.create), we need to adjust the blueprint for future\n     * template passes.\n     *\n     * @param view The LView containing the blueprint to adjust\n     * @param numSlotsToAlloc The number of slots to alloc in the LView, should be >0\n     */\n    function allocExpando(view, numSlotsToAlloc) {\n        ngDevMode && assertGreaterThan(numSlotsToAlloc, 0, 'The number of slots to alloc should be greater than 0');\n        if (numSlotsToAlloc > 0) {\n            var tView = view[TVIEW];\n            if (tView.firstTemplatePass) {\n                for (var i = 0; i < numSlotsToAlloc; i++) {\n                    tView.blueprint.push(null);\n                    tView.data.push(null);\n                    view.push(null);\n                }\n                // We should only increment the expando start index if there aren't already directives\n                // and injectors saved in the \"expando\" section\n                if (!tView.expandoInstructions) {\n                    tView.expandoStartIndex += numSlotsToAlloc;\n                }\n                else {\n                    // Since we're adding the dynamic nodes into the expando section, we need to let the host\n                    // bindings know that they should skip x slots\n                    tView.expandoInstructions.push(numSlotsToAlloc);\n                }\n            }\n        }\n    }\n    //////////////////////////\n    //// Render\n    //////////////////////////\n    /**\n     * Used for creating the LViewNode of a dynamic embedded view,\n     * either through ViewContainerRef.createEmbeddedView() or TemplateRef.createEmbeddedView().\n     * Such lViewNode will then be renderer with renderEmbeddedTemplate() (see below).\n     */\n    function createEmbeddedViewAndNode(tView, context, declarationView, queries, injectorIndex) {\n        var _isParent = getIsParent();\n        var _previousOrParentTNode = getPreviousOrParentTNode();\n        setPreviousOrParentTNode(null, true);\n        var lView = createLView(declarationView, tView, context, 16 /* CheckAlways */, null, null);\n        lView[DECLARATION_VIEW] = declarationView;\n        if (queries) {\n            lView[QUERIES] = queries.createView();\n        }\n        assignTViewNodeToLView(tView, null, -1, lView);\n        if (tView.firstTemplatePass) {\n            tView.node.injectorIndex = injectorIndex;\n        }\n        setPreviousOrParentTNode(_previousOrParentTNode, _isParent);\n        return lView;\n    }\n    /**\n     * Used for rendering embedded views (e.g. dynamically created views)\n     *\n     * Dynamically created views must store/retrieve their TViews differently from component views\n     * because their template functions are nested in the template functions of their hosts, creating\n     * closures. If their host template happens to be an embedded template in a loop (e.g. ngFor\n     * inside\n     * an ngFor), the nesting would mean we'd have multiple instances of the template function, so we\n     * can't store TViews in the template function itself (as we do for comps). Instead, we store the\n     * TView for dynamically created views on their host TNode, which only has one instance.\n     */\n    function renderEmbeddedTemplate(viewToRender, tView, context) {\n        var _isParent = getIsParent();\n        var _previousOrParentTNode = getPreviousOrParentTNode();\n        var oldView;\n        if (viewToRender[FLAGS] & 512 /* IsRoot */) {\n            // This is a root view inside the view tree\n            tickRootContext(getRootContext(viewToRender));\n        }\n        else {\n            // Will become true if the `try` block executes with no errors.\n            var safeToRunHooks = false;\n            try {\n                setPreviousOrParentTNode(null, true);\n                oldView = enterView(viewToRender, viewToRender[T_HOST]);\n                resetPreOrderHookFlags(viewToRender);\n                executeTemplate(viewToRender, tView.template, getRenderFlags(viewToRender), context);\n                // This must be set to false immediately after the first creation run because in an\n                // ngFor loop, all the views will be created together before update mode runs and turns\n                // off firstTemplatePass. If we don't set it here, instances will perform directive\n                // matching, etc again and again.\n                viewToRender[TVIEW].firstTemplatePass = false;\n                refreshDescendantViews(viewToRender);\n                safeToRunHooks = true;\n            }\n            finally {\n                leaveView(oldView, safeToRunHooks);\n                setPreviousOrParentTNode(_previousOrParentTNode, _isParent);\n            }\n        }\n    }\n    function renderComponentOrTemplate(hostView, context, templateFn) {\n        var rendererFactory = hostView[RENDERER_FACTORY];\n        var oldView = enterView(hostView, hostView[T_HOST]);\n        var normalExecutionPath = !getCheckNoChangesMode();\n        var creationModeIsActive = isCreationMode(hostView);\n        // Will become true if the `try` block executes with no errors.\n        var safeToRunHooks = false;\n        try {\n            if (normalExecutionPath && !creationModeIsActive && rendererFactory.begin) {\n                rendererFactory.begin();\n            }\n            if (creationModeIsActive) {\n                // creation mode pass\n                templateFn && executeTemplate(hostView, templateFn, 1 /* Create */, context);\n                refreshDescendantViews(hostView);\n                hostView[FLAGS] &= ~4 /* CreationMode */;\n            }\n            // update mode pass\n            resetPreOrderHookFlags(hostView);\n            templateFn && executeTemplate(hostView, templateFn, 2 /* Update */, context);\n            refreshDescendantViews(hostView);\n            safeToRunHooks = true;\n        }\n        finally {\n            if (normalExecutionPath && !creationModeIsActive && rendererFactory.end) {\n                rendererFactory.end();\n            }\n            leaveView(oldView, safeToRunHooks);\n        }\n    }\n    function executeTemplate(lView, templateFn, rf, context) {\n        namespaceHTMLInternal();\n        var prevSelectedIndex = getSelectedIndex();\n        try {\n            setActiveHostElement(null);\n            if (rf & 2 /* Update */) {\n                // When we're updating, have an inherent ɵɵselect(0) so we don't have to generate that\n                // instruction for most update blocks\n                selectInternal(lView, 0);\n            }\n            templateFn(rf, context);\n        }\n        finally {\n            setSelectedIndex(prevSelectedIndex);\n        }\n    }\n    /**\n     * This function returns the default configuration of rendering flags depending on when the\n     * template is in creation mode or update mode. Update block and create block are\n     * always run separately.\n     */\n    function getRenderFlags(view) {\n        return isCreationMode(view) ? 1 /* Create */ : 2 /* Update */;\n    }\n    //////////////////////////\n    //// Element\n    //////////////////////////\n    /**\n     * Appropriately sets `stylingTemplate` on a TNode\n     *\n     * Does not apply styles to DOM nodes\n     *\n     * @param tNode The node whose `stylingTemplate` to set\n     * @param attrs The attribute array source to set the attributes from\n     * @param attrsStartIndex Optional start index to start processing the `attrs` from\n     */\n    function setNodeStylingTemplate(tView, tNode, attrs, attrsStartIndex) {\n        if (tView.firstTemplatePass && !tNode.stylingTemplate) {\n            var stylingAttrsStartIndex = attrsStylingIndexOf(attrs, attrsStartIndex);\n            if (stylingAttrsStartIndex >= 0) {\n                tNode.stylingTemplate = initializeStaticContext(attrs, stylingAttrsStartIndex);\n            }\n        }\n    }\n    function executeContentQueries(tView, tNode, lView) {\n        if (isContentQueryHost(tNode)) {\n            var start = tNode.directiveStart;\n            var end = tNode.directiveEnd;\n            for (var directiveIndex = start; directiveIndex < end; directiveIndex++) {\n                var def = tView.data[directiveIndex];\n                if (def.contentQueries) {\n                    def.contentQueries(1 /* Create */, lView[directiveIndex], directiveIndex);\n                }\n            }\n        }\n    }\n    /**\n     * Creates directive instances and populates local refs.\n     *\n     * @param localRefs Local refs of the node in question\n     * @param localRefExtractor mapping function that extracts local ref value from TNode\n     */\n    function createDirectivesAndLocals(tView, lView, tNode, localRefs, localRefExtractor) {\n        if (localRefExtractor === void 0) { localRefExtractor = getNativeByTNode; }\n        if (!getBindingsEnabled())\n            return;\n        if (tView.firstTemplatePass) {\n            ngDevMode && ngDevMode.firstTemplatePass++;\n            resolveDirectives(tView, lView, findDirectiveMatches(tView, lView, tNode), tNode, localRefs || null);\n        }\n        instantiateAllDirectives(tView, lView, tNode);\n        invokeDirectivesHostBindings(tView, lView, tNode);\n        saveResolvedLocalsInData(lView, tNode, localRefExtractor);\n        setActiveHostElement(null);\n    }\n    /**\n     * Takes a list of local names and indices and pushes the resolved local variable values\n     * to LView in the same order as they are loaded in the template with load().\n     */\n    function saveResolvedLocalsInData(viewData, tNode, localRefExtractor) {\n        var localNames = tNode.localNames;\n        if (localNames) {\n            var localIndex = tNode.index + 1;\n            for (var i = 0; i < localNames.length; i += 2) {\n                var index = localNames[i + 1];\n                var value = index === -1 ?\n                    localRefExtractor(tNode, viewData) :\n                    viewData[index];\n                viewData[localIndex++] = value;\n            }\n        }\n    }\n    /**\n     * Gets TView from a template function or creates a new TView\n     * if it doesn't already exist.\n     *\n     * @param def ComponentDef\n     * @returns TView\n     */\n    function getOrCreateTView(def) {\n        return def.tView || (def.tView = createTView(-1, def.template, def.consts, def.vars, def.directiveDefs, def.pipeDefs, def.viewQuery, def.schemas));\n    }\n    /**\n     * Creates a TView instance\n     *\n     * @param viewIndex The viewBlockId for inline views, or -1 if it's a component/dynamic\n     * @param templateFn Template function\n     * @param consts The number of nodes, local refs, and pipes in this template\n     * @param directives Registry of directives for this view\n     * @param pipes Registry of pipes for this view\n     * @param viewQuery View queries for this view\n     * @param schemas Schemas for this view\n     */\n    function createTView(viewIndex, templateFn, consts, vars, directives, pipes, viewQuery, schemas) {\n        ngDevMode && ngDevMode.tView++;\n        var bindingStartIndex = HEADER_OFFSET + consts;\n        // This length does not yet contain host bindings from child directives because at this point,\n        // we don't know which directives are active on this template. As soon as a directive is matched\n        // that has a host binding, we will update the blueprint with that def's hostVars count.\n        var initialViewLength = bindingStartIndex + vars;\n        var blueprint = createViewBlueprint(bindingStartIndex, initialViewLength);\n        return blueprint[TVIEW] = ngDevMode ?\n            new TViewConstructor(viewIndex, // id: number,\n            blueprint, // blueprint: LView,\n            templateFn, // template: ComponentTemplate<{}>|null,\n            viewQuery, // viewQuery: ViewQueriesFunction<{}>|null,\n            null, // node: TViewNode|TElementNode|null,\n            cloneToTViewData(blueprint).fill(null, bindingStartIndex), // data: TData,\n            bindingStartIndex, // bindingStartIndex: number,\n            initialViewLength, // viewQueryStartIndex: number,\n            initialViewLength, // expandoStartIndex: number,\n            null, // expandoInstructions: ExpandoInstructions|null,\n            true, // firstTemplatePass: boolean,\n            false, // staticViewQueries: boolean,\n            false, // staticContentQueries: boolean,\n            null, // preOrderHooks: HookData|null,\n            null, // preOrderCheckHooks: HookData|null,\n            null, // contentHooks: HookData|null,\n            null, // contentCheckHooks: HookData|null,\n            null, // viewHooks: HookData|null,\n            null, // viewCheckHooks: HookData|null,\n            null, // destroyHooks: HookData|null,\n            null, // cleanup: any[]|null,\n            null, // contentQueries: number[]|null,\n            null, // components: number[]|null,\n            typeof directives === 'function' ?\n                directives() :\n                directives, // directiveRegistry: DirectiveDefList|null,\n            typeof pipes === 'function' ? pipes() : pipes, // pipeRegistry: PipeDefList|null,\n            null, // firstChild: TNode|null,\n            schemas) :\n            {\n                id: viewIndex,\n                blueprint: blueprint,\n                template: templateFn,\n                viewQuery: viewQuery,\n                node: null,\n                data: blueprint.slice().fill(null, bindingStartIndex),\n                bindingStartIndex: bindingStartIndex,\n                viewQueryStartIndex: initialViewLength,\n                expandoStartIndex: initialViewLength,\n                expandoInstructions: null,\n                firstTemplatePass: true,\n                staticViewQueries: false,\n                staticContentQueries: false,\n                preOrderHooks: null,\n                preOrderCheckHooks: null,\n                contentHooks: null,\n                contentCheckHooks: null,\n                viewHooks: null,\n                viewCheckHooks: null,\n                destroyHooks: null,\n                cleanup: null,\n                contentQueries: null,\n                components: null,\n                directiveRegistry: typeof directives === 'function' ? directives() : directives,\n                pipeRegistry: typeof pipes === 'function' ? pipes() : pipes,\n                firstChild: null,\n                schemas: schemas,\n            };\n    }\n    function createViewBlueprint(bindingStartIndex, initialViewLength) {\n        var blueprint = new (ngDevMode ? LViewBlueprint : Array)(initialViewLength)\n            .fill(null, 0, bindingStartIndex)\n            .fill(NO_CHANGE, bindingStartIndex);\n        blueprint[BINDING_INDEX] = bindingStartIndex;\n        return blueprint;\n    }\n    function createError(text, token) {\n        return new Error(\"Renderer: \" + text + \" [\" + stringifyForError(token) + \"]\");\n    }\n    /**\n     * Locates the host native element, used for bootstrapping existing nodes into rendering pipeline.\n     *\n     * @param elementOrSelector Render element or CSS selector to locate the element.\n     */\n    function locateHostElement(factory, elementOrSelector) {\n        var defaultRenderer = factory.createRenderer(null, null);\n        var rNode = typeof elementOrSelector === 'string' ?\n            (isProceduralRenderer(defaultRenderer) ?\n                defaultRenderer.selectRootElement(elementOrSelector) :\n                defaultRenderer.querySelector(elementOrSelector)) :\n            elementOrSelector;\n        if (ngDevMode && !rNode) {\n            if (typeof elementOrSelector === 'string') {\n                throw createError('Host node with selector not found:', elementOrSelector);\n            }\n            else {\n                throw createError('Host node is required:', elementOrSelector);\n            }\n        }\n        return rNode;\n    }\n    /**\n     * Saves context for this cleanup function in LView.cleanupInstances.\n     *\n     * On the first template pass, saves in TView:\n     * - Cleanup function\n     * - Index of context we just saved in LView.cleanupInstances\n     */\n    function storeCleanupWithContext(lView, context, cleanupFn) {\n        var lCleanup = getCleanup(lView);\n        lCleanup.push(context);\n        if (lView[TVIEW].firstTemplatePass) {\n            getTViewCleanup(lView).push(cleanupFn, lCleanup.length - 1);\n        }\n    }\n    /**\n     * Saves the cleanup function itself in LView.cleanupInstances.\n     *\n     * This is necessary for functions that are wrapped with their contexts, like in renderer2\n     * listeners.\n     *\n     * On the first template pass, the index of the cleanup function is saved in TView.\n     */\n    function storeCleanupFn(view, cleanupFn) {\n        getCleanup(view).push(cleanupFn);\n        if (view[TVIEW].firstTemplatePass) {\n            getTViewCleanup(view).push(view[CLEANUP].length - 1, null);\n        }\n    }\n    /**\n     * Constructs a TNode object from the arguments.\n     *\n     * @param tView `TView` to which this `TNode` belongs (used only in `ngDevMode`)\n     * @param type The type of the node\n     * @param adjustedIndex The index of the TNode in TView.data, adjusted for HEADER_OFFSET\n     * @param tagName The tag name of the node\n     * @param attrs The attributes defined on this node\n     * @param tViews Any TViews attached to this node\n     * @returns the TNode object\n     */\n    function createTNode(tView, tParent, type, adjustedIndex, tagName, attrs) {\n        ngDevMode && ngDevMode.tNode++;\n        var injectorIndex = tParent ? tParent.injectorIndex : -1;\n        return ngDevMode ?\n            new TNodeConstructor(tView, // tView_: TView\n            type, // type: TNodeType\n            adjustedIndex, // index: number\n            injectorIndex, // injectorIndex: number\n            -1, // directiveStart: number\n            -1, // directiveEnd: number\n            -1, // propertyMetadataStartIndex: number\n            -1, // propertyMetadataEndIndex: number\n            0, // flags: TNodeFlags\n            0, // providerIndexes: TNodeProviderIndexes\n            tagName, // tagName: string|null\n            attrs, // attrs: (string|AttributeMarker|(string|SelectorFlags)[])[]|null\n            null, // localNames: (string|number)[]|null\n            undefined, // initialInputs: (string[]|null)[]|null|undefined\n            undefined, // inputs: PropertyAliases|null|undefined\n            undefined, // outputs: PropertyAliases|null|undefined\n            null, // tViews: ITView|ITView[]|null\n            null, // next: ITNode|null\n            null, // projectionNext: ITNode|null\n            null, // child: ITNode|null\n            tParent, // parent: TElementNode|TContainerNode|null\n            null, // stylingTemplate: StylingContext|null\n            null, // projection: number|(ITNode|RNode[])[]|null\n            null, // onElementCreationFns: Function[]|null\n            // TODO (matsko): rename this to `styles` once the old styling impl is gone\n            null, // newStyles: TStylingContext|null\n            // TODO (matsko): rename this to `classes` once the old styling impl is gone\n            null) :\n            {\n                type: type,\n                index: adjustedIndex,\n                injectorIndex: injectorIndex,\n                directiveStart: -1,\n                directiveEnd: -1,\n                propertyMetadataStartIndex: -1,\n                propertyMetadataEndIndex: -1,\n                flags: 0,\n                providerIndexes: 0,\n                tagName: tagName,\n                attrs: attrs,\n                localNames: null,\n                initialInputs: undefined,\n                inputs: undefined,\n                outputs: undefined,\n                tViews: null,\n                next: null,\n                projectionNext: null,\n                child: null,\n                parent: tParent,\n                stylingTemplate: null,\n                projection: null,\n                onElementCreationFns: null,\n                // TODO (matsko): rename this to `styles` once the old styling impl is gone\n                newStyles: null,\n                // TODO (matsko): rename this to `classes` once the old styling impl is gone\n                newClasses: null,\n            };\n    }\n    /**\n     * Consolidates all inputs or outputs of all directives on this logical node.\n     *\n     * @param tNode\n     * @param direction whether to consider inputs or outputs\n     * @returns PropertyAliases|null aggregate of all properties if any, `null` otherwise\n     */\n    function generatePropertyAliases(tNode, direction) {\n        var tView = getLView()[TVIEW];\n        var propStore = null;\n        var start = tNode.directiveStart;\n        var end = tNode.directiveEnd;\n        if (end > start) {\n            var isInput = direction === 0 /* Input */;\n            var defs = tView.data;\n            for (var i = start; i < end; i++) {\n                var directiveDef = defs[i];\n                var propertyAliasMap = isInput ? directiveDef.inputs : directiveDef.outputs;\n                for (var publicName in propertyAliasMap) {\n                    if (propertyAliasMap.hasOwnProperty(publicName)) {\n                        propStore = propStore || {};\n                        var internalName = propertyAliasMap[publicName];\n                        var hasProperty = propStore.hasOwnProperty(publicName);\n                        hasProperty ? propStore[publicName].push(i, publicName, internalName) :\n                            (propStore[publicName] = [i, publicName, internalName]);\n                    }\n                }\n            }\n        }\n        return propStore;\n    }\n    /**\n     * Mapping between attributes names that don't correspond to their element property names.\n     * Note: this mapping has to be kept in sync with the equally named mapping in the template\n     * type-checking machinery of ngtsc.\n     */\n    var ATTR_TO_PROP = {\n        'class': 'className',\n        'for': 'htmlFor',\n        'formaction': 'formAction',\n        'innerHtml': 'innerHTML',\n        'readonly': 'readOnly',\n        'tabindex': 'tabIndex',\n    };\n    function elementPropertyInternal(index, propName, value, sanitizer, nativeOnly, loadRendererFn) {\n        ngDevMode && assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');\n        var lView = getLView();\n        var element = getNativeByIndex(index, lView);\n        var tNode = getTNode(index, lView);\n        var inputData;\n        var dataValue;\n        if (!nativeOnly && (inputData = initializeTNodeInputs(tNode)) &&\n            (dataValue = inputData[propName])) {\n            setInputsForProperty(lView, dataValue, value);\n            if (isComponent(tNode))\n                markDirtyIfOnPush(lView, index + HEADER_OFFSET);\n            if (ngDevMode) {\n                if (tNode.type === 3 /* Element */ || tNode.type === 0 /* Container */) {\n                    /**\n                     * dataValue is an array containing runtime input or output names for the directives:\n                     * i+0: directive instance index\n                     * i+1: publicName\n                     * i+2: privateName\n                     *\n                     * e.g. [0, 'change', 'change-minified']\n                     * we want to set the reflected property with the privateName: dataValue[i+2]\n                     */\n                    for (var i = 0; i < dataValue.length; i += 3) {\n                        setNgReflectProperty(lView, element, tNode.type, dataValue[i + 2], value);\n                    }\n                }\n            }\n        }\n        else if (tNode.type === 3 /* Element */) {\n            propName = ATTR_TO_PROP[propName] || propName;\n            if (ngDevMode) {\n                validateAgainstEventProperties(propName);\n                validateAgainstUnknownProperties(lView, element, propName, tNode);\n                ngDevMode.rendererSetProperty++;\n            }\n            savePropertyDebugData(tNode, lView, propName, lView[TVIEW].data, nativeOnly);\n            var renderer = loadRendererFn ? loadRendererFn(tNode, lView) : lView[RENDERER];\n            // It is assumed that the sanitizer is only added when the compiler determines that the\n            // property\n            // is risky, so sanitization can be done without further checks.\n            value = sanitizer != null ? sanitizer(value, tNode.tagName || '', propName) : value;\n            if (isProceduralRenderer(renderer)) {\n                renderer.setProperty(element, propName, value);\n            }\n            else if (!isAnimationProp(propName)) {\n                element.setProperty ? element.setProperty(propName, value) :\n                    element[propName] = value;\n            }\n        }\n        else if (tNode.type === 0 /* Container */) {\n            // If the node is a container and the property didn't\n            // match any of the inputs or schemas we should throw.\n            if (ngDevMode && !matchingSchemas(lView, tNode.tagName)) {\n                throw createUnknownPropertyError(propName, tNode);\n            }\n        }\n    }\n    /** If node is an OnPush component, marks its LView dirty. */\n    function markDirtyIfOnPush(lView, viewIndex) {\n        ngDevMode && assertLView(lView);\n        var childComponentLView = getComponentViewByIndex(viewIndex, lView);\n        if (!(childComponentLView[FLAGS] & 16 /* CheckAlways */)) {\n            childComponentLView[FLAGS] |= 64 /* Dirty */;\n        }\n    }\n    function setNgReflectProperty(lView, element, type, attrName, value) {\n        var _a;\n        var renderer = lView[RENDERER];\n        attrName = normalizeDebugBindingName(attrName);\n        var debugValue = normalizeDebugBindingValue(value);\n        if (type === 3 /* Element */) {\n            if (value == null) {\n                isProceduralRenderer(renderer) ? renderer.removeAttribute(element, attrName) :\n                    element.removeAttribute(attrName);\n            }\n            else {\n                isProceduralRenderer(renderer) ?\n                    renderer.setAttribute(element, attrName, debugValue) :\n                    element.setAttribute(attrName, debugValue);\n            }\n        }\n        else {\n            var textContent = \"bindings=\" + JSON.stringify((_a = {}, _a[attrName] = debugValue, _a), null, 2);\n            if (isProceduralRenderer(renderer)) {\n                renderer.setValue(element, textContent);\n            }\n            else {\n                element.textContent = textContent;\n            }\n        }\n    }\n    function validateAgainstUnknownProperties(hostView, element, propName, tNode) {\n        // If the tag matches any of the schemas we shouldn't throw.\n        if (matchingSchemas(hostView, tNode.tagName)) {\n            return;\n        }\n        // If prop is not a known property of the HTML element...\n        if (!(propName in element) &&\n            // and we are in a browser context... (web worker nodes should be skipped)\n            typeof Node === 'function' && element instanceof Node &&\n            // and isn't a synthetic animation property...\n            propName[0] !== ANIMATION_PROP_PREFIX) {\n            // ... it is probably a user error and we should throw.\n            throw createUnknownPropertyError(propName, tNode);\n        }\n    }\n    function matchingSchemas(hostView, tagName) {\n        var schemas = hostView[TVIEW].schemas;\n        if (schemas !== null) {\n            for (var i = 0; i < schemas.length; i++) {\n                var schema = schemas[i];\n                if (schema === NO_ERRORS_SCHEMA ||\n                    schema === CUSTOM_ELEMENTS_SCHEMA && tagName && tagName.indexOf('-') > -1) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    /**\n    * Stores debugging data for this property binding on first template pass.\n    * This enables features like DebugElement.properties.\n    */\n    function savePropertyDebugData(tNode, lView, propName, tData, nativeOnly) {\n        var lastBindingIndex = lView[BINDING_INDEX] - 1;\n        // Bind/interpolation functions save binding metadata in the last binding index,\n        // but leave the property name blank. If the interpolation delimiter is at the 0\n        // index, we know that this is our first pass and the property name still needs to\n        // be set.\n        var bindingMetadata = tData[lastBindingIndex];\n        if (bindingMetadata[0] == INTERPOLATION_DELIMITER) {\n            tData[lastBindingIndex] = propName + bindingMetadata;\n            // We don't want to store indices for host bindings because they are stored in a\n            // different part of LView (the expando section).\n            if (!nativeOnly) {\n                if (tNode.propertyMetadataStartIndex == -1) {\n                    tNode.propertyMetadataStartIndex = lastBindingIndex;\n                }\n                tNode.propertyMetadataEndIndex = lastBindingIndex + 1;\n            }\n        }\n    }\n    /**\n    * Creates an error that should be thrown when encountering an unknown property on an element.\n    * @param propName Name of the invalid property.\n    * @param tNode Node on which we encountered the error.\n    */\n    function createUnknownPropertyError(propName, tNode) {\n        return new Error(\"Template error: Can't bind to '\" + propName + \"' since it isn't a known property of '\" + tNode.tagName + \"'.\");\n    }\n    /**\n     * Instantiate a root component.\n     */\n    function instantiateRootComponent(tView, viewData, def) {\n        var rootTNode = getPreviousOrParentTNode();\n        if (tView.firstTemplatePass) {\n            if (def.providersResolver)\n                def.providersResolver(def);\n            generateExpandoInstructionBlock(tView, rootTNode, 1);\n            baseResolveDirective(tView, viewData, def, def.factory);\n        }\n        var directive = getNodeInjectable(tView.data, viewData, viewData.length - 1, rootTNode);\n        postProcessBaseDirective(viewData, rootTNode, directive);\n        return directive;\n    }\n    /**\n     * Resolve the matched directives on a node.\n     */\n    function resolveDirectives(tView, viewData, directives, tNode, localRefs) {\n        // Please make sure to have explicit type for `exportsMap`. Inferred type triggers bug in\n        // tsickle.\n        ngDevMode && assertEqual(tView.firstTemplatePass, true, 'should run on first template pass only');\n        var exportsMap = localRefs ? { '': -1 } : null;\n        if (directives) {\n            initNodeFlags(tNode, tView.data.length, directives.length);\n            // When the same token is provided by several directives on the same node, some rules apply in\n            // the viewEngine:\n            // - viewProviders have priority over providers\n            // - the last directive in NgModule.declarations has priority over the previous one\n            // So to match these rules, the order in which providers are added in the arrays is very\n            // important.\n            for (var i = 0; i < directives.length; i++) {\n                var def = directives[i];\n                if (def.providersResolver)\n                    def.providersResolver(def);\n            }\n            generateExpandoInstructionBlock(tView, tNode, directives.length);\n            var initialPreOrderHooksLength = (tView.preOrderHooks && tView.preOrderHooks.length) || 0;\n            var initialPreOrderCheckHooksLength = (tView.preOrderCheckHooks && tView.preOrderCheckHooks.length) || 0;\n            var nodeIndex = tNode.index - HEADER_OFFSET;\n            for (var i = 0; i < directives.length; i++) {\n                var def = directives[i];\n                var directiveDefIdx = tView.data.length;\n                baseResolveDirective(tView, viewData, def, def.factory);\n                saveNameToExportMap(tView.data.length - 1, def, exportsMap);\n                // Init hooks are queued now so ngOnInit is called in host components before\n                // any projected components.\n                registerPreOrderHooks(directiveDefIdx, def, tView, nodeIndex, initialPreOrderHooksLength, initialPreOrderCheckHooksLength);\n            }\n        }\n        if (exportsMap)\n            cacheMatchingLocalNames(tNode, localRefs, exportsMap);\n    }\n    /**\n     * Instantiate all the directives that were previously resolved on the current node.\n     */\n    function instantiateAllDirectives(tView, lView, tNode) {\n        var start = tNode.directiveStart;\n        var end = tNode.directiveEnd;\n        if (!tView.firstTemplatePass && start < end) {\n            getOrCreateNodeInjectorForNode(tNode, lView);\n        }\n        for (var i = start; i < end; i++) {\n            var def = tView.data[i];\n            if (isComponentDef(def)) {\n                addComponentLogic(lView, tNode, def);\n            }\n            var directive = getNodeInjectable(tView.data, lView, i, tNode);\n            postProcessDirective(lView, directive, def, i);\n        }\n    }\n    function invokeDirectivesHostBindings(tView, viewData, tNode) {\n        var start = tNode.directiveStart;\n        var end = tNode.directiveEnd;\n        var expando = tView.expandoInstructions;\n        var firstTemplatePass = tView.firstTemplatePass;\n        var elementIndex = tNode.index - HEADER_OFFSET;\n        var selectedIndex = getSelectedIndex();\n        try {\n            setActiveHostElement(elementIndex);\n            for (var i = start; i < end; i++) {\n                var def = tView.data[i];\n                var directive = viewData[i];\n                if (def.hostBindings) {\n                    invokeHostBindingsInCreationMode(def, expando, directive, tNode, firstTemplatePass);\n                    // Each directive gets a uniqueId value that is the same for both\n                    // create and update calls when the hostBindings function is called. The\n                    // directive uniqueId is not set anywhere--it is just incremented between\n                    // each hostBindings call and is useful for helping instruction code\n                    // uniquely determine which directive is currently active when executed.\n                    incrementActiveDirectiveId();\n                }\n                else if (firstTemplatePass) {\n                    expando.push(null);\n                }\n            }\n        }\n        finally {\n            setActiveHostElement(selectedIndex);\n        }\n    }\n    function invokeHostBindingsInCreationMode(def, expando, directive, tNode, firstTemplatePass) {\n        var previousExpandoLength = expando.length;\n        setCurrentDirectiveDef(def);\n        var elementIndex = tNode.index - HEADER_OFFSET;\n        def.hostBindings(1 /* Create */, directive, elementIndex);\n        setCurrentDirectiveDef(null);\n        // `hostBindings` function may or may not contain `allocHostVars` call\n        // (e.g. it may not if it only contains host listeners), so we need to check whether\n        // `expandoInstructions` has changed and if not - we still push `hostBindings` to\n        // expando block, to make sure we execute it for DI cycle\n        if (previousExpandoLength === expando.length && firstTemplatePass) {\n            expando.push(def.hostBindings);\n        }\n    }\n    /**\n    * Generates a new block in TView.expandoInstructions for this node.\n    *\n    * Each expando block starts with the element index (turned negative so we can distinguish\n    * it from the hostVar count) and the directive count. See more in VIEW_DATA.md.\n    */\n    function generateExpandoInstructionBlock(tView, tNode, directiveCount) {\n        ngDevMode && assertEqual(tView.firstTemplatePass, true, 'Expando block should only be generated on first template pass.');\n        var elementIndex = -(tNode.index - HEADER_OFFSET);\n        var providerStartIndex = tNode.providerIndexes & 65535 /* ProvidersStartIndexMask */;\n        var providerCount = tView.data.length - providerStartIndex;\n        (tView.expandoInstructions || (tView.expandoInstructions = [])).push(elementIndex, providerCount, directiveCount);\n    }\n    /**\n     * Process a directive on the current node after its creation.\n     */\n    function postProcessDirective(viewData, directive, def, directiveDefIdx) {\n        var previousOrParentTNode = getPreviousOrParentTNode();\n        postProcessBaseDirective(viewData, previousOrParentTNode, directive);\n        ngDevMode && assertDefined(previousOrParentTNode, 'previousOrParentTNode');\n        if (previousOrParentTNode && previousOrParentTNode.attrs) {\n            setInputsFromAttrs(directiveDefIdx, directive, def, previousOrParentTNode);\n        }\n        if (viewData[TVIEW].firstTemplatePass && def.contentQueries) {\n            previousOrParentTNode.flags |= 4 /* hasContentQuery */;\n        }\n        if (isComponentDef(def)) {\n            var componentView = getComponentViewByIndex(previousOrParentTNode.index, viewData);\n            componentView[CONTEXT] = directive;\n        }\n    }\n    /**\n     * A lighter version of postProcessDirective() that is used for the root component.\n     */\n    function postProcessBaseDirective(lView, previousOrParentTNode, directive) {\n        var native = getNativeByTNode(previousOrParentTNode, lView);\n        ngDevMode && assertEqual(lView[BINDING_INDEX], lView[TVIEW].bindingStartIndex, 'directives should be created before any bindings');\n        ngDevMode && assertPreviousIsParent(getIsParent());\n        attachPatchData(directive, lView);\n        if (native) {\n            attachPatchData(native, lView);\n        }\n    }\n    /**\n    * Matches the current node against all available selectors.\n    * If a component is matched (at most one), it is returned in first position in the array.\n    */\n    function findDirectiveMatches(tView, viewData, tNode) {\n        ngDevMode && assertEqual(tView.firstTemplatePass, true, 'should run on first template pass only');\n        var registry = tView.directiveRegistry;\n        var matches = null;\n        if (registry) {\n            for (var i = 0; i < registry.length; i++) {\n                var def = registry[i];\n                if (isNodeMatchingSelectorList(tNode, def.selectors, /* isProjectionMode */ false)) {\n                    matches || (matches = ngDevMode ? new MatchesArray() : []);\n                    diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, viewData), tView, def.type);\n                    if (isComponentDef(def)) {\n                        if (tNode.flags & 1 /* isComponent */)\n                            throwMultipleComponentError(tNode);\n                        tNode.flags = 1 /* isComponent */;\n                        // The component is always stored first with directives after.\n                        matches.unshift(def);\n                    }\n                    else {\n                        matches.push(def);\n                    }\n                }\n            }\n        }\n        return matches;\n    }\n    /** Stores index of component's host element so it will be queued for view refresh during CD. */\n    function queueComponentIndexForCheck(previousOrParentTNode) {\n        var tView = getLView()[TVIEW];\n        ngDevMode &&\n            assertEqual(tView.firstTemplatePass, true, 'Should only be called in first template pass.');\n        (tView.components || (tView.components = ngDevMode ? new TViewComponents() : [])).push(previousOrParentTNode.index);\n    }\n    /** Caches local names and their matching directive indices for query and template lookups. */\n    function cacheMatchingLocalNames(tNode, localRefs, exportsMap) {\n        if (localRefs) {\n            var localNames = tNode.localNames =\n                ngDevMode ? new TNodeLocalNames() : [];\n            // Local names must be stored in tNode in the same order that localRefs are defined\n            // in the template to ensure the data is loaded in the same slots as their refs\n            // in the template (for template queries).\n            for (var i = 0; i < localRefs.length; i += 2) {\n                var index = exportsMap[localRefs[i + 1]];\n                if (index == null)\n                    throw new Error(\"Export of name '\" + localRefs[i + 1] + \"' not found!\");\n                localNames.push(localRefs[i], index);\n            }\n        }\n    }\n    /**\n    * Builds up an export map as directives are created, so local refs can be quickly mapped\n    * to their directive instances.\n    */\n    function saveNameToExportMap(index, def, exportsMap) {\n        if (exportsMap) {\n            if (def.exportAs) {\n                for (var i = 0; i < def.exportAs.length; i++) {\n                    exportsMap[def.exportAs[i]] = index;\n                }\n            }\n            if (def.template)\n                exportsMap[''] = index;\n        }\n    }\n    /**\n     * Initializes the flags on the current node, setting all indices to the initial index,\n     * the directive count to 0, and adding the isComponent flag.\n     * @param index the initial index\n     */\n    function initNodeFlags(tNode, index, numberOfDirectives) {\n        var flags = tNode.flags;\n        ngDevMode && assertEqual(flags === 0 || flags === 1 /* isComponent */, true, 'expected node flags to not be initialized');\n        ngDevMode && assertNotEqual(numberOfDirectives, tNode.directiveEnd - tNode.directiveStart, 'Reached the max number of directives');\n        // When the first directive is created on a node, save the index\n        tNode.flags = flags & 1 /* isComponent */;\n        tNode.directiveStart = index;\n        tNode.directiveEnd = index + numberOfDirectives;\n        tNode.providerIndexes = index;\n    }\n    function baseResolveDirective(tView, viewData, def, directiveFactory) {\n        tView.data.push(def);\n        var nodeInjectorFactory = new NodeInjectorFactory(directiveFactory, isComponentDef(def), null);\n        tView.blueprint.push(nodeInjectorFactory);\n        viewData.push(nodeInjectorFactory);\n    }\n    function addComponentLogic(lView, previousOrParentTNode, def) {\n        var native = getNativeByTNode(previousOrParentTNode, lView);\n        var tView = getOrCreateTView(def);\n        // Only component views should be added to the view tree directly. Embedded views are\n        // accessed through their containers because they may be removed / re-added later.\n        var rendererFactory = lView[RENDERER_FACTORY];\n        var componentView = addToViewTree(lView, createLView(lView, tView, null, def.onPush ? 64 /* Dirty */ : 16 /* CheckAlways */, lView[previousOrParentTNode.index], previousOrParentTNode, rendererFactory, rendererFactory.createRenderer(native, def)));\n        componentView[T_HOST] = previousOrParentTNode;\n        // Component view will always be created before any injected LContainers,\n        // so this is a regular element, wrap it with the component view\n        lView[previousOrParentTNode.index] = componentView;\n        if (lView[TVIEW].firstTemplatePass) {\n            queueComponentIndexForCheck(previousOrParentTNode);\n        }\n    }\n    function elementAttributeInternal(index, name, value, lView, sanitizer, namespace) {\n        ngDevMode && assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');\n        ngDevMode && validateAgainstEventAttributes(name);\n        var element = getNativeByIndex(index, lView);\n        var renderer = lView[RENDERER];\n        if (value == null) {\n            ngDevMode && ngDevMode.rendererRemoveAttribute++;\n            isProceduralRenderer(renderer) ? renderer.removeAttribute(element, name, namespace) :\n                element.removeAttribute(name);\n        }\n        else {\n            ngDevMode && ngDevMode.rendererSetAttribute++;\n            var tNode = getTNode(index, lView);\n            var strValue = sanitizer == null ? renderStringify(value) : sanitizer(value, tNode.tagName || '', name);\n            if (isProceduralRenderer(renderer)) {\n                renderer.setAttribute(element, name, strValue, namespace);\n            }\n            else {\n                namespace ? element.setAttributeNS(namespace, name, strValue) :\n                    element.setAttribute(name, strValue);\n            }\n        }\n    }\n    /**\n     * Sets initial input properties on directive instances from attribute data\n     *\n     * @param directiveIndex Index of the directive in directives array\n     * @param instance Instance of the directive on which to set the initial inputs\n     * @param def The directive def that contains the list of inputs\n     * @param tNode The static data for this node\n     */\n    function setInputsFromAttrs(directiveIndex, instance, def, tNode) {\n        var initialInputData = tNode.initialInputs;\n        if (initialInputData === undefined || directiveIndex >= initialInputData.length) {\n            initialInputData = generateInitialInputs(directiveIndex, def.inputs, tNode);\n        }\n        var initialInputs = initialInputData[directiveIndex];\n        if (initialInputs) {\n            var setInput = def.setInput;\n            for (var i = 0; i < initialInputs.length;) {\n                var publicName = initialInputs[i++];\n                var privateName = initialInputs[i++];\n                var value = initialInputs[i++];\n                if (setInput) {\n                    def.setInput(instance, value, publicName, privateName);\n                }\n                else {\n                    instance[privateName] = value;\n                }\n                if (ngDevMode) {\n                    var lView = getLView();\n                    var nativeElement = getNativeByTNode(tNode, lView);\n                    setNgReflectProperty(lView, nativeElement, tNode.type, privateName, value);\n                }\n            }\n        }\n    }\n    /**\n     * Generates initialInputData for a node and stores it in the template's static storage\n     * so subsequent template invocations don't have to recalculate it.\n     *\n     * initialInputData is an array containing values that need to be set as input properties\n     * for directives on this node, but only once on creation. We need this array to support\n     * the case where you set an @Input property of a directive using attribute-like syntax.\n     * e.g. if you have a `name` @Input, you can set it once like this:\n     *\n     * <my-component name=\"Bess\"></my-component>\n     *\n     * @param directiveIndex Index to store the initial input data\n     * @param inputs The list of inputs from the directive def\n     * @param tNode The static data on this node\n     */\n    function generateInitialInputs(directiveIndex, inputs, tNode) {\n        var initialInputData = tNode.initialInputs || (tNode.initialInputs = ngDevMode ? new TNodeInitialInputs() : []);\n        // Ensure that we don't create sparse arrays\n        for (var i_1 = initialInputData.length; i_1 <= directiveIndex; i_1++) {\n            initialInputData.push(null);\n        }\n        var attrs = tNode.attrs;\n        var i = 0;\n        while (i < attrs.length) {\n            var attrName = attrs[i];\n            if (attrName === 0 /* NamespaceURI */) {\n                // We do not allow inputs on namespaced attributes.\n                i += 4;\n                continue;\n            }\n            else if (attrName === 5 /* ProjectAs */) {\n                // Skip over the `ngProjectAs` value.\n                i += 2;\n                continue;\n            }\n            // If we hit any other attribute markers, we're done anyway. None of those are valid inputs.\n            if (typeof attrName === 'number')\n                break;\n            var minifiedInputName = inputs[attrName];\n            var attrValue = attrs[i + 1];\n            if (minifiedInputName !== undefined) {\n                var inputsToStore = initialInputData[directiveIndex] ||\n                    (initialInputData[directiveIndex] = ngDevMode ? new TNodeInitialData() : []);\n                inputsToStore.push(attrName, minifiedInputName, attrValue);\n            }\n            i += 2;\n        }\n        return initialInputData;\n    }\n    //////////////////////////\n    //// ViewContainer & View\n    //////////////////////////\n    // Not sure why I need to do `any` here but TS complains later.\n    var LContainerArray = ngDevMode && createNamedArrayType('LContainer');\n    /**\n     * Creates a LContainer, either from a container instruction, or for a ViewContainerRef.\n     *\n     * @param hostNative The host element for the LContainer\n     * @param hostTNode The host TNode for the LContainer\n     * @param currentView The parent view of the LContainer\n     * @param native The native comment element\n     * @param isForViewContainerRef Optional a flag indicating the ViewContainerRef case\n     * @returns LContainer\n     */\n    function createLContainer(hostNative, currentView, native, tNode, isForViewContainerRef) {\n        ngDevMode && assertDomNode(native);\n        ngDevMode && assertLView(currentView);\n        // https://jsperf.com/array-literal-vs-new-array-really\n        var lContainer = new (ngDevMode ? LContainerArray : Array)(hostNative, // host native\n        true, // Boolean `true` in this position signifies that this is an `LContainer`\n        isForViewContainerRef ? -1 : 0, // active index\n        currentView, // parent\n        null, // next\n        null, // queries\n        tNode, // t_host\n        native, // native,\n        null);\n        ngDevMode && attachLContainerDebug(lContainer);\n        return lContainer;\n    }\n    /**\n     * Goes over dynamic embedded views (ones created through ViewContainerRef APIs) and refreshes\n     * them\n     * by executing an associated template function.\n     */\n    function refreshDynamicEmbeddedViews(lView) {\n        for (var current = lView[CHILD_HEAD]; current !== null; current = current[NEXT]) {\n            // Note: current can be an LView or an LContainer instance, but here we are only interested\n            // in LContainer. We can tell it's an LContainer because its length is less than the LView\n            // header.\n            if (current[ACTIVE_INDEX] === -1 && isLContainer(current)) {\n                for (var i = CONTAINER_HEADER_OFFSET; i < current.length; i++) {\n                    var dynamicViewData = current[i];\n                    // The directives and pipes are not needed here as an existing view is only being\n                    // refreshed.\n                    ngDevMode && assertDefined(dynamicViewData[TVIEW], 'TView must be allocated');\n                    renderEmbeddedTemplate(dynamicViewData, dynamicViewData[TVIEW], dynamicViewData[CONTEXT]);\n                }\n            }\n        }\n    }\n    /////////////\n    /**\n     * Refreshes components by entering the component view and processing its bindings, queries, etc.\n     *\n     * @param adjustedElementIndex  Element index in LView[] (adjusted for HEADER_OFFSET)\n     */\n    function componentRefresh(adjustedElementIndex) {\n        var lView = getLView();\n        ngDevMode && assertDataInRange(lView, adjustedElementIndex);\n        var hostView = getComponentViewByIndex(adjustedElementIndex, lView);\n        ngDevMode && assertNodeType(lView[TVIEW].data[adjustedElementIndex], 3 /* Element */);\n        // Only components in creation mode, attached CheckAlways\n        // components or attached, dirty OnPush components should be checked\n        if ((viewAttachedToChangeDetector(hostView) || isCreationMode(lView)) &&\n            hostView[FLAGS] & (16 /* CheckAlways */ | 64 /* Dirty */)) {\n            syncViewWithBlueprint(hostView);\n            checkView(hostView, hostView[CONTEXT]);\n        }\n    }\n    /**\n     * Syncs an LView instance with its blueprint if they have gotten out of sync.\n     *\n     * Typically, blueprints and their view instances should always be in sync, so the loop here\n     * will be skipped. However, consider this case of two components side-by-side:\n     *\n     * App template:\n     * ```\n     * <comp></comp>\n     * <comp></comp>\n     * ```\n     *\n     * The following will happen:\n     * 1. App template begins processing.\n     * 2. First <comp> is matched as a component and its LView is created.\n     * 3. Second <comp> is matched as a component and its LView is created.\n     * 4. App template completes processing, so it's time to check child templates.\n     * 5. First <comp> template is checked. It has a directive, so its def is pushed to blueprint.\n     * 6. Second <comp> template is checked. Its blueprint has been updated by the first\n     * <comp> template, but its LView was created before this update, so it is out of sync.\n     *\n     * Note that embedded views inside ngFor loops will never be out of sync because these views\n     * are processed as soon as they are created.\n     *\n     * @param componentView The view to sync\n     */\n    function syncViewWithBlueprint(componentView) {\n        var componentTView = componentView[TVIEW];\n        for (var i = componentView.length; i < componentTView.blueprint.length; i++) {\n            componentView[i] = componentTView.blueprint[i];\n        }\n    }\n    /**\n     * Adds LView or LContainer to the end of the current view tree.\n     *\n     * This structure will be used to traverse through nested views to remove listeners\n     * and call onDestroy callbacks.\n     *\n     * @param lView The view where LView or LContainer should be added\n     * @param adjustedHostIndex Index of the view's host node in LView[], adjusted for header\n     * @param lViewOrLContainer The LView or LContainer to add to the view tree\n     * @returns The state passed in\n     */\n    function addToViewTree(lView, lViewOrLContainer) {\n        // TODO(benlesh/misko): This implementation is incorrect, because it always adds the LContainer\n        // to\n        // the end of the queue, which means if the developer retrieves the LContainers from RNodes out\n        // of\n        // order, the change detection will run out of order, as the act of retrieving the the\n        // LContainer\n        // from the RNode is what adds it to the queue.\n        if (lView[CHILD_HEAD]) {\n            lView[CHILD_TAIL][NEXT] = lViewOrLContainer;\n        }\n        else {\n            lView[CHILD_HEAD] = lViewOrLContainer;\n        }\n        lView[CHILD_TAIL] = lViewOrLContainer;\n        return lViewOrLContainer;\n    }\n    ///////////////////////////////\n    //// Change detection\n    ///////////////////////////////\n    /**\n     * Marks current view and all ancestors dirty.\n     *\n     * Returns the root view because it is found as a byproduct of marking the view tree\n     * dirty, and can be used by methods that consume markViewDirty() to easily schedule\n     * change detection. Otherwise, such methods would need to traverse up the view tree\n     * an additional time to get the root view and schedule a tick on it.\n     *\n     * @param lView The starting LView to mark dirty\n     * @returns the root LView\n     */\n    function markViewDirty(lView) {\n        while (lView) {\n            lView[FLAGS] |= 64 /* Dirty */;\n            var parent_1 = getLViewParent(lView);\n            // Stop traversing up as soon as you find a root view that wasn't attached to any container\n            if (isRootView(lView) && !parent_1) {\n                return lView;\n            }\n            // continue otherwise\n            lView = parent_1;\n        }\n        return null;\n    }\n    /**\n     * Used to schedule change detection on the whole application.\n     *\n     * Unlike `tick`, `scheduleTick` coalesces multiple calls into one change detection run.\n     * It is usually called indirectly by calling `markDirty` when the view needs to be\n     * re-rendered.\n     *\n     * Typically `scheduleTick` uses `requestAnimationFrame` to coalesce multiple\n     * `scheduleTick` requests. The scheduling function can be overridden in\n     * `renderComponent`'s `scheduler` option.\n     */\n    function scheduleTick(rootContext, flags) {\n        var nothingScheduled = rootContext.flags === 0 /* Empty */;\n        rootContext.flags |= flags;\n        if (nothingScheduled && rootContext.clean == _CLEAN_PROMISE) {\n            var res_1;\n            rootContext.clean = new Promise(function (r) { return res_1 = r; });\n            rootContext.scheduler(function () {\n                if (rootContext.flags & 1 /* DetectChanges */) {\n                    rootContext.flags &= ~1 /* DetectChanges */;\n                    tickRootContext(rootContext);\n                }\n                if (rootContext.flags & 2 /* FlushPlayers */) {\n                    rootContext.flags &= ~2 /* FlushPlayers */;\n                    var playerHandler = rootContext.playerHandler;\n                    if (playerHandler) {\n                        playerHandler.flushPlayers();\n                    }\n                }\n                rootContext.clean = _CLEAN_PROMISE;\n                res_1(null);\n            });\n        }\n    }\n    function tickRootContext(rootContext) {\n        for (var i = 0; i < rootContext.components.length; i++) {\n            var rootComponent = rootContext.components[i];\n            renderComponentOrTemplate(readPatchedLView(rootComponent), rootComponent);\n        }\n    }\n    function detectChangesInternal(view, context) {\n        var rendererFactory = view[RENDERER_FACTORY];\n        if (rendererFactory.begin)\n            rendererFactory.begin();\n        try {\n            if (isCreationMode(view)) {\n                checkView(view, context); // creation mode pass\n            }\n            checkView(view, context); // update mode pass\n        }\n        catch (error) {\n            handleError(view, error);\n            throw error;\n        }\n        finally {\n            if (rendererFactory.end)\n                rendererFactory.end();\n        }\n    }\n    /**\n     * Synchronously perform change detection on a root view and its components.\n     *\n     * @param lView The view which the change detection should be performed on.\n     */\n    function detectChangesInRootView(lView) {\n        tickRootContext(lView[CONTEXT]);\n    }\n    function checkNoChangesInternal(view, context) {\n        setCheckNoChangesMode(true);\n        try {\n            detectChangesInternal(view, context);\n        }\n        finally {\n            setCheckNoChangesMode(false);\n        }\n    }\n    /**\n     * Checks the change detector on a root view and its components, and throws if any changes are\n     * detected.\n     *\n     * This is used in development mode to verify that running change detection doesn't\n     * introduce other changes.\n     *\n     * @param lView The view which the change detection should be checked on.\n     */\n    function checkNoChangesInRootView(lView) {\n        setCheckNoChangesMode(true);\n        try {\n            detectChangesInRootView(lView);\n        }\n        finally {\n            setCheckNoChangesMode(false);\n        }\n    }\n    /** Checks the view of the component provided. Does not gate on dirty checks or execute doCheck.\n     */\n    function checkView(hostView, component) {\n        var hostTView = hostView[TVIEW];\n        var oldView = enterView(hostView, hostView[T_HOST]);\n        var templateFn = hostTView.template;\n        var creationMode = isCreationMode(hostView);\n        // Will become true if the `try` block executes with no errors.\n        var safeToRunHooks = false;\n        try {\n            resetPreOrderHookFlags(hostView);\n            creationMode && executeViewQueryFn(1 /* Create */, hostTView, component);\n            executeTemplate(hostView, templateFn, getRenderFlags(hostView), component);\n            refreshDescendantViews(hostView);\n            // Only check view queries again in creation mode if there are static view queries\n            if (!creationMode || hostTView.staticViewQueries) {\n                executeViewQueryFn(2 /* Update */, hostTView, component);\n            }\n            safeToRunHooks = true;\n        }\n        finally {\n            leaveView(oldView, safeToRunHooks);\n        }\n    }\n    function executeViewQueryFn(flags, tView, component) {\n        var viewQuery = tView.viewQuery;\n        if (viewQuery) {\n            setCurrentQueryIndex(tView.viewQueryStartIndex);\n            viewQuery(flags, component);\n        }\n    }\n    ///////////////////////////////\n    //// Bindings & interpolations\n    ///////////////////////////////\n    /**\n     * Creates binding metadata for a particular binding and stores it in\n     * TView.data. These are generated in order to support DebugElement.properties.\n     *\n     * Each binding / interpolation will have one (including attribute bindings)\n     * because at the time of binding, we don't know to which instruction the binding\n     * belongs. It is always stored in TView.data at the index of the last binding\n     * value in LView (e.g. for interpolation8, it would be stored at the index of\n     * the 8th value).\n     *\n     * @param lView The LView that contains the current binding index.\n     * @param prefix The static prefix string\n     * @param suffix The static suffix string\n     *\n     * @returns Newly created binding metadata string for this binding or null\n     */\n    function storeBindingMetadata(lView, prefix, suffix) {\n        if (prefix === void 0) { prefix = ''; }\n        if (suffix === void 0) { suffix = ''; }\n        var tData = lView[TVIEW].data;\n        var lastBindingIndex = lView[BINDING_INDEX] - 1;\n        var value = INTERPOLATION_DELIMITER + prefix + INTERPOLATION_DELIMITER + suffix;\n        return tData[lastBindingIndex] == null ? (tData[lastBindingIndex] = value) : null;\n    }\n    var CLEAN_PROMISE = _CLEAN_PROMISE;\n    function initializeTNodeInputs(tNode) {\n        // If tNode.inputs is undefined, a listener has created outputs, but inputs haven't\n        // yet been checked.\n        if (tNode.inputs === undefined) {\n            // mark inputs as checked\n            tNode.inputs = generatePropertyAliases(tNode, 0 /* Input */);\n        }\n        return tNode.inputs;\n    }\n    function getCleanup(view) {\n        // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n        return view[CLEANUP] || (view[CLEANUP] = ngDevMode ? new LCleanup() : []);\n    }\n    function getTViewCleanup(view) {\n        return view[TVIEW].cleanup || (view[TVIEW].cleanup = ngDevMode ? new TCleanup() : []);\n    }\n    /**\n     * There are cases where the sub component's renderer needs to be included\n     * instead of the current renderer (see the componentSyntheticHost* instructions).\n     */\n    function loadComponentRenderer(tNode, lView) {\n        var componentLView = lView[tNode.index];\n        return componentLView[RENDERER];\n    }\n    /** Handles an error thrown in an LView. */\n    function handleError(lView, error) {\n        var injector = lView[INJECTOR$1];\n        var errorHandler = injector ? injector.get(ErrorHandler, null) : null;\n        errorHandler && errorHandler.handleError(error);\n    }\n    /**\n     * Set the inputs of directives at the current node to corresponding value.\n     *\n     * @param lView the `LView` which contains the directives.\n     * @param inputs mapping between the public \"input\" name and privately-known,\n     * possibly minified, property names to write to.\n     * @param value Value to set.\n     */\n    function setInputsForProperty(lView, inputs, value) {\n        var tView = lView[TVIEW];\n        for (var i = 0; i < inputs.length;) {\n            var index = inputs[i++];\n            var publicName = inputs[i++];\n            var privateName = inputs[i++];\n            var instance = lView[index];\n            ngDevMode && assertDataInRange(lView, index);\n            var def = tView.data[index];\n            var setInput = def.setInput;\n            if (setInput) {\n                def.setInput(instance, value, publicName, privateName);\n            }\n            else {\n                instance[privateName] = value;\n            }\n        }\n    }\n    /**\n     * Updates a text binding at a given index in a given LView.\n     */\n    function textBindingInternal(lView, index, value) {\n        ngDevMode && assertNotSame(value, NO_CHANGE, 'value should not be NO_CHANGE');\n        ngDevMode && assertDataInRange(lView, index + HEADER_OFFSET);\n        var element = getNativeByIndex(index, lView);\n        ngDevMode && assertDefined(element, 'native element should exist');\n        ngDevMode && ngDevMode.rendererSetText++;\n        var renderer = lView[RENDERER];\n        isProceduralRenderer(renderer) ? renderer.setValue(element, value) : element.textContent = value;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function applyOnCreateInstructions(tNode) {\n        // there may be some instructions that need to run in a specific\n        // order because the CREATE block in a directive runs before the\n        // CREATE block in a template. To work around this instructions\n        // can get access to the function array below and defer any code\n        // to run after the element is created.\n        var fns;\n        if (fns = tNode.onElementCreationFns) {\n            for (var i = 0; i < fns.length; i++) {\n                fns[i]();\n            }\n            tNode.onElementCreationFns = null;\n        }\n    }\n    /**\n     * Unwraps a parent injector location number to find the view offset from the current injector,\n     * then walks up the declaration view tree until the TNode of the parent injector is found.\n     *\n     * @param location The location of the parent injector, which contains the view offset\n     * @param startView The LView instance from which to start walking up the view tree\n     * @param startTNode The TNode instance of the starting element\n     * @returns The TNode of the parent injector\n     */\n    function getParentInjectorTNode(location, startView, startTNode) {\n        if (startTNode.parent && startTNode.parent.injectorIndex !== -1) {\n            // view offset is 0\n            var injectorIndex = startTNode.parent.injectorIndex;\n            var parentTNode_1 = startTNode.parent;\n            while (parentTNode_1.parent != null && injectorIndex == parentTNode_1.injectorIndex) {\n                parentTNode_1 = parentTNode_1.parent;\n            }\n            return parentTNode_1;\n        }\n        var viewOffset = getParentInjectorViewOffset(location);\n        // view offset is 1\n        var parentView = startView;\n        var parentTNode = startView[T_HOST];\n        // view offset is superior to 1\n        while (viewOffset > 1) {\n            parentView = parentView[DECLARATION_VIEW];\n            parentTNode = parentView[T_HOST];\n            viewOffset--;\n        }\n        return parentTNode;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Allocates the necessary amount of slots for host vars.\n     *\n     * @param count Amount of vars to be allocated\n     *\n     * @codeGenApi\n     */\n    function ɵɵallocHostVars(count) {\n        var lView = getLView();\n        var tView = lView[TVIEW];\n        if (!tView.firstTemplatePass)\n            return;\n        queueHostBindingForCheck(tView, getCurrentDirectiveDef(), count);\n        prefillHostVars(tView, lView, count);\n    }\n    /**\n     * Stores host binding fn and number of host vars so it will be queued for binding refresh during\n     * CD.\n     */\n    function queueHostBindingForCheck(tView, def, hostVars) {\n        ngDevMode &&\n            assertEqual(tView.firstTemplatePass, true, 'Should only be called in first template pass.');\n        var expando = tView.expandoInstructions;\n        var length = expando.length;\n        // Check whether a given `hostBindings` function already exists in expandoInstructions,\n        // which can happen in case directive definition was extended from base definition (as a part of\n        // the `InheritDefinitionFeature` logic). If we found the same `hostBindings` function in the\n        // list, we just increase the number of host vars associated with that function, but do not add it\n        // into the list again.\n        if (length >= 2 && expando[length - 2] === def.hostBindings) {\n            expando[length - 1] = expando[length - 1] + hostVars;\n        }\n        else {\n            expando.push(def.hostBindings, hostVars);\n        }\n    }\n    /**\n     * On the first template pass, we need to reserve space for host binding values\n     * after directives are matched (so all directives are saved, then bindings).\n     * Because we are updating the blueprint, we only need to do this once.\n     */\n    function prefillHostVars(tView, lView, totalHostVars) {\n        ngDevMode &&\n            assertEqual(tView.firstTemplatePass, true, 'Should only be called in first template pass.');\n        for (var i = 0; i < totalHostVars; i++) {\n            lView.push(NO_CHANGE);\n            tView.blueprint.push(NO_CHANGE);\n            tView.data.push(null);\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var _symbolIterator = null;\n    function getSymbolIterator() {\n        if (!_symbolIterator) {\n            var Symbol_1 = _global['Symbol'];\n            if (Symbol_1 && Symbol_1.iterator) {\n                _symbolIterator = Symbol_1.iterator;\n            }\n            else {\n                // es6-shim specific logic\n                var keys = Object.getOwnPropertyNames(Map.prototype);\n                for (var i = 0; i < keys.length; ++i) {\n                    var key = keys[i];\n                    if (key !== 'entries' && key !== 'size' &&\n                        Map.prototype[key] === Map.prototype['entries']) {\n                        _symbolIterator = key;\n                    }\n                }\n            }\n        }\n        return _symbolIterator;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // JS has NaN !== NaN\n    function looseIdentical(a, b) {\n        return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function devModeEqual(a, b) {\n        var isListLikeIterableA = isListLikeIterable(a);\n        var isListLikeIterableB = isListLikeIterable(b);\n        if (isListLikeIterableA && isListLikeIterableB) {\n            return areIterablesEqual(a, b, devModeEqual);\n        }\n        else {\n            var isAObject = a && (typeof a === 'object' || typeof a === 'function');\n            var isBObject = b && (typeof b === 'object' || typeof b === 'function');\n            if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {\n                return true;\n            }\n            else {\n                return looseIdentical(a, b);\n            }\n        }\n    }\n    /**\n     * Indicates that the result of a {@link Pipe} transformation has changed even though the\n     * reference has not changed.\n     *\n     * Wrapped values are unwrapped automatically during the change detection, and the unwrapped value\n     * is stored.\n     *\n     * Example:\n     *\n     * ```\n     * if (this._latestValue === this._latestReturnedValue) {\n     *    return this._latestReturnedValue;\n     *  } else {\n     *    this._latestReturnedValue = this._latestValue;\n     *    return WrappedValue.wrap(this._latestValue); // this will force update\n     *  }\n     * ```\n     *\n     * @publicApi\n     */\n    var WrappedValue = /** @class */ (function () {\n        function WrappedValue(value) {\n            this.wrapped = value;\n        }\n        /** Creates a wrapped value. */\n        WrappedValue.wrap = function (value) { return new WrappedValue(value); };\n        /**\n         * Returns the underlying value of a wrapped value.\n         * Returns the given `value` when it is not wrapped.\n         **/\n        WrappedValue.unwrap = function (value) { return WrappedValue.isWrapped(value) ? value.wrapped : value; };\n        /** Returns true if `value` is a wrapped value. */\n        WrappedValue.isWrapped = function (value) { return value instanceof WrappedValue; };\n        return WrappedValue;\n    }());\n    function isListLikeIterable(obj) {\n        if (!isJsObject(obj))\n            return false;\n        return Array.isArray(obj) ||\n            (!(obj instanceof Map) && // JS Map are iterables but return entries as [k, v]\n                getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop\n    }\n    function areIterablesEqual(a, b, comparator) {\n        var iterator1 = a[getSymbolIterator()]();\n        var iterator2 = b[getSymbolIterator()]();\n        while (true) {\n            var item1 = iterator1.next();\n            var item2 = iterator2.next();\n            if (item1.done && item2.done)\n                return true;\n            if (item1.done || item2.done)\n                return false;\n            if (!comparator(item1.value, item2.value))\n                return false;\n        }\n    }\n    function iterateListLike(obj, fn) {\n        if (Array.isArray(obj)) {\n            for (var i = 0; i < obj.length; i++) {\n                fn(obj[i]);\n            }\n        }\n        else {\n            var iterator = obj[getSymbolIterator()]();\n            var item = void 0;\n            while (!((item = iterator.next()).done)) {\n                fn(item.value);\n            }\n        }\n    }\n    function isJsObject(o) {\n        return o !== null && (typeof o === 'function' || typeof o === 'object');\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // TODO(misko): consider inlining\n    /** Updates binding and returns the value. */\n    function updateBinding(lView, bindingIndex, value) {\n        return lView[bindingIndex] = value;\n    }\n    /** Gets the current binding value. */\n    function getBinding(lView, bindingIndex) {\n        ngDevMode && assertDataInRange(lView, bindingIndex);\n        ngDevMode &&\n            assertNotSame(lView[bindingIndex], NO_CHANGE, 'Stored value should never be NO_CHANGE.');\n        return lView[bindingIndex];\n    }\n    /** Updates binding if changed, then returns whether it was updated. */\n    function bindingUpdated(lView, bindingIndex, value) {\n        ngDevMode && assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');\n        ngDevMode &&\n            assertLessThan(bindingIndex, lView.length, \"Slot should have been initialized to NO_CHANGE\");\n        var oldValue = lView[bindingIndex];\n        if (isDifferent(oldValue, value)) {\n            if (ngDevMode && getCheckNoChangesMode()) {\n                // View engine didn't report undefined values as changed on the first checkNoChanges pass\n                // (before the change detection was run).\n                var oldValueToCompare = oldValue !== NO_CHANGE ? oldValue : undefined;\n                if (!devModeEqual(oldValueToCompare, value)) {\n                    throwErrorIfNoChangesMode(oldValue === NO_CHANGE, oldValueToCompare, value);\n                }\n            }\n            lView[bindingIndex] = value;\n            return true;\n        }\n        return false;\n    }\n    /** Updates 2 bindings if changed, then returns whether either was updated. */\n    function bindingUpdated2(lView, bindingIndex, exp1, exp2) {\n        var different = bindingUpdated(lView, bindingIndex, exp1);\n        return bindingUpdated(lView, bindingIndex + 1, exp2) || different;\n    }\n    /** Updates 3 bindings if changed, then returns whether any was updated. */\n    function bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) {\n        var different = bindingUpdated2(lView, bindingIndex, exp1, exp2);\n        return bindingUpdated(lView, bindingIndex + 2, exp3) || different;\n    }\n    /** Updates 4 bindings if changed, then returns whether any was updated. */\n    function bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) {\n        var different = bindingUpdated2(lView, bindingIndex, exp1, exp2);\n        return bindingUpdated2(lView, bindingIndex + 2, exp3, exp4) || different;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Update a property on a selected element.\n     *\n     * Operates on the element selected by index via the {@link select} instruction.\n     *\n     * If the property name also exists as an input property on one of the element's directives,\n     * the component property will be set instead of the element property. This check must\n     * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled\n     *\n     * @param propName Name of property. Because it is going to DOM, this is not subject to\n     *        renaming as part of minification.\n     * @param value New value to write.\n     * @param sanitizer An optional function used to sanitize the value.\n     * @returns This function returns itself so that it may be chained\n     * (e.g. `property('name', ctx.name)('title', ctx.title)`)\n     *\n     * @codeGenApi\n     */\n    function ɵɵproperty(propName, value, sanitizer) {\n        var index = getSelectedIndex();\n        ngDevMode && assertNotEqual(index, -1, 'selected index cannot be -1');\n        var lView = getLView();\n        var bindReconciledValue = bind(lView, value);\n        if (bindReconciledValue !== NO_CHANGE) {\n            elementPropertyInternal(index, propName, bindReconciledValue, sanitizer);\n        }\n        return ɵɵproperty;\n    }\n    /**\n     * Creates a single value binding.\n     *\n     * @param lView Current view\n     * @param value Value to diff\n     */\n    function bind(lView, value) {\n        var bindingIndex = lView[BINDING_INDEX]++;\n        storeBindingMetadata(lView);\n        return bindingUpdated(lView, bindingIndex, value) ? value : NO_CHANGE;\n    }\n\n    /**\n     * Updates the value of or removes a bound attribute on an Element.\n     *\n     * Used in the case of `[attr.title]=\"value\"`\n     *\n     * @param name name The name of the attribute.\n     * @param value value The attribute is removed when value is `null` or `undefined`.\n     *                  Otherwise the attribute value is set to the stringified value.\n     * @param sanitizer An optional function used to sanitize the value.\n     * @param namespace Optional namespace to use when setting the attribute.\n     *\n     * @codeGenApi\n     */\n    function ɵɵattribute(name, value, sanitizer, namespace) {\n        var index = getSelectedIndex();\n        var lView = getLView();\n        var bound = bind(lView, value);\n        if (bound !== NO_CHANGE) {\n            elementAttributeInternal(index, name, bound, lView, sanitizer, namespace);\n        }\n        return ɵɵattribute;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Create interpolation bindings with a variable number of expressions.\n     *\n     * If there are 1 to 8 expressions `interpolation1()` to `interpolation8()` should be used instead.\n     * Those are faster because there is no need to create an array of expressions and iterate over it.\n     *\n     * `values`:\n     * - has static text at even indexes,\n     * - has evaluated expressions at odd indexes.\n     *\n     * Returns the concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n     */\n    function interpolationV(lView, values) {\n        ngDevMode && assertLessThan(2, values.length, 'should have at least 3 values');\n        ngDevMode && assertEqual(values.length % 2, 1, 'should have an odd number of values');\n        var isBindingUpdated = false;\n        var tData = lView[TVIEW].data;\n        var bindingIndex = lView[BINDING_INDEX];\n        if (tData[bindingIndex] == null) {\n            // 2 is the index of the first static interstitial value (ie. not prefix)\n            for (var i = 2; i < values.length; i += 2) {\n                tData[bindingIndex++] = values[i];\n            }\n            bindingIndex = lView[BINDING_INDEX];\n        }\n        for (var i = 1; i < values.length; i += 2) {\n            // Check if bindings (odd indexes) have changed\n            isBindingUpdated = bindingUpdated(lView, bindingIndex++, values[i]) || isBindingUpdated;\n        }\n        lView[BINDING_INDEX] = bindingIndex;\n        storeBindingMetadata(lView, values[0], values[values.length - 1]);\n        if (!isBindingUpdated) {\n            return NO_CHANGE;\n        }\n        // Build the updated content\n        var content = values[0];\n        for (var i = 1; i < values.length; i += 2) {\n            content += renderStringify(values[i]) + values[i + 1];\n        }\n        return content;\n    }\n    /**\n     * Creates an interpolation binding with 1 expression.\n     *\n     * @param prefix static value used for concatenation only.\n     * @param v0 value checked for change.\n     * @param suffix static value used for concatenation only.\n     */\n    function interpolation1(lView, prefix, v0, suffix) {\n        var different = bindingUpdated(lView, lView[BINDING_INDEX]++, v0);\n        storeBindingMetadata(lView, prefix, suffix);\n        return different ? prefix + renderStringify(v0) + suffix : NO_CHANGE;\n    }\n    /**\n     * Creates an interpolation binding with 2 expressions.\n     */\n    function interpolation2(lView, prefix, v0, i0, v1, suffix) {\n        var bindingIndex = lView[BINDING_INDEX];\n        var different = bindingUpdated2(lView, bindingIndex, v0, v1);\n        lView[BINDING_INDEX] += 2;\n        // Only set static strings the first time (data will be null subsequent runs).\n        var data = storeBindingMetadata(lView, prefix, suffix);\n        if (data) {\n            lView[TVIEW].data[bindingIndex] = i0;\n        }\n        return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + suffix : NO_CHANGE;\n    }\n    /**\n     * Creates an interpolation binding with 3 expressions.\n     */\n    function interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix) {\n        var bindingIndex = lView[BINDING_INDEX];\n        var different = bindingUpdated3(lView, bindingIndex, v0, v1, v2);\n        lView[BINDING_INDEX] += 3;\n        // Only set static strings the first time (data will be null subsequent runs).\n        var data = storeBindingMetadata(lView, prefix, suffix);\n        if (data) {\n            var tData = lView[TVIEW].data;\n            tData[bindingIndex] = i0;\n            tData[bindingIndex + 1] = i1;\n        }\n        return different ?\n            prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + suffix :\n            NO_CHANGE;\n    }\n    /**\n     * Create an interpolation binding with 4 expressions.\n     */\n    function interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\n        var bindingIndex = lView[BINDING_INDEX];\n        var different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n        lView[BINDING_INDEX] += 4;\n        // Only set static strings the first time (data will be null subsequent runs).\n        var data = storeBindingMetadata(lView, prefix, suffix);\n        if (data) {\n            var tData = lView[TVIEW].data;\n            tData[bindingIndex] = i0;\n            tData[bindingIndex + 1] = i1;\n            tData[bindingIndex + 2] = i2;\n        }\n        return different ?\n            prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 +\n                renderStringify(v3) + suffix :\n            NO_CHANGE;\n    }\n    /**\n     * Creates an interpolation binding with 5 expressions.\n     */\n    function interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\n        var bindingIndex = lView[BINDING_INDEX];\n        var different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n        different = bindingUpdated(lView, bindingIndex + 4, v4) || different;\n        lView[BINDING_INDEX] += 5;\n        // Only set static strings the first time (data will be null subsequent runs).\n        var data = storeBindingMetadata(lView, prefix, suffix);\n        if (data) {\n            var tData = lView[TVIEW].data;\n            tData[bindingIndex] = i0;\n            tData[bindingIndex + 1] = i1;\n            tData[bindingIndex + 2] = i2;\n            tData[bindingIndex + 3] = i3;\n        }\n        return different ?\n            prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 +\n                renderStringify(v3) + i3 + renderStringify(v4) + suffix :\n            NO_CHANGE;\n    }\n    /**\n     * Creates an interpolation binding with 6 expressions.\n     */\n    function interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\n        var bindingIndex = lView[BINDING_INDEX];\n        var different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n        different = bindingUpdated2(lView, bindingIndex + 4, v4, v5) || different;\n        lView[BINDING_INDEX] += 6;\n        // Only set static strings the first time (data will be null subsequent runs).\n        var data = storeBindingMetadata(lView, prefix, suffix);\n        if (data) {\n            var tData = lView[TVIEW].data;\n            tData[bindingIndex] = i0;\n            tData[bindingIndex + 1] = i1;\n            tData[bindingIndex + 2] = i2;\n            tData[bindingIndex + 3] = i3;\n            tData[bindingIndex + 4] = i4;\n        }\n        return different ?\n            prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 +\n                renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + suffix :\n            NO_CHANGE;\n    }\n    /**\n     * Creates an interpolation binding with 7 expressions.\n     */\n    function interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\n        var bindingIndex = lView[BINDING_INDEX];\n        var different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n        different = bindingUpdated3(lView, bindingIndex + 4, v4, v5, v6) || different;\n        lView[BINDING_INDEX] += 7;\n        // Only set static strings the first time (data will be null subsequent runs).\n        var data = storeBindingMetadata(lView, prefix, suffix);\n        if (data) {\n            var tData = lView[TVIEW].data;\n            tData[bindingIndex] = i0;\n            tData[bindingIndex + 1] = i1;\n            tData[bindingIndex + 2] = i2;\n            tData[bindingIndex + 3] = i3;\n            tData[bindingIndex + 4] = i4;\n            tData[bindingIndex + 5] = i5;\n        }\n        return different ?\n            prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 +\n                renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + i5 +\n                renderStringify(v6) + suffix :\n            NO_CHANGE;\n    }\n    /**\n     * Creates an interpolation binding with 8 expressions.\n     */\n    function interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\n        var bindingIndex = lView[BINDING_INDEX];\n        var different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n        different = bindingUpdated4(lView, bindingIndex + 4, v4, v5, v6, v7) || different;\n        lView[BINDING_INDEX] += 8;\n        // Only set static strings the first time (data will be null subsequent runs).\n        var data = storeBindingMetadata(lView, prefix, suffix);\n        if (data) {\n            var tData = lView[TVIEW].data;\n            tData[bindingIndex] = i0;\n            tData[bindingIndex + 1] = i1;\n            tData[bindingIndex + 2] = i2;\n            tData[bindingIndex + 3] = i3;\n            tData[bindingIndex + 4] = i4;\n            tData[bindingIndex + 5] = i5;\n            tData[bindingIndex + 6] = i6;\n        }\n        return different ?\n            prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 +\n                renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + i5 +\n                renderStringify(v6) + i6 + renderStringify(v7) + suffix :\n            NO_CHANGE;\n    }\n\n    /**\n     *\n     * Update an interpolated attribute on an element with single bound value surrounded by text.\n     *\n     * Used when the value passed to a property has 1 interpolated value in it:\n     *\n     * ```html\n     * <div attr.title=\"prefix{{v0}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵattributeInterpolate1('title', 'prefix', v0, 'suffix');\n     * ```\n     *\n     * @param attrName The name of the attribute to update\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵattributeInterpolate1(attrName, prefix, v0, suffix, sanitizer, namespace) {\n        var index = getSelectedIndex();\n        var lView = getLView();\n        var interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            elementAttributeInternal(index, attrName, interpolatedValue, lView, sanitizer, namespace);\n        }\n        return ɵɵattributeInterpolate1;\n    }\n    /**\n     *\n     * Update an interpolated attribute on an element with 2 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 2 interpolated values in it:\n     *\n     * ```html\n     * <div attr.title=\"prefix{{v0}}-{{v1}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵattributeInterpolate2('title', 'prefix', v0, '-', v1, 'suffix');\n     * ```\n     *\n     * @param attrName The name of the attribute to update\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵattributeInterpolate2(attrName, prefix, v0, i0, v1, suffix, sanitizer, namespace) {\n        var index = getSelectedIndex();\n        var lView = getLView();\n        var interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            elementAttributeInternal(index, attrName, interpolatedValue, lView, sanitizer, namespace);\n        }\n        return ɵɵattributeInterpolate2;\n    }\n    /**\n     *\n     * Update an interpolated attribute on an element with 3 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 3 interpolated values in it:\n     *\n     * ```html\n     * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵattributeInterpolate3(\n     * 'title', 'prefix', v0, '-', v1, '-', v2, 'suffix');\n     * ```\n     *\n     * @param attrName The name of the attribute to update\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵattributeInterpolate3(attrName, prefix, v0, i0, v1, i1, v2, suffix, sanitizer, namespace) {\n        var index = getSelectedIndex();\n        var lView = getLView();\n        var interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            elementAttributeInternal(index, attrName, interpolatedValue, lView, sanitizer, namespace);\n        }\n        return ɵɵattributeInterpolate3;\n    }\n    /**\n     *\n     * Update an interpolated attribute on an element with 4 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 4 interpolated values in it:\n     *\n     * ```html\n     * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵattributeInterpolate4(\n     * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n     * ```\n     *\n     * @param attrName The name of the attribute to update\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param i2 Static value used for concatenation only.\n     * @param v3 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵattributeInterpolate4(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, sanitizer, namespace) {\n        var index = getSelectedIndex();\n        var lView = getLView();\n        var interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            elementAttributeInternal(index, attrName, interpolatedValue, lView, sanitizer, namespace);\n        }\n        return ɵɵattributeInterpolate4;\n    }\n    /**\n     *\n     * Update an interpolated attribute on an element with 5 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 5 interpolated values in it:\n     *\n     * ```html\n     * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵattributeInterpolate5(\n     * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n     * ```\n     *\n     * @param attrName The name of the attribute to update\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param i2 Static value used for concatenation only.\n     * @param v3 Value checked for change.\n     * @param i3 Static value used for concatenation only.\n     * @param v4 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵattributeInterpolate5(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, sanitizer, namespace) {\n        var index = getSelectedIndex();\n        var lView = getLView();\n        var interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            elementAttributeInternal(index, attrName, interpolatedValue, lView, sanitizer, namespace);\n        }\n        return ɵɵattributeInterpolate5;\n    }\n    /**\n     *\n     * Update an interpolated attribute on an element with 6 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 6 interpolated values in it:\n     *\n     * ```html\n     * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵattributeInterpolate6(\n     *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n     * ```\n     *\n     * @param attrName The name of the attribute to update\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param i2 Static value used for concatenation only.\n     * @param v3 Value checked for change.\n     * @param i3 Static value used for concatenation only.\n     * @param v4 Value checked for change.\n     * @param i4 Static value used for concatenation only.\n     * @param v5 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵattributeInterpolate6(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, sanitizer, namespace) {\n        var index = getSelectedIndex();\n        var lView = getLView();\n        var interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            elementAttributeInternal(index, attrName, interpolatedValue, lView, sanitizer, namespace);\n        }\n        return ɵɵattributeInterpolate6;\n    }\n    /**\n     *\n     * Update an interpolated attribute on an element with 7 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 7 interpolated values in it:\n     *\n     * ```html\n     * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵattributeInterpolate7(\n     *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n     * ```\n     *\n     * @param attrName The name of the attribute to update\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param i2 Static value used for concatenation only.\n     * @param v3 Value checked for change.\n     * @param i3 Static value used for concatenation only.\n     * @param v4 Value checked for change.\n     * @param i4 Static value used for concatenation only.\n     * @param v5 Value checked for change.\n     * @param i5 Static value used for concatenation only.\n     * @param v6 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵattributeInterpolate7(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, sanitizer, namespace) {\n        var index = getSelectedIndex();\n        var lView = getLView();\n        var interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            elementAttributeInternal(index, attrName, interpolatedValue, lView, sanitizer, namespace);\n        }\n        return ɵɵattributeInterpolate7;\n    }\n    /**\n     *\n     * Update an interpolated attribute on an element with 8 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 8 interpolated values in it:\n     *\n     * ```html\n     * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵattributeInterpolate8(\n     *  'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n     * ```\n     *\n     * @param attrName The name of the attribute to update\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param i2 Static value used for concatenation only.\n     * @param v3 Value checked for change.\n     * @param i3 Static value used for concatenation only.\n     * @param v4 Value checked for change.\n     * @param i4 Static value used for concatenation only.\n     * @param v5 Value checked for change.\n     * @param i5 Static value used for concatenation only.\n     * @param v6 Value checked for change.\n     * @param i6 Static value used for concatenation only.\n     * @param v7 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵattributeInterpolate8(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, sanitizer, namespace) {\n        var index = getSelectedIndex();\n        var lView = getLView();\n        var interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            elementAttributeInternal(index, attrName, interpolatedValue, lView, sanitizer, namespace);\n        }\n        return ɵɵattributeInterpolate8;\n    }\n    /**\n     * Update an interpolated attribute on an element with 8 or more bound values surrounded by text.\n     *\n     * Used when the number of interpolated values exceeds 7.\n     *\n     * ```html\n     * <div\n     *  title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵattributeInterpolateV(\n     *  'title', ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n     *  'suffix']);\n     * ```\n     *\n     * @param attrName The name of the attribute to update.\n     * @param values The a collection of values and the strings in-between those values, beginning with\n     * a string prefix and ending with a string suffix.\n     * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵattributeInterpolateV(attrName, values, sanitizer, namespace) {\n        var index = getSelectedIndex();\n        var lView = getLView();\n        var interpolated = interpolationV(lView, values);\n        if (interpolated !== NO_CHANGE) {\n            elementAttributeInternal(index, attrName, interpolated, lView, sanitizer, namespace);\n        }\n        return ɵɵattributeInterpolateV;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Synchronously perform change detection on a component (and possibly its sub-components).\n     *\n     * This function triggers change detection in a synchronous way on a component. There should\n     * be very little reason to call this function directly since a preferred way to do change\n     * detection is to {@link markDirty} the component and wait for the scheduler to call this method\n     * at some future point in time. This is because a single user action often results in many\n     * components being invalidated and calling change detection on each component synchronously\n     * would be inefficient. It is better to wait until all components are marked as dirty and\n     * then perform single change detection across all of the components\n     *\n     * @param component The component which the change detection should be performed on.\n     */\n    function detectChanges(component) {\n        var view = getComponentViewByInstance(component);\n        detectChangesInternal(view, component);\n    }\n    /**\n     * Mark the component as dirty (needing change detection).\n     *\n     * Marking a component dirty will schedule a change detection on this\n     * component at some point in the future. Marking an already dirty\n     * component as dirty is a noop. Only one outstanding change detection\n     * can be scheduled per component tree. (Two components bootstrapped with\n     * separate `renderComponent` will have separate schedulers)\n     *\n     * When the root component is bootstrapped with `renderComponent`, a scheduler\n     * can be provided.\n     *\n     * @param component Component to mark as dirty.\n     *\n     * @publicApi\n     */\n    function markDirty(component) {\n        ngDevMode && assertDefined(component, 'component');\n        var rootView = markViewDirty(getComponentViewByInstance(component));\n        ngDevMode && assertDefined(rootView[CONTEXT], 'rootContext should be defined');\n        scheduleTick(rootView[CONTEXT], 1 /* DetectChanges */);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function getLContainer(tNode, embeddedView) {\n        ngDevMode && assertLView(embeddedView);\n        var container = embeddedView[PARENT];\n        if (tNode.index === -1) {\n            // This is a dynamically created view inside a dynamic container.\n            // The parent isn't an LContainer if the embedded view hasn't been attached yet.\n            return isLContainer(container) ? container : null;\n        }\n        else {\n            ngDevMode && assertLContainer(container);\n            // This is a inline view node (e.g. embeddedViewStart)\n            return container;\n        }\n    }\n    /**\n     * Retrieves render parent for a given view.\n     * Might be null if a view is not yet attached to any container.\n     */\n    function getContainerRenderParent(tViewNode, view) {\n        var container = getLContainer(tViewNode, view);\n        return container ? nativeParentNode(view[RENDERER], container[NATIVE]) : null;\n    }\n    /**\n     * NOTE: for performance reasons, the possible actions are inlined within the function instead of\n     * being passed as an argument.\n     */\n    function executeActionOnElementOrContainer(action, renderer, parent, lNodeToHandle, beforeNode) {\n        ngDevMode && assertDefined(lNodeToHandle, '\\'lNodeToHandle\\' is undefined');\n        var lContainer;\n        var isComponent = false;\n        // We are expecting an RNode, but in the case of a component or LContainer the `RNode` is wrapped\n        // in an array which needs to be unwrapped. We need to know if it is a component and if\n        // it has LContainer so that we can process all of those cases appropriately.\n        if (isLContainer(lNodeToHandle)) {\n            lContainer = lNodeToHandle;\n        }\n        else if (isLView(lNodeToHandle)) {\n            isComponent = true;\n            ngDevMode && assertDefined(lNodeToHandle[HOST], 'HOST must be defined for a component LView');\n            lNodeToHandle = lNodeToHandle[HOST];\n        }\n        var rNode = unwrapRNode(lNodeToHandle);\n        ngDevMode && assertDomNode(rNode);\n        if (action === 0 /* Insert */) {\n            nativeInsertBefore(renderer, parent, rNode, beforeNode || null);\n        }\n        else if (action === 1 /* Detach */) {\n            nativeRemoveNode(renderer, rNode, isComponent);\n        }\n        else if (action === 2 /* Destroy */) {\n            ngDevMode && ngDevMode.rendererDestroyNode++;\n            renderer.destroyNode(rNode);\n        }\n        if (lContainer != null) {\n            executeActionOnContainer(renderer, action, lContainer, parent, beforeNode);\n        }\n    }\n    function createTextNode(value, renderer) {\n        return isProceduralRenderer(renderer) ? renderer.createText(renderStringify(value)) :\n            renderer.createTextNode(renderStringify(value));\n    }\n    function addRemoveViewFromContainer(lView, insertMode, beforeNode) {\n        var renderParent = getContainerRenderParent(lView[TVIEW].node, lView);\n        ngDevMode && assertNodeType(lView[TVIEW].node, 2 /* View */);\n        if (renderParent) {\n            var renderer = lView[RENDERER];\n            var action = insertMode ? 0 /* Insert */ : 1 /* Detach */;\n            executeActionOnView(renderer, action, lView, renderParent, beforeNode);\n        }\n    }\n    /**\n     * Detach a `LView` from the DOM by detaching its nodes.\n     *\n     * @param lView the `LView` to be detached.\n     */\n    function renderDetachView(lView) {\n        executeActionOnView(lView[RENDERER], 1 /* Detach */, lView, null, null);\n    }\n    /**\n     * Traverses down and up the tree of views and containers to remove listeners and\n     * call onDestroy callbacks.\n     *\n     * Notes:\n     *  - Because it's used for onDestroy calls, it needs to be bottom-up.\n     *  - Must process containers instead of their views to avoid splicing\n     *  when views are destroyed and re-added.\n     *  - Using a while loop because it's faster than recursion\n     *  - Destroy only called on movement to sibling or movement to parent (laterally or up)\n     *\n     *  @param rootView The view to destroy\n     */\n    function destroyViewTree(rootView) {\n        // If the view has no children, we can clean it up and return early.\n        var lViewOrLContainer = rootView[CHILD_HEAD];\n        if (!lViewOrLContainer) {\n            return cleanUpView(rootView);\n        }\n        while (lViewOrLContainer) {\n            var next = null;\n            if (isLView(lViewOrLContainer)) {\n                // If LView, traverse down to child.\n                next = lViewOrLContainer[CHILD_HEAD];\n            }\n            else {\n                ngDevMode && assertLContainer(lViewOrLContainer);\n                // If container, traverse down to its first LView.\n                var firstView = lViewOrLContainer[CONTAINER_HEADER_OFFSET];\n                if (firstView)\n                    next = firstView;\n            }\n            if (!next) {\n                // Only clean up view when moving to the side or up, as destroy hooks\n                // should be called in order from the bottom up.\n                while (lViewOrLContainer && !lViewOrLContainer[NEXT] && lViewOrLContainer !== rootView) {\n                    cleanUpView(lViewOrLContainer);\n                    lViewOrLContainer = getParentState(lViewOrLContainer, rootView);\n                }\n                cleanUpView(lViewOrLContainer || rootView);\n                next = lViewOrLContainer && lViewOrLContainer[NEXT];\n            }\n            lViewOrLContainer = next;\n        }\n    }\n    /**\n     * Inserts a view into a container.\n     *\n     * This adds the view to the container's array of active views in the correct\n     * position. It also adds the view's elements to the DOM if the container isn't a\n     * root node of another view (in that case, the view's elements will be added when\n     * the container's parent view is added later).\n     *\n     * @param lView The view to insert\n     * @param lContainer The container into which the view should be inserted\n     * @param index Which index in the container to insert the child view into\n     */\n    function insertView(lView, lContainer, index) {\n        ngDevMode && assertLView(lView);\n        ngDevMode && assertLContainer(lContainer);\n        var indexInContainer = CONTAINER_HEADER_OFFSET + index;\n        var containerLength = lContainer.length;\n        if (index > 0) {\n            // This is a new view, we need to add it to the children.\n            lContainer[indexInContainer - 1][NEXT] = lView;\n        }\n        if (index < containerLength - CONTAINER_HEADER_OFFSET) {\n            lView[NEXT] = lContainer[indexInContainer];\n            lContainer.splice(CONTAINER_HEADER_OFFSET + index, 0, lView);\n        }\n        else {\n            lContainer.push(lView);\n            lView[NEXT] = null;\n        }\n        lView[PARENT] = lContainer;\n        // Notify query that a new view has been added\n        if (lView[QUERIES]) {\n            lView[QUERIES].insertView(index);\n        }\n        // Sets the attached flag\n        lView[FLAGS] |= 128 /* Attached */;\n    }\n    /**\n     * Detaches a view from a container.\n     *\n     * This method splices the view from the container's array of active views. It also\n     * removes the view's elements from the DOM.\n     *\n     * @param lContainer The container from which to detach a view\n     * @param removeIndex The index of the view to detach\n     * @returns Detached LView instance.\n     */\n    function detachView(lContainer, removeIndex) {\n        if (lContainer.length <= CONTAINER_HEADER_OFFSET)\n            return;\n        var indexInContainer = CONTAINER_HEADER_OFFSET + removeIndex;\n        var viewToDetach = lContainer[indexInContainer];\n        if (viewToDetach) {\n            if (removeIndex > 0) {\n                lContainer[indexInContainer - 1][NEXT] = viewToDetach[NEXT];\n            }\n            lContainer.splice(CONTAINER_HEADER_OFFSET + removeIndex, 1);\n            addRemoveViewFromContainer(viewToDetach, false);\n            if ((viewToDetach[FLAGS] & 128 /* Attached */) &&\n                !(viewToDetach[FLAGS] & 256 /* Destroyed */) && viewToDetach[QUERIES]) {\n                viewToDetach[QUERIES].removeView();\n            }\n            viewToDetach[PARENT] = null;\n            viewToDetach[NEXT] = null;\n            // Unsets the attached flag\n            viewToDetach[FLAGS] &= ~128 /* Attached */;\n        }\n        return viewToDetach;\n    }\n    /**\n     * Removes a view from a container, i.e. detaches it and then destroys the underlying LView.\n     *\n     * @param lContainer The container from which to remove a view\n     * @param removeIndex The index of the view to remove\n     */\n    function removeView(lContainer, removeIndex) {\n        var detachedView = detachView(lContainer, removeIndex);\n        detachedView && destroyLView(detachedView);\n    }\n    /**\n     * A standalone function which destroys an LView,\n     * conducting cleanup (e.g. removing listeners, calling onDestroys).\n     *\n     * @param lView The view to be destroyed.\n     */\n    function destroyLView(lView) {\n        if (!(lView[FLAGS] & 256 /* Destroyed */)) {\n            var renderer = lView[RENDERER];\n            if (isProceduralRenderer(renderer) && renderer.destroyNode) {\n                executeActionOnView(renderer, 2 /* Destroy */, lView, null, null);\n            }\n            destroyViewTree(lView);\n        }\n    }\n    /**\n     * Determines which LViewOrLContainer to jump to when traversing back up the\n     * tree in destroyViewTree.\n     *\n     * Normally, the view's parent LView should be checked, but in the case of\n     * embedded views, the container (which is the view node's parent, but not the\n     * LView's parent) needs to be checked for a possible next property.\n     *\n     * @param lViewOrLContainer The LViewOrLContainer for which we need a parent state\n     * @param rootView The rootView, so we don't propagate too far up the view tree\n     * @returns The correct parent LViewOrLContainer\n     */\n    function getParentState(lViewOrLContainer, rootView) {\n        var tNode;\n        if (isLView(lViewOrLContainer) && (tNode = lViewOrLContainer[T_HOST]) &&\n            tNode.type === 2 /* View */) {\n            // if it's an embedded view, the state needs to go up to the container, in case the\n            // container has a next\n            return getLContainer(tNode, lViewOrLContainer);\n        }\n        else {\n            // otherwise, use parent view for containers or component views\n            return lViewOrLContainer[PARENT] === rootView ? null : lViewOrLContainer[PARENT];\n        }\n    }\n    /**\n     * Calls onDestroys hooks for all directives and pipes in a given view and then removes all\n     * listeners. Listeners are removed as the last step so events delivered in the onDestroys hooks\n     * can be propagated to @Output listeners.\n     *\n     * @param view The LView to clean up\n     */\n    function cleanUpView(view) {\n        if (isLView(view) && !(view[FLAGS] & 256 /* Destroyed */)) {\n            // Usually the Attached flag is removed when the view is detached from its parent, however\n            // if it's a root view, the flag won't be unset hence why we're also removing on destroy.\n            view[FLAGS] &= ~128 /* Attached */;\n            // Mark the LView as destroyed *before* executing the onDestroy hooks. An onDestroy hook\n            // runs arbitrary user code, which could include its own `viewRef.destroy()` (or similar). If\n            // We don't flag the view as destroyed before the hooks, this could lead to an infinite loop.\n            // This also aligns with the ViewEngine behavior. It also means that the onDestroy hook is\n            // really more of an \"afterDestroy\" hook if you think about it.\n            view[FLAGS] |= 256 /* Destroyed */;\n            executeOnDestroys(view);\n            removeListeners(view);\n            var hostTNode = view[T_HOST];\n            // For component views only, the local renderer is destroyed as clean up time.\n            if (hostTNode && hostTNode.type === 3 /* Element */ && isProceduralRenderer(view[RENDERER])) {\n                ngDevMode && ngDevMode.rendererDestroy++;\n                view[RENDERER].destroy();\n            }\n            // For embedded views still attached to a container: remove query result from this view.\n            if (viewAttachedToContainer(view) && view[QUERIES]) {\n                view[QUERIES].removeView();\n            }\n        }\n    }\n    /** Removes listeners and unsubscribes from output subscriptions */\n    function removeListeners(lView) {\n        var tCleanup = lView[TVIEW].cleanup;\n        if (tCleanup !== null) {\n            var lCleanup = lView[CLEANUP];\n            for (var i = 0; i < tCleanup.length - 1; i += 2) {\n                if (typeof tCleanup[i] === 'string') {\n                    // This is a native DOM listener\n                    var idxOrTargetGetter = tCleanup[i + 1];\n                    var target = typeof idxOrTargetGetter === 'function' ?\n                        idxOrTargetGetter(lView) :\n                        unwrapRNode(lView[idxOrTargetGetter]);\n                    var listener = lCleanup[tCleanup[i + 2]];\n                    var useCaptureOrSubIdx = tCleanup[i + 3];\n                    if (typeof useCaptureOrSubIdx === 'boolean') {\n                        // native DOM listener registered with Renderer3\n                        target.removeEventListener(tCleanup[i], listener, useCaptureOrSubIdx);\n                    }\n                    else {\n                        if (useCaptureOrSubIdx >= 0) {\n                            // unregister\n                            lCleanup[useCaptureOrSubIdx]();\n                        }\n                        else {\n                            // Subscription\n                            lCleanup[-useCaptureOrSubIdx].unsubscribe();\n                        }\n                    }\n                    i += 2;\n                }\n                else {\n                    // This is a cleanup function that is grouped with the index of its context\n                    var context = lCleanup[tCleanup[i + 1]];\n                    tCleanup[i].call(context);\n                }\n            }\n            lView[CLEANUP] = null;\n        }\n    }\n    /** Calls onDestroy hooks for this view */\n    function executeOnDestroys(view) {\n        var tView = view[TVIEW];\n        var destroyHooks;\n        if (tView != null && (destroyHooks = tView.destroyHooks) != null) {\n            for (var i = 0; i < destroyHooks.length; i += 2) {\n                var context = view[destroyHooks[i]];\n                // Only call the destroy hook if the context has been requested.\n                if (!(context instanceof NodeInjectorFactory)) {\n                    destroyHooks[i + 1].call(context);\n                }\n            }\n        }\n    }\n    /**\n     * Returns a native element if a node can be inserted into the given parent.\n     *\n     * There are two reasons why we may not be able to insert a element immediately.\n     * - Projection: When creating a child content element of a component, we have to skip the\n     *   insertion because the content of a component will be projected.\n     *   `<component><content>delayed due to projection</content></component>`\n     * - Parent container is disconnected: This can happen when we are inserting a view into\n     *   parent container, which itself is disconnected. For example the parent container is part\n     *   of a View which has not be inserted or is made for projection but has not been inserted\n     *   into destination.\n     */\n    function getRenderParent(tNode, currentView) {\n        // Nodes of the top-most view can be inserted eagerly.\n        if (isRootView(currentView)) {\n            return nativeParentNode(currentView[RENDERER], getNativeByTNode(tNode, currentView));\n        }\n        // Skip over element and ICU containers as those are represented by a comment node and\n        // can't be used as a render parent.\n        var parent = getHighestElementOrICUContainer(tNode);\n        var renderParent = parent.parent;\n        // If the parent is null, then we are inserting across views: either into an embedded view or a\n        // component view.\n        if (renderParent == null) {\n            var hostTNode = currentView[T_HOST];\n            if (hostTNode.type === 2 /* View */) {\n                // We are inserting a root element of an embedded view We might delay insertion of children\n                // for a given view if it is disconnected. This might happen for 2 main reasons:\n                // - view is not inserted into any container(view was created but not inserted yet)\n                // - view is inserted into a container but the container itself is not inserted into the DOM\n                // (container might be part of projection or child of a view that is not inserted yet).\n                // In other words we can insert children of a given view if this view was inserted into a\n                // container and the container itself has its render parent determined.\n                return getContainerRenderParent(hostTNode, currentView);\n            }\n            else {\n                // We are inserting a root element of the component view into the component host element and\n                // it should always be eager.\n                return getHostNative(currentView);\n            }\n        }\n        else {\n            var isIcuCase = parent && parent.type === 5 /* IcuContainer */;\n            // If the parent of this node is an ICU container, then it is represented by comment node and we\n            // need to use it as an anchor. If it is projected then its direct parent node is the renderer.\n            if (isIcuCase && parent.flags & 2 /* isProjected */) {\n                return getNativeByTNode(parent, currentView).parentNode;\n            }\n            ngDevMode && assertNodeType(renderParent, 3 /* Element */);\n            if (renderParent.flags & 1 /* isComponent */ && !isIcuCase) {\n                var tData = currentView[TVIEW].data;\n                var tNode_1 = tData[renderParent.index];\n                var encapsulation = tData[tNode_1.directiveStart].encapsulation;\n                // We've got a parent which is an element in the current view. We just need to verify if the\n                // parent element is not a component. Component's content nodes are not inserted immediately\n                // because they will be projected, and so doing insert at this point would be wasteful.\n                // Since the projection would then move it to its final destination. Note that we can't\n                // make this assumption when using the Shadow DOM, because the native projection placeholders\n                // (<content> or <slot>) have to be in place as elements are being inserted.\n                if (encapsulation !== exports.ViewEncapsulation.ShadowDom &&\n                    encapsulation !== exports.ViewEncapsulation.Native) {\n                    return null;\n                }\n            }\n            return getNativeByTNode(renderParent, currentView);\n        }\n    }\n    /**\n     * Gets the native host element for a given view. Will return null if the current view does not have\n     * a host element.\n     */\n    function getHostNative(currentView) {\n        ngDevMode && assertLView(currentView);\n        var hostTNode = currentView[T_HOST];\n        return hostTNode && hostTNode.type === 3 /* Element */ ?\n            getNativeByTNode(hostTNode, getLViewParent(currentView)) :\n            null;\n    }\n    /**\n     * Inserts a native node before another native node for a given parent using {@link Renderer3}.\n     * This is a utility function that can be used when native nodes were determined - it abstracts an\n     * actual renderer being used.\n     */\n    function nativeInsertBefore(renderer, parent, child, beforeNode) {\n        ngDevMode && ngDevMode.rendererInsertBefore++;\n        if (isProceduralRenderer(renderer)) {\n            renderer.insertBefore(parent, child, beforeNode);\n        }\n        else {\n            parent.insertBefore(child, beforeNode, true);\n        }\n    }\n    function nativeAppendChild(renderer, parent, child) {\n        ngDevMode && ngDevMode.rendererAppendChild++;\n        if (isProceduralRenderer(renderer)) {\n            renderer.appendChild(parent, child);\n        }\n        else {\n            parent.appendChild(child);\n        }\n    }\n    function nativeAppendOrInsertBefore(renderer, parent, child, beforeNode) {\n        if (beforeNode !== null) {\n            nativeInsertBefore(renderer, parent, child, beforeNode);\n        }\n        else {\n            nativeAppendChild(renderer, parent, child);\n        }\n    }\n    /** Removes a node from the DOM given its native parent. */\n    function nativeRemoveChild(renderer, parent, child, isHostElement) {\n        if (isProceduralRenderer(renderer)) {\n            renderer.removeChild(parent, child, isHostElement);\n        }\n        else {\n            parent.removeChild(child);\n        }\n    }\n    /**\n     * Returns a native parent of a given native node.\n     */\n    function nativeParentNode(renderer, node) {\n        return (isProceduralRenderer(renderer) ? renderer.parentNode(node) : node.parentNode);\n    }\n    /**\n     * Returns a native sibling of a given native node.\n     */\n    function nativeNextSibling(renderer, node) {\n        return isProceduralRenderer(renderer) ? renderer.nextSibling(node) : node.nextSibling;\n    }\n    /**\n     * Finds a native \"anchor\" node for cases where we can't append a native child directly\n     * (`appendChild`) and need to use a reference (anchor) node for the `insertBefore` operation.\n     * @param parentTNode\n     * @param lView\n     */\n    function getNativeAnchorNode(parentTNode, lView) {\n        if (parentTNode.type === 2 /* View */) {\n            var lContainer = getLContainer(parentTNode, lView);\n            var index = lContainer.indexOf(lView, CONTAINER_HEADER_OFFSET) - CONTAINER_HEADER_OFFSET;\n            return getBeforeNodeForView(index, lContainer);\n        }\n        else if (parentTNode.type === 4 /* ElementContainer */ ||\n            parentTNode.type === 5 /* IcuContainer */) {\n            return getNativeByTNode(parentTNode, lView);\n        }\n        return null;\n    }\n    /**\n     * Appends the `child` native node (or a collection of nodes) to the `parent`.\n     *\n     * The element insertion might be delayed {@link canInsertNativeNode}.\n     *\n     * @param childEl The native child (or children) that should be appended\n     * @param childTNode The TNode of the child element\n     * @param currentView The current LView\n     * @returns Whether or not the child was appended\n     */\n    function appendChild(childEl, childTNode, currentView) {\n        var e_1, _a;\n        var renderParent = getRenderParent(childTNode, currentView);\n        if (renderParent != null) {\n            var renderer = currentView[RENDERER];\n            var parentTNode = childTNode.parent || currentView[T_HOST];\n            var anchorNode = getNativeAnchorNode(parentTNode, currentView);\n            if (Array.isArray(childEl)) {\n                try {\n                    for (var childEl_1 = __values(childEl), childEl_1_1 = childEl_1.next(); !childEl_1_1.done; childEl_1_1 = childEl_1.next()) {\n                        var nativeNode = childEl_1_1.value;\n                        nativeAppendOrInsertBefore(renderer, renderParent, nativeNode, anchorNode);\n                    }\n                }\n                catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                finally {\n                    try {\n                        if (childEl_1_1 && !childEl_1_1.done && (_a = childEl_1.return)) _a.call(childEl_1);\n                    }\n                    finally { if (e_1) throw e_1.error; }\n                }\n            }\n            else {\n                nativeAppendOrInsertBefore(renderer, renderParent, childEl, anchorNode);\n            }\n        }\n    }\n    /**\n     * Gets the top-level element or an ICU container if those containers are nested.\n     *\n     * @param tNode The starting TNode for which we should skip element and ICU containers\n     * @returns The TNode of the highest level ICU container or element container\n     */\n    function getHighestElementOrICUContainer(tNode) {\n        while (tNode.parent != null && (tNode.parent.type === 4 /* ElementContainer */ ||\n            tNode.parent.type === 5 /* IcuContainer */)) {\n            tNode = tNode.parent;\n        }\n        return tNode;\n    }\n    function getBeforeNodeForView(viewIndexInContainer, lContainer) {\n        var nextViewIndex = CONTAINER_HEADER_OFFSET + viewIndexInContainer + 1;\n        if (nextViewIndex < lContainer.length) {\n            var lView = lContainer[nextViewIndex];\n            ngDevMode && assertDefined(lView[T_HOST], 'Missing Host TNode');\n            var tViewNodeChild = lView[T_HOST].child;\n            return tViewNodeChild !== null ? getNativeByTNodeOrNull(tViewNodeChild, lView) :\n                lContainer[NATIVE];\n        }\n        else {\n            return lContainer[NATIVE];\n        }\n    }\n    /**\n     * Removes a native node itself using a given renderer. To remove the node we are looking up its\n     * parent from the native tree as not all platforms / browsers support the equivalent of\n     * node.remove().\n     *\n     * @param renderer A renderer to be used\n     * @param rNode The native node that should be removed\n     * @param isHostElement A flag indicating if a node to be removed is a host of a component.\n     */\n    function nativeRemoveNode(renderer, rNode, isHostElement) {\n        var nativeParent = nativeParentNode(renderer, rNode);\n        if (nativeParent) {\n            nativeRemoveChild(renderer, nativeParent, rNode, isHostElement);\n        }\n    }\n    /**\n     * Appends nodes to a target projection place. Nodes to insert were previously re-distribution and\n     * stored on a component host level.\n     * @param lView A LView where nodes are inserted (target LView)\n     * @param tProjectionNode A projection node where previously re-distribution should be appended\n     * (target insertion place)\n     * @param selectorIndex A bucket from where nodes to project should be taken\n     * @param componentView A where projectable nodes were initially created (source view)\n     */\n    function appendProjectedNodes(lView, tProjectionNode, selectorIndex, componentView) {\n        var projectedView = componentView[PARENT];\n        var componentNode = componentView[T_HOST];\n        var nodeToProject = componentNode.projection[selectorIndex];\n        if (Array.isArray(nodeToProject)) {\n            appendChild(nodeToProject, tProjectionNode, lView);\n        }\n        else {\n            while (nodeToProject) {\n                if (!(nodeToProject.flags & 32 /* isDetached */)) {\n                    if (nodeToProject.type === 1 /* Projection */) {\n                        appendProjectedNodes(lView, tProjectionNode, nodeToProject.projection, findComponentView(projectedView));\n                    }\n                    else {\n                        // This flag must be set now or we won't know that this node is projected\n                        // if the nodes are inserted into a container later.\n                        nodeToProject.flags |= 2 /* isProjected */;\n                        appendProjectedNode(nodeToProject, tProjectionNode, lView, projectedView);\n                    }\n                }\n                nodeToProject = nodeToProject.projectionNext;\n            }\n        }\n    }\n    /**\n     * Loops over all children of a TNode container and appends them to the DOM\n     *\n     * @param ngContainerChildTNode The first child of the TNode container\n     * @param tProjectionNode The projection (ng-content) TNode\n     * @param currentView Current LView\n     * @param projectionView Projection view (view above current)\n     */\n    function appendProjectedChildren(ngContainerChildTNode, tProjectionNode, currentView, projectionView) {\n        while (ngContainerChildTNode) {\n            appendProjectedNode(ngContainerChildTNode, tProjectionNode, currentView, projectionView);\n            ngContainerChildTNode = ngContainerChildTNode.next;\n        }\n    }\n    /**\n     * Appends a projected node to the DOM, or in the case of a projected container,\n     * appends the nodes from all of the container's active views to the DOM.\n     *\n     * @param projectedTNode The TNode to be projected\n     * @param tProjectionNode The projection (ng-content) TNode\n     * @param currentView Current LView\n     * @param projectionView Projection view (view above current)\n     */\n    function appendProjectedNode(projectedTNode, tProjectionNode, currentView, projectionView) {\n        var native = getNativeByTNode(projectedTNode, projectionView);\n        appendChild(native, tProjectionNode, currentView);\n        // the projected contents are processed while in the shadow view (which is the currentView)\n        // therefore we need to extract the view where the host element lives since it's the\n        // logical container of the content projected views\n        attachPatchData(native, projectionView);\n        var nodeOrContainer = projectionView[projectedTNode.index];\n        if (projectedTNode.type === 0 /* Container */) {\n            // The node we are adding is a container and we are adding it to an element which\n            // is not a component (no more re-projection).\n            // Alternatively a container is projected at the root of a component's template\n            // and can't be re-projected (as not content of any component).\n            // Assign the final projection location in those cases.\n            for (var i = CONTAINER_HEADER_OFFSET; i < nodeOrContainer.length; i++) {\n                addRemoveViewFromContainer(nodeOrContainer[i], true, nodeOrContainer[NATIVE]);\n            }\n        }\n        else if (projectedTNode.type === 5 /* IcuContainer */) {\n            // The node we are adding is an ICU container which is why we also need to project all the\n            // children nodes that might have been created previously and are linked to this anchor\n            var ngContainerChildTNode = projectedTNode.child;\n            appendProjectedChildren(ngContainerChildTNode, ngContainerChildTNode, projectionView, projectionView);\n        }\n        else {\n            if (projectedTNode.type === 4 /* ElementContainer */) {\n                appendProjectedChildren(projectedTNode.child, tProjectionNode, currentView, projectionView);\n            }\n            if (isLContainer(nodeOrContainer)) {\n                appendChild(nodeOrContainer[NATIVE], tProjectionNode, currentView);\n            }\n        }\n    }\n    /**\n     * `executeActionOnView` performs an operation on the view as specified in `action` (insert, detach,\n     * destroy)\n     *\n     * Inserting a view without projection or containers at top level is simple. Just iterate over the\n     * root nodes of the View, and for each node perform the `action`.\n     *\n     * Things get more complicated with containers and projections. That is because coming across:\n     * - Container: implies that we have to insert/remove/destroy the views of that container as well\n     *              which in turn can have their own Containers at the View roots.\n     * - Projection: implies that we have to insert/remove/destroy the nodes of the projection. The\n     *               complication is that the nodes we are projecting can themselves have Containers\n     *               or other Projections.\n     *\n     * As you can see this is a very recursive problem. While the recursive implementation is not the\n     * most efficient one, trying to unroll the nodes non-recursively results in very complex code that\n     * is very hard (to maintain). We are sacrificing a bit of performance for readability using a\n     * recursive implementation.\n     *\n     * @param renderer Renderer to use\n     * @param action action to perform (insert, detach, destroy)\n     * @param lView The LView which needs to be inserted, detached, destroyed.\n     * @param renderParent parent DOM element for insertion/removal.\n     * @param beforeNode Before which node the insertions should happen.\n     */\n    function executeActionOnView(renderer, action, lView, renderParent, beforeNode) {\n        var tView = lView[TVIEW];\n        ngDevMode && assertNodeType(tView.node, 2 /* View */);\n        var viewRootTNode = tView.node.child;\n        while (viewRootTNode !== null) {\n            executeActionOnNode(renderer, action, lView, viewRootTNode, renderParent, beforeNode);\n            viewRootTNode = viewRootTNode.next;\n        }\n    }\n    /**\n     * `executeActionOnProjection` performs an operation on the projection specified by `action`\n     * (insert, detach, destroy).\n     *\n     * Inserting a projection requires us to locate the projected nodes from the parent component. The\n     * complication is that those nodes themselves could be re-projected from their parent component.\n     *\n     * @param renderer Renderer to use\n     * @param action action to perform (insert, detach, destroy)\n     * @param lView The LView which needs to be inserted, detached, destroyed.\n     * @param tProjectionNode projection TNode to process\n     * @param renderParent parent DOM element for insertion/removal.\n     * @param beforeNode Before which node the insertions should happen.\n     */\n    function executeActionOnProjection(renderer, action, lView, tProjectionNode, renderParent, beforeNode) {\n        var componentLView = findComponentView(lView);\n        var componentNode = componentLView[T_HOST];\n        ngDevMode && assertDefined(componentNode.projection, 'Element nodes for which projection is processed must have projection defined.');\n        var nodeToProject = componentNode.projection[tProjectionNode.projection];\n        if (nodeToProject !== undefined) {\n            if (Array.isArray(nodeToProject)) {\n                for (var i = 0; i < nodeToProject.length; i++) {\n                    var rNode = nodeToProject[i];\n                    ngDevMode && assertDomNode(rNode);\n                    executeActionOnElementOrContainer(action, renderer, renderParent, rNode, beforeNode);\n                }\n            }\n            else {\n                var projectionTNode = nodeToProject;\n                var projectedComponentLView = componentLView[PARENT];\n                while (projectionTNode !== null) {\n                    executeActionOnNode(renderer, action, projectedComponentLView, projectionTNode, renderParent, beforeNode);\n                    projectionTNode = projectionTNode.projectionNext;\n                }\n            }\n        }\n    }\n    /**\n     * `executeActionOnContainer` performs an operation on the container and its views as specified by\n     * `action` (insert, detach, destroy)\n     *\n     * Inserting a Container is complicated by the fact that the container may have Views which\n     * themselves have containers or projections.\n     *\n     * @param renderer Renderer to use\n     * @param action action to perform (insert, detach, destroy)\n     * @param lContainer The LContainer which needs to be inserted, detached, destroyed.\n     * @param renderParent parent DOM element for insertion/removal.\n     * @param beforeNode Before which node the insertions should happen.\n     */\n    function executeActionOnContainer(renderer, action, lContainer, renderParent, beforeNode) {\n        ngDevMode && assertLContainer(lContainer);\n        var anchor = lContainer[NATIVE]; // LContainer has its own before node.\n        var native = unwrapRNode(lContainer);\n        // An LContainer can be created dynamically on any node by injecting ViewContainerRef.\n        // Asking for a ViewContainerRef on an element will result in a creation of a separate anchor node\n        // (comment in the DOM) that will be different from the LContainer's host node. In this particular\n        // case we need to execute action on 2 nodes:\n        // - container's host node (this is done in the executeNodeAction)\n        // - container's host node (this is done here)\n        if (anchor !== native) {\n            executeActionOnElementOrContainer(action, renderer, renderParent, anchor, beforeNode);\n        }\n        for (var i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n            var lView = lContainer[i];\n            executeActionOnView(renderer, action, lView, renderParent, anchor);\n        }\n    }\n    /**\n     * `executeActionOnElementContainerOrIcuContainer` performs an operation on the ng-container node\n     * and its child nodes as specified by the `action` (insert, detach, destroy).\n     *\n     * @param renderer Renderer to use\n     * @param action action to perform (insert, detach, destroy)\n     * @param lView The LView which needs to be inserted, detached, destroyed.\n     * @param tNode The TNode associated with the `ElementContainer` or `IcuContainer`.\n     * @param renderParent parent DOM element for insertion/removal.\n     * @param beforeNode Before which node the insertions should happen.\n     */\n    function executeActionOnElementContainerOrIcuContainer(renderer, action, lView, tNode, renderParent, beforeNode) {\n        var node = lView[tNode.index];\n        executeActionOnElementOrContainer(action, renderer, renderParent, node, beforeNode);\n        var childTNode = tNode.child;\n        while (childTNode) {\n            executeActionOnNode(renderer, action, lView, childTNode, renderParent, beforeNode);\n            childTNode = childTNode.next;\n        }\n    }\n    function executeActionOnNode(renderer, action, lView, tNode, renderParent, beforeNode) {\n        var nodeType = tNode.type;\n        if (nodeType === 4 /* ElementContainer */ || nodeType === 5 /* IcuContainer */) {\n            executeActionOnElementContainerOrIcuContainer(renderer, action, lView, tNode, renderParent, beforeNode);\n        }\n        else if (nodeType === 1 /* Projection */) {\n            executeActionOnProjection(renderer, action, lView, tNode, renderParent, beforeNode);\n        }\n        else {\n            ngDevMode && assertNodeOfPossibleTypes(tNode, 3 /* Element */, 0 /* Container */);\n            executeActionOnElementOrContainer(action, renderer, renderParent, lView[tNode.index], beforeNode);\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Creates an LContainer for inline views, e.g.\n     *\n     * % if (showing) {\n     *   <div></div>\n     * % }\n     *\n     * @param index The index of the container in the data array\n     *\n     * @codeGenApi\n     */\n    function ɵɵcontainer(index) {\n        var lView = getLView();\n        var tNode = containerInternal(lView, index, null, null);\n        if (lView[TVIEW].firstTemplatePass) {\n            tNode.tViews = [];\n        }\n        addTContainerToQueries(lView, tNode);\n        setIsNotParent();\n    }\n    /**\n     * Creates an LContainer for an ng-template (dynamically-inserted view), e.g.\n     *\n     * <ng-template #foo>\n     *    <div></div>\n     * </ng-template>\n     *\n     * @param index The index of the container in the data array\n     * @param templateFn Inline template\n     * @param consts The number of nodes, local refs, and pipes for this template\n     * @param vars The number of bindings for this template\n     * @param tagName The name of the container element, if applicable\n     * @param attrs The attrs attached to the container, if applicable\n     * @param localRefs A set of local reference bindings on the element.\n     * @param localRefExtractor A function which extracts local-refs values from the template.\n     *        Defaults to the current element associated with the local-ref.\n     *\n     * @codeGenApi\n     */\n    function ɵɵtemplate(index, templateFn, consts, vars, tagName, attrs, localRefs, localRefExtractor) {\n        var lView = getLView();\n        var tView = lView[TVIEW];\n        // TODO: consider a separate node type for templates\n        var tContainerNode = containerInternal(lView, index, tagName || null, attrs || null);\n        if (tView.firstTemplatePass) {\n            tContainerNode.tViews = createTView(-1, templateFn, consts, vars, tView.directiveRegistry, tView.pipeRegistry, null, null);\n        }\n        createDirectivesAndLocals(tView, lView, tContainerNode, localRefs, localRefExtractor);\n        addTContainerToQueries(lView, tContainerNode);\n        attachPatchData(getNativeByTNode(tContainerNode, lView), lView);\n        registerPostOrderHooks(tView, tContainerNode);\n        setIsNotParent();\n    }\n    /**\n     * Sets a container up to receive views.\n     *\n     * @param index The index of the container in the data array\n     *\n     * @codeGenApi\n     */\n    function ɵɵcontainerRefreshStart(index) {\n        var lView = getLView();\n        var tView = lView[TVIEW];\n        var previousOrParentTNode = loadInternal(tView.data, index);\n        ngDevMode && assertNodeType(previousOrParentTNode, 0 /* Container */);\n        setPreviousOrParentTNode(previousOrParentTNode, true);\n        lView[index + HEADER_OFFSET][ACTIVE_INDEX] = 0;\n        // We need to execute init hooks here so ngOnInit hooks are called in top level views\n        // before they are called in embedded views (for backwards compatibility).\n        executePreOrderHooks(lView, tView, getCheckNoChangesMode(), undefined);\n    }\n    /**\n     * Marks the end of the LContainer.\n     *\n     * Marking the end of LContainer is the time when to child views get inserted or removed.\n     *\n     * @codeGenApi\n     */\n    function ɵɵcontainerRefreshEnd() {\n        var previousOrParentTNode = getPreviousOrParentTNode();\n        if (getIsParent()) {\n            setIsNotParent();\n        }\n        else {\n            ngDevMode && assertNodeType(previousOrParentTNode, 2 /* View */);\n            ngDevMode && assertHasParent(previousOrParentTNode);\n            previousOrParentTNode = previousOrParentTNode.parent;\n            setPreviousOrParentTNode(previousOrParentTNode, false);\n        }\n        ngDevMode && assertNodeType(previousOrParentTNode, 0 /* Container */);\n        var lContainer = getLView()[previousOrParentTNode.index];\n        var nextIndex = lContainer[ACTIVE_INDEX];\n        // remove extra views at the end of the container\n        while (nextIndex < lContainer.length - CONTAINER_HEADER_OFFSET) {\n            removeView(lContainer, nextIndex);\n        }\n    }\n    /**\n    * Reporting a TContainer node queries is a 2-step process as we need to:\n    * - check if the container node itself is matching (query might match a <ng-template> node);\n    * - prepare room for nodes from views that might be created based on the TemplateRef linked to this\n    * container.\n    *\n    * Those 2 operations need to happen in the specific order (match the container node itself, then\n    * prepare space for nodes from views).\n    */\n    function addTContainerToQueries(lView, tContainerNode) {\n        var queries = lView[QUERIES];\n        if (queries) {\n            var lContainer = lView[tContainerNode.index];\n            if (lContainer[QUERIES]) {\n                // Query container should only exist if it was created through a dynamic view\n                // in a directive constructor. In this case, we must splice the template\n                // matches in before the view matches to ensure query results in embedded views\n                // don't clobber query results on the template node itself.\n                queries.insertNodeBeforeViews(tContainerNode);\n            }\n            else {\n                queries.addNode(tContainerNode);\n                lContainer[QUERIES] = queries.container();\n            }\n        }\n    }\n    function containerInternal(lView, nodeIndex, tagName, attrs) {\n        ngDevMode && assertEqual(lView[BINDING_INDEX], lView[TVIEW].bindingStartIndex, 'container nodes should be created before any bindings');\n        var adjustedIndex = nodeIndex + HEADER_OFFSET;\n        ngDevMode && assertDataInRange(lView, nodeIndex + HEADER_OFFSET);\n        ngDevMode && ngDevMode.rendererCreateComment++;\n        var comment = lView[adjustedIndex] =\n            lView[RENDERER].createComment(ngDevMode ? 'container' : '');\n        var tNode = getOrCreateTNode(lView[TVIEW], lView[T_HOST], nodeIndex, 0 /* Container */, tagName, attrs);\n        var lContainer = lView[adjustedIndex] = createLContainer(comment, lView, comment, tNode);\n        appendChild(comment, tNode, lView);\n        // Containers are added to the current view tree instead of their embedded views\n        // because views can be removed and re-inserted.\n        addToViewTree(lView, lContainer);\n        ngDevMode && assertNodeType(getPreviousOrParentTNode(), 0 /* Container */);\n        return tNode;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Store a value in the `data` at a given `index`. */\n    function store(index, value) {\n        var lView = getLView();\n        var tView = lView[TVIEW];\n        // We don't store any static data for local variables, so the first time\n        // we see the template, we should store as null to avoid a sparse array\n        var adjustedIndex = index + HEADER_OFFSET;\n        if (adjustedIndex >= tView.data.length) {\n            tView.data[adjustedIndex] = null;\n            tView.blueprint[adjustedIndex] = null;\n        }\n        lView[adjustedIndex] = value;\n    }\n    /**\n     * Retrieves a local reference from the current contextViewData.\n     *\n     * If the reference to retrieve is in a parent view, this instruction is used in conjunction\n     * with a nextContext() call, which walks up the tree and updates the contextViewData instance.\n     *\n     * @param index The index of the local ref in contextViewData.\n     *\n     * @codeGenApi\n     */\n    function ɵɵreference(index) {\n        var contextLView = getContextLView();\n        return loadInternal(contextLView, index);\n    }\n    /**\n     * Retrieves a value from current `viewData`.\n     *\n     * @codeGenApi\n     */\n    function ɵɵload(index) {\n        return loadInternal(getLView(), index);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function ɵɵdirectiveInject(token, flags) {\n        if (flags === void 0) { flags = exports.InjectFlags.Default; }\n        token = resolveForwardRef(token);\n        var lView = getLView();\n        // Fall back to inject() if view hasn't been created. This situation can happen in tests\n        // if inject utilities are used before bootstrapping.\n        if (lView == null)\n            return ɵɵinject(token, flags);\n        return getOrCreateInjectable(getPreviousOrParentTNode(), lView, token, flags);\n    }\n    /**\n     * Facade for the attribute injection from DI.\n     *\n     * @codeGenApi\n     */\n    function ɵɵinjectAttribute(attrNameToInject) {\n        return injectAttributeImpl(getPreviousOrParentTNode(), attrNameToInject);\n    }\n\n    /**\n     * --------\n     *\n     * This file contains the core logic for how styling instructions are processed in Angular.\n     *\n     * To learn more about the algorithm see `TStylingContext`.\n     *\n     * --------\n     */\n    /**\n     * Temporary function to bridge styling functionality between this new\n     * refactor (which is here inside of `styling_next/`) and the old\n     * implementation (which lives inside of `styling/`).\n     *\n     * This function is executed during the creation block of an element.\n     * Because the existing styling implementation issues a call to the\n     * `styling()` instruction, this instruction will also get run. The\n     * central idea here is that the directive index values are bound\n     * into the context. The directive index is temporary and is only\n     * required until the `select(n)` instruction is fully functional.\n     */\n    function stylingInit() {\n        var lView = getLView();\n        var index = getSelectedIndex();\n        var tNode = getTNode(index, lView);\n        updateLastDirectiveIndex(tNode, getActiveDirectiveStylingIndex());\n    }\n    /**\n     * Sets the current style sanitizer function which will then be used\n     * within all follow-up prop and map-based style binding instructions\n     * for the given element.\n     *\n     * Note that once styling has been applied to the element (i.e. once\n     * `select(n)` is executed or the hostBindings/template function exits)\n     * then the active `sanitizerFn` will be set to `null`. This means that\n     * once styling is applied to another element then a another call to\n     * `styleSanitizer` will need to be made.\n     *\n     * @param sanitizerFn The sanitization function that will be used to\n     *       process style prop/value entries.\n     *\n     * @codeGenApi\n     */\n    function styleSanitizer(sanitizer) {\n        setCurrentStyleSanitizer(sanitizer);\n    }\n    /**\n     * Mirror implementation of the `styleProp()` instruction (found in `instructions/styling.ts`).\n     */\n    function styleProp(prop, value, suffix) {\n        _stylingProp(prop, resolveStylePropValue(value, suffix), false);\n    }\n    /**\n     * Mirror implementation of the `classProp()` instruction (found in `instructions/styling.ts`).\n     */\n    function classProp(className, value) {\n        _stylingProp(className, value, true);\n    }\n    /**\n     * Shared function used to update a prop-based styling binding for an element.\n     */\n    function _stylingProp(prop, value, isClassBased) {\n        var index = getSelectedIndex();\n        var lView = getLView();\n        var bindingIndex = lView[BINDING_INDEX]++;\n        var tNode = getTNode(index, lView);\n        var defer = getActiveDirectiveSuperClassHeight() > 0;\n        if (isClassBased) {\n            updateClassBinding(getClassesContext(tNode), lView, prop, bindingIndex, value, defer, false);\n        }\n        else {\n            var sanitizer = getCurrentOrLViewSanitizer(lView);\n            updateStyleBinding(getStylesContext(tNode), lView, prop, bindingIndex, value, sanitizer, defer, false);\n        }\n    }\n    /**\n     * Mirror implementation of the `styleMap()` instruction (found in `instructions/styling.ts`).\n     */\n    function styleMap(styles) {\n        _stylingMap(styles, false);\n    }\n    /**\n     * Mirror implementation of the `classMap()` instruction (found in `instructions/styling.ts`).\n     */\n    function classMap(classes) {\n        _stylingMap(classes, true);\n    }\n    /**\n     * Shared function used to update a map-based styling binding for an element.\n     *\n     * When this function is called it will activate support for `[style]` and\n     * `[class]` bindings in Angular.\n     */\n    function _stylingMap(value, isClassBased) {\n        activeStylingMapFeature();\n        var index = getSelectedIndex();\n        var lView = getLView();\n        var bindingIndex = lView[BINDING_INDEX]++;\n        if (value !== NO_CHANGE) {\n            var tNode = getTNode(index, lView);\n            var defer = getActiveDirectiveSuperClassHeight() > 0;\n            var oldValue = lView[bindingIndex];\n            var valueHasChanged = hasValueChanged$1(oldValue, value);\n            var lStylingMap = normalizeIntoStylingMap(oldValue, value);\n            if (isClassBased) {\n                updateClassBinding(getClassesContext(tNode), lView, null, bindingIndex, lStylingMap, defer, valueHasChanged);\n            }\n            else {\n                var sanitizer = getCurrentOrLViewSanitizer(lView);\n                updateStyleBinding(getStylesContext(tNode), lView, null, bindingIndex, lStylingMap, sanitizer, defer, valueHasChanged);\n            }\n        }\n    }\n    /**\n     * Temporary function to bridge styling functionality between this new\n     * refactor (which is here inside of `styling_next/`) and the old\n     * implementation (which lives inside of `styling/`).\n     *\n     * The new styling refactor ensures that styling flushing is called\n     * automatically when a template function exits or a follow-up element\n     * is visited (i.e. when `select(n)` is called). Because the `select(n)`\n     * instruction is not fully implemented yet (it doesn't actually execute\n     * host binding instruction code at the right time), this means that a\n     * styling apply function is still needed.\n     *\n     * This function is a mirror implementation of the `stylingApply()`\n     * instruction (found in `instructions/styling.ts`).\n     */\n    function stylingApply() {\n        var index = getSelectedIndex();\n        var lView = getLView();\n        var tNode = getTNode(index, lView);\n        var renderer = getRenderer(tNode, lView);\n        var native = getNativeFromLView(index, lView);\n        var directiveIndex = getActiveDirectiveStylingIndex();\n        applyClasses(renderer, lView, getClassesContext(tNode), native, directiveIndex);\n        var sanitizer = getCurrentOrLViewSanitizer(lView);\n        applyStyles(renderer, lView, getStylesContext(tNode), native, directiveIndex, sanitizer);\n        setCurrentStyleSanitizer(null);\n    }\n    /**\n     * Temporary function to bridge styling functionality between this new\n     * refactor (which is here inside of `styling_next/`) and the old\n     * implementation (which lives inside of `styling/`).\n     *\n     * The purpose of this function is to traverse through the LView data\n     * for a specific element index and return the native node. Because the\n     * current implementation relies on there being a styling context array,\n     * the code below will need to loop through these array values until it\n     * gets a native element node.\n     *\n     * Note that this code is temporary and will disappear once the new\n     * styling refactor lands in its entirety.\n     */\n    function getNativeFromLView(index, viewData) {\n        var storageIndex = index + HEADER_OFFSET;\n        var slotValue = viewData[storageIndex];\n        var wrapper = viewData;\n        while (Array.isArray(slotValue)) {\n            wrapper = slotValue;\n            slotValue = slotValue[HOST];\n        }\n        if (isStylingContext(wrapper)) {\n            return wrapper[0 /* ElementPosition */];\n        }\n        else {\n            return slotValue;\n        }\n    }\n    function getRenderer(tNode, lView) {\n        return tNode.type === 3 /* Element */ ? lView[RENDERER] : null;\n    }\n    /**\n     * Searches and assigns provided all static style/class entries (found in the `attrs` value)\n     * and registers them in their respective styling contexts.\n     */\n    function registerInitialStylingIntoContext(tNode, attrs, startIndex) {\n        var classesContext;\n        var stylesContext;\n        var mode = -1;\n        for (var i = startIndex; i < attrs.length; i++) {\n            var attr = attrs[i];\n            if (typeof attr == 'number') {\n                mode = attr;\n            }\n            else if (mode == 1 /* Classes */) {\n                classesContext = classesContext || getClassesContext(tNode);\n                registerBinding(classesContext, -1, attr, true, false);\n            }\n            else if (mode == 2 /* Styles */) {\n                stylesContext = stylesContext || getStylesContext(tNode);\n                registerBinding(stylesContext, -1, attr, attrs[++i], false);\n            }\n        }\n    }\n    /**\n     * Mirror implementation of the same function found in `instructions/styling.ts`.\n     */\n    function getActiveDirectiveStylingIndex() {\n        // whenever a directive's hostBindings function is called a uniqueId value\n        // is assigned. Normally this is enough to help distinguish one directive\n        // from another for the styling context, but there are situations where a\n        // sub-class directive could inherit and assign styling in concert with a\n        // parent directive. To help the styling code distinguish between a parent\n        // sub-classed directive the inheritance depth is taken into account as well.\n        return getActiveDirectiveId() + getActiveDirectiveSuperClassDepth();\n    }\n    /**\n     * Temporary function that will update the max directive index value in\n     * both the classes and styles contexts present on the provided `tNode`.\n     *\n     * This code is only used because the `select(n)` code functionality is not\n     * yet 100% functional. The `select(n)` instruction cannot yet evaluate host\n     * bindings function code in sync with the associated template function code.\n     * For this reason the styling algorithm needs to track the last directive index\n     * value so that it knows exactly when to render styling to the element since\n     * `stylingApply()` is called multiple times per CD (`stylingApply` will be\n     * removed once `select(n)` is fixed).\n     */\n    function updateLastDirectiveIndex(tNode, directiveIndex) {\n        updateContextDirectiveIndex(getClassesContext(tNode), directiveIndex);\n        updateContextDirectiveIndex(getStylesContext(tNode), directiveIndex);\n    }\n    function getStylesContext(tNode) {\n        return getContext(tNode, false);\n    }\n    function getClassesContext(tNode) {\n        return getContext(tNode, true);\n    }\n    /**\n     * Returns/instantiates a styling context from/to a `tNode` instance.\n     */\n    function getContext(tNode, isClassBased) {\n        var context = isClassBased ? tNode.newClasses : tNode.newStyles;\n        if (!context) {\n            context = allocTStylingContext();\n            if (ngDevMode) {\n                attachStylingDebugObject(context);\n            }\n            if (isClassBased) {\n                tNode.newClasses = context;\n            }\n            else {\n                tNode.newStyles = context;\n            }\n        }\n        return context;\n    }\n    function resolveStylePropValue(value, suffix) {\n        var resolvedValue = null;\n        if (value !== null) {\n            if (suffix) {\n                // when a suffix is applied then it will bypass\n                // sanitization entirely (b/c a new string is created)\n                resolvedValue = renderStringify(value) + suffix;\n            }\n            else {\n                // sanitization happens by dealing with a String value\n                // this means that the string value will be passed through\n                // into the style rendering later (which is where the value\n                // will be sanitized before it is applied)\n                resolvedValue = value;\n            }\n        }\n        return resolvedValue;\n    }\n\n    /*\n     * The contents of this file include the instructions for all styling-related\n     * operations in Angular.\n     *\n     * The instructions present in this file are:\n     *\n     * Template level styling instructions:\n     * - styling\n     * - styleMap\n     * - classMap\n     * - styleProp\n     * - classProp\n     * - stylingApply\n     */\n    /**\n     * Allocates style and class binding properties on the element during creation mode.\n     *\n     * This instruction is meant to be called during creation mode to register all\n     * dynamic style and class bindings on the element. Note that this is only used\n     * for binding values (see `elementStart` to learn how to assign static styling\n     * values to an element).\n     *\n     * @param classBindingNames An array containing bindable class names.\n     *        The `classProp` instruction refers to the class name by index in\n     *        this array (i.e. `['foo', 'bar']` means `foo=0` and `bar=1`).\n     * @param styleBindingNames An array containing bindable style properties.\n     *        The `styleProp` instruction refers to the class name by index in\n     *        this array (i.e. `['width', 'height']` means `width=0` and `height=1`).\n     * @param styleSanitizer An optional sanitizer function that will be used to sanitize any CSS\n     *        style values that are applied to the element (during rendering).\n     *\n     * Note that this will allocate the provided style/class bindings to the host element if\n     * this function is called within a host binding.\n     *\n     * @codeGenApi\n     */\n    function ɵɵstyling(classBindingNames, styleBindingNames, styleSanitizer) {\n        var tNode = getPreviousOrParentTNode();\n        if (!tNode.stylingTemplate) {\n            tNode.stylingTemplate = createEmptyStylingContext();\n        }\n        var directiveStylingIndex = getActiveDirectiveStylingIndex$1();\n        if (directiveStylingIndex) {\n            // this is temporary hack to get the existing styling instructions to\n            // play ball with the new refactored implementation.\n            // TODO (matsko): remove this once the old implementation is not needed.\n            if (runtimeIsNewStylingInUse()) {\n                stylingInit();\n            }\n            // despite the binding being applied in a queue (below), the allocation\n            // of the directive into the context happens right away. The reason for\n            // this is to retain the ordering of the directives (which is important\n            // for the prioritization of bindings).\n            allocateOrUpdateDirectiveIntoContext(tNode.stylingTemplate, directiveStylingIndex);\n            var fns = tNode.onElementCreationFns = tNode.onElementCreationFns || [];\n            fns.push(function () {\n                initStyling(tNode, classBindingNames, styleBindingNames, styleSanitizer, directiveStylingIndex);\n                registerHostDirective(tNode.stylingTemplate, directiveStylingIndex);\n            });\n        }\n        else {\n            // calling the function below ensures that the template's binding values\n            // are applied as the first set of bindings into the context. If any other\n            // styling bindings are set on the same element (by directives and/or\n            // components) then they will be applied at the end of the `elementEnd`\n            // instruction (because directives are created first before styling is\n            // executed for a new element).\n            initStyling(tNode, classBindingNames, styleBindingNames, styleSanitizer, DEFAULT_TEMPLATE_DIRECTIVE_INDEX);\n        }\n    }\n    function initStyling(tNode, classBindingNames, styleBindingNames, styleSanitizer, directiveStylingIndex) {\n        updateContextWithBindings(tNode.stylingTemplate, directiveStylingIndex, classBindingNames, styleBindingNames, styleSanitizer);\n    }\n    /**\n     * Update a style binding on an element with the provided value.\n     *\n     * If the style value is falsy then it will be removed from the element\n     * (or assigned a different value depending if there are any styles placed\n     * on the element with `styleMap` or any static styles that are\n     * present from when the element was created with `styling`).\n     *\n     * Note that the styling element is updated as part of `stylingApply`.\n     *\n     * @param styleIndex Index of style to update. This index value refers to the\n     *        index of the style in the style bindings array that was passed into\n     *        `styling`.\n     * @param value New value to write (falsy to remove).\n     * @param suffix Optional suffix. Used with scalar values to add unit such as `px`.\n     *        Note that when a suffix is provided then the underlying sanitizer will\n     *        be ignored.\n     * @param forceOverride Whether or not to update the styling value immediately\n     *        (despite the other bindings possibly having priority)\n     *\n     * Note that this will apply the provided style value to the host element if this function is called\n     * within a host binding.\n     *\n     * @codeGenApi\n     */\n    function ɵɵstyleProp(styleIndex, value, suffix, forceOverride) {\n        stylePropInternal(getLView(), getSelectedIndex(), styleIndex, getActiveDirectiveStylingIndex$1(), value, suffix, forceOverride);\n    }\n    function stylePropInternal(lView, selectedIndex, styleIndex, directiveStylingIndex, value, suffix, forceOverride) {\n        var valueToAdd = resolveStylePropValue$1(value, suffix);\n        var stylingContext = getStylingContext(selectedIndex, lView);\n        if (directiveStylingIndex) {\n            var args = [stylingContext, styleIndex, valueToAdd, directiveStylingIndex, forceOverride];\n            enqueueHostInstruction(stylingContext, directiveStylingIndex, updateStyleProp, args);\n        }\n        else {\n            updateStyleProp(stylingContext, styleIndex, valueToAdd, DEFAULT_TEMPLATE_DIRECTIVE_INDEX, forceOverride);\n        }\n        if (runtimeIsNewStylingInUse()) {\n            var prop = getBindingNameFromIndex(stylingContext, styleIndex, directiveStylingIndex, false);\n            // the reason why we cast the value as `boolean` is\n            // because the new styling refactor does not yet support\n            // sanitization or animation players.\n            styleProp(prop, value, suffix);\n        }\n    }\n    function resolveStylePropValue$1(value, suffix) {\n        var valueToAdd = null;\n        if (value !== null) {\n            if (suffix) {\n                // when a suffix is applied then it will bypass\n                // sanitization entirely (b/c a new string is created)\n                valueToAdd = renderStringify(value) + suffix;\n            }\n            else {\n                // sanitization happens by dealing with a String value\n                // this means that the string value will be passed through\n                // into the style rendering later (which is where the value\n                // will be sanitized before it is applied)\n                valueToAdd = value;\n            }\n        }\n        return valueToAdd;\n    }\n    /**\n     * Update a class binding on an element with the provided value.\n     *\n     * This instruction is meant to handle the `[class.foo]=\"exp\"` case and,\n     * therefore, the class binding itself must already be allocated using\n     * `styling` within the creation block.\n     *\n     * @param classIndex Index of class to toggle. This index value refers to the\n     *        index of the class in the class bindings array that was passed into\n     *        `styling` (which is meant to be called before this\n     *        function is).\n     * @param value A true/false value which will turn the class on or off.\n     * @param forceOverride Whether or not this value will be applied regardless\n     *        of where it is being set within the styling priority structure.\n     *\n     * Note that this will apply the provided class value to the host element if this function\n     * is called within a host binding.\n     *\n     * @codeGenApi\n     */\n    function ɵɵclassProp(classIndex, value, forceOverride) {\n        var index = getSelectedIndex();\n        var input = (value instanceof BoundPlayerFactory) ?\n            value :\n            booleanOrNull(value);\n        var directiveStylingIndex = getActiveDirectiveStylingIndex$1();\n        var stylingContext = getStylingContext(index, getLView());\n        if (directiveStylingIndex) {\n            var args = [stylingContext, classIndex, input, directiveStylingIndex, forceOverride];\n            enqueueHostInstruction(stylingContext, directiveStylingIndex, updateClassProp, args);\n        }\n        else {\n            updateClassProp(stylingContext, classIndex, input, DEFAULT_TEMPLATE_DIRECTIVE_INDEX, forceOverride);\n        }\n        if (runtimeIsNewStylingInUse()) {\n            var prop = getBindingNameFromIndex(stylingContext, classIndex, directiveStylingIndex, true);\n            // the reason why we cast the value as `boolean` is\n            // because the new styling refactor does not yet support\n            // sanitization or animation players.\n            classProp(prop, input);\n        }\n    }\n    function booleanOrNull(value) {\n        if (typeof value === 'boolean')\n            return value;\n        return value ? true : null;\n    }\n    /**\n     * Update style bindings using an object literal on an element.\n     *\n     * This instruction is meant to apply styling via the `[style]=\"exp\"` template bindings.\n     * When styles are applied to the element they will then be updated with respect to\n     * any styles/classes set via `styleProp`. If any styles are set to falsy\n     * then they will be removed from the element.\n     *\n     * Note that the styling instruction will not be applied until `stylingApply` is called.\n     *\n     * @param styles A key/value style map of the styles that will be applied to the given element.\n     *        Any missing styles (that have already been applied to the element beforehand) will be\n     *        removed (unset) from the element's styling.\n     *\n     * Note that this will apply the provided styleMap value to the host element if this function\n     * is called within a host binding.\n     *\n     * @codeGenApi\n     */\n    function ɵɵstyleMap(styles) {\n        var index = getSelectedIndex();\n        var lView = getLView();\n        var stylingContext = getStylingContext(index, lView);\n        var directiveStylingIndex = getActiveDirectiveStylingIndex$1();\n        if (directiveStylingIndex) {\n            var args = [stylingContext, styles, directiveStylingIndex];\n            enqueueHostInstruction(stylingContext, directiveStylingIndex, updateStyleMap, args);\n        }\n        else {\n            var tNode = getTNode(index, lView);\n            // inputs are only evaluated from a template binding into a directive, therefore,\n            // there should not be a situation where a directive host bindings function\n            // evaluates the inputs (this should only happen in the template function)\n            if (hasStyleInput(tNode) && styles !== NO_CHANGE) {\n                var initialStyles = getInitialClassNameValue(stylingContext);\n                var styleInputVal = (initialStyles.length ? (initialStyles + ' ') : '') + forceStylesAsString(styles);\n                setInputsForProperty(lView, tNode.inputs['style'], styleInputVal);\n                styles = NO_CHANGE;\n            }\n            updateStyleMap(stylingContext, styles);\n        }\n        if (runtimeIsNewStylingInUse()) {\n            styleMap(styles);\n        }\n    }\n    /**\n     * Update class bindings using an object literal or class-string on an element.\n     *\n     * This instruction is meant to apply styling via the `[class]=\"exp\"` template bindings.\n     * When classes are applied to the element they will then be updated with\n     * respect to any styles/classes set via `classProp`. If any\n     * classes are set to falsy then they will be removed from the element.\n     *\n     * Note that the styling instruction will not be applied until `stylingApply` is called.\n     * Note that this will the provided classMap value to the host element if this function is called\n     * within a host binding.\n     *\n     * @param classes A key/value map or string of CSS classes that will be added to the\n     *        given element. Any missing classes (that have already been applied to the element\n     *        beforehand) will be removed (unset) from the element's list of CSS classes.\n     *\n     * @codeGenApi\n     */\n    function ɵɵclassMap(classes) {\n        classMapInternal(getLView(), getSelectedIndex(), getActiveDirectiveStylingIndex$1(), classes);\n    }\n    function classMapInternal(lView, selectedIndex, directiveStylingIndex, classes) {\n        var stylingContext = getStylingContext(selectedIndex, lView);\n        if (directiveStylingIndex) {\n            var args = [stylingContext, classes, directiveStylingIndex];\n            enqueueHostInstruction(stylingContext, directiveStylingIndex, updateClassMap, args);\n        }\n        else {\n            var tNode = getTNode(selectedIndex, lView);\n            // inputs are only evaluated from a template binding into a directive, therefore,\n            // there should not be a situation where a directive host bindings function\n            // evaluates the inputs (this should only happen in the template function)\n            if (hasClassInput(tNode)) {\n                var initialClasses = getInitialClassNameValue(stylingContext);\n                var classInputVal = (initialClasses.length ? (initialClasses + ' ') : '') + forceClassesAsString(classes);\n                setInputsForProperty(lView, tNode.inputs['class'], classInputVal);\n                classes = NO_CHANGE;\n            }\n            updateClassMap(stylingContext, classes);\n        }\n        if (runtimeIsNewStylingInUse()) {\n            classMap(classes);\n        }\n    }\n    /**\n     * Apply all style and class binding values to the element.\n     *\n     * This instruction is meant to be run after `styleMap`, `classMap`,\n     * `styleProp` or `classProp` instructions have been run and will\n     * only apply styling to the element if any styling bindings have been updated.\n     *\n     * @codeGenApi\n     */\n    function ɵɵstylingApply() {\n        var index = getSelectedIndex();\n        var directiveStylingIndex = getActiveDirectiveStylingIndex$1() || DEFAULT_TEMPLATE_DIRECTIVE_INDEX;\n        var lView = getLView();\n        var tNode = getTNode(index, lView);\n        // if a non-element value is being processed then we can't render values\n        // on the element at all therefore by setting the renderer to null then\n        // the styling apply code knows not to actually apply the values...\n        var renderer = tNode.type === 3 /* Element */ ? lView[RENDERER] : null;\n        var isFirstRender = (lView[FLAGS] & 8 /* FirstLViewPass */) !== 0;\n        var stylingContext = getStylingContext(index, lView);\n        if (runtimeAllowOldStyling()) {\n            var totalPlayersQueued = renderStyling(stylingContext, renderer, lView, isFirstRender, null, null, directiveStylingIndex);\n            if (totalPlayersQueued > 0) {\n                var rootContext = getRootContext(lView);\n                scheduleTick(rootContext, 2 /* FlushPlayers */);\n            }\n        }\n        // because select(n) may not run between every instruction, the cached styling\n        // context may not get cleared between elements. The reason for this is because\n        // styling bindings (like `[style]` and `[class]`) are not recognized as property\n        // bindings by default so a select(n) instruction is not generated. To ensure the\n        // context is loaded correctly for the next element the cache below is pre-emptively\n        // cleared because there is no code in Angular that applies more styling code after a\n        // styling flush has occurred. Note that this will be fixed once FW-1254 lands.\n        setCachedStylingContext(null);\n        if (runtimeIsNewStylingInUse()) {\n            stylingApply();\n        }\n    }\n    function getActiveDirectiveStylingIndex$1() {\n        // whenever a directive's hostBindings function is called a uniqueId value\n        // is assigned. Normally this is enough to help distinguish one directive\n        // from another for the styling context, but there are situations where a\n        // sub-class directive could inherit and assign styling in concert with a\n        // parent directive. To help the styling code distinguish between a parent\n        // sub-classed directive the inheritance depth is taken into account as well.\n        return getActiveDirectiveId() + getActiveDirectiveSuperClassDepth();\n    }\n    function getStylingContext(index, lView) {\n        var context = getCachedStylingContext();\n        if (!context) {\n            context = getStylingContextFromLView(index + HEADER_OFFSET, lView);\n            setCachedStylingContext(context);\n        }\n        else if (ngDevMode) {\n            var actualContext = getStylingContextFromLView(index + HEADER_OFFSET, lView);\n            assertEqual(context, actualContext, 'The cached styling context is invalid');\n        }\n        return context;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Create DOM element. The instruction must later be followed by `elementEnd()` call.\n     *\n     * @param index Index of the element in the LView array\n     * @param name Name of the DOM Node\n     * @param attrs Statically bound set of attributes, classes, and styles to be written into the DOM\n     *              element on creation. Use [AttributeMarker] to denote the meaning of this array.\n     * @param localRefs A set of local reference bindings on the element.\n     *\n     * Attributes and localRefs are passed as an array of strings where elements with an even index\n     * hold an attribute name and elements with an odd index hold an attribute value, ex.:\n     * ['id', 'warning5', 'class', 'alert']\n     *\n     * @codeGenApi\n     */\n    function ɵɵelementStart(index, name, attrs, localRefs) {\n        var lView = getLView();\n        var tView = lView[TVIEW];\n        ngDevMode && assertEqual(lView[BINDING_INDEX], tView.bindingStartIndex, 'elements should be created before any bindings ');\n        ngDevMode && ngDevMode.rendererCreateElement++;\n        ngDevMode && assertDataInRange(lView, index + HEADER_OFFSET);\n        var native = lView[index + HEADER_OFFSET] = elementCreate(name);\n        var renderer = lView[RENDERER];\n        var tNode = getOrCreateTNode(tView, lView[T_HOST], index, 3 /* Element */, name, attrs || null);\n        var initialStylesIndex = 0;\n        var initialClassesIndex = 0;\n        var lastAttrIndex = -1;\n        if (attrs) {\n            lastAttrIndex = setUpAttributes(native, attrs);\n            // it's important to only prepare styling-related datastructures once for a given\n            // tNode and not each time an element is created. Also, the styling code is designed\n            // to be patched and constructed at various points, but only up until the styling\n            // template is first allocated (which happens when the very first style/class binding\n            // value is evaluated). When the template is allocated (when it turns into a context)\n            // then the styling template is locked and cannot be further extended (it can only be\n            // instantiated into a context per element)\n            setNodeStylingTemplate(tView, tNode, attrs, lastAttrIndex);\n            var stylingTemplate = tNode.stylingTemplate;\n            if (stylingTemplate) {\n                // the initial style/class values are rendered immediately after having been\n                // initialized into the context so the element styling is ready when directives\n                // are initialized (since they may read style/class values in their constructor)\n                initialStylesIndex = renderInitialStyles(native, stylingTemplate, renderer);\n                initialClassesIndex = renderInitialClasses(native, stylingTemplate, renderer);\n            }\n        }\n        appendChild(native, tNode, lView);\n        createDirectivesAndLocals(tView, lView, tNode, localRefs);\n        // any immediate children of a component or template container must be pre-emptively\n        // monkey-patched with the component view data so that the element can be inspected\n        // later on using any element discovery utility methods (see `element_discovery.ts`)\n        if (getElementDepthCount() === 0) {\n            attachPatchData(native, lView);\n        }\n        increaseElementDepthCount();\n        // if a directive contains a host binding for \"class\" then all class-based data will\n        // flow through that (except for `[class.prop]` bindings). This also includes initial\n        // static class values as well. (Note that this will be fixed once map-based `[style]`\n        // and `[class]` bindings work for multiple directives.)\n        if (tView.firstTemplatePass) {\n            var inputData = initializeTNodeInputs(tNode);\n            if (inputData && inputData.hasOwnProperty('class')) {\n                tNode.flags |= 8 /* hasClassInput */;\n            }\n            if (inputData && inputData.hasOwnProperty('style')) {\n                tNode.flags |= 16 /* hasStyleInput */;\n            }\n        }\n        // we render the styling again below in case any directives have set any `style` and/or\n        // `class` host attribute values...\n        if (tNode.stylingTemplate) {\n            renderInitialClasses(native, tNode.stylingTemplate, renderer, initialClassesIndex);\n            renderInitialStyles(native, tNode.stylingTemplate, renderer, initialStylesIndex);\n        }\n        if (runtimeIsNewStylingInUse() && lastAttrIndex >= 0) {\n            registerInitialStylingIntoContext(tNode, attrs, lastAttrIndex);\n        }\n        var currentQueries = lView[QUERIES];\n        if (currentQueries) {\n            currentQueries.addNode(tNode);\n            lView[QUERIES] = currentQueries.clone(tNode);\n        }\n        executeContentQueries(tView, tNode, lView);\n    }\n    /**\n     * Mark the end of the element.\n     *\n     * @codeGenApi\n     */\n    function ɵɵelementEnd() {\n        var previousOrParentTNode = getPreviousOrParentTNode();\n        ngDevMode && assertDefined(previousOrParentTNode, 'No parent node to close.');\n        if (getIsParent()) {\n            setIsNotParent();\n        }\n        else {\n            ngDevMode && assertHasParent(getPreviousOrParentTNode());\n            previousOrParentTNode = previousOrParentTNode.parent;\n            setPreviousOrParentTNode(previousOrParentTNode, false);\n        }\n        // this is required for all host-level styling-related instructions to run\n        // in the correct order\n        previousOrParentTNode.onElementCreationFns && applyOnCreateInstructions(previousOrParentTNode);\n        ngDevMode && assertNodeType(previousOrParentTNode, 3 /* Element */);\n        var lView = getLView();\n        var currentQueries = lView[QUERIES];\n        // Go back up to parent queries only if queries have been cloned on this element.\n        if (currentQueries && previousOrParentTNode.index === currentQueries.nodeIndex) {\n            lView[QUERIES] = currentQueries.parent;\n        }\n        registerPostOrderHooks(lView[TVIEW], previousOrParentTNode);\n        decreaseElementDepthCount();\n        // this is fired at the end of elementEnd because ALL of the stylingBindings code\n        // (for directives and the template) have now executed which means the styling\n        // context can be instantiated properly.\n        var stylingContext = null;\n        if (hasClassInput(previousOrParentTNode)) {\n            stylingContext = getStylingContextFromLView(previousOrParentTNode.index, lView);\n            setInputsForProperty(lView, previousOrParentTNode.inputs['class'], getInitialClassNameValue(stylingContext));\n        }\n        if (hasStyleInput(previousOrParentTNode)) {\n            stylingContext =\n                stylingContext || getStylingContextFromLView(previousOrParentTNode.index, lView);\n            setInputsForProperty(lView, previousOrParentTNode.inputs['style'], getInitialStyleStringValue(stylingContext));\n        }\n    }\n    /**\n     * Creates an empty element using {@link elementStart} and {@link elementEnd}\n     *\n     * @param index Index of the element in the data array\n     * @param name Name of the DOM Node\n     * @param attrs Statically bound set of attributes, classes, and styles to be written into the DOM\n     *              element on creation. Use [AttributeMarker] to denote the meaning of this array.\n     * @param localRefs A set of local reference bindings on the element.\n     *\n     * @codeGenApi\n     */\n    function ɵɵelement(index, name, attrs, localRefs) {\n        ɵɵelementStart(index, name, attrs, localRefs);\n        ɵɵelementEnd();\n    }\n    /**\n     * Assign static attribute values to a host element.\n     *\n     * This instruction will assign static attribute values as well as class and style\n     * values to an element within the host bindings function. Since attribute values\n     * can consist of different types of values, the `attrs` array must include the values in\n     * the following format:\n     *\n     * attrs = [\n     *   // static attributes (like `title`, `name`, `id`...)\n     *   attr1, value1, attr2, value,\n     *\n     *   // a single namespace value (like `x:id`)\n     *   NAMESPACE_MARKER, namespaceUri1, name1, value1,\n     *\n     *   // another single namespace value (like `x:name`)\n     *   NAMESPACE_MARKER, namespaceUri2, name2, value2,\n     *\n     *   // a series of CSS classes that will be applied to the element (no spaces)\n     *   CLASSES_MARKER, class1, class2, class3,\n     *\n     *   // a series of CSS styles (property + value) that will be applied to the element\n     *   STYLES_MARKER, prop1, value1, prop2, value2\n     * ]\n     *\n     * All non-class and non-style attributes must be defined at the start of the list\n     * first before all class and style values are set. When there is a change in value\n     * type (like when classes and styles are introduced) a marker must be used to separate\n     * the entries. The marker values themselves are set via entries found in the\n     * [AttributeMarker] enum.\n     *\n     * NOTE: This instruction is meant to used from `hostBindings` function only.\n     *\n     * @param directive A directive instance the styling is associated with.\n     * @param attrs An array of static values (attributes, classes and styles) with the correct marker\n     * values.\n     *\n     * @codeGenApi\n     */\n    function ɵɵelementHostAttrs(attrs) {\n        var hostElementIndex = getSelectedIndex();\n        var lView = getLView();\n        var tNode = getTNode(hostElementIndex, lView);\n        // non-element nodes (e.g. `<ng-container>`) are not rendered as actual\n        // element nodes and adding styles/classes on to them will cause runtime\n        // errors...\n        if (tNode.type === 3 /* Element */) {\n            var native = getNativeByTNode(tNode, lView);\n            var lastAttrIndex = setUpAttributes(native, attrs);\n            var stylingAttrsStartIndex = attrsStylingIndexOf(attrs, lastAttrIndex);\n            if (stylingAttrsStartIndex >= 0) {\n                var directiveStylingIndex = getActiveDirectiveStylingIndex$1();\n                if (tNode.stylingTemplate) {\n                    patchContextWithStaticAttrs(tNode.stylingTemplate, attrs, stylingAttrsStartIndex, directiveStylingIndex);\n                }\n                else {\n                    tNode.stylingTemplate =\n                        initializeStaticContext(attrs, stylingAttrsStartIndex, directiveStylingIndex);\n                }\n            }\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Creates a logical container for other nodes (<ng-container>) backed by a comment node in the DOM.\n     * The instruction must later be followed by `elementContainerEnd()` call.\n     *\n     * @param index Index of the element in the LView array\n     * @param attrs Set of attributes to be used when matching directives.\n     * @param localRefs A set of local reference bindings on the element.\n     *\n     * Even if this instruction accepts a set of attributes no actual attribute values are propagated to\n     * the DOM (as a comment node can't have attributes). Attributes are here only for directive\n     * matching purposes and setting initial inputs of directives.\n     *\n     * @codeGenApi\n     */\n    function ɵɵelementContainerStart(index, attrs, localRefs) {\n        var lView = getLView();\n        var tView = lView[TVIEW];\n        var renderer = lView[RENDERER];\n        var tagName = 'ng-container';\n        ngDevMode && assertEqual(lView[BINDING_INDEX], tView.bindingStartIndex, 'element containers should be created before any bindings');\n        ngDevMode && ngDevMode.rendererCreateComment++;\n        ngDevMode && assertDataInRange(lView, index + HEADER_OFFSET);\n        var native = lView[index + HEADER_OFFSET] = renderer.createComment(ngDevMode ? tagName : '');\n        ngDevMode && assertDataInRange(lView, index - 1);\n        var tNode = getOrCreateTNode(tView, lView[T_HOST], index, 4 /* ElementContainer */, tagName, attrs || null);\n        if (attrs) {\n            // While ng-container doesn't necessarily support styling, we use the style context to identify\n            // and execute directives on the ng-container.\n            setNodeStylingTemplate(tView, tNode, attrs, 0);\n        }\n        appendChild(native, tNode, lView);\n        createDirectivesAndLocals(tView, lView, tNode, localRefs);\n        attachPatchData(native, lView);\n        var currentQueries = lView[QUERIES];\n        if (currentQueries) {\n            currentQueries.addNode(tNode);\n            lView[QUERIES] = currentQueries.clone(tNode);\n        }\n        executeContentQueries(tView, tNode, lView);\n    }\n    /**\n     * Mark the end of the <ng-container>.\n     *\n     * @codeGenApi\n     */\n    function ɵɵelementContainerEnd() {\n        var previousOrParentTNode = getPreviousOrParentTNode();\n        var lView = getLView();\n        var tView = lView[TVIEW];\n        if (getIsParent()) {\n            setIsNotParent();\n        }\n        else {\n            ngDevMode && assertHasParent(previousOrParentTNode);\n            previousOrParentTNode = previousOrParentTNode.parent;\n            setPreviousOrParentTNode(previousOrParentTNode, false);\n        }\n        ngDevMode && assertNodeType(previousOrParentTNode, 4 /* ElementContainer */);\n        var currentQueries = lView[QUERIES];\n        // Go back up to parent queries only if queries have been cloned on this element.\n        if (currentQueries && previousOrParentTNode.index === currentQueries.nodeIndex) {\n            lView[QUERIES] = currentQueries.parent;\n        }\n        // this is required for all host-level styling-related instructions to run\n        // in the correct order\n        previousOrParentTNode.onElementCreationFns && applyOnCreateInstructions(previousOrParentTNode);\n        registerPostOrderHooks(tView, previousOrParentTNode);\n    }\n    /**\n     * Creates an empty logical container using {@link elementContainerStart}\n     * and {@link elementContainerEnd}\n     *\n     * @param index Index of the element in the LView array\n     * @param attrs Set of attributes to be used when matching directives.\n     * @param localRefs A set of local reference bindings on the element.\n     *\n     * @codeGenApi\n     */\n    function ɵɵelementContainer(index, attrs, localRefs) {\n        ɵɵelementContainerStart(index, attrs, localRefs);\n        ɵɵelementContainerEnd();\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Marks the start of an embedded view.\n     *\n     * @param viewBlockId The ID of this view\n     * @return boolean Whether or not this view is in creation mode\n     *\n     * @codeGenApi\n     */\n    function ɵɵembeddedViewStart(viewBlockId, consts, vars) {\n        var lView = getLView();\n        var previousOrParentTNode = getPreviousOrParentTNode();\n        // The previous node can be a view node if we are processing an inline for loop\n        var containerTNode = previousOrParentTNode.type === 2 /* View */ ?\n            previousOrParentTNode.parent :\n            previousOrParentTNode;\n        var lContainer = lView[containerTNode.index];\n        ngDevMode && assertNodeType(containerTNode, 0 /* Container */);\n        var viewToRender = scanForView(lContainer, lContainer[ACTIVE_INDEX], viewBlockId);\n        if (viewToRender) {\n            setIsParent();\n            enterView(viewToRender, viewToRender[TVIEW].node);\n        }\n        else {\n            // When we create a new LView, we always reset the state of the instructions.\n            viewToRender = createLView(lView, getOrCreateEmbeddedTView(viewBlockId, consts, vars, containerTNode), null, 16 /* CheckAlways */, null, null);\n            if (lContainer[QUERIES]) {\n                viewToRender[QUERIES] = lContainer[QUERIES].createView();\n            }\n            var tParentNode = getIsParent() ? previousOrParentTNode :\n                previousOrParentTNode && previousOrParentTNode.parent;\n            assignTViewNodeToLView(viewToRender[TVIEW], tParentNode, viewBlockId, viewToRender);\n            enterView(viewToRender, viewToRender[TVIEW].node);\n        }\n        if (lContainer) {\n            if (isCreationMode(viewToRender)) {\n                // it is a new view, insert it into collection of views for a given container\n                insertView(viewToRender, lContainer, lContainer[ACTIVE_INDEX]);\n            }\n            lContainer[ACTIVE_INDEX]++;\n        }\n        return isCreationMode(viewToRender) ? 1 /* Create */ | 2 /* Update */ :\n            2 /* Update */;\n    }\n    /**\n     * Initialize the TView (e.g. static data) for the active embedded view.\n     *\n     * Each embedded view block must create or retrieve its own TView. Otherwise, the embedded view's\n     * static data for a particular node would overwrite the static data for a node in the view above\n     * it with the same index (since it's in the same template).\n     *\n     * @param viewIndex The index of the TView in TNode.tViews\n     * @param consts The number of nodes, local refs, and pipes in this template\n     * @param vars The number of bindings and pure function bindings in this template\n     * @param container The parent container in which to look for the view's static data\n     * @returns TView\n     */\n    function getOrCreateEmbeddedTView(viewIndex, consts, vars, parent) {\n        var tView = getLView()[TVIEW];\n        ngDevMode && assertNodeType(parent, 0 /* Container */);\n        var containerTViews = parent.tViews;\n        ngDevMode && assertDefined(containerTViews, 'TView expected');\n        ngDevMode && assertEqual(Array.isArray(containerTViews), true, 'TViews should be in an array');\n        if (viewIndex >= containerTViews.length || containerTViews[viewIndex] == null) {\n            containerTViews[viewIndex] = createTView(viewIndex, null, consts, vars, tView.directiveRegistry, tView.pipeRegistry, null, null);\n        }\n        return containerTViews[viewIndex];\n    }\n    /**\n     * Looks for a view with a given view block id inside a provided LContainer.\n     * Removes views that need to be deleted in the process.\n     *\n     * @param lContainer to search for views\n     * @param startIdx starting index in the views array to search from\n     * @param viewBlockId exact view block id to look for\n     */\n    function scanForView(lContainer, startIdx, viewBlockId) {\n        for (var i = startIdx + CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n            var viewAtPositionId = lContainer[i][TVIEW].id;\n            if (viewAtPositionId === viewBlockId) {\n                return lContainer[i];\n            }\n            else if (viewAtPositionId < viewBlockId) {\n                // found a view that should not be at this position - remove\n                removeView(lContainer, i - CONTAINER_HEADER_OFFSET);\n            }\n            else {\n                // found a view with id greater than the one we are searching for\n                // which means that required view doesn't exist and can't be found at\n                // later positions in the views array - stop the searchdef.cont here\n                break;\n            }\n        }\n        return null;\n    }\n    /**\n     * Marks the end of an embedded view.\n     *\n     * @codeGenApi\n     */\n    function ɵɵembeddedViewEnd() {\n        var lView = getLView();\n        var viewHost = lView[T_HOST];\n        if (isCreationMode(lView)) {\n            refreshDescendantViews(lView); // creation mode pass\n            lView[FLAGS] &= ~4 /* CreationMode */;\n        }\n        resetPreOrderHookFlags(lView);\n        refreshDescendantViews(lView); // update mode pass\n        var lContainer = lView[PARENT];\n        ngDevMode && assertLContainerOrUndefined(lContainer);\n        // It's always safe to run hooks here, as `leaveView` is not called during the 'finally' block\n        // of a try-catch-finally statement, so it can never be reached while unwinding the stack due to\n        // an error being thrown.\n        leaveView(lContainer[PARENT], /* safeToRunHooks */ true);\n        setPreviousOrParentTNode(viewHost, false);\n    }\n\n    /**\n     * Returns the current OpaqueViewState instance.\n     *\n     * Used in conjunction with the restoreView() instruction to save a snapshot\n     * of the current view and restore it when listeners are invoked. This allows\n     * walking the declaration view tree in listeners to get vars from parent views.\n     *\n     * @codeGenApi\n     */\n    function ɵɵgetCurrentView() {\n        return getLView();\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Determine if the argument is shaped like a Promise\n     */\n    function isPromise(obj) {\n        // allow any Promise/A+ compliant thenable.\n        // It's up to the caller to ensure that obj.then conforms to the spec\n        return !!obj && typeof obj.then === 'function';\n    }\n    /**\n     * Determine if the argument is an Observable\n     */\n    function isObservable(obj) {\n        // TODO: use isObservable once we update pass rxjs 6.1\n        // https://github.com/ReactiveX/rxjs/blob/master/CHANGELOG.md#610-2018-05-03\n        return !!obj && typeof obj.subscribe === 'function';\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Adds an event listener to the current node.\n     *\n     * If an output exists on one of the node's directives, it also subscribes to the output\n     * and saves the subscription for later cleanup.\n     *\n     * @param eventName Name of the event\n     * @param listenerFn The function to be called when event emits\n     * @param useCapture Whether or not to use capture in event listener\n     * @param eventTargetResolver Function that returns global target information in case this listener\n     * should be attached to a global object like window, document or body\n     *\n     * @codeGenApi\n     */\n    function ɵɵlistener(eventName, listenerFn, useCapture, eventTargetResolver) {\n        if (useCapture === void 0) { useCapture = false; }\n        listenerInternal(eventName, listenerFn, useCapture, eventTargetResolver);\n    }\n    /**\n    * Registers a synthetic host listener (e.g. `(@foo.start)`) on a component.\n    *\n    * This instruction is for compatibility purposes and is designed to ensure that a\n    * synthetic host listener (e.g. `@HostListener('@foo.start')`) properly gets rendered\n    * in the component's renderer. Normally all host listeners are evaluated with the\n    * parent component's renderer, but, in the case of animation @triggers, they need\n    * to be evaluated with the sub component's renderer (because that's where the\n    * animation triggers are defined).\n    *\n    * Do not use this instruction as a replacement for `listener`. This instruction\n    * only exists to ensure compatibility with the ViewEngine's host binding behavior.\n    *\n    * @param eventName Name of the event\n    * @param listenerFn The function to be called when event emits\n    * @param useCapture Whether or not to use capture in event listener\n    * @param eventTargetResolver Function that returns global target information in case this listener\n    * should be attached to a global object like window, document or body\n     *\n     * @codeGenApi\n    */\n    function ɵɵcomponentHostSyntheticListener(eventName, listenerFn, useCapture, eventTargetResolver) {\n        if (useCapture === void 0) { useCapture = false; }\n        listenerInternal(eventName, listenerFn, useCapture, eventTargetResolver, loadComponentRenderer);\n    }\n    /**\n     * A utility function that checks if a given element has already an event handler registered for an\n     * event with a specified name. The TView.cleanup data structure is used to find out which events\n     * are registered for a given element.\n     */\n    function findExistingListener(lView, eventName, tNodeIdx) {\n        var tView = lView[TVIEW];\n        var tCleanup = tView.cleanup;\n        if (tCleanup != null) {\n            for (var i = 0; i < tCleanup.length - 1; i += 2) {\n                var cleanupEventName = tCleanup[i];\n                if (cleanupEventName === eventName && tCleanup[i + 1] === tNodeIdx) {\n                    // We have found a matching event name on the same node but it might not have been\n                    // registered yet, so we must explicitly verify entries in the LView cleanup data\n                    // structures.\n                    var lCleanup = lView[CLEANUP];\n                    var listenerIdxInLCleanup = tCleanup[i + 2];\n                    return lCleanup.length > listenerIdxInLCleanup ? lCleanup[listenerIdxInLCleanup] : null;\n                }\n                // TView.cleanup can have a mix of 4-elements entries (for event handler cleanups) or\n                // 2-element entries (for directive and queries destroy hooks). As such we can encounter\n                // blocks of 4 or 2 items in the tView.cleanup and this is why we iterate over 2 elements\n                // first and jump another 2 elements if we detect listeners cleanup (4 elements). Also check\n                // documentation of TView.cleanup for more details of this data structure layout.\n                if (typeof cleanupEventName === 'string') {\n                    i += 2;\n                }\n            }\n        }\n        return null;\n    }\n    function listenerInternal(eventName, listenerFn, useCapture, eventTargetResolver, loadRendererFn) {\n        if (useCapture === void 0) { useCapture = false; }\n        var lView = getLView();\n        var tNode = getPreviousOrParentTNode();\n        var tView = lView[TVIEW];\n        var firstTemplatePass = tView.firstTemplatePass;\n        var tCleanup = firstTemplatePass && (tView.cleanup || (tView.cleanup = []));\n        ngDevMode && assertNodeOfPossibleTypes(tNode, 3 /* Element */, 0 /* Container */, 4 /* ElementContainer */);\n        var processOutputs = true;\n        // add native event listener - applicable to elements only\n        if (tNode.type === 3 /* Element */) {\n            var native = getNativeByTNode(tNode, lView);\n            var resolved = eventTargetResolver ? eventTargetResolver(native) : EMPTY_OBJ;\n            var target = resolved.target || native;\n            var renderer = loadRendererFn ? loadRendererFn(tNode, lView) : lView[RENDERER];\n            var lCleanup = getCleanup(lView);\n            var lCleanupIndex = lCleanup.length;\n            var idxOrTargetGetter = eventTargetResolver ?\n                function (_lView) { return eventTargetResolver(unwrapRNode(_lView[tNode.index])).target; } :\n                tNode.index;\n            // In order to match current behavior, native DOM event listeners must be added for all\n            // events (including outputs).\n            if (isProceduralRenderer(renderer)) {\n                // There might be cases where multiple directives on the same element try to register an event\n                // handler function for the same event. In this situation we want to avoid registration of\n                // several native listeners as each registration would be intercepted by NgZone and\n                // trigger change detection. This would mean that a single user action would result in several\n                // change detections being invoked. To avoid this situation we want to have only one call to\n                // native handler registration (for the same element and same type of event).\n                //\n                // In order to have just one native event handler in presence of multiple handler functions,\n                // we just register a first handler function as a native event listener and then chain\n                // (coalesce) other handler functions on top of the first native handler function.\n                var existingListener = null;\n                // Please note that the coalescing described here doesn't happen for events specifying an\n                // alternative target (ex. (document:click)) - this is to keep backward compatibility with the\n                // view engine.\n                // Also, we don't have to search for existing listeners is there are no directives\n                // matching on a given node as we can't register multiple event handlers for the same event in\n                // a template (this would mean having duplicate attributes).\n                if (!eventTargetResolver && hasDirectives(tNode)) {\n                    existingListener = findExistingListener(lView, eventName, tNode.index);\n                }\n                if (existingListener !== null) {\n                    // Attach a new listener at the head of the coalesced listeners list.\n                    listenerFn.__ngNextListenerFn__ = existingListener.__ngNextListenerFn__;\n                    existingListener.__ngNextListenerFn__ = listenerFn;\n                    processOutputs = false;\n                }\n                else {\n                    // The first argument of `listen` function in Procedural Renderer is:\n                    // - either a target name (as a string) in case of global target (window, document, body)\n                    // - or element reference (in all other cases)\n                    listenerFn = wrapListener(tNode, lView, listenerFn, false /** preventDefault */);\n                    var cleanupFn = renderer.listen(resolved.name || target, eventName, listenerFn);\n                    ngDevMode && ngDevMode.rendererAddEventListener++;\n                    lCleanup.push(listenerFn, cleanupFn);\n                    tCleanup && tCleanup.push(eventName, idxOrTargetGetter, lCleanupIndex, lCleanupIndex + 1);\n                }\n            }\n            else {\n                listenerFn = wrapListener(tNode, lView, listenerFn, true /** preventDefault */);\n                target.addEventListener(eventName, listenerFn, useCapture);\n                ngDevMode && ngDevMode.rendererAddEventListener++;\n                lCleanup.push(listenerFn);\n                tCleanup && tCleanup.push(eventName, idxOrTargetGetter, lCleanupIndex, useCapture);\n            }\n        }\n        // subscribe to directive outputs\n        if (tNode.outputs === undefined) {\n            // if we create TNode here, inputs must be undefined so we know they still need to be\n            // checked\n            tNode.outputs = generatePropertyAliases(tNode, 1 /* Output */);\n        }\n        var outputs = tNode.outputs;\n        var props;\n        if (processOutputs && outputs && (props = outputs[eventName])) {\n            var propsLength = props.length;\n            if (propsLength) {\n                var lCleanup = getCleanup(lView);\n                for (var i = 0; i < propsLength; i += 3) {\n                    var index = props[i];\n                    ngDevMode && assertDataInRange(lView, index);\n                    var minifiedName = props[i + 2];\n                    var directiveInstance = lView[index];\n                    var output = directiveInstance[minifiedName];\n                    if (ngDevMode && !isObservable(output)) {\n                        throw new Error(\"@Output \" + minifiedName + \" not initialized in '\" + directiveInstance.constructor.name + \"'.\");\n                    }\n                    var subscription = output.subscribe(listenerFn);\n                    var idx = lCleanup.length;\n                    lCleanup.push(listenerFn, subscription);\n                    tCleanup && tCleanup.push(eventName, tNode.index, idx, -(idx + 1));\n                }\n            }\n        }\n    }\n    function executeListenerWithErrorHandling(lView, listenerFn, e) {\n        try {\n            // Only explicitly returning false from a listener should preventDefault\n            return listenerFn(e) !== false;\n        }\n        catch (error) {\n            handleError(lView, error);\n            return false;\n        }\n    }\n    /**\n     * Wraps an event listener with a function that marks ancestors dirty and prevents default behavior,\n     * if applicable.\n     *\n     * @param tNode The TNode associated with this listener\n     * @param lView The LView that contains this listener\n     * @param listenerFn The listener function to call\n     * @param wrapWithPreventDefault Whether or not to prevent default behavior\n     * (the procedural renderer does this already, so in those cases, we should skip)\n     */\n    function wrapListener(tNode, lView, listenerFn, wrapWithPreventDefault) {\n        // Note: we are performing most of the work in the listener function itself\n        // to optimize listener registration.\n        return function wrapListenerIn_markDirtyAndPreventDefault(e) {\n            // In order to be backwards compatible with View Engine, events on component host nodes\n            // must also mark the component view itself dirty (i.e. the view that it owns).\n            var startView = tNode.flags & 1 /* isComponent */ ? getComponentViewByIndex(tNode.index, lView) : lView;\n            // See interfaces/view.ts for more on LViewFlags.ManualOnPush\n            if ((lView[FLAGS] & 32 /* ManualOnPush */) === 0) {\n                markViewDirty(startView);\n            }\n            var result = executeListenerWithErrorHandling(lView, listenerFn, e);\n            // A just-invoked listener function might have coalesced listeners so we need to check for\n            // their presence and invoke as needed.\n            var nextListenerFn = wrapListenerIn_markDirtyAndPreventDefault.__ngNextListenerFn__;\n            while (nextListenerFn) {\n                // We should prevent default if any of the listeners explicitly return false\n                result = executeListenerWithErrorHandling(lView, nextListenerFn, e) && result;\n                nextListenerFn = nextListenerFn.__ngNextListenerFn__;\n            }\n            if (wrapWithPreventDefault && result === false) {\n                e.preventDefault();\n                // Necessary for legacy browsers that don't support preventDefault (e.g. IE)\n                e.returnValue = false;\n            }\n            return result;\n        };\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Retrieves a context at the level specified and saves it as the global, contextViewData.\n     * Will get the next level up if level is not specified.\n     *\n     * This is used to save contexts of parent views so they can be bound in embedded views, or\n     * in conjunction with reference() to bind a ref from a parent view.\n     *\n     * @param level The relative level of the view from which to grab context compared to contextVewData\n     * @returns context\n     *\n     * @codeGenApi\n     */\n    function ɵɵnextContext(level) {\n        if (level === void 0) { level = 1; }\n        return nextContextImpl(level);\n    }\n\n    /**\n     * Checks a given node against matching projection slots and returns the\n     * determined slot index. Returns \"null\" if no slot matched the given node.\n     *\n     * This function takes into account the parsed ngProjectAs selector from the\n     * node's attributes. If present, it will check whether the ngProjectAs selector\n     * matches any of the projection slot selectors.\n     */\n    function matchingProjectionSlotIndex(tNode, projectionSlots) {\n        var wildcardNgContentIndex = null;\n        var ngProjectAsAttrVal = getProjectAsAttrValue(tNode);\n        for (var i = 0; i < projectionSlots.length; i++) {\n            var slotValue = projectionSlots[i];\n            // The last wildcard projection slot should match all nodes which aren't matching\n            // any selector. This is necessary to be backwards compatible with view engine.\n            if (slotValue === '*') {\n                wildcardNgContentIndex = i;\n                continue;\n            }\n            // If we ran into an `ngProjectAs` attribute, we should match its parsed selector\n            // to the list of selectors, otherwise we fall back to matching against the node.\n            if (ngProjectAsAttrVal === null ?\n                isNodeMatchingSelectorList(tNode, slotValue, /* isProjectionMode */ true) :\n                isSelectorInSelectorList(ngProjectAsAttrVal, slotValue)) {\n                return i; // first matching selector \"captures\" a given node\n            }\n        }\n        return wildcardNgContentIndex;\n    }\n    /**\n     * Instruction to distribute projectable nodes among <ng-content> occurrences in a given template.\n     * It takes all the selectors from the entire component's template and decides where\n     * each projected node belongs (it re-distributes nodes among \"buckets\" where each \"bucket\" is\n     * backed by a selector).\n     *\n     * This function requires CSS selectors to be provided in 2 forms: parsed (by a compiler) and text,\n     * un-parsed form.\n     *\n     * The parsed form is needed for efficient matching of a node against a given CSS selector.\n     * The un-parsed, textual form is needed for support of the ngProjectAs attribute.\n     *\n     * Having a CSS selector in 2 different formats is not ideal, but alternatives have even more\n     * drawbacks:\n     * - having only a textual form would require runtime parsing of CSS selectors;\n     * - we can't have only a parsed as we can't re-construct textual form from it (as entered by a\n     * template author).\n     *\n     * @param projectionSlots? A collection of projection slots. A projection slot can be based\n     *        on a parsed CSS selectors or set to the wildcard selector (\"*\") in order to match\n     *        all nodes which do not match any selector. If not specified, a single wildcard\n     *        selector projection slot will be defined.\n     *\n     * @codeGenApi\n     */\n    function ɵɵprojectionDef(projectionSlots) {\n        var componentNode = findComponentView(getLView())[T_HOST];\n        if (!componentNode.projection) {\n            // If no explicit projection slots are defined, fall back to a single\n            // projection slot with the wildcard selector.\n            var numProjectionSlots = projectionSlots ? projectionSlots.length : 1;\n            var projectionHeads = componentNode.projection =\n                new Array(numProjectionSlots).fill(null);\n            var tails = projectionHeads.slice();\n            var componentChild = componentNode.child;\n            while (componentChild !== null) {\n                var slotIndex = projectionSlots ? matchingProjectionSlotIndex(componentChild, projectionSlots) : 0;\n                if (slotIndex !== null) {\n                    if (tails[slotIndex]) {\n                        tails[slotIndex].projectionNext = componentChild;\n                    }\n                    else {\n                        projectionHeads[slotIndex] = componentChild;\n                    }\n                    tails[slotIndex] = componentChild;\n                }\n                componentChild = componentChild.next;\n            }\n        }\n    }\n    var delayProjection = false;\n    function setDelayProjection(value) {\n        delayProjection = value;\n    }\n    /**\n     * Inserts previously re-distributed projected nodes. This instruction must be preceded by a call\n     * to the projectionDef instruction.\n     *\n     * @param nodeIndex\n     * @param selectorIndex:\n     *        - 0 when the selector is `*` (or unspecified as this is the default value),\n     *        - 1 based index of the selector from the {@link projectionDef}\n     *\n     * @codeGenApi\n    */\n    function ɵɵprojection(nodeIndex, selectorIndex, attrs) {\n        if (selectorIndex === void 0) { selectorIndex = 0; }\n        var lView = getLView();\n        var tProjectionNode = getOrCreateTNode(lView[TVIEW], lView[T_HOST], nodeIndex, 1 /* Projection */, null, attrs || null);\n        // We can't use viewData[HOST_NODE] because projection nodes can be nested in embedded views.\n        if (tProjectionNode.projection === null)\n            tProjectionNode.projection = selectorIndex;\n        // `<ng-content>` has no content\n        setIsNotParent();\n        // We might need to delay the projection of nodes if they are in the middle of an i18n block\n        if (!delayProjection) {\n            // re-distribution of projectable nodes is stored on a component's view level\n            appendProjectedNodes(lView, tProjectionNode, selectorIndex, findComponentView(lView));\n        }\n    }\n\n    /**\n     *\n     * Update an interpolated property on an element with a lone bound value\n     *\n     * Used when the value passed to a property has 1 interpolated value in it, an no additional text\n     * surrounds that interpolated value:\n     *\n     * ```html\n     * <div title=\"{{v0}}\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵpropertyInterpolate('title', v0);\n     * ```\n     *\n     * If the property name also exists as an input property on one of the element's directives,\n     * the component property will be set instead of the element property. This check must\n     * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n     *\n     * @param propName The name of the property to update\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵpropertyInterpolate(propName, v0, sanitizer) {\n        ɵɵpropertyInterpolate1(propName, '', v0, '', sanitizer);\n        return ɵɵpropertyInterpolate;\n    }\n    /**\n     *\n     * Update an interpolated property on an element with single bound value surrounded by text.\n     *\n     * Used when the value passed to a property has 1 interpolated value in it:\n     *\n     * ```html\n     * <div title=\"prefix{{v0}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵpropertyInterpolate1('title', 'prefix', v0, 'suffix');\n     * ```\n     *\n     * If the property name also exists as an input property on one of the element's directives,\n     * the component property will be set instead of the element property. This check must\n     * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n     *\n     * @param propName The name of the property to update\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵpropertyInterpolate1(propName, prefix, v0, suffix, sanitizer) {\n        var index = getSelectedIndex();\n        var interpolatedValue = interpolation1(getLView(), prefix, v0, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            elementPropertyInternal(index, propName, interpolatedValue, sanitizer);\n        }\n        return ɵɵpropertyInterpolate1;\n    }\n    /**\n     *\n     * Update an interpolated property on an element with 2 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 2 interpolated values in it:\n     *\n     * ```html\n     * <div title=\"prefix{{v0}}-{{v1}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵpropertyInterpolate2('title', 'prefix', v0, '-', v1, 'suffix');\n     * ```\n     *\n     * If the property name also exists as an input property on one of the element's directives,\n     * the component property will be set instead of the element property. This check must\n     * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n     *\n     * @param propName The name of the property to update\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵpropertyInterpolate2(propName, prefix, v0, i0, v1, suffix, sanitizer) {\n        var index = getSelectedIndex();\n        var interpolatedValue = interpolation2(getLView(), prefix, v0, i0, v1, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            elementPropertyInternal(index, propName, interpolatedValue, sanitizer);\n        }\n        return ɵɵpropertyInterpolate2;\n    }\n    /**\n     *\n     * Update an interpolated property on an element with 3 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 3 interpolated values in it:\n     *\n     * ```html\n     * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵpropertyInterpolate3(\n     * 'title', 'prefix', v0, '-', v1, '-', v2, 'suffix');\n     * ```\n     *\n     * If the property name also exists as an input property on one of the element's directives,\n     * the component property will be set instead of the element property. This check must\n     * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n     *\n     * @param propName The name of the property to update\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵpropertyInterpolate3(propName, prefix, v0, i0, v1, i1, v2, suffix, sanitizer) {\n        var index = getSelectedIndex();\n        var interpolatedValue = interpolation3(getLView(), prefix, v0, i0, v1, i1, v2, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            elementPropertyInternal(index, propName, interpolatedValue, sanitizer);\n        }\n        return ɵɵpropertyInterpolate3;\n    }\n    /**\n     *\n     * Update an interpolated property on an element with 4 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 4 interpolated values in it:\n     *\n     * ```html\n     * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵpropertyInterpolate4(\n     * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n     * ```\n     *\n     * If the property name also exists as an input property on one of the element's directives,\n     * the component property will be set instead of the element property. This check must\n     * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n     *\n     * @param propName The name of the property to update\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param i2 Static value used for concatenation only.\n     * @param v3 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵpropertyInterpolate4(propName, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, sanitizer) {\n        var index = getSelectedIndex();\n        var interpolatedValue = interpolation4(getLView(), prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            elementPropertyInternal(index, propName, interpolatedValue, sanitizer);\n        }\n        return ɵɵpropertyInterpolate4;\n    }\n    /**\n     *\n     * Update an interpolated property on an element with 5 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 5 interpolated values in it:\n     *\n     * ```html\n     * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵpropertyInterpolate5(\n     * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n     * ```\n     *\n     * If the property name also exists as an input property on one of the element's directives,\n     * the component property will be set instead of the element property. This check must\n     * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n     *\n     * @param propName The name of the property to update\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param i2 Static value used for concatenation only.\n     * @param v3 Value checked for change.\n     * @param i3 Static value used for concatenation only.\n     * @param v4 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵpropertyInterpolate5(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, sanitizer) {\n        var index = getSelectedIndex();\n        var interpolatedValue = interpolation5(getLView(), prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            elementPropertyInternal(index, propName, interpolatedValue, sanitizer);\n        }\n        return ɵɵpropertyInterpolate5;\n    }\n    /**\n     *\n     * Update an interpolated property on an element with 6 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 6 interpolated values in it:\n     *\n     * ```html\n     * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵpropertyInterpolate6(\n     *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n     * ```\n     *\n     * If the property name also exists as an input property on one of the element's directives,\n     * the component property will be set instead of the element property. This check must\n     * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n     *\n     * @param propName The name of the property to update\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param i2 Static value used for concatenation only.\n     * @param v3 Value checked for change.\n     * @param i3 Static value used for concatenation only.\n     * @param v4 Value checked for change.\n     * @param i4 Static value used for concatenation only.\n     * @param v5 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵpropertyInterpolate6(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, sanitizer) {\n        var index = getSelectedIndex();\n        var interpolatedValue = interpolation6(getLView(), prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            elementPropertyInternal(index, propName, interpolatedValue, sanitizer);\n        }\n        return ɵɵpropertyInterpolate6;\n    }\n    /**\n     *\n     * Update an interpolated property on an element with 7 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 7 interpolated values in it:\n     *\n     * ```html\n     * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵpropertyInterpolate7(\n     *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n     * ```\n     *\n     * If the property name also exists as an input property on one of the element's directives,\n     * the component property will be set instead of the element property. This check must\n     * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n     *\n     * @param propName The name of the property to update\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param i2 Static value used for concatenation only.\n     * @param v3 Value checked for change.\n     * @param i3 Static value used for concatenation only.\n     * @param v4 Value checked for change.\n     * @param i4 Static value used for concatenation only.\n     * @param v5 Value checked for change.\n     * @param i5 Static value used for concatenation only.\n     * @param v6 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵpropertyInterpolate7(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, sanitizer) {\n        var index = getSelectedIndex();\n        var interpolatedValue = interpolation7(getLView(), prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            elementPropertyInternal(index, propName, interpolatedValue, sanitizer);\n        }\n        return ɵɵpropertyInterpolate7;\n    }\n    /**\n     *\n     * Update an interpolated property on an element with 8 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 8 interpolated values in it:\n     *\n     * ```html\n     * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵpropertyInterpolate8(\n     *  'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n     * ```\n     *\n     * If the property name also exists as an input property on one of the element's directives,\n     * the component property will be set instead of the element property. This check must\n     * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n     *\n     * @param propName The name of the property to update\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param i2 Static value used for concatenation only.\n     * @param v3 Value checked for change.\n     * @param i3 Static value used for concatenation only.\n     * @param v4 Value checked for change.\n     * @param i4 Static value used for concatenation only.\n     * @param v5 Value checked for change.\n     * @param i5 Static value used for concatenation only.\n     * @param v6 Value checked for change.\n     * @param i6 Static value used for concatenation only.\n     * @param v7 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵpropertyInterpolate8(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, sanitizer) {\n        var index = getSelectedIndex();\n        var interpolatedValue = interpolation8(getLView(), prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            elementPropertyInternal(index, propName, interpolatedValue, sanitizer);\n        }\n        return ɵɵpropertyInterpolate8;\n    }\n    /**\n     * Update an interpolated property on an element with 8 or more bound values surrounded by text.\n     *\n     * Used when the number of interpolated values exceeds 7.\n     *\n     * ```html\n     * <div\n     *  title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵpropertyInterpolateV(\n     *  'title', ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n     *  'suffix']);\n     * ```\n     *\n     * If the property name also exists as an input property on one of the element's directives,\n     * the component property will be set instead of the element property. This check must\n     * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n     *\n     * @param propName The name of the property to update.\n     * @param values The a collection of values and the strings inbetween those values, beginning with a\n     * string prefix and ending with a string suffix.\n     * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵpropertyInterpolateV(propName, values, sanitizer) {\n        var index = getSelectedIndex();\n        var interpolatedValue = interpolationV(getLView(), values);\n        if (interpolatedValue !== NO_CHANGE) {\n            elementPropertyInternal(index, propName, interpolatedValue, sanitizer);\n        }\n        return ɵɵpropertyInterpolateV;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Create static text node\n     *\n     * @param index Index of the node in the data array\n     * @param value Value to write. This value will be stringified.\n     *\n     * @codeGenApi\n     */\n    function ɵɵtext(index, value) {\n        var lView = getLView();\n        ngDevMode && assertEqual(lView[BINDING_INDEX], lView[TVIEW].bindingStartIndex, 'text nodes should be created before any bindings');\n        ngDevMode && ngDevMode.rendererCreateTextNode++;\n        ngDevMode && assertDataInRange(lView, index + HEADER_OFFSET);\n        var textNative = lView[index + HEADER_OFFSET] = createTextNode(value, lView[RENDERER]);\n        ngDevMode && ngDevMode.rendererSetText++;\n        var tNode = getOrCreateTNode(lView[TVIEW], lView[T_HOST], index, 3 /* Element */, null, null);\n        // Text nodes are self closing.\n        setIsNotParent();\n        appendChild(textNative, tNode, lView);\n    }\n    /**\n     * Create text node with binding\n     * Bindings should be handled externally with the proper interpolation(1-8) method\n     *\n     * @param value Stringified value to write.\n     *\n     * @codeGenApi\n     */\n    function ɵɵtextBinding(value) {\n        var lView = getLView();\n        var index = getSelectedIndex();\n        var bound = bind(lView, value);\n        if (bound !== NO_CHANGE) {\n            textBindingInternal(lView, index, renderStringify(bound));\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     *\n     * Update text content with a lone bound value\n     *\n     * Used when a text node has 1 interpolated value in it, an no additional text\n     * surrounds that interpolated value:\n     *\n     * ```html\n     * <div>{{v0}}</div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵtextInterpolate(v0);\n     * ```\n     * @returns itself, so that it may be chained.\n     * @see textInterpolateV\n     * @codeGenApi\n     */\n    function ɵɵtextInterpolate(v0) {\n        ɵɵtextInterpolate1('', v0, '');\n        return ɵɵtextInterpolate;\n    }\n    /**\n     *\n     * Update text content with single bound value surrounded by other text.\n     *\n     * Used when a text node has 1 interpolated value in it:\n     *\n     * ```html\n     * <div>prefix{{v0}}suffix</div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵtextInterpolate1('prefix', v0, 'suffix');\n     * ```\n     * @returns itself, so that it may be chained.\n     * @see textInterpolateV\n     * @codeGenApi\n     */\n    function ɵɵtextInterpolate1(prefix, v0, suffix) {\n        var index = getSelectedIndex();\n        var lView = getLView();\n        var interpolated = interpolation1(lView, prefix, v0, suffix);\n        if (interpolated !== NO_CHANGE) {\n            textBindingInternal(lView, index, interpolated);\n        }\n        return ɵɵtextInterpolate1;\n    }\n    /**\n     *\n     * Update text content with 2 bound values surrounded by other text.\n     *\n     * Used when a text node has 2 interpolated values in it:\n     *\n     * ```html\n     * <div>prefix{{v0}}-{{v1}}suffix</div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵtextInterpolate2('prefix', v0, '-', v1, 'suffix');\n     * ```\n     * @returns itself, so that it may be chained.\n     * @see textInterpolateV\n     * @codeGenApi\n     */\n    function ɵɵtextInterpolate2(prefix, v0, i0, v1, suffix) {\n        var index = getSelectedIndex();\n        var lView = getLView();\n        var interpolated = interpolation2(lView, prefix, v0, i0, v1, suffix);\n        if (interpolated !== NO_CHANGE) {\n            textBindingInternal(lView, index, interpolated);\n        }\n        return ɵɵtextInterpolate2;\n    }\n    /**\n     *\n     * Update text content with 3 bound values surrounded by other text.\n     *\n     * Used when a text node has 3 interpolated values in it:\n     *\n     * ```html\n     * <div>prefix{{v0}}-{{v1}}-{{v2}}suffix</div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵtextInterpolate3(\n     * 'prefix', v0, '-', v1, '-', v2, 'suffix');\n     * ```\n     * @returns itself, so that it may be chained.\n     * @see textInterpolateV\n     * @codeGenApi\n     */\n    function ɵɵtextInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {\n        var index = getSelectedIndex();\n        var lView = getLView();\n        var interpolated = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n        if (interpolated !== NO_CHANGE) {\n            textBindingInternal(lView, index, interpolated);\n        }\n        return ɵɵtextInterpolate3;\n    }\n    /**\n     *\n     * Update text content with 4 bound values surrounded by other text.\n     *\n     * Used when a text node has 4 interpolated values in it:\n     *\n     * ```html\n     * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix</div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵtextInterpolate4(\n     * 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n     * ```\n     * @returns itself, so that it may be chained.\n     * @see ɵɵtextInterpolateV\n     * @codeGenApi\n     */\n    function ɵɵtextInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\n        var index = getSelectedIndex();\n        var lView = getLView();\n        var interpolated = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n        if (interpolated !== NO_CHANGE) {\n            textBindingInternal(lView, index, interpolated);\n        }\n        return ɵɵtextInterpolate4;\n    }\n    /**\n     *\n     * Update text content with 5 bound values surrounded by other text.\n     *\n     * Used when a text node has 5 interpolated values in it:\n     *\n     * ```html\n     * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix</div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵtextInterpolate5(\n     * 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n     * ```\n     * @returns itself, so that it may be chained.\n     * @see textInterpolateV\n     * @codeGenApi\n     */\n    function ɵɵtextInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\n        var index = getSelectedIndex();\n        var lView = getLView();\n        var interpolated = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n        if (interpolated !== NO_CHANGE) {\n            textBindingInternal(lView, index, interpolated);\n        }\n        return ɵɵtextInterpolate5;\n    }\n    /**\n     *\n     * Update text content with 6 bound values surrounded by other text.\n     *\n     * Used when a text node has 6 interpolated values in it:\n     *\n     * ```html\n     * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix</div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵtextInterpolate6(\n     *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n     * ```\n     *\n     * @param i4 Static value used for concatenation only.\n     * @param v5 Value checked for change. @returns itself, so that it may be chained.\n     * @see textInterpolateV\n     * @codeGenApi\n     */\n    function ɵɵtextInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\n        var index = getSelectedIndex();\n        var lView = getLView();\n        var interpolated = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n        if (interpolated !== NO_CHANGE) {\n            textBindingInternal(lView, index, interpolated);\n        }\n        return ɵɵtextInterpolate6;\n    }\n    /**\n     *\n     * Update text content with 7 bound values surrounded by other text.\n     *\n     * Used when a text node has 7 interpolated values in it:\n     *\n     * ```html\n     * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix</div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵtextInterpolate7(\n     *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n     * ```\n     * @returns itself, so that it may be chained.\n     * @see textInterpolateV\n     * @codeGenApi\n     */\n    function ɵɵtextInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\n        var index = getSelectedIndex();\n        var lView = getLView();\n        var interpolated = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n        if (interpolated !== NO_CHANGE) {\n            textBindingInternal(lView, index, interpolated);\n        }\n        return ɵɵtextInterpolate7;\n    }\n    /**\n     *\n     * Update text content with 8 bound values surrounded by other text.\n     *\n     * Used when a text node has 8 interpolated values in it:\n     *\n     * ```html\n     * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix</div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵtextInterpolate8(\n     *  'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n     * ```\n     * @returns itself, so that it may be chained.\n     * @see textInterpolateV\n     * @codeGenApi\n     */\n    function ɵɵtextInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\n        var index = getSelectedIndex();\n        var lView = getLView();\n        var interpolated = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n        if (interpolated !== NO_CHANGE) {\n            textBindingInternal(lView, index, interpolated);\n        }\n        return ɵɵtextInterpolate8;\n    }\n    /**\n     * Update text content with 9 or more bound values other surrounded by text.\n     *\n     * Used when the number of interpolated values exceeds 8.\n     *\n     * ```html\n     * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix</div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵtextInterpolateV(\n     *  ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n     *  'suffix']);\n     * ```\n     *.\n     * @param values The a collection of values and the strings in between those values, beginning with\n     * a string prefix and ending with a string suffix.\n     * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n     *\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵtextInterpolateV(values) {\n        var index = getSelectedIndex();\n        var lView = getLView();\n        var interpolated = interpolationV(lView, values);\n        if (interpolated !== NO_CHANGE) {\n            textBindingInternal(lView, index, interpolated);\n        }\n        return ɵɵtextInterpolateV;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     *\n     * Update an interpolated class on an element with single bound value surrounded by text.\n     *\n     * Used when the value passed to a property has 1 interpolated value in it:\n     *\n     * ```html\n     * <div class=\"prefix{{v0}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵclassMapInterpolate1('prefix', v0, 'suffix');\n     * ```\n     *\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @codeGenApi\n     */\n    function ɵɵclassMapInterpolate1(prefix, v0, suffix) {\n        var lView = getLView();\n        var interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            classMapInternal(lView, getSelectedIndex(), getActiveDirectiveStylingIndex$1(), interpolatedValue);\n        }\n    }\n    /**\n     *\n     * Update an interpolated class on an element with 2 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 2 interpolated values in it:\n     *\n     * ```html\n     * <div class=\"prefix{{v0}}-{{v1}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵclassMapInterpolate2('prefix', v0, '-', v1, 'suffix');\n     * ```\n     *\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @codeGenApi\n     */\n    function ɵɵclassMapInterpolate2(prefix, v0, i0, v1, suffix) {\n        var lView = getLView();\n        var interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            classMapInternal(lView, getSelectedIndex(), getActiveDirectiveStylingIndex$1(), interpolatedValue);\n        }\n    }\n    /**\n     *\n     * Update an interpolated class on an element with 3 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 3 interpolated values in it:\n     *\n     * ```html\n     * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵclassMapInterpolate3(\n     * 'prefix', v0, '-', v1, '-', v2, 'suffix');\n     * ```\n     *\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @codeGenApi\n     */\n    function ɵɵclassMapInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {\n        var lView = getLView();\n        var interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            classMapInternal(lView, getSelectedIndex(), getActiveDirectiveStylingIndex$1(), interpolatedValue);\n        }\n    }\n    /**\n     *\n     * Update an interpolated class on an element with 4 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 4 interpolated values in it:\n     *\n     * ```html\n     * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵclassMapInterpolate4(\n     * 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n     * ```\n     *\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param i2 Static value used for concatenation only.\n     * @param v3 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @codeGenApi\n     */\n    function ɵɵclassMapInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\n        var lView = getLView();\n        var interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            classMapInternal(lView, getSelectedIndex(), getActiveDirectiveStylingIndex$1(), interpolatedValue);\n        }\n    }\n    /**\n     *\n     * Update an interpolated class on an element with 5 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 5 interpolated values in it:\n     *\n     * ```html\n     * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵclassMapInterpolate5(\n     * 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n     * ```\n     *\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param i2 Static value used for concatenation only.\n     * @param v3 Value checked for change.\n     * @param i3 Static value used for concatenation only.\n     * @param v4 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @codeGenApi\n     */\n    function ɵɵclassMapInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\n        var lView = getLView();\n        var interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            classMapInternal(lView, getSelectedIndex(), getActiveDirectiveStylingIndex$1(), interpolatedValue);\n        }\n    }\n    /**\n     *\n     * Update an interpolated class on an element with 6 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 6 interpolated values in it:\n     *\n     * ```html\n     * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵclassMapInterpolate6(\n     *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n     * ```\n     *\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param i2 Static value used for concatenation only.\n     * @param v3 Value checked for change.\n     * @param i3 Static value used for concatenation only.\n     * @param v4 Value checked for change.\n     * @param i4 Static value used for concatenation only.\n     * @param v5 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @codeGenApi\n     */\n    function ɵɵclassMapInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\n        var lView = getLView();\n        var interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            classMapInternal(lView, getSelectedIndex(), getActiveDirectiveStylingIndex$1(), interpolatedValue);\n        }\n    }\n    /**\n     *\n     * Update an interpolated class on an element with 7 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 7 interpolated values in it:\n     *\n     * ```html\n     * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵclassMapInterpolate7(\n     *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n     * ```\n     *\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param i2 Static value used for concatenation only.\n     * @param v3 Value checked for change.\n     * @param i3 Static value used for concatenation only.\n     * @param v4 Value checked for change.\n     * @param i4 Static value used for concatenation only.\n     * @param v5 Value checked for change.\n     * @param i5 Static value used for concatenation only.\n     * @param v6 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @codeGenApi\n     */\n    function ɵɵclassMapInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\n        var lView = getLView();\n        var interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            classMapInternal(lView, getSelectedIndex(), getActiveDirectiveStylingIndex$1(), interpolatedValue);\n        }\n    }\n    /**\n     *\n     * Update an interpolated class on an element with 8 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 8 interpolated values in it:\n     *\n     * ```html\n     * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵclassMapInterpolate8(\n     *  'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n     * ```\n     *\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param i2 Static value used for concatenation only.\n     * @param v3 Value checked for change.\n     * @param i3 Static value used for concatenation only.\n     * @param v4 Value checked for change.\n     * @param i4 Static value used for concatenation only.\n     * @param v5 Value checked for change.\n     * @param i5 Static value used for concatenation only.\n     * @param v6 Value checked for change.\n     * @param i6 Static value used for concatenation only.\n     * @param v7 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @codeGenApi\n     */\n    function ɵɵclassMapInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\n        var lView = getLView();\n        var interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            classMapInternal(lView, getSelectedIndex(), getActiveDirectiveStylingIndex$1(), interpolatedValue);\n        }\n    }\n    /**\n     * Update an interpolated class on an element with 8 or more bound values surrounded by text.\n     *\n     * Used when the number of interpolated values exceeds 7.\n     *\n     * ```html\n     * <div\n     *  class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵclassMapInterpolateV(\n     *  ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n     *  'suffix']);\n     * ```\n     *.\n     * @param values The a collection of values and the strings in-between those values, beginning with\n     * a string prefix and ending with a string suffix.\n     * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n     * @codeGenApi\n     */\n    function ɵɵclassMapInterpolateV(values) {\n        var lView = getLView();\n        var interpolatedValue = interpolationV(lView, values);\n        if (interpolatedValue !== NO_CHANGE) {\n            classMapInternal(lView, getSelectedIndex(), getActiveDirectiveStylingIndex$1(), interpolatedValue);\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     *\n     * Update an interpolated style property on an element with single bound value surrounded by text.\n     *\n     * Used when the value passed to a property has 1 interpolated value in it:\n     *\n     * ```html\n     * <div style.color=\"prefix{{v0}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵstylePropInterpolate1(0, 'prefix', v0, 'suffix');\n     * ```\n     *\n     * @param styleIndex Index of style to update. This index value refers to the\n     *        index of the style in the style bindings array that was passed into\n     *        `styling`.\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n     * @param forceOverride Whether or not to update the styling value immediately.\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵstylePropInterpolate1(styleIndex, prefix, v0, suffix, valueSuffix, forceOverride) {\n        var lView = getLView();\n        var interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            stylePropInternal(lView, getSelectedIndex(), styleIndex, getActiveDirectiveStylingIndex$1(), interpolatedValue, valueSuffix, forceOverride);\n        }\n        return ɵɵstylePropInterpolate1;\n    }\n    /**\n     *\n     * Update an interpolated style property on an element with 2 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 2 interpolated values in it:\n     *\n     * ```html\n     * <div style.color=\"prefix{{v0}}-{{v1}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵstylePropInterpolate2(0, 'prefix', v0, '-', v1, 'suffix');\n     * ```\n     *\n     * @param styleIndex Index of style to update. This index value refers to the\n     *        index of the style in the style bindings array that was passed into\n     *        `styling`.\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n     * @param forceOverride Whether or not to update the styling value immediately.\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵstylePropInterpolate2(styleIndex, prefix, v0, i0, v1, suffix, valueSuffix, forceOverride) {\n        var lView = getLView();\n        var interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            stylePropInternal(lView, getSelectedIndex(), styleIndex, getActiveDirectiveStylingIndex$1(), interpolatedValue, valueSuffix, forceOverride);\n        }\n        return ɵɵstylePropInterpolate2;\n    }\n    /**\n     *\n     * Update an interpolated style property on an element with 3 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 3 interpolated values in it:\n     *\n     * ```html\n     * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵstylePropInterpolate3(0, 'prefix', v0, '-', v1, '-', v2, 'suffix');\n     * ```\n     *\n     * @param styleIndex Index of style to update. This index value refers to the\n     *        index of the style in the style bindings array that was passed into\n     *        `styling`.\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n     * @param forceOverride Whether or not to update the styling value immediately.\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵstylePropInterpolate3(styleIndex, prefix, v0, i0, v1, i1, v2, suffix, valueSuffix, forceOverride) {\n        var lView = getLView();\n        var interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            stylePropInternal(lView, getSelectedIndex(), styleIndex, getActiveDirectiveStylingIndex$1(), interpolatedValue, valueSuffix, forceOverride);\n        }\n        return ɵɵstylePropInterpolate3;\n    }\n    /**\n     *\n     * Update an interpolated style property on an element with 4 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 4 interpolated values in it:\n     *\n     * ```html\n     * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵstylePropInterpolate4(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n     * ```\n     *\n     * @param styleIndex Index of style to update. This index value refers to the\n     *        index of the style in the style bindings array that was passed into\n     *        `styling`.\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param i2 Static value used for concatenation only.\n     * @param v3 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n     * @param forceOverride Whether or not to update the styling value immediately.\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵstylePropInterpolate4(styleIndex, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, valueSuffix, forceOverride) {\n        var lView = getLView();\n        var interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            stylePropInternal(lView, getSelectedIndex(), styleIndex, getActiveDirectiveStylingIndex$1(), interpolatedValue, valueSuffix, forceOverride);\n        }\n        return ɵɵstylePropInterpolate4;\n    }\n    /**\n     *\n     * Update an interpolated style property on an element with 5 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 5 interpolated values in it:\n     *\n     * ```html\n     * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵstylePropInterpolate5(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n     * ```\n     *\n     * @param styleIndex Index of style to update. This index value refers to the\n     *        index of the style in the style bindings array that was passed into\n     *        `styling`.\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param i2 Static value used for concatenation only.\n     * @param v3 Value checked for change.\n     * @param i3 Static value used for concatenation only.\n     * @param v4 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n     * @param forceOverride Whether or not to update the styling value immediately.\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵstylePropInterpolate5(styleIndex, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, valueSuffix, forceOverride) {\n        var lView = getLView();\n        var interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            stylePropInternal(lView, getSelectedIndex(), styleIndex, getActiveDirectiveStylingIndex$1(), interpolatedValue, valueSuffix, forceOverride);\n        }\n        return ɵɵstylePropInterpolate5;\n    }\n    /**\n     *\n     * Update an interpolated style property on an element with 6 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 6 interpolated values in it:\n     *\n     * ```html\n     * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵstylePropInterpolate6(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n     * ```\n     *\n     * @param styleIndex Index of style to update. This index value refers to the\n     *        index of the style in the style bindings array that was passed into\n     *        `styling`.\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param i2 Static value used for concatenation only.\n     * @param v3 Value checked for change.\n     * @param i3 Static value used for concatenation only.\n     * @param v4 Value checked for change.\n     * @param i4 Static value used for concatenation only.\n     * @param v5 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n     * @param forceOverride Whether or not to update the styling value immediately.\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵstylePropInterpolate6(styleIndex, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, valueSuffix, forceOverride) {\n        var lView = getLView();\n        var interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            stylePropInternal(lView, getSelectedIndex(), styleIndex, getActiveDirectiveStylingIndex$1(), interpolatedValue, valueSuffix, forceOverride);\n        }\n        return ɵɵstylePropInterpolate6;\n    }\n    /**\n     *\n     * Update an interpolated style property on an element with 7 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 7 interpolated values in it:\n     *\n     * ```html\n     * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵstylePropInterpolate7(\n     *    0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n     * ```\n     *\n     * @param styleIndex Index of style to update. This index value refers to the\n     *        index of the style in the style bindings array that was passed into\n     *        `styling`.\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param i2 Static value used for concatenation only.\n     * @param v3 Value checked for change.\n     * @param i3 Static value used for concatenation only.\n     * @param v4 Value checked for change.\n     * @param i4 Static value used for concatenation only.\n     * @param v5 Value checked for change.\n     * @param i5 Static value used for concatenation only.\n     * @param v6 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n     * @param forceOverride Whether or not to update the styling value immediately.\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵstylePropInterpolate7(styleIndex, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, valueSuffix, forceOverride) {\n        var lView = getLView();\n        var interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            stylePropInternal(lView, getSelectedIndex(), styleIndex, getActiveDirectiveStylingIndex$1(), interpolatedValue, valueSuffix, forceOverride);\n        }\n        return ɵɵstylePropInterpolate7;\n    }\n    /**\n     *\n     * Update an interpolated style property on an element with 8 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 8 interpolated values in it:\n     *\n     * ```html\n     * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵstylePropInterpolate8(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6,\n     * '-', v7, 'suffix');\n     * ```\n     *\n     * @param styleIndex Index of style to update. This index value refers to the\n     *        index of the style in the style bindings array that was passed into\n     *        `styling`.\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param i2 Static value used for concatenation only.\n     * @param v3 Value checked for change.\n     * @param i3 Static value used for concatenation only.\n     * @param v4 Value checked for change.\n     * @param i4 Static value used for concatenation only.\n     * @param v5 Value checked for change.\n     * @param i5 Static value used for concatenation only.\n     * @param v6 Value checked for change.\n     * @param i6 Static value used for concatenation only.\n     * @param v7 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n     * @param forceOverride Whether or not to update the styling value immediately.\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵstylePropInterpolate8(styleIndex, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, valueSuffix, forceOverride) {\n        var lView = getLView();\n        var interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            stylePropInternal(lView, getSelectedIndex(), styleIndex, getActiveDirectiveStylingIndex$1(), interpolatedValue, valueSuffix, forceOverride);\n        }\n        return ɵɵstylePropInterpolate8;\n    }\n    /**\n     * Update an interpolated style property on an element with 8 or more bound values surrounded by\n     * text.\n     *\n     * Used when the number of interpolated values exceeds 7.\n     *\n     * ```html\n     * <div\n     *  style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\">\n     * </div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵstylePropInterpolateV(\n     *  0, ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n     *  'suffix']);\n     * ```\n     *\n     * @param styleIndex Index of style to update. This index value refers to the\n     *        index of the style in the style bindings array that was passed into\n     *        `styling`..\n     * @param values The a collection of values and the strings in-between those values, beginning with\n     * a string prefix and ending with a string suffix.\n     * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n     * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n     * @param forceOverride Whether or not to update the styling value immediately.\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵstylePropInterpolateV(styleIndex, values, valueSuffix, forceOverride) {\n        var lView = getLView();\n        var interpolated = interpolationV(lView, values);\n        if (interpolated !== NO_CHANGE) {\n            stylePropInternal(lView, getSelectedIndex(), styleIndex, getActiveDirectiveStylingIndex$1(), interpolated, valueSuffix, forceOverride);\n        }\n        return ɵɵstylePropInterpolateV;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Update a property on a host element. Only applies to native node properties, not inputs.\n     *\n     * Operates on the element selected by index via the {@link select} instruction.\n     *\n     * @param propName Name of property. Because it is going to DOM, this is not subject to\n     *        renaming as part of minification.\n     * @param value New value to write.\n     * @param sanitizer An optional function used to sanitize the value.\n     * @returns This function returns itself so that it may be chained\n     * (e.g. `property('name', ctx.name)('title', ctx.title)`)\n     *\n     * @codeGenApi\n     */\n    function ɵɵhostProperty(propName, value, sanitizer) {\n        var index = getSelectedIndex();\n        ngDevMode && assertNotEqual(index, -1, 'selected index cannot be -1');\n        var lView = getLView();\n        var bindReconciledValue = bind(lView, value);\n        if (bindReconciledValue !== NO_CHANGE) {\n            elementPropertyInternal(index, propName, bindReconciledValue, sanitizer, true);\n        }\n        return ɵɵhostProperty;\n    }\n    /**\n     * Updates a synthetic host binding (e.g. `[@foo]`) on a component.\n     *\n     * This instruction is for compatibility purposes and is designed to ensure that a\n     * synthetic host binding (e.g. `@HostBinding('@foo')`) properly gets rendered in\n     * the component's renderer. Normally all host bindings are evaluated with the parent\n     * component's renderer, but, in the case of animation @triggers, they need to be\n     * evaluated with the sub component's renderer (because that's where the animation\n     * triggers are defined).\n     *\n     * Do not use this instruction as a replacement for `elementProperty`. This instruction\n     * only exists to ensure compatibility with the ViewEngine's host binding behavior.\n     *\n     * @param index The index of the element to update in the data array\n     * @param propName Name of property. Because it is going to DOM, this is not subject to\n     *        renaming as part of minification.\n     * @param value New value to write.\n     * @param sanitizer An optional function used to sanitize the value.\n     *\n     * @codeGenApi\n     */\n    function ɵɵupdateSyntheticHostBinding(propName, value, sanitizer) {\n        var index = getSelectedIndex();\n        var lView = getLView();\n        // TODO(benlesh): remove bind call here.\n        var bound = bind(lView, value);\n        if (bound !== NO_CHANGE) {\n            elementPropertyInternal(index, propName, bound, sanitizer, true, loadComponentRenderer);\n        }\n        return ɵɵupdateSyntheticHostBinding;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Adds a player to an element, directive or component instance that will later be\n     * animated once change detection has passed.\n     *\n     * When a player is added to a reference it will stay active until `player.destroy()`\n     * is called. Once called then the player will be removed from the active players\n     * present on the associated ref instance.\n     *\n     * To get a list of all the active players on an element see [getPlayers].\n     *\n     * @param ref The element, directive or component that the player will be placed on.\n     * @param player The player that will be triggered to play once change detection has run.\n     */\n    function addPlayer(ref, player) {\n        var context = getLContext(ref);\n        if (!context) {\n            ngDevMode && throwInvalidRefError();\n            return;\n        }\n        var element = context.native;\n        var lView = context.lView;\n        var playerContext = getOrCreatePlayerContext(element, context);\n        var rootContext = getRootContext(lView);\n        addPlayerInternal(playerContext, rootContext, element, player, 0, ref);\n        scheduleTick(rootContext, 2 /* FlushPlayers */);\n    }\n    /**\n     * Returns a list of all the active players present on the provided ref instance (which can\n     * be an instance of a directive, component or element).\n     *\n     * This function will only return players that have been added to the ref instance using\n     * `addPlayer` or any players that are active through any template styling bindings\n     * (`[style]`, `[style.prop]`, `[class]` and `[class.name]`).\n     *\n     * @publicApi\n     */\n    function getPlayers(ref) {\n        var context = getLContext(ref);\n        if (!context) {\n            ngDevMode && throwInvalidRefError();\n            return [];\n        }\n        var stylingContext = getStylingContextFromLView(context.nodeIndex, context.lView);\n        var playerContext = stylingContext ? getPlayerContext(stylingContext) : null;\n        return playerContext ? getPlayersInternal(playerContext) : [];\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Returns the component instance associated with a given DOM host element.\n     * Elements which don't represent components return `null`.\n     *\n     * @param element Host DOM element from which the component should be retrieved.\n     *\n     * ```\n     * <my-app>\n     *   #VIEW\n     *     <div>\n     *       <child-comp></child-comp>\n     *     </div>\n     * </mp-app>\n     *\n     * expect(getComponent(<child-comp>) instanceof ChildComponent).toBeTruthy();\n     * expect(getComponent(<my-app>) instanceof MyApp).toBeTruthy();\n     * ```\n     *\n     * @publicApi\n     */\n    function getComponent(element) {\n        var context = loadLContextFromNode(element);\n        if (context.component === undefined) {\n            context.component = getComponentAtNodeIndex(context.nodeIndex, context.lView);\n        }\n        return context.component;\n    }\n    /**\n     * Returns the component instance associated with a given DOM host element.\n     * Elements which don't represent components return `null`.\n     *\n     * @param element Host DOM element from which the component should be retrieved.\n     *\n     * ```\n     * <my-app>\n     *   #VIEW\n     *     <div>\n     *       <child-comp></child-comp>\n     *     </div>\n     * </mp-app>\n     *\n     * expect(getComponent(<child-comp>) instanceof ChildComponent).toBeTruthy();\n     * expect(getComponent(<my-app>) instanceof MyApp).toBeTruthy();\n     * ```\n     *\n     * @publicApi\n     */\n    function getContext$1(element) {\n        var context = loadLContextFromNode(element);\n        return context.lView[CONTEXT];\n    }\n    /**\n     * Returns the component instance associated with view which owns the DOM element (`null`\n     * otherwise).\n     *\n     * @param element DOM element which is owned by an existing component's view.\n     *\n     * ```\n     * <my-app>\n     *   #VIEW\n     *     <div>\n     *       <child-comp></child-comp>\n     *     </div>\n     * </mp-app>\n     *\n     * expect(getViewComponent(<child-comp>) instanceof MyApp).toBeTruthy();\n     * expect(getViewComponent(<my-app>)).toEqual(null);\n     * ```\n     *\n     * @publicApi\n     */\n    function getViewComponent(element) {\n        var context = loadLContext(element);\n        var lView = context.lView;\n        var parent;\n        ngDevMode && assertLView(lView);\n        while (lView[HOST] === null && (parent = getLViewParent(lView))) {\n            // As long as lView[HOST] is null we know we are part of sub-template such as `*ngIf`\n            lView = parent;\n        }\n        return lView[FLAGS] & 512 /* IsRoot */ ? null : lView[CONTEXT];\n    }\n    /**\n     * Retrieve all root components.\n     *\n     * Root components are those which have been bootstrapped by Angular.\n     *\n     * @param target A DOM element, component or directive instance.\n     *\n     * @publicApi\n     */\n    function getRootComponents(target) {\n        return __spread(getRootContext(target).components);\n    }\n    /**\n     * Retrieves an `Injector` associated with the element, component or directive.\n     *\n     * @param target A DOM element, component or directive instance.\n     *\n     * @publicApi\n     */\n    function getInjector(target) {\n        var context = loadLContext(target);\n        var tNode = context.lView[TVIEW].data[context.nodeIndex];\n        return new NodeInjector(tNode, context.lView);\n    }\n    /**\n     * Retrieve a set of injection tokens at a given DOM node.\n     *\n     * @param element Element for which the injection tokens should be retrieved.\n     * @publicApi\n     */\n    function getInjectionTokens(element) {\n        var context = loadLContext(element, false);\n        if (!context)\n            return [];\n        var lView = context.lView;\n        var tView = lView[TVIEW];\n        var tNode = tView.data[context.nodeIndex];\n        var providerTokens = [];\n        var startIndex = tNode.providerIndexes & 65535 /* ProvidersStartIndexMask */;\n        var endIndex = tNode.directiveEnd;\n        for (var i = startIndex; i < endIndex; i++) {\n            var value = tView.data[i];\n            if (isDirectiveDefHack(value)) {\n                // The fact that we sometimes store Type and sometimes DirectiveDef in this location is a\n                // design flaw.  We should always store same type so that we can be monomorphic. The issue\n                // is that for Components/Directives we store the def instead the type. The correct behavior\n                // is that we should always be storing injectable type in this location.\n                value = value.type;\n            }\n            providerTokens.push(value);\n        }\n        return providerTokens;\n    }\n    /**\n     * Retrieves directives associated with a given DOM host element.\n     *\n     * @param target A DOM element, component or directive instance.\n     *\n     * @publicApi\n     */\n    function getDirectives(target) {\n        var context = loadLContext(target);\n        if (context.directives === undefined) {\n            context.directives = getDirectivesAtNodeIndex(context.nodeIndex, context.lView, false);\n        }\n        return context.directives || [];\n    }\n    function loadLContext(target, throwOnNotFound) {\n        if (throwOnNotFound === void 0) { throwOnNotFound = true; }\n        var context = getLContext(target);\n        if (!context && throwOnNotFound) {\n            throw new Error(ngDevMode ? \"Unable to find context associated with \" + stringifyForError(target) :\n                'Invalid ng target');\n        }\n        return context;\n    }\n    /**\n     * Retrieve map of local references.\n     *\n     * The references are retrieved as a map of local reference name to element or directive instance.\n     *\n     * @param target A DOM element, component or directive instance.\n     *\n     * @publicApi\n     */\n    function getLocalRefs(target) {\n        var context = loadLContext(target);\n        if (context.localRefs === undefined) {\n            context.localRefs = discoverLocalRefs(context.lView, context.nodeIndex);\n        }\n        return context.localRefs || {};\n    }\n    /**\n     * Retrieve the host element of the component.\n     *\n     * Use this function to retrieve the host element of the component. The host\n     * element is the element which the component is associated with.\n     *\n     * @param directive Component or Directive for which the host element should be retrieved.\n     *\n     * @publicApi\n     */\n    function getHostElement(directive) {\n        return getLContext(directive).native;\n    }\n    function loadLContextFromNode(node) {\n        if (!(node instanceof Node))\n            throw new Error('Expecting instance of DOM Node');\n        return loadLContext(node);\n    }\n    function isBrowserEvents(listener) {\n        // Browser events are those which don't have `useCapture` as boolean.\n        return typeof listener.useCapture === 'boolean';\n    }\n    /**\n     * Retrieves a list of DOM listeners.\n     *\n     * ```\n     * <my-app>\n     *   #VIEW\n     *     <div (click)=\"doSomething()\">\n     *     </div>\n     * </mp-app>\n     *\n     * expect(getListeners(<div>)).toEqual({\n     *   name: 'click',\n     *   element: <div>,\n     *   callback: () => doSomething(),\n     *   useCapture: false\n     * });\n     * ```\n     *\n     * @param element Element for which the DOM listeners should be retrieved.\n     * @publicApi\n     */\n    function getListeners(element) {\n        var lContext = loadLContextFromNode(element);\n        var lView = lContext.lView;\n        var tView = lView[TVIEW];\n        var lCleanup = lView[CLEANUP];\n        var tCleanup = tView.cleanup;\n        var listeners = [];\n        if (tCleanup && lCleanup) {\n            for (var i = 0; i < tCleanup.length;) {\n                var firstParam = tCleanup[i++];\n                var secondParam = tCleanup[i++];\n                if (typeof firstParam === 'string') {\n                    var name_1 = firstParam;\n                    var listenerElement = unwrapRNode(lView[secondParam]);\n                    var callback = lCleanup[tCleanup[i++]];\n                    var useCaptureOrIndx = tCleanup[i++];\n                    // if useCaptureOrIndx is boolean then report it as is.\n                    // if useCaptureOrIndx is positive number then it in unsubscribe method\n                    // if useCaptureOrIndx is negative number then it is a Subscription\n                    var useCapture = typeof useCaptureOrIndx === 'boolean' ?\n                        useCaptureOrIndx :\n                        (useCaptureOrIndx >= 0 ? false : null);\n                    if (element == listenerElement) {\n                        listeners.push({ element: element, name: name_1, callback: callback, useCapture: useCapture });\n                    }\n                }\n            }\n        }\n        listeners.sort(sortListeners);\n        return listeners;\n    }\n    function sortListeners(a, b) {\n        if (a.name == b.name)\n            return 0;\n        return a.name < b.name ? -1 : 1;\n    }\n    /**\n     * This function should not exist because it is megamorphic and only mostly correct.\n     *\n     * See call site for more info.\n     */\n    function isDirectiveDefHack(obj) {\n        return obj.type !== undefined && obj.template !== undefined && obj.declaredInputs !== undefined;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * This file introduces series of globally accessible debug tools\n     * to allow for the Angular debugging story to function.\n     *\n     * To see this in action run the following command:\n     *\n     *   bazel run --define=compile=aot\n     *   //packages/core/test/bundling/todo:devserver\n     *\n     *  Then load `localhost:5432` and start using the console tools.\n     */\n    /**\n     * This value reflects the property on the window where the dev\n     * tools are patched (window.ng).\n     * */\n    var GLOBAL_PUBLISH_EXPANDO_KEY = 'ng';\n    var _published = false;\n    /**\n     * Publishes a collection of default debug tools onto`window.ng`.\n     *\n     * These functions are available globally when Angular is in development\n     * mode and are automatically stripped away from prod mode is on.\n     */\n    function publishDefaultGlobalUtils() {\n        if (!_published) {\n            _published = true;\n            publishGlobalUtil('getComponent', getComponent);\n            publishGlobalUtil('getContext', getContext$1);\n            publishGlobalUtil('getListeners', getListeners);\n            publishGlobalUtil('getViewComponent', getViewComponent);\n            publishGlobalUtil('getHostElement', getHostElement);\n            publishGlobalUtil('getInjector', getInjector);\n            publishGlobalUtil('getRootComponents', getRootComponents);\n            publishGlobalUtil('getDirectives', getDirectives);\n            publishGlobalUtil('getPlayers', getPlayers);\n            publishGlobalUtil('markDirty', markDirty);\n        }\n    }\n    /**\n     * Publishes the given function to `window.ng` so that it can be\n     * used from the browser console when an application is not in production.\n     */\n    function publishGlobalUtil(name, fn) {\n        var w = _global;\n        ngDevMode && assertDefined(fn, 'function not defined');\n        if (w) {\n            var container = w[GLOBAL_PUBLISH_EXPANDO_KEY];\n            if (!container) {\n                container = w[GLOBAL_PUBLISH_EXPANDO_KEY] = {};\n            }\n            container[name] = fn;\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Bootstraps a Component into an existing host element and returns an instance\n     * of the component.\n     *\n     * Use this function to bootstrap a component into the DOM tree. Each invocation\n     * of this function will create a separate tree of components, injectors and\n     * change detection cycles and lifetimes. To dynamically insert a new component\n     * into an existing tree such that it shares the same injection, change detection\n     * and object lifetime, use {@link ViewContainer#createComponent}.\n     *\n     * @param componentType Component to bootstrap\n     * @param options Optional parameters which control bootstrapping\n     */\n    function renderComponent(componentType /* Type as workaround for: Microsoft/TypeScript/issues/4881 */, opts) {\n        if (opts === void 0) { opts = {}; }\n        ngDevMode && publishDefaultGlobalUtils();\n        ngDevMode && assertComponentType(componentType);\n        // this is preemptively set to avoid having test and debug code accidentally\n        // read data from a previous application state...\n        setActiveHostElement(null);\n        var rendererFactory = opts.rendererFactory || domRendererFactory3;\n        var sanitizer = opts.sanitizer || null;\n        var componentDef = getComponentDef(componentType);\n        if (componentDef.type != componentType)\n            componentDef.type = componentType;\n        // The first index of the first selector is the tag name.\n        var componentTag = componentDef.selectors[0][0];\n        var hostRNode = locateHostElement(rendererFactory, opts.host || componentTag);\n        var rootFlags = componentDef.onPush ? 64 /* Dirty */ | 512 /* IsRoot */ :\n            16 /* CheckAlways */ | 512 /* IsRoot */;\n        var rootContext = createRootContext(opts.scheduler, opts.playerHandler);\n        var renderer = rendererFactory.createRenderer(hostRNode, componentDef);\n        var rootView = createLView(null, createTView(-1, null, 1, 0, null, null, null, null), rootContext, rootFlags, null, null, rendererFactory, renderer, undefined, opts.injector || null);\n        var oldView = enterView(rootView, null);\n        var component;\n        // Will become true if the `try` block executes with no errors.\n        var safeToRunHooks = false;\n        try {\n            if (rendererFactory.begin)\n                rendererFactory.begin();\n            var componentView = createRootComponentView(hostRNode, componentDef, rootView, rendererFactory, renderer, sanitizer);\n            component = createRootComponent(componentView, componentDef, rootView, rootContext, opts.hostFeatures || null);\n            addToViewTree(rootView, componentView);\n            refreshDescendantViews(rootView); // creation mode pass\n            rootView[FLAGS] &= ~4 /* CreationMode */;\n            resetPreOrderHookFlags(rootView);\n            refreshDescendantViews(rootView); // update mode pass\n            safeToRunHooks = true;\n        }\n        finally {\n            leaveView(oldView, safeToRunHooks);\n            if (rendererFactory.end)\n                rendererFactory.end();\n        }\n        return component;\n    }\n    /**\n     * Creates the root component view and the root component node.\n     *\n     * @param rNode Render host element.\n     * @param def ComponentDef\n     * @param rootView The parent view where the host node is stored\n     * @param renderer The current renderer\n     * @param sanitizer The sanitizer, if provided\n     *\n     * @returns Component view created\n     */\n    function createRootComponentView(rNode, def, rootView, rendererFactory, renderer, sanitizer) {\n        resetComponentState();\n        var tView = rootView[TVIEW];\n        ngDevMode && assertDataInRange(rootView, 0 + HEADER_OFFSET);\n        rootView[0 + HEADER_OFFSET] = rNode;\n        var tNode = getOrCreateTNode(tView, null, 0, 3 /* Element */, null, null);\n        var componentView = createLView(rootView, getOrCreateTView(def), null, def.onPush ? 64 /* Dirty */ : 16 /* CheckAlways */, rootView[HEADER_OFFSET], tNode, rendererFactory, renderer, sanitizer);\n        if (tView.firstTemplatePass) {\n            diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, rootView), tView, def.type);\n            tNode.flags = 1 /* isComponent */;\n            initNodeFlags(tNode, rootView.length, 1);\n            queueComponentIndexForCheck(tNode);\n        }\n        // Store component view at node index, with node as the HOST\n        return rootView[HEADER_OFFSET] = componentView;\n    }\n    /**\n     * Creates a root component and sets it up with features and host bindings. Shared by\n     * renderComponent() and ViewContainerRef.createComponent().\n     */\n    function createRootComponent(componentView, componentDef, rootView, rootContext, hostFeatures) {\n        var tView = rootView[TVIEW];\n        // Create directive instance with factory() and store at next index in viewData\n        var component = instantiateRootComponent(tView, rootView, componentDef);\n        rootContext.components.push(component);\n        componentView[CONTEXT] = component;\n        hostFeatures && hostFeatures.forEach(function (feature) { return feature(component, componentDef); });\n        // We want to generate an empty QueryList for root content queries for backwards\n        // compatibility with ViewEngine.\n        if (componentDef.contentQueries) {\n            componentDef.contentQueries(1 /* Create */, component, rootView.length - 1);\n        }\n        var rootTNode = getPreviousOrParentTNode();\n        if (tView.firstTemplatePass && componentDef.hostBindings) {\n            var elementIndex = rootTNode.index - HEADER_OFFSET;\n            setActiveHostElement(elementIndex);\n            var expando = tView.expandoInstructions;\n            invokeHostBindingsInCreationMode(componentDef, expando, component, rootTNode, tView.firstTemplatePass);\n            rootTNode.onElementCreationFns && applyOnCreateInstructions(rootTNode);\n            setActiveHostElement(null);\n        }\n        if (rootTNode.stylingTemplate) {\n            var native = componentView[HOST];\n            renderInitialClasses(native, rootTNode.stylingTemplate, componentView[RENDERER]);\n            renderInitialStyles(native, rootTNode.stylingTemplate, componentView[RENDERER]);\n        }\n        return component;\n    }\n    function createRootContext(scheduler, playerHandler) {\n        return {\n            components: [],\n            scheduler: scheduler || defaultScheduler,\n            clean: CLEAN_PROMISE,\n            playerHandler: playerHandler || null,\n            flags: 0 /* Empty */\n        };\n    }\n    /**\n     * Used to enable lifecycle hooks on the root component.\n     *\n     * Include this feature when calling `renderComponent` if the root component\n     * you are rendering has lifecycle hooks defined. Otherwise, the hooks won't\n     * be called properly.\n     *\n     * Example:\n     *\n     * ```\n     * renderComponent(AppComponent, {features: [RootLifecycleHooks]});\n     * ```\n     */\n    function LifecycleHooksFeature(component, def) {\n        var rootTView = readPatchedLView(component)[TVIEW];\n        var dirIndex = rootTView.data.length - 1;\n        registerPreOrderHooks(dirIndex, def, rootTView, -1, -1, -1);\n        // TODO(misko): replace `as TNode` with createTNode call. (needs refactoring to lose dep on\n        // LNode).\n        registerPostOrderHooks(rootTView, { directiveStart: dirIndex, directiveEnd: dirIndex + 1 });\n    }\n    /**\n     * Wait on component until it is rendered.\n     *\n     * This function returns a `Promise` which is resolved when the component's\n     * change detection is executed. This is determined by finding the scheduler\n     * associated with the `component`'s render tree and waiting until the scheduler\n     * flushes. If nothing is scheduled, the function returns a resolved promise.\n     *\n     * Example:\n     * ```\n     * await whenRendered(myComponent);\n     * ```\n     *\n     * @param component Component to wait upon\n     * @returns Promise which resolves when the component is rendered.\n     */\n    function whenRendered(component) {\n        return getRootContext(component).clean;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Represents a basic change from a previous to a new value for a single\n     * property on a directive instance. Passed as a value in a\n     * {@link SimpleChanges} object to the `ngOnChanges` hook.\n     *\n     * @see `OnChanges`\n     *\n     * @publicApi\n     */\n    var SimpleChange = /** @class */ (function () {\n        function SimpleChange(previousValue, currentValue, firstChange) {\n            this.previousValue = previousValue;\n            this.currentValue = currentValue;\n            this.firstChange = firstChange;\n        }\n        /**\n         * Check whether the new value is the first value assigned.\n         */\n        SimpleChange.prototype.isFirstChange = function () { return this.firstChange; };\n        return SimpleChange;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * The NgOnChangesFeature decorates a component with support for the ngOnChanges\n     * lifecycle hook, so it should be included in any component that implements\n     * that hook.\n     *\n     * If the component or directive uses inheritance, the NgOnChangesFeature MUST\n     * be included as a feature AFTER {@link InheritDefinitionFeature}, otherwise\n     * inherited properties will not be propagated to the ngOnChanges lifecycle\n     * hook.\n     *\n     * Example usage:\n     *\n     * ```\n     * static ngComponentDef = defineComponent({\n     *   ...\n     *   inputs: {name: 'publicName'},\n     *   features: [NgOnChangesFeature()]\n     * });\n     * ```\n     *\n     * @codeGenApi\n     */\n    function ɵɵNgOnChangesFeature() {\n        // This option ensures that the ngOnChanges lifecycle hook will be inherited\n        // from superclasses (in InheritDefinitionFeature).\n        NgOnChangesFeatureImpl.ngInherit = true;\n        return NgOnChangesFeatureImpl;\n    }\n    function NgOnChangesFeatureImpl(definition) {\n        if (definition.type.prototype.ngOnChanges) {\n            definition.setInput = ngOnChangesSetInput;\n            definition.onChanges = wrapOnChanges();\n        }\n    }\n    function wrapOnChanges() {\n        return function wrapOnChangesHook_inPreviousChangesStorage() {\n            var simpleChangesStore = getSimpleChangesStore(this);\n            var current = simpleChangesStore && simpleChangesStore.current;\n            if (current) {\n                var previous = simpleChangesStore.previous;\n                if (previous === EMPTY_OBJ) {\n                    simpleChangesStore.previous = current;\n                }\n                else {\n                    // New changes are copied to the previous store, so that we don't lose history for inputs\n                    // which were not changed this time\n                    for (var key in current) {\n                        previous[key] = current[key];\n                    }\n                }\n                simpleChangesStore.current = null;\n                this.ngOnChanges(current);\n            }\n        };\n    }\n    function ngOnChangesSetInput(instance, value, publicName, privateName) {\n        var simpleChangesStore = getSimpleChangesStore(instance) ||\n            setSimpleChangesStore(instance, { previous: EMPTY_OBJ, current: null });\n        var current = simpleChangesStore.current || (simpleChangesStore.current = {});\n        var previous = simpleChangesStore.previous;\n        var declaredName = this.declaredInputs[publicName];\n        var previousChange = previous[declaredName];\n        current[declaredName] = new SimpleChange(previousChange && previousChange.currentValue, value, previous === EMPTY_OBJ);\n        instance[privateName] = value;\n    }\n    var SIMPLE_CHANGES_STORE = '__ngSimpleChanges__';\n    function getSimpleChangesStore(instance) {\n        return instance[SIMPLE_CHANGES_STORE] || null;\n    }\n    function setSimpleChangesStore(instance, store) {\n        return instance[SIMPLE_CHANGES_STORE] = store;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function getSuperType(type) {\n        return Object.getPrototypeOf(type.prototype).constructor;\n    }\n    /**\n     * Merges the definition from a super class to a sub class.\n     * @param definition The definition that is a SubClass of another directive of component\n     *\n     * @codeGenApi\n     */\n    function ɵɵInheritDefinitionFeature(definition) {\n        var e_1, _a;\n        var superType = getSuperType(definition.type);\n        while (superType) {\n            var superDef = undefined;\n            if (isComponentDef(definition)) {\n                // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n                superDef = superType.ngComponentDef || superType.ngDirectiveDef;\n            }\n            else {\n                if (superType.ngComponentDef) {\n                    throw new Error('Directives cannot inherit Components');\n                }\n                // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n                superDef = superType.ngDirectiveDef;\n            }\n            var baseDef = superType.ngBaseDef;\n            // Some fields in the definition may be empty, if there were no values to put in them that\n            // would've justified object creation. Unwrap them if necessary.\n            if (baseDef || superDef) {\n                var writeableDef = definition;\n                writeableDef.inputs = maybeUnwrapEmpty(definition.inputs);\n                writeableDef.declaredInputs = maybeUnwrapEmpty(definition.declaredInputs);\n                writeableDef.outputs = maybeUnwrapEmpty(definition.outputs);\n            }\n            if (baseDef) {\n                var baseViewQuery = baseDef.viewQuery;\n                var baseContentQueries = baseDef.contentQueries;\n                var baseHostBindings = baseDef.hostBindings;\n                baseHostBindings && inheritHostBindings(definition, baseHostBindings);\n                baseViewQuery && inheritViewQuery(definition, baseViewQuery);\n                baseContentQueries && inheritContentQueries(definition, baseContentQueries);\n                fillProperties(definition.inputs, baseDef.inputs);\n                fillProperties(definition.declaredInputs, baseDef.declaredInputs);\n                fillProperties(definition.outputs, baseDef.outputs);\n            }\n            if (superDef) {\n                // Merge hostBindings\n                var superHostBindings = superDef.hostBindings;\n                superHostBindings && inheritHostBindings(definition, superHostBindings);\n                // Merge queries\n                var superViewQuery = superDef.viewQuery;\n                var superContentQueries = superDef.contentQueries;\n                superViewQuery && inheritViewQuery(definition, superViewQuery);\n                superContentQueries && inheritContentQueries(definition, superContentQueries);\n                // Merge inputs and outputs\n                fillProperties(definition.inputs, superDef.inputs);\n                fillProperties(definition.declaredInputs, superDef.declaredInputs);\n                fillProperties(definition.outputs, superDef.outputs);\n                // Inherit hooks\n                // Assume super class inheritance feature has already run.\n                definition.afterContentChecked =\n                    definition.afterContentChecked || superDef.afterContentChecked;\n                definition.afterContentInit = definition.afterContentInit || superDef.afterContentInit;\n                definition.afterViewChecked = definition.afterViewChecked || superDef.afterViewChecked;\n                definition.afterViewInit = definition.afterViewInit || superDef.afterViewInit;\n                definition.doCheck = definition.doCheck || superDef.doCheck;\n                definition.onDestroy = definition.onDestroy || superDef.onDestroy;\n                definition.onInit = definition.onInit || superDef.onInit;\n                // Run parent features\n                var features = superDef.features;\n                if (features) {\n                    try {\n                        for (var features_1 = __values(features), features_1_1 = features_1.next(); !features_1_1.done; features_1_1 = features_1.next()) {\n                            var feature = features_1_1.value;\n                            if (feature && feature.ngInherit) {\n                                feature(definition);\n                            }\n                        }\n                    }\n                    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                    finally {\n                        try {\n                            if (features_1_1 && !features_1_1.done && (_a = features_1.return)) _a.call(features_1);\n                        }\n                        finally { if (e_1) throw e_1.error; }\n                    }\n                }\n            }\n            else {\n                // Even if we don't have a definition, check the type for the hooks and use those if need be\n                var superPrototype = superType.prototype;\n                if (superPrototype) {\n                    definition.afterContentChecked =\n                        definition.afterContentChecked || superPrototype.ngAfterContentChecked;\n                    definition.afterContentInit =\n                        definition.afterContentInit || superPrototype.ngAfterContentInit;\n                    definition.afterViewChecked =\n                        definition.afterViewChecked || superPrototype.ngAfterViewChecked;\n                    definition.afterViewInit = definition.afterViewInit || superPrototype.ngAfterViewInit;\n                    definition.doCheck = definition.doCheck || superPrototype.ngDoCheck;\n                    definition.onDestroy = definition.onDestroy || superPrototype.ngOnDestroy;\n                    definition.onInit = definition.onInit || superPrototype.ngOnInit;\n                    if (superPrototype.ngOnChanges) {\n                        ɵɵNgOnChangesFeature()(definition);\n                    }\n                }\n            }\n            superType = Object.getPrototypeOf(superType);\n        }\n    }\n    function maybeUnwrapEmpty(value) {\n        if (value === EMPTY_OBJ) {\n            return {};\n        }\n        else if (value === EMPTY_ARRAY$1) {\n            return [];\n        }\n        else {\n            return value;\n        }\n    }\n    function inheritViewQuery(definition, superViewQuery) {\n        var prevViewQuery = definition.viewQuery;\n        if (prevViewQuery) {\n            definition.viewQuery = function (rf, ctx) {\n                superViewQuery(rf, ctx);\n                prevViewQuery(rf, ctx);\n            };\n        }\n        else {\n            definition.viewQuery = superViewQuery;\n        }\n    }\n    function inheritContentQueries(definition, superContentQueries) {\n        var prevContentQueries = definition.contentQueries;\n        if (prevContentQueries) {\n            definition.contentQueries = function (rf, ctx, directiveIndex) {\n                superContentQueries(rf, ctx, directiveIndex);\n                prevContentQueries(rf, ctx, directiveIndex);\n            };\n        }\n        else {\n            definition.contentQueries = superContentQueries;\n        }\n    }\n    function inheritHostBindings(definition, superHostBindings) {\n        var prevHostBindings = definition.hostBindings;\n        // If the subclass does not have a host bindings function, we set the subclass host binding\n        // function to be the superclass's (in this feature). We should check if they're the same here\n        // to ensure we don't inherit it twice.\n        if (superHostBindings !== prevHostBindings) {\n            if (prevHostBindings) {\n                // because inheritance is unknown during compile time, the runtime code\n                // needs to be informed of the super-class depth so that instruction code\n                // can distinguish one host bindings function from another. The reason why\n                // relying on the directive uniqueId exclusively is not enough is because the\n                // uniqueId value and the directive instance stay the same between hostBindings\n                // calls throughout the directive inheritance chain. This means that without\n                // a super-class depth value, there is no way to know whether a parent or\n                // sub-class host bindings function is currently being executed.\n                definition.hostBindings = function (rf, ctx, elementIndex) {\n                    // The reason why we increment first and then decrement is so that parent\n                    // hostBindings calls have a higher id value compared to sub-class hostBindings\n                    // calls (this way the leaf directive is always at a super-class depth of 0).\n                    adjustActiveDirectiveSuperClassDepthPosition(1);\n                    try {\n                        superHostBindings(rf, ctx, elementIndex);\n                    }\n                    finally {\n                        adjustActiveDirectiveSuperClassDepthPosition(-1);\n                    }\n                    prevHostBindings(rf, ctx, elementIndex);\n                };\n            }\n            else {\n                definition.hostBindings = superHostBindings;\n            }\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Resolves the providers which are defined in the DirectiveDef.\n     *\n     * When inserting the tokens and the factories in their respective arrays, we can assume that\n     * this method is called first for the component (if any), and then for other directives on the same\n     * node.\n     * As a consequence,the providers are always processed in that order:\n     * 1) The view providers of the component\n     * 2) The providers of the component\n     * 3) The providers of the other directives\n     * This matches the structure of the injectables arrays of a view (for each node).\n     * So the tokens and the factories can be pushed at the end of the arrays, except\n     * in one case for multi providers.\n     *\n     * @param def the directive definition\n     * @param providers: Array of `providers`.\n     * @param viewProviders: Array of `viewProviders`.\n     */\n    function providersResolver(def, providers, viewProviders) {\n        var lView = getLView();\n        var tView = lView[TVIEW];\n        if (tView.firstTemplatePass) {\n            var isComponent = isComponentDef(def);\n            // The list of view providers is processed first, and the flags are updated\n            resolveProvider(viewProviders, tView.data, tView.blueprint, isComponent, true);\n            // Then, the list of providers is processed, and the flags are updated\n            resolveProvider(providers, tView.data, tView.blueprint, isComponent, false);\n        }\n    }\n    /**\n     * Resolves a provider and publishes it to the DI system.\n     */\n    function resolveProvider(provider, tInjectables, lInjectablesBlueprint, isComponent, isViewProvider) {\n        provider = resolveForwardRef(provider);\n        if (Array.isArray(provider)) {\n            // Recursively call `resolveProvider`\n            // Recursion is OK in this case because this code will not be in hot-path once we implement\n            // cloning of the initial state.\n            for (var i = 0; i < provider.length; i++) {\n                resolveProvider(provider[i], tInjectables, lInjectablesBlueprint, isComponent, isViewProvider);\n            }\n        }\n        else {\n            var lView = getLView();\n            var tView = lView[TVIEW];\n            var token = isTypeProvider(provider) ? provider : resolveForwardRef(provider.provide);\n            var providerFactory = providerToFactory(provider);\n            var tNode = getPreviousOrParentTNode();\n            var beginIndex = tNode.providerIndexes & 65535 /* ProvidersStartIndexMask */;\n            var endIndex = tNode.directiveStart;\n            var cptViewProvidersCount = tNode.providerIndexes >> 16 /* CptViewProvidersCountShift */;\n            if (isClassProvider(provider) || isTypeProvider(provider)) {\n                var prototype = (provider.useClass || provider).prototype;\n                var ngOnDestroy = prototype.ngOnDestroy;\n                if (ngOnDestroy) {\n                    (tView.destroyHooks || (tView.destroyHooks = [])).push(tInjectables.length, ngOnDestroy);\n                }\n            }\n            if (isTypeProvider(provider) || !provider.multi) {\n                // Single provider case: the factory is created and pushed immediately\n                var factory = new NodeInjectorFactory(providerFactory, isViewProvider, ɵɵdirectiveInject);\n                var existingFactoryIndex = indexOf(token, tInjectables, isViewProvider ? beginIndex : beginIndex + cptViewProvidersCount, endIndex);\n                if (existingFactoryIndex == -1) {\n                    diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, token);\n                    tInjectables.push(token);\n                    tNode.directiveStart++;\n                    tNode.directiveEnd++;\n                    if (isViewProvider) {\n                        tNode.providerIndexes += 65536 /* CptViewProvidersCountShifter */;\n                    }\n                    lInjectablesBlueprint.push(factory);\n                    lView.push(factory);\n                }\n                else {\n                    lInjectablesBlueprint[existingFactoryIndex] = factory;\n                    lView[existingFactoryIndex] = factory;\n                }\n            }\n            else {\n                // Multi provider case:\n                // We create a multi factory which is going to aggregate all the values.\n                // Since the output of such a factory depends on content or view injection,\n                // we create two of them, which are linked together.\n                //\n                // The first one (for view providers) is always in the first block of the injectables array,\n                // and the second one (for providers) is always in the second block.\n                // This is important because view providers have higher priority. When a multi token\n                // is being looked up, the view providers should be found first.\n                // Note that it is not possible to have a multi factory in the third block (directive block).\n                //\n                // The algorithm to process multi providers is as follows:\n                // 1) If the multi provider comes from the `viewProviders` of the component:\n                //   a) If the special view providers factory doesn't exist, it is created and pushed.\n                //   b) Else, the multi provider is added to the existing multi factory.\n                // 2) If the multi provider comes from the `providers` of the component or of another\n                // directive:\n                //   a) If the multi factory doesn't exist, it is created and provider pushed into it.\n                //      It is also linked to the multi factory for view providers, if it exists.\n                //   b) Else, the multi provider is added to the existing multi factory.\n                var existingProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex + cptViewProvidersCount, endIndex);\n                var existingViewProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex, beginIndex + cptViewProvidersCount);\n                var doesProvidersFactoryExist = existingProvidersFactoryIndex >= 0 &&\n                    lInjectablesBlueprint[existingProvidersFactoryIndex];\n                var doesViewProvidersFactoryExist = existingViewProvidersFactoryIndex >= 0 &&\n                    lInjectablesBlueprint[existingViewProvidersFactoryIndex];\n                if (isViewProvider && !doesViewProvidersFactoryExist ||\n                    !isViewProvider && !doesProvidersFactoryExist) {\n                    // Cases 1.a and 2.a\n                    diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, token);\n                    var factory = multiFactory(isViewProvider ? multiViewProvidersFactoryResolver : multiProvidersFactoryResolver, lInjectablesBlueprint.length, isViewProvider, isComponent, providerFactory);\n                    if (!isViewProvider && doesViewProvidersFactoryExist) {\n                        lInjectablesBlueprint[existingViewProvidersFactoryIndex].providerFactory = factory;\n                    }\n                    tInjectables.push(token);\n                    tNode.directiveStart++;\n                    tNode.directiveEnd++;\n                    if (isViewProvider) {\n                        tNode.providerIndexes += 65536 /* CptViewProvidersCountShifter */;\n                    }\n                    lInjectablesBlueprint.push(factory);\n                    lView.push(factory);\n                }\n                else {\n                    // Cases 1.b and 2.b\n                    multiFactoryAdd(lInjectablesBlueprint[isViewProvider ? existingViewProvidersFactoryIndex : existingProvidersFactoryIndex], providerFactory, !isViewProvider && isComponent);\n                }\n                if (!isViewProvider && isComponent && doesViewProvidersFactoryExist) {\n                    lInjectablesBlueprint[existingViewProvidersFactoryIndex].componentProviders++;\n                }\n            }\n        }\n    }\n    /**\n     * Add a factory in a multi factory.\n     */\n    function multiFactoryAdd(multiFactory, factory, isComponentProvider) {\n        multiFactory.multi.push(factory);\n        if (isComponentProvider) {\n            multiFactory.componentProviders++;\n        }\n    }\n    /**\n     * Returns the index of item in the array, but only in the begin to end range.\n     */\n    function indexOf(item, arr, begin, end) {\n        for (var i = begin; i < end; i++) {\n            if (arr[i] === item)\n                return i;\n        }\n        return -1;\n    }\n    /**\n     * Use this with `multi` `providers`.\n     */\n    function multiProvidersFactoryResolver(_, tData, lData, tNode) {\n        return multiResolve(this.multi, []);\n    }\n    /**\n     * Use this with `multi` `viewProviders`.\n     *\n     * This factory knows how to concatenate itself with the existing `multi` `providers`.\n     */\n    function multiViewProvidersFactoryResolver(_, tData, lData, tNode) {\n        var factories = this.multi;\n        var result;\n        if (this.providerFactory) {\n            var componentCount = this.providerFactory.componentProviders;\n            var multiProviders = getNodeInjectable(tData, lData, this.providerFactory.index, tNode);\n            // Copy the section of the array which contains `multi` `providers` from the component\n            result = multiProviders.slice(0, componentCount);\n            // Insert the `viewProvider` instances.\n            multiResolve(factories, result);\n            // Copy the section of the array which contains `multi` `providers` from other directives\n            for (var i = componentCount; i < multiProviders.length; i++) {\n                result.push(multiProviders[i]);\n            }\n        }\n        else {\n            result = [];\n            // Insert the `viewProvider` instances.\n            multiResolve(factories, result);\n        }\n        return result;\n    }\n    /**\n     * Maps an array of factories into an array of values.\n     */\n    function multiResolve(factories, result) {\n        for (var i = 0; i < factories.length; i++) {\n            var factory = factories[i];\n            result.push(factory());\n        }\n        return result;\n    }\n    /**\n     * Creates a multi factory.\n     */\n    function multiFactory(factoryFn, index, isViewProvider, isComponent, f) {\n        var factory = new NodeInjectorFactory(factoryFn, isViewProvider, ɵɵdirectiveInject);\n        factory.multi = [];\n        factory.index = index;\n        factory.componentProviders = 0;\n        multiFactoryAdd(factory, f, isComponent && !isViewProvider);\n        return factory;\n    }\n\n    /**\n     * This feature resolves the providers of a directive (or component),\n     * and publish them into the DI system, making it visible to others for injection.\n     *\n     * For example:\n     * ```ts\n     * class ComponentWithProviders {\n     *   constructor(private greeter: GreeterDE) {}\n     *\n     *   static ngComponentDef = defineComponent({\n     *     type: ComponentWithProviders,\n     *     selectors: [['component-with-providers']],\n     *    factory: () => new ComponentWithProviders(directiveInject(GreeterDE as any)),\n     *    consts: 1,\n     *    vars: 1,\n     *    template: function(fs: RenderFlags, ctx: ComponentWithProviders) {\n     *      if (fs & RenderFlags.Create) {\n     *        ɵɵtext(0);\n     *      }\n     *      if (fs & RenderFlags.Update) {\n     *        ɵɵselect(0);\n     *        ɵɵtextBinding(ctx.greeter.greet());\n     *      }\n     *    },\n     *    features: [ProvidersFeature([GreeterDE])]\n     *  });\n     * }\n     * ```\n     *\n     * @param definition\n     *\n     * @codeGenApi\n     */\n    function ɵɵProvidersFeature(providers, viewProviders) {\n        if (viewProviders === void 0) { viewProviders = []; }\n        return function (definition) {\n            definition.providersResolver =\n                function (def, processProvidersFn) {\n                    return providersResolver(def, //\n                    processProvidersFn ? processProvidersFn(providers) : providers, //\n                    viewProviders);\n                };\n        };\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Represents a component created by a `ComponentFactory`.\n     * Provides access to the component instance and related objects,\n     * and provides the means of destroying the instance.\n     *\n     * @publicApi\n     */\n    var ComponentRef = /** @class */ (function () {\n        function ComponentRef() {\n        }\n        return ComponentRef;\n    }());\n    /**\n     * Base class for a factory that can create a component dynamically.\n     * Instantiate a factory for a given type of component with `resolveComponentFactory()`.\n     * Use the resulting `ComponentFactory.create()` method to create a component of that type.\n     *\n     * @see [Dynamic Components](guide/dynamic-component-loader)\n     *\n     * @publicApi\n     */\n    var ComponentFactory = /** @class */ (function () {\n        function ComponentFactory() {\n        }\n        return ComponentFactory;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function noComponentFactoryError(component) {\n        var error = Error(\"No component factory found for \" + stringify(component) + \". Did you add it to @NgModule.entryComponents?\");\n        error[ERROR_COMPONENT] = component;\n        return error;\n    }\n    var ERROR_COMPONENT = 'ngComponent';\n    var _NullComponentFactoryResolver = /** @class */ (function () {\n        function _NullComponentFactoryResolver() {\n        }\n        _NullComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {\n            throw noComponentFactoryError(component);\n        };\n        return _NullComponentFactoryResolver;\n    }());\n    /**\n     * A simple registry that maps `Components` to generated `ComponentFactory` classes\n     * that can be used to create instances of components.\n     * Use to obtain the factory for a given component type,\n     * then use the factory's `create()` method to create a component of that type.\n     *\n     * @see [Dynamic Components](guide/dynamic-component-loader)\n     * @publicApi\n     */\n    var ComponentFactoryResolver = /** @class */ (function () {\n        function ComponentFactoryResolver() {\n        }\n        ComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();\n        return ComponentFactoryResolver;\n    }());\n    var CodegenComponentFactoryResolver = /** @class */ (function () {\n        function CodegenComponentFactoryResolver(factories, _parent, _ngModule) {\n            this._parent = _parent;\n            this._ngModule = _ngModule;\n            this._factories = new Map();\n            for (var i = 0; i < factories.length; i++) {\n                var factory = factories[i];\n                this._factories.set(factory.componentType, factory);\n            }\n        }\n        CodegenComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {\n            var factory = this._factories.get(component);\n            if (!factory && this._parent) {\n                factory = this._parent.resolveComponentFactory(component);\n            }\n            if (!factory) {\n                throw noComponentFactoryError(component);\n            }\n            return new ComponentFactoryBoundToModule(factory, this._ngModule);\n        };\n        return CodegenComponentFactoryResolver;\n    }());\n    var ComponentFactoryBoundToModule = /** @class */ (function (_super) {\n        __extends(ComponentFactoryBoundToModule, _super);\n        function ComponentFactoryBoundToModule(factory, ngModule) {\n            var _this = _super.call(this) || this;\n            _this.factory = factory;\n            _this.ngModule = ngModule;\n            _this.selector = factory.selector;\n            _this.componentType = factory.componentType;\n            _this.ngContentSelectors = factory.ngContentSelectors;\n            _this.inputs = factory.inputs;\n            _this.outputs = factory.outputs;\n            return _this;\n        }\n        ComponentFactoryBoundToModule.prototype.create = function (injector, projectableNodes, rootSelectorOrNode, ngModule) {\n            return this.factory.create(injector, projectableNodes, rootSelectorOrNode, ngModule || this.ngModule);\n        };\n        return ComponentFactoryBoundToModule;\n    }(ComponentFactory));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Represents an instance of an NgModule created via a {@link NgModuleFactory}.\n     *\n     * `NgModuleRef` provides access to the NgModule Instance as well other objects related to this\n     * NgModule Instance.\n     *\n     * @publicApi\n     */\n    var NgModuleRef = /** @class */ (function () {\n        function NgModuleRef() {\n        }\n        return NgModuleRef;\n    }());\n    /**\n     * @publicApi\n     */\n    var NgModuleFactory = /** @class */ (function () {\n        function NgModuleFactory() {\n        }\n        return NgModuleFactory;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var ViewRef = /** @class */ (function () {\n        function ViewRef(_lView, _context, _componentIndex) {\n            this._context = _context;\n            this._componentIndex = _componentIndex;\n            this._appRef = null;\n            this._viewContainerRef = null;\n            /**\n             * @internal\n             */\n            this._tViewNode = null;\n            this._lView = _lView;\n        }\n        Object.defineProperty(ViewRef.prototype, \"rootNodes\", {\n            get: function () {\n                if (this._lView[HOST] == null) {\n                    var tView = this._lView[T_HOST];\n                    return collectNativeNodes(this._lView, tView, []);\n                }\n                return [];\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ViewRef.prototype, \"context\", {\n            get: function () { return this._context ? this._context : this._lookUpContext(); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ViewRef.prototype, \"destroyed\", {\n            get: function () {\n                return (this._lView[FLAGS] & 256 /* Destroyed */) === 256 /* Destroyed */;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        ViewRef.prototype.destroy = function () {\n            if (this._appRef) {\n                this._appRef.detachView(this);\n            }\n            else if (this._viewContainerRef) {\n                var index = this._viewContainerRef.indexOf(this);\n                if (index > -1) {\n                    this._viewContainerRef.detach(index);\n                }\n                this._viewContainerRef = null;\n            }\n            destroyLView(this._lView);\n        };\n        ViewRef.prototype.onDestroy = function (callback) { storeCleanupFn(this._lView, callback); };\n        /**\n         * Marks a view and all of its ancestors dirty.\n         *\n         * It also triggers change detection by calling `scheduleTick` internally, which coalesces\n         * multiple `markForCheck` calls to into one change detection run.\n         *\n         * This can be used to ensure an {@link ChangeDetectionStrategy#OnPush OnPush} component is\n         * checked when it needs to be re-rendered but the two normal triggers haven't marked it\n         * dirty (i.e. inputs haven't changed and events haven't fired in the view).\n         *\n         * <!-- TODO: Add a link to a chapter on OnPush components -->\n         *\n         * @usageNotes\n         * ### Example\n         *\n         * ```typescript\n         * @Component({\n         *   selector: 'my-app',\n         *   template: `Number of ticks: {{numberOfTicks}}`\n         *   changeDetection: ChangeDetectionStrategy.OnPush,\n         * })\n         * class AppComponent {\n         *   numberOfTicks = 0;\n         *\n         *   constructor(private ref: ChangeDetectorRef) {\n         *     setInterval(() => {\n         *       this.numberOfTicks++;\n         *       // the following is required, otherwise the view will not be updated\n         *       this.ref.markForCheck();\n         *     }, 1000);\n         *   }\n         * }\n         * ```\n         */\n        ViewRef.prototype.markForCheck = function () { markViewDirty(this._lView); };\n        /**\n         * Detaches the view from the change detection tree.\n         *\n         * Detached views will not be checked during change detection runs until they are\n         * re-attached, even if they are dirty. `detach` can be used in combination with\n         * {@link ChangeDetectorRef#detectChanges detectChanges} to implement local change\n         * detection checks.\n         *\n         * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n         * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n         *\n         * @usageNotes\n         * ### Example\n         *\n         * The following example defines a component with a large list of readonly data.\n         * Imagine the data changes constantly, many times per second. For performance reasons,\n         * we want to check and update the list every five seconds. We can do that by detaching\n         * the component's change detector and doing a local check every five seconds.\n         *\n         * ```typescript\n         * class DataProvider {\n         *   // in a real application the returned data will be different every time\n         *   get data() {\n         *     return [1,2,3,4,5];\n         *   }\n         * }\n         *\n         * @Component({\n         *   selector: 'giant-list',\n         *   template: `\n         *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</li>\n         *   `,\n         * })\n         * class GiantList {\n         *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\n         *     ref.detach();\n         *     setInterval(() => {\n         *       this.ref.detectChanges();\n         *     }, 5000);\n         *   }\n         * }\n         *\n         * @Component({\n         *   selector: 'app',\n         *   providers: [DataProvider],\n         *   template: `\n         *     <giant-list><giant-list>\n         *   `,\n         * })\n         * class App {\n         * }\n         * ```\n         */\n        ViewRef.prototype.detach = function () { this._lView[FLAGS] &= ~128 /* Attached */; };\n        /**\n         * Re-attaches a view to the change detection tree.\n         *\n         * This can be used to re-attach views that were previously detached from the tree\n         * using {@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.\n         *\n         * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n         *\n         * @usageNotes\n         * ### Example\n         *\n         * The following example creates a component displaying `live` data. The component will detach\n         * its change detector from the main change detector tree when the component's live property\n         * is set to false.\n         *\n         * ```typescript\n         * class DataProvider {\n         *   data = 1;\n         *\n         *   constructor() {\n         *     setInterval(() => {\n         *       this.data = this.data * 2;\n         *     }, 500);\n         *   }\n         * }\n         *\n         * @Component({\n         *   selector: 'live-data',\n         *   inputs: ['live'],\n         *   template: 'Data: {{dataProvider.data}}'\n         * })\n         * class LiveData {\n         *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\n         *\n         *   set live(value) {\n         *     if (value) {\n         *       this.ref.reattach();\n         *     } else {\n         *       this.ref.detach();\n         *     }\n         *   }\n         * }\n         *\n         * @Component({\n         *   selector: 'my-app',\n         *   providers: [DataProvider],\n         *   template: `\n         *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\n         *     <live-data [live]=\"live\"><live-data>\n         *   `,\n         * })\n         * class AppComponent {\n         *   live = true;\n         * }\n         * ```\n         */\n        ViewRef.prototype.reattach = function () { this._lView[FLAGS] |= 128 /* Attached */; };\n        /**\n         * Checks the view and its children.\n         *\n         * This can also be used in combination with {@link ChangeDetectorRef#detach detach} to implement\n         * local change detection checks.\n         *\n         * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n         * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n         *\n         * @usageNotes\n         * ### Example\n         *\n         * The following example defines a component with a large list of readonly data.\n         * Imagine, the data changes constantly, many times per second. For performance reasons,\n         * we want to check and update the list every five seconds.\n         *\n         * We can do that by detaching the component's change detector and doing a local change detection\n         * check every five seconds.\n         *\n         * See {@link ChangeDetectorRef#detach detach} for more information.\n         */\n        ViewRef.prototype.detectChanges = function () { detectChangesInternal(this._lView, this.context); };\n        /**\n         * Checks the change detector and its children, and throws if any changes are detected.\n         *\n         * This is used in development mode to verify that running change detection doesn't\n         * introduce other changes.\n         */\n        ViewRef.prototype.checkNoChanges = function () { checkNoChangesInternal(this._lView, this.context); };\n        ViewRef.prototype.attachToViewContainerRef = function (vcRef) {\n            if (this._appRef) {\n                throw new Error('This view is already attached directly to the ApplicationRef!');\n            }\n            this._viewContainerRef = vcRef;\n        };\n        ViewRef.prototype.detachFromAppRef = function () {\n            this._appRef = null;\n            renderDetachView(this._lView);\n        };\n        ViewRef.prototype.attachToAppRef = function (appRef) {\n            if (this._viewContainerRef) {\n                throw new Error('This view is already attached to a ViewContainer!');\n            }\n            this._appRef = appRef;\n        };\n        ViewRef.prototype._lookUpContext = function () {\n            return this._context = getLViewParent(this._lView)[this._componentIndex];\n        };\n        return ViewRef;\n    }());\n    /** @internal */\n    var RootViewRef = /** @class */ (function (_super) {\n        __extends(RootViewRef, _super);\n        function RootViewRef(_view) {\n            var _this = _super.call(this, _view, null, -1) || this;\n            _this._view = _view;\n            return _this;\n        }\n        RootViewRef.prototype.detectChanges = function () { detectChangesInRootView(this._view); };\n        RootViewRef.prototype.checkNoChanges = function () { checkNoChangesInRootView(this._view); };\n        Object.defineProperty(RootViewRef.prototype, \"context\", {\n            get: function () { return null; },\n            enumerable: true,\n            configurable: true\n        });\n        return RootViewRef;\n    }(ViewRef));\n    function collectNativeNodes(lView, parentTNode, result) {\n        var tNodeChild = parentTNode.child;\n        while (tNodeChild) {\n            var nativeNode = getNativeByTNodeOrNull(tNodeChild, lView);\n            nativeNode && result.push(nativeNode);\n            if (tNodeChild.type === 4 /* ElementContainer */) {\n                collectNativeNodes(lView, tNodeChild, result);\n            }\n            else if (tNodeChild.type === 1 /* Projection */) {\n                var componentView = findComponentView(lView);\n                var componentHost = componentView[T_HOST];\n                var parentView = getLViewParent(componentView);\n                var currentProjectedNode = componentHost.projection[tNodeChild.projection];\n                while (currentProjectedNode && parentView) {\n                    result.push(getNativeByTNode(currentProjectedNode, parentView));\n                    currentProjectedNode = currentProjectedNode.next;\n                }\n            }\n            tNodeChild = tNodeChild.next;\n        }\n        return result;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Creates an ElementRef from the most recent node.\n     *\n     * @returns The ElementRef instance to use\n     */\n    function injectElementRef(ElementRefToken) {\n        return createElementRef(ElementRefToken, getPreviousOrParentTNode(), getLView());\n    }\n    var R3ElementRef;\n    /**\n     * Creates an ElementRef given a node.\n     *\n     * @param ElementRefToken The ElementRef type\n     * @param tNode The node for which you'd like an ElementRef\n     * @param view The view to which the node belongs\n     * @returns The ElementRef instance to use\n     */\n    function createElementRef(ElementRefToken, tNode, view) {\n        if (!R3ElementRef) {\n            // TODO: Fix class name, should be ElementRef, but there appears to be a rollup bug\n            R3ElementRef = /** @class */ (function (_super) {\n                __extends(ElementRef_, _super);\n                function ElementRef_() {\n                    return _super !== null && _super.apply(this, arguments) || this;\n                }\n                return ElementRef_;\n            }(ElementRefToken));\n        }\n        return new R3ElementRef(getNativeByTNode(tNode, view));\n    }\n    var R3TemplateRef;\n    /**\n     * Creates a TemplateRef given a node.\n     *\n     * @returns The TemplateRef instance to use\n     */\n    function injectTemplateRef(TemplateRefToken, ElementRefToken) {\n        return createTemplateRef(TemplateRefToken, ElementRefToken, getPreviousOrParentTNode(), getLView());\n    }\n    /**\n     * Creates a TemplateRef and stores it on the injector.\n     *\n     * @param TemplateRefToken The TemplateRef type\n     * @param ElementRefToken The ElementRef type\n     * @param hostTNode The node that is requesting a TemplateRef\n     * @param hostView The view to which the node belongs\n     * @returns The TemplateRef instance to use\n     */\n    function createTemplateRef(TemplateRefToken, ElementRefToken, hostTNode, hostView) {\n        if (!R3TemplateRef) {\n            // TODO: Fix class name, should be TemplateRef, but there appears to be a rollup bug\n            R3TemplateRef = /** @class */ (function (_super) {\n                __extends(TemplateRef_, _super);\n                function TemplateRef_(_declarationParentView, elementRef, _tView, _hostLContainer, _injectorIndex) {\n                    var _this = _super.call(this) || this;\n                    _this._declarationParentView = _declarationParentView;\n                    _this.elementRef = elementRef;\n                    _this._tView = _tView;\n                    _this._hostLContainer = _hostLContainer;\n                    _this._injectorIndex = _injectorIndex;\n                    return _this;\n                }\n                TemplateRef_.prototype.createEmbeddedView = function (context, container, index) {\n                    var currentQueries = this._declarationParentView[QUERIES];\n                    // Query container may be missing if this view was created in a directive\n                    // constructor. Create it now to avoid losing results in embedded views.\n                    if (currentQueries && this._hostLContainer[QUERIES] == null) {\n                        this._hostLContainer[QUERIES] = currentQueries.container();\n                    }\n                    var lView = createEmbeddedViewAndNode(this._tView, context, this._declarationParentView, this._hostLContainer[QUERIES], this._injectorIndex);\n                    if (container) {\n                        insertView(lView, container, index);\n                    }\n                    renderEmbeddedTemplate(lView, this._tView, context);\n                    var viewRef = new ViewRef(lView, context, -1);\n                    viewRef._tViewNode = lView[T_HOST];\n                    return viewRef;\n                };\n                return TemplateRef_;\n            }(TemplateRefToken));\n        }\n        if (hostTNode.type === 0 /* Container */) {\n            var hostContainer = hostView[hostTNode.index];\n            ngDevMode && assertDefined(hostTNode.tViews, 'TView must be allocated');\n            return new R3TemplateRef(hostView, createElementRef(ElementRefToken, hostTNode, hostView), hostTNode.tViews, hostContainer, hostTNode.injectorIndex);\n        }\n        else {\n            return null;\n        }\n    }\n    var R3ViewContainerRef;\n    /**\n     * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef\n     * already exists, retrieves the existing ViewContainerRef.\n     *\n     * @returns The ViewContainerRef instance to use\n     */\n    function injectViewContainerRef(ViewContainerRefToken, ElementRefToken) {\n        var previousTNode = getPreviousOrParentTNode();\n        return createContainerRef(ViewContainerRefToken, ElementRefToken, previousTNode, getLView());\n    }\n    /**\n     * Creates a ViewContainerRef and stores it on the injector.\n     *\n     * @param ViewContainerRefToken The ViewContainerRef type\n     * @param ElementRefToken The ElementRef type\n     * @param hostTNode The node that is requesting a ViewContainerRef\n     * @param hostView The view to which the node belongs\n     * @returns The ViewContainerRef instance to use\n     */\n    function createContainerRef(ViewContainerRefToken, ElementRefToken, hostTNode, hostView) {\n        if (!R3ViewContainerRef) {\n            // TODO: Fix class name, should be ViewContainerRef, but there appears to be a rollup bug\n            R3ViewContainerRef = /** @class */ (function (_super) {\n                __extends(ViewContainerRef_, _super);\n                function ViewContainerRef_(_lContainer, _hostTNode, _hostView) {\n                    var _this = _super.call(this) || this;\n                    _this._lContainer = _lContainer;\n                    _this._hostTNode = _hostTNode;\n                    _this._hostView = _hostView;\n                    return _this;\n                }\n                Object.defineProperty(ViewContainerRef_.prototype, \"element\", {\n                    get: function () {\n                        return createElementRef(ElementRefToken, this._hostTNode, this._hostView);\n                    },\n                    enumerable: true,\n                    configurable: true\n                });\n                Object.defineProperty(ViewContainerRef_.prototype, \"injector\", {\n                    get: function () { return new NodeInjector(this._hostTNode, this._hostView); },\n                    enumerable: true,\n                    configurable: true\n                });\n                Object.defineProperty(ViewContainerRef_.prototype, \"parentInjector\", {\n                    /** @deprecated No replacement */\n                    get: function () {\n                        var parentLocation = getParentInjectorLocation(this._hostTNode, this._hostView);\n                        var parentView = getParentInjectorView(parentLocation, this._hostView);\n                        var parentTNode = getParentInjectorTNode(parentLocation, this._hostView, this._hostTNode);\n                        return !hasParentInjector(parentLocation) || parentTNode == null ?\n                            new NodeInjector(null, this._hostView) :\n                            new NodeInjector(parentTNode, parentView);\n                    },\n                    enumerable: true,\n                    configurable: true\n                });\n                ViewContainerRef_.prototype.clear = function () {\n                    while (this.length) {\n                        this.remove(0);\n                    }\n                };\n                ViewContainerRef_.prototype.get = function (index) {\n                    return this._lContainer[VIEW_REFS] !== null && this._lContainer[VIEW_REFS][index] || null;\n                };\n                Object.defineProperty(ViewContainerRef_.prototype, \"length\", {\n                    get: function () {\n                        // Note that if there are no views, the container\n                        // length will be smaller than the header offset.\n                        var viewAmount = this._lContainer.length - CONTAINER_HEADER_OFFSET;\n                        return viewAmount > 0 ? viewAmount : 0;\n                    },\n                    enumerable: true,\n                    configurable: true\n                });\n                ViewContainerRef_.prototype.createEmbeddedView = function (templateRef, context, index) {\n                    this.allocateContainerIfNeeded();\n                    var adjustedIdx = this._adjustIndex(index);\n                    var viewRef = templateRef\n                        .createEmbeddedView(context || {}, this._lContainer, adjustedIdx);\n                    viewRef.attachToViewContainerRef(this);\n                    this._lContainer[VIEW_REFS].splice(adjustedIdx, 0, viewRef);\n                    return viewRef;\n                };\n                ViewContainerRef_.prototype.createComponent = function (componentFactory, index, injector, projectableNodes, ngModuleRef) {\n                    var contextInjector = injector || this.parentInjector;\n                    if (!ngModuleRef && componentFactory.ngModule == null && contextInjector) {\n                        ngModuleRef = contextInjector.get(NgModuleRef, null);\n                    }\n                    var componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);\n                    this.insert(componentRef.hostView, index);\n                    return componentRef;\n                };\n                ViewContainerRef_.prototype.insert = function (viewRef, index) {\n                    if (viewRef.destroyed) {\n                        throw new Error('Cannot insert a destroyed View in a ViewContainer!');\n                    }\n                    this.allocateContainerIfNeeded();\n                    var lView = viewRef._lView;\n                    var adjustedIdx = this._adjustIndex(index);\n                    if (viewAttachedToContainer(lView)) {\n                        // If view is already attached, fall back to move() so we clean up\n                        // references appropriately.\n                        return this.move(viewRef, adjustedIdx);\n                    }\n                    insertView(lView, this._lContainer, adjustedIdx);\n                    var beforeNode = getBeforeNodeForView(adjustedIdx, this._lContainer);\n                    addRemoveViewFromContainer(lView, true, beforeNode);\n                    viewRef.attachToViewContainerRef(this);\n                    this._lContainer[VIEW_REFS].splice(adjustedIdx, 0, viewRef);\n                    return viewRef;\n                };\n                ViewContainerRef_.prototype.move = function (viewRef, newIndex) {\n                    if (viewRef.destroyed) {\n                        throw new Error('Cannot move a destroyed View in a ViewContainer!');\n                    }\n                    var index = this.indexOf(viewRef);\n                    if (index !== -1)\n                        this.detach(index);\n                    this.insert(viewRef, newIndex);\n                    return viewRef;\n                };\n                ViewContainerRef_.prototype.indexOf = function (viewRef) {\n                    return this._lContainer[VIEW_REFS] !== null ?\n                        this._lContainer[VIEW_REFS].indexOf(viewRef) :\n                        0;\n                };\n                ViewContainerRef_.prototype.remove = function (index) {\n                    this.allocateContainerIfNeeded();\n                    var adjustedIdx = this._adjustIndex(index, -1);\n                    removeView(this._lContainer, adjustedIdx);\n                    this._lContainer[VIEW_REFS].splice(adjustedIdx, 1);\n                };\n                ViewContainerRef_.prototype.detach = function (index) {\n                    this.allocateContainerIfNeeded();\n                    var adjustedIdx = this._adjustIndex(index, -1);\n                    var view = detachView(this._lContainer, adjustedIdx);\n                    var wasDetached = view && this._lContainer[VIEW_REFS].splice(adjustedIdx, 1)[0] != null;\n                    return wasDetached ? new ViewRef(view, view[CONTEXT], -1) : null;\n                };\n                ViewContainerRef_.prototype._adjustIndex = function (index, shift) {\n                    if (shift === void 0) { shift = 0; }\n                    if (index == null) {\n                        return this.length + shift;\n                    }\n                    if (ngDevMode) {\n                        assertGreaterThan(index, -1, 'index must be positive');\n                        // +1 because it's legal to insert at the end.\n                        assertLessThan(index, this.length + 1 + shift, 'index');\n                    }\n                    return index;\n                };\n                ViewContainerRef_.prototype.allocateContainerIfNeeded = function () {\n                    if (this._lContainer[VIEW_REFS] === null) {\n                        this._lContainer[VIEW_REFS] = [];\n                    }\n                };\n                return ViewContainerRef_;\n            }(ViewContainerRefToken));\n        }\n        ngDevMode && assertNodeOfPossibleTypes(hostTNode, 0 /* Container */, 3 /* Element */, 4 /* ElementContainer */);\n        var lContainer;\n        var slotValue = hostView[hostTNode.index];\n        if (isLContainer(slotValue)) {\n            // If the host is a container, we don't need to create a new LContainer\n            lContainer = slotValue;\n            lContainer[ACTIVE_INDEX] = -1;\n        }\n        else {\n            var commentNode = void 0;\n            // If the host is an element container, the native host element is guaranteed to be a\n            // comment and we can reuse that comment as anchor element for the new LContainer.\n            if (hostTNode.type === 4 /* ElementContainer */) {\n                commentNode = unwrapRNode(slotValue);\n            }\n            else {\n                ngDevMode && ngDevMode.rendererCreateComment++;\n                commentNode = hostView[RENDERER].createComment(ngDevMode ? 'container' : '');\n            }\n            // A container can be created on the root (topmost / bootstrapped) component and in this case we\n            // can't use LTree to insert container's marker node (both parent of a comment node and the\n            // commend node itself is located outside of elements hold by LTree). In this specific case we\n            // use low-level DOM manipulation to insert container's marker (comment) node.\n            if (isRootView(hostView)) {\n                var renderer = hostView[RENDERER];\n                var hostNative = getNativeByTNode(hostTNode, hostView);\n                var parentOfHostNative = nativeParentNode(renderer, hostNative);\n                nativeInsertBefore(renderer, parentOfHostNative, commentNode, nativeNextSibling(renderer, hostNative));\n            }\n            else {\n                appendChild(commentNode, hostTNode, hostView);\n            }\n            hostView[hostTNode.index] = lContainer =\n                createLContainer(slotValue, hostView, commentNode, hostTNode, true);\n            addToViewTree(hostView, lContainer);\n        }\n        return new R3ViewContainerRef(lContainer, hostTNode, hostView);\n    }\n    /** Returns a ChangeDetectorRef (a.k.a. a ViewRef) */\n    function injectChangeDetectorRef() {\n        return createViewRef(getPreviousOrParentTNode(), getLView(), null);\n    }\n    /**\n     * Creates a ViewRef and stores it on the injector as ChangeDetectorRef (public alias).\n     *\n     * @param hostTNode The node that is requesting a ChangeDetectorRef\n     * @param hostView The view to which the node belongs\n     * @param context The context for this change detector ref\n     * @returns The ChangeDetectorRef to use\n     */\n    function createViewRef(hostTNode, hostView, context) {\n        if (isComponent(hostTNode)) {\n            var componentIndex = hostTNode.directiveStart;\n            var componentView = getComponentViewByIndex(hostTNode.index, hostView);\n            return new ViewRef(componentView, context, componentIndex);\n        }\n        else if (hostTNode.type === 3 /* Element */ || hostTNode.type === 0 /* Container */ ||\n            hostTNode.type === 4 /* ElementContainer */) {\n            var hostComponentView = findComponentView(hostView);\n            return new ViewRef(hostComponentView, hostComponentView[CONTEXT], -1);\n        }\n        return null;\n    }\n    /** Returns a Renderer2 (or throws when application was bootstrapped with Renderer3) */\n    function getOrCreateRenderer2(view) {\n        var renderer = view[RENDERER];\n        if (isProceduralRenderer(renderer)) {\n            return renderer;\n        }\n        else {\n            throw new Error('Cannot inject Renderer2 when the application uses Renderer3!');\n        }\n    }\n    /** Injects a Renderer2 for the current component. */\n    function injectRenderer2() {\n        // We need the Renderer to be based on the component that it's being injected into, however since\n        // DI happens before we've entered its view, `getLView` will return the parent view instead.\n        var lView = getLView();\n        var tNode = getPreviousOrParentTNode();\n        var nodeAtIndex = getComponentViewByIndex(tNode.index, lView);\n        return getOrCreateRenderer2(isLView(nodeAtIndex) ? nodeAtIndex : lView);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A wrapper around a native element inside of a View.\n     *\n     * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM\n     * element.\n     *\n     * @security Permitting direct access to the DOM can make your application more vulnerable to\n     * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the\n     * [Security Guide](http://g.co/ng/security).\n     *\n     * @publicApi\n     */\n    // Note: We don't expose things like `Injector`, `ViewContainer`, ... here,\n    // i.e. users have to ask for what they need. With that, we can build better analysis tools\n    // and could do better codegen in the future.\n    var ElementRef = /** @class */ (function () {\n        function ElementRef(nativeElement) {\n            this.nativeElement = nativeElement;\n        }\n        /**\n         * @internal\n         * @nocollapse\n         */\n        ElementRef.__NG_ELEMENT_ID__ = function () { return SWITCH_ELEMENT_REF_FACTORY(ElementRef); };\n        return ElementRef;\n    }());\n    var SWITCH_ELEMENT_REF_FACTORY__POST_R3__ = injectElementRef;\n    var SWITCH_ELEMENT_REF_FACTORY = SWITCH_ELEMENT_REF_FACTORY__POST_R3__;\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * @deprecated Use `RendererType2` (and `Renderer2`) instead.\n     * @publicApi\n     */\n    var RenderComponentType = /** @class */ (function () {\n        function RenderComponentType(id, templateUrl, slotCount, encapsulation, styles, animations) {\n            this.id = id;\n            this.templateUrl = templateUrl;\n            this.slotCount = slotCount;\n            this.encapsulation = encapsulation;\n            this.styles = styles;\n            this.animations = animations;\n        }\n        return RenderComponentType;\n    }());\n    /**\n     * @deprecated Debug info is handled internally in the view engine now.\n     */\n    var RenderDebugInfo = /** @class */ (function () {\n        function RenderDebugInfo() {\n        }\n        return RenderDebugInfo;\n    }());\n    /**\n     * @deprecated Use the `Renderer2` instead.\n     * @publicApi\n     */\n    var Renderer = /** @class */ (function () {\n        function Renderer() {\n        }\n        return Renderer;\n    }());\n    var Renderer2Interceptor = new InjectionToken('Renderer2Interceptor');\n    /**\n     * Injectable service that provides a low-level interface for modifying the UI.\n     *\n     * Use this service to bypass Angular's templating and make custom UI changes that can't be\n     * expressed declaratively. For example if you need to set a property or an attribute whose name is\n     * not statically known, use {@link Renderer#setElementProperty setElementProperty} or\n     * {@link Renderer#setElementAttribute setElementAttribute} respectively.\n     *\n     * If you are implementing a custom renderer, you must implement this interface.\n     *\n     * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.\n     *\n     * @deprecated Use `RendererFactory2` instead.\n     * @publicApi\n     */\n    var RootRenderer = /** @class */ (function () {\n        function RootRenderer() {\n        }\n        return RootRenderer;\n    }());\n    /**\n     * Creates and initializes a custom renderer that implements the `Renderer2` base class.\n     *\n     * @publicApi\n     */\n    var RendererFactory2 = /** @class */ (function () {\n        function RendererFactory2() {\n        }\n        return RendererFactory2;\n    }());\n    (function (RendererStyleFlags2) {\n        /**\n         * Marks a style as important.\n         */\n        RendererStyleFlags2[RendererStyleFlags2[\"Important\"] = 1] = \"Important\";\n        /**\n         * Marks a style as using dash case naming (this-is-dash-case).\n         */\n        RendererStyleFlags2[RendererStyleFlags2[\"DashCase\"] = 2] = \"DashCase\";\n    })(exports.RendererStyleFlags2 || (exports.RendererStyleFlags2 = {}));\n    /**\n     * Extend this base class to implement custom rendering. By default, Angular\n     * renders a template into DOM. You can use custom rendering to intercept\n     * rendering calls, or to render to something other than DOM.\n     *\n     * Create your custom renderer using `RendererFactory2`.\n     *\n     * Use a custom renderer to bypass Angular's templating and\n     * make custom UI changes that can't be expressed declaratively.\n     * For example if you need to set a property or an attribute whose name is\n     * not statically known, use the `setProperty()` or\n     * `setAttribute()` method.\n     *\n     * @publicApi\n     */\n    var Renderer2 = /** @class */ (function () {\n        function Renderer2() {\n        }\n        /**\n         * @internal\n         * @nocollapse\n         */\n        Renderer2.__NG_ELEMENT_ID__ = function () { return SWITCH_RENDERER2_FACTORY(); };\n        return Renderer2;\n    }());\n    var SWITCH_RENDERER2_FACTORY__POST_R3__ = injectRenderer2;\n    var SWITCH_RENDERER2_FACTORY = SWITCH_RENDERER2_FACTORY__POST_R3__;\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * @description Represents the version of Angular\n     *\n     * @publicApi\n     */\n    var Version = /** @class */ (function () {\n        function Version(full) {\n            this.full = full;\n            this.major = full.split('.')[0];\n            this.minor = full.split('.')[1];\n            this.patch = full.split('.').slice(2).join('.');\n        }\n        return Version;\n    }());\n    /**\n     * @publicApi\n     */\n    var VERSION = new Version('8.2.0-next.2+31.sha-f10d6c6.with-local-changes');\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var DefaultIterableDifferFactory = /** @class */ (function () {\n        function DefaultIterableDifferFactory() {\n        }\n        DefaultIterableDifferFactory.prototype.supports = function (obj) { return isListLikeIterable(obj); };\n        DefaultIterableDifferFactory.prototype.create = function (trackByFn) {\n            return new DefaultIterableDiffer(trackByFn);\n        };\n        return DefaultIterableDifferFactory;\n    }());\n    var trackByIdentity = function (index, item) { return item; };\n    /**\n     * @deprecated v4.0.0 - Should not be part of public API.\n     * @publicApi\n     */\n    var DefaultIterableDiffer = /** @class */ (function () {\n        function DefaultIterableDiffer(trackByFn) {\n            this.length = 0;\n            // Keeps track of the used records at any point in time (during & across `_check()` calls)\n            this._linkedRecords = null;\n            // Keeps track of the removed records at any point in time during `_check()` calls.\n            this._unlinkedRecords = null;\n            this._previousItHead = null;\n            this._itHead = null;\n            this._itTail = null;\n            this._additionsHead = null;\n            this._additionsTail = null;\n            this._movesHead = null;\n            this._movesTail = null;\n            this._removalsHead = null;\n            this._removalsTail = null;\n            // Keeps track of records where custom track by is the same, but item identity has changed\n            this._identityChangesHead = null;\n            this._identityChangesTail = null;\n            this._trackByFn = trackByFn || trackByIdentity;\n        }\n        DefaultIterableDiffer.prototype.forEachItem = function (fn) {\n            var record;\n            for (record = this._itHead; record !== null; record = record._next) {\n                fn(record);\n            }\n        };\n        DefaultIterableDiffer.prototype.forEachOperation = function (fn) {\n            var nextIt = this._itHead;\n            var nextRemove = this._removalsHead;\n            var addRemoveOffset = 0;\n            var moveOffsets = null;\n            while (nextIt || nextRemove) {\n                // Figure out which is the next record to process\n                // Order: remove, add, move\n                var record = !nextRemove ||\n                    nextIt &&\n                        nextIt.currentIndex <\n                            getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ?\n                    nextIt :\n                    nextRemove;\n                var adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);\n                var currentIndex = record.currentIndex;\n                // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary\n                if (record === nextRemove) {\n                    addRemoveOffset--;\n                    nextRemove = nextRemove._nextRemoved;\n                }\n                else {\n                    nextIt = nextIt._next;\n                    if (record.previousIndex == null) {\n                        addRemoveOffset++;\n                    }\n                    else {\n                        // INVARIANT:  currentIndex < previousIndex\n                        if (!moveOffsets)\n                            moveOffsets = [];\n                        var localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;\n                        var localCurrentIndex = currentIndex - addRemoveOffset;\n                        if (localMovePreviousIndex != localCurrentIndex) {\n                            for (var i = 0; i < localMovePreviousIndex; i++) {\n                                var offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);\n                                var index = offset + i;\n                                if (localCurrentIndex <= index && index < localMovePreviousIndex) {\n                                    moveOffsets[i] = offset + 1;\n                                }\n                            }\n                            var previousIndex = record.previousIndex;\n                            moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;\n                        }\n                    }\n                }\n                if (adjPreviousIndex !== currentIndex) {\n                    fn(record, adjPreviousIndex, currentIndex);\n                }\n            }\n        };\n        DefaultIterableDiffer.prototype.forEachPreviousItem = function (fn) {\n            var record;\n            for (record = this._previousItHead; record !== null; record = record._nextPrevious) {\n                fn(record);\n            }\n        };\n        DefaultIterableDiffer.prototype.forEachAddedItem = function (fn) {\n            var record;\n            for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n                fn(record);\n            }\n        };\n        DefaultIterableDiffer.prototype.forEachMovedItem = function (fn) {\n            var record;\n            for (record = this._movesHead; record !== null; record = record._nextMoved) {\n                fn(record);\n            }\n        };\n        DefaultIterableDiffer.prototype.forEachRemovedItem = function (fn) {\n            var record;\n            for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n                fn(record);\n            }\n        };\n        DefaultIterableDiffer.prototype.forEachIdentityChange = function (fn) {\n            var record;\n            for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {\n                fn(record);\n            }\n        };\n        DefaultIterableDiffer.prototype.diff = function (collection) {\n            if (collection == null)\n                collection = [];\n            if (!isListLikeIterable(collection)) {\n                throw new Error(\"Error trying to diff '\" + stringify(collection) + \"'. Only arrays and iterables are allowed\");\n            }\n            if (this.check(collection)) {\n                return this;\n            }\n            else {\n                return null;\n            }\n        };\n        DefaultIterableDiffer.prototype.onDestroy = function () { };\n        DefaultIterableDiffer.prototype.check = function (collection) {\n            var _this = this;\n            this._reset();\n            var record = this._itHead;\n            var mayBeDirty = false;\n            var index;\n            var item;\n            var itemTrackBy;\n            if (Array.isArray(collection)) {\n                this.length = collection.length;\n                for (var index_1 = 0; index_1 < this.length; index_1++) {\n                    item = collection[index_1];\n                    itemTrackBy = this._trackByFn(index_1, item);\n                    if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n                        record = this._mismatch(record, item, itemTrackBy, index_1);\n                        mayBeDirty = true;\n                    }\n                    else {\n                        if (mayBeDirty) {\n                            // TODO(misko): can we limit this to duplicates only?\n                            record = this._verifyReinsertion(record, item, itemTrackBy, index_1);\n                        }\n                        if (!looseIdentical(record.item, item))\n                            this._addIdentityChange(record, item);\n                    }\n                    record = record._next;\n                }\n            }\n            else {\n                index = 0;\n                iterateListLike(collection, function (item) {\n                    itemTrackBy = _this._trackByFn(index, item);\n                    if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n                        record = _this._mismatch(record, item, itemTrackBy, index);\n                        mayBeDirty = true;\n                    }\n                    else {\n                        if (mayBeDirty) {\n                            // TODO(misko): can we limit this to duplicates only?\n                            record = _this._verifyReinsertion(record, item, itemTrackBy, index);\n                        }\n                        if (!looseIdentical(record.item, item))\n                            _this._addIdentityChange(record, item);\n                    }\n                    record = record._next;\n                    index++;\n                });\n                this.length = index;\n            }\n            this._truncate(record);\n            this.collection = collection;\n            return this.isDirty;\n        };\n        Object.defineProperty(DefaultIterableDiffer.prototype, \"isDirty\", {\n            /* CollectionChanges is considered dirty if it has any additions, moves, removals, or identity\n             * changes.\n             */\n            get: function () {\n                return this._additionsHead !== null || this._movesHead !== null ||\n                    this._removalsHead !== null || this._identityChangesHead !== null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Reset the state of the change objects to show no changes. This means set previousKey to\n         * currentKey, and clear all of the queues (additions, moves, removals).\n         * Set the previousIndexes of moved and added items to their currentIndexes\n         * Reset the list of additions, moves and removals\n         *\n         * @internal\n         */\n        DefaultIterableDiffer.prototype._reset = function () {\n            if (this.isDirty) {\n                var record = void 0;\n                var nextRecord = void 0;\n                for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {\n                    record._nextPrevious = record._next;\n                }\n                for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n                    record.previousIndex = record.currentIndex;\n                }\n                this._additionsHead = this._additionsTail = null;\n                for (record = this._movesHead; record !== null; record = nextRecord) {\n                    record.previousIndex = record.currentIndex;\n                    nextRecord = record._nextMoved;\n                }\n                this._movesHead = this._movesTail = null;\n                this._removalsHead = this._removalsTail = null;\n                this._identityChangesHead = this._identityChangesTail = null;\n                // TODO(vicb): when assert gets supported\n                // assert(!this.isDirty);\n            }\n        };\n        /**\n         * This is the core function which handles differences between collections.\n         *\n         * - `record` is the record which we saw at this position last time. If null then it is a new\n         *   item.\n         * - `item` is the current item in the collection\n         * - `index` is the position of the item in the collection\n         *\n         * @internal\n         */\n        DefaultIterableDiffer.prototype._mismatch = function (record, item, itemTrackBy, index) {\n            // The previous record after which we will append the current one.\n            var previousRecord;\n            if (record === null) {\n                previousRecord = this._itTail;\n            }\n            else {\n                previousRecord = record._prev;\n                // Remove the record from the collection since we know it does not match the item.\n                this._remove(record);\n            }\n            // Attempt to see if we have seen the item before.\n            record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);\n            if (record !== null) {\n                // We have seen this before, we need to move it forward in the collection.\n                // But first we need to check if identity changed, so we can update in view if necessary\n                if (!looseIdentical(record.item, item))\n                    this._addIdentityChange(record, item);\n                this._moveAfter(record, previousRecord, index);\n            }\n            else {\n                // Never seen it, check evicted list.\n                record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n                if (record !== null) {\n                    // It is an item which we have evicted earlier: reinsert it back into the list.\n                    // But first we need to check if identity changed, so we can update in view if necessary\n                    if (!looseIdentical(record.item, item))\n                        this._addIdentityChange(record, item);\n                    this._reinsertAfter(record, previousRecord, index);\n                }\n                else {\n                    // It is a new item: add it.\n                    record =\n                        this._addAfter(new IterableChangeRecord_(item, itemTrackBy), previousRecord, index);\n                }\n            }\n            return record;\n        };\n        /**\n         * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\n         *\n         * Use case: `[a, a]` => `[b, a, a]`\n         *\n         * If we did not have this check then the insertion of `b` would:\n         *   1) evict first `a`\n         *   2) insert `b` at `0` index.\n         *   3) leave `a` at index `1` as is. <-- this is wrong!\n         *   3) reinsert `a` at index 2. <-- this is wrong!\n         *\n         * The correct behavior is:\n         *   1) evict first `a`\n         *   2) insert `b` at `0` index.\n         *   3) reinsert `a` at index 1.\n         *   3) move `a` at from `1` to `2`.\n         *\n         *\n         * Double check that we have not evicted a duplicate item. We need to check if the item type may\n         * have already been removed:\n         * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\n         * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\n         * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\n         * at the end.\n         *\n         * @internal\n         */\n        DefaultIterableDiffer.prototype._verifyReinsertion = function (record, item, itemTrackBy, index) {\n            var reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n            if (reinsertRecord !== null) {\n                record = this._reinsertAfter(reinsertRecord, record._prev, index);\n            }\n            else if (record.currentIndex != index) {\n                record.currentIndex = index;\n                this._addToMoves(record, index);\n            }\n            return record;\n        };\n        /**\n         * Get rid of any excess {@link IterableChangeRecord_}s from the previous collection\n         *\n         * - `record` The first excess {@link IterableChangeRecord_}.\n         *\n         * @internal\n         */\n        DefaultIterableDiffer.prototype._truncate = function (record) {\n            // Anything after that needs to be removed;\n            while (record !== null) {\n                var nextRecord = record._next;\n                this._addToRemovals(this._unlink(record));\n                record = nextRecord;\n            }\n            if (this._unlinkedRecords !== null) {\n                this._unlinkedRecords.clear();\n            }\n            if (this._additionsTail !== null) {\n                this._additionsTail._nextAdded = null;\n            }\n            if (this._movesTail !== null) {\n                this._movesTail._nextMoved = null;\n            }\n            if (this._itTail !== null) {\n                this._itTail._next = null;\n            }\n            if (this._removalsTail !== null) {\n                this._removalsTail._nextRemoved = null;\n            }\n            if (this._identityChangesTail !== null) {\n                this._identityChangesTail._nextIdentityChange = null;\n            }\n        };\n        /** @internal */\n        DefaultIterableDiffer.prototype._reinsertAfter = function (record, prevRecord, index) {\n            if (this._unlinkedRecords !== null) {\n                this._unlinkedRecords.remove(record);\n            }\n            var prev = record._prevRemoved;\n            var next = record._nextRemoved;\n            if (prev === null) {\n                this._removalsHead = next;\n            }\n            else {\n                prev._nextRemoved = next;\n            }\n            if (next === null) {\n                this._removalsTail = prev;\n            }\n            else {\n                next._prevRemoved = prev;\n            }\n            this._insertAfter(record, prevRecord, index);\n            this._addToMoves(record, index);\n            return record;\n        };\n        /** @internal */\n        DefaultIterableDiffer.prototype._moveAfter = function (record, prevRecord, index) {\n            this._unlink(record);\n            this._insertAfter(record, prevRecord, index);\n            this._addToMoves(record, index);\n            return record;\n        };\n        /** @internal */\n        DefaultIterableDiffer.prototype._addAfter = function (record, prevRecord, index) {\n            this._insertAfter(record, prevRecord, index);\n            if (this._additionsTail === null) {\n                // TODO(vicb):\n                // assert(this._additionsHead === null);\n                this._additionsTail = this._additionsHead = record;\n            }\n            else {\n                // TODO(vicb):\n                // assert(_additionsTail._nextAdded === null);\n                // assert(record._nextAdded === null);\n                this._additionsTail = this._additionsTail._nextAdded = record;\n            }\n            return record;\n        };\n        /** @internal */\n        DefaultIterableDiffer.prototype._insertAfter = function (record, prevRecord, index) {\n            // TODO(vicb):\n            // assert(record != prevRecord);\n            // assert(record._next === null);\n            // assert(record._prev === null);\n            var next = prevRecord === null ? this._itHead : prevRecord._next;\n            // TODO(vicb):\n            // assert(next != record);\n            // assert(prevRecord != record);\n            record._next = next;\n            record._prev = prevRecord;\n            if (next === null) {\n                this._itTail = record;\n            }\n            else {\n                next._prev = record;\n            }\n            if (prevRecord === null) {\n                this._itHead = record;\n            }\n            else {\n                prevRecord._next = record;\n            }\n            if (this._linkedRecords === null) {\n                this._linkedRecords = new _DuplicateMap();\n            }\n            this._linkedRecords.put(record);\n            record.currentIndex = index;\n            return record;\n        };\n        /** @internal */\n        DefaultIterableDiffer.prototype._remove = function (record) {\n            return this._addToRemovals(this._unlink(record));\n        };\n        /** @internal */\n        DefaultIterableDiffer.prototype._unlink = function (record) {\n            if (this._linkedRecords !== null) {\n                this._linkedRecords.remove(record);\n            }\n            var prev = record._prev;\n            var next = record._next;\n            // TODO(vicb):\n            // assert((record._prev = null) === null);\n            // assert((record._next = null) === null);\n            if (prev === null) {\n                this._itHead = next;\n            }\n            else {\n                prev._next = next;\n            }\n            if (next === null) {\n                this._itTail = prev;\n            }\n            else {\n                next._prev = prev;\n            }\n            return record;\n        };\n        /** @internal */\n        DefaultIterableDiffer.prototype._addToMoves = function (record, toIndex) {\n            // TODO(vicb):\n            // assert(record._nextMoved === null);\n            if (record.previousIndex === toIndex) {\n                return record;\n            }\n            if (this._movesTail === null) {\n                // TODO(vicb):\n                // assert(_movesHead === null);\n                this._movesTail = this._movesHead = record;\n            }\n            else {\n                // TODO(vicb):\n                // assert(_movesTail._nextMoved === null);\n                this._movesTail = this._movesTail._nextMoved = record;\n            }\n            return record;\n        };\n        DefaultIterableDiffer.prototype._addToRemovals = function (record) {\n            if (this._unlinkedRecords === null) {\n                this._unlinkedRecords = new _DuplicateMap();\n            }\n            this._unlinkedRecords.put(record);\n            record.currentIndex = null;\n            record._nextRemoved = null;\n            if (this._removalsTail === null) {\n                // TODO(vicb):\n                // assert(_removalsHead === null);\n                this._removalsTail = this._removalsHead = record;\n                record._prevRemoved = null;\n            }\n            else {\n                // TODO(vicb):\n                // assert(_removalsTail._nextRemoved === null);\n                // assert(record._nextRemoved === null);\n                record._prevRemoved = this._removalsTail;\n                this._removalsTail = this._removalsTail._nextRemoved = record;\n            }\n            return record;\n        };\n        /** @internal */\n        DefaultIterableDiffer.prototype._addIdentityChange = function (record, item) {\n            record.item = item;\n            if (this._identityChangesTail === null) {\n                this._identityChangesTail = this._identityChangesHead = record;\n            }\n            else {\n                this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;\n            }\n            return record;\n        };\n        return DefaultIterableDiffer;\n    }());\n    var IterableChangeRecord_ = /** @class */ (function () {\n        function IterableChangeRecord_(item, trackById) {\n            this.item = item;\n            this.trackById = trackById;\n            this.currentIndex = null;\n            this.previousIndex = null;\n            /** @internal */\n            this._nextPrevious = null;\n            /** @internal */\n            this._prev = null;\n            /** @internal */\n            this._next = null;\n            /** @internal */\n            this._prevDup = null;\n            /** @internal */\n            this._nextDup = null;\n            /** @internal */\n            this._prevRemoved = null;\n            /** @internal */\n            this._nextRemoved = null;\n            /** @internal */\n            this._nextAdded = null;\n            /** @internal */\n            this._nextMoved = null;\n            /** @internal */\n            this._nextIdentityChange = null;\n        }\n        return IterableChangeRecord_;\n    }());\n    // A linked list of CollectionChangeRecords with the same IterableChangeRecord_.item\n    var _DuplicateItemRecordList = /** @class */ (function () {\n        function _DuplicateItemRecordList() {\n            /** @internal */\n            this._head = null;\n            /** @internal */\n            this._tail = null;\n        }\n        /**\n         * Append the record to the list of duplicates.\n         *\n         * Note: by design all records in the list of duplicates hold the same value in record.item.\n         */\n        _DuplicateItemRecordList.prototype.add = function (record) {\n            if (this._head === null) {\n                this._head = this._tail = record;\n                record._nextDup = null;\n                record._prevDup = null;\n            }\n            else {\n                // TODO(vicb):\n                // assert(record.item ==  _head.item ||\n                //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);\n                this._tail._nextDup = record;\n                record._prevDup = this._tail;\n                record._nextDup = null;\n                this._tail = record;\n            }\n        };\n        // Returns a IterableChangeRecord_ having IterableChangeRecord_.trackById == trackById and\n        // IterableChangeRecord_.currentIndex >= atOrAfterIndex\n        _DuplicateItemRecordList.prototype.get = function (trackById, atOrAfterIndex) {\n            var record;\n            for (record = this._head; record !== null; record = record._nextDup) {\n                if ((atOrAfterIndex === null || atOrAfterIndex <= record.currentIndex) &&\n                    looseIdentical(record.trackById, trackById)) {\n                    return record;\n                }\n            }\n            return null;\n        };\n        /**\n         * Remove one {@link IterableChangeRecord_} from the list of duplicates.\n         *\n         * Returns whether the list of duplicates is empty.\n         */\n        _DuplicateItemRecordList.prototype.remove = function (record) {\n            // TODO(vicb):\n            // assert(() {\n            //  // verify that the record being removed is in the list.\n            //  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {\n            //    if (identical(cursor, record)) return true;\n            //  }\n            //  return false;\n            //});\n            var prev = record._prevDup;\n            var next = record._nextDup;\n            if (prev === null) {\n                this._head = next;\n            }\n            else {\n                prev._nextDup = next;\n            }\n            if (next === null) {\n                this._tail = prev;\n            }\n            else {\n                next._prevDup = prev;\n            }\n            return this._head === null;\n        };\n        return _DuplicateItemRecordList;\n    }());\n    var _DuplicateMap = /** @class */ (function () {\n        function _DuplicateMap() {\n            this.map = new Map();\n        }\n        _DuplicateMap.prototype.put = function (record) {\n            var key = record.trackById;\n            var duplicates = this.map.get(key);\n            if (!duplicates) {\n                duplicates = new _DuplicateItemRecordList();\n                this.map.set(key, duplicates);\n            }\n            duplicates.add(record);\n        };\n        /**\n         * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we\n         * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.\n         *\n         * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\n         * have any more `a`s needs to return the second `a`.\n         */\n        _DuplicateMap.prototype.get = function (trackById, atOrAfterIndex) {\n            var key = trackById;\n            var recordList = this.map.get(key);\n            return recordList ? recordList.get(trackById, atOrAfterIndex) : null;\n        };\n        /**\n         * Removes a {@link IterableChangeRecord_} from the list of duplicates.\n         *\n         * The list of duplicates also is removed from the map if it gets empty.\n         */\n        _DuplicateMap.prototype.remove = function (record) {\n            var key = record.trackById;\n            var recordList = this.map.get(key);\n            // Remove the list of duplicates when it gets empty\n            if (recordList.remove(record)) {\n                this.map.delete(key);\n            }\n            return record;\n        };\n        Object.defineProperty(_DuplicateMap.prototype, \"isEmpty\", {\n            get: function () { return this.map.size === 0; },\n            enumerable: true,\n            configurable: true\n        });\n        _DuplicateMap.prototype.clear = function () { this.map.clear(); };\n        return _DuplicateMap;\n    }());\n    function getPreviousIndex(item, addRemoveOffset, moveOffsets) {\n        var previousIndex = item.previousIndex;\n        if (previousIndex === null)\n            return previousIndex;\n        var moveOffset = 0;\n        if (moveOffsets && previousIndex < moveOffsets.length) {\n            moveOffset = moveOffsets[previousIndex];\n        }\n        return previousIndex + addRemoveOffset + moveOffset;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var DefaultKeyValueDifferFactory = /** @class */ (function () {\n        function DefaultKeyValueDifferFactory() {\n        }\n        DefaultKeyValueDifferFactory.prototype.supports = function (obj) { return obj instanceof Map || isJsObject(obj); };\n        DefaultKeyValueDifferFactory.prototype.create = function () { return new DefaultKeyValueDiffer(); };\n        return DefaultKeyValueDifferFactory;\n    }());\n    var DefaultKeyValueDiffer = /** @class */ (function () {\n        function DefaultKeyValueDiffer() {\n            this._records = new Map();\n            this._mapHead = null;\n            // _appendAfter is used in the check loop\n            this._appendAfter = null;\n            this._previousMapHead = null;\n            this._changesHead = null;\n            this._changesTail = null;\n            this._additionsHead = null;\n            this._additionsTail = null;\n            this._removalsHead = null;\n            this._removalsTail = null;\n        }\n        Object.defineProperty(DefaultKeyValueDiffer.prototype, \"isDirty\", {\n            get: function () {\n                return this._additionsHead !== null || this._changesHead !== null ||\n                    this._removalsHead !== null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        DefaultKeyValueDiffer.prototype.forEachItem = function (fn) {\n            var record;\n            for (record = this._mapHead; record !== null; record = record._next) {\n                fn(record);\n            }\n        };\n        DefaultKeyValueDiffer.prototype.forEachPreviousItem = function (fn) {\n            var record;\n            for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {\n                fn(record);\n            }\n        };\n        DefaultKeyValueDiffer.prototype.forEachChangedItem = function (fn) {\n            var record;\n            for (record = this._changesHead; record !== null; record = record._nextChanged) {\n                fn(record);\n            }\n        };\n        DefaultKeyValueDiffer.prototype.forEachAddedItem = function (fn) {\n            var record;\n            for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n                fn(record);\n            }\n        };\n        DefaultKeyValueDiffer.prototype.forEachRemovedItem = function (fn) {\n            var record;\n            for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n                fn(record);\n            }\n        };\n        DefaultKeyValueDiffer.prototype.diff = function (map) {\n            if (!map) {\n                map = new Map();\n            }\n            else if (!(map instanceof Map || isJsObject(map))) {\n                throw new Error(\"Error trying to diff '\" + stringify(map) + \"'. Only maps and objects are allowed\");\n            }\n            return this.check(map) ? this : null;\n        };\n        DefaultKeyValueDiffer.prototype.onDestroy = function () { };\n        /**\n         * Check the current state of the map vs the previous.\n         * The algorithm is optimised for when the keys do no change.\n         */\n        DefaultKeyValueDiffer.prototype.check = function (map) {\n            var _this = this;\n            this._reset();\n            var insertBefore = this._mapHead;\n            this._appendAfter = null;\n            this._forEach(map, function (value, key) {\n                if (insertBefore && insertBefore.key === key) {\n                    _this._maybeAddToChanges(insertBefore, value);\n                    _this._appendAfter = insertBefore;\n                    insertBefore = insertBefore._next;\n                }\n                else {\n                    var record = _this._getOrCreateRecordForKey(key, value);\n                    insertBefore = _this._insertBeforeOrAppend(insertBefore, record);\n                }\n            });\n            // Items remaining at the end of the list have been deleted\n            if (insertBefore) {\n                if (insertBefore._prev) {\n                    insertBefore._prev._next = null;\n                }\n                this._removalsHead = insertBefore;\n                for (var record = insertBefore; record !== null; record = record._nextRemoved) {\n                    if (record === this._mapHead) {\n                        this._mapHead = null;\n                    }\n                    this._records.delete(record.key);\n                    record._nextRemoved = record._next;\n                    record.previousValue = record.currentValue;\n                    record.currentValue = null;\n                    record._prev = null;\n                    record._next = null;\n                }\n            }\n            // Make sure tails have no next records from previous runs\n            if (this._changesTail)\n                this._changesTail._nextChanged = null;\n            if (this._additionsTail)\n                this._additionsTail._nextAdded = null;\n            return this.isDirty;\n        };\n        /**\n         * Inserts a record before `before` or append at the end of the list when `before` is null.\n         *\n         * Notes:\n         * - This method appends at `this._appendAfter`,\n         * - This method updates `this._appendAfter`,\n         * - The return value is the new value for the insertion pointer.\n         */\n        DefaultKeyValueDiffer.prototype._insertBeforeOrAppend = function (before, record) {\n            if (before) {\n                var prev = before._prev;\n                record._next = before;\n                record._prev = prev;\n                before._prev = record;\n                if (prev) {\n                    prev._next = record;\n                }\n                if (before === this._mapHead) {\n                    this._mapHead = record;\n                }\n                this._appendAfter = before;\n                return before;\n            }\n            if (this._appendAfter) {\n                this._appendAfter._next = record;\n                record._prev = this._appendAfter;\n            }\n            else {\n                this._mapHead = record;\n            }\n            this._appendAfter = record;\n            return null;\n        };\n        DefaultKeyValueDiffer.prototype._getOrCreateRecordForKey = function (key, value) {\n            if (this._records.has(key)) {\n                var record_1 = this._records.get(key);\n                this._maybeAddToChanges(record_1, value);\n                var prev = record_1._prev;\n                var next = record_1._next;\n                if (prev) {\n                    prev._next = next;\n                }\n                if (next) {\n                    next._prev = prev;\n                }\n                record_1._next = null;\n                record_1._prev = null;\n                return record_1;\n            }\n            var record = new KeyValueChangeRecord_(key);\n            this._records.set(key, record);\n            record.currentValue = value;\n            this._addToAdditions(record);\n            return record;\n        };\n        /** @internal */\n        DefaultKeyValueDiffer.prototype._reset = function () {\n            if (this.isDirty) {\n                var record = void 0;\n                // let `_previousMapHead` contain the state of the map before the changes\n                this._previousMapHead = this._mapHead;\n                for (record = this._previousMapHead; record !== null; record = record._next) {\n                    record._nextPrevious = record._next;\n                }\n                // Update `record.previousValue` with the value of the item before the changes\n                // We need to update all changed items (that's those which have been added and changed)\n                for (record = this._changesHead; record !== null; record = record._nextChanged) {\n                    record.previousValue = record.currentValue;\n                }\n                for (record = this._additionsHead; record != null; record = record._nextAdded) {\n                    record.previousValue = record.currentValue;\n                }\n                this._changesHead = this._changesTail = null;\n                this._additionsHead = this._additionsTail = null;\n                this._removalsHead = null;\n            }\n        };\n        // Add the record or a given key to the list of changes only when the value has actually changed\n        DefaultKeyValueDiffer.prototype._maybeAddToChanges = function (record, newValue) {\n            if (!looseIdentical(newValue, record.currentValue)) {\n                record.previousValue = record.currentValue;\n                record.currentValue = newValue;\n                this._addToChanges(record);\n            }\n        };\n        DefaultKeyValueDiffer.prototype._addToAdditions = function (record) {\n            if (this._additionsHead === null) {\n                this._additionsHead = this._additionsTail = record;\n            }\n            else {\n                this._additionsTail._nextAdded = record;\n                this._additionsTail = record;\n            }\n        };\n        DefaultKeyValueDiffer.prototype._addToChanges = function (record) {\n            if (this._changesHead === null) {\n                this._changesHead = this._changesTail = record;\n            }\n            else {\n                this._changesTail._nextChanged = record;\n                this._changesTail = record;\n            }\n        };\n        /** @internal */\n        DefaultKeyValueDiffer.prototype._forEach = function (obj, fn) {\n            if (obj instanceof Map) {\n                obj.forEach(fn);\n            }\n            else {\n                Object.keys(obj).forEach(function (k) { return fn(obj[k], k); });\n            }\n        };\n        return DefaultKeyValueDiffer;\n    }());\n    var KeyValueChangeRecord_ = /** @class */ (function () {\n        function KeyValueChangeRecord_(key) {\n            this.key = key;\n            this.previousValue = null;\n            this.currentValue = null;\n            /** @internal */\n            this._nextPrevious = null;\n            /** @internal */\n            this._next = null;\n            /** @internal */\n            this._prev = null;\n            /** @internal */\n            this._nextAdded = null;\n            /** @internal */\n            this._nextRemoved = null;\n            /** @internal */\n            this._nextChanged = null;\n        }\n        return KeyValueChangeRecord_;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.\n     *\n     * @publicApi\n     */\n    var IterableDiffers = /** @class */ (function () {\n        function IterableDiffers(factories) {\n            this.factories = factories;\n        }\n        IterableDiffers.create = function (factories, parent) {\n            if (parent != null) {\n                var copied = parent.factories.slice();\n                factories = factories.concat(copied);\n            }\n            return new IterableDiffers(factories);\n        };\n        /**\n         * Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the\n         * inherited {@link IterableDiffers} instance with the provided factories and return a new\n         * {@link IterableDiffers} instance.\n         *\n         * @usageNotes\n         * ### Example\n         *\n         * The following example shows how to extend an existing list of factories,\n         * which will only be applied to the injector for this component and its children.\n         * This step is all that's required to make a new {@link IterableDiffer} available.\n         *\n         * ```\n         * @Component({\n         *   viewProviders: [\n         *     IterableDiffers.extend([new ImmutableListDiffer()])\n         *   ]\n         * })\n         * ```\n         */\n        IterableDiffers.extend = function (factories) {\n            return {\n                provide: IterableDiffers,\n                useFactory: function (parent) {\n                    if (!parent) {\n                        // Typically would occur when calling IterableDiffers.extend inside of dependencies passed\n                        // to\n                        // bootstrap(), which would override default pipes instead of extending them.\n                        throw new Error('Cannot extend IterableDiffers without a parent injector');\n                    }\n                    return IterableDiffers.create(factories, parent);\n                },\n                // Dependency technically isn't optional, but we can provide a better error message this way.\n                deps: [[IterableDiffers, new SkipSelf(), new Optional()]]\n            };\n        };\n        IterableDiffers.prototype.find = function (iterable) {\n            var factory = this.factories.find(function (f) { return f.supports(iterable); });\n            if (factory != null) {\n                return factory;\n            }\n            else {\n                throw new Error(\"Cannot find a differ supporting object '\" + iterable + \"' of type '\" + getTypeNameForDebugging(iterable) + \"'\");\n            }\n        };\n        /** @nocollapse */\n        IterableDiffers.ngInjectableDef = ɵɵdefineInjectable({\n            token: IterableDiffers,\n            providedIn: 'root',\n            factory: function () { return new IterableDiffers([new DefaultIterableDifferFactory()]); }\n        });\n        return IterableDiffers;\n    }());\n    function getTypeNameForDebugging(type) {\n        return type['name'] || typeof type;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.\n     *\n     * @publicApi\n     */\n    var KeyValueDiffers = /** @class */ (function () {\n        function KeyValueDiffers(factories) {\n            this.factories = factories;\n        }\n        KeyValueDiffers.create = function (factories, parent) {\n            if (parent) {\n                var copied = parent.factories.slice();\n                factories = factories.concat(copied);\n            }\n            return new KeyValueDiffers(factories);\n        };\n        /**\n         * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the\n         * inherited {@link KeyValueDiffers} instance with the provided factories and return a new\n         * {@link KeyValueDiffers} instance.\n         *\n         * @usageNotes\n         * ### Example\n         *\n         * The following example shows how to extend an existing list of factories,\n         * which will only be applied to the injector for this component and its children.\n         * This step is all that's required to make a new {@link KeyValueDiffer} available.\n         *\n         * ```\n         * @Component({\n         *   viewProviders: [\n         *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\n         *   ]\n         * })\n         * ```\n         */\n        KeyValueDiffers.extend = function (factories) {\n            return {\n                provide: KeyValueDiffers,\n                useFactory: function (parent) {\n                    if (!parent) {\n                        // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed\n                        // to bootstrap(), which would override default pipes instead of extending them.\n                        throw new Error('Cannot extend KeyValueDiffers without a parent injector');\n                    }\n                    return KeyValueDiffers.create(factories, parent);\n                },\n                // Dependency technically isn't optional, but we can provide a better error message this way.\n                deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]\n            };\n        };\n        KeyValueDiffers.prototype.find = function (kv) {\n            var factory = this.factories.find(function (f) { return f.supports(kv); });\n            if (factory) {\n                return factory;\n            }\n            throw new Error(\"Cannot find a differ supporting object '\" + kv + \"'\");\n        };\n        /** @nocollapse */\n        KeyValueDiffers.ngInjectableDef = ɵɵdefineInjectable({\n            token: KeyValueDiffers,\n            providedIn: 'root',\n            factory: function () { return new KeyValueDiffers([new DefaultKeyValueDifferFactory()]); }\n        });\n        return KeyValueDiffers;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Base class for Angular Views, provides change detection functionality.\n     * A change-detection tree collects all views that are to be checked for changes.\n     * Use the methods to add and remove views from the tree, initiate change-detection,\n     * and explicitly mark views as _dirty_, meaning that they have changed and need to be rerendered.\n     *\n     * @usageNotes\n     *\n     * The following examples demonstrate how to modify default change-detection behavior\n     * to perform explicit detection when needed.\n     *\n     * ### Use `markForCheck()` with `CheckOnce` strategy\n     *\n     * The following example sets the `OnPush` change-detection strategy for a component\n     * (`CheckOnce`, rather than the default `CheckAlways`), then forces a second check\n     * after an interval. See [live demo](http://plnkr.co/edit/GC512b?p=preview).\n     *\n     * <code-example path=\"core/ts/change_detect/change-detection.ts\"\n     * region=\"mark-for-check\"></code-example>\n     *\n     * ### Detach change detector to limit how often check occurs\n     *\n     * The following example defines a component with a large list of read-only data\n     * that is expected to change constantly, many times per second.\n     * To improve performance, we want to check and update the list\n     * less often than the changes actually occur. To do that, we detach\n     * the component's change detector and perform an explicit local check every five seconds.\n     *\n     * <code-example path=\"core/ts/change_detect/change-detection.ts\" region=\"detach\"></code-example>\n     *\n     *\n     * ### Reattaching a detached component\n     *\n     * The following example creates a component displaying live data.\n     * The component detaches its change detector from the main change detector tree\n     * when the `live` property is set to false, and reattaches it when the property\n     * becomes true.\n     *\n     * <code-example path=\"core/ts/change_detect/change-detection.ts\" region=\"reattach\"></code-example>\n     *\n     * @publicApi\n     */\n    var ChangeDetectorRef = /** @class */ (function () {\n        function ChangeDetectorRef() {\n        }\n        /**\n         * @internal\n         * @nocollapse\n         */\n        ChangeDetectorRef.__NG_ELEMENT_ID__ = function () { return SWITCH_CHANGE_DETECTOR_REF_FACTORY(); };\n        return ChangeDetectorRef;\n    }());\n    var SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__ = injectChangeDetectorRef;\n    var SWITCH_CHANGE_DETECTOR_REF_FACTORY = SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__;\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Structural diffing for `Object`s and `Map`s.\n     */\n    var keyValDiff = [new DefaultKeyValueDifferFactory()];\n    /**\n     * Structural diffing for `Iterable` types such as `Array`s.\n     */\n    var iterableDiff = [new DefaultIterableDifferFactory()];\n    var defaultIterableDiffers = new IterableDiffers(iterableDiff);\n    var defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Represents an embedded template that can be used to instantiate embedded views.\n     * To instantiate embedded views based on a template, use the `ViewContainerRef`\n     * method `createEmbeddedView()`.\n     *\n     * Access a `TemplateRef` instance by placing a directive on an `<ng-template>`\n     * element (or directive prefixed with `*`). The `TemplateRef` for the embedded view\n     * is injected into the constructor of the directive,\n     * using the `TemplateRef` token.\n     *\n     * You can also use a `Query` to find a `TemplateRef` associated with\n     * a component or a directive.\n     *\n     * @see `ViewContainerRef`\n     * @see [Navigate the Component Tree with DI](guide/dependency-injection-navtree)\n     *\n     * @publicApi\n     */\n    var TemplateRef = /** @class */ (function () {\n        function TemplateRef() {\n        }\n        /**\n         * @internal\n         * @nocollapse\n         */\n        TemplateRef.__NG_ELEMENT_ID__ = function () { return SWITCH_TEMPLATE_REF_FACTORY(TemplateRef, ElementRef); };\n        return TemplateRef;\n    }());\n    var SWITCH_TEMPLATE_REF_FACTORY__POST_R3__ = injectTemplateRef;\n    var SWITCH_TEMPLATE_REF_FACTORY = SWITCH_TEMPLATE_REF_FACTORY__POST_R3__;\n\n    /**\n     * Represents a container where one or more views can be attached to a component.\n     *\n     * Can contain *host views* (created by instantiating a\n     * component with the `createComponent()` method), and *embedded views*\n     * (created by instantiating a `TemplateRef` with the `createEmbeddedView()` method).\n     *\n     * A view container instance can contain other view containers,\n     * creating a [view hierarchy](guide/glossary#view-tree).\n     *\n     * @see `ComponentRef`\n     * @see `EmbeddedViewRef`\n     *\n     * @publicApi\n     */\n    var ViewContainerRef = /** @class */ (function () {\n        function ViewContainerRef() {\n        }\n        /**\n         * @internal\n         * @nocollapse\n         */\n        ViewContainerRef.__NG_ELEMENT_ID__ = function () { return SWITCH_VIEW_CONTAINER_REF_FACTORY(ViewContainerRef, ElementRef); };\n        return ViewContainerRef;\n    }());\n    var SWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__ = injectViewContainerRef;\n    var SWITCH_VIEW_CONTAINER_REF_FACTORY = SWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__;\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function expressionChangedAfterItHasBeenCheckedError(context, oldValue, currValue, isFirstCheck) {\n        var msg = \"ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '\" + oldValue + \"'. Current value: '\" + currValue + \"'.\";\n        if (isFirstCheck) {\n            msg +=\n                \" It seems like the view has been created after its parent and its children have been dirty checked.\" +\n                    \" Has it been created in a change detection hook ?\";\n        }\n        return viewDebugError(msg, context);\n    }\n    function viewWrappedDebugError(err, context) {\n        if (!(err instanceof Error)) {\n            // errors that are not Error instances don't have a stack,\n            // so it is ok to wrap them into a new Error object...\n            err = new Error(err.toString());\n        }\n        _addDebugContext(err, context);\n        return err;\n    }\n    function viewDebugError(msg, context) {\n        var err = new Error(msg);\n        _addDebugContext(err, context);\n        return err;\n    }\n    function _addDebugContext(err, context) {\n        err[ERROR_DEBUG_CONTEXT] = context;\n        err[ERROR_LOGGER] = context.logError.bind(context);\n    }\n    function isViewDebugError(err) {\n        return !!getDebugContext(err);\n    }\n    function viewDestroyedError(action) {\n        return new Error(\"ViewDestroyedError: Attempt to use a destroyed view: \" + action);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // Called before each cycle of a view's check to detect whether this is in the\n    // initState for which we need to call ngOnInit, ngAfterContentInit or ngAfterViewInit\n    // lifecycle methods. Returns true if this check cycle should call lifecycle\n    // methods.\n    function shiftInitState(view, priorInitState, newInitState) {\n        // Only update the InitState if we are currently in the prior state.\n        // For example, only move into CallingInit if we are in BeforeInit. Only\n        // move into CallingContentInit if we are in CallingInit. Normally this will\n        // always be true because of how checkCycle is called in checkAndUpdateView.\n        // However, if checkAndUpdateView is called recursively or if an exception is\n        // thrown while checkAndUpdateView is running, checkAndUpdateView starts over\n        // from the beginning. This ensures the state is monotonically increasing,\n        // terminating in the AfterInit state, which ensures the Init methods are called\n        // at least once and only once.\n        var state = view.state;\n        var initState = state & 1792 /* InitState_Mask */;\n        if (initState === priorInitState) {\n            view.state = (state & ~1792 /* InitState_Mask */) | newInitState;\n            view.initIndex = -1;\n            return true;\n        }\n        return initState === newInitState;\n    }\n    // Returns true if the lifecycle init method should be called for the node with\n    // the given init index.\n    function shouldCallLifecycleInitHook(view, initState, index) {\n        if ((view.state & 1792 /* InitState_Mask */) === initState && view.initIndex <= index) {\n            view.initIndex = index + 1;\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n     */\n    function asTextData(view, index) {\n        return view.nodes[index];\n    }\n    /**\n     * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n     */\n    function asElementData(view, index) {\n        return view.nodes[index];\n    }\n    /**\n     * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n     */\n    function asProviderData(view, index) {\n        return view.nodes[index];\n    }\n    /**\n     * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n     */\n    function asPureExpressionData(view, index) {\n        return view.nodes[index];\n    }\n    /**\n     * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n     */\n    function asQueryList(view, index) {\n        return view.nodes[index];\n    }\n    /**\n     * This object is used to prevent cycles in the source files and to have a place where\n     * debug mode can hook it. It is lazily filled when `isDevMode` is known.\n     */\n    var Services = {\n        setCurrentNode: undefined,\n        createRootView: undefined,\n        createEmbeddedView: undefined,\n        createComponentView: undefined,\n        createNgModuleRef: undefined,\n        overrideProvider: undefined,\n        overrideComponentView: undefined,\n        clearOverrides: undefined,\n        checkAndUpdateView: undefined,\n        checkNoChangesView: undefined,\n        destroyView: undefined,\n        resolveDep: undefined,\n        createDebugContext: undefined,\n        handleEvent: undefined,\n        updateDirectives: undefined,\n        updateRenderer: undefined,\n        dirtyParentQueries: undefined,\n    };\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var NOOP = function () { };\n    var _tokenKeyCache = new Map();\n    function tokenKey(token) {\n        var key = _tokenKeyCache.get(token);\n        if (!key) {\n            key = stringify(token) + '_' + _tokenKeyCache.size;\n            _tokenKeyCache.set(token, key);\n        }\n        return key;\n    }\n    function unwrapValue(view, nodeIdx, bindingIdx, value) {\n        if (WrappedValue.isWrapped(value)) {\n            value = WrappedValue.unwrap(value);\n            var globalBindingIdx = view.def.nodes[nodeIdx].bindingIndex + bindingIdx;\n            var oldValue = WrappedValue.unwrap(view.oldValues[globalBindingIdx]);\n            view.oldValues[globalBindingIdx] = new WrappedValue(oldValue);\n        }\n        return value;\n    }\n    var UNDEFINED_RENDERER_TYPE_ID = '$$undefined';\n    var EMPTY_RENDERER_TYPE_ID = '$$empty';\n    // Attention: this function is called as top level function.\n    // Putting any logic in here will destroy closure tree shaking!\n    function createRendererType2(values) {\n        return {\n            id: UNDEFINED_RENDERER_TYPE_ID,\n            styles: values.styles,\n            encapsulation: values.encapsulation,\n            data: values.data\n        };\n    }\n    var _renderCompCount$1 = 0;\n    function resolveRendererType2(type) {\n        if (type && type.id === UNDEFINED_RENDERER_TYPE_ID) {\n            // first time we see this RendererType2. Initialize it...\n            var isFilled = ((type.encapsulation != null && type.encapsulation !== exports.ViewEncapsulation.None) ||\n                type.styles.length || Object.keys(type.data).length);\n            if (isFilled) {\n                type.id = \"c\" + _renderCompCount$1++;\n            }\n            else {\n                type.id = EMPTY_RENDERER_TYPE_ID;\n            }\n        }\n        if (type && type.id === EMPTY_RENDERER_TYPE_ID) {\n            type = null;\n        }\n        return type || null;\n    }\n    function checkBinding(view, def, bindingIdx, value) {\n        var oldValues = view.oldValues;\n        if ((view.state & 2 /* FirstCheck */) ||\n            !looseIdentical(oldValues[def.bindingIndex + bindingIdx], value)) {\n            return true;\n        }\n        return false;\n    }\n    function checkAndUpdateBinding(view, def, bindingIdx, value) {\n        if (checkBinding(view, def, bindingIdx, value)) {\n            view.oldValues[def.bindingIndex + bindingIdx] = value;\n            return true;\n        }\n        return false;\n    }\n    function checkBindingNoChanges(view, def, bindingIdx, value) {\n        var oldValue = view.oldValues[def.bindingIndex + bindingIdx];\n        if ((view.state & 1 /* BeforeFirstCheck */) || !devModeEqual(oldValue, value)) {\n            var bindingName = def.bindings[bindingIdx].name;\n            throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, def.nodeIndex), bindingName + \": \" + oldValue, bindingName + \": \" + value, (view.state & 1 /* BeforeFirstCheck */) !== 0);\n        }\n    }\n    function markParentViewsForCheck(view) {\n        var currView = view;\n        while (currView) {\n            if (currView.def.flags & 2 /* OnPush */) {\n                currView.state |= 8 /* ChecksEnabled */;\n            }\n            currView = currView.viewContainerParent || currView.parent;\n        }\n    }\n    function markParentViewsForCheckProjectedViews(view, endView) {\n        var currView = view;\n        while (currView && currView !== endView) {\n            currView.state |= 64 /* CheckProjectedViews */;\n            currView = currView.viewContainerParent || currView.parent;\n        }\n    }\n    function dispatchEvent(view, nodeIndex, eventName, event) {\n        try {\n            var nodeDef = view.def.nodes[nodeIndex];\n            var startView = nodeDef.flags & 33554432 /* ComponentView */ ?\n                asElementData(view, nodeIndex).componentView :\n                view;\n            markParentViewsForCheck(startView);\n            return Services.handleEvent(view, nodeIndex, eventName, event);\n        }\n        catch (e) {\n            // Attention: Don't rethrow, as it would cancel Observable subscriptions!\n            view.root.errorHandler.handleError(e);\n        }\n    }\n    function declaredViewContainer(view) {\n        if (view.parent) {\n            var parentView = view.parent;\n            return asElementData(parentView, view.parentNodeDef.nodeIndex);\n        }\n        return null;\n    }\n    /**\n     * for component views, this is the host element.\n     * for embedded views, this is the index of the parent node\n     * that contains the view container.\n     */\n    function viewParentEl(view) {\n        var parentView = view.parent;\n        if (parentView) {\n            return view.parentNodeDef.parent;\n        }\n        else {\n            return null;\n        }\n    }\n    function renderNode(view, def) {\n        switch (def.flags & 201347067 /* Types */) {\n            case 1 /* TypeElement */:\n                return asElementData(view, def.nodeIndex).renderElement;\n            case 2 /* TypeText */:\n                return asTextData(view, def.nodeIndex).renderText;\n        }\n    }\n    function elementEventFullName(target, name) {\n        return target ? target + \":\" + name : name;\n    }\n    function isComponentView(view) {\n        return !!view.parent && !!(view.parentNodeDef.flags & 32768 /* Component */);\n    }\n    function isEmbeddedView(view) {\n        return !!view.parent && !(view.parentNodeDef.flags & 32768 /* Component */);\n    }\n    function filterQueryId(queryId) {\n        return 1 << (queryId % 32);\n    }\n    function splitMatchedQueriesDsl(matchedQueriesDsl) {\n        var matchedQueries = {};\n        var matchedQueryIds = 0;\n        var references = {};\n        if (matchedQueriesDsl) {\n            matchedQueriesDsl.forEach(function (_a) {\n                var _b = __read(_a, 2), queryId = _b[0], valueType = _b[1];\n                if (typeof queryId === 'number') {\n                    matchedQueries[queryId] = valueType;\n                    matchedQueryIds |= filterQueryId(queryId);\n                }\n                else {\n                    references[queryId] = valueType;\n                }\n            });\n        }\n        return { matchedQueries: matchedQueries, references: references, matchedQueryIds: matchedQueryIds };\n    }\n    function splitDepsDsl(deps, sourceName) {\n        return deps.map(function (value) {\n            var _a;\n            var token;\n            var flags;\n            if (Array.isArray(value)) {\n                _a = __read(value, 2), flags = _a[0], token = _a[1];\n            }\n            else {\n                flags = 0 /* None */;\n                token = value;\n            }\n            if (token && (typeof token === 'function' || typeof token === 'object') && sourceName) {\n                Object.defineProperty(token, SOURCE, { value: sourceName, configurable: true });\n            }\n            return { flags: flags, token: token, tokenKey: tokenKey(token) };\n        });\n    }\n    function getParentRenderElement(view, renderHost, def) {\n        var renderParent = def.renderParent;\n        if (renderParent) {\n            if ((renderParent.flags & 1 /* TypeElement */) === 0 ||\n                (renderParent.flags & 33554432 /* ComponentView */) === 0 ||\n                (renderParent.element.componentRendererType &&\n                    renderParent.element.componentRendererType.encapsulation ===\n                        exports.ViewEncapsulation.Native)) {\n                // only children of non components, or children of components with native encapsulation should\n                // be attached.\n                return asElementData(view, def.renderParent.nodeIndex).renderElement;\n            }\n        }\n        else {\n            return renderHost;\n        }\n    }\n    var DEFINITION_CACHE = new WeakMap();\n    function resolveDefinition(factory) {\n        var value = DEFINITION_CACHE.get(factory);\n        if (!value) {\n            value = factory(function () { return NOOP; });\n            value.factory = factory;\n            DEFINITION_CACHE.set(factory, value);\n        }\n        return value;\n    }\n    function rootRenderNodes(view) {\n        var renderNodes = [];\n        visitRootRenderNodes(view, 0 /* Collect */, undefined, undefined, renderNodes);\n        return renderNodes;\n    }\n    function visitRootRenderNodes(view, action, parentNode, nextSibling, target) {\n        // We need to re-compute the parent node in case the nodes have been moved around manually\n        if (action === 3 /* RemoveChild */) {\n            parentNode = view.renderer.parentNode(renderNode(view, view.def.lastRenderRootNode));\n        }\n        visitSiblingRenderNodes(view, action, 0, view.def.nodes.length - 1, parentNode, nextSibling, target);\n    }\n    function visitSiblingRenderNodes(view, action, startIndex, endIndex, parentNode, nextSibling, target) {\n        for (var i = startIndex; i <= endIndex; i++) {\n            var nodeDef = view.def.nodes[i];\n            if (nodeDef.flags & (1 /* TypeElement */ | 2 /* TypeText */ | 8 /* TypeNgContent */)) {\n                visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target);\n            }\n            // jump to next sibling\n            i += nodeDef.childCount;\n        }\n    }\n    function visitProjectedRenderNodes(view, ngContentIndex, action, parentNode, nextSibling, target) {\n        var compView = view;\n        while (compView && !isComponentView(compView)) {\n            compView = compView.parent;\n        }\n        var hostView = compView.parent;\n        var hostElDef = viewParentEl(compView);\n        var startIndex = hostElDef.nodeIndex + 1;\n        var endIndex = hostElDef.nodeIndex + hostElDef.childCount;\n        for (var i = startIndex; i <= endIndex; i++) {\n            var nodeDef = hostView.def.nodes[i];\n            if (nodeDef.ngContentIndex === ngContentIndex) {\n                visitRenderNode(hostView, nodeDef, action, parentNode, nextSibling, target);\n            }\n            // jump to next sibling\n            i += nodeDef.childCount;\n        }\n        if (!hostView.parent) {\n            // a root view\n            var projectedNodes = view.root.projectableNodes[ngContentIndex];\n            if (projectedNodes) {\n                for (var i = 0; i < projectedNodes.length; i++) {\n                    execRenderNodeAction(view, projectedNodes[i], action, parentNode, nextSibling, target);\n                }\n            }\n        }\n    }\n    function visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target) {\n        if (nodeDef.flags & 8 /* TypeNgContent */) {\n            visitProjectedRenderNodes(view, nodeDef.ngContent.index, action, parentNode, nextSibling, target);\n        }\n        else {\n            var rn = renderNode(view, nodeDef);\n            if (action === 3 /* RemoveChild */ && (nodeDef.flags & 33554432 /* ComponentView */) &&\n                (nodeDef.bindingFlags & 48 /* CatSyntheticProperty */)) {\n                // Note: we might need to do both actions.\n                if (nodeDef.bindingFlags & (16 /* SyntheticProperty */)) {\n                    execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);\n                }\n                if (nodeDef.bindingFlags & (32 /* SyntheticHostProperty */)) {\n                    var compView = asElementData(view, nodeDef.nodeIndex).componentView;\n                    execRenderNodeAction(compView, rn, action, parentNode, nextSibling, target);\n                }\n            }\n            else {\n                execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);\n            }\n            if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n                var embeddedViews = asElementData(view, nodeDef.nodeIndex).viewContainer._embeddedViews;\n                for (var k = 0; k < embeddedViews.length; k++) {\n                    visitRootRenderNodes(embeddedViews[k], action, parentNode, nextSibling, target);\n                }\n            }\n            if (nodeDef.flags & 1 /* TypeElement */ && !nodeDef.element.name) {\n                visitSiblingRenderNodes(view, action, nodeDef.nodeIndex + 1, nodeDef.nodeIndex + nodeDef.childCount, parentNode, nextSibling, target);\n            }\n        }\n    }\n    function execRenderNodeAction(view, renderNode, action, parentNode, nextSibling, target) {\n        var renderer = view.renderer;\n        switch (action) {\n            case 1 /* AppendChild */:\n                renderer.appendChild(parentNode, renderNode);\n                break;\n            case 2 /* InsertBefore */:\n                renderer.insertBefore(parentNode, renderNode, nextSibling);\n                break;\n            case 3 /* RemoveChild */:\n                renderer.removeChild(parentNode, renderNode);\n                break;\n            case 0 /* Collect */:\n                target.push(renderNode);\n                break;\n        }\n    }\n    var NS_PREFIX_RE = /^:([^:]+):(.+)$/;\n    function splitNamespace(name) {\n        if (name[0] === ':') {\n            var match = name.match(NS_PREFIX_RE);\n            return [match[1], match[2]];\n        }\n        return ['', name];\n    }\n    function calcBindingFlags(bindings) {\n        var flags = 0;\n        for (var i = 0; i < bindings.length; i++) {\n            flags |= bindings[i].flags;\n        }\n        return flags;\n    }\n    function interpolate(valueCount, constAndInterp) {\n        var result = '';\n        for (var i = 0; i < valueCount * 2; i = i + 2) {\n            result = result + constAndInterp[i] + _toStringWithNull(constAndInterp[i + 1]);\n        }\n        return result + constAndInterp[valueCount * 2];\n    }\n    function inlineInterpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {\n        switch (valueCount) {\n            case 1:\n                return c0 + _toStringWithNull(a1) + c1;\n            case 2:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;\n            case 3:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                    c3;\n            case 4:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                    c3 + _toStringWithNull(a4) + c4;\n            case 5:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;\n            case 6:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;\n            case 7:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                    c6 + _toStringWithNull(a7) + c7;\n            case 8:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                    c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;\n            case 9:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                    c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;\n            default:\n                throw new Error(\"Does not support more than 9 expressions\");\n        }\n    }\n    function _toStringWithNull(v) {\n        return v != null ? v.toString() : '';\n    }\n    var EMPTY_ARRAY$2 = [];\n    var EMPTY_MAP = {};\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var UNDEFINED_VALUE = new Object();\n    var InjectorRefTokenKey = tokenKey(Injector);\n    var INJECTORRefTokenKey = tokenKey(INJECTOR);\n    var NgModuleRefTokenKey = tokenKey(NgModuleRef);\n    function moduleProvideDef(flags, token, value, deps) {\n        // Need to resolve forwardRefs as e.g. for `useValue` we\n        // lowered the expression and then stopped evaluating it,\n        // i.e. also didn't unwrap it.\n        value = resolveForwardRef(value);\n        var depDefs = splitDepsDsl(deps, stringify(token));\n        return {\n            // will bet set by the module definition\n            index: -1,\n            deps: depDefs, flags: flags, token: token, value: value\n        };\n    }\n    function moduleDef(providers) {\n        var providersByKey = {};\n        var modules = [];\n        var isRoot = false;\n        for (var i = 0; i < providers.length; i++) {\n            var provider = providers[i];\n            if (provider.token === APP_ROOT && provider.value === true) {\n                isRoot = true;\n            }\n            if (provider.flags & 1073741824 /* TypeNgModule */) {\n                modules.push(provider.token);\n            }\n            provider.index = i;\n            providersByKey[tokenKey(provider.token)] = provider;\n        }\n        return {\n            // Will be filled later...\n            factory: null,\n            providersByKey: providersByKey,\n            providers: providers,\n            modules: modules,\n            isRoot: isRoot,\n        };\n    }\n    function initNgModule(data) {\n        var def = data._def;\n        var providers = data._providers = new Array(def.providers.length);\n        for (var i = 0; i < def.providers.length; i++) {\n            var provDef = def.providers[i];\n            if (!(provDef.flags & 4096 /* LazyProvider */)) {\n                // Make sure the provider has not been already initialized outside this loop.\n                if (providers[i] === undefined) {\n                    providers[i] = _createProviderInstance(data, provDef);\n                }\n            }\n        }\n    }\n    function resolveNgModuleDep(data, depDef, notFoundValue) {\n        if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n        var former = setCurrentInjector(data);\n        try {\n            if (depDef.flags & 8 /* Value */) {\n                return depDef.token;\n            }\n            if (depDef.flags & 2 /* Optional */) {\n                notFoundValue = null;\n            }\n            if (depDef.flags & 1 /* SkipSelf */) {\n                return data._parent.get(depDef.token, notFoundValue);\n            }\n            var tokenKey_1 = depDef.tokenKey;\n            switch (tokenKey_1) {\n                case InjectorRefTokenKey:\n                case INJECTORRefTokenKey:\n                case NgModuleRefTokenKey:\n                    return data;\n            }\n            var providerDef = data._def.providersByKey[tokenKey_1];\n            var injectableDef = void 0;\n            if (providerDef) {\n                var providerInstance = data._providers[providerDef.index];\n                if (providerInstance === undefined) {\n                    providerInstance = data._providers[providerDef.index] =\n                        _createProviderInstance(data, providerDef);\n                }\n                return providerInstance === UNDEFINED_VALUE ? undefined : providerInstance;\n            }\n            else if ((injectableDef = getInjectableDef(depDef.token)) && targetsModule(data, injectableDef)) {\n                var index = data._providers.length;\n                data._def.providers[index] = data._def.providersByKey[depDef.tokenKey] = {\n                    flags: 1024 /* TypeFactoryProvider */ | 4096 /* LazyProvider */,\n                    value: injectableDef.factory,\n                    deps: [], index: index,\n                    token: depDef.token,\n                };\n                data._providers[index] = UNDEFINED_VALUE;\n                return (data._providers[index] =\n                    _createProviderInstance(data, data._def.providersByKey[depDef.tokenKey]));\n            }\n            else if (depDef.flags & 4 /* Self */) {\n                return notFoundValue;\n            }\n            return data._parent.get(depDef.token, notFoundValue);\n        }\n        finally {\n            setCurrentInjector(former);\n        }\n    }\n    function moduleTransitivelyPresent(ngModule, scope) {\n        return ngModule._def.modules.indexOf(scope) > -1;\n    }\n    function targetsModule(ngModule, def) {\n        return def.providedIn != null && (moduleTransitivelyPresent(ngModule, def.providedIn) ||\n            def.providedIn === 'root' && ngModule._def.isRoot);\n    }\n    function _createProviderInstance(ngModule, providerDef) {\n        var injectable;\n        switch (providerDef.flags & 201347067 /* Types */) {\n            case 512 /* TypeClassProvider */:\n                injectable = _createClass(ngModule, providerDef.value, providerDef.deps);\n                break;\n            case 1024 /* TypeFactoryProvider */:\n                injectable = _callFactory(ngModule, providerDef.value, providerDef.deps);\n                break;\n            case 2048 /* TypeUseExistingProvider */:\n                injectable = resolveNgModuleDep(ngModule, providerDef.deps[0]);\n                break;\n            case 256 /* TypeValueProvider */:\n                injectable = providerDef.value;\n                break;\n        }\n        // The read of `ngOnDestroy` here is slightly expensive as it's megamorphic, so it should be\n        // avoided if possible. The sequence of checks here determines whether ngOnDestroy needs to be\n        // checked. It might not if the `injectable` isn't an object or if NodeFlags.OnDestroy is already\n        // set (ngOnDestroy was detected statically).\n        if (injectable !== UNDEFINED_VALUE && injectable !== null && typeof injectable === 'object' &&\n            !(providerDef.flags & 131072 /* OnDestroy */) && typeof injectable.ngOnDestroy === 'function') {\n            providerDef.flags |= 131072 /* OnDestroy */;\n        }\n        return injectable === undefined ? UNDEFINED_VALUE : injectable;\n    }\n    function _createClass(ngModule, ctor, deps) {\n        var len = deps.length;\n        switch (len) {\n            case 0:\n                return new ctor();\n            case 1:\n                return new ctor(resolveNgModuleDep(ngModule, deps[0]));\n            case 2:\n                return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));\n            case 3:\n                return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));\n            default:\n                var depValues = new Array(len);\n                for (var i = 0; i < len; i++) {\n                    depValues[i] = resolveNgModuleDep(ngModule, deps[i]);\n                }\n                return new (ctor.bind.apply(ctor, __spread([void 0], depValues)))();\n        }\n    }\n    function _callFactory(ngModule, factory, deps) {\n        var len = deps.length;\n        switch (len) {\n            case 0:\n                return factory();\n            case 1:\n                return factory(resolveNgModuleDep(ngModule, deps[0]));\n            case 2:\n                return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));\n            case 3:\n                return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));\n            default:\n                var depValues = Array(len);\n                for (var i = 0; i < len; i++) {\n                    depValues[i] = resolveNgModuleDep(ngModule, deps[i]);\n                }\n                return factory.apply(void 0, __spread(depValues));\n        }\n    }\n    function callNgModuleLifecycle(ngModule, lifecycles) {\n        var def = ngModule._def;\n        var destroyed = new Set();\n        for (var i = 0; i < def.providers.length; i++) {\n            var provDef = def.providers[i];\n            if (provDef.flags & 131072 /* OnDestroy */) {\n                var instance = ngModule._providers[i];\n                if (instance && instance !== UNDEFINED_VALUE) {\n                    var onDestroy = instance.ngOnDestroy;\n                    if (typeof onDestroy === 'function' && !destroyed.has(instance)) {\n                        onDestroy.apply(instance);\n                        destroyed.add(instance);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function attachEmbeddedView(parentView, elementData, viewIndex, view) {\n        var embeddedViews = elementData.viewContainer._embeddedViews;\n        if (viewIndex === null || viewIndex === undefined) {\n            viewIndex = embeddedViews.length;\n        }\n        view.viewContainerParent = parentView;\n        addToArray(embeddedViews, viewIndex, view);\n        attachProjectedView(elementData, view);\n        Services.dirtyParentQueries(view);\n        var prevView = viewIndex > 0 ? embeddedViews[viewIndex - 1] : null;\n        renderAttachEmbeddedView(elementData, prevView, view);\n    }\n    function attachProjectedView(vcElementData, view) {\n        var dvcElementData = declaredViewContainer(view);\n        if (!dvcElementData || dvcElementData === vcElementData ||\n            view.state & 16 /* IsProjectedView */) {\n            return;\n        }\n        // Note: For performance reasons, we\n        // - add a view to template._projectedViews only 1x throughout its lifetime,\n        //   and remove it not until the view is destroyed.\n        //   (hard, as when a parent view is attached/detached we would need to attach/detach all\n        //    nested projected views as well, even across component boundaries).\n        // - don't track the insertion order of views in the projected views array\n        //   (hard, as when the views of the same template are inserted different view containers)\n        view.state |= 16 /* IsProjectedView */;\n        var projectedViews = dvcElementData.template._projectedViews;\n        if (!projectedViews) {\n            projectedViews = dvcElementData.template._projectedViews = [];\n        }\n        projectedViews.push(view);\n        // Note: we are changing the NodeDef here as we cannot calculate\n        // the fact whether a template is used for projection during compilation.\n        markNodeAsProjectedTemplate(view.parent.def, view.parentNodeDef);\n    }\n    function markNodeAsProjectedTemplate(viewDef, nodeDef) {\n        if (nodeDef.flags & 4 /* ProjectedTemplate */) {\n            return;\n        }\n        viewDef.nodeFlags |= 4 /* ProjectedTemplate */;\n        nodeDef.flags |= 4 /* ProjectedTemplate */;\n        var parentNodeDef = nodeDef.parent;\n        while (parentNodeDef) {\n            parentNodeDef.childFlags |= 4 /* ProjectedTemplate */;\n            parentNodeDef = parentNodeDef.parent;\n        }\n    }\n    function detachEmbeddedView(elementData, viewIndex) {\n        var embeddedViews = elementData.viewContainer._embeddedViews;\n        if (viewIndex == null || viewIndex >= embeddedViews.length) {\n            viewIndex = embeddedViews.length - 1;\n        }\n        if (viewIndex < 0) {\n            return null;\n        }\n        var view = embeddedViews[viewIndex];\n        view.viewContainerParent = null;\n        removeFromArray(embeddedViews, viewIndex);\n        // See attachProjectedView for why we don't update projectedViews here.\n        Services.dirtyParentQueries(view);\n        renderDetachView$1(view);\n        return view;\n    }\n    function detachProjectedView(view) {\n        if (!(view.state & 16 /* IsProjectedView */)) {\n            return;\n        }\n        var dvcElementData = declaredViewContainer(view);\n        if (dvcElementData) {\n            var projectedViews = dvcElementData.template._projectedViews;\n            if (projectedViews) {\n                removeFromArray(projectedViews, projectedViews.indexOf(view));\n                Services.dirtyParentQueries(view);\n            }\n        }\n    }\n    function moveEmbeddedView(elementData, oldViewIndex, newViewIndex) {\n        var embeddedViews = elementData.viewContainer._embeddedViews;\n        var view = embeddedViews[oldViewIndex];\n        removeFromArray(embeddedViews, oldViewIndex);\n        if (newViewIndex == null) {\n            newViewIndex = embeddedViews.length;\n        }\n        addToArray(embeddedViews, newViewIndex, view);\n        // Note: Don't need to change projectedViews as the order in there\n        // as always invalid...\n        Services.dirtyParentQueries(view);\n        renderDetachView$1(view);\n        var prevView = newViewIndex > 0 ? embeddedViews[newViewIndex - 1] : null;\n        renderAttachEmbeddedView(elementData, prevView, view);\n        return view;\n    }\n    function renderAttachEmbeddedView(elementData, prevView, view) {\n        var prevRenderNode = prevView ? renderNode(prevView, prevView.def.lastRenderRootNode) :\n            elementData.renderElement;\n        var parentNode = view.renderer.parentNode(prevRenderNode);\n        var nextSibling = view.renderer.nextSibling(prevRenderNode);\n        // Note: We can't check if `nextSibling` is present, as on WebWorkers it will always be!\n        // However, browsers automatically do `appendChild` when there is no `nextSibling`.\n        visitRootRenderNodes(view, 2 /* InsertBefore */, parentNode, nextSibling, undefined);\n    }\n    function renderDetachView$1(view) {\n        visitRootRenderNodes(view, 3 /* RemoveChild */, null, null, undefined);\n    }\n    function addToArray(arr, index, value) {\n        // perf: array.push is faster than array.splice!\n        if (index >= arr.length) {\n            arr.push(value);\n        }\n        else {\n            arr.splice(index, 0, value);\n        }\n    }\n    function removeFromArray(arr, index) {\n        // perf: array.pop is faster than array.splice!\n        if (index >= arr.length - 1) {\n            arr.pop();\n        }\n        else {\n            arr.splice(index, 1);\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var EMPTY_CONTEXT = new Object();\n    // Attention: this function is called as top level function.\n    // Putting any logic in here will destroy closure tree shaking!\n    function createComponentFactory(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors) {\n        return new ComponentFactory_(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors);\n    }\n    function getComponentViewDefinitionFactory(componentFactory) {\n        return componentFactory.viewDefFactory;\n    }\n    var ComponentFactory_ = /** @class */ (function (_super) {\n        __extends(ComponentFactory_, _super);\n        function ComponentFactory_(selector, componentType, viewDefFactory, _inputs, _outputs, ngContentSelectors) {\n            var _this = \n            // Attention: this ctor is called as top level function.\n            // Putting any logic in here will destroy closure tree shaking!\n            _super.call(this) || this;\n            _this.selector = selector;\n            _this.componentType = componentType;\n            _this._inputs = _inputs;\n            _this._outputs = _outputs;\n            _this.ngContentSelectors = ngContentSelectors;\n            _this.viewDefFactory = viewDefFactory;\n            return _this;\n        }\n        Object.defineProperty(ComponentFactory_.prototype, \"inputs\", {\n            get: function () {\n                var inputsArr = [];\n                var inputs = this._inputs;\n                for (var propName in inputs) {\n                    var templateName = inputs[propName];\n                    inputsArr.push({ propName: propName, templateName: templateName });\n                }\n                return inputsArr;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ComponentFactory_.prototype, \"outputs\", {\n            get: function () {\n                var outputsArr = [];\n                for (var propName in this._outputs) {\n                    var templateName = this._outputs[propName];\n                    outputsArr.push({ propName: propName, templateName: templateName });\n                }\n                return outputsArr;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Creates a new component.\n         */\n        ComponentFactory_.prototype.create = function (injector, projectableNodes, rootSelectorOrNode, ngModule) {\n            if (!ngModule) {\n                throw new Error('ngModule should be provided');\n            }\n            var viewDef = resolveDefinition(this.viewDefFactory);\n            var componentNodeIndex = viewDef.nodes[0].element.componentProvider.nodeIndex;\n            var view = Services.createRootView(injector, projectableNodes || [], rootSelectorOrNode, viewDef, ngModule, EMPTY_CONTEXT);\n            var component = asProviderData(view, componentNodeIndex).instance;\n            if (rootSelectorOrNode) {\n                view.renderer.setAttribute(asElementData(view, 0).renderElement, 'ng-version', VERSION.full);\n            }\n            return new ComponentRef_(view, new ViewRef_(view), component);\n        };\n        return ComponentFactory_;\n    }(ComponentFactory));\n    var ComponentRef_ = /** @class */ (function (_super) {\n        __extends(ComponentRef_, _super);\n        function ComponentRef_(_view, _viewRef, _component) {\n            var _this = _super.call(this) || this;\n            _this._view = _view;\n            _this._viewRef = _viewRef;\n            _this._component = _component;\n            _this._elDef = _this._view.def.nodes[0];\n            _this.hostView = _viewRef;\n            _this.changeDetectorRef = _viewRef;\n            _this.instance = _component;\n            return _this;\n        }\n        Object.defineProperty(ComponentRef_.prototype, \"location\", {\n            get: function () {\n                return new ElementRef(asElementData(this._view, this._elDef.nodeIndex).renderElement);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ComponentRef_.prototype, \"injector\", {\n            get: function () { return new Injector_(this._view, this._elDef); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ComponentRef_.prototype, \"componentType\", {\n            get: function () { return this._component.constructor; },\n            enumerable: true,\n            configurable: true\n        });\n        ComponentRef_.prototype.destroy = function () { this._viewRef.destroy(); };\n        ComponentRef_.prototype.onDestroy = function (callback) { this._viewRef.onDestroy(callback); };\n        return ComponentRef_;\n    }(ComponentRef));\n    function createViewContainerData(view, elDef, elData) {\n        return new ViewContainerRef_(view, elDef, elData);\n    }\n    var ViewContainerRef_ = /** @class */ (function () {\n        function ViewContainerRef_(_view, _elDef, _data) {\n            this._view = _view;\n            this._elDef = _elDef;\n            this._data = _data;\n            /**\n             * @internal\n             */\n            this._embeddedViews = [];\n        }\n        Object.defineProperty(ViewContainerRef_.prototype, \"element\", {\n            get: function () { return new ElementRef(this._data.renderElement); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ViewContainerRef_.prototype, \"injector\", {\n            get: function () { return new Injector_(this._view, this._elDef); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ViewContainerRef_.prototype, \"parentInjector\", {\n            /** @deprecated No replacement */\n            get: function () {\n                var view = this._view;\n                var elDef = this._elDef.parent;\n                while (!elDef && view) {\n                    elDef = viewParentEl(view);\n                    view = view.parent;\n                }\n                return view ? new Injector_(view, elDef) : new Injector_(this._view, null);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        ViewContainerRef_.prototype.clear = function () {\n            var len = this._embeddedViews.length;\n            for (var i = len - 1; i >= 0; i--) {\n                var view = detachEmbeddedView(this._data, i);\n                Services.destroyView(view);\n            }\n        };\n        ViewContainerRef_.prototype.get = function (index) {\n            var view = this._embeddedViews[index];\n            if (view) {\n                var ref = new ViewRef_(view);\n                ref.attachToViewContainerRef(this);\n                return ref;\n            }\n            return null;\n        };\n        Object.defineProperty(ViewContainerRef_.prototype, \"length\", {\n            get: function () { return this._embeddedViews.length; },\n            enumerable: true,\n            configurable: true\n        });\n        ViewContainerRef_.prototype.createEmbeddedView = function (templateRef, context, index) {\n            var viewRef = templateRef.createEmbeddedView(context || {});\n            this.insert(viewRef, index);\n            return viewRef;\n        };\n        ViewContainerRef_.prototype.createComponent = function (componentFactory, index, injector, projectableNodes, ngModuleRef) {\n            var contextInjector = injector || this.parentInjector;\n            if (!ngModuleRef && !(componentFactory instanceof ComponentFactoryBoundToModule)) {\n                ngModuleRef = contextInjector.get(NgModuleRef);\n            }\n            var componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);\n            this.insert(componentRef.hostView, index);\n            return componentRef;\n        };\n        ViewContainerRef_.prototype.insert = function (viewRef, index) {\n            if (viewRef.destroyed) {\n                throw new Error('Cannot insert a destroyed View in a ViewContainer!');\n            }\n            var viewRef_ = viewRef;\n            var viewData = viewRef_._view;\n            attachEmbeddedView(this._view, this._data, index, viewData);\n            viewRef_.attachToViewContainerRef(this);\n            return viewRef;\n        };\n        ViewContainerRef_.prototype.move = function (viewRef, currentIndex) {\n            if (viewRef.destroyed) {\n                throw new Error('Cannot move a destroyed View in a ViewContainer!');\n            }\n            var previousIndex = this._embeddedViews.indexOf(viewRef._view);\n            moveEmbeddedView(this._data, previousIndex, currentIndex);\n            return viewRef;\n        };\n        ViewContainerRef_.prototype.indexOf = function (viewRef) {\n            return this._embeddedViews.indexOf(viewRef._view);\n        };\n        ViewContainerRef_.prototype.remove = function (index) {\n            var viewData = detachEmbeddedView(this._data, index);\n            if (viewData) {\n                Services.destroyView(viewData);\n            }\n        };\n        ViewContainerRef_.prototype.detach = function (index) {\n            var view = detachEmbeddedView(this._data, index);\n            return view ? new ViewRef_(view) : null;\n        };\n        return ViewContainerRef_;\n    }());\n    function createChangeDetectorRef(view) {\n        return new ViewRef_(view);\n    }\n    var ViewRef_ = /** @class */ (function () {\n        function ViewRef_(_view) {\n            this._view = _view;\n            this._viewContainerRef = null;\n            this._appRef = null;\n        }\n        Object.defineProperty(ViewRef_.prototype, \"rootNodes\", {\n            get: function () { return rootRenderNodes(this._view); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ViewRef_.prototype, \"context\", {\n            get: function () { return this._view.context; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ViewRef_.prototype, \"destroyed\", {\n            get: function () { return (this._view.state & 128 /* Destroyed */) !== 0; },\n            enumerable: true,\n            configurable: true\n        });\n        ViewRef_.prototype.markForCheck = function () { markParentViewsForCheck(this._view); };\n        ViewRef_.prototype.detach = function () { this._view.state &= ~4 /* Attached */; };\n        ViewRef_.prototype.detectChanges = function () {\n            var fs = this._view.root.rendererFactory;\n            if (fs.begin) {\n                fs.begin();\n            }\n            try {\n                Services.checkAndUpdateView(this._view);\n            }\n            finally {\n                if (fs.end) {\n                    fs.end();\n                }\n            }\n        };\n        ViewRef_.prototype.checkNoChanges = function () { Services.checkNoChangesView(this._view); };\n        ViewRef_.prototype.reattach = function () { this._view.state |= 4 /* Attached */; };\n        ViewRef_.prototype.onDestroy = function (callback) {\n            if (!this._view.disposables) {\n                this._view.disposables = [];\n            }\n            this._view.disposables.push(callback);\n        };\n        ViewRef_.prototype.destroy = function () {\n            if (this._appRef) {\n                this._appRef.detachView(this);\n            }\n            else if (this._viewContainerRef) {\n                this._viewContainerRef.detach(this._viewContainerRef.indexOf(this));\n            }\n            Services.destroyView(this._view);\n        };\n        ViewRef_.prototype.detachFromAppRef = function () {\n            this._appRef = null;\n            renderDetachView$1(this._view);\n            Services.dirtyParentQueries(this._view);\n        };\n        ViewRef_.prototype.attachToAppRef = function (appRef) {\n            if (this._viewContainerRef) {\n                throw new Error('This view is already attached to a ViewContainer!');\n            }\n            this._appRef = appRef;\n        };\n        ViewRef_.prototype.attachToViewContainerRef = function (vcRef) {\n            if (this._appRef) {\n                throw new Error('This view is already attached directly to the ApplicationRef!');\n            }\n            this._viewContainerRef = vcRef;\n        };\n        return ViewRef_;\n    }());\n    function createTemplateData(view, def) {\n        return new TemplateRef_(view, def);\n    }\n    var TemplateRef_ = /** @class */ (function (_super) {\n        __extends(TemplateRef_, _super);\n        function TemplateRef_(_parentView, _def) {\n            var _this = _super.call(this) || this;\n            _this._parentView = _parentView;\n            _this._def = _def;\n            return _this;\n        }\n        TemplateRef_.prototype.createEmbeddedView = function (context) {\n            return new ViewRef_(Services.createEmbeddedView(this._parentView, this._def, this._def.element.template, context));\n        };\n        Object.defineProperty(TemplateRef_.prototype, \"elementRef\", {\n            get: function () {\n                return new ElementRef(asElementData(this._parentView, this._def.nodeIndex).renderElement);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return TemplateRef_;\n    }(TemplateRef));\n    function createInjector$1(view, elDef) {\n        return new Injector_(view, elDef);\n    }\n    var Injector_ = /** @class */ (function () {\n        function Injector_(view, elDef) {\n            this.view = view;\n            this.elDef = elDef;\n        }\n        Injector_.prototype.get = function (token, notFoundValue) {\n            if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n            var allowPrivateServices = this.elDef ? (this.elDef.flags & 33554432 /* ComponentView */) !== 0 : false;\n            return Services.resolveDep(this.view, this.elDef, allowPrivateServices, { flags: 0 /* None */, token: token, tokenKey: tokenKey(token) }, notFoundValue);\n        };\n        return Injector_;\n    }());\n    function nodeValue(view, index) {\n        var def = view.def.nodes[index];\n        if (def.flags & 1 /* TypeElement */) {\n            var elData = asElementData(view, def.nodeIndex);\n            return def.element.template ? elData.template : elData.renderElement;\n        }\n        else if (def.flags & 2 /* TypeText */) {\n            return asTextData(view, def.nodeIndex).renderText;\n        }\n        else if (def.flags & (20224 /* CatProvider */ | 16 /* TypePipe */)) {\n            return asProviderData(view, def.nodeIndex).instance;\n        }\n        throw new Error(\"Illegal state: read nodeValue for node index \" + index);\n    }\n    function createRendererV1(view) {\n        return new RendererAdapter(view.renderer);\n    }\n    var RendererAdapter = /** @class */ (function () {\n        function RendererAdapter(delegate) {\n            this.delegate = delegate;\n        }\n        RendererAdapter.prototype.selectRootElement = function (selectorOrNode) {\n            return this.delegate.selectRootElement(selectorOrNode);\n        };\n        RendererAdapter.prototype.createElement = function (parent, namespaceAndName) {\n            var _a = __read(splitNamespace(namespaceAndName), 2), ns = _a[0], name = _a[1];\n            var el = this.delegate.createElement(name, ns);\n            if (parent) {\n                this.delegate.appendChild(parent, el);\n            }\n            return el;\n        };\n        RendererAdapter.prototype.createViewRoot = function (hostElement) { return hostElement; };\n        RendererAdapter.prototype.createTemplateAnchor = function (parentElement) {\n            var comment = this.delegate.createComment('');\n            if (parentElement) {\n                this.delegate.appendChild(parentElement, comment);\n            }\n            return comment;\n        };\n        RendererAdapter.prototype.createText = function (parentElement, value) {\n            var node = this.delegate.createText(value);\n            if (parentElement) {\n                this.delegate.appendChild(parentElement, node);\n            }\n            return node;\n        };\n        RendererAdapter.prototype.projectNodes = function (parentElement, nodes) {\n            for (var i = 0; i < nodes.length; i++) {\n                this.delegate.appendChild(parentElement, nodes[i]);\n            }\n        };\n        RendererAdapter.prototype.attachViewAfter = function (node, viewRootNodes) {\n            var parentElement = this.delegate.parentNode(node);\n            var nextSibling = this.delegate.nextSibling(node);\n            for (var i = 0; i < viewRootNodes.length; i++) {\n                this.delegate.insertBefore(parentElement, viewRootNodes[i], nextSibling);\n            }\n        };\n        RendererAdapter.prototype.detachView = function (viewRootNodes) {\n            for (var i = 0; i < viewRootNodes.length; i++) {\n                var node = viewRootNodes[i];\n                var parentElement = this.delegate.parentNode(node);\n                this.delegate.removeChild(parentElement, node);\n            }\n        };\n        RendererAdapter.prototype.destroyView = function (hostElement, viewAllNodes) {\n            for (var i = 0; i < viewAllNodes.length; i++) {\n                this.delegate.destroyNode(viewAllNodes[i]);\n            }\n        };\n        RendererAdapter.prototype.listen = function (renderElement, name, callback) {\n            return this.delegate.listen(renderElement, name, callback);\n        };\n        RendererAdapter.prototype.listenGlobal = function (target, name, callback) {\n            return this.delegate.listen(target, name, callback);\n        };\n        RendererAdapter.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) {\n            this.delegate.setProperty(renderElement, propertyName, propertyValue);\n        };\n        RendererAdapter.prototype.setElementAttribute = function (renderElement, namespaceAndName, attributeValue) {\n            var _a = __read(splitNamespace(namespaceAndName), 2), ns = _a[0], name = _a[1];\n            if (attributeValue != null) {\n                this.delegate.setAttribute(renderElement, name, attributeValue, ns);\n            }\n            else {\n                this.delegate.removeAttribute(renderElement, name, ns);\n            }\n        };\n        RendererAdapter.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) { };\n        RendererAdapter.prototype.setElementClass = function (renderElement, className, isAdd) {\n            if (isAdd) {\n                this.delegate.addClass(renderElement, className);\n            }\n            else {\n                this.delegate.removeClass(renderElement, className);\n            }\n        };\n        RendererAdapter.prototype.setElementStyle = function (renderElement, styleName, styleValue) {\n            if (styleValue != null) {\n                this.delegate.setStyle(renderElement, styleName, styleValue);\n            }\n            else {\n                this.delegate.removeStyle(renderElement, styleName);\n            }\n        };\n        RendererAdapter.prototype.invokeElementMethod = function (renderElement, methodName, args) {\n            renderElement[methodName].apply(renderElement, args);\n        };\n        RendererAdapter.prototype.setText = function (renderNode, text) { this.delegate.setValue(renderNode, text); };\n        RendererAdapter.prototype.animate = function () { throw new Error('Renderer.animate is no longer supported!'); };\n        return RendererAdapter;\n    }());\n    function createNgModuleRef(moduleType, parent, bootstrapComponents, def) {\n        return new NgModuleRef_(moduleType, parent, bootstrapComponents, def);\n    }\n    var NgModuleRef_ = /** @class */ (function () {\n        function NgModuleRef_(_moduleType, _parent, _bootstrapComponents, _def) {\n            this._moduleType = _moduleType;\n            this._parent = _parent;\n            this._bootstrapComponents = _bootstrapComponents;\n            this._def = _def;\n            this._destroyListeners = [];\n            this._destroyed = false;\n            this.injector = this;\n            initNgModule(this);\n        }\n        NgModuleRef_.prototype.get = function (token, notFoundValue, injectFlags) {\n            if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n            if (injectFlags === void 0) { injectFlags = exports.InjectFlags.Default; }\n            var flags = 0 /* None */;\n            if (injectFlags & exports.InjectFlags.SkipSelf) {\n                flags |= 1 /* SkipSelf */;\n            }\n            else if (injectFlags & exports.InjectFlags.Self) {\n                flags |= 4 /* Self */;\n            }\n            return resolveNgModuleDep(this, { token: token, tokenKey: tokenKey(token), flags: flags }, notFoundValue);\n        };\n        Object.defineProperty(NgModuleRef_.prototype, \"instance\", {\n            get: function () { return this.get(this._moduleType); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgModuleRef_.prototype, \"componentFactoryResolver\", {\n            get: function () { return this.get(ComponentFactoryResolver); },\n            enumerable: true,\n            configurable: true\n        });\n        NgModuleRef_.prototype.destroy = function () {\n            if (this._destroyed) {\n                throw new Error(\"The ng module \" + stringify(this.instance.constructor) + \" has already been destroyed.\");\n            }\n            this._destroyed = true;\n            callNgModuleLifecycle(this, 131072 /* OnDestroy */);\n            this._destroyListeners.forEach(function (listener) { return listener(); });\n        };\n        NgModuleRef_.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback); };\n        return NgModuleRef_;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var RendererV1TokenKey = tokenKey(Renderer);\n    var Renderer2TokenKey = tokenKey(Renderer2);\n    var ElementRefTokenKey = tokenKey(ElementRef);\n    var ViewContainerRefTokenKey = tokenKey(ViewContainerRef);\n    var TemplateRefTokenKey = tokenKey(TemplateRef);\n    var ChangeDetectorRefTokenKey = tokenKey(ChangeDetectorRef);\n    var InjectorRefTokenKey$1 = tokenKey(Injector);\n    var INJECTORRefTokenKey$1 = tokenKey(INJECTOR);\n    function directiveDef(checkIndex, flags, matchedQueries, childCount, ctor, deps, props, outputs) {\n        var bindings = [];\n        if (props) {\n            for (var prop in props) {\n                var _a = __read(props[prop], 2), bindingIndex = _a[0], nonMinifiedName = _a[1];\n                bindings[bindingIndex] = {\n                    flags: 8 /* TypeProperty */,\n                    name: prop, nonMinifiedName: nonMinifiedName,\n                    ns: null,\n                    securityContext: null,\n                    suffix: null\n                };\n            }\n        }\n        var outputDefs = [];\n        if (outputs) {\n            for (var propName in outputs) {\n                outputDefs.push({ type: 1 /* DirectiveOutput */, propName: propName, target: null, eventName: outputs[propName] });\n            }\n        }\n        flags |= 16384 /* TypeDirective */;\n        return _def(checkIndex, flags, matchedQueries, childCount, ctor, ctor, deps, bindings, outputDefs);\n    }\n    function pipeDef(flags, ctor, deps) {\n        flags |= 16 /* TypePipe */;\n        return _def(-1, flags, null, 0, ctor, ctor, deps);\n    }\n    function providerDef(flags, matchedQueries, token, value, deps) {\n        return _def(-1, flags, matchedQueries, 0, token, value, deps);\n    }\n    function _def(checkIndex, flags, matchedQueriesDsl, childCount, token, value, deps, bindings, outputs) {\n        var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;\n        if (!outputs) {\n            outputs = [];\n        }\n        if (!bindings) {\n            bindings = [];\n        }\n        // Need to resolve forwardRefs as e.g. for `useValue` we\n        // lowered the expression and then stopped evaluating it,\n        // i.e. also didn't unwrap it.\n        value = resolveForwardRef(value);\n        var depDefs = splitDepsDsl(deps, stringify(token));\n        return {\n            // will bet set by the view definition\n            nodeIndex: -1,\n            parent: null,\n            renderParent: null,\n            bindingIndex: -1,\n            outputIndex: -1,\n            // regular values\n            checkIndex: checkIndex,\n            flags: flags,\n            childFlags: 0,\n            directChildFlags: 0,\n            childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references,\n            ngContentIndex: -1, childCount: childCount, bindings: bindings,\n            bindingFlags: calcBindingFlags(bindings), outputs: outputs,\n            element: null,\n            provider: { token: token, value: value, deps: depDefs },\n            text: null,\n            query: null,\n            ngContent: null\n        };\n    }\n    function createProviderInstance(view, def) {\n        return _createProviderInstance$1(view, def);\n    }\n    function createPipeInstance(view, def) {\n        // deps are looked up from component.\n        var compView = view;\n        while (compView.parent && !isComponentView(compView)) {\n            compView = compView.parent;\n        }\n        // pipes can see the private services of the component\n        var allowPrivateServices = true;\n        // pipes are always eager and classes!\n        return createClass(compView.parent, viewParentEl(compView), allowPrivateServices, def.provider.value, def.provider.deps);\n    }\n    function createDirectiveInstance(view, def) {\n        // components can see other private services, other directives can't.\n        var allowPrivateServices = (def.flags & 32768 /* Component */) > 0;\n        // directives are always eager and classes!\n        var instance = createClass(view, def.parent, allowPrivateServices, def.provider.value, def.provider.deps);\n        if (def.outputs.length) {\n            for (var i = 0; i < def.outputs.length; i++) {\n                var output = def.outputs[i];\n                var outputObservable = instance[output.propName];\n                if (isObservable(outputObservable)) {\n                    var subscription = outputObservable.subscribe(eventHandlerClosure(view, def.parent.nodeIndex, output.eventName));\n                    view.disposables[def.outputIndex + i] = subscription.unsubscribe.bind(subscription);\n                }\n                else {\n                    throw new Error(\"@Output \" + output.propName + \" not initialized in '\" + instance.constructor.name + \"'.\");\n                }\n            }\n        }\n        return instance;\n    }\n    function eventHandlerClosure(view, index, eventName) {\n        return function (event) { return dispatchEvent(view, index, eventName, event); };\n    }\n    function checkAndUpdateDirectiveInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n        var providerData = asProviderData(view, def.nodeIndex);\n        var directive = providerData.instance;\n        var changed = false;\n        var changes = undefined;\n        var bindLen = def.bindings.length;\n        if (bindLen > 0 && checkBinding(view, def, 0, v0)) {\n            changed = true;\n            changes = updateProp(view, providerData, def, 0, v0, changes);\n        }\n        if (bindLen > 1 && checkBinding(view, def, 1, v1)) {\n            changed = true;\n            changes = updateProp(view, providerData, def, 1, v1, changes);\n        }\n        if (bindLen > 2 && checkBinding(view, def, 2, v2)) {\n            changed = true;\n            changes = updateProp(view, providerData, def, 2, v2, changes);\n        }\n        if (bindLen > 3 && checkBinding(view, def, 3, v3)) {\n            changed = true;\n            changes = updateProp(view, providerData, def, 3, v3, changes);\n        }\n        if (bindLen > 4 && checkBinding(view, def, 4, v4)) {\n            changed = true;\n            changes = updateProp(view, providerData, def, 4, v4, changes);\n        }\n        if (bindLen > 5 && checkBinding(view, def, 5, v5)) {\n            changed = true;\n            changes = updateProp(view, providerData, def, 5, v5, changes);\n        }\n        if (bindLen > 6 && checkBinding(view, def, 6, v6)) {\n            changed = true;\n            changes = updateProp(view, providerData, def, 6, v6, changes);\n        }\n        if (bindLen > 7 && checkBinding(view, def, 7, v7)) {\n            changed = true;\n            changes = updateProp(view, providerData, def, 7, v7, changes);\n        }\n        if (bindLen > 8 && checkBinding(view, def, 8, v8)) {\n            changed = true;\n            changes = updateProp(view, providerData, def, 8, v8, changes);\n        }\n        if (bindLen > 9 && checkBinding(view, def, 9, v9)) {\n            changed = true;\n            changes = updateProp(view, providerData, def, 9, v9, changes);\n        }\n        if (changes) {\n            directive.ngOnChanges(changes);\n        }\n        if ((def.flags & 65536 /* OnInit */) &&\n            shouldCallLifecycleInitHook(view, 256 /* InitState_CallingOnInit */, def.nodeIndex)) {\n            directive.ngOnInit();\n        }\n        if (def.flags & 262144 /* DoCheck */) {\n            directive.ngDoCheck();\n        }\n        return changed;\n    }\n    function checkAndUpdateDirectiveDynamic(view, def, values) {\n        var providerData = asProviderData(view, def.nodeIndex);\n        var directive = providerData.instance;\n        var changed = false;\n        var changes = undefined;\n        for (var i = 0; i < values.length; i++) {\n            if (checkBinding(view, def, i, values[i])) {\n                changed = true;\n                changes = updateProp(view, providerData, def, i, values[i], changes);\n            }\n        }\n        if (changes) {\n            directive.ngOnChanges(changes);\n        }\n        if ((def.flags & 65536 /* OnInit */) &&\n            shouldCallLifecycleInitHook(view, 256 /* InitState_CallingOnInit */, def.nodeIndex)) {\n            directive.ngOnInit();\n        }\n        if (def.flags & 262144 /* DoCheck */) {\n            directive.ngDoCheck();\n        }\n        return changed;\n    }\n    function _createProviderInstance$1(view, def) {\n        // private services can see other private services\n        var allowPrivateServices = (def.flags & 8192 /* PrivateProvider */) > 0;\n        var providerDef = def.provider;\n        switch (def.flags & 201347067 /* Types */) {\n            case 512 /* TypeClassProvider */:\n                return createClass(view, def.parent, allowPrivateServices, providerDef.value, providerDef.deps);\n            case 1024 /* TypeFactoryProvider */:\n                return callFactory(view, def.parent, allowPrivateServices, providerDef.value, providerDef.deps);\n            case 2048 /* TypeUseExistingProvider */:\n                return resolveDep(view, def.parent, allowPrivateServices, providerDef.deps[0]);\n            case 256 /* TypeValueProvider */:\n                return providerDef.value;\n        }\n    }\n    function createClass(view, elDef, allowPrivateServices, ctor, deps) {\n        var len = deps.length;\n        switch (len) {\n            case 0:\n                return new ctor();\n            case 1:\n                return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]));\n            case 2:\n                return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));\n            case 3:\n                return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));\n            default:\n                var depValues = new Array(len);\n                for (var i = 0; i < len; i++) {\n                    depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);\n                }\n                return new (ctor.bind.apply(ctor, __spread([void 0], depValues)))();\n        }\n    }\n    function callFactory(view, elDef, allowPrivateServices, factory, deps) {\n        var len = deps.length;\n        switch (len) {\n            case 0:\n                return factory();\n            case 1:\n                return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]));\n            case 2:\n                return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));\n            case 3:\n                return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));\n            default:\n                var depValues = Array(len);\n                for (var i = 0; i < len; i++) {\n                    depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);\n                }\n                return factory.apply(void 0, __spread(depValues));\n        }\n    }\n    // This default value is when checking the hierarchy for a token.\n    //\n    // It means both:\n    // - the token is not provided by the current injector,\n    // - only the element injectors should be checked (ie do not check module injectors\n    //\n    //          mod1\n    //         /\n    //       el1   mod2\n    //         \\  /\n    //         el2\n    //\n    // When requesting el2.injector.get(token), we should check in the following order and return the\n    // first found value:\n    // - el2.injector.get(token, default)\n    // - el1.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) -> do not check the module\n    // - mod2.injector.get(token, default)\n    var NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};\n    function resolveDep(view, elDef, allowPrivateServices, depDef, notFoundValue) {\n        if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n        if (depDef.flags & 8 /* Value */) {\n            return depDef.token;\n        }\n        var startView = view;\n        if (depDef.flags & 2 /* Optional */) {\n            notFoundValue = null;\n        }\n        var tokenKey = depDef.tokenKey;\n        if (tokenKey === ChangeDetectorRefTokenKey) {\n            // directives on the same element as a component should be able to control the change detector\n            // of that component as well.\n            allowPrivateServices = !!(elDef && elDef.element.componentView);\n        }\n        if (elDef && (depDef.flags & 1 /* SkipSelf */)) {\n            allowPrivateServices = false;\n            elDef = elDef.parent;\n        }\n        var searchView = view;\n        while (searchView) {\n            if (elDef) {\n                switch (tokenKey) {\n                    case RendererV1TokenKey: {\n                        var compView = findCompView(searchView, elDef, allowPrivateServices);\n                        return createRendererV1(compView);\n                    }\n                    case Renderer2TokenKey: {\n                        var compView = findCompView(searchView, elDef, allowPrivateServices);\n                        return compView.renderer;\n                    }\n                    case ElementRefTokenKey:\n                        return new ElementRef(asElementData(searchView, elDef.nodeIndex).renderElement);\n                    case ViewContainerRefTokenKey:\n                        return asElementData(searchView, elDef.nodeIndex).viewContainer;\n                    case TemplateRefTokenKey: {\n                        if (elDef.element.template) {\n                            return asElementData(searchView, elDef.nodeIndex).template;\n                        }\n                        break;\n                    }\n                    case ChangeDetectorRefTokenKey: {\n                        var cdView = findCompView(searchView, elDef, allowPrivateServices);\n                        return createChangeDetectorRef(cdView);\n                    }\n                    case InjectorRefTokenKey$1:\n                    case INJECTORRefTokenKey$1:\n                        return createInjector$1(searchView, elDef);\n                    default:\n                        var providerDef_1 = (allowPrivateServices ? elDef.element.allProviders :\n                            elDef.element.publicProviders)[tokenKey];\n                        if (providerDef_1) {\n                            var providerData = asProviderData(searchView, providerDef_1.nodeIndex);\n                            if (!providerData) {\n                                providerData = { instance: _createProviderInstance$1(searchView, providerDef_1) };\n                                searchView.nodes[providerDef_1.nodeIndex] = providerData;\n                            }\n                            return providerData.instance;\n                        }\n                }\n            }\n            allowPrivateServices = isComponentView(searchView);\n            elDef = viewParentEl(searchView);\n            searchView = searchView.parent;\n            if (depDef.flags & 4 /* Self */) {\n                searchView = null;\n            }\n        }\n        var value = startView.root.injector.get(depDef.token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR);\n        if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR ||\n            notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\n            // Return the value from the root element injector when\n            // - it provides it\n            //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n            // - the module injector should not be checked\n            //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n            return value;\n        }\n        return startView.root.ngModule.injector.get(depDef.token, notFoundValue);\n    }\n    function findCompView(view, elDef, allowPrivateServices) {\n        var compView;\n        if (allowPrivateServices) {\n            compView = asElementData(view, elDef.nodeIndex).componentView;\n        }\n        else {\n            compView = view;\n            while (compView.parent && !isComponentView(compView)) {\n                compView = compView.parent;\n            }\n        }\n        return compView;\n    }\n    function updateProp(view, providerData, def, bindingIdx, value, changes) {\n        if (def.flags & 32768 /* Component */) {\n            var compView = asElementData(view, def.parent.nodeIndex).componentView;\n            if (compView.def.flags & 2 /* OnPush */) {\n                compView.state |= 8 /* ChecksEnabled */;\n            }\n        }\n        var binding = def.bindings[bindingIdx];\n        var propName = binding.name;\n        // Note: This is still safe with Closure Compiler as\n        // the user passed in the property name as an object has to `providerDef`,\n        // so Closure Compiler will have renamed the property correctly already.\n        providerData.instance[propName] = value;\n        if (def.flags & 524288 /* OnChanges */) {\n            changes = changes || {};\n            var oldValue = WrappedValue.unwrap(view.oldValues[def.bindingIndex + bindingIdx]);\n            var binding_1 = def.bindings[bindingIdx];\n            changes[binding_1.nonMinifiedName] =\n                new SimpleChange(oldValue, value, (view.state & 2 /* FirstCheck */) !== 0);\n        }\n        view.oldValues[def.bindingIndex + bindingIdx] = value;\n        return changes;\n    }\n    // This function calls the ngAfterContentCheck, ngAfterContentInit,\n    // ngAfterViewCheck, and ngAfterViewInit lifecycle hooks (depending on the node\n    // flags in lifecycle). Unlike ngDoCheck, ngOnChanges and ngOnInit, which are\n    // called during a pre-order traversal of the view tree (that is calling the\n    // parent hooks before the child hooks) these events are sent in using a\n    // post-order traversal of the tree (children before parents). This changes the\n    // meaning of initIndex in the view state. For ngOnInit, initIndex tracks the\n    // expected nodeIndex which a ngOnInit should be called. When sending\n    // ngAfterContentInit and ngAfterViewInit it is the expected count of\n    // ngAfterContentInit or ngAfterViewInit methods that have been called. This\n    // ensure that despite being called recursively or after picking up after an\n    // exception, the ngAfterContentInit or ngAfterViewInit will be called on the\n    // correct nodes. Consider for example, the following (where E is an element\n    // and D is a directive)\n    //  Tree:       pre-order index  post-order index\n    //    E1        0                6\n    //      E2      1                1\n    //       D3     2                0\n    //      E4      3                5\n    //       E5     4                4\n    //        E6    5                2\n    //        E7    6                3\n    // As can be seen, the post-order index has an unclear relationship to the\n    // pre-order index (postOrderIndex === preOrderIndex - parentCount +\n    // childCount). Since number of calls to ngAfterContentInit and ngAfterViewInit\n    // are stable (will be the same for the same view regardless of exceptions or\n    // recursion) we just need to count them which will roughly correspond to the\n    // post-order index (it skips elements and directives that do not have\n    // lifecycle hooks).\n    //\n    // For example, if an exception is raised in the E6.onAfterViewInit() the\n    // initIndex is left at 3 (by shouldCallLifecycleInitHook() which set it to\n    // initIndex + 1). When checkAndUpdateView() is called again D3, E2 and E6 will\n    // not have their ngAfterViewInit() called but, starting with E7, the rest of\n    // the view will begin getting ngAfterViewInit() called until a check and\n    // pass is complete.\n    //\n    // This algorthim also handles recursion. Consider if E4's ngAfterViewInit()\n    // indirectly calls E1's ChangeDetectorRef.detectChanges(). The expected\n    // initIndex is set to 6, the recusive checkAndUpdateView() starts walk again.\n    // D3, E2, E6, E7, E5 and E4 are skipped, ngAfterViewInit() is called on E1.\n    // When the recursion returns the initIndex will be 7 so E1 is skipped as it\n    // has already been called in the recursively called checkAnUpdateView().\n    function callLifecycleHooksChildrenFirst(view, lifecycles) {\n        if (!(view.def.nodeFlags & lifecycles)) {\n            return;\n        }\n        var nodes = view.def.nodes;\n        var initIndex = 0;\n        for (var i = 0; i < nodes.length; i++) {\n            var nodeDef = nodes[i];\n            var parent_1 = nodeDef.parent;\n            if (!parent_1 && nodeDef.flags & lifecycles) {\n                // matching root node (e.g. a pipe)\n                callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);\n            }\n            if ((nodeDef.childFlags & lifecycles) === 0) {\n                // no child matches one of the lifecycles\n                i += nodeDef.childCount;\n            }\n            while (parent_1 && (parent_1.flags & 1 /* TypeElement */) &&\n                i === parent_1.nodeIndex + parent_1.childCount) {\n                // last child of an element\n                if (parent_1.directChildFlags & lifecycles) {\n                    initIndex = callElementProvidersLifecycles(view, parent_1, lifecycles, initIndex);\n                }\n                parent_1 = parent_1.parent;\n            }\n        }\n    }\n    function callElementProvidersLifecycles(view, elDef, lifecycles, initIndex) {\n        for (var i = elDef.nodeIndex + 1; i <= elDef.nodeIndex + elDef.childCount; i++) {\n            var nodeDef = view.def.nodes[i];\n            if (nodeDef.flags & lifecycles) {\n                callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);\n            }\n            // only visit direct children\n            i += nodeDef.childCount;\n        }\n        return initIndex;\n    }\n    function callProviderLifecycles(view, index, lifecycles, initIndex) {\n        var providerData = asProviderData(view, index);\n        if (!providerData) {\n            return;\n        }\n        var provider = providerData.instance;\n        if (!provider) {\n            return;\n        }\n        Services.setCurrentNode(view, index);\n        if (lifecycles & 1048576 /* AfterContentInit */ &&\n            shouldCallLifecycleInitHook(view, 512 /* InitState_CallingAfterContentInit */, initIndex)) {\n            provider.ngAfterContentInit();\n        }\n        if (lifecycles & 2097152 /* AfterContentChecked */) {\n            provider.ngAfterContentChecked();\n        }\n        if (lifecycles & 4194304 /* AfterViewInit */ &&\n            shouldCallLifecycleInitHook(view, 768 /* InitState_CallingAfterViewInit */, initIndex)) {\n            provider.ngAfterViewInit();\n        }\n        if (lifecycles & 8388608 /* AfterViewChecked */) {\n            provider.ngAfterViewChecked();\n        }\n        if (lifecycles & 131072 /* OnDestroy */) {\n            provider.ngOnDestroy();\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var ComponentFactoryResolver$1 = /** @class */ (function (_super) {\n        __extends(ComponentFactoryResolver, _super);\n        /**\n         * @param ngModule The NgModuleRef to which all resolved factories are bound.\n         */\n        function ComponentFactoryResolver(ngModule) {\n            var _this = _super.call(this) || this;\n            _this.ngModule = ngModule;\n            return _this;\n        }\n        ComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {\n            ngDevMode && assertComponentType(component);\n            var componentDef = getComponentDef(component);\n            return new ComponentFactory$1(componentDef, this.ngModule);\n        };\n        return ComponentFactoryResolver;\n    }(ComponentFactoryResolver));\n    function toRefArray(map) {\n        var array = [];\n        for (var nonMinified in map) {\n            if (map.hasOwnProperty(nonMinified)) {\n                var minified = map[nonMinified];\n                array.push({ propName: minified, templateName: nonMinified });\n            }\n        }\n        return array;\n    }\n    /**\n     * Default {@link RootContext} for all components rendered with {@link renderComponent}.\n     */\n    var ROOT_CONTEXT = new InjectionToken('ROOT_CONTEXT_TOKEN', { providedIn: 'root', factory: function () { return createRootContext(ɵɵinject(SCHEDULER)); } });\n    /**\n     * A change detection scheduler token for {@link RootContext}. This token is the default value used\n     * for the default `RootContext` found in the {@link ROOT_CONTEXT} token.\n     */\n    var SCHEDULER = new InjectionToken('SCHEDULER_TOKEN', {\n        providedIn: 'root',\n        factory: function () { return defaultScheduler; },\n    });\n    function createChainedInjector(rootViewInjector, moduleInjector) {\n        return {\n            get: function (token, notFoundValue, flags) {\n                var value = rootViewInjector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR, flags);\n                if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR ||\n                    notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\n                    // Return the value from the root element injector when\n                    // - it provides it\n                    //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n                    // - the module injector should not be checked\n                    //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n                    return value;\n                }\n                return moduleInjector.get(token, notFoundValue, flags);\n            }\n        };\n    }\n    /**\n     * Render3 implementation of {@link viewEngine_ComponentFactory}.\n     */\n    var ComponentFactory$1 = /** @class */ (function (_super) {\n        __extends(ComponentFactory, _super);\n        /**\n         * @param componentDef The component definition.\n         * @param ngModule The NgModuleRef to which the factory is bound.\n         */\n        function ComponentFactory(componentDef, ngModule) {\n            var _this = _super.call(this) || this;\n            _this.componentDef = componentDef;\n            _this.ngModule = ngModule;\n            _this.componentType = componentDef.type;\n            _this.selector = componentDef.selectors[0][0];\n            _this.ngContentSelectors =\n                componentDef.ngContentSelectors ? componentDef.ngContentSelectors : [];\n            _this.isBoundToModule = !!ngModule;\n            return _this;\n        }\n        Object.defineProperty(ComponentFactory.prototype, \"inputs\", {\n            get: function () {\n                return toRefArray(this.componentDef.inputs);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ComponentFactory.prototype, \"outputs\", {\n            get: function () {\n                return toRefArray(this.componentDef.outputs);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        ComponentFactory.prototype.create = function (injector, projectableNodes, rootSelectorOrNode, ngModule) {\n            var isInternalRootView = rootSelectorOrNode === undefined;\n            ngModule = ngModule || this.ngModule;\n            var rootViewInjector = ngModule ? createChainedInjector(injector, ngModule.injector) : injector;\n            var rendererFactory = rootViewInjector.get(RendererFactory2, domRendererFactory3);\n            var sanitizer = rootViewInjector.get(Sanitizer, null);\n            // Ensure that the namespace for the root node is correct,\n            // otherwise the browser might not render out the element properly.\n            namespaceHTMLInternal();\n            var hostRNode = isInternalRootView ?\n                elementCreate(this.selector, rendererFactory.createRenderer(null, this.componentDef)) :\n                locateHostElement(rendererFactory, rootSelectorOrNode);\n            var rootFlags = this.componentDef.onPush ? 64 /* Dirty */ | 512 /* IsRoot */ :\n                16 /* CheckAlways */ | 512 /* IsRoot */;\n            // Check whether this Component needs to be isolated from other components, i.e. whether it\n            // should be placed into its own (empty) root context or existing root context should be used.\n            // Note: this is internal-only convention and might change in the future, so it should not be\n            // relied upon externally.\n            var isIsolated = typeof rootSelectorOrNode === 'string' &&\n                /^#root-ng-internal-isolated-\\d+/.test(rootSelectorOrNode);\n            var rootContext = (isInternalRootView || isIsolated) ?\n                createRootContext() :\n                rootViewInjector.get(ROOT_CONTEXT);\n            var renderer = rendererFactory.createRenderer(hostRNode, this.componentDef);\n            if (rootSelectorOrNode && hostRNode) {\n                ngDevMode && ngDevMode.rendererSetAttribute++;\n                isProceduralRenderer(renderer) ?\n                    renderer.setAttribute(hostRNode, 'ng-version', VERSION.full) :\n                    hostRNode.setAttribute('ng-version', VERSION.full);\n            }\n            // Create the root view. Uses empty TView and ContentTemplate.\n            var rootLView = createLView(null, createTView(-1, null, 1, 0, null, null, null, null), rootContext, rootFlags, null, null, rendererFactory, renderer, sanitizer, rootViewInjector);\n            // rootView is the parent when bootstrapping\n            var oldLView = enterView(rootLView, null);\n            var component;\n            var tElementNode;\n            // Will become true if the `try` block executes with no errors.\n            var safeToRunHooks = false;\n            try {\n                var componentView = createRootComponentView(hostRNode, this.componentDef, rootLView, rendererFactory, renderer);\n                tElementNode = getTNode(0, rootLView);\n                if (projectableNodes) {\n                    // projectable nodes can be passed as array of arrays or an array of iterables (ngUpgrade\n                    // case). Here we do normalize passed data structure to be an array of arrays to avoid\n                    // complex checks down the line.\n                    tElementNode.projection =\n                        projectableNodes.map(function (nodesforSlot) { return Array.from(nodesforSlot); });\n                }\n                // TODO: should LifecycleHooksFeature and other host features be generated by the compiler and\n                // executed here?\n                // Angular 5 reference: https://stackblitz.com/edit/lifecycle-hooks-vcref\n                component = createRootComponent(componentView, this.componentDef, rootLView, rootContext, [LifecycleHooksFeature]);\n                addToViewTree(rootLView, componentView);\n                refreshDescendantViews(rootLView);\n                safeToRunHooks = true;\n            }\n            finally {\n                leaveView(oldLView, safeToRunHooks);\n            }\n            var componentRef = new ComponentRef$1(this.componentType, component, createElementRef(ElementRef, tElementNode, rootLView), rootLView, tElementNode);\n            if (isInternalRootView || isIsolated) {\n                // The host element of the internal or isolated root view is attached to the component's host\n                // view node.\n                componentRef.hostView._tViewNode.child = tElementNode;\n            }\n            return componentRef;\n        };\n        return ComponentFactory;\n    }(ComponentFactory));\n    var componentFactoryResolver = new ComponentFactoryResolver$1();\n    /**\n     * Represents an instance of a Component created via a {@link ComponentFactory}.\n     *\n     * `ComponentRef` provides access to the Component Instance as well other objects related to this\n     * Component Instance and allows you to destroy the Component Instance via the {@link #destroy}\n     * method.\n     *\n     */\n    var ComponentRef$1 = /** @class */ (function (_super) {\n        __extends(ComponentRef, _super);\n        function ComponentRef(componentType, instance, location, _rootLView, _tNode) {\n            var _this = _super.call(this) || this;\n            _this.location = location;\n            _this._rootLView = _rootLView;\n            _this._tNode = _tNode;\n            _this.destroyCbs = [];\n            _this.instance = instance;\n            _this.hostView = _this.changeDetectorRef = new RootViewRef(_rootLView);\n            _this.hostView._tViewNode = assignTViewNodeToLView(_rootLView[TVIEW], null, -1, _rootLView);\n            _this.componentType = componentType;\n            return _this;\n        }\n        Object.defineProperty(ComponentRef.prototype, \"injector\", {\n            get: function () { return new NodeInjector(this._tNode, this._rootLView); },\n            enumerable: true,\n            configurable: true\n        });\n        ComponentRef.prototype.destroy = function () {\n            if (this.destroyCbs) {\n                this.destroyCbs.forEach(function (fn) { return fn(); });\n                this.destroyCbs = null;\n                !this.hostView.destroyed && this.hostView.destroy();\n            }\n        };\n        ComponentRef.prototype.onDestroy = function (callback) {\n            if (this.destroyCbs) {\n                this.destroyCbs.push(callback);\n            }\n        };\n        return ComponentRef;\n    }(ComponentRef));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * NOTE: changes to the `ngI18nClosureMode` name must be synced with `compiler-cli/src/tooling.ts`.\n     */\n    if (typeof ngI18nClosureMode === 'undefined') {\n        // These property accesses can be ignored because ngI18nClosureMode will be set to false\n        // when optimizing code and the whole if statement will be dropped.\n        // Make sure to refer to ngI18nClosureMode as ['ngI18nClosureMode'] for closure.\n        // NOTE: we need to have it in IIFE so that the tree-shaker is happy.\n        (function () {\n            // tslint:disable-next-line:no-toplevel-property-access\n            _global['ngI18nClosureMode'] =\n                // TODO(FW-1250): validate that this actually, you know, works.\n                // tslint:disable-next-line:no-toplevel-property-access\n                typeof goog !== 'undefined' && typeof goog.getMsg === 'function';\n        })();\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * This const is used to store the locale data registered with `registerLocaleData`\n     */\n    var LOCALE_DATA = {};\n    (function (LocaleDataIndex) {\n        LocaleDataIndex[LocaleDataIndex[\"LocaleId\"] = 0] = \"LocaleId\";\n        LocaleDataIndex[LocaleDataIndex[\"DayPeriodsFormat\"] = 1] = \"DayPeriodsFormat\";\n        LocaleDataIndex[LocaleDataIndex[\"DayPeriodsStandalone\"] = 2] = \"DayPeriodsStandalone\";\n        LocaleDataIndex[LocaleDataIndex[\"DaysFormat\"] = 3] = \"DaysFormat\";\n        LocaleDataIndex[LocaleDataIndex[\"DaysStandalone\"] = 4] = \"DaysStandalone\";\n        LocaleDataIndex[LocaleDataIndex[\"MonthsFormat\"] = 5] = \"MonthsFormat\";\n        LocaleDataIndex[LocaleDataIndex[\"MonthsStandalone\"] = 6] = \"MonthsStandalone\";\n        LocaleDataIndex[LocaleDataIndex[\"Eras\"] = 7] = \"Eras\";\n        LocaleDataIndex[LocaleDataIndex[\"FirstDayOfWeek\"] = 8] = \"FirstDayOfWeek\";\n        LocaleDataIndex[LocaleDataIndex[\"WeekendRange\"] = 9] = \"WeekendRange\";\n        LocaleDataIndex[LocaleDataIndex[\"DateFormat\"] = 10] = \"DateFormat\";\n        LocaleDataIndex[LocaleDataIndex[\"TimeFormat\"] = 11] = \"TimeFormat\";\n        LocaleDataIndex[LocaleDataIndex[\"DateTimeFormat\"] = 12] = \"DateTimeFormat\";\n        LocaleDataIndex[LocaleDataIndex[\"NumberSymbols\"] = 13] = \"NumberSymbols\";\n        LocaleDataIndex[LocaleDataIndex[\"NumberFormats\"] = 14] = \"NumberFormats\";\n        LocaleDataIndex[LocaleDataIndex[\"CurrencySymbol\"] = 15] = \"CurrencySymbol\";\n        LocaleDataIndex[LocaleDataIndex[\"CurrencyName\"] = 16] = \"CurrencyName\";\n        LocaleDataIndex[LocaleDataIndex[\"Currencies\"] = 17] = \"Currencies\";\n        LocaleDataIndex[LocaleDataIndex[\"PluralCase\"] = 18] = \"PluralCase\";\n        LocaleDataIndex[LocaleDataIndex[\"ExtraData\"] = 19] = \"ExtraData\";\n    })(exports.ɵLocaleDataIndex || (exports.ɵLocaleDataIndex = {}));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // THIS CODE IS GENERATED - DO NOT MODIFY\n    // See angular/tools/gulp-tasks/cldr/extract.js\n    var u = undefined;\n    function plural(n) {\n        var i = Math.floor(Math.abs(n)), v = n.toString().replace(/^[^.]*\\.?/, '').length;\n        if (i === 1 && v === 0)\n            return 1;\n        return 5;\n    }\n    var localeEn = [\n        'en', [['a', 'p'], ['AM', 'PM'], u], [['AM', 'PM'], u, u],\n        [\n            ['S', 'M', 'T', 'W', 'T', 'F', 'S'], ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n            ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n            ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']\n        ],\n        u,\n        [\n            ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],\n            ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n            [\n                'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n                'October', 'November', 'December'\n            ]\n        ],\n        u, [['B', 'A'], ['BC', 'AD'], ['Before Christ', 'Anno Domini']], 0, [6, 0],\n        ['M/d/yy', 'MMM d, y', 'MMMM d, y', 'EEEE, MMMM d, y'],\n        ['h:mm a', 'h:mm:ss a', 'h:mm:ss a z', 'h:mm:ss a zzzz'], ['{1}, {0}', u, '{1} \\'at\\' {0}', u],\n        ['.', ',', ';', '%', '+', '-', 'E', '×', '‰', '∞', 'NaN', ':'],\n        ['#,##0.###', '#,##0%', '¤#,##0.00', '#E0'], '$', 'US Dollar', {}, plural\n    ];\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Retrieves the plural function used by ICU expressions to determine the plural case to use\n     * for a given locale.\n     * @param locale A locale code for the locale format rules to use.\n     * @returns The plural function for the locale.\n     * @see `NgPlural`\n     * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n     */\n    function getLocalePluralCase(locale) {\n        var data = findLocaleData(locale);\n        return data[exports.ɵLocaleDataIndex.PluralCase];\n    }\n    /**\n     * Finds the locale data for a given locale.\n     *\n     * @param locale The locale code.\n     * @returns The locale data.\n     * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n     */\n    function findLocaleData(locale) {\n        var normalizedLocale = locale.toLowerCase().replace(/_/g, '-');\n        var match = LOCALE_DATA[normalizedLocale];\n        if (match) {\n            return match;\n        }\n        // let's try to find a parent locale\n        var parentLocale = normalizedLocale.split('-')[0];\n        match = LOCALE_DATA[parentLocale];\n        if (match) {\n            return match;\n        }\n        if (parentLocale === 'en') {\n            return localeEn;\n        }\n        throw new Error(\"Missing locale data for the locale \\\"\" + locale + \"\\\".\");\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Returns the plural case based on the locale\n     */\n    function getPluralCase(value, locale) {\n        var plural = getLocalePluralCase(locale)(value);\n        switch (plural) {\n            case 0:\n                return 'zero';\n            case 1:\n                return 'one';\n            case 2:\n                return 'two';\n            case 3:\n                return 'few';\n            case 4:\n                return 'many';\n            default:\n                return 'other';\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var MARKER = \"\\uFFFD\";\n    var ICU_BLOCK_REGEXP = /^\\s*(�\\d+:?\\d*�)\\s*,\\s*(select|plural)\\s*,/;\n    var SUBTEMPLATE_REGEXP = /�\\/?\\*(\\d+:\\d+)�/gi;\n    var PH_REGEXP = /�(\\/?[#*!]\\d+):?\\d*�/gi;\n    var BINDING_REGEXP = /�(\\d+):?\\d*�/gi;\n    var ICU_REGEXP = /({\\s*�\\d+:?\\d*�\\s*,\\s*\\S{6}\\s*,[\\s\\S]*})/gi;\n    // i18nPostprocess consts\n    var ROOT_TEMPLATE_ID = 0;\n    var PP_MULTI_VALUE_PLACEHOLDERS_REGEXP = /\\[(�.+?�?)\\]/;\n    var PP_PLACEHOLDERS_REGEXP = /\\[(�.+?�?)\\]|(�\\/?\\*\\d+:\\d+�)/g;\n    var PP_ICU_VARS_REGEXP = /({\\s*)(VAR_(PLURAL|SELECT)(_\\d+)?)(\\s*,)/g;\n    var PP_ICU_PLACEHOLDERS_REGEXP = /{([A-Z0-9_]+)}/g;\n    var PP_ICUS_REGEXP = /�I18N_EXP_(ICU(_\\d+)?)�/g;\n    var PP_CLOSE_TEMPLATE_REGEXP = /\\/\\*/;\n    var PP_TEMPLATE_ID_REGEXP = /\\d+\\:(\\d+)/;\n    /**\n     * Breaks pattern into strings and top level {...} blocks.\n     * Can be used to break a message into text and ICU expressions, or to break an ICU expression into\n     * keys and cases.\n     * Original code from closure library, modified for Angular.\n     *\n     * @param pattern (sub)Pattern to be broken.\n     *\n     */\n    function extractParts(pattern) {\n        if (!pattern) {\n            return [];\n        }\n        var prevPos = 0;\n        var braceStack = [];\n        var results = [];\n        var braces = /[{}]/g;\n        // lastIndex doesn't get set to 0 so we have to.\n        braces.lastIndex = 0;\n        var match;\n        while (match = braces.exec(pattern)) {\n            var pos = match.index;\n            if (match[0] == '}') {\n                braceStack.pop();\n                if (braceStack.length == 0) {\n                    // End of the block.\n                    var block = pattern.substring(prevPos, pos);\n                    if (ICU_BLOCK_REGEXP.test(block)) {\n                        results.push(parseICUBlock(block));\n                    }\n                    else {\n                        results.push(block);\n                    }\n                    prevPos = pos + 1;\n                }\n            }\n            else {\n                if (braceStack.length == 0) {\n                    var substring_1 = pattern.substring(prevPos, pos);\n                    results.push(substring_1);\n                    prevPos = pos + 1;\n                }\n                braceStack.push('{');\n            }\n        }\n        var substring = pattern.substring(prevPos);\n        results.push(substring);\n        return results;\n    }\n    /**\n     * Parses text containing an ICU expression and produces a JSON object for it.\n     * Original code from closure library, modified for Angular.\n     *\n     * @param pattern Text containing an ICU expression that needs to be parsed.\n     *\n     */\n    function parseICUBlock(pattern) {\n        var cases = [];\n        var values = [];\n        var icuType = 1 /* plural */;\n        var mainBinding = 0;\n        pattern = pattern.replace(ICU_BLOCK_REGEXP, function (str, binding, type) {\n            if (type === 'select') {\n                icuType = 0 /* select */;\n            }\n            else {\n                icuType = 1 /* plural */;\n            }\n            mainBinding = parseInt(binding.substr(1), 10);\n            return '';\n        });\n        var parts = extractParts(pattern);\n        // Looking for (key block)+ sequence. One of the keys has to be \"other\".\n        for (var pos = 0; pos < parts.length;) {\n            var key = parts[pos++].trim();\n            if (icuType === 1 /* plural */) {\n                // Key can be \"=x\", we just want \"x\"\n                key = key.replace(/\\s*(?:=)?(\\w+)\\s*/, '$1');\n            }\n            if (key.length) {\n                cases.push(key);\n            }\n            var blocks = extractParts(parts[pos++]);\n            if (cases.length > values.length) {\n                values.push(blocks);\n            }\n        }\n        assertGreaterThan(cases.indexOf('other'), -1, 'Missing key \"other\" in ICU statement.');\n        // TODO(ocombe): support ICU expressions in attributes, see #21615\n        return { type: icuType, mainBinding: mainBinding, cases: cases, values: values };\n    }\n    /**\n     * Removes everything inside the sub-templates of a message.\n     */\n    function removeInnerTemplateTranslation(message) {\n        var match;\n        var res = '';\n        var index = 0;\n        var inTemplate = false;\n        var tagMatched;\n        while ((match = SUBTEMPLATE_REGEXP.exec(message)) !== null) {\n            if (!inTemplate) {\n                res += message.substring(index, match.index + match[0].length);\n                tagMatched = match[1];\n                inTemplate = true;\n            }\n            else {\n                if (match[0] === MARKER + \"/*\" + tagMatched + MARKER) {\n                    index = match.index;\n                    inTemplate = false;\n                }\n            }\n        }\n        ngDevMode &&\n            assertEqual(inTemplate, false, \"Tag mismatch: unable to find the end of the sub-template in the translation \\\"\" + message + \"\\\"\");\n        res += message.substr(index);\n        return res;\n    }\n    /**\n     * Extracts a part of a message and removes the rest.\n     *\n     * This method is used for extracting a part of the message associated with a template. A translated\n     * message can span multiple templates.\n     *\n     * Example:\n     * ```\n     * <div i18n>Translate <span *ngIf>me</span>!</div>\n     * ```\n     *\n     * @param message The message to crop\n     * @param subTemplateIndex Index of the sub-template to extract. If undefined it returns the\n     * external template and removes all sub-templates.\n     */\n    function getTranslationForTemplate(message, subTemplateIndex) {\n        if (typeof subTemplateIndex !== 'number') {\n            // We want the root template message, ignore all sub-templates\n            return removeInnerTemplateTranslation(message);\n        }\n        else {\n            // We want a specific sub-template\n            var start = message.indexOf(\":\" + subTemplateIndex + MARKER) + 2 + subTemplateIndex.toString().length;\n            var end = message.search(new RegExp(MARKER + \"\\\\/\\\\*\\\\d+:\" + subTemplateIndex + MARKER));\n            return removeInnerTemplateTranslation(message.substring(start, end));\n        }\n    }\n    /**\n     * Generate the OpCodes to update the bindings of a string.\n     *\n     * @param str The string containing the bindings.\n     * @param destinationNode Index of the destination node which will receive the binding.\n     * @param attrName Name of the attribute, if the string belongs to an attribute.\n     * @param sanitizeFn Sanitization function used to sanitize the string after update, if necessary.\n     */\n    function generateBindingUpdateOpCodes(str, destinationNode, attrName, sanitizeFn) {\n        if (sanitizeFn === void 0) { sanitizeFn = null; }\n        var updateOpCodes = [null, null]; // Alloc space for mask and size\n        var textParts = str.split(BINDING_REGEXP);\n        var mask = 0;\n        for (var j = 0; j < textParts.length; j++) {\n            var textValue = textParts[j];\n            if (j & 1) {\n                // Odd indexes are bindings\n                var bindingIndex = parseInt(textValue, 10);\n                updateOpCodes.push(-1 - bindingIndex);\n                mask = mask | toMaskBit(bindingIndex);\n            }\n            else if (textValue !== '') {\n                // Even indexes are text\n                updateOpCodes.push(textValue);\n            }\n        }\n        updateOpCodes.push(destinationNode << 2 /* SHIFT_REF */ |\n            (attrName ? 1 /* Attr */ : 0 /* Text */));\n        if (attrName) {\n            updateOpCodes.push(attrName, sanitizeFn);\n        }\n        updateOpCodes[0] = mask;\n        updateOpCodes[1] = updateOpCodes.length - 2;\n        return updateOpCodes;\n    }\n    function getBindingMask(icuExpression, mask) {\n        if (mask === void 0) { mask = 0; }\n        mask = mask | toMaskBit(icuExpression.mainBinding);\n        var match;\n        for (var i = 0; i < icuExpression.values.length; i++) {\n            var valueArr = icuExpression.values[i];\n            for (var j = 0; j < valueArr.length; j++) {\n                var value = valueArr[j];\n                if (typeof value === 'string') {\n                    while (match = BINDING_REGEXP.exec(value)) {\n                        mask = mask | toMaskBit(parseInt(match[1], 10));\n                    }\n                }\n                else {\n                    mask = getBindingMask(value, mask);\n                }\n            }\n        }\n        return mask;\n    }\n    var i18nIndexStack = [];\n    var i18nIndexStackPointer = -1;\n    /**\n     * Convert binding index to mask bit.\n     *\n     * Each index represents a single bit on the bit-mask. Because bit-mask only has 32 bits, we make\n     * the 32nd bit share all masks for all bindings higher than 32. Since it is extremely rare to have\n     * more than 32 bindings this will be hit very rarely. The downside of hitting this corner case is\n     * that we will execute binding code more often than necessary. (penalty of performance)\n     */\n    function toMaskBit(bindingIndex) {\n        return 1 << Math.min(bindingIndex, 31);\n    }\n    var parentIndexStack = [];\n    /**\n     * Marks a block of text as translatable.\n     *\n     * The instructions `i18nStart` and `i18nEnd` mark the translation block in the template.\n     * The translation `message` is the value which is locale specific. The translation string may\n     * contain placeholders which associate inner elements and sub-templates within the translation.\n     *\n     * The translation `message` placeholders are:\n     * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be\n     *   interpolated into. The placeholder `index` points to the expression binding index. An optional\n     *   `block` that matches the sub-template in which it was declared.\n     * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning\n     *   and end of DOM element that were embedded in the original translation block. The placeholder\n     *   `index` points to the element index in the template instructions set. An optional `block` that\n     *   matches the sub-template in which it was declared.\n     * - `�!{index}(:{block})�`/`�/!{index}(:{block})�`: *Projection Placeholder*:  Marks the\n     *   beginning and end of <ng-content> that was embedded in the original translation block.\n     *   The placeholder `index` points to the element index in the template instructions set.\n     *   An optional `block` that matches the sub-template in which it was declared.\n     * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be\n     *   split up and translated separately in each angular template function. The `index` points to the\n     *   `template` instruction index. A `block` that matches the sub-template in which it was declared.\n     *\n     * @param index A unique index of the translation in the static block.\n     * @param message The translation message.\n     * @param subTemplateIndex Optional sub-template index in the `message`.\n     *\n     * @codeGenApi\n     */\n    function ɵɵi18nStart(index, message, subTemplateIndex) {\n        var tView = getLView()[TVIEW];\n        ngDevMode && assertDefined(tView, \"tView should be defined\");\n        i18nIndexStack[++i18nIndexStackPointer] = index;\n        // We need to delay projections until `i18nEnd`\n        setDelayProjection(true);\n        if (tView.firstTemplatePass && tView.data[index + HEADER_OFFSET] === null) {\n            i18nStartFirstPass(tView, index, message, subTemplateIndex);\n        }\n    }\n    // Count for the number of vars that will be allocated for each i18n block.\n    // It is global because this is used in multiple functions that include loops and recursive calls.\n    // This is reset to 0 when `i18nStartFirstPass` is called.\n    var i18nVarsCount;\n    /**\n     * See `i18nStart` above.\n     */\n    function i18nStartFirstPass(tView, index, message, subTemplateIndex) {\n        var viewData = getLView();\n        var startIndex = tView.blueprint.length - HEADER_OFFSET;\n        i18nVarsCount = 0;\n        var previousOrParentTNode = getPreviousOrParentTNode();\n        var parentTNode = getIsParent() ? getPreviousOrParentTNode() :\n            previousOrParentTNode && previousOrParentTNode.parent;\n        var parentIndex = parentTNode && parentTNode !== viewData[T_HOST] ? parentTNode.index - HEADER_OFFSET : index;\n        var parentIndexPointer = 0;\n        parentIndexStack[parentIndexPointer] = parentIndex;\n        var createOpCodes = [];\n        // If the previous node wasn't the direct parent then we have a translation without top level\n        // element and we need to keep a reference of the previous element if there is one\n        if (index > 0 && previousOrParentTNode !== parentTNode) {\n            // Create an OpCode to select the previous TNode\n            createOpCodes.push(previousOrParentTNode.index << 3 /* SHIFT_REF */ | 0 /* Select */);\n        }\n        var updateOpCodes = [];\n        var icuExpressions = [];\n        var templateTranslation = getTranslationForTemplate(message, subTemplateIndex);\n        var msgParts = replaceNgsp(templateTranslation).split(PH_REGEXP);\n        for (var i = 0; i < msgParts.length; i++) {\n            var value = msgParts[i];\n            if (i & 1) {\n                // Odd indexes are placeholders (elements and sub-templates)\n                if (value.charAt(0) === '/') {\n                    // It is a closing tag\n                    if (value.charAt(1) === \"#\" /* ELEMENT */) {\n                        var phIndex = parseInt(value.substr(2), 10);\n                        parentIndex = parentIndexStack[--parentIndexPointer];\n                        createOpCodes.push(phIndex << 3 /* SHIFT_REF */ | 5 /* ElementEnd */);\n                    }\n                }\n                else {\n                    var phIndex = parseInt(value.substr(1), 10);\n                    // The value represents a placeholder that we move to the designated index\n                    createOpCodes.push(phIndex << 3 /* SHIFT_REF */ | 0 /* Select */, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                    if (value.charAt(0) === \"#\" /* ELEMENT */) {\n                        parentIndexStack[++parentIndexPointer] = parentIndex = phIndex;\n                    }\n                }\n            }\n            else {\n                // Even indexes are text (including bindings & ICU expressions)\n                var parts = extractParts(value);\n                for (var j = 0; j < parts.length; j++) {\n                    if (j & 1) {\n                        // Odd indexes are ICU expressions\n                        // Create the comment node that will anchor the ICU expression\n                        var icuNodeIndex = startIndex + i18nVarsCount++;\n                        createOpCodes.push(COMMENT_MARKER, ngDevMode ? \"ICU \" + icuNodeIndex : '', icuNodeIndex, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                        // Update codes for the ICU expression\n                        var icuExpression = parts[j];\n                        var mask = getBindingMask(icuExpression);\n                        icuStart(icuExpressions, icuExpression, icuNodeIndex, icuNodeIndex);\n                        // Since this is recursive, the last TIcu that was pushed is the one we want\n                        var tIcuIndex = icuExpressions.length - 1;\n                        updateOpCodes.push(toMaskBit(icuExpression.mainBinding), // mask of the main binding\n                        3, // skip 3 opCodes if not changed\n                        -1 - icuExpression.mainBinding, icuNodeIndex << 2 /* SHIFT_REF */ | 2 /* IcuSwitch */, tIcuIndex, mask, // mask of all the bindings of this ICU expression\n                        2, // skip 2 opCodes if not changed\n                        icuNodeIndex << 2 /* SHIFT_REF */ | 3 /* IcuUpdate */, tIcuIndex);\n                    }\n                    else if (parts[j] !== '') {\n                        var text = parts[j];\n                        // Even indexes are text (including bindings)\n                        var hasBinding = text.match(BINDING_REGEXP);\n                        // Create text nodes\n                        var textNodeIndex = startIndex + i18nVarsCount++;\n                        createOpCodes.push(\n                        // If there is a binding, the value will be set during update\n                        hasBinding ? '' : text, textNodeIndex, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                        if (hasBinding) {\n                            addAllToArray(generateBindingUpdateOpCodes(text, textNodeIndex), updateOpCodes);\n                        }\n                    }\n                }\n            }\n        }\n        if (i18nVarsCount > 0) {\n            allocExpando(viewData, i18nVarsCount);\n        }\n        ngDevMode &&\n            attachI18nOpCodesDebug(createOpCodes, updateOpCodes, icuExpressions.length ? icuExpressions : null, viewData);\n        // NOTE: local var needed to properly assert the type of `TI18n`.\n        var tI18n = {\n            vars: i18nVarsCount,\n            create: createOpCodes,\n            update: updateOpCodes,\n            icus: icuExpressions.length ? icuExpressions : null,\n        };\n        tView.data[index + HEADER_OFFSET] = tI18n;\n    }\n    function appendI18nNode(tNode, parentTNode, previousTNode, viewData) {\n        ngDevMode && ngDevMode.rendererMoveNode++;\n        var nextNode = tNode.next;\n        if (!previousTNode) {\n            previousTNode = parentTNode;\n        }\n        // Re-organize node tree to put this node in the correct position.\n        if (previousTNode === parentTNode && tNode !== parentTNode.child) {\n            tNode.next = parentTNode.child;\n            parentTNode.child = tNode;\n        }\n        else if (previousTNode !== parentTNode && tNode !== previousTNode.next) {\n            tNode.next = previousTNode.next;\n            previousTNode.next = tNode;\n        }\n        else {\n            tNode.next = null;\n        }\n        if (parentTNode !== viewData[T_HOST]) {\n            tNode.parent = parentTNode;\n        }\n        // If tNode was moved around, we might need to fix a broken link.\n        var cursor = tNode.next;\n        while (cursor) {\n            if (cursor.next === tNode) {\n                cursor.next = nextNode;\n            }\n            cursor = cursor.next;\n        }\n        // If the placeholder to append is a projection, we need to move the projected nodes instead\n        if (tNode.type === 1 /* Projection */) {\n            var tProjectionNode = tNode;\n            appendProjectedNodes(viewData, tProjectionNode, tProjectionNode.projection, findComponentView(viewData));\n            return tNode;\n        }\n        appendChild(getNativeByTNode(tNode, viewData), tNode, viewData);\n        var slotValue = viewData[tNode.index];\n        if (tNode.type !== 0 /* Container */ && isLContainer(slotValue)) {\n            // Nodes that inject ViewContainerRef also have a comment node that should be moved\n            appendChild(slotValue[NATIVE], tNode, viewData);\n        }\n        return tNode;\n    }\n    /**\n     * Handles message string post-processing for internationalization.\n     *\n     * Handles message string post-processing by transforming it from intermediate\n     * format (that might contain some markers that we need to replace) to the final\n     * form, consumable by i18nStart instruction. Post processing steps include:\n     *\n     * 1. Resolve all multi-value cases (like [�*1:1��#2:1�|�#4:1�|�5�])\n     * 2. Replace all ICU vars (like \"VAR_PLURAL\")\n     * 3. Replace all placeholders used inside ICUs in a form of {PLACEHOLDER}\n     * 4. Replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�)\n     *    in case multiple ICUs have the same placeholder name\n     *\n     * @param message Raw translation string for post processing\n     * @param replacements Set of replacements that should be applied\n     *\n     * @returns Transformed string that can be consumed by i18nStart instruction\n     *\n     * @codeGenApi\n     */\n    function ɵɵi18nPostprocess(message, replacements) {\n        if (replacements === void 0) { replacements = {}; }\n        /**\n         * Step 1: resolve all multi-value placeholders like [�#5�|�*1:1��#2:1�|�#4:1�]\n         *\n         * Note: due to the way we process nested templates (BFS), multi-value placeholders are typically\n         * grouped by templates, for example: [�#5�|�#6�|�#1:1�|�#3:2�] where �#5� and �#6� belong to root\n         * template, �#1:1� belong to nested template with index 1 and �#1:2� - nested template with index\n         * 3. However in real templates the order might be different: i.e. �#1:1� and/or �#3:2� may go in\n         * front of �#6�. The post processing step restores the right order by keeping track of the\n         * template id stack and looks for placeholders that belong to the currently active template.\n         */\n        var result = message;\n        if (PP_MULTI_VALUE_PLACEHOLDERS_REGEXP.test(message)) {\n            var matches_1 = {};\n            var templateIdsStack_1 = [ROOT_TEMPLATE_ID];\n            result = result.replace(PP_PLACEHOLDERS_REGEXP, function (m, phs, tmpl) {\n                var content = phs || tmpl;\n                var placeholders = matches_1[content] || [];\n                if (!placeholders.length) {\n                    content.split('|').forEach(function (placeholder) {\n                        var match = placeholder.match(PP_TEMPLATE_ID_REGEXP);\n                        var templateId = match ? parseInt(match[1], 10) : ROOT_TEMPLATE_ID;\n                        var isCloseTemplateTag = PP_CLOSE_TEMPLATE_REGEXP.test(placeholder);\n                        placeholders.push([templateId, isCloseTemplateTag, placeholder]);\n                    });\n                    matches_1[content] = placeholders;\n                }\n                if (!placeholders.length) {\n                    throw new Error(\"i18n postprocess: unmatched placeholder - \" + content);\n                }\n                var currentTemplateId = templateIdsStack_1[templateIdsStack_1.length - 1];\n                var idx = 0;\n                // find placeholder index that matches current template id\n                for (var i = 0; i < placeholders.length; i++) {\n                    if (placeholders[i][0] === currentTemplateId) {\n                        idx = i;\n                        break;\n                    }\n                }\n                // update template id stack based on the current tag extracted\n                var _a = __read(placeholders[idx], 3), templateId = _a[0], isCloseTemplateTag = _a[1], placeholder = _a[2];\n                if (isCloseTemplateTag) {\n                    templateIdsStack_1.pop();\n                }\n                else if (currentTemplateId !== templateId) {\n                    templateIdsStack_1.push(templateId);\n                }\n                // remove processed tag from the list\n                placeholders.splice(idx, 1);\n                return placeholder;\n            });\n        }\n        // return current result if no replacements specified\n        if (!Object.keys(replacements).length) {\n            return result;\n        }\n        /**\n         * Step 2: replace all ICU vars (like \"VAR_PLURAL\")\n         */\n        result = result.replace(PP_ICU_VARS_REGEXP, function (match, start, key, _type, _idx, end) {\n            return replacements.hasOwnProperty(key) ? \"\" + start + replacements[key] + end : match;\n        });\n        /**\n         * Step 3: replace all placeholders used inside ICUs in a form of {PLACEHOLDER}\n         */\n        result = result.replace(PP_ICU_PLACEHOLDERS_REGEXP, function (match, key) {\n            return replacements.hasOwnProperty(key) ? replacements[key] : match;\n        });\n        /**\n         * Step 4: replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�) in case\n         * multiple ICUs have the same placeholder name\n         */\n        result = result.replace(PP_ICUS_REGEXP, function (match, key) {\n            if (replacements.hasOwnProperty(key)) {\n                var list = replacements[key];\n                if (!list.length) {\n                    throw new Error(\"i18n postprocess: unmatched ICU - \" + match + \" with key: \" + key);\n                }\n                return list.shift();\n            }\n            return match;\n        });\n        return result;\n    }\n    /**\n     * Translates a translation block marked by `i18nStart` and `i18nEnd`. It inserts the text/ICU nodes\n     * into the render tree, moves the placeholder nodes and removes the deleted nodes.\n     *\n     * @codeGenApi\n     */\n    function ɵɵi18nEnd() {\n        var tView = getLView()[TVIEW];\n        ngDevMode && assertDefined(tView, \"tView should be defined\");\n        i18nEndFirstPass(tView);\n        // Stop delaying projections\n        setDelayProjection(false);\n    }\n    /**\n     * See `i18nEnd` above.\n     */\n    function i18nEndFirstPass(tView) {\n        var viewData = getLView();\n        ngDevMode && assertEqual(viewData[BINDING_INDEX], viewData[TVIEW].bindingStartIndex, 'i18nEnd should be called before any binding');\n        var rootIndex = i18nIndexStack[i18nIndexStackPointer--];\n        var tI18n = tView.data[rootIndex + HEADER_OFFSET];\n        ngDevMode && assertDefined(tI18n, \"You should call i18nStart before i18nEnd\");\n        // Find the last node that was added before `i18nEnd`\n        var lastCreatedNode = getPreviousOrParentTNode();\n        // Read the instructions to insert/move/remove DOM elements\n        var visitedNodes = readCreateOpCodes(rootIndex, tI18n.create, tI18n.icus, viewData);\n        // Remove deleted nodes\n        for (var i = rootIndex + 1; i <= lastCreatedNode.index - HEADER_OFFSET; i++) {\n            if (visitedNodes.indexOf(i) === -1) {\n                removeNode(i, viewData);\n            }\n        }\n    }\n    /**\n     * Creates and stores the dynamic TNode, and unhooks it from the tree for now.\n     */\n    function createDynamicNodeAtIndex(lView, index, type, native, name) {\n        var previousOrParentTNode = getPreviousOrParentTNode();\n        ngDevMode && assertDataInRange(lView, index + HEADER_OFFSET);\n        lView[index + HEADER_OFFSET] = native;\n        var tNode = getOrCreateTNode(lView[TVIEW], lView[T_HOST], index, type, name, null);\n        // We are creating a dynamic node, the previous tNode might not be pointing at this node.\n        // We will link ourselves into the tree later with `appendI18nNode`.\n        if (previousOrParentTNode.next === tNode) {\n            previousOrParentTNode.next = null;\n        }\n        return tNode;\n    }\n    function readCreateOpCodes(index, createOpCodes, icus, viewData) {\n        var renderer = getLView()[RENDERER];\n        var currentTNode = null;\n        var previousTNode = null;\n        var visitedNodes = [];\n        for (var i = 0; i < createOpCodes.length; i++) {\n            var opCode = createOpCodes[i];\n            if (typeof opCode == 'string') {\n                var textRNode = createTextNode(opCode, renderer);\n                var textNodeIndex = createOpCodes[++i];\n                ngDevMode && ngDevMode.rendererCreateTextNode++;\n                previousTNode = currentTNode;\n                currentTNode =\n                    createDynamicNodeAtIndex(viewData, textNodeIndex, 3 /* Element */, textRNode, null);\n                visitedNodes.push(textNodeIndex);\n                setIsNotParent();\n            }\n            else if (typeof opCode == 'number') {\n                switch (opCode & 7 /* MASK_OPCODE */) {\n                    case 1 /* AppendChild */:\n                        var destinationNodeIndex = opCode >>> 17 /* SHIFT_PARENT */;\n                        var destinationTNode = void 0;\n                        if (destinationNodeIndex === index) {\n                            // If the destination node is `i18nStart`, we don't have a\n                            // top-level node and we should use the host node instead\n                            destinationTNode = viewData[T_HOST];\n                        }\n                        else {\n                            destinationTNode = getTNode(destinationNodeIndex, viewData);\n                        }\n                        ngDevMode &&\n                            assertDefined(currentTNode, \"You need to create or select a node before you can insert it into the DOM\");\n                        previousTNode = appendI18nNode(currentTNode, destinationTNode, previousTNode, viewData);\n                        break;\n                    case 0 /* Select */:\n                        var nodeIndex = opCode >>> 3 /* SHIFT_REF */;\n                        visitedNodes.push(nodeIndex);\n                        previousTNode = currentTNode;\n                        currentTNode = getTNode(nodeIndex, viewData);\n                        if (currentTNode) {\n                            setPreviousOrParentTNode(currentTNode, currentTNode.type === 3 /* Element */);\n                        }\n                        break;\n                    case 5 /* ElementEnd */:\n                        var elementIndex = opCode >>> 3 /* SHIFT_REF */;\n                        previousTNode = currentTNode = getTNode(elementIndex, viewData);\n                        setPreviousOrParentTNode(currentTNode, false);\n                        break;\n                    case 4 /* Attr */:\n                        var elementNodeIndex = opCode >>> 3 /* SHIFT_REF */;\n                        var attrName = createOpCodes[++i];\n                        var attrValue = createOpCodes[++i];\n                        // This code is used for ICU expressions only, since we don't support\n                        // directives/components in ICUs, we don't need to worry about inputs here\n                        elementAttributeInternal(elementNodeIndex, attrName, attrValue, viewData);\n                        break;\n                    default:\n                        throw new Error(\"Unable to determine the type of mutate operation for \\\"\" + opCode + \"\\\"\");\n                }\n            }\n            else {\n                switch (opCode) {\n                    case COMMENT_MARKER:\n                        var commentValue = createOpCodes[++i];\n                        var commentNodeIndex = createOpCodes[++i];\n                        ngDevMode && assertEqual(typeof commentValue, 'string', \"Expected \\\"\" + commentValue + \"\\\" to be a comment node value\");\n                        var commentRNode = renderer.createComment(commentValue);\n                        ngDevMode && ngDevMode.rendererCreateComment++;\n                        previousTNode = currentTNode;\n                        currentTNode = createDynamicNodeAtIndex(viewData, commentNodeIndex, 5 /* IcuContainer */, commentRNode, null);\n                        visitedNodes.push(commentNodeIndex);\n                        attachPatchData(commentRNode, viewData);\n                        currentTNode.activeCaseIndex = null;\n                        // We will add the case nodes later, during the update phase\n                        setIsNotParent();\n                        break;\n                    case ELEMENT_MARKER:\n                        var tagNameValue = createOpCodes[++i];\n                        var elementNodeIndex = createOpCodes[++i];\n                        ngDevMode && assertEqual(typeof tagNameValue, 'string', \"Expected \\\"\" + tagNameValue + \"\\\" to be an element node tag name\");\n                        var elementRNode = renderer.createElement(tagNameValue);\n                        ngDevMode && ngDevMode.rendererCreateElement++;\n                        previousTNode = currentTNode;\n                        currentTNode = createDynamicNodeAtIndex(viewData, elementNodeIndex, 3 /* Element */, elementRNode, tagNameValue);\n                        visitedNodes.push(elementNodeIndex);\n                        break;\n                    default:\n                        throw new Error(\"Unable to determine the type of mutate operation for \\\"\" + opCode + \"\\\"\");\n                }\n            }\n        }\n        setIsNotParent();\n        return visitedNodes;\n    }\n    function readUpdateOpCodes(updateOpCodes, icus, bindingsStartIndex, changeMask, viewData, bypassCheckBit) {\n        if (bypassCheckBit === void 0) { bypassCheckBit = false; }\n        var caseCreated = false;\n        for (var i = 0; i < updateOpCodes.length; i++) {\n            // bit code to check if we should apply the next update\n            var checkBit = updateOpCodes[i];\n            // Number of opCodes to skip until next set of update codes\n            var skipCodes = updateOpCodes[++i];\n            if (bypassCheckBit || (checkBit & changeMask)) {\n                // The value has been updated since last checked\n                var value = '';\n                for (var j = i + 1; j <= (i + skipCodes); j++) {\n                    var opCode = updateOpCodes[j];\n                    if (typeof opCode == 'string') {\n                        value += opCode;\n                    }\n                    else if (typeof opCode == 'number') {\n                        if (opCode < 0) {\n                            // It's a binding index whose value is negative\n                            value += renderStringify(viewData[bindingsStartIndex - opCode]);\n                        }\n                        else {\n                            var nodeIndex = opCode >>> 2 /* SHIFT_REF */;\n                            var tIcuIndex = void 0;\n                            var tIcu = void 0;\n                            var icuTNode = void 0;\n                            switch (opCode & 3 /* MASK_OPCODE */) {\n                                case 1 /* Attr */:\n                                    var propName = updateOpCodes[++j];\n                                    var sanitizeFn = updateOpCodes[++j];\n                                    elementPropertyInternal(nodeIndex, propName, value, sanitizeFn);\n                                    break;\n                                case 0 /* Text */:\n                                    textBindingInternal(viewData, nodeIndex, value);\n                                    break;\n                                case 2 /* IcuSwitch */:\n                                    tIcuIndex = updateOpCodes[++j];\n                                    tIcu = icus[tIcuIndex];\n                                    icuTNode = getTNode(nodeIndex, viewData);\n                                    // If there is an active case, delete the old nodes\n                                    if (icuTNode.activeCaseIndex !== null) {\n                                        var removeCodes = tIcu.remove[icuTNode.activeCaseIndex];\n                                        for (var k = 0; k < removeCodes.length; k++) {\n                                            var removeOpCode = removeCodes[k];\n                                            switch (removeOpCode & 7 /* MASK_OPCODE */) {\n                                                case 3 /* Remove */:\n                                                    var nodeIndex_1 = removeOpCode >>> 3 /* SHIFT_REF */;\n                                                    removeNode(nodeIndex_1, viewData);\n                                                    break;\n                                                case 6 /* RemoveNestedIcu */:\n                                                    var nestedIcuNodeIndex = removeCodes[k + 1] >>> 3 /* SHIFT_REF */;\n                                                    var nestedIcuTNode = getTNode(nestedIcuNodeIndex, viewData);\n                                                    var activeIndex = nestedIcuTNode.activeCaseIndex;\n                                                    if (activeIndex !== null) {\n                                                        var nestedIcuTIndex = removeOpCode >>> 3 /* SHIFT_REF */;\n                                                        var nestedTIcu = icus[nestedIcuTIndex];\n                                                        addAllToArray(nestedTIcu.remove[activeIndex], removeCodes);\n                                                    }\n                                                    break;\n                                            }\n                                        }\n                                    }\n                                    // Update the active caseIndex\n                                    var caseIndex = getCaseIndex(tIcu, value);\n                                    icuTNode.activeCaseIndex = caseIndex !== -1 ? caseIndex : null;\n                                    // Add the nodes for the new case\n                                    readCreateOpCodes(-1, tIcu.create[caseIndex], icus, viewData);\n                                    caseCreated = true;\n                                    break;\n                                case 3 /* IcuUpdate */:\n                                    tIcuIndex = updateOpCodes[++j];\n                                    tIcu = icus[tIcuIndex];\n                                    icuTNode = getTNode(nodeIndex, viewData);\n                                    readUpdateOpCodes(tIcu.update[icuTNode.activeCaseIndex], icus, bindingsStartIndex, changeMask, viewData, caseCreated);\n                                    break;\n                            }\n                        }\n                    }\n                }\n            }\n            i += skipCodes;\n        }\n    }\n    function removeNode(index, viewData) {\n        var removedPhTNode = getTNode(index, viewData);\n        var removedPhRNode = getNativeByIndex(index, viewData);\n        if (removedPhRNode) {\n            nativeRemoveNode(viewData[RENDERER], removedPhRNode);\n        }\n        var slotValue = ɵɵload(index);\n        if (isLContainer(slotValue)) {\n            var lContainer = slotValue;\n            if (removedPhTNode.type !== 0 /* Container */) {\n                nativeRemoveNode(viewData[RENDERER], lContainer[NATIVE]);\n            }\n        }\n        // Define this node as detached so that we don't risk projecting it\n        removedPhTNode.flags |= 32 /* isDetached */;\n        ngDevMode && ngDevMode.rendererRemoveNode++;\n    }\n    /**\n     *\n     * Use this instruction to create a translation block that doesn't contain any placeholder.\n     * It calls both {@link i18nStart} and {@link i18nEnd} in one instruction.\n     *\n     * The translation `message` is the value which is locale specific. The translation string may\n     * contain placeholders which associate inner elements and sub-templates within the translation.\n     *\n     * The translation `message` placeholders are:\n     * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be\n     *   interpolated into. The placeholder `index` points to the expression binding index. An optional\n     *   `block` that matches the sub-template in which it was declared.\n     * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning\n     *   and end of DOM element that were embedded in the original translation block. The placeholder\n     *   `index` points to the element index in the template instructions set. An optional `block` that\n     *   matches the sub-template in which it was declared.\n     * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be\n     *   split up and translated separately in each angular template function. The `index` points to the\n     *   `template` instruction index. A `block` that matches the sub-template in which it was declared.\n     *\n     * @param index A unique index of the translation in the static block.\n     * @param message The translation message.\n     * @param subTemplateIndex Optional sub-template index in the `message`.\n     *\n     * @codeGenApi\n     */\n    function ɵɵi18n(index, message, subTemplateIndex) {\n        ɵɵi18nStart(index, message, subTemplateIndex);\n        ɵɵi18nEnd();\n    }\n    /**\n     * Marks a list of attributes as translatable.\n     *\n     * @param index A unique index in the static block\n     * @param values\n     *\n     * @codeGenApi\n     */\n    function ɵɵi18nAttributes(index, values) {\n        var tView = getLView()[TVIEW];\n        ngDevMode && assertDefined(tView, \"tView should be defined\");\n        i18nAttributesFirstPass(tView, index, values);\n    }\n    /**\n     * See `i18nAttributes` above.\n     */\n    function i18nAttributesFirstPass(tView, index, values) {\n        var previousElement = getPreviousOrParentTNode();\n        var previousElementIndex = previousElement.index - HEADER_OFFSET;\n        var updateOpCodes = [];\n        for (var i = 0; i < values.length; i += 2) {\n            var attrName = values[i];\n            var message = values[i + 1];\n            var parts = message.split(ICU_REGEXP);\n            for (var j = 0; j < parts.length; j++) {\n                var value = parts[j];\n                if (j & 1) {\n                    // Odd indexes are ICU expressions\n                    // TODO(ocombe): support ICU expressions in attributes\n                    throw new Error('ICU expressions are not yet supported in attributes');\n                }\n                else if (value !== '') {\n                    // Even indexes are text (including bindings)\n                    var hasBinding = !!value.match(BINDING_REGEXP);\n                    if (hasBinding) {\n                        if (tView.firstTemplatePass && tView.data[index + HEADER_OFFSET] === null) {\n                            addAllToArray(generateBindingUpdateOpCodes(value, previousElementIndex, attrName), updateOpCodes);\n                        }\n                    }\n                    else {\n                        var lView = getLView();\n                        elementAttributeInternal(previousElementIndex, attrName, value, lView);\n                        // Check if that attribute is a directive input\n                        var tNode = getTNode(previousElementIndex, lView);\n                        var dataValue = tNode.inputs && tNode.inputs[attrName];\n                        if (dataValue) {\n                            setInputsForProperty(lView, dataValue, value);\n                        }\n                    }\n                }\n            }\n        }\n        if (tView.firstTemplatePass && tView.data[index + HEADER_OFFSET] === null) {\n            tView.data[index + HEADER_OFFSET] = updateOpCodes;\n        }\n    }\n    var changeMask = 0;\n    var shiftsCounter = 0;\n    /**\n     * Stores the values of the bindings during each update cycle in order to determine if we need to\n     * update the translated nodes.\n     *\n     * @param value The binding's value\n     * @returns This function returns itself so that it may be chained\n     * (e.g. `i18nExp(ctx.name)(ctx.title)`)\n     *\n     * @codeGenApi\n     */\n    function ɵɵi18nExp(value) {\n        var lView = getLView();\n        var expression = bind(lView, value);\n        if (expression !== NO_CHANGE) {\n            changeMask = changeMask | (1 << shiftsCounter);\n        }\n        shiftsCounter++;\n        return ɵɵi18nExp;\n    }\n    /**\n     * Updates a translation block or an i18n attribute when the bindings have changed.\n     *\n     * @param index Index of either {@link i18nStart} (translation block) or {@link i18nAttributes}\n     * (i18n attribute) on which it should update the content.\n     *\n     * @codeGenApi\n     */\n    function ɵɵi18nApply(index) {\n        if (shiftsCounter) {\n            var lView = getLView();\n            var tView = lView[TVIEW];\n            ngDevMode && assertDefined(tView, \"tView should be defined\");\n            var tI18n = tView.data[index + HEADER_OFFSET];\n            var updateOpCodes = void 0;\n            var icus = null;\n            if (Array.isArray(tI18n)) {\n                updateOpCodes = tI18n;\n            }\n            else {\n                updateOpCodes = tI18n.update;\n                icus = tI18n.icus;\n            }\n            var bindingsStartIndex = lView[BINDING_INDEX] - shiftsCounter - 1;\n            readUpdateOpCodes(updateOpCodes, icus, bindingsStartIndex, changeMask, lView);\n            // Reset changeMask & maskBit to default for the next update cycle\n            changeMask = 0;\n            shiftsCounter = 0;\n        }\n    }\n    /**\n     * Returns the index of the current case of an ICU expression depending on the main binding value\n     *\n     * @param icuExpression\n     * @param bindingValue The value of the main binding used by this ICU expression\n     */\n    function getCaseIndex(icuExpression, bindingValue) {\n        var index = icuExpression.cases.indexOf(bindingValue);\n        if (index === -1) {\n            switch (icuExpression.type) {\n                case 1 /* plural */: {\n                    var resolvedCase = getPluralCase(bindingValue, getLocaleId());\n                    index = icuExpression.cases.indexOf(resolvedCase);\n                    if (index === -1 && resolvedCase !== 'other') {\n                        index = icuExpression.cases.indexOf('other');\n                    }\n                    break;\n                }\n                case 0 /* select */: {\n                    index = icuExpression.cases.indexOf('other');\n                    break;\n                }\n            }\n        }\n        return index;\n    }\n    /**\n     * Generate the OpCodes for ICU expressions.\n     *\n     * @param tIcus\n     * @param icuExpression\n     * @param startIndex\n     * @param expandoStartIndex\n     */\n    function icuStart(tIcus, icuExpression, startIndex, expandoStartIndex) {\n        var createCodes = [];\n        var removeCodes = [];\n        var updateCodes = [];\n        var vars = [];\n        var childIcus = [];\n        for (var i = 0; i < icuExpression.values.length; i++) {\n            // Each value is an array of strings & other ICU expressions\n            var valueArr = icuExpression.values[i];\n            var nestedIcus = [];\n            for (var j = 0; j < valueArr.length; j++) {\n                var value = valueArr[j];\n                if (typeof value !== 'string') {\n                    // It is an nested ICU expression\n                    var icuIndex = nestedIcus.push(value) - 1;\n                    // Replace nested ICU expression by a comment node\n                    valueArr[j] = \"<!--\\uFFFD\" + icuIndex + \"\\uFFFD-->\";\n                }\n            }\n            var icuCase = parseIcuCase(valueArr.join(''), startIndex, nestedIcus, tIcus, expandoStartIndex);\n            createCodes.push(icuCase.create);\n            removeCodes.push(icuCase.remove);\n            updateCodes.push(icuCase.update);\n            vars.push(icuCase.vars);\n            childIcus.push(icuCase.childIcus);\n        }\n        var tIcu = {\n            type: icuExpression.type,\n            vars: vars,\n            childIcus: childIcus,\n            cases: icuExpression.cases,\n            create: createCodes,\n            remove: removeCodes,\n            update: updateCodes\n        };\n        tIcus.push(tIcu);\n        // Adding the maximum possible of vars needed (based on the cases with the most vars)\n        i18nVarsCount += Math.max.apply(Math, __spread(vars));\n    }\n    /**\n     * Transforms a string template into an HTML template and a list of instructions used to update\n     * attributes or nodes that contain bindings.\n     *\n     * @param unsafeHtml The string to parse\n     * @param parentIndex\n     * @param nestedIcus\n     * @param tIcus\n     * @param expandoStartIndex\n     */\n    function parseIcuCase(unsafeHtml, parentIndex, nestedIcus, tIcus, expandoStartIndex) {\n        var inertBodyHelper = new InertBodyHelper(document);\n        var inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n        if (!inertBodyElement) {\n            throw new Error('Unable to generate inert body element');\n        }\n        var wrapper = getTemplateContent(inertBodyElement) || inertBodyElement;\n        var opCodes = { vars: 0, childIcus: [], create: [], remove: [], update: [] };\n        parseNodes(wrapper.firstChild, opCodes, parentIndex, nestedIcus, tIcus, expandoStartIndex);\n        return opCodes;\n    }\n    var NESTED_ICU = /�(\\d+)�/;\n    /**\n     * Parses a node, its children and its siblings, and generates the mutate & update OpCodes.\n     *\n     * @param currentNode The first node to parse\n     * @param icuCase The data for the ICU expression case that contains those nodes\n     * @param parentIndex Index of the current node's parent\n     * @param nestedIcus Data for the nested ICU expressions that this case contains\n     * @param tIcus Data for all ICU expressions of the current message\n     * @param expandoStartIndex Expando start index for the current ICU expression\n     */\n    function parseNodes(currentNode, icuCase, parentIndex, nestedIcus, tIcus, expandoStartIndex) {\n        if (currentNode) {\n            var nestedIcusToCreate = [];\n            while (currentNode) {\n                var nextNode = currentNode.nextSibling;\n                var newIndex = expandoStartIndex + ++icuCase.vars;\n                switch (currentNode.nodeType) {\n                    case Node.ELEMENT_NODE:\n                        var element = currentNode;\n                        var tagName = element.tagName.toLowerCase();\n                        if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\n                            // This isn't a valid element, we won't create an element for it\n                            icuCase.vars--;\n                        }\n                        else {\n                            icuCase.create.push(ELEMENT_MARKER, tagName, newIndex, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                            var elAttrs = element.attributes;\n                            for (var i = 0; i < elAttrs.length; i++) {\n                                var attr = elAttrs.item(i);\n                                var lowerAttrName = attr.name.toLowerCase();\n                                var hasBinding_1 = !!attr.value.match(BINDING_REGEXP);\n                                // we assume the input string is safe, unless it's using a binding\n                                if (hasBinding_1) {\n                                    if (VALID_ATTRS.hasOwnProperty(lowerAttrName)) {\n                                        if (URI_ATTRS[lowerAttrName]) {\n                                            addAllToArray(generateBindingUpdateOpCodes(attr.value, newIndex, attr.name, _sanitizeUrl), icuCase.update);\n                                        }\n                                        else if (SRCSET_ATTRS[lowerAttrName]) {\n                                            addAllToArray(generateBindingUpdateOpCodes(attr.value, newIndex, attr.name, sanitizeSrcset), icuCase.update);\n                                        }\n                                        else {\n                                            addAllToArray(generateBindingUpdateOpCodes(attr.value, newIndex, attr.name), icuCase.update);\n                                        }\n                                    }\n                                    else {\n                                        ngDevMode &&\n                                            console.warn(\"WARNING: ignoring unsafe attribute value \" + lowerAttrName + \" on element \" + tagName + \" (see http://g.co/ng/security#xss)\");\n                                    }\n                                }\n                                else {\n                                    icuCase.create.push(newIndex << 3 /* SHIFT_REF */ | 4 /* Attr */, attr.name, attr.value);\n                                }\n                            }\n                            // Parse the children of this node (if any)\n                            parseNodes(currentNode.firstChild, icuCase, newIndex, nestedIcus, tIcus, expandoStartIndex);\n                            // Remove the parent node after the children\n                            icuCase.remove.push(newIndex << 3 /* SHIFT_REF */ | 3 /* Remove */);\n                        }\n                        break;\n                    case Node.TEXT_NODE:\n                        var value = currentNode.textContent || '';\n                        var hasBinding = value.match(BINDING_REGEXP);\n                        icuCase.create.push(hasBinding ? '' : value, newIndex, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                        icuCase.remove.push(newIndex << 3 /* SHIFT_REF */ | 3 /* Remove */);\n                        if (hasBinding) {\n                            addAllToArray(generateBindingUpdateOpCodes(value, newIndex), icuCase.update);\n                        }\n                        break;\n                    case Node.COMMENT_NODE:\n                        // Check if the comment node is a placeholder for a nested ICU\n                        var match = NESTED_ICU.exec(currentNode.textContent || '');\n                        if (match) {\n                            var nestedIcuIndex = parseInt(match[1], 10);\n                            var newLocal = ngDevMode ? \"nested ICU \" + nestedIcuIndex : '';\n                            // Create the comment node that will anchor the ICU expression\n                            icuCase.create.push(COMMENT_MARKER, newLocal, newIndex, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                            var nestedIcu = nestedIcus[nestedIcuIndex];\n                            nestedIcusToCreate.push([nestedIcu, newIndex]);\n                        }\n                        else {\n                            // We do not handle any other type of comment\n                            icuCase.vars--;\n                        }\n                        break;\n                    default:\n                        // We do not handle any other type of element\n                        icuCase.vars--;\n                }\n                currentNode = nextNode;\n            }\n            for (var i = 0; i < nestedIcusToCreate.length; i++) {\n                var nestedIcu = nestedIcusToCreate[i][0];\n                var nestedIcuNodeIndex = nestedIcusToCreate[i][1];\n                icuStart(tIcus, nestedIcu, nestedIcuNodeIndex, expandoStartIndex + icuCase.vars);\n                // Since this is recursive, the last TIcu that was pushed is the one we want\n                var nestTIcuIndex = tIcus.length - 1;\n                icuCase.vars += Math.max.apply(Math, __spread(tIcus[nestTIcuIndex].vars));\n                icuCase.childIcus.push(nestTIcuIndex);\n                var mask = getBindingMask(nestedIcu);\n                icuCase.update.push(toMaskBit(nestedIcu.mainBinding), // mask of the main binding\n                3, // skip 3 opCodes if not changed\n                -1 - nestedIcu.mainBinding, nestedIcuNodeIndex << 2 /* SHIFT_REF */ | 2 /* IcuSwitch */, nestTIcuIndex, mask, // mask of all the bindings of this ICU expression\n                2, // skip 2 opCodes if not changed\n                nestedIcuNodeIndex << 2 /* SHIFT_REF */ | 3 /* IcuUpdate */, nestTIcuIndex);\n                icuCase.remove.push(nestTIcuIndex << 3 /* SHIFT_REF */ | 6 /* RemoveNestedIcu */, nestedIcuNodeIndex << 3 /* SHIFT_REF */ | 3 /* Remove */);\n            }\n        }\n    }\n    /**\n     * Angular Dart introduced &ngsp; as a placeholder for non-removable space, see:\n     * https://github.com/dart-lang/angular/blob/0bb611387d29d65b5af7f9d2515ab571fd3fbee4/_tests/test/compiler/preserve_whitespace_test.dart#L25-L32\n     * In Angular Dart &ngsp; is converted to the 0xE500 PUA (Private Use Areas) unicode character\n     * and later on replaced by a space. We are re-implementing the same idea here, since translations\n     * might contain this special character.\n     */\n    var NGSP_UNICODE_REGEXP = /\\uE500/g;\n    function replaceNgsp(value) {\n        return value.replace(NGSP_UNICODE_REGEXP, ' ');\n    }\n    var TRANSLATIONS = {};\n    /**\n     * Set the configuration for `i18nLocalize`.\n     *\n     * @deprecated this method is temporary & should not be used as it will be removed soon\n     */\n    function i18nConfigureLocalize(options) {\n        if (options === void 0) { options = {\n            translations: {}\n        }; }\n        TRANSLATIONS = options.translations;\n    }\n    var LOCALIZE_PH_REGEXP = /\\{\\$(.*?)\\}/g;\n    /**\n     * A goog.getMsg-like function for users that do not use Closure.\n     *\n     * This method is required as a *temporary* measure to prevent i18n tests from being blocked while\n     * running outside of Closure Compiler. This method will not be needed once runtime translation\n     * service support is introduced.\n     *\n     * @codeGenApi\n     * @deprecated this method is temporary & should not be used as it will be removed soon\n     */\n    function ɵɵi18nLocalize(input, placeholders) {\n        if (typeof TRANSLATIONS[input] !== 'undefined') { // to account for empty string\n            input = TRANSLATIONS[input];\n        }\n        if (placeholders !== undefined && Object.keys(placeholders).length) {\n            return input.replace(LOCALIZE_PH_REGEXP, function (_, key) { return placeholders[key] || ''; });\n        }\n        return input;\n    }\n    /**\n     * The locale id that the application is currently using (for translations and ICU expressions).\n     * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine\n     * but is now defined as a global value.\n     */\n    var DEFAULT_LOCALE_ID = 'en-US';\n    var LOCALE_ID = DEFAULT_LOCALE_ID;\n    /**\n     * Sets the locale id that will be used for translations and ICU expressions.\n     * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine\n     * but is now defined as a global value.\n     *\n     * @param localeId\n     */\n    function setLocaleId(localeId) {\n        LOCALE_ID = localeId.toLowerCase().replace(/_/g, '-');\n    }\n    /**\n     * Gets the locale id that will be used for translations and ICU expressions.\n     * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine\n     * but is now defined as a global value.\n     */\n    function getLocaleId() {\n        return LOCALE_ID;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Map of module-id to the corresponding NgModule.\n     * - In pre Ivy we track NgModuleFactory,\n     * - In post Ivy we track the NgModuleType\n     */\n    var modules = new Map();\n    /**\n     * Registers a loaded module. Should only be called from generated NgModuleFactory code.\n     * @publicApi\n     */\n    function registerModuleFactory(id, factory) {\n        var existing = modules.get(id);\n        assertSameOrNotExisting(id, existing && existing.moduleType, factory.moduleType);\n        modules.set(id, factory);\n    }\n    function assertSameOrNotExisting(id, type, incoming) {\n        if (type && type !== incoming) {\n            throw new Error(\"Duplicate module registered for \" + id + \" - \" + stringify(type) + \" vs \" + stringify(type.name));\n        }\n    }\n    function registerNgModuleType(ngModuleType) {\n        if (ngModuleType.ngModuleDef.id !== null) {\n            var id = ngModuleType.ngModuleDef.id;\n            var existing = modules.get(id);\n            assertSameOrNotExisting(id, existing, ngModuleType);\n            modules.set(id, ngModuleType);\n        }\n        var imports = ngModuleType.ngModuleDef.imports;\n        if (imports instanceof Function) {\n            imports = imports();\n        }\n        if (imports) {\n            imports.forEach(function (i) { return registerNgModuleType(i); });\n        }\n    }\n    function getRegisteredNgModuleType(id) {\n        return modules.get(id);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var COMPONENT_FACTORY_RESOLVER = {\n        provide: ComponentFactoryResolver,\n        useClass: ComponentFactoryResolver$1,\n        deps: [NgModuleRef],\n    };\n    var NgModuleRef$1 = /** @class */ (function (_super) {\n        __extends(NgModuleRef$1, _super);\n        function NgModuleRef$1(ngModuleType, _parent) {\n            var _this = _super.call(this) || this;\n            _this._parent = _parent;\n            // tslint:disable-next-line:require-internal-with-underscore\n            _this._bootstrapComponents = [];\n            _this.injector = _this;\n            _this.destroyCbs = [];\n            var ngModuleDef = getNgModuleDef(ngModuleType);\n            ngDevMode && assertDefined(ngModuleDef, \"NgModule '\" + stringify(ngModuleType) + \"' is not a subtype of 'NgModuleType'.\");\n            var ngLocaleIdDef = getNgLocaleIdDef(ngModuleType);\n            if (ngLocaleIdDef) {\n                setLocaleId(ngLocaleIdDef);\n            }\n            _this._bootstrapComponents = maybeUnwrapFn(ngModuleDef.bootstrap);\n            var additionalProviders = [\n                {\n                    provide: NgModuleRef,\n                    useValue: _this,\n                },\n                COMPONENT_FACTORY_RESOLVER\n            ];\n            _this._r3Injector = createInjector(ngModuleType, _parent, additionalProviders, stringify(ngModuleType));\n            _this.instance = _this.get(ngModuleType);\n            return _this;\n        }\n        NgModuleRef$1.prototype.get = function (token, notFoundValue, injectFlags) {\n            if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n            if (injectFlags === void 0) { injectFlags = exports.InjectFlags.Default; }\n            if (token === Injector || token === NgModuleRef || token === INJECTOR) {\n                return this;\n            }\n            return this._r3Injector.get(token, notFoundValue, injectFlags);\n        };\n        Object.defineProperty(NgModuleRef$1.prototype, \"componentFactoryResolver\", {\n            get: function () {\n                return this.get(ComponentFactoryResolver);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        NgModuleRef$1.prototype.destroy = function () {\n            ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n            var injector = this._r3Injector;\n            !injector.destroyed && injector.destroy();\n            this.destroyCbs.forEach(function (fn) { return fn(); });\n            this.destroyCbs = null;\n        };\n        NgModuleRef$1.prototype.onDestroy = function (callback) {\n            ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n            this.destroyCbs.push(callback);\n        };\n        return NgModuleRef$1;\n    }(NgModuleRef));\n    var NgModuleFactory$1 = /** @class */ (function (_super) {\n        __extends(NgModuleFactory, _super);\n        function NgModuleFactory(moduleType) {\n            var _this = _super.call(this) || this;\n            _this.moduleType = moduleType;\n            var ngModuleDef = getNgModuleDef(moduleType);\n            if (ngModuleDef !== null) {\n                // Register the NgModule with Angular's module registry. The location (and hence timing) of\n                // this call is critical to ensure this works correctly (modules get registered when expected)\n                // without bloating bundles (modules are registered when otherwise not referenced).\n                //\n                // In View Engine, registration occurs in the .ngfactory.js file as a side effect. This has\n                // several practical consequences:\n                //\n                // - If an .ngfactory file is not imported from, the module won't be registered (and can be\n                //   tree shaken).\n                // - If an .ngfactory file is imported from, the module will be registered even if an instance\n                //   is not actually created (via `create` below).\n                // - Since an .ngfactory file in View Engine references the .ngfactory files of the NgModule's\n                //   imports,\n                //\n                // In Ivy, things are a bit different. .ngfactory files still exist for compatibility, but are\n                // not a required API to use - there are other ways to obtain an NgModuleFactory for a given\n                // NgModule. Thus, relying on a side effect in the .ngfactory file is not sufficient. Instead,\n                // the side effect of registration is added here, in the constructor of NgModuleFactory,\n                // ensuring no matter how a factory is created, the module is registered correctly.\n                //\n                // An alternative would be to include the registration side effect inline following the actual\n                // NgModule definition. This also has the correct timing, but breaks tree-shaking - modules\n                // will be registered and retained even if they're otherwise never referenced.\n                registerNgModuleType(moduleType);\n            }\n            return _this;\n        }\n        NgModuleFactory.prototype.create = function (parentInjector) {\n            return new NgModuleRef$1(this.moduleType, parentInjector);\n        };\n        return NgModuleFactory;\n    }(NgModuleFactory));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Adds decorator, constructor, and property metadata to a given type via static metadata fields\n     * on the type.\n     *\n     * These metadata fields can later be read with Angular's `ReflectionCapabilities` API.\n     *\n     * Calls to `setClassMetadata` can be marked as pure, resulting in the metadata assignments being\n     * tree-shaken away during production builds.\n     */\n    function setClassMetadata(type, decorators, ctorParameters, propDecorators) {\n        return noSideEffects(function () {\n            var _a;\n            var clazz = type;\n            // We determine whether a class has its own metadata by taking the metadata from the parent\n            // constructor and checking whether it's the same as the subclass metadata below. We can't use\n            // `hasOwnProperty` here because it doesn't work correctly in IE10 for static fields that are\n            // defined by TS. See https://github.com/angular/angular/pull/28439#issuecomment-459349218.\n            var parentPrototype = clazz.prototype ? Object.getPrototypeOf(clazz.prototype) : null;\n            var parentConstructor = parentPrototype && parentPrototype.constructor;\n            if (decorators !== null) {\n                if (clazz.decorators !== undefined &&\n                    (!parentConstructor || parentConstructor.decorators !== clazz.decorators)) {\n                    (_a = clazz.decorators).push.apply(_a, __spread(decorators));\n                }\n                else {\n                    clazz.decorators = decorators;\n                }\n            }\n            if (ctorParameters !== null) {\n                // Rather than merging, clobber the existing parameters. If other projects exist which use\n                // tsickle-style annotations and reflect over them in the same way, this could cause issues,\n                // but that is vanishingly unlikely.\n                clazz.ctorParameters = ctorParameters;\n            }\n            if (propDecorators !== null) {\n                // The property decorator objects are merged as it is possible different fields have different\n                // decorator types. Decorators on individual fields are not merged, as it's also incredibly\n                // unlikely that a field will be decorated both with an Angular decorator and a non-Angular\n                // decorator that's also been downleveled.\n                if (clazz.propDecorators !== undefined &&\n                    (!parentConstructor || parentConstructor.propDecorators !== clazz.propDecorators)) {\n                    clazz.propDecorators = __assign({}, clazz.propDecorators, propDecorators);\n                }\n                else {\n                    clazz.propDecorators = propDecorators;\n                }\n            }\n        });\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Bindings for pure functions are stored after regular bindings.\n     *\n     * |------consts------|---------vars---------|                 |----- hostVars (dir1) ------|\n     * ------------------------------------------------------------------------------------------\n     * | nodes/refs/pipes | bindings | fn slots  | injector | dir1 | host bindings | host slots |\n     * ------------------------------------------------------------------------------------------\n     *                    ^                      ^\n     *      TView.bindingStartIndex      TView.expandoStartIndex\n     *\n     * Pure function instructions are given an offset from the binding root. Adding the offset to the\n     * binding root gives the first index where the bindings are stored. In component views, the binding\n     * root is the bindingStartIndex. In host bindings, the binding root is the expandoStartIndex +\n     * any directive instances + any hostVars in directives evaluated before it.\n     *\n     * See VIEW_DATA.md for more information about host binding resolution.\n     */\n    /**\n     * If the value hasn't been saved, calls the pure function to store and return the\n     * value. If it has been saved, returns the saved value.\n     *\n     * @param slotOffset the offset from binding root to the reserved slot\n     * @param pureFn Function that returns a value\n     * @param thisArg Optional calling context of pureFn\n     * @returns value\n     *\n     * @codeGenApi\n     */\n    function ɵɵpureFunction0(slotOffset, pureFn, thisArg) {\n        // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n        var bindingIndex = getBindingRoot() + slotOffset;\n        var lView = getLView();\n        return isCreationMode() ?\n            updateBinding(lView, bindingIndex, thisArg ? pureFn.call(thisArg) : pureFn()) :\n            getBinding(lView, bindingIndex);\n    }\n    /**\n     * If the value of the provided exp has changed, calls the pure function to return\n     * an updated value. Or if the value has not changed, returns cached value.\n     *\n     * @param slotOffset the offset from binding root to the reserved slot\n     * @param pureFn Function that returns an updated value\n     * @param exp Updated expression value\n     * @param thisArg Optional calling context of pureFn\n     * @returns Updated or cached value\n     *\n     * @codeGenApi\n     */\n    function ɵɵpureFunction1(slotOffset, pureFn, exp, thisArg) {\n        // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n        var lView = getLView();\n        var bindingIndex = getBindingRoot() + slotOffset;\n        return bindingUpdated(lView, bindingIndex, exp) ?\n            updateBinding(lView, bindingIndex + 1, thisArg ? pureFn.call(thisArg, exp) : pureFn(exp)) :\n            getBinding(lView, bindingIndex + 1);\n    }\n    /**\n     * If the value of any provided exp has changed, calls the pure function to return\n     * an updated value. Or if no values have changed, returns cached value.\n     *\n     * @param slotOffset the offset from binding root to the reserved slot\n     * @param pureFn\n     * @param exp1\n     * @param exp2\n     * @param thisArg Optional calling context of pureFn\n     * @returns Updated or cached value\n     *\n     * @codeGenApi\n     */\n    function ɵɵpureFunction2(slotOffset, pureFn, exp1, exp2, thisArg) {\n        // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n        var bindingIndex = getBindingRoot() + slotOffset;\n        var lView = getLView();\n        return bindingUpdated2(lView, bindingIndex, exp1, exp2) ?\n            updateBinding(lView, bindingIndex + 2, thisArg ? pureFn.call(thisArg, exp1, exp2) : pureFn(exp1, exp2)) :\n            getBinding(lView, bindingIndex + 2);\n    }\n    /**\n     * If the value of any provided exp has changed, calls the pure function to return\n     * an updated value. Or if no values have changed, returns cached value.\n     *\n     * @param slotOffset the offset from binding root to the reserved slot\n     * @param pureFn\n     * @param exp1\n     * @param exp2\n     * @param exp3\n     * @param thisArg Optional calling context of pureFn\n     * @returns Updated or cached value\n     *\n     * @codeGenApi\n     */\n    function ɵɵpureFunction3(slotOffset, pureFn, exp1, exp2, exp3, thisArg) {\n        // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n        var bindingIndex = getBindingRoot() + slotOffset;\n        var lView = getLView();\n        return bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) ?\n            updateBinding(lView, bindingIndex + 3, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3) : pureFn(exp1, exp2, exp3)) :\n            getBinding(lView, bindingIndex + 3);\n    }\n    /**\n     * If the value of any provided exp has changed, calls the pure function to return\n     * an updated value. Or if no values have changed, returns cached value.\n     *\n     * @param slotOffset the offset from binding root to the reserved slot\n     * @param pureFn\n     * @param exp1\n     * @param exp2\n     * @param exp3\n     * @param exp4\n     * @param thisArg Optional calling context of pureFn\n     * @returns Updated or cached value\n     *\n     * @codeGenApi\n     */\n    function ɵɵpureFunction4(slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {\n        // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n        var bindingIndex = getBindingRoot() + slotOffset;\n        var lView = getLView();\n        return bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) ?\n            updateBinding(lView, bindingIndex + 4, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4) : pureFn(exp1, exp2, exp3, exp4)) :\n            getBinding(lView, bindingIndex + 4);\n    }\n    /**\n     * If the value of any provided exp has changed, calls the pure function to return\n     * an updated value. Or if no values have changed, returns cached value.\n     *\n     * @param slotOffset the offset from binding root to the reserved slot\n     * @param pureFn\n     * @param exp1\n     * @param exp2\n     * @param exp3\n     * @param exp4\n     * @param exp5\n     * @param thisArg Optional calling context of pureFn\n     * @returns Updated or cached value\n     *\n     * @codeGenApi\n     */\n    function ɵɵpureFunction5(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, thisArg) {\n        // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n        var bindingIndex = getBindingRoot() + slotOffset;\n        var lView = getLView();\n        var different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n        return bindingUpdated(lView, bindingIndex + 4, exp5) || different ?\n            updateBinding(lView, bindingIndex + 5, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5) :\n                pureFn(exp1, exp2, exp3, exp4, exp5)) :\n            getBinding(lView, bindingIndex + 5);\n    }\n    /**\n     * If the value of any provided exp has changed, calls the pure function to return\n     * an updated value. Or if no values have changed, returns cached value.\n     *\n     * @param slotOffset the offset from binding root to the reserved slot\n     * @param pureFn\n     * @param exp1\n     * @param exp2\n     * @param exp3\n     * @param exp4\n     * @param exp5\n     * @param exp6\n     * @param thisArg Optional calling context of pureFn\n     * @returns Updated or cached value\n     *\n     * @codeGenApi\n     */\n    function ɵɵpureFunction6(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, thisArg) {\n        // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n        var bindingIndex = getBindingRoot() + slotOffset;\n        var lView = getLView();\n        var different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n        return bindingUpdated2(lView, bindingIndex + 4, exp5, exp6) || different ?\n            updateBinding(lView, bindingIndex + 6, thisArg ?\n                pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6) :\n                pureFn(exp1, exp2, exp3, exp4, exp5, exp6)) :\n            getBinding(lView, bindingIndex + 6);\n    }\n    /**\n     * If the value of any provided exp has changed, calls the pure function to return\n     * an updated value. Or if no values have changed, returns cached value.\n     *\n     * @param slotOffset the offset from binding root to the reserved slot\n     * @param pureFn\n     * @param exp1\n     * @param exp2\n     * @param exp3\n     * @param exp4\n     * @param exp5\n     * @param exp6\n     * @param exp7\n     * @param thisArg Optional calling context of pureFn\n     * @returns Updated or cached value\n     *\n     * @codeGenApi\n     */\n    function ɵɵpureFunction7(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, thisArg) {\n        // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n        var bindingIndex = getBindingRoot() + slotOffset;\n        var lView = getLView();\n        var different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n        return bindingUpdated3(lView, bindingIndex + 4, exp5, exp6, exp7) || different ?\n            updateBinding(lView, bindingIndex + 7, thisArg ?\n                pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7) :\n                pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7)) :\n            getBinding(lView, bindingIndex + 7);\n    }\n    /**\n     * If the value of any provided exp has changed, calls the pure function to return\n     * an updated value. Or if no values have changed, returns cached value.\n     *\n     * @param slotOffset the offset from binding root to the reserved slot\n     * @param pureFn\n     * @param exp1\n     * @param exp2\n     * @param exp3\n     * @param exp4\n     * @param exp5\n     * @param exp6\n     * @param exp7\n     * @param exp8\n     * @param thisArg Optional calling context of pureFn\n     * @returns Updated or cached value\n     *\n     * @codeGenApi\n     */\n    function ɵɵpureFunction8(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8, thisArg) {\n        // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n        var bindingIndex = getBindingRoot() + slotOffset;\n        var lView = getLView();\n        var different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n        return bindingUpdated4(lView, bindingIndex + 4, exp5, exp6, exp7, exp8) || different ?\n            updateBinding(lView, bindingIndex + 8, thisArg ?\n                pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8) :\n                pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8)) :\n            getBinding(lView, bindingIndex + 8);\n    }\n    /**\n     * pureFunction instruction that can support any number of bindings.\n     *\n     * If the value of any provided exp has changed, calls the pure function to return\n     * an updated value. Or if no values have changed, returns cached value.\n     *\n     * @param slotOffset the offset from binding root to the reserved slot\n     * @param pureFn A pure function that takes binding values and builds an object or array\n     * containing those values.\n     * @param exps An array of binding values\n     * @param thisArg Optional calling context of pureFn\n     * @returns Updated or cached value\n     *\n     * @codeGenApi\n     */\n    function ɵɵpureFunctionV(slotOffset, pureFn, exps, thisArg) {\n        // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n        var bindingIndex = getBindingRoot() + slotOffset;\n        var different = false;\n        var lView = getLView();\n        for (var i = 0; i < exps.length; i++) {\n            bindingUpdated(lView, bindingIndex++, exps[i]) && (different = true);\n        }\n        return different ? updateBinding(lView, bindingIndex, pureFn.apply(thisArg, exps)) :\n            getBinding(lView, bindingIndex);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Create a pipe.\n     *\n     * @param index Pipe index where the pipe will be stored.\n     * @param pipeName The name of the pipe\n     * @returns T the instance of the pipe.\n     *\n     * @codeGenApi\n     */\n    function ɵɵpipe(index, pipeName) {\n        var tView = getLView()[TVIEW];\n        var pipeDef;\n        var adjustedIndex = index + HEADER_OFFSET;\n        if (tView.firstTemplatePass) {\n            pipeDef = getPipeDef$1(pipeName, tView.pipeRegistry);\n            tView.data[adjustedIndex] = pipeDef;\n            if (pipeDef.onDestroy) {\n                (tView.destroyHooks || (tView.destroyHooks = [])).push(adjustedIndex, pipeDef.onDestroy);\n            }\n        }\n        else {\n            pipeDef = tView.data[adjustedIndex];\n        }\n        var pipeInstance = pipeDef.factory();\n        store(index, pipeInstance);\n        return pipeInstance;\n    }\n    /**\n     * Searches the pipe registry for a pipe with the given name. If one is found,\n     * returns the pipe. Otherwise, an error is thrown because the pipe cannot be resolved.\n     *\n     * @param name Name of pipe to resolve\n     * @param registry Full list of available pipes\n     * @returns Matching PipeDef\n     *\n     * @publicApi\n     */\n    function getPipeDef$1(name, registry) {\n        if (registry) {\n            for (var i = registry.length - 1; i >= 0; i--) {\n                var pipeDef = registry[i];\n                if (name === pipeDef.name) {\n                    return pipeDef;\n                }\n            }\n        }\n        throw new Error(\"The pipe '\" + name + \"' could not be found!\");\n    }\n    /**\n     * Invokes a pipe with 1 arguments.\n     *\n     * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n     * the pipe only when an input to the pipe changes.\n     *\n     * @param index Pipe index where the pipe was stored on creation.\n     * @param slotOffset the offset in the reserved slot space\n     * @param v1 1st argument to {@link PipeTransform#transform}.\n     *\n     * @codeGenApi\n     */\n    function ɵɵpipeBind1(index, slotOffset, v1) {\n        var pipeInstance = ɵɵload(index);\n        return unwrapValue$1(isPure(index) ? ɵɵpureFunction1(slotOffset, pipeInstance.transform, v1, pipeInstance) :\n            pipeInstance.transform(v1));\n    }\n    /**\n     * Invokes a pipe with 2 arguments.\n     *\n     * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n     * the pipe only when an input to the pipe changes.\n     *\n     * @param index Pipe index where the pipe was stored on creation.\n     * @param slotOffset the offset in the reserved slot space\n     * @param v1 1st argument to {@link PipeTransform#transform}.\n     * @param v2 2nd argument to {@link PipeTransform#transform}.\n     *\n     * @codeGenApi\n     */\n    function ɵɵpipeBind2(index, slotOffset, v1, v2) {\n        var pipeInstance = ɵɵload(index);\n        return unwrapValue$1(isPure(index) ? ɵɵpureFunction2(slotOffset, pipeInstance.transform, v1, v2, pipeInstance) :\n            pipeInstance.transform(v1, v2));\n    }\n    /**\n     * Invokes a pipe with 3 arguments.\n     *\n     * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n     * the pipe only when an input to the pipe changes.\n     *\n     * @param index Pipe index where the pipe was stored on creation.\n     * @param slotOffset the offset in the reserved slot space\n     * @param v1 1st argument to {@link PipeTransform#transform}.\n     * @param v2 2nd argument to {@link PipeTransform#transform}.\n     * @param v3 4rd argument to {@link PipeTransform#transform}.\n     *\n     * @codeGenApi\n     */\n    function ɵɵpipeBind3(index, slotOffset, v1, v2, v3) {\n        var pipeInstance = ɵɵload(index);\n        return unwrapValue$1(isPure(index) ?\n            ɵɵpureFunction3(slotOffset, pipeInstance.transform, v1, v2, v3, pipeInstance) :\n            pipeInstance.transform(v1, v2, v3));\n    }\n    /**\n     * Invokes a pipe with 4 arguments.\n     *\n     * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n     * the pipe only when an input to the pipe changes.\n     *\n     * @param index Pipe index where the pipe was stored on creation.\n     * @param slotOffset the offset in the reserved slot space\n     * @param v1 1st argument to {@link PipeTransform#transform}.\n     * @param v2 2nd argument to {@link PipeTransform#transform}.\n     * @param v3 3rd argument to {@link PipeTransform#transform}.\n     * @param v4 4th argument to {@link PipeTransform#transform}.\n     *\n     * @codeGenApi\n     */\n    function ɵɵpipeBind4(index, slotOffset, v1, v2, v3, v4) {\n        var pipeInstance = ɵɵload(index);\n        return unwrapValue$1(isPure(index) ?\n            ɵɵpureFunction4(slotOffset, pipeInstance.transform, v1, v2, v3, v4, pipeInstance) :\n            pipeInstance.transform(v1, v2, v3, v4));\n    }\n    /**\n     * Invokes a pipe with variable number of arguments.\n     *\n     * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n     * the pipe only when an input to the pipe changes.\n     *\n     * @param index Pipe index where the pipe was stored on creation.\n     * @param slotOffset the offset in the reserved slot space\n     * @param values Array of arguments to pass to {@link PipeTransform#transform} method.\n     *\n     * @codeGenApi\n     */\n    function ɵɵpipeBindV(index, slotOffset, values) {\n        var pipeInstance = ɵɵload(index);\n        return unwrapValue$1(isPure(index) ? ɵɵpureFunctionV(slotOffset, pipeInstance.transform, values, pipeInstance) :\n            pipeInstance.transform.apply(pipeInstance, values));\n    }\n    function isPure(index) {\n        return getLView()[TVIEW].data[index + HEADER_OFFSET].pure;\n    }\n    /**\n     * Unwrap the output of a pipe transformation.\n     * In order to trick change detection into considering that the new value is always different from\n     * the old one, the old value is overwritten by NO_CHANGE.\n     *\n     * @param newValue the pipe transformation output.\n     */\n    function unwrapValue$1(newValue) {\n        if (WrappedValue.isWrapped(newValue)) {\n            newValue = WrappedValue.unwrap(newValue);\n            var lView = getLView();\n            // The NO_CHANGE value needs to be written at the index where the impacted binding value is\n            // stored\n            var bindingToInvalidateIdx = lView[BINDING_INDEX];\n            lView[bindingToInvalidateIdx] = NO_CHANGE;\n        }\n        return newValue;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Use in directives and components to emit custom events synchronously\n     * or asynchronously, and register handlers for those events by subscribing\n     * to an instance.\n     *\n     * @usageNotes\n     *\n     * In the following example, a component defines two output properties\n     * that create event emitters. When the title is clicked, the emitter\n     * emits an open or close event to toggle the current visibility state.\n     *\n     * ```html\n     * @Component({\n     *   selector: 'zippy',\n     *   template: `\n     *   <div class=\"zippy\">\n     *     <div (click)=\"toggle()\">Toggle</div>\n     *     <div [hidden]=\"!visible\">\n     *       <ng-content></ng-content>\n     *     </div>\n     *  </div>`})\n     * export class Zippy {\n     *   visible: boolean = true;\n     *   @Output() open: EventEmitter<any> = new EventEmitter();\n     *   @Output() close: EventEmitter<any> = new EventEmitter();\n     *\n     *   toggle() {\n     *     this.visible = !this.visible;\n     *     if (this.visible) {\n     *       this.open.emit(null);\n     *     } else {\n     *       this.close.emit(null);\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * Access the event object with the `$event` argument passed to the output event\n     * handler:\n     *\n     * ```html\n     * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n     * ```\n     *\n     * @publicApi\n     */\n    var EventEmitter = /** @class */ (function (_super) {\n        __extends(EventEmitter, _super);\n        /**\n         * Creates an instance of this class that can\n         * deliver events synchronously or asynchronously.\n         *\n         * @param isAsync When true, deliver events asynchronously.\n         *\n         */\n        function EventEmitter(isAsync) {\n            if (isAsync === void 0) { isAsync = false; }\n            var _this = _super.call(this) || this;\n            _this.__isAsync = isAsync;\n            return _this;\n        }\n        /**\n         * Emits an event containing a given value.\n         * @param value The value to emit.\n         */\n        EventEmitter.prototype.emit = function (value) { _super.prototype.next.call(this, value); };\n        /**\n         * Registers handlers for events emitted by this instance.\n         * @param generatorOrNext When supplied, a custom handler for emitted events.\n         * @param error When supplied, a custom handler for an error notification\n         * from this emitter.\n         * @param complete When supplied, a custom handler for a completion\n         * notification from this emitter.\n         */\n        EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {\n            var schedulerFn;\n            var errorFn = function (err) { return null; };\n            var completeFn = function () { return null; };\n            if (generatorOrNext && typeof generatorOrNext === 'object') {\n                schedulerFn = this.__isAsync ? function (value) {\n                    setTimeout(function () { return generatorOrNext.next(value); });\n                } : function (value) { generatorOrNext.next(value); };\n                if (generatorOrNext.error) {\n                    errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :\n                        function (err) { generatorOrNext.error(err); };\n                }\n                if (generatorOrNext.complete) {\n                    completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :\n                        function () { generatorOrNext.complete(); };\n                }\n            }\n            else {\n                schedulerFn = this.__isAsync ? function (value) { setTimeout(function () { return generatorOrNext(value); }); } :\n                    function (value) { generatorOrNext(value); };\n                if (error) {\n                    errorFn =\n                        this.__isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };\n                }\n                if (complete) {\n                    completeFn =\n                        this.__isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };\n                }\n            }\n            var sink = _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);\n            if (generatorOrNext instanceof rxjs.Subscription) {\n                generatorOrNext.add(sink);\n            }\n            return sink;\n        };\n        return EventEmitter;\n    }(rxjs.Subject));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function symbolIterator() {\n        return this._results[getSymbolIterator()]();\n    }\n    /**\n     * An unmodifiable list of items that Angular keeps up to date when the state\n     * of the application changes.\n     *\n     * The type of object that {@link ViewChildren}, {@link ContentChildren}, and {@link QueryList}\n     * provide.\n     *\n     * Implements an iterable interface, therefore it can be used in both ES6\n     * javascript `for (var i of items)` loops as well as in Angular templates with\n     * `*ngFor=\"let i of myList\"`.\n     *\n     * Changes can be observed by subscribing to the changes `Observable`.\n     *\n     * NOTE: In the future this class will implement an `Observable` interface.\n     *\n     * @usageNotes\n     * ### Example\n     * ```typescript\n     * @Component({...})\n     * class Container {\n     *   @ViewChildren(Item) items:QueryList<Item>;\n     * }\n     * ```\n     *\n     * @publicApi\n     */\n    var QueryList = /** @class */ (function () {\n        function QueryList() {\n            this.dirty = true;\n            this._results = [];\n            this.changes = new EventEmitter();\n            this.length = 0;\n            // This function should be declared on the prototype, but doing so there will cause the class\n            // declaration to have side-effects and become not tree-shakable. For this reason we do it in\n            // the constructor.\n            // [getSymbolIterator()](): Iterator<T> { ... }\n            var symbol = getSymbolIterator();\n            var proto = QueryList.prototype;\n            if (!proto[symbol])\n                proto[symbol] = symbolIterator;\n        }\n        /**\n         * See\n         * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n         */\n        QueryList.prototype.map = function (fn) { return this._results.map(fn); };\n        /**\n         * See\n         * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n         */\n        QueryList.prototype.filter = function (fn) {\n            return this._results.filter(fn);\n        };\n        /**\n         * See\n         * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n         */\n        QueryList.prototype.find = function (fn) {\n            return this._results.find(fn);\n        };\n        /**\n         * See\n         * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n         */\n        QueryList.prototype.reduce = function (fn, init) {\n            return this._results.reduce(fn, init);\n        };\n        /**\n         * See\n         * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n         */\n        QueryList.prototype.forEach = function (fn) { this._results.forEach(fn); };\n        /**\n         * See\n         * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n         */\n        QueryList.prototype.some = function (fn) {\n            return this._results.some(fn);\n        };\n        /**\n         * Returns a copy of the internal results list as an Array.\n         */\n        QueryList.prototype.toArray = function () { return this._results.slice(); };\n        QueryList.prototype.toString = function () { return this._results.toString(); };\n        /**\n         * Updates the stored data of the query list, and resets the `dirty` flag to `false`, so that\n         * on change detection, it will not notify of changes to the queries, unless a new change\n         * occurs.\n         *\n         * @param resultsTree The results tree to store\n         */\n        QueryList.prototype.reset = function (resultsTree) {\n            this._results = flatten(resultsTree);\n            this.dirty = false;\n            this.length = this._results.length;\n            this.last = this._results[this.length - 1];\n            this.first = this._results[0];\n        };\n        /**\n         * Triggers a change event by emitting on the `changes` {@link EventEmitter}.\n         */\n        QueryList.prototype.notifyOnChanges = function () { this.changes.emit(this); };\n        /** internal */\n        QueryList.prototype.setDirty = function () { this.dirty = true; };\n        /** internal */\n        QueryList.prototype.destroy = function () {\n            this.changes.complete();\n            this.changes.unsubscribe();\n        };\n        return QueryList;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * An object representing a query, which is a combination of:\n     * - query predicate to determines if a given element/directive should be included in the query\n     * - values collected based on a predicate\n     * - `QueryList` to which collected values should be reported\n     */\n    var LQuery = /** @class */ (function () {\n        function LQuery(\n        /**\n         * Next query. Used when queries are stored as a linked list in `LQueries`.\n         */\n        next, \n        /**\n         * Destination to which the value should be added.\n         */\n        list, \n        /**\n         * A predicate which determines if a given element/directive should be included in the query\n         * results.\n         */\n        predicate, \n        /**\n         * Values which have been located.\n         * This is what builds up the `QueryList._valuesTree`.\n         */\n        values, \n        /**\n         * A pointer to an array that stores collected values from views. This is necessary so we\n         * know a container into which to insert nodes collected from views.\n         */\n        containerValues) {\n            this.next = next;\n            this.list = list;\n            this.predicate = predicate;\n            this.values = values;\n            this.containerValues = containerValues;\n        }\n        return LQuery;\n    }());\n    var LQueries_ = /** @class */ (function () {\n        function LQueries_(parent, shallow, deep, nodeIndex) {\n            if (nodeIndex === void 0) { nodeIndex = -1; }\n            this.parent = parent;\n            this.shallow = shallow;\n            this.deep = deep;\n            this.nodeIndex = nodeIndex;\n        }\n        LQueries_.prototype.track = function (queryList, predicate, descend, read) {\n            if (descend) {\n                this.deep = createLQuery(this.deep, queryList, predicate, read != null ? read : null);\n            }\n            else {\n                this.shallow = createLQuery(this.shallow, queryList, predicate, read != null ? read : null);\n            }\n        };\n        LQueries_.prototype.clone = function (tNode) {\n            return this.shallow !== null || isContentQueryHost(tNode) ?\n                new LQueries_(this, null, this.deep, tNode.index) :\n                this;\n        };\n        LQueries_.prototype.container = function () {\n            var shallowResults = copyQueriesToContainer(this.shallow);\n            var deepResults = copyQueriesToContainer(this.deep);\n            return shallowResults || deepResults ? new LQueries_(this, shallowResults, deepResults) : null;\n        };\n        LQueries_.prototype.createView = function () {\n            var shallowResults = copyQueriesToView(this.shallow);\n            var deepResults = copyQueriesToView(this.deep);\n            return shallowResults || deepResults ? new LQueries_(this, shallowResults, deepResults) : null;\n        };\n        LQueries_.prototype.insertView = function (index) {\n            insertView$1(index, this.shallow);\n            insertView$1(index, this.deep);\n        };\n        LQueries_.prototype.addNode = function (tNode) {\n            add(this.deep, tNode, false);\n            add(this.shallow, tNode, false);\n        };\n        LQueries_.prototype.insertNodeBeforeViews = function (tNode) {\n            add(this.deep, tNode, true);\n            add(this.shallow, tNode, true);\n        };\n        LQueries_.prototype.removeView = function () {\n            removeView$1(this.shallow);\n            removeView$1(this.deep);\n        };\n        return LQueries_;\n    }());\n    function copyQueriesToContainer(query) {\n        var result = null;\n        while (query) {\n            var containerValues = []; // prepare room for views\n            query.values.push(containerValues);\n            result = new LQuery(result, query.list, query.predicate, containerValues, null);\n            query = query.next;\n        }\n        return result;\n    }\n    function copyQueriesToView(query) {\n        var result = null;\n        while (query) {\n            result = new LQuery(result, query.list, query.predicate, [], query.values);\n            query = query.next;\n        }\n        return result;\n    }\n    function insertView$1(index, query) {\n        while (query) {\n            ngDevMode && assertViewQueryhasPointerToDeclarationContainer(query);\n            query.containerValues.splice(index, 0, query.values);\n            // mark a query as dirty only when inserted view had matching modes\n            if (query.values.length) {\n                query.list.setDirty();\n            }\n            query = query.next;\n        }\n    }\n    function removeView$1(query) {\n        while (query) {\n            ngDevMode && assertViewQueryhasPointerToDeclarationContainer(query);\n            var containerValues = query.containerValues;\n            var viewValuesIdx = containerValues.indexOf(query.values);\n            var removed = containerValues.splice(viewValuesIdx, 1);\n            // mark a query as dirty only when removed view had matching modes\n            ngDevMode && assertEqual(removed.length, 1, 'removed.length');\n            if (removed[0].length) {\n                query.list.setDirty();\n            }\n            query = query.next;\n        }\n    }\n    function assertViewQueryhasPointerToDeclarationContainer(query) {\n        assertDefined(query.containerValues, 'View queries need to have a pointer to container values.');\n    }\n    /**\n     * Iterates over local names for a given node and returns directive index\n     * (or -1 if a local name points to an element).\n     *\n     * @param tNode static data of a node to check\n     * @param selector selector to match\n     * @returns directive index, -1 or null if a selector didn't match any of the local names\n     */\n    function getIdxOfMatchingSelector(tNode, selector) {\n        var localNames = tNode.localNames;\n        if (localNames) {\n            for (var i = 0; i < localNames.length; i += 2) {\n                if (localNames[i] === selector) {\n                    return localNames[i + 1];\n                }\n            }\n        }\n        return null;\n    }\n    // TODO: \"read\" should be an AbstractType (FW-486)\n    function queryByReadToken(read, tNode, currentView) {\n        var factoryFn = read[NG_ELEMENT_ID];\n        if (typeof factoryFn === 'function') {\n            return factoryFn();\n        }\n        else {\n            var tView = currentView[TVIEW];\n            var matchingIdx = locateDirectiveOrProvider(tNode, tView, read, false, false);\n            if (matchingIdx !== null) {\n                return getNodeInjectable(tView.data, currentView, matchingIdx, tNode);\n            }\n        }\n        return null;\n    }\n    function queryByTNodeType(tNode, currentView) {\n        if (tNode.type === 3 /* Element */ || tNode.type === 4 /* ElementContainer */) {\n            return createElementRef(ElementRef, tNode, currentView);\n        }\n        if (tNode.type === 0 /* Container */) {\n            return createTemplateRef(TemplateRef, ElementRef, tNode, currentView);\n        }\n        return null;\n    }\n    function queryByTemplateRef(templateRefToken, tNode, currentView, read) {\n        var templateRefResult = templateRefToken[NG_ELEMENT_ID]();\n        if (read) {\n            return templateRefResult ? queryByReadToken(read, tNode, currentView) : null;\n        }\n        return templateRefResult;\n    }\n    function queryRead(tNode, currentView, read, matchingIdx) {\n        if (read) {\n            return queryByReadToken(read, tNode, currentView);\n        }\n        if (matchingIdx > -1) {\n            return getNodeInjectable(currentView[TVIEW].data, currentView, matchingIdx, tNode);\n        }\n        // if read token and / or strategy is not specified,\n        // detect it using appropriate tNode type\n        return queryByTNodeType(tNode, currentView);\n    }\n    /**\n     * Add query matches for a given node.\n     *\n     * @param query The first query in the linked list\n     * @param tNode The TNode to match against queries\n     * @param insertBeforeContainer Whether or not we should add matches before the last\n     * container array. This mode is necessary if the query container had to be created\n     * out of order (e.g. a view was created in a constructor)\n     */\n    function add(query, tNode, insertBeforeContainer) {\n        var lView = getLView();\n        var tView = lView[TVIEW];\n        while (query) {\n            var predicate = query.predicate;\n            var type = predicate.type;\n            if (type) {\n                var result = null;\n                if (type === TemplateRef) {\n                    result = queryByTemplateRef(type, tNode, lView, predicate.read);\n                }\n                else {\n                    var matchingIdx = locateDirectiveOrProvider(tNode, tView, type, false, false);\n                    if (matchingIdx !== null) {\n                        result = queryRead(tNode, lView, predicate.read, matchingIdx);\n                    }\n                }\n                if (result !== null) {\n                    addMatch(query, result, insertBeforeContainer);\n                }\n            }\n            else {\n                var selector = predicate.selector;\n                for (var i = 0; i < selector.length; i++) {\n                    var matchingIdx = getIdxOfMatchingSelector(tNode, selector[i]);\n                    if (matchingIdx !== null) {\n                        var result = queryRead(tNode, lView, predicate.read, matchingIdx);\n                        if (result !== null) {\n                            addMatch(query, result, insertBeforeContainer);\n                        }\n                    }\n                }\n            }\n            query = query.next;\n        }\n    }\n    function addMatch(query, matchingValue, insertBeforeViewMatches) {\n        // Views created in constructors may have their container values created too early. In this case,\n        // ensure template node results are unshifted before container results. Otherwise, results inside\n        // embedded views will appear before results on parent template nodes when flattened.\n        insertBeforeViewMatches ? query.values.unshift(matchingValue) : query.values.push(matchingValue);\n        query.list.setDirty();\n    }\n    function createPredicate(predicate, read) {\n        var isArray = Array.isArray(predicate);\n        return {\n            type: isArray ? null : predicate,\n            selector: isArray ? predicate : null,\n            read: read\n        };\n    }\n    function createLQuery(previous, queryList, predicate, read) {\n        return new LQuery(previous, queryList, createPredicate(predicate, read), queryList._valuesTree, null);\n    }\n    /**\n     * Creates a QueryList and stores it in LView's collection of active queries (LQueries).\n     *\n     * @param predicate The type for which the query will search\n     * @param descend Whether or not to descend into children\n     * @param read What to save in the query\n     * @returns QueryList<T>\n     */\n    function createQueryListInLView(\n    // TODO: \"read\" should be an AbstractType (FW-486)\n    lView, predicate, descend, read, isStatic, nodeIndex) {\n        ngDevMode && assertPreviousIsParent(getIsParent());\n        var queryList = new QueryList();\n        var queries = lView[QUERIES] || (lView[QUERIES] = new LQueries_(null, null, null, nodeIndex));\n        queryList._valuesTree = [];\n        queryList._static = isStatic;\n        queries.track(queryList, predicate, descend, read);\n        storeCleanupWithContext(lView, queryList, queryList.destroy);\n        return queryList;\n    }\n    /**\n     * Refreshes a query by combining matches from all active views and removing matches from deleted\n     * views.\n     *\n     * @returns `true` if a query got dirty during change detection or if this is a static query\n     * resolving in creation mode, `false` otherwise.\n     *\n     * @codeGenApi\n     */\n    function ɵɵqueryRefresh(queryList) {\n        var queryListImpl = queryList;\n        var creationMode = isCreationMode();\n        // if creation mode and static or update mode and not static\n        if (queryList.dirty && creationMode === queryListImpl._static) {\n            queryList.reset(queryListImpl._valuesTree || []);\n            queryList.notifyOnChanges();\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Creates new QueryList for a static view query.\n     *\n     * @param predicate The type for which the query will search\n     * @param descend Whether or not to descend into children\n     * @param read What to save in the query\n     *\n     * @codeGenApi\n     */\n    function ɵɵstaticViewQuery(\n    // TODO(FW-486): \"read\" should be an AbstractType\n    predicate, descend, read) {\n        var lView = getLView();\n        var tView = lView[TVIEW];\n        viewQueryInternal(lView, tView, predicate, descend, read, true);\n        tView.staticViewQueries = true;\n    }\n    /**\n     * Creates new QueryList, stores the reference in LView and returns QueryList.\n     *\n     * @param predicate The type for which the query will search\n     * @param descend Whether or not to descend into children\n     * @param read What to save in the query\n     * @returns QueryList<T>\n     *\n     * @codeGenApi\n     */\n    function ɵɵviewQuery(\n    // TODO(FW-486): \"read\" should be an AbstractType\n    predicate, descend, read) {\n        var lView = getLView();\n        var tView = lView[TVIEW];\n        return viewQueryInternal(lView, tView, predicate, descend, read, false);\n    }\n    function viewQueryInternal(lView, tView, predicate, descend, read, isStatic) {\n        if (tView.firstTemplatePass) {\n            tView.expandoStartIndex++;\n        }\n        var index = getCurrentQueryIndex();\n        var queryList = createQueryListInLView(lView, predicate, descend, read, isStatic, -1);\n        store(index - HEADER_OFFSET, queryList);\n        setCurrentQueryIndex(index + 1);\n        return queryList;\n    }\n    /**\n     * Loads current View Query and moves the pointer/index to the next View Query in LView.\n     *\n     * @codeGenApi\n     */\n    function ɵɵloadViewQuery() {\n        var index = getCurrentQueryIndex();\n        setCurrentQueryIndex(index + 1);\n        return loadInternal(getLView(), index - HEADER_OFFSET);\n    }\n    /**\n     * Registers a QueryList, associated with a content query, for later refresh (part of a view\n     * refresh).\n     *\n     * @param directiveIndex Current directive index\n     * @param predicate The type for which the query will search\n     * @param descend Whether or not to descend into children\n     * @param read What to save in the query\n     * @returns QueryList<T>\n     *\n     * @codeGenApi\n     */\n    function ɵɵcontentQuery(directiveIndex, predicate, descend, \n    // TODO(FW-486): \"read\" should be an AbstractType\n    read) {\n        var lView = getLView();\n        var tView = lView[TVIEW];\n        var tNode = getPreviousOrParentTNode();\n        return contentQueryInternal(lView, tView, directiveIndex, predicate, descend, read, false, tNode.index);\n    }\n    function contentQueryInternal(lView, tView, directiveIndex, predicate, descend, \n    // TODO(FW-486): \"read\" should be an AbstractType\n    read, isStatic, nodeIndex) {\n        var contentQuery = createQueryListInLView(lView, predicate, descend, read, isStatic, nodeIndex);\n        (lView[CONTENT_QUERIES] || (lView[CONTENT_QUERIES] = [])).push(contentQuery);\n        if (tView.firstTemplatePass) {\n            var tViewContentQueries = tView.contentQueries || (tView.contentQueries = []);\n            var lastSavedDirectiveIndex = tView.contentQueries.length ? tView.contentQueries[tView.contentQueries.length - 1] : -1;\n            if (directiveIndex !== lastSavedDirectiveIndex) {\n                tViewContentQueries.push(directiveIndex);\n            }\n        }\n        return contentQuery;\n    }\n    /**\n     * Registers a QueryList, associated with a static content query, for later refresh\n     * (part of a view refresh).\n     *\n     * @param directiveIndex Current directive index\n     * @param predicate The type for which the query will search\n     * @param descend Whether or not to descend into children\n     * @param read What to save in the query\n     * @returns QueryList<T>\n     *\n     * @codeGenApi\n     */\n    function ɵɵstaticContentQuery(directiveIndex, predicate, descend, \n    // TODO(FW-486): \"read\" should be an AbstractType\n    read) {\n        var lView = getLView();\n        var tView = lView[TVIEW];\n        var tNode = getPreviousOrParentTNode();\n        contentQueryInternal(lView, tView, directiveIndex, predicate, descend, read, true, tNode.index);\n        tView.staticContentQueries = true;\n    }\n    /**\n     *\n     * @codeGenApi\n     */\n    function ɵɵloadContentQuery() {\n        var lView = getLView();\n        ngDevMode &&\n            assertDefined(lView[CONTENT_QUERIES], 'Content QueryList array should be defined if reading a query.');\n        var index = getCurrentQueryIndex();\n        ngDevMode && assertDataInRange(lView[CONTENT_QUERIES], index);\n        setCurrentQueryIndex(index + 1);\n        return lView[CONTENT_QUERIES][index];\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Retrieves `TemplateRef` instance from `Injector` when a local reference is placed on the\n     * `<ng-template>` element.\n     *\n     * @codeGenApi\n     */\n    function ɵɵtemplateRefExtractor(tNode, currentView) {\n        return createTemplateRef(TemplateRef, ElementRef, tNode, currentView);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A mapping of the @angular/core API surface used in generated expressions to the actual symbols.\n     *\n     * This should be kept up to date with the public exports of @angular/core.\n     */\n    var angularCoreEnv = (function () { return ({\n        'ɵɵattribute': ɵɵattribute,\n        'ɵɵattributeInterpolate1': ɵɵattributeInterpolate1,\n        'ɵɵattributeInterpolate2': ɵɵattributeInterpolate2,\n        'ɵɵattributeInterpolate3': ɵɵattributeInterpolate3,\n        'ɵɵattributeInterpolate4': ɵɵattributeInterpolate4,\n        'ɵɵattributeInterpolate5': ɵɵattributeInterpolate5,\n        'ɵɵattributeInterpolate6': ɵɵattributeInterpolate6,\n        'ɵɵattributeInterpolate7': ɵɵattributeInterpolate7,\n        'ɵɵattributeInterpolate8': ɵɵattributeInterpolate8,\n        'ɵɵattributeInterpolateV': ɵɵattributeInterpolateV,\n        'ɵɵdefineBase': ɵɵdefineBase,\n        'ɵɵdefineComponent': ɵɵdefineComponent,\n        'ɵɵdefineDirective': ɵɵdefineDirective,\n        'ɵɵdefineInjectable': ɵɵdefineInjectable,\n        'ɵɵdefineInjector': ɵɵdefineInjector,\n        'ɵɵdefineNgModule': ɵɵdefineNgModule,\n        'ɵɵdefinePipe': ɵɵdefinePipe,\n        'ɵɵdirectiveInject': ɵɵdirectiveInject,\n        'ɵɵgetFactoryOf': ɵɵgetFactoryOf,\n        'ɵɵgetInheritedFactory': ɵɵgetInheritedFactory,\n        'ɵɵinject': ɵɵinject,\n        'ɵɵinjectAttribute': ɵɵinjectAttribute,\n        'ɵɵtemplateRefExtractor': ɵɵtemplateRefExtractor,\n        'ɵɵNgOnChangesFeature': ɵɵNgOnChangesFeature,\n        'ɵɵProvidersFeature': ɵɵProvidersFeature,\n        'ɵɵInheritDefinitionFeature': ɵɵInheritDefinitionFeature,\n        'ɵɵcontainer': ɵɵcontainer,\n        'ɵɵnextContext': ɵɵnextContext,\n        'ɵɵcontainerRefreshStart': ɵɵcontainerRefreshStart,\n        'ɵɵcontainerRefreshEnd': ɵɵcontainerRefreshEnd,\n        'ɵɵnamespaceHTML': ɵɵnamespaceHTML,\n        'ɵɵnamespaceMathML': ɵɵnamespaceMathML,\n        'ɵɵnamespaceSVG': ɵɵnamespaceSVG,\n        'ɵɵenableBindings': ɵɵenableBindings,\n        'ɵɵdisableBindings': ɵɵdisableBindings,\n        'ɵɵallocHostVars': ɵɵallocHostVars,\n        'ɵɵelementStart': ɵɵelementStart,\n        'ɵɵelementEnd': ɵɵelementEnd,\n        'ɵɵelement': ɵɵelement,\n        'ɵɵelementContainerStart': ɵɵelementContainerStart,\n        'ɵɵelementContainerEnd': ɵɵelementContainerEnd,\n        'ɵɵelementContainer': ɵɵelementContainer,\n        'ɵɵpureFunction0': ɵɵpureFunction0,\n        'ɵɵpureFunction1': ɵɵpureFunction1,\n        'ɵɵpureFunction2': ɵɵpureFunction2,\n        'ɵɵpureFunction3': ɵɵpureFunction3,\n        'ɵɵpureFunction4': ɵɵpureFunction4,\n        'ɵɵpureFunction5': ɵɵpureFunction5,\n        'ɵɵpureFunction6': ɵɵpureFunction6,\n        'ɵɵpureFunction7': ɵɵpureFunction7,\n        'ɵɵpureFunction8': ɵɵpureFunction8,\n        'ɵɵpureFunctionV': ɵɵpureFunctionV,\n        'ɵɵgetCurrentView': ɵɵgetCurrentView,\n        'ɵɵrestoreView': ɵɵrestoreView,\n        'ɵɵlistener': ɵɵlistener,\n        'ɵɵload': ɵɵload,\n        'ɵɵprojection': ɵɵprojection,\n        'ɵɵupdateSyntheticHostBinding': ɵɵupdateSyntheticHostBinding,\n        'ɵɵcomponentHostSyntheticListener': ɵɵcomponentHostSyntheticListener,\n        'ɵɵpipeBind1': ɵɵpipeBind1,\n        'ɵɵpipeBind2': ɵɵpipeBind2,\n        'ɵɵpipeBind3': ɵɵpipeBind3,\n        'ɵɵpipeBind4': ɵɵpipeBind4,\n        'ɵɵpipeBindV': ɵɵpipeBindV,\n        'ɵɵprojectionDef': ɵɵprojectionDef,\n        'ɵɵhostProperty': ɵɵhostProperty,\n        'ɵɵproperty': ɵɵproperty,\n        'ɵɵpropertyInterpolate': ɵɵpropertyInterpolate,\n        'ɵɵpropertyInterpolate1': ɵɵpropertyInterpolate1,\n        'ɵɵpropertyInterpolate2': ɵɵpropertyInterpolate2,\n        'ɵɵpropertyInterpolate3': ɵɵpropertyInterpolate3,\n        'ɵɵpropertyInterpolate4': ɵɵpropertyInterpolate4,\n        'ɵɵpropertyInterpolate5': ɵɵpropertyInterpolate5,\n        'ɵɵpropertyInterpolate6': ɵɵpropertyInterpolate6,\n        'ɵɵpropertyInterpolate7': ɵɵpropertyInterpolate7,\n        'ɵɵpropertyInterpolate8': ɵɵpropertyInterpolate8,\n        'ɵɵpropertyInterpolateV': ɵɵpropertyInterpolateV,\n        'ɵɵpipe': ɵɵpipe,\n        'ɵɵqueryRefresh': ɵɵqueryRefresh,\n        'ɵɵviewQuery': ɵɵviewQuery,\n        'ɵɵstaticViewQuery': ɵɵstaticViewQuery,\n        'ɵɵstaticContentQuery': ɵɵstaticContentQuery,\n        'ɵɵloadViewQuery': ɵɵloadViewQuery,\n        'ɵɵcontentQuery': ɵɵcontentQuery,\n        'ɵɵloadContentQuery': ɵɵloadContentQuery,\n        'ɵɵreference': ɵɵreference,\n        'ɵɵelementHostAttrs': ɵɵelementHostAttrs,\n        'ɵɵclassMap': ɵɵclassMap,\n        'ɵɵclassMapInterpolate1': ɵɵclassMapInterpolate1,\n        'ɵɵclassMapInterpolate2': ɵɵclassMapInterpolate2,\n        'ɵɵclassMapInterpolate3': ɵɵclassMapInterpolate3,\n        'ɵɵclassMapInterpolate4': ɵɵclassMapInterpolate4,\n        'ɵɵclassMapInterpolate5': ɵɵclassMapInterpolate5,\n        'ɵɵclassMapInterpolate6': ɵɵclassMapInterpolate6,\n        'ɵɵclassMapInterpolate7': ɵɵclassMapInterpolate7,\n        'ɵɵclassMapInterpolate8': ɵɵclassMapInterpolate8,\n        'ɵɵclassMapInterpolateV': ɵɵclassMapInterpolateV,\n        'ɵɵstyling': ɵɵstyling,\n        'ɵɵstyleMap': ɵɵstyleMap,\n        'ɵɵstyleProp': ɵɵstyleProp,\n        'ɵɵstylePropInterpolate1': ɵɵstylePropInterpolate1,\n        'ɵɵstylePropInterpolate2': ɵɵstylePropInterpolate2,\n        'ɵɵstylePropInterpolate3': ɵɵstylePropInterpolate3,\n        'ɵɵstylePropInterpolate4': ɵɵstylePropInterpolate4,\n        'ɵɵstylePropInterpolate5': ɵɵstylePropInterpolate5,\n        'ɵɵstylePropInterpolate6': ɵɵstylePropInterpolate6,\n        'ɵɵstylePropInterpolate7': ɵɵstylePropInterpolate7,\n        'ɵɵstylePropInterpolate8': ɵɵstylePropInterpolate8,\n        'ɵɵstylePropInterpolateV': ɵɵstylePropInterpolateV,\n        'ɵɵstyleSanitizer': styleSanitizer,\n        'ɵɵstylingApply': ɵɵstylingApply,\n        'ɵɵclassProp': ɵɵclassProp,\n        'ɵɵselect': ɵɵselect,\n        'ɵɵtemplate': ɵɵtemplate,\n        'ɵɵtext': ɵɵtext,\n        'ɵɵtextBinding': ɵɵtextBinding,\n        'ɵɵtextInterpolate': ɵɵtextInterpolate,\n        'ɵɵtextInterpolate1': ɵɵtextInterpolate1,\n        'ɵɵtextInterpolate2': ɵɵtextInterpolate2,\n        'ɵɵtextInterpolate3': ɵɵtextInterpolate3,\n        'ɵɵtextInterpolate4': ɵɵtextInterpolate4,\n        'ɵɵtextInterpolate5': ɵɵtextInterpolate5,\n        'ɵɵtextInterpolate6': ɵɵtextInterpolate6,\n        'ɵɵtextInterpolate7': ɵɵtextInterpolate7,\n        'ɵɵtextInterpolate8': ɵɵtextInterpolate8,\n        'ɵɵtextInterpolateV': ɵɵtextInterpolateV,\n        'ɵɵembeddedViewStart': ɵɵembeddedViewStart,\n        'ɵɵembeddedViewEnd': ɵɵembeddedViewEnd,\n        'ɵɵi18n': ɵɵi18n,\n        'ɵɵi18nAttributes': ɵɵi18nAttributes,\n        'ɵɵi18nExp': ɵɵi18nExp,\n        'ɵɵi18nStart': ɵɵi18nStart,\n        'ɵɵi18nEnd': ɵɵi18nEnd,\n        'ɵɵi18nApply': ɵɵi18nApply,\n        'ɵɵi18nPostprocess': ɵɵi18nPostprocess,\n        'ɵɵi18nLocalize': ɵɵi18nLocalize,\n        'ɵɵresolveWindow': ɵɵresolveWindow,\n        'ɵɵresolveDocument': ɵɵresolveDocument,\n        'ɵɵresolveBody': ɵɵresolveBody,\n        'ɵɵsetComponentScope': ɵɵsetComponentScope,\n        'ɵɵsetNgModuleScope': ɵɵsetNgModuleScope,\n        'ɵɵsanitizeHtml': ɵɵsanitizeHtml,\n        'ɵɵsanitizeStyle': ɵɵsanitizeStyle,\n        'ɵɵdefaultStyleSanitizer': ɵɵdefaultStyleSanitizer,\n        'ɵɵsanitizeResourceUrl': ɵɵsanitizeResourceUrl,\n        'ɵɵsanitizeScript': ɵɵsanitizeScript,\n        'ɵɵsanitizeUrl': ɵɵsanitizeUrl,\n        'ɵɵsanitizeUrlOrResourceUrl': ɵɵsanitizeUrlOrResourceUrl,\n    }); })();\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var EMPTY_ARRAY$3 = [];\n    var moduleQueue = [];\n    /**\n     * Enqueues moduleDef to be checked later to see if scope can be set on its\n     * component declarations.\n     */\n    function enqueueModuleForDelayedScoping(moduleType, ngModule) {\n        moduleQueue.push({ moduleType: moduleType, ngModule: ngModule });\n    }\n    var flushingModuleQueue = false;\n    /**\n     * Loops over queued module definitions, if a given module definition has all of its\n     * declarations resolved, it dequeues that module definition and sets the scope on\n     * its declarations.\n     */\n    function flushModuleScopingQueueAsMuchAsPossible() {\n        if (!flushingModuleQueue) {\n            flushingModuleQueue = true;\n            try {\n                for (var i = moduleQueue.length - 1; i >= 0; i--) {\n                    var _a = moduleQueue[i], moduleType = _a.moduleType, ngModule = _a.ngModule;\n                    if (ngModule.declarations && ngModule.declarations.every(isResolvedDeclaration)) {\n                        // dequeue\n                        moduleQueue.splice(i, 1);\n                        setScopeOnDeclaredComponents(moduleType, ngModule);\n                    }\n                }\n            }\n            finally {\n                flushingModuleQueue = false;\n            }\n        }\n    }\n    /**\n     * Returns truthy if a declaration has resolved. If the declaration happens to be\n     * an array of declarations, it will recurse to check each declaration in that array\n     * (which may also be arrays).\n     */\n    function isResolvedDeclaration(declaration) {\n        if (Array.isArray(declaration)) {\n            return declaration.every(isResolvedDeclaration);\n        }\n        return !!resolveForwardRef(declaration);\n    }\n    /**\n     * Compiles a module in JIT mode.\n     *\n     * This function automatically gets called when a class has a `@NgModule` decorator.\n     */\n    function compileNgModule(moduleType, ngModule) {\n        if (ngModule === void 0) { ngModule = {}; }\n        compileNgModuleDefs(moduleType, ngModule);\n        // Because we don't know if all declarations have resolved yet at the moment the\n        // NgModule decorator is executing, we're enqueueing the setting of module scope\n        // on its declarations to be run at a later time when all declarations for the module,\n        // including forward refs, have resolved.\n        enqueueModuleForDelayedScoping(moduleType, ngModule);\n    }\n    /**\n     * Compiles and adds the `ngModuleDef` and `ngInjectorDef` properties to the module class.\n     *\n     * It's possible to compile a module via this API which will allow duplicate declarations in its\n     * root.\n     */\n    function compileNgModuleDefs(moduleType, ngModule, allowDuplicateDeclarationsInRoot) {\n        if (allowDuplicateDeclarationsInRoot === void 0) { allowDuplicateDeclarationsInRoot = false; }\n        ngDevMode && assertDefined(moduleType, 'Required value moduleType');\n        ngDevMode && assertDefined(ngModule, 'Required value ngModule');\n        var declarations = flatten(ngModule.declarations || EMPTY_ARRAY$3);\n        var ngModuleDef = null;\n        Object.defineProperty(moduleType, NG_MODULE_DEF, {\n            configurable: true,\n            get: function () {\n                if (ngModuleDef === null) {\n                    if (ngDevMode && ngModule.imports && ngModule.imports.indexOf(moduleType) > -1) {\n                        // We need to assert this immediately, because allowing it to continue will cause it to\n                        // go into an infinite loop before we've reached the point where we throw all the errors.\n                        throw new Error(\"'\" + stringifyForError(moduleType) + \"' module can't import itself\");\n                    }\n                    ngModuleDef = getCompilerFacade().compileNgModule(angularCoreEnv, \"ng:///\" + moduleType.name + \"/ngModuleDef.js\", {\n                        type: moduleType,\n                        bootstrap: flatten(ngModule.bootstrap || EMPTY_ARRAY$3).map(resolveForwardRef),\n                        declarations: declarations.map(resolveForwardRef),\n                        imports: flatten(ngModule.imports || EMPTY_ARRAY$3)\n                            .map(resolveForwardRef)\n                            .map(expandModuleWithProviders),\n                        exports: flatten(ngModule.exports || EMPTY_ARRAY$3)\n                            .map(resolveForwardRef)\n                            .map(expandModuleWithProviders),\n                        emitInline: true,\n                        schemas: ngModule.schemas ? flatten(ngModule.schemas) : null,\n                        id: ngModule.id || null,\n                    });\n                }\n                return ngModuleDef;\n            }\n        });\n        var ngInjectorDef = null;\n        Object.defineProperty(moduleType, NG_INJECTOR_DEF, {\n            get: function () {\n                if (ngInjectorDef === null) {\n                    ngDevMode && verifySemanticsOfNgModuleDef(moduleType, allowDuplicateDeclarationsInRoot);\n                    var meta = {\n                        name: moduleType.name,\n                        type: moduleType,\n                        deps: reflectDependencies(moduleType),\n                        providers: ngModule.providers || EMPTY_ARRAY$3,\n                        imports: [\n                            (ngModule.imports || EMPTY_ARRAY$3).map(resolveForwardRef),\n                            (ngModule.exports || EMPTY_ARRAY$3).map(resolveForwardRef),\n                        ],\n                    };\n                    ngInjectorDef = getCompilerFacade().compileInjector(angularCoreEnv, \"ng:///\" + moduleType.name + \"/ngInjectorDef.js\", meta);\n                }\n                return ngInjectorDef;\n            },\n            // Make the property configurable in dev mode to allow overriding in tests\n            configurable: !!ngDevMode,\n        });\n    }\n    function verifySemanticsOfNgModuleDef(moduleType, allowDuplicateDeclarationsInRoot, importingModule) {\n        if (verifiedNgModule.get(moduleType))\n            return;\n        verifiedNgModule.set(moduleType, true);\n        moduleType = resolveForwardRef(moduleType);\n        var ngModuleDef;\n        if (importingModule) {\n            ngModuleDef = getNgModuleDef(moduleType);\n            if (!ngModuleDef) {\n                throw new Error(\"Unexpected value '\" + moduleType.name + \"' imported by the module '\" + importingModule.name + \"'. Please add an @NgModule annotation.\");\n            }\n        }\n        else {\n            ngModuleDef = getNgModuleDef(moduleType, true);\n        }\n        var errors = [];\n        var declarations = maybeUnwrapFn(ngModuleDef.declarations);\n        var imports = maybeUnwrapFn(ngModuleDef.imports);\n        flatten(imports).map(unwrapModuleWithProvidersImports).forEach(function (mod) {\n            verifySemanticsOfNgModuleImport(mod, moduleType);\n            verifySemanticsOfNgModuleDef(mod, false, moduleType);\n        });\n        var exports = maybeUnwrapFn(ngModuleDef.exports);\n        declarations.forEach(verifyDeclarationsHaveDefinitions);\n        var combinedDeclarations = __spread(declarations.map(resolveForwardRef), flatten(imports.map(computeCombinedExports)).map(resolveForwardRef));\n        exports.forEach(verifyExportsAreDeclaredOrReExported);\n        declarations.forEach(function (decl) { return verifyDeclarationIsUnique(decl, allowDuplicateDeclarationsInRoot); });\n        declarations.forEach(verifyComponentEntryComponentsIsPartOfNgModule);\n        var ngModule = getAnnotation(moduleType, 'NgModule');\n        if (ngModule) {\n            ngModule.imports &&\n                flatten(ngModule.imports).map(unwrapModuleWithProvidersImports).forEach(function (mod) {\n                    verifySemanticsOfNgModuleImport(mod, moduleType);\n                    verifySemanticsOfNgModuleDef(mod, false, moduleType);\n                });\n            ngModule.bootstrap && deepForEach(ngModule.bootstrap, verifyCorrectBootstrapType);\n            ngModule.bootstrap && deepForEach(ngModule.bootstrap, verifyComponentIsPartOfNgModule);\n            ngModule.entryComponents &&\n                deepForEach(ngModule.entryComponents, verifyComponentIsPartOfNgModule);\n        }\n        // Throw Error if any errors were detected.\n        if (errors.length) {\n            throw new Error(errors.join('\\n'));\n        }\n        ////////////////////////////////////////////////////////////////////////////////////////////////\n        function verifyDeclarationsHaveDefinitions(type) {\n            type = resolveForwardRef(type);\n            var def = getComponentDef(type) || getDirectiveDef(type) || getPipeDef(type);\n            if (!def) {\n                errors.push(\"Unexpected value '\" + stringifyForError(type) + \"' declared by the module '\" + stringifyForError(moduleType) + \"'. Please add a @Pipe/@Directive/@Component annotation.\");\n            }\n        }\n        function verifyExportsAreDeclaredOrReExported(type) {\n            type = resolveForwardRef(type);\n            var kind = getComponentDef(type) && 'component' || getDirectiveDef(type) && 'directive' ||\n                getPipeDef(type) && 'pipe';\n            if (kind) {\n                // only checked if we are declared as Component, Directive, or Pipe\n                // Modules don't need to be declared or imported.\n                if (combinedDeclarations.lastIndexOf(type) === -1) {\n                    // We are exporting something which we don't explicitly declare or import.\n                    errors.push(\"Can't export \" + kind + \" \" + stringifyForError(type) + \" from \" + stringifyForError(moduleType) + \" as it was neither declared nor imported!\");\n                }\n            }\n        }\n        function verifyDeclarationIsUnique(type, suppressErrors) {\n            type = resolveForwardRef(type);\n            var existingModule = ownerNgModule.get(type);\n            if (existingModule && existingModule !== moduleType) {\n                if (!suppressErrors) {\n                    var modules = [existingModule, moduleType].map(stringifyForError).sort();\n                    errors.push(\"Type \" + stringifyForError(type) + \" is part of the declarations of 2 modules: \" + modules[0] + \" and \" + modules[1] + \"! \" +\n                        (\"Please consider moving \" + stringifyForError(type) + \" to a higher module that imports \" + modules[0] + \" and \" + modules[1] + \". \") +\n                        (\"You can also create a new NgModule that exports and includes \" + stringifyForError(type) + \" then import that NgModule in \" + modules[0] + \" and \" + modules[1] + \".\"));\n                }\n            }\n            else {\n                // Mark type as having owner.\n                ownerNgModule.set(type, moduleType);\n            }\n        }\n        function verifyComponentIsPartOfNgModule(type) {\n            type = resolveForwardRef(type);\n            var existingModule = ownerNgModule.get(type);\n            if (!existingModule) {\n                errors.push(\"Component \" + stringifyForError(type) + \" is not part of any NgModule or the module has not been imported into your module.\");\n            }\n        }\n        function verifyCorrectBootstrapType(type) {\n            type = resolveForwardRef(type);\n            if (!getComponentDef(type)) {\n                errors.push(stringifyForError(type) + \" cannot be used as an entry component.\");\n            }\n        }\n        function verifyComponentEntryComponentsIsPartOfNgModule(type) {\n            type = resolveForwardRef(type);\n            if (getComponentDef(type)) {\n                // We know we are component\n                var component = getAnnotation(type, 'Component');\n                if (component && component.entryComponents) {\n                    deepForEach(component.entryComponents, verifyComponentIsPartOfNgModule);\n                }\n            }\n        }\n        function verifySemanticsOfNgModuleImport(type, importingModule) {\n            type = resolveForwardRef(type);\n            if (getComponentDef(type) || getDirectiveDef(type)) {\n                throw new Error(\"Unexpected directive '\" + type.name + \"' imported by the module '\" + importingModule.name + \"'. Please add an @NgModule annotation.\");\n            }\n            if (getPipeDef(type)) {\n                throw new Error(\"Unexpected pipe '\" + type.name + \"' imported by the module '\" + importingModule.name + \"'. Please add an @NgModule annotation.\");\n            }\n        }\n    }\n    function unwrapModuleWithProvidersImports(typeOrWithProviders) {\n        typeOrWithProviders = resolveForwardRef(typeOrWithProviders);\n        return typeOrWithProviders.ngModule || typeOrWithProviders;\n    }\n    function getAnnotation(type, name) {\n        var annotation = null;\n        collect(type.__annotations__);\n        collect(type.decorators);\n        return annotation;\n        function collect(annotations) {\n            if (annotations) {\n                annotations.forEach(readAnnotation);\n            }\n        }\n        function readAnnotation(decorator) {\n            if (!annotation) {\n                var proto = Object.getPrototypeOf(decorator);\n                if (proto.ngMetadataName == name) {\n                    annotation = decorator;\n                }\n                else if (decorator.type) {\n                    var proto_1 = Object.getPrototypeOf(decorator.type);\n                    if (proto_1.ngMetadataName == name) {\n                        annotation = decorator.args[0];\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Keep track of compiled components. This is needed because in tests we often want to compile the\n     * same component with more than one NgModule. This would cause an error unless we reset which\n     * NgModule the component belongs to. We keep the list of compiled components here so that the\n     * TestBed can reset it later.\n     */\n    var ownerNgModule = new Map();\n    var verifiedNgModule = new Map();\n    function resetCompiledComponents() {\n        ownerNgModule = new Map();\n        verifiedNgModule = new Map();\n        moduleQueue.length = 0;\n    }\n    /**\n     * Computes the combined declarations of explicit declarations, as well as declarations inherited by\n     * traversing the exports of imported modules.\n     * @param type\n     */\n    function computeCombinedExports(type) {\n        type = resolveForwardRef(type);\n        var ngModuleDef = getNgModuleDef(type, true);\n        return __spread(flatten(maybeUnwrapFn(ngModuleDef.exports).map(function (type) {\n            var ngModuleDef = getNgModuleDef(type);\n            if (ngModuleDef) {\n                verifySemanticsOfNgModuleDef(type, false);\n                return computeCombinedExports(type);\n            }\n            else {\n                return type;\n            }\n        })));\n    }\n    /**\n     * Some declared components may be compiled asynchronously, and thus may not have their\n     * ngComponentDef set yet. If this is the case, then a reference to the module is written into\n     * the `ngSelectorScope` property of the declared type.\n     */\n    function setScopeOnDeclaredComponents(moduleType, ngModule) {\n        var declarations = flatten(ngModule.declarations || EMPTY_ARRAY$3);\n        var transitiveScopes = transitiveScopesFor(moduleType);\n        declarations.forEach(function (declaration) {\n            if (declaration.hasOwnProperty(NG_COMPONENT_DEF)) {\n                // An `ngComponentDef` field exists - go ahead and patch the component directly.\n                var component = declaration;\n                var componentDef = getComponentDef(component);\n                patchComponentDefWithScope(componentDef, transitiveScopes);\n            }\n            else if (!declaration.hasOwnProperty(NG_DIRECTIVE_DEF) && !declaration.hasOwnProperty(NG_PIPE_DEF)) {\n                // Set `ngSelectorScope` for future reference when the component compilation finishes.\n                declaration.ngSelectorScope = moduleType;\n            }\n        });\n    }\n    /**\n     * Patch the definition of a component with directives and pipes from the compilation scope of\n     * a given module.\n     */\n    function patchComponentDefWithScope(componentDef, transitiveScopes) {\n        componentDef.directiveDefs = function () {\n            return Array.from(transitiveScopes.compilation.directives)\n                .map(function (dir) { return dir.hasOwnProperty(NG_COMPONENT_DEF) ? getComponentDef(dir) :\n                getDirectiveDef(dir); })\n                .filter(function (def) { return !!def; });\n        };\n        componentDef.pipeDefs = function () {\n            return Array.from(transitiveScopes.compilation.pipes).map(function (pipe) { return getPipeDef(pipe); });\n        };\n        componentDef.schemas = transitiveScopes.schemas;\n        // Since we avoid Components/Directives/Pipes recompiling in case there are no overrides, we\n        // may face a problem where previously compiled defs available to a given Component/Directive\n        // are cached in TView and may become stale (in case any of these defs gets recompiled). In\n        // order to avoid this problem, we force fresh TView to be created.\n        componentDef.tView = null;\n    }\n    /**\n     * Compute the pair of transitive scopes (compilation scope and exported scope) for a given module.\n     *\n     * This operation is memoized and the result is cached on the module's definition. It can be called\n     * on modules with components that have not fully compiled yet, but the result should not be used\n     * until they have.\n     */\n    function transitiveScopesFor(moduleType, processNgModuleFn) {\n        if (!isNgModule(moduleType)) {\n            throw new Error(moduleType.name + \" does not have an ngModuleDef\");\n        }\n        var def = getNgModuleDef(moduleType);\n        if (def.transitiveCompileScopes !== null) {\n            return def.transitiveCompileScopes;\n        }\n        var scopes = {\n            schemas: def.schemas || null,\n            compilation: {\n                directives: new Set(),\n                pipes: new Set(),\n            },\n            exported: {\n                directives: new Set(),\n                pipes: new Set(),\n            },\n        };\n        maybeUnwrapFn(def.declarations).forEach(function (declared) {\n            var declaredWithDefs = declared;\n            if (getPipeDef(declaredWithDefs)) {\n                scopes.compilation.pipes.add(declared);\n            }\n            else {\n                // Either declared has an ngComponentDef or ngDirectiveDef, or it's a component which hasn't\n                // had its template compiled yet. In either case, it gets added to the compilation's\n                // directives.\n                scopes.compilation.directives.add(declared);\n            }\n        });\n        maybeUnwrapFn(def.imports).forEach(function (imported) {\n            var importedType = imported;\n            if (!isNgModule(importedType)) {\n                throw new Error(\"Importing \" + importedType.name + \" which does not have an ngModuleDef\");\n            }\n            if (processNgModuleFn) {\n                processNgModuleFn(importedType);\n            }\n            // When this module imports another, the imported module's exported directives and pipes are\n            // added to the compilation scope of this module.\n            var importedScope = transitiveScopesFor(importedType, processNgModuleFn);\n            importedScope.exported.directives.forEach(function (entry) { return scopes.compilation.directives.add(entry); });\n            importedScope.exported.pipes.forEach(function (entry) { return scopes.compilation.pipes.add(entry); });\n        });\n        maybeUnwrapFn(def.exports).forEach(function (exported) {\n            var exportedType = exported;\n            // Either the type is a module, a pipe, or a component/directive (which may not have an\n            // ngComponentDef as it might be compiled asynchronously).\n            if (isNgModule(exportedType)) {\n                // When this module exports another, the exported module's exported directives and pipes are\n                // added to both the compilation and exported scopes of this module.\n                var exportedScope = transitiveScopesFor(exportedType, processNgModuleFn);\n                exportedScope.exported.directives.forEach(function (entry) {\n                    scopes.compilation.directives.add(entry);\n                    scopes.exported.directives.add(entry);\n                });\n                exportedScope.exported.pipes.forEach(function (entry) {\n                    scopes.compilation.pipes.add(entry);\n                    scopes.exported.pipes.add(entry);\n                });\n            }\n            else if (getPipeDef(exportedType)) {\n                scopes.exported.pipes.add(exportedType);\n            }\n            else {\n                scopes.exported.directives.add(exportedType);\n            }\n        });\n        def.transitiveCompileScopes = scopes;\n        return scopes;\n    }\n    function expandModuleWithProviders(value) {\n        if (isModuleWithProviders(value)) {\n            return value.ngModule;\n        }\n        return value;\n    }\n    function isModuleWithProviders(value) {\n        return value.ngModule !== undefined;\n    }\n    function isNgModule(value) {\n        return !!getNgModuleDef(value);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Compile an Angular component according to its decorator metadata, and patch the resulting\n     * ngComponentDef onto the component type.\n     *\n     * Compilation may be asynchronous (due to the need to resolve URLs for the component template or\n     * other resources, for example). In the event that compilation is not immediate, `compileComponent`\n     * will enqueue resource resolution into a global queue and will fail to return the `ngComponentDef`\n     * until the global queue has been resolved with a call to `resolveComponentResources`.\n     */\n    function compileComponent(type, metadata) {\n        var ngComponentDef = null;\n        // Metadata may have resources which need to be resolved.\n        maybeQueueResolutionOfComponentResources(type, metadata);\n        Object.defineProperty(type, NG_COMPONENT_DEF, {\n            get: function () {\n                var compiler = getCompilerFacade();\n                if (ngComponentDef === null) {\n                    if (componentNeedsResolution(metadata)) {\n                        var error = [\"Component '\" + type.name + \"' is not resolved:\"];\n                        if (metadata.templateUrl) {\n                            error.push(\" - templateUrl: \" + metadata.templateUrl);\n                        }\n                        if (metadata.styleUrls && metadata.styleUrls.length) {\n                            error.push(\" - styleUrls: \" + JSON.stringify(metadata.styleUrls));\n                        }\n                        error.push(\"Did you run and wait for 'resolveComponentResources()'?\");\n                        throw new Error(error.join('\\n'));\n                    }\n                    var templateUrl = metadata.templateUrl || \"ng:///\" + type.name + \"/template.html\";\n                    var meta = __assign({}, directiveMetadata(type, metadata), { typeSourceSpan: compiler.createParseSourceSpan('Component', type.name, templateUrl), template: metadata.template || '', preserveWhitespaces: metadata.preserveWhitespaces || false, styles: metadata.styles || EMPTY_ARRAY$1, animations: metadata.animations, directives: [], changeDetection: metadata.changeDetection, pipes: new Map(), encapsulation: metadata.encapsulation || exports.ViewEncapsulation.Emulated, interpolation: metadata.interpolation, viewProviders: metadata.viewProviders || null });\n                    if (meta.usesInheritance) {\n                        addBaseDefToUndecoratedParents(type);\n                    }\n                    ngComponentDef = compiler.compileComponent(angularCoreEnv, templateUrl, meta);\n                    // When NgModule decorator executed, we enqueued the module definition such that\n                    // it would only dequeue and add itself as module scope to all of its declarations,\n                    // but only if  if all of its declarations had resolved. This call runs the check\n                    // to see if any modules that are in the queue can be dequeued and add scope to\n                    // their declarations.\n                    flushModuleScopingQueueAsMuchAsPossible();\n                    // If component compilation is async, then the @NgModule annotation which declares the\n                    // component may execute and set an ngSelectorScope property on the component type. This\n                    // allows the component to patch itself with directiveDefs from the module after it\n                    // finishes compiling.\n                    if (hasSelectorScope(type)) {\n                        var scopes = transitiveScopesFor(type.ngSelectorScope);\n                        patchComponentDefWithScope(ngComponentDef, scopes);\n                    }\n                }\n                return ngComponentDef;\n            },\n            // Make the property configurable in dev mode to allow overriding in tests\n            configurable: !!ngDevMode,\n        });\n        // Add ngInjectableDef so components are reachable through the module injector by default\n        // This is mostly to support injecting components in tests. In real application code,\n        // components should be retrieved through the node injector, so this isn't a problem.\n        compileInjectable(type);\n    }\n    function hasSelectorScope(component) {\n        return component.ngSelectorScope !== undefined;\n    }\n    /**\n     * Compile an Angular directive according to its decorator metadata, and patch the resulting\n     * ngDirectiveDef onto the component type.\n     *\n     * In the event that compilation is not immediate, `compileDirective` will return a `Promise` which\n     * will resolve when compilation completes and the directive becomes usable.\n     */\n    function compileDirective(type, directive) {\n        var ngDirectiveDef = null;\n        Object.defineProperty(type, NG_DIRECTIVE_DEF, {\n            get: function () {\n                if (ngDirectiveDef === null) {\n                    var name_1 = type && type.name;\n                    var sourceMapUrl = \"ng:///\" + name_1 + \"/ngDirectiveDef.js\";\n                    var compiler = getCompilerFacade();\n                    var facade = directiveMetadata(type, directive);\n                    facade.typeSourceSpan = compiler.createParseSourceSpan('Directive', name_1, sourceMapUrl);\n                    if (facade.usesInheritance) {\n                        addBaseDefToUndecoratedParents(type);\n                    }\n                    ngDirectiveDef = compiler.compileDirective(angularCoreEnv, sourceMapUrl, facade);\n                }\n                return ngDirectiveDef;\n            },\n            // Make the property configurable in dev mode to allow overriding in tests\n            configurable: !!ngDevMode,\n        });\n        // Add ngInjectableDef so directives are reachable through the module injector by default\n        // This is mostly to support injecting directives in tests. In real application code,\n        // directives should be retrieved through the node injector, so this isn't a problem.\n        compileInjectable(type);\n    }\n    function extendsDirectlyFromObject(type) {\n        return Object.getPrototypeOf(type.prototype) === Object.prototype;\n    }\n    /**\n     * Extract the `R3DirectiveMetadata` for a particular directive (either a `Directive` or a\n     * `Component`).\n     */\n    function directiveMetadata(type, metadata) {\n        // Reflect inputs and outputs.\n        var propMetadata = getReflect().ownPropMetadata(type);\n        return {\n            name: type.name,\n            type: type,\n            typeArgumentCount: 0,\n            selector: metadata.selector,\n            deps: reflectDependencies(type),\n            host: metadata.host || EMPTY_OBJ,\n            propMetadata: propMetadata,\n            inputs: metadata.inputs || EMPTY_ARRAY$1,\n            outputs: metadata.outputs || EMPTY_ARRAY$1,\n            queries: extractQueriesMetadata(type, propMetadata, isContentQuery),\n            lifecycle: { usesOnChanges: type.prototype.hasOwnProperty('ngOnChanges') },\n            typeSourceSpan: null,\n            usesInheritance: !extendsDirectlyFromObject(type),\n            exportAs: extractExportAs(metadata.exportAs),\n            providers: metadata.providers || null,\n            viewQueries: extractQueriesMetadata(type, propMetadata, isViewQuery),\n        };\n    }\n    /**\n     * Adds an `ngBaseDef` to all parent classes of a type that don't have an Angular decorator.\n     */\n    function addBaseDefToUndecoratedParents(type) {\n        var objPrototype = Object.prototype;\n        var parent = Object.getPrototypeOf(type);\n        // Go up the prototype until we hit `Object`.\n        while (parent && parent !== objPrototype) {\n            // Since inheritance works if the class was annotated already, we only need to add\n            // the base def if there are no annotations and the base def hasn't been created already.\n            if (!getDirectiveDef(parent) && !getComponentDef(parent) && !getBaseDef(parent)) {\n                var facade = extractBaseDefMetadata(parent);\n                facade && compileBase(parent, facade);\n            }\n            parent = Object.getPrototypeOf(parent);\n        }\n    }\n    /** Compiles the base metadata into a base definition. */\n    function compileBase(type, facade) {\n        var ngBaseDef = null;\n        Object.defineProperty(type, NG_BASE_DEF, {\n            get: function () {\n                if (ngBaseDef === null) {\n                    var name_2 = type && type.name;\n                    var sourceMapUrl = \"ng://\" + name_2 + \"/ngBaseDef.js\";\n                    var compiler = getCompilerFacade();\n                    ngBaseDef = compiler.compileBase(angularCoreEnv, sourceMapUrl, facade);\n                }\n                return ngBaseDef;\n            },\n            // Make the property configurable in dev mode to allow overriding in tests\n            configurable: !!ngDevMode,\n        });\n    }\n    /** Extracts the metadata necessary to construct an `ngBaseDef` from a class. */\n    function extractBaseDefMetadata(type) {\n        var propMetadata = getReflect().ownPropMetadata(type);\n        var viewQueries = extractQueriesMetadata(type, propMetadata, isViewQuery);\n        var queries = extractQueriesMetadata(type, propMetadata, isContentQuery);\n        var inputs;\n        var outputs;\n        // We only need to know whether there are any HostListener or HostBinding\n        // decorators present, the parsing logic is in the compiler already.\n        var hasHostDecorators = false;\n        var _loop_1 = function (field) {\n            propMetadata[field].forEach(function (ann) {\n                var metadataName = ann.ngMetadataName;\n                if (metadataName === 'Input') {\n                    inputs = inputs || {};\n                    inputs[field] = ann.bindingPropertyName ? [ann.bindingPropertyName, field] : field;\n                }\n                else if (metadataName === 'Output') {\n                    outputs = outputs || {};\n                    outputs[field] = ann.bindingPropertyName || field;\n                }\n                else if (metadataName === 'HostBinding' || metadataName === 'HostListener') {\n                    hasHostDecorators = true;\n                }\n            });\n        };\n        for (var field in propMetadata) {\n            _loop_1(field);\n        }\n        // Only generate the base def if there's any info inside it.\n        if (inputs || outputs || viewQueries.length || queries.length || hasHostDecorators) {\n            return { name: type.name, type: type, inputs: inputs, outputs: outputs, viewQueries: viewQueries, queries: queries, propMetadata: propMetadata };\n        }\n        return null;\n    }\n    function convertToR3QueryPredicate(selector) {\n        return typeof selector === 'string' ? splitByComma(selector) : resolveForwardRef(selector);\n    }\n    function convertToR3QueryMetadata(propertyName, ann) {\n        return {\n            propertyName: propertyName,\n            predicate: convertToR3QueryPredicate(ann.selector),\n            descendants: ann.descendants,\n            first: ann.first,\n            read: ann.read ? ann.read : null,\n            static: !!ann.static\n        };\n    }\n    function extractQueriesMetadata(type, propMetadata, isQueryAnn) {\n        var queriesMeta = [];\n        var _loop_2 = function (field) {\n            if (propMetadata.hasOwnProperty(field)) {\n                var annotations_1 = propMetadata[field];\n                annotations_1.forEach(function (ann) {\n                    if (isQueryAnn(ann)) {\n                        if (!ann.selector) {\n                            throw new Error(\"Can't construct a query for the property \\\"\" + field + \"\\\" of \" +\n                                (\"\\\"\" + stringifyForError(type) + \"\\\" since the query selector wasn't defined.\"));\n                        }\n                        if (annotations_1.some(isInputAnn)) {\n                            throw new Error(\"Cannot combine @Input decorators with query decorators\");\n                        }\n                        queriesMeta.push(convertToR3QueryMetadata(field, ann));\n                    }\n                });\n            }\n        };\n        for (var field in propMetadata) {\n            _loop_2(field);\n        }\n        return queriesMeta;\n    }\n    function extractExportAs(exportAs) {\n        if (exportAs === undefined) {\n            return null;\n        }\n        return exportAs.split(',').map(function (part) { return part.trim(); });\n    }\n    function isContentQuery(value) {\n        var name = value.ngMetadataName;\n        return name === 'ContentChild' || name === 'ContentChildren';\n    }\n    function isViewQuery(value) {\n        var name = value.ngMetadataName;\n        return name === 'ViewChild' || name === 'ViewChildren';\n    }\n    function isInputAnn(value) {\n        return value.ngMetadataName === 'Input';\n    }\n    function splitByComma(value) {\n        return value.split(',').map(function (piece) { return piece.trim(); });\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function compilePipe(type, meta) {\n        var ngPipeDef = null;\n        Object.defineProperty(type, NG_PIPE_DEF, {\n            get: function () {\n                if (ngPipeDef === null) {\n                    var typeName = type.name;\n                    ngPipeDef =\n                        getCompilerFacade().compilePipe(angularCoreEnv, \"ng:///\" + typeName + \"/ngPipeDef.js\", {\n                            type: type,\n                            typeArgumentCount: 0,\n                            name: typeName,\n                            deps: reflectDependencies(type),\n                            pipeName: meta.name,\n                            pure: meta.pure !== undefined ? meta.pure : true\n                        });\n                }\n                return ngPipeDef;\n            },\n            // Make the property configurable in dev mode to allow overriding in tests\n            configurable: !!ngDevMode,\n        });\n    }\n\n    /**\n     * Type of the Directive metadata.\n     *\n     * @publicApi\n     */\n    var Directive = makeDecorator('Directive', function (dir) {\n        if (dir === void 0) { dir = {}; }\n        return dir;\n    }, undefined, undefined, function (type, meta) { return SWITCH_COMPILE_DIRECTIVE(type, meta); });\n    /**\n     * Component decorator and metadata.\n     *\n     * @Annotation\n     * @publicApi\n     */\n    var Component = makeDecorator('Component', function (c) {\n        if (c === void 0) { c = {}; }\n        return (__assign({ changeDetection: exports.ChangeDetectionStrategy.Default }, c));\n    }, Directive, undefined, function (type, meta) { return SWITCH_COMPILE_COMPONENT(type, meta); });\n    /**\n     * @Annotation\n     * @publicApi\n     */\n    var Pipe = makeDecorator('Pipe', function (p) { return (__assign({ pure: true }, p)); }, undefined, undefined, function (type, meta) { return SWITCH_COMPILE_PIPE(type, meta); });\n    /**\n     * @Annotation\n     * @publicApi\n     */\n    var Input = makePropDecorator('Input', function (bindingPropertyName) { return ({ bindingPropertyName: bindingPropertyName }); });\n    /**\n     * @Annotation\n     * @publicApi\n     */\n    var Output = makePropDecorator('Output', function (bindingPropertyName) { return ({ bindingPropertyName: bindingPropertyName }); });\n    /**\n     * @Annotation\n     * @publicApi\n     */\n    var HostBinding = makePropDecorator('HostBinding', function (hostPropertyName) { return ({ hostPropertyName: hostPropertyName }); });\n    /**\n     * Decorator that binds a DOM event to a host listener and supplies configuration metadata.\n     * Angular invokes the supplied handler method when the host element emits the specified event,\n     * and updates the bound element with the result.\n     *\n     * If the handler method returns false, applies `preventDefault` on the bound element.\n     *\n     * @usageNotes\n     *\n     * The following example declares a directive\n     * that attaches a click listener to a button and counts clicks.\n     *\n     * ```ts\n     * @Directive({selector: 'button[counting]'})\n     * class CountClicks {\n     *   numberOfClicks = 0;\n     *\n     *   @HostListener('click', ['$event.target'])\n     *   onClick(btn) {\n     *     console.log('button', btn, 'number of clicks:', this.numberOfClicks++);\n     *  }\n     * }\n     *\n     * @Component({\n     *   selector: 'app',\n     *   template: '<button counting>Increment</button>',\n     * })\n     * class App {}\n     * ```\n     *\n     * @Annotation\n     * @publicApi\n     */\n    var HostListener = makePropDecorator('HostListener', function (eventName, args) { return ({ eventName: eventName, args: args }); });\n    var SWITCH_COMPILE_COMPONENT__POST_R3__ = compileComponent;\n    var SWITCH_COMPILE_DIRECTIVE__POST_R3__ = compileDirective;\n    var SWITCH_COMPILE_PIPE__POST_R3__ = compilePipe;\n    var SWITCH_COMPILE_COMPONENT = SWITCH_COMPILE_COMPONENT__POST_R3__;\n    var SWITCH_COMPILE_DIRECTIVE = SWITCH_COMPILE_DIRECTIVE__POST_R3__;\n    var SWITCH_COMPILE_PIPE = SWITCH_COMPILE_PIPE__POST_R3__;\n\n    /**\n     * @Annotation\n     * @publicApi\n     */\n    var NgModule = makeDecorator('NgModule', function (ngModule) { return ngModule; }, undefined, undefined, \n    /**\n     * Decorator that marks the following class as an NgModule, and supplies\n     * configuration metadata for it.\n     *\n     * * The `declarations` and `entryComponents` options configure the compiler\n     * with information about what belongs to the NgModule.\n     * * The `providers` options configures the NgModule's injector to provide\n     * dependencies the NgModule members.\n     * * The `imports` and `exports` options bring in members from other modules, and make\n     * this module's members available to others.\n     */\n    function (type, meta) { return SWITCH_COMPILE_NGMODULE(type, meta); });\n    var SWITCH_COMPILE_NGMODULE__POST_R3__ = compileNgModule;\n    var SWITCH_COMPILE_NGMODULE = SWITCH_COMPILE_NGMODULE__POST_R3__;\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A function that will be executed when an application is initialized.\n     *\n     * @publicApi\n     */\n    var APP_INITIALIZER = new InjectionToken('Application Initializer');\n    /**\n     * A class that reflects the state of running {@link APP_INITIALIZER}s.\n     *\n     * @publicApi\n     */\n    var ApplicationInitStatus = /** @class */ (function () {\n        function ApplicationInitStatus(appInits) {\n            var _this = this;\n            this.appInits = appInits;\n            this.initialized = false;\n            this.done = false;\n            this.donePromise = new Promise(function (res, rej) {\n                _this.resolve = res;\n                _this.reject = rej;\n            });\n        }\n        /** @internal */\n        ApplicationInitStatus.prototype.runInitializers = function () {\n            var _this = this;\n            if (this.initialized) {\n                return;\n            }\n            var asyncInitPromises = [];\n            var complete = function () {\n                _this.done = true;\n                _this.resolve();\n            };\n            if (this.appInits) {\n                for (var i = 0; i < this.appInits.length; i++) {\n                    var initResult = this.appInits[i]();\n                    if (isPromise(initResult)) {\n                        asyncInitPromises.push(initResult);\n                    }\n                }\n            }\n            Promise.all(asyncInitPromises).then(function () { complete(); }).catch(function (e) { _this.reject(e); });\n            if (asyncInitPromises.length === 0) {\n                complete();\n            }\n            this.initialized = true;\n        };\n        ApplicationInitStatus.ngInjectableDef = ɵɵdefineInjectable({ token: ApplicationInitStatus, factory: function ApplicationInitStatus_Factory(t) { return new (t || ApplicationInitStatus)(ɵɵinject(APP_INITIALIZER, 8)); }, providedIn: null });\n        return ApplicationInitStatus;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A DI Token representing a unique string id assigned to the application by Angular and used\n     * primarily for prefixing application attributes and CSS styles when\n     * {@link ViewEncapsulation#Emulated ViewEncapsulation.Emulated} is being used.\n     *\n     * If you need to avoid randomly generated value to be used as an application id, you can provide\n     * a custom value via a DI provider <!-- TODO: provider --> configuring the root {@link Injector}\n     * using this token.\n     * @publicApi\n     */\n    var APP_ID = new InjectionToken('AppId');\n    function _appIdRandomProviderFactory() {\n        return \"\" + _randomChar() + _randomChar() + _randomChar();\n    }\n    /**\n     * Providers that will generate a random APP_ID_TOKEN.\n     * @publicApi\n     */\n    var APP_ID_RANDOM_PROVIDER = {\n        provide: APP_ID,\n        useFactory: _appIdRandomProviderFactory,\n        deps: [],\n    };\n    function _randomChar() {\n        return String.fromCharCode(97 + Math.floor(Math.random() * 25));\n    }\n    /**\n     * A function that will be executed when a platform is initialized.\n     * @publicApi\n     */\n    var PLATFORM_INITIALIZER = new InjectionToken('Platform Initializer');\n    /**\n     * A token that indicates an opaque platform id.\n     * @publicApi\n     */\n    var PLATFORM_ID = new InjectionToken('Platform ID');\n    /**\n     * All callbacks provided via this token will be called for every component that is bootstrapped.\n     * Signature of the callback:\n     *\n     * `(componentRef: ComponentRef) => void`.\n     *\n     * @publicApi\n     */\n    var APP_BOOTSTRAP_LISTENER = new InjectionToken('appBootstrapListener');\n    /**\n     * A token which indicates the root directory of the application\n     * @publicApi\n     */\n    var PACKAGE_ROOT_URL = new InjectionToken('Application Packages Root URL');\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var Console = /** @class */ (function () {\n        function Console() {\n        }\n        Console.prototype.log = function (message) {\n            // tslint:disable-next-line:no-console\n            console.log(message);\n        };\n        // Note: for reporting errors use `DOM.logError()` as it is platform specific\n        Console.prototype.warn = function (message) {\n            // tslint:disable-next-line:no-console\n            console.warn(message);\n        };\n        Console.ngInjectableDef = ɵɵdefineInjectable({ token: Console, factory: function Console_Factory(t) { return new (t || Console)(); }, providedIn: null });\n        return Console;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Provide this token to set the locale of your application.\n     * It is used for i18n extraction, by i18n pipes (DatePipe, I18nPluralPipe, CurrencyPipe,\n     * DecimalPipe and PercentPipe) and by ICU expressions.\n     *\n     * See the [i18n guide](guide/i18n#setting-up-locale) for more information.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * import { LOCALE_ID } from '@angular/core';\n     * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n     * import { AppModule } from './app/app.module';\n     *\n     * platformBrowserDynamic().bootstrapModule(AppModule, {\n     *   providers: [{provide: LOCALE_ID, useValue: 'en-US' }]\n     * });\n     * ```\n     *\n     * @publicApi\n     */\n    var LOCALE_ID$1 = new InjectionToken('LocaleId');\n    /**\n     * Use this token at bootstrap to provide the content of your translation file (`xtb`,\n     * `xlf` or `xlf2`) when you want to translate your application in another language.\n     *\n     * See the [i18n guide](guide/i18n#merge) for more information.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * import { TRANSLATIONS } from '@angular/core';\n     * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n     * import { AppModule } from './app/app.module';\n     *\n     * // content of your translation file\n     * const translations = '....';\n     *\n     * platformBrowserDynamic().bootstrapModule(AppModule, {\n     *   providers: [{provide: TRANSLATIONS, useValue: translations }]\n     * });\n     * ```\n     *\n     * @publicApi\n     */\n    var TRANSLATIONS$1 = new InjectionToken('Translations');\n    /**\n     * Provide this token at bootstrap to set the format of your {@link TRANSLATIONS}: `xtb`,\n     * `xlf` or `xlf2`.\n     *\n     * See the [i18n guide](guide/i18n#merge) for more information.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * import { TRANSLATIONS_FORMAT } from '@angular/core';\n     * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n     * import { AppModule } from './app/app.module';\n     *\n     * platformBrowserDynamic().bootstrapModule(AppModule, {\n     *   providers: [{provide: TRANSLATIONS_FORMAT, useValue: 'xlf' }]\n     * });\n     * ```\n     *\n     * @publicApi\n     */\n    var TRANSLATIONS_FORMAT = new InjectionToken('TranslationsFormat');\n    (function (MissingTranslationStrategy) {\n        MissingTranslationStrategy[MissingTranslationStrategy[\"Error\"] = 0] = \"Error\";\n        MissingTranslationStrategy[MissingTranslationStrategy[\"Warning\"] = 1] = \"Warning\";\n        MissingTranslationStrategy[MissingTranslationStrategy[\"Ignore\"] = 2] = \"Ignore\";\n    })(exports.MissingTranslationStrategy || (exports.MissingTranslationStrategy = {}));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Combination of NgModuleFactory and ComponentFactorys.\n     *\n     * @publicApi\n     */\n    var ModuleWithComponentFactories = /** @class */ (function () {\n        function ModuleWithComponentFactories(ngModuleFactory, componentFactories) {\n            this.ngModuleFactory = ngModuleFactory;\n            this.componentFactories = componentFactories;\n        }\n        return ModuleWithComponentFactories;\n    }());\n    var Compiler_compileModuleSync__POST_R3__ = function (moduleType) {\n        return new NgModuleFactory$1(moduleType);\n    };\n    var Compiler_compileModuleSync = Compiler_compileModuleSync__POST_R3__;\n    var Compiler_compileModuleAsync__POST_R3__ = function (moduleType) {\n        return Promise.resolve(Compiler_compileModuleSync__POST_R3__(moduleType));\n    };\n    var Compiler_compileModuleAsync = Compiler_compileModuleAsync__POST_R3__;\n    var Compiler_compileModuleAndAllComponentsSync__POST_R3__ = function (moduleType) {\n        var ngModuleFactory = Compiler_compileModuleSync__POST_R3__(moduleType);\n        var moduleDef = getNgModuleDef(moduleType);\n        var componentFactories = maybeUnwrapFn(moduleDef.declarations)\n            .reduce(function (factories, declaration) {\n            var componentDef = getComponentDef(declaration);\n            componentDef && factories.push(new ComponentFactory$1(componentDef));\n            return factories;\n        }, []);\n        return new ModuleWithComponentFactories(ngModuleFactory, componentFactories);\n    };\n    var Compiler_compileModuleAndAllComponentsSync = Compiler_compileModuleAndAllComponentsSync__POST_R3__;\n    var Compiler_compileModuleAndAllComponentsAsync__POST_R3__ = function (moduleType) {\n        return Promise.resolve(Compiler_compileModuleAndAllComponentsSync__POST_R3__(moduleType));\n    };\n    var Compiler_compileModuleAndAllComponentsAsync = Compiler_compileModuleAndAllComponentsAsync__POST_R3__;\n    /**\n     * Low-level service for running the angular compiler during runtime\n     * to create {@link ComponentFactory}s, which\n     * can later be used to create and render a Component instance.\n     *\n     * Each `@NgModule` provides an own `Compiler` to its injector,\n     * that will use the directives/pipes of the ng module for compilation\n     * of components.\n     *\n     * @publicApi\n     */\n    var Compiler = /** @class */ (function () {\n        function Compiler() {\n            /**\n             * Compiles the given NgModule and all of its components. All templates of the components listed\n             * in `entryComponents` have to be inlined.\n             */\n            this.compileModuleSync = Compiler_compileModuleSync;\n            /**\n             * Compiles the given NgModule and all of its components\n             */\n            this.compileModuleAsync = Compiler_compileModuleAsync;\n            /**\n             * Same as {@link #compileModuleSync} but also creates ComponentFactories for all components.\n             */\n            this.compileModuleAndAllComponentsSync = Compiler_compileModuleAndAllComponentsSync;\n            /**\n             * Same as {@link #compileModuleAsync} but also creates ComponentFactories for all components.\n             */\n            this.compileModuleAndAllComponentsAsync = Compiler_compileModuleAndAllComponentsAsync;\n        }\n        /**\n         * Clears all caches.\n         */\n        Compiler.prototype.clearCache = function () { };\n        /**\n         * Clears the cache for the given component/ngModule.\n         */\n        Compiler.prototype.clearCacheFor = function (type) { };\n        /**\n         * Returns the id for a given NgModule, if one is defined and known to the compiler.\n         */\n        Compiler.prototype.getModuleId = function (moduleType) { return undefined; };\n        Compiler.ngInjectableDef = ɵɵdefineInjectable({ token: Compiler, factory: function Compiler_Factory(t) { return new (t || Compiler)(); }, providedIn: null });\n        return Compiler;\n    }());\n    /**\n     * Token to provide CompilerOptions in the platform injector.\n     *\n     * @publicApi\n     */\n    var COMPILER_OPTIONS = new InjectionToken('compilerOptions');\n    /**\n     * A factory for creating a Compiler\n     *\n     * @publicApi\n     */\n    var CompilerFactory = /** @class */ (function () {\n        function CompilerFactory() {\n        }\n        return CompilerFactory;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var trace;\n    var events;\n    function detectWTF() {\n        var wtf = _global /** TODO #9100 */['wtf'];\n        if (wtf) {\n            trace = wtf['trace'];\n            if (trace) {\n                events = trace['events'];\n                return true;\n            }\n        }\n        return false;\n    }\n    function createScope(signature, flags) {\n        if (flags === void 0) { flags = null; }\n        return events.createScope(signature, flags);\n    }\n    function leave(scope, returnValue) {\n        trace.leaveScope(scope, returnValue);\n        return returnValue;\n    }\n    function startTimeRange(rangeType, action) {\n        return trace.beginTimeRange(rangeType, action);\n    }\n    function endTimeRange(range) {\n        trace.endTimeRange(range);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * True if WTF is enabled.\n     */\n    var wtfEnabled = detectWTF();\n    function noopScope(arg0, arg1) {\n        return null;\n    }\n    /**\n     * Create trace scope.\n     *\n     * Scopes must be strictly nested and are analogous to stack frames, but\n     * do not have to follow the stack frames. Instead it is recommended that they follow logical\n     * nesting. You may want to use\n     * [Event\n     * Signatures](http://google.github.io/tracing-framework/instrumenting-code.html#custom-events)\n     * as they are defined in WTF.\n     *\n     * Used to mark scope entry. The return value is used to leave the scope.\n     *\n     *     var myScope = wtfCreateScope('MyClass#myMethod(ascii someVal)');\n     *\n     *     someMethod() {\n     *        var s = myScope('Foo'); // 'Foo' gets stored in tracing UI\n     *        // DO SOME WORK HERE\n     *        return wtfLeave(s, 123); // Return value 123\n     *     }\n     *\n     * Note, adding try-finally block around the work to ensure that `wtfLeave` gets called can\n     * negatively impact the performance of your application. For this reason we recommend that\n     * you don't add them to ensure that `wtfLeave` gets called. In production `wtfLeave` is a noop and\n     * so try-finally block has no value. When debugging perf issues, skipping `wtfLeave`, do to\n     * exception, will produce incorrect trace, but presence of exception signifies logic error which\n     * needs to be fixed before the app should be profiled. Add try-finally only when you expect that\n     * an exception is expected during normal execution while profiling.\n     *\n     * @publicApi\n     * @deprecated the Web Tracing Framework is no longer supported in Angular\n     */\n    var wtfCreateScope = wtfEnabled ? createScope : function (signature, flags) { return noopScope; };\n    /**\n     * Used to mark end of Scope.\n     *\n     * - `scope` to end.\n     * - `returnValue` (optional) to be passed to the WTF.\n     *\n     * Returns the `returnValue for easy chaining.\n     * @publicApi\n     * @deprecated the Web Tracing Framework is no longer supported in Angular\n     */\n    var wtfLeave = wtfEnabled ? leave : function (s, r) { return r; };\n    /**\n     * Used to mark Async start. Async are similar to scope but they don't have to be strictly nested.\n     * The return value is used in the call to [endAsync]. Async ranges only work if WTF has been\n     * enabled.\n     *\n     *     someMethod() {\n     *        var s = wtfStartTimeRange('HTTP:GET', 'some.url');\n     *        var future = new Future.delay(5).then((_) {\n     *          wtfEndTimeRange(s);\n     *        });\n     *     }\n     * @publicApi\n     * @deprecated the Web Tracing Framework is no longer supported in Angular\n     */\n    var wtfStartTimeRange = wtfEnabled ? startTimeRange : function (rangeType, action) { return null; };\n    /**\n     * Ends a async time range operation.\n     * [range] is the return value from [wtfStartTimeRange] Async ranges only work if WTF has been\n     * enabled.\n     * @publicApi\n     * @deprecated the Web Tracing Framework is no longer supported in Angular\n     */\n    var wtfEndTimeRange = wtfEnabled ? endTimeRange : function (r) { return null; };\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var promise = (function () { return Promise.resolve(0); })();\n    function scheduleMicroTask(fn) {\n        if (typeof Zone === 'undefined') {\n            // use promise to schedule microTask instead of use Zone\n            promise.then(function () { fn && fn.apply(null, null); });\n        }\n        else {\n            Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * An injectable service for executing work inside or outside of the Angular zone.\n     *\n     * The most common use of this service is to optimize performance when starting a work consisting of\n     * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\n     * Angular. Such tasks can be kicked off via {@link #runOutsideAngular} and if needed, these tasks\n     * can reenter the Angular zone via {@link #run}.\n     *\n     * <!-- TODO: add/fix links to:\n     *   - docs explaining zones and the use of zones in Angular and change-detection\n     *   - link to runOutsideAngular/run (throughout this file!)\n     *   -->\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```\n     * import {Component, NgZone} from '@angular/core';\n     * import {NgIf} from '@angular/common';\n     *\n     * @Component({\n     *   selector: 'ng-zone-demo',\n     *   template: `\n     *     <h2>Demo: NgZone</h2>\n     *\n     *     <p>Progress: {{progress}}%</p>\n     *     <p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!</p>\n     *\n     *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\n     *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\n     *   `,\n     * })\n     * export class NgZoneDemo {\n     *   progress: number = 0;\n     *   label: string;\n     *\n     *   constructor(private _ngZone: NgZone) {}\n     *\n     *   // Loop inside the Angular zone\n     *   // so the UI DOES refresh after each setTimeout cycle\n     *   processWithinAngularZone() {\n     *     this.label = 'inside';\n     *     this.progress = 0;\n     *     this._increaseProgress(() => console.log('Inside Done!'));\n     *   }\n     *\n     *   // Loop outside of the Angular zone\n     *   // so the UI DOES NOT refresh after each setTimeout cycle\n     *   processOutsideOfAngularZone() {\n     *     this.label = 'outside';\n     *     this.progress = 0;\n     *     this._ngZone.runOutsideAngular(() => {\n     *       this._increaseProgress(() => {\n     *         // reenter the Angular zone and display done\n     *         this._ngZone.run(() => { console.log('Outside Done!'); });\n     *       });\n     *     });\n     *   }\n     *\n     *   _increaseProgress(doneCallback: () => void) {\n     *     this.progress += 1;\n     *     console.log(`Current progress: ${this.progress}%`);\n     *\n     *     if (this.progress < 100) {\n     *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);\n     *     } else {\n     *       doneCallback();\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * @publicApi\n     */\n    var NgZone = /** @class */ (function () {\n        function NgZone(_a) {\n            var _b = _a.enableLongStackTrace, enableLongStackTrace = _b === void 0 ? false : _b;\n            this.hasPendingMicrotasks = false;\n            this.hasPendingMacrotasks = false;\n            /**\n             * Whether there are no outstanding microtasks or macrotasks.\n             */\n            this.isStable = true;\n            /**\n             * Notifies when code enters Angular Zone. This gets fired first on VM Turn.\n             */\n            this.onUnstable = new EventEmitter(false);\n            /**\n             * Notifies when there is no more microtasks enqueued in the current VM Turn.\n             * This is a hint for Angular to do change detection, which may enqueue more microtasks.\n             * For this reason this event can fire multiple times per VM Turn.\n             */\n            this.onMicrotaskEmpty = new EventEmitter(false);\n            /**\n             * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which\n             * implies we are about to relinquish VM turn.\n             * This event gets called just once.\n             */\n            this.onStable = new EventEmitter(false);\n            /**\n             * Notifies that an error has been delivered.\n             */\n            this.onError = new EventEmitter(false);\n            if (typeof Zone == 'undefined') {\n                throw new Error(\"In this configuration Angular requires Zone.js\");\n            }\n            Zone.assertZonePatched();\n            var self = this;\n            self._nesting = 0;\n            self._outer = self._inner = Zone.current;\n            if (Zone['wtfZoneSpec']) {\n                self._inner = self._inner.fork(Zone['wtfZoneSpec']);\n            }\n            if (Zone['TaskTrackingZoneSpec']) {\n                self._inner = self._inner.fork(new Zone['TaskTrackingZoneSpec']);\n            }\n            if (enableLongStackTrace && Zone['longStackTraceZoneSpec']) {\n                self._inner = self._inner.fork(Zone['longStackTraceZoneSpec']);\n            }\n            forkInnerZoneWithAngularBehavior(self);\n        }\n        NgZone.isInAngularZone = function () { return Zone.current.get('isAngularZone') === true; };\n        NgZone.assertInAngularZone = function () {\n            if (!NgZone.isInAngularZone()) {\n                throw new Error('Expected to be in Angular Zone, but it is not!');\n            }\n        };\n        NgZone.assertNotInAngularZone = function () {\n            if (NgZone.isInAngularZone()) {\n                throw new Error('Expected to not be in Angular Zone, but it is!');\n            }\n        };\n        /**\n         * Executes the `fn` function synchronously within the Angular zone and returns value returned by\n         * the function.\n         *\n         * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n         * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\n         *\n         * Any future tasks or microtasks scheduled from within this function will continue executing from\n         * within the Angular zone.\n         *\n         * If a synchronous error happens it will be rethrown and not reported via `onError`.\n         */\n        NgZone.prototype.run = function (fn, applyThis, applyArgs) {\n            return this._inner.run(fn, applyThis, applyArgs);\n        };\n        /**\n         * Executes the `fn` function synchronously within the Angular zone as a task and returns value\n         * returned by the function.\n         *\n         * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n         * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\n         *\n         * Any future tasks or microtasks scheduled from within this function will continue executing from\n         * within the Angular zone.\n         *\n         * If a synchronous error happens it will be rethrown and not reported via `onError`.\n         */\n        NgZone.prototype.runTask = function (fn, applyThis, applyArgs, name) {\n            var zone = this._inner;\n            var task = zone.scheduleEventTask('NgZoneEvent: ' + name, fn, EMPTY_PAYLOAD, noop, noop);\n            try {\n                return zone.runTask(task, applyThis, applyArgs);\n            }\n            finally {\n                zone.cancelTask(task);\n            }\n        };\n        /**\n         * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\n         * rethrown.\n         */\n        NgZone.prototype.runGuarded = function (fn, applyThis, applyArgs) {\n            return this._inner.runGuarded(fn, applyThis, applyArgs);\n        };\n        /**\n         * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\n         * the function.\n         *\n         * Running functions via {@link #runOutsideAngular} allows you to escape Angular's zone and do\n         * work that\n         * doesn't trigger Angular change-detection or is subject to Angular's error handling.\n         *\n         * Any future tasks or microtasks scheduled from within this function will continue executing from\n         * outside of the Angular zone.\n         *\n         * Use {@link #run} to reenter the Angular zone and do work that updates the application model.\n         */\n        NgZone.prototype.runOutsideAngular = function (fn) {\n            return this._outer.run(fn);\n        };\n        return NgZone;\n    }());\n    function noop() { }\n    var EMPTY_PAYLOAD = {};\n    function checkStable(zone) {\n        if (zone._nesting == 0 && !zone.hasPendingMicrotasks && !zone.isStable) {\n            try {\n                zone._nesting++;\n                zone.onMicrotaskEmpty.emit(null);\n            }\n            finally {\n                zone._nesting--;\n                if (!zone.hasPendingMicrotasks) {\n                    try {\n                        zone.runOutsideAngular(function () { return zone.onStable.emit(null); });\n                    }\n                    finally {\n                        zone.isStable = true;\n                    }\n                }\n            }\n        }\n    }\n    function forkInnerZoneWithAngularBehavior(zone) {\n        zone._inner = zone._inner.fork({\n            name: 'angular',\n            properties: { 'isAngularZone': true },\n            onInvokeTask: function (delegate, current, target, task, applyThis, applyArgs) {\n                try {\n                    onEnter(zone);\n                    return delegate.invokeTask(target, task, applyThis, applyArgs);\n                }\n                finally {\n                    onLeave(zone);\n                }\n            },\n            onInvoke: function (delegate, current, target, callback, applyThis, applyArgs, source) {\n                try {\n                    onEnter(zone);\n                    return delegate.invoke(target, callback, applyThis, applyArgs, source);\n                }\n                finally {\n                    onLeave(zone);\n                }\n            },\n            onHasTask: function (delegate, current, target, hasTaskState) {\n                delegate.hasTask(target, hasTaskState);\n                if (current === target) {\n                    // We are only interested in hasTask events which originate from our zone\n                    // (A child hasTask event is not interesting to us)\n                    if (hasTaskState.change == 'microTask') {\n                        zone.hasPendingMicrotasks = hasTaskState.microTask;\n                        checkStable(zone);\n                    }\n                    else if (hasTaskState.change == 'macroTask') {\n                        zone.hasPendingMacrotasks = hasTaskState.macroTask;\n                    }\n                }\n            },\n            onHandleError: function (delegate, current, target, error) {\n                delegate.handleError(target, error);\n                zone.runOutsideAngular(function () { return zone.onError.emit(error); });\n                return false;\n            }\n        });\n    }\n    function onEnter(zone) {\n        zone._nesting++;\n        if (zone.isStable) {\n            zone.isStable = false;\n            zone.onUnstable.emit(null);\n        }\n    }\n    function onLeave(zone) {\n        zone._nesting--;\n        checkStable(zone);\n    }\n    /**\n     * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls\n     * to framework to perform rendering.\n     */\n    var NoopNgZone = /** @class */ (function () {\n        function NoopNgZone() {\n            this.hasPendingMicrotasks = false;\n            this.hasPendingMacrotasks = false;\n            this.isStable = true;\n            this.onUnstable = new EventEmitter();\n            this.onMicrotaskEmpty = new EventEmitter();\n            this.onStable = new EventEmitter();\n            this.onError = new EventEmitter();\n        }\n        NoopNgZone.prototype.run = function (fn) { return fn(); };\n        NoopNgZone.prototype.runGuarded = function (fn) { return fn(); };\n        NoopNgZone.prototype.runOutsideAngular = function (fn) { return fn(); };\n        NoopNgZone.prototype.runTask = function (fn) { return fn(); };\n        return NoopNgZone;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * The Testability service provides testing hooks that can be accessed from\n     * the browser and by services such as Protractor. Each bootstrapped Angular\n     * application on the page will have an instance of Testability.\n     * @publicApi\n     */\n    var Testability = /** @class */ (function () {\n        function Testability(_ngZone) {\n            var _this = this;\n            this._ngZone = _ngZone;\n            this._pendingCount = 0;\n            this._isZoneStable = true;\n            /**\n             * Whether any work was done since the last 'whenStable' callback. This is\n             * useful to detect if this could have potentially destabilized another\n             * component while it is stabilizing.\n             * @internal\n             */\n            this._didWork = false;\n            this._callbacks = [];\n            this.taskTrackingZone = null;\n            this._watchAngularEvents();\n            _ngZone.run(function () {\n                _this.taskTrackingZone =\n                    typeof Zone == 'undefined' ? null : Zone.current.get('TaskTrackingZone');\n            });\n        }\n        Testability.prototype._watchAngularEvents = function () {\n            var _this = this;\n            this._ngZone.onUnstable.subscribe({\n                next: function () {\n                    _this._didWork = true;\n                    _this._isZoneStable = false;\n                }\n            });\n            this._ngZone.runOutsideAngular(function () {\n                _this._ngZone.onStable.subscribe({\n                    next: function () {\n                        NgZone.assertNotInAngularZone();\n                        scheduleMicroTask(function () {\n                            _this._isZoneStable = true;\n                            _this._runCallbacksIfReady();\n                        });\n                    }\n                });\n            });\n        };\n        /**\n         * Increases the number of pending request\n         * @deprecated pending requests are now tracked with zones.\n         */\n        Testability.prototype.increasePendingRequestCount = function () {\n            this._pendingCount += 1;\n            this._didWork = true;\n            return this._pendingCount;\n        };\n        /**\n         * Decreases the number of pending request\n         * @deprecated pending requests are now tracked with zones\n         */\n        Testability.prototype.decreasePendingRequestCount = function () {\n            this._pendingCount -= 1;\n            if (this._pendingCount < 0) {\n                throw new Error('pending async requests below zero');\n            }\n            this._runCallbacksIfReady();\n            return this._pendingCount;\n        };\n        /**\n         * Whether an associated application is stable\n         */\n        Testability.prototype.isStable = function () {\n            return this._isZoneStable && this._pendingCount === 0 && !this._ngZone.hasPendingMacrotasks;\n        };\n        Testability.prototype._runCallbacksIfReady = function () {\n            var _this = this;\n            if (this.isStable()) {\n                // Schedules the call backs in a new frame so that it is always async.\n                scheduleMicroTask(function () {\n                    while (_this._callbacks.length !== 0) {\n                        var cb = _this._callbacks.pop();\n                        clearTimeout(cb.timeoutId);\n                        cb.doneCb(_this._didWork);\n                    }\n                    _this._didWork = false;\n                });\n            }\n            else {\n                // Still not stable, send updates.\n                var pending_1 = this.getPendingTasks();\n                this._callbacks = this._callbacks.filter(function (cb) {\n                    if (cb.updateCb && cb.updateCb(pending_1)) {\n                        clearTimeout(cb.timeoutId);\n                        return false;\n                    }\n                    return true;\n                });\n                this._didWork = true;\n            }\n        };\n        Testability.prototype.getPendingTasks = function () {\n            if (!this.taskTrackingZone) {\n                return [];\n            }\n            // Copy the tasks data so that we don't leak tasks.\n            return this.taskTrackingZone.macroTasks.map(function (t) {\n                return {\n                    source: t.source,\n                    // From TaskTrackingZone:\n                    // https://github.com/angular/zone.js/blob/master/lib/zone-spec/task-tracking.ts#L40\n                    creationLocation: t.creationLocation,\n                    data: t.data\n                };\n            });\n        };\n        Testability.prototype.addCallback = function (cb, timeout, updateCb) {\n            var _this = this;\n            var timeoutId = -1;\n            if (timeout && timeout > 0) {\n                timeoutId = setTimeout(function () {\n                    _this._callbacks = _this._callbacks.filter(function (cb) { return cb.timeoutId !== timeoutId; });\n                    cb(_this._didWork, _this.getPendingTasks());\n                }, timeout);\n            }\n            this._callbacks.push({ doneCb: cb, timeoutId: timeoutId, updateCb: updateCb });\n        };\n        /**\n         * Wait for the application to be stable with a timeout. If the timeout is reached before that\n         * happens, the callback receives a list of the macro tasks that were pending, otherwise null.\n         *\n         * @param doneCb The callback to invoke when Angular is stable or the timeout expires\n         *    whichever comes first.\n         * @param timeout Optional. The maximum time to wait for Angular to become stable. If not\n         *    specified, whenStable() will wait forever.\n         * @param updateCb Optional. If specified, this callback will be invoked whenever the set of\n         *    pending macrotasks changes. If this callback returns true doneCb will not be invoked\n         *    and no further updates will be issued.\n         */\n        Testability.prototype.whenStable = function (doneCb, timeout, updateCb) {\n            if (updateCb && !this.taskTrackingZone) {\n                throw new Error('Task tracking zone is required when passing an update callback to ' +\n                    'whenStable(). Is \"zone.js/dist/task-tracking.js\" loaded?');\n            }\n            // These arguments are 'Function' above to keep the public API simple.\n            this.addCallback(doneCb, timeout, updateCb);\n            this._runCallbacksIfReady();\n        };\n        /**\n         * Get the number of pending requests\n         * @deprecated pending requests are now tracked with zones\n         */\n        Testability.prototype.getPendingRequestCount = function () { return this._pendingCount; };\n        /**\n         * Find providers by name\n         * @param using The root element to search from\n         * @param provider The name of binding variable\n         * @param exactMatch Whether using exactMatch\n         */\n        Testability.prototype.findProviders = function (using, provider, exactMatch) {\n            // TODO(juliemr): implement.\n            return [];\n        };\n        Testability.ngInjectableDef = ɵɵdefineInjectable({ token: Testability, factory: function Testability_Factory(t) { return new (t || Testability)(ɵɵinject(NgZone)); }, providedIn: null });\n        return Testability;\n    }());\n    /**\n     * A global registry of {@link Testability} instances for specific elements.\n     * @publicApi\n     */\n    var TestabilityRegistry = /** @class */ (function () {\n        function TestabilityRegistry() {\n            /** @internal */\n            this._applications = new Map();\n            _testabilityGetter.addToWindow(this);\n        }\n        /**\n         * Registers an application with a testability hook so that it can be tracked\n         * @param token token of application, root element\n         * @param testability Testability hook\n         */\n        TestabilityRegistry.prototype.registerApplication = function (token, testability) {\n            this._applications.set(token, testability);\n        };\n        /**\n         * Unregisters an application.\n         * @param token token of application, root element\n         */\n        TestabilityRegistry.prototype.unregisterApplication = function (token) { this._applications.delete(token); };\n        /**\n         * Unregisters all applications\n         */\n        TestabilityRegistry.prototype.unregisterAllApplications = function () { this._applications.clear(); };\n        /**\n         * Get a testability hook associated with the application\n         * @param elem root element\n         */\n        TestabilityRegistry.prototype.getTestability = function (elem) { return this._applications.get(elem) || null; };\n        /**\n         * Get all registered testabilities\n         */\n        TestabilityRegistry.prototype.getAllTestabilities = function () { return Array.from(this._applications.values()); };\n        /**\n         * Get all registered applications(root elements)\n         */\n        TestabilityRegistry.prototype.getAllRootElements = function () { return Array.from(this._applications.keys()); };\n        /**\n         * Find testability of a node in the Tree\n         * @param elem node\n         * @param findInAncestors whether finding testability in ancestors if testability was not found in\n         * current node\n         */\n        TestabilityRegistry.prototype.findTestabilityInTree = function (elem, findInAncestors) {\n            if (findInAncestors === void 0) { findInAncestors = true; }\n            return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);\n        };\n        TestabilityRegistry.ngInjectableDef = ɵɵdefineInjectable({ token: TestabilityRegistry, factory: function TestabilityRegistry_Factory(t) { return new (t || TestabilityRegistry)(); }, providedIn: null });\n        return TestabilityRegistry;\n    }());\n    var _NoopGetTestability = /** @class */ (function () {\n        function _NoopGetTestability() {\n        }\n        _NoopGetTestability.prototype.addToWindow = function (registry) { };\n        _NoopGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {\n            return null;\n        };\n        return _NoopGetTestability;\n    }());\n    /**\n     * Set the {@link GetTestability} implementation used by the Angular testing framework.\n     * @publicApi\n     */\n    function setTestabilityGetter(getter) {\n        _testabilityGetter = getter;\n    }\n    var _testabilityGetter = new _NoopGetTestability();\n\n    var _platform;\n    var compileNgModuleFactory = compileNgModuleFactory__POST_R3__;\n    function compileNgModuleFactory__POST_R3__(injector, options, moduleType) {\n        ngDevMode && assertNgModuleType(moduleType);\n        var moduleFactory = new NgModuleFactory$1(moduleType);\n        if (isComponentResourceResolutionQueueEmpty()) {\n            return Promise.resolve(moduleFactory);\n        }\n        var compilerOptions = injector.get(COMPILER_OPTIONS, []).concat(options);\n        var compilerProviders = _mergeArrays(compilerOptions.map(function (o) { return o.providers; }));\n        // In case there are no compiler providers, we just return the module factory as\n        // there won't be any resource loader. This can happen with Ivy, because AOT compiled\n        // modules can be still passed through \"bootstrapModule\". In that case we shouldn't\n        // unnecessarily require the JIT compiler.\n        if (compilerProviders.length === 0) {\n            return Promise.resolve(moduleFactory);\n        }\n        var compiler = getCompilerFacade();\n        var compilerInjector = Injector.create({ providers: compilerProviders });\n        var resourceLoader = compilerInjector.get(compiler.ResourceLoader);\n        // The resource loader can also return a string while the \"resolveComponentResources\"\n        // always expects a promise. Therefore we need to wrap the returned value in a promise.\n        return resolveComponentResources(function (url) { return Promise.resolve(resourceLoader.get(url)); })\n            .then(function () { return moduleFactory; });\n    }\n    var isBoundToModule = isBoundToModule__POST_R3__;\n    function isBoundToModule__POST_R3__(cf) {\n        return cf.isBoundToModule;\n    }\n    var ALLOW_MULTIPLE_PLATFORMS = new InjectionToken('AllowMultipleToken');\n    /**\n     * A token for third-party components that can register themselves with NgProbe.\n     *\n     * @publicApi\n     */\n    var NgProbeToken = /** @class */ (function () {\n        function NgProbeToken(name, token) {\n            this.name = name;\n            this.token = token;\n        }\n        return NgProbeToken;\n    }());\n    /**\n     * Creates a platform.\n     * Platforms have to be eagerly created via this function.\n     *\n     * @publicApi\n     */\n    function createPlatform(injector) {\n        if (_platform && !_platform.destroyed &&\n            !_platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n            throw new Error('There can be only one platform. Destroy the previous one to create a new one.');\n        }\n        _platform = injector.get(PlatformRef);\n        var inits = injector.get(PLATFORM_INITIALIZER, null);\n        if (inits)\n            inits.forEach(function (init) { return init(); });\n        return _platform;\n    }\n    /**\n     * Creates a factory for a platform\n     *\n     * @publicApi\n     */\n    function createPlatformFactory(parentPlatformFactory, name, providers) {\n        if (providers === void 0) { providers = []; }\n        var desc = \"Platform: \" + name;\n        var marker = new InjectionToken(desc);\n        return function (extraProviders) {\n            if (extraProviders === void 0) { extraProviders = []; }\n            var platform = getPlatform();\n            if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n                if (parentPlatformFactory) {\n                    parentPlatformFactory(providers.concat(extraProviders).concat({ provide: marker, useValue: true }));\n                }\n                else {\n                    var injectedProviders = providers.concat(extraProviders).concat({ provide: marker, useValue: true });\n                    createPlatform(Injector.create({ providers: injectedProviders, name: desc }));\n                }\n            }\n            return assertPlatform(marker);\n        };\n    }\n    /**\n     * Checks that there currently is a platform which contains the given token as a provider.\n     *\n     * @publicApi\n     */\n    function assertPlatform(requiredToken) {\n        var platform = getPlatform();\n        if (!platform) {\n            throw new Error('No platform exists!');\n        }\n        if (!platform.injector.get(requiredToken, null)) {\n            throw new Error('A platform with a different configuration has been created. Please destroy it first.');\n        }\n        return platform;\n    }\n    /**\n     * Destroy the existing platform.\n     *\n     * @publicApi\n     */\n    function destroyPlatform() {\n        if (_platform && !_platform.destroyed) {\n            _platform.destroy();\n        }\n    }\n    /**\n     * Returns the current platform.\n     *\n     * @publicApi\n     */\n    function getPlatform() {\n        return _platform && !_platform.destroyed ? _platform : null;\n    }\n    /**\n     * The Angular platform is the entry point for Angular on a web page. Each page\n     * has exactly one platform, and services (such as reflection) which are common\n     * to every Angular application running on the page are bound in its scope.\n     *\n     * A page's platform is initialized implicitly when a platform is created via a platform factory\n     * (e.g. {@link platformBrowser}), or explicitly by calling the {@link createPlatform} function.\n     *\n     * @publicApi\n     */\n    var PlatformRef = /** @class */ (function () {\n        /** @internal */\n        function PlatformRef(_injector) {\n            this._injector = _injector;\n            this._modules = [];\n            this._destroyListeners = [];\n            this._destroyed = false;\n        }\n        /**\n         * Creates an instance of an `@NgModule` for the given platform\n         * for offline compilation.\n         *\n         * @usageNotes\n         * ### Simple Example\n         *\n         * ```typescript\n         * my_module.ts:\n         *\n         * @NgModule({\n         *   imports: [BrowserModule]\n         * })\n         * class MyModule {}\n         *\n         * main.ts:\n         * import {MyModuleNgFactory} from './my_module.ngfactory';\n         * import {platformBrowser} from '@angular/platform-browser';\n         *\n         * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\n         * ```\n         */\n        PlatformRef.prototype.bootstrapModuleFactory = function (moduleFactory, options) {\n            var _this = this;\n            // Note: We need to create the NgZone _before_ we instantiate the module,\n            // as instantiating the module creates some providers eagerly.\n            // So we create a mini parent injector that just contains the new NgZone and\n            // pass that as parent to the NgModuleFactory.\n            var ngZoneOption = options ? options.ngZone : undefined;\n            var ngZone = getNgZone(ngZoneOption);\n            var providers = [{ provide: NgZone, useValue: ngZone }];\n            // Attention: Don't use ApplicationRef.run here,\n            // as we want to be sure that all possible constructor calls are inside `ngZone.run`!\n            return ngZone.run(function () {\n                var ngZoneInjector = Injector.create({ providers: providers, parent: _this.injector, name: moduleFactory.moduleType.name });\n                var moduleRef = moduleFactory.create(ngZoneInjector);\n                var exceptionHandler = moduleRef.injector.get(ErrorHandler, null);\n                if (!exceptionHandler) {\n                    throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');\n                }\n                // If the `LOCALE_ID` provider is defined at bootstrap we set the value for runtime i18n (ivy)\n                var localeId = moduleRef.injector.get(LOCALE_ID$1, DEFAULT_LOCALE_ID);\n                setLocaleId(localeId);\n                moduleRef.onDestroy(function () { return remove(_this._modules, moduleRef); });\n                ngZone.runOutsideAngular(function () { return ngZone.onError.subscribe({ next: function (error) { exceptionHandler.handleError(error); } }); });\n                return _callAndReportToErrorHandler(exceptionHandler, ngZone, function () {\n                    var initStatus = moduleRef.injector.get(ApplicationInitStatus);\n                    initStatus.runInitializers();\n                    return initStatus.donePromise.then(function () {\n                        _this._moduleDoBootstrap(moduleRef);\n                        return moduleRef;\n                    });\n                });\n            });\n        };\n        /**\n         * Creates an instance of an `@NgModule` for a given platform using the given runtime compiler.\n         *\n         * @usageNotes\n         * ### Simple Example\n         *\n         * ```typescript\n         * @NgModule({\n         *   imports: [BrowserModule]\n         * })\n         * class MyModule {}\n         *\n         * let moduleRef = platformBrowser().bootstrapModule(MyModule);\n         * ```\n         *\n         */\n        PlatformRef.prototype.bootstrapModule = function (moduleType, compilerOptions) {\n            var _this = this;\n            if (compilerOptions === void 0) { compilerOptions = []; }\n            var options = optionsReducer({}, compilerOptions);\n            return compileNgModuleFactory(this.injector, options, moduleType)\n                .then(function (moduleFactory) { return _this.bootstrapModuleFactory(moduleFactory, options); });\n        };\n        PlatformRef.prototype._moduleDoBootstrap = function (moduleRef) {\n            var appRef = moduleRef.injector.get(ApplicationRef);\n            if (moduleRef._bootstrapComponents.length > 0) {\n                moduleRef._bootstrapComponents.forEach(function (f) { return appRef.bootstrap(f); });\n            }\n            else if (moduleRef.instance.ngDoBootstrap) {\n                moduleRef.instance.ngDoBootstrap(appRef);\n            }\n            else {\n                throw new Error(\"The module \" + stringify(moduleRef.instance.constructor) + \" was bootstrapped, but it does not declare \\\"@NgModule.bootstrap\\\" components nor a \\\"ngDoBootstrap\\\" method. \" +\n                    \"Please define one of these.\");\n            }\n            this._modules.push(moduleRef);\n        };\n        /**\n         * Register a listener to be called when the platform is disposed.\n         */\n        PlatformRef.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback); };\n        Object.defineProperty(PlatformRef.prototype, \"injector\", {\n            /**\n             * Retrieve the platform {@link Injector}, which is the parent injector for\n             * every Angular application on the page and provides singleton providers.\n             */\n            get: function () { return this._injector; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Destroy the Angular platform and all Angular applications on the page.\n         */\n        PlatformRef.prototype.destroy = function () {\n            if (this._destroyed) {\n                throw new Error('The platform has already been destroyed!');\n            }\n            this._modules.slice().forEach(function (module) { return module.destroy(); });\n            this._destroyListeners.forEach(function (listener) { return listener(); });\n            this._destroyed = true;\n        };\n        Object.defineProperty(PlatformRef.prototype, \"destroyed\", {\n            get: function () { return this._destroyed; },\n            enumerable: true,\n            configurable: true\n        });\n        PlatformRef.ngInjectableDef = ɵɵdefineInjectable({ token: PlatformRef, factory: function PlatformRef_Factory(t) { return new (t || PlatformRef)(ɵɵinject(Injector)); }, providedIn: null });\n        return PlatformRef;\n    }());\n    function getNgZone(ngZoneOption) {\n        var ngZone;\n        if (ngZoneOption === 'noop') {\n            ngZone = new NoopNgZone();\n        }\n        else {\n            ngZone = (ngZoneOption === 'zone.js' ? undefined : ngZoneOption) ||\n                new NgZone({ enableLongStackTrace: isDevMode() });\n        }\n        return ngZone;\n    }\n    function _callAndReportToErrorHandler(errorHandler, ngZone, callback) {\n        try {\n            var result = callback();\n            if (isPromise(result)) {\n                return result.catch(function (e) {\n                    ngZone.runOutsideAngular(function () { return errorHandler.handleError(e); });\n                    // rethrow as the exception handler might not do it\n                    throw e;\n                });\n            }\n            return result;\n        }\n        catch (e) {\n            ngZone.runOutsideAngular(function () { return errorHandler.handleError(e); });\n            // rethrow as the exception handler might not do it\n            throw e;\n        }\n    }\n    function optionsReducer(dst, objs) {\n        if (Array.isArray(objs)) {\n            dst = objs.reduce(optionsReducer, dst);\n        }\n        else {\n            dst = __assign({}, dst, objs);\n        }\n        return dst;\n    }\n    /**\n     * A reference to an Angular application running on a page.\n     *\n     * @usageNotes\n     *\n     * {@a is-stable-examples}\n     * ### isStable examples and caveats\n     *\n     * Note two important points about `isStable`, demonstrated in the examples below:\n     * - the application will never be stable if you start any kind\n     * of recurrent asynchronous task when the application starts\n     * (for example for a polling process, started with a `setInterval`, a `setTimeout`\n     * or using RxJS operators like `interval`);\n     * - the `isStable` Observable runs outside of the Angular zone.\n     *\n     * Let's imagine that you start a recurrent task\n     * (here incrementing a counter, using RxJS `interval`),\n     * and at the same time subscribe to `isStable`.\n     *\n     * ```\n     * constructor(appRef: ApplicationRef) {\n     *   appRef.isStable.pipe(\n     *      filter(stable => stable)\n     *   ).subscribe(() => console.log('App is stable now');\n     *   interval(1000).subscribe(counter => console.log(counter));\n     * }\n     * ```\n     * In this example, `isStable` will never emit `true`,\n     * and the trace \"App is stable now\" will never get logged.\n     *\n     * If you want to execute something when the app is stable,\n     * you have to wait for the application to be stable\n     * before starting your polling process.\n     *\n     * ```\n     * constructor(appRef: ApplicationRef) {\n     *   appRef.isStable.pipe(\n     *     first(stable => stable),\n     *     tap(stable => console.log('App is stable now')),\n     *     switchMap(() => interval(1000))\n     *   ).subscribe(counter => console.log(counter));\n     * }\n     * ```\n     * In this example, the trace \"App is stable now\" will be logged\n     * and then the counter starts incrementing every second.\n     *\n     * Note also that this Observable runs outside of the Angular zone,\n     * which means that the code in the subscription\n     * to this Observable will not trigger the change detection.\n     *\n     * Let's imagine that instead of logging the counter value,\n     * you update a field of your component\n     * and display it in its template.\n     *\n     * ```\n     * constructor(appRef: ApplicationRef) {\n     *   appRef.isStable.pipe(\n     *     first(stable => stable),\n     *     switchMap(() => interval(1000))\n     *   ).subscribe(counter => this.value = counter);\n     * }\n     * ```\n     * As the `isStable` Observable runs outside the zone,\n     * the `value` field will be updated properly,\n     * but the template will not be refreshed!\n     *\n     * You'll have to manually trigger the change detection to update the template.\n     *\n     * ```\n     * constructor(appRef: ApplicationRef, cd: ChangeDetectorRef) {\n     *   appRef.isStable.pipe(\n     *     first(stable => stable),\n     *     switchMap(() => interval(1000))\n     *   ).subscribe(counter => {\n     *     this.value = counter;\n     *     cd.detectChanges();\n     *   });\n     * }\n     * ```\n     *\n     * Or make the subscription callback run inside the zone.\n     *\n     * ```\n     * constructor(appRef: ApplicationRef, zone: NgZone) {\n     *   appRef.isStable.pipe(\n     *     first(stable => stable),\n     *     switchMap(() => interval(1000))\n     *   ).subscribe(counter => zone.run(() => this.value = counter));\n     * }\n     * ```\n     *\n     * @publicApi\n     */\n    var ApplicationRef = /** @class */ (function () {\n        /** @internal */\n        function ApplicationRef(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus) {\n            var _this = this;\n            this._zone = _zone;\n            this._console = _console;\n            this._injector = _injector;\n            this._exceptionHandler = _exceptionHandler;\n            this._componentFactoryResolver = _componentFactoryResolver;\n            this._initStatus = _initStatus;\n            this._bootstrapListeners = [];\n            this._views = [];\n            this._runningTick = false;\n            this._enforceNoNewChanges = false;\n            this._stable = true;\n            /**\n             * Get a list of component types registered to this application.\n             * This list is populated even before the component is created.\n             */\n            this.componentTypes = [];\n            /**\n             * Get a list of components registered to this application.\n             */\n            this.components = [];\n            this._enforceNoNewChanges = isDevMode();\n            this._zone.onMicrotaskEmpty.subscribe({ next: function () { _this._zone.run(function () { _this.tick(); }); } });\n            var isCurrentlyStable = new rxjs.Observable(function (observer) {\n                _this._stable = _this._zone.isStable && !_this._zone.hasPendingMacrotasks &&\n                    !_this._zone.hasPendingMicrotasks;\n                _this._zone.runOutsideAngular(function () {\n                    observer.next(_this._stable);\n                    observer.complete();\n                });\n            });\n            var isStable = new rxjs.Observable(function (observer) {\n                // Create the subscription to onStable outside the Angular Zone so that\n                // the callback is run outside the Angular Zone.\n                var stableSub;\n                _this._zone.runOutsideAngular(function () {\n                    stableSub = _this._zone.onStable.subscribe(function () {\n                        NgZone.assertNotInAngularZone();\n                        // Check whether there are no pending macro/micro tasks in the next tick\n                        // to allow for NgZone to update the state.\n                        scheduleMicroTask(function () {\n                            if (!_this._stable && !_this._zone.hasPendingMacrotasks &&\n                                !_this._zone.hasPendingMicrotasks) {\n                                _this._stable = true;\n                                observer.next(true);\n                            }\n                        });\n                    });\n                });\n                var unstableSub = _this._zone.onUnstable.subscribe(function () {\n                    NgZone.assertInAngularZone();\n                    if (_this._stable) {\n                        _this._stable = false;\n                        _this._zone.runOutsideAngular(function () { observer.next(false); });\n                    }\n                });\n                return function () {\n                    stableSub.unsubscribe();\n                    unstableSub.unsubscribe();\n                };\n            });\n            this.isStable =\n                rxjs.merge(isCurrentlyStable, isStable.pipe(operators.share()));\n        }\n        /**\n         * Bootstrap a new component at the root level of the application.\n         *\n         * @usageNotes\n         * ### Bootstrap process\n         *\n         * When bootstrapping a new root component into an application, Angular mounts the\n         * specified application component onto DOM elements identified by the componentType's\n         * selector and kicks off automatic change detection to finish initializing the component.\n         *\n         * Optionally, a component can be mounted onto a DOM element that does not match the\n         * componentType's selector.\n         *\n         * ### Example\n         * {@example core/ts/platform/platform.ts region='longform'}\n         */\n        ApplicationRef.prototype.bootstrap = function (componentOrFactory, rootSelectorOrNode) {\n            var _this = this;\n            if (!this._initStatus.done) {\n                throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');\n            }\n            var componentFactory;\n            if (componentOrFactory instanceof ComponentFactory) {\n                componentFactory = componentOrFactory;\n            }\n            else {\n                componentFactory =\n                    this._componentFactoryResolver.resolveComponentFactory(componentOrFactory);\n            }\n            this.componentTypes.push(componentFactory.componentType);\n            // Create a factory associated with the current module if it's not bound to some other\n            var ngModule = isBoundToModule(componentFactory) ? null : this._injector.get(NgModuleRef);\n            var selectorOrNode = rootSelectorOrNode || componentFactory.selector;\n            var compRef = componentFactory.create(Injector.NULL, [], selectorOrNode, ngModule);\n            compRef.onDestroy(function () { _this._unloadComponent(compRef); });\n            var testability = compRef.injector.get(Testability, null);\n            if (testability) {\n                compRef.injector.get(TestabilityRegistry)\n                    .registerApplication(compRef.location.nativeElement, testability);\n            }\n            this._loadComponent(compRef);\n            if (isDevMode()) {\n                this._console.log(\"Angular is running in the development mode. Call enableProdMode() to enable the production mode.\");\n            }\n            return compRef;\n        };\n        /**\n         * Invoke this method to explicitly process change detection and its side-effects.\n         *\n         * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n         * further changes are detected. If additional changes are picked up during this second cycle,\n         * bindings in the app have side-effects that cannot be resolved in a single change detection\n         * pass.\n         * In this case, Angular throws an error, since an Angular application can only have one change\n         * detection pass during which all change detection must complete.\n         */\n        ApplicationRef.prototype.tick = function () {\n            var _this = this;\n            var e_1, _a, e_2, _b;\n            if (this._runningTick) {\n                throw new Error('ApplicationRef.tick is called recursively');\n            }\n            var scope = ApplicationRef._tickScope();\n            try {\n                this._runningTick = true;\n                try {\n                    for (var _c = __values(this._views), _d = _c.next(); !_d.done; _d = _c.next()) {\n                        var view = _d.value;\n                        view.detectChanges();\n                    }\n                }\n                catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                finally {\n                    try {\n                        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n                    }\n                    finally { if (e_1) throw e_1.error; }\n                }\n                if (this._enforceNoNewChanges) {\n                    try {\n                        for (var _e = __values(this._views), _f = _e.next(); !_f.done; _f = _e.next()) {\n                            var view = _f.value;\n                            view.checkNoChanges();\n                        }\n                    }\n                    catch (e_2_1) { e_2 = { error: e_2_1 }; }\n                    finally {\n                        try {\n                            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n                        }\n                        finally { if (e_2) throw e_2.error; }\n                    }\n                }\n            }\n            catch (e) {\n                // Attention: Don't rethrow as it could cancel subscriptions to Observables!\n                this._zone.runOutsideAngular(function () { return _this._exceptionHandler.handleError(e); });\n            }\n            finally {\n                this._runningTick = false;\n                wtfLeave(scope);\n            }\n        };\n        /**\n         * Attaches a view so that it will be dirty checked.\n         * The view will be automatically detached when it is destroyed.\n         * This will throw if the view is already attached to a ViewContainer.\n         */\n        ApplicationRef.prototype.attachView = function (viewRef) {\n            var view = viewRef;\n            this._views.push(view);\n            view.attachToAppRef(this);\n        };\n        /**\n         * Detaches a view from dirty checking again.\n         */\n        ApplicationRef.prototype.detachView = function (viewRef) {\n            var view = viewRef;\n            remove(this._views, view);\n            view.detachFromAppRef();\n        };\n        ApplicationRef.prototype._loadComponent = function (componentRef) {\n            this.attachView(componentRef.hostView);\n            this.tick();\n            this.components.push(componentRef);\n            // Get the listeners lazily to prevent DI cycles.\n            var listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);\n            listeners.forEach(function (listener) { return listener(componentRef); });\n        };\n        ApplicationRef.prototype._unloadComponent = function (componentRef) {\n            this.detachView(componentRef.hostView);\n            remove(this.components, componentRef);\n        };\n        /** @internal */\n        ApplicationRef.prototype.ngOnDestroy = function () {\n            // TODO(alxhub): Dispose of the NgZone.\n            this._views.slice().forEach(function (view) { return view.destroy(); });\n        };\n        Object.defineProperty(ApplicationRef.prototype, \"viewCount\", {\n            /**\n             * Returns the number of attached views.\n             */\n            get: function () { return this._views.length; },\n            enumerable: true,\n            configurable: true\n        });\n        /** @internal */\n        ApplicationRef._tickScope = wtfCreateScope('ApplicationRef#tick()');\n        ApplicationRef.ngInjectableDef = ɵɵdefineInjectable({ token: ApplicationRef, factory: function ApplicationRef_Factory(t) { return new (t || ApplicationRef)(ɵɵinject(NgZone), ɵɵinject(Console), ɵɵinject(Injector), ɵɵinject(ErrorHandler), ɵɵinject(ComponentFactoryResolver), ɵɵinject(ApplicationInitStatus)); }, providedIn: null });\n        return ApplicationRef;\n    }());\n    function remove(list, el) {\n        var index = list.indexOf(el);\n        if (index > -1) {\n            list.splice(index, 1);\n        }\n    }\n    function _mergeArrays(parts) {\n        var result = [];\n        parts.forEach(function (part) { return part && result.push.apply(result, __spread(part)); });\n        return result;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Used to load ng module factories.\n     *\n     * @publicApi\n     * @deprecated the `string` form of `loadChildren` is deprecated, and `NgModuleFactoryLoader` is\n     * part of its implementation. See `LoadChildren` for more details.\n     */\n    var NgModuleFactoryLoader = /** @class */ (function () {\n        function NgModuleFactoryLoader() {\n        }\n        return NgModuleFactoryLoader;\n    }());\n    function getModuleFactory__POST_R3__(id) {\n        var type = getRegisteredNgModuleType(id);\n        if (!type)\n            throw noModuleError(id);\n        return new NgModuleFactory$1(type);\n    }\n    /**\n     * Returns the NgModuleFactory with the given id, if it exists and has been loaded.\n     * Factories for modules that do not specify an `id` cannot be retrieved. Throws if the module\n     * cannot be found.\n     * @publicApi\n     */\n    var getModuleFactory = getModuleFactory__POST_R3__;\n    function noModuleError(id) {\n        return new Error(\"No module with ID \" + id + \" loaded\");\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var SWITCH_IVY_ENABLED__POST_R3__ = true;\n    var ivyEnabled = SWITCH_IVY_ENABLED__POST_R3__;\n\n    var _SEPARATOR = '#';\n    var FACTORY_CLASS_SUFFIX = 'NgFactory';\n    /**\n     * Configuration for SystemJsNgModuleLoader.\n     * token.\n     *\n     * @publicApi\n     * @deprecated the `string` form of `loadChildren` is deprecated, and `SystemJsNgModuleLoaderConfig`\n     * is part of its implementation. See `LoadChildren` for more details.\n     */\n    var SystemJsNgModuleLoaderConfig = /** @class */ (function () {\n        function SystemJsNgModuleLoaderConfig() {\n        }\n        return SystemJsNgModuleLoaderConfig;\n    }());\n    var DEFAULT_CONFIG = {\n        factoryPathPrefix: '',\n        factoryPathSuffix: '.ngfactory',\n    };\n    /**\n     * NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory\n     * @publicApi\n     * @deprecated the `string` form of `loadChildren` is deprecated, and `SystemJsNgModuleLoader` is\n     * part of its implementation. See `LoadChildren` for more details.\n     */\n    var SystemJsNgModuleLoader = /** @class */ (function () {\n        function SystemJsNgModuleLoader(_compiler, config) {\n            this._compiler = _compiler;\n            this._config = config || DEFAULT_CONFIG;\n        }\n        SystemJsNgModuleLoader.prototype.load = function (path) {\n            var legacyOfflineMode = !ivyEnabled && this._compiler instanceof Compiler;\n            return legacyOfflineMode ? this.loadFactory(path) : this.loadAndCompile(path);\n        };\n        SystemJsNgModuleLoader.prototype.loadAndCompile = function (path) {\n            var _this = this;\n            var _a = __read(path.split(_SEPARATOR), 2), module = _a[0], exportName = _a[1];\n            if (exportName === undefined) {\n                exportName = 'default';\n            }\n            return System.import(module)\n                .then(function (module) { return module[exportName]; })\n                .then(function (type) { return checkNotEmpty(type, module, exportName); })\n                .then(function (type) { return _this._compiler.compileModuleAsync(type); });\n        };\n        SystemJsNgModuleLoader.prototype.loadFactory = function (path) {\n            var _a = __read(path.split(_SEPARATOR), 2), module = _a[0], exportName = _a[1];\n            var factoryClassSuffix = FACTORY_CLASS_SUFFIX;\n            if (exportName === undefined) {\n                exportName = 'default';\n                factoryClassSuffix = '';\n            }\n            return System.import(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix)\n                .then(function (module) { return module[exportName + factoryClassSuffix]; })\n                .then(function (factory) { return checkNotEmpty(factory, module, exportName); });\n        };\n        SystemJsNgModuleLoader.ngInjectableDef = ɵɵdefineInjectable({ token: SystemJsNgModuleLoader, factory: function SystemJsNgModuleLoader_Factory(t) { return new (t || SystemJsNgModuleLoader)(ɵɵinject(Compiler), ɵɵinject(SystemJsNgModuleLoaderConfig, 8)); }, providedIn: null });\n        return SystemJsNgModuleLoader;\n    }());\n    function checkNotEmpty(value, modulePath, exportName) {\n        if (!value) {\n            throw new Error(\"Cannot find '\" + exportName + \"' in '\" + modulePath + \"'\");\n        }\n        return value;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Represents an Angular [view](guide/glossary#view),\n     * specifically the [host view](guide/glossary#view-tree) that is defined by a component.\n     * Also serves as the base class\n     * that adds destroy methods for [embedded views](guide/glossary#view-tree).\n     *\n     * @see `EmbeddedViewRef`\n     *\n     * @publicApi\n     */\n    var ViewRef$1 = /** @class */ (function (_super) {\n        __extends(ViewRef, _super);\n        function ViewRef() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        return ViewRef;\n    }(ChangeDetectorRef));\n    /**\n     * Represents an Angular [view](guide/glossary#view) in a view container.\n     * An [embedded view](guide/glossary#view-tree) can be referenced from a component\n     * other than the hosting component whose template defines it, or it can be defined\n     * independently by a `TemplateRef`.\n     *\n     * Properties of elements in a view can change, but the structure (number and order) of elements in\n     * a view cannot. Change the structure of elements by inserting, moving, or\n     * removing nested views in a view container.\n     *\n     * @see `ViewContainerRef`\n     *\n     * @usageNotes\n     *\n     * The following template breaks down into two separate `TemplateRef` instances,\n     * an outer one and an inner one.\n     *\n     * ```\n     * Count: {{items.length}}\n     * <ul>\n     *   <li *ngFor=\"let  item of items\">{{item}}</li>\n     * </ul>\n     * ```\n     *\n     * This is the outer `TemplateRef`:\n     *\n     * ```\n     * Count: {{items.length}}\n     * <ul>\n     *   <ng-template ngFor let-item [ngForOf]=\"items\"></ng-template>\n     * </ul>\n     * ```\n     *\n     * This is the inner `TemplateRef`:\n     *\n     * ```\n     *   <li>{{item}}</li>\n     * ```\n     *\n     * The outer and inner `TemplateRef` instances are assembled into views as follows:\n     *\n     * ```\n     * <!-- ViewRef: outer-0 -->\n     * Count: 2\n     * <ul>\n     *   <ng-template view-container-ref></ng-template>\n     *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->\n     *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->\n     * </ul>\n     * <!-- /ViewRef: outer-0 -->\n     * ```\n     * @publicApi\n     */\n    var EmbeddedViewRef = /** @class */ (function (_super) {\n        __extends(EmbeddedViewRef, _super);\n        function EmbeddedViewRef() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        return EmbeddedViewRef;\n    }(ViewRef$1));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @publicApi\n     */\n    var DebugEventListener = /** @class */ (function () {\n        function DebugEventListener(name, callback) {\n            this.name = name;\n            this.callback = callback;\n        }\n        return DebugEventListener;\n    }());\n    var DebugNode__PRE_R3__ = /** @class */ (function () {\n        function DebugNode__PRE_R3__(nativeNode, parent, _debugContext) {\n            this.listeners = [];\n            this.parent = null;\n            this._debugContext = _debugContext;\n            this.nativeNode = nativeNode;\n            if (parent && parent instanceof DebugElement__PRE_R3__) {\n                parent.addChild(this);\n            }\n        }\n        Object.defineProperty(DebugNode__PRE_R3__.prototype, \"injector\", {\n            get: function () { return this._debugContext.injector; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugNode__PRE_R3__.prototype, \"componentInstance\", {\n            get: function () { return this._debugContext.component; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugNode__PRE_R3__.prototype, \"context\", {\n            get: function () { return this._debugContext.context; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugNode__PRE_R3__.prototype, \"references\", {\n            get: function () { return this._debugContext.references; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugNode__PRE_R3__.prototype, \"providerTokens\", {\n            get: function () { return this._debugContext.providerTokens; },\n            enumerable: true,\n            configurable: true\n        });\n        return DebugNode__PRE_R3__;\n    }());\n    var DebugElement__PRE_R3__ = /** @class */ (function (_super) {\n        __extends(DebugElement__PRE_R3__, _super);\n        function DebugElement__PRE_R3__(nativeNode, parent, _debugContext) {\n            var _this = _super.call(this, nativeNode, parent, _debugContext) || this;\n            _this.properties = {};\n            _this.attributes = {};\n            _this.classes = {};\n            _this.styles = {};\n            _this.childNodes = [];\n            _this.nativeElement = nativeNode;\n            return _this;\n        }\n        DebugElement__PRE_R3__.prototype.addChild = function (child) {\n            if (child) {\n                this.childNodes.push(child);\n                child.parent = this;\n            }\n        };\n        DebugElement__PRE_R3__.prototype.removeChild = function (child) {\n            var childIndex = this.childNodes.indexOf(child);\n            if (childIndex !== -1) {\n                child.parent = null;\n                this.childNodes.splice(childIndex, 1);\n            }\n        };\n        DebugElement__PRE_R3__.prototype.insertChildrenAfter = function (child, newChildren) {\n            var _this = this;\n            var _a;\n            var siblingIndex = this.childNodes.indexOf(child);\n            if (siblingIndex !== -1) {\n                (_a = this.childNodes).splice.apply(_a, __spread([siblingIndex + 1, 0], newChildren));\n                newChildren.forEach(function (c) {\n                    if (c.parent) {\n                        c.parent.removeChild(c);\n                    }\n                    child.parent = _this;\n                });\n            }\n        };\n        DebugElement__PRE_R3__.prototype.insertBefore = function (refChild, newChild) {\n            var refIndex = this.childNodes.indexOf(refChild);\n            if (refIndex === -1) {\n                this.addChild(newChild);\n            }\n            else {\n                if (newChild.parent) {\n                    newChild.parent.removeChild(newChild);\n                }\n                newChild.parent = this;\n                this.childNodes.splice(refIndex, 0, newChild);\n            }\n        };\n        DebugElement__PRE_R3__.prototype.query = function (predicate) {\n            var results = this.queryAll(predicate);\n            return results[0] || null;\n        };\n        DebugElement__PRE_R3__.prototype.queryAll = function (predicate) {\n            var matches = [];\n            _queryElementChildren(this, predicate, matches);\n            return matches;\n        };\n        DebugElement__PRE_R3__.prototype.queryAllNodes = function (predicate) {\n            var matches = [];\n            _queryNodeChildren(this, predicate, matches);\n            return matches;\n        };\n        Object.defineProperty(DebugElement__PRE_R3__.prototype, \"children\", {\n            get: function () {\n                return this\n                    .childNodes //\n                    .filter(function (node) { return node instanceof DebugElement__PRE_R3__; });\n            },\n            enumerable: true,\n            configurable: true\n        });\n        DebugElement__PRE_R3__.prototype.triggerEventHandler = function (eventName, eventObj) {\n            this.listeners.forEach(function (listener) {\n                if (listener.name == eventName) {\n                    listener.callback(eventObj);\n                }\n            });\n        };\n        return DebugElement__PRE_R3__;\n    }(DebugNode__PRE_R3__));\n    /**\n     * @publicApi\n     */\n    function asNativeElements(debugEls) {\n        return debugEls.map(function (el) { return el.nativeElement; });\n    }\n    function _queryElementChildren(element, predicate, matches) {\n        element.childNodes.forEach(function (node) {\n            if (node instanceof DebugElement__PRE_R3__) {\n                if (predicate(node)) {\n                    matches.push(node);\n                }\n                _queryElementChildren(node, predicate, matches);\n            }\n        });\n    }\n    function _queryNodeChildren(parentNode, predicate, matches) {\n        if (parentNode instanceof DebugElement__PRE_R3__) {\n            parentNode.childNodes.forEach(function (node) {\n                if (predicate(node)) {\n                    matches.push(node);\n                }\n                if (node instanceof DebugElement__PRE_R3__) {\n                    _queryNodeChildren(node, predicate, matches);\n                }\n            });\n        }\n    }\n    var DebugNode__POST_R3__ = /** @class */ (function () {\n        function DebugNode__POST_R3__(nativeNode) {\n            this.nativeNode = nativeNode;\n        }\n        Object.defineProperty(DebugNode__POST_R3__.prototype, \"parent\", {\n            get: function () {\n                var parent = this.nativeNode.parentNode;\n                return parent ? new DebugElement__POST_R3__(parent) : null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugNode__POST_R3__.prototype, \"injector\", {\n            get: function () { return getInjector(this.nativeNode); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugNode__POST_R3__.prototype, \"componentInstance\", {\n            get: function () {\n                var nativeElement = this.nativeNode;\n                return nativeElement &&\n                    (getComponent(nativeElement) || getViewComponent(nativeElement));\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugNode__POST_R3__.prototype, \"context\", {\n            get: function () {\n                return getComponent(this.nativeNode) || getContext$1(this.nativeNode);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugNode__POST_R3__.prototype, \"listeners\", {\n            get: function () {\n                return getListeners(this.nativeNode).filter(isBrowserEvents);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugNode__POST_R3__.prototype, \"references\", {\n            get: function () { return getLocalRefs(this.nativeNode); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugNode__POST_R3__.prototype, \"providerTokens\", {\n            get: function () { return getInjectionTokens(this.nativeNode); },\n            enumerable: true,\n            configurable: true\n        });\n        return DebugNode__POST_R3__;\n    }());\n    var DebugElement__POST_R3__ = /** @class */ (function (_super) {\n        __extends(DebugElement__POST_R3__, _super);\n        function DebugElement__POST_R3__(nativeNode) {\n            var _this = this;\n            ngDevMode && assertDomNode(nativeNode);\n            _this = _super.call(this, nativeNode) || this;\n            return _this;\n        }\n        Object.defineProperty(DebugElement__POST_R3__.prototype, \"nativeElement\", {\n            get: function () {\n                return this.nativeNode.nodeType == Node.ELEMENT_NODE ? this.nativeNode : null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugElement__POST_R3__.prototype, \"name\", {\n            get: function () { return this.nativeElement.nodeName; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugElement__POST_R3__.prototype, \"properties\", {\n            /**\n             *  Gets a map of property names to property values for an element.\n             *\n             *  This map includes:\n             *  - Regular property bindings (e.g. `[id]=\"id\"`)\n             *  - Host property bindings (e.g. `host: { '[id]': \"id\" }`)\n             *  - Interpolated property bindings (e.g. `id=\"{{ value }}\")\n             *\n             *  It does not include:\n             *  - input property bindings (e.g. `[myCustomInput]=\"value\"`)\n             *  - attribute bindings (e.g. `[attr.role]=\"menu\"`)\n             */\n            get: function () {\n                var context = loadLContext(this.nativeNode);\n                var lView = context.lView;\n                var tData = lView[TVIEW].data;\n                var tNode = tData[context.nodeIndex];\n                var properties = collectPropertyBindings(tNode, lView, tData);\n                var hostProperties = collectHostPropertyBindings(tNode, lView, tData);\n                var className = collectClassNames(this);\n                var output = __assign({}, properties, hostProperties);\n                if (className) {\n                    output['className'] = output['className'] ? output['className'] + (\" \" + className) : className;\n                }\n                return output;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugElement__POST_R3__.prototype, \"attributes\", {\n            get: function () {\n                var attributes = {};\n                var element = this.nativeElement;\n                if (!element) {\n                    return attributes;\n                }\n                var context = loadLContext(element);\n                var lView = context.lView;\n                var tNodeAttrs = lView[TVIEW].data[context.nodeIndex].attrs;\n                var lowercaseTNodeAttrs = [];\n                // For debug nodes we take the element's attribute directly from the DOM since it allows us\n                // to account for ones that weren't set via bindings (e.g. ViewEngine keeps track of the ones\n                // that are set through `Renderer2`). The problem is that the browser will lowercase all names,\n                // however since we have the attributes already on the TNode, we can preserve the case by going\n                // through them once, adding them to the `attributes` map and putting their lower-cased name\n                // into an array. Afterwards when we're going through the native DOM attributes, we can check\n                // whether we haven't run into an attribute already through the TNode.\n                if (tNodeAttrs) {\n                    var i = 0;\n                    while (i < tNodeAttrs.length) {\n                        var attrName = tNodeAttrs[i];\n                        // Stop as soon as we hit a marker. We only care about the regular attributes. Everything\n                        // else will be handled below when we read the final attributes off the DOM.\n                        if (typeof attrName !== 'string')\n                            break;\n                        var attrValue = tNodeAttrs[i + 1];\n                        attributes[attrName] = attrValue;\n                        lowercaseTNodeAttrs.push(attrName.toLowerCase());\n                        i += 2;\n                    }\n                }\n                var eAttrs = element.attributes;\n                for (var i = 0; i < eAttrs.length; i++) {\n                    var attr = eAttrs[i];\n                    // Make sure that we don't assign the same attribute both in its\n                    // case-sensitive form and the lower-cased one from the browser.\n                    if (lowercaseTNodeAttrs.indexOf(attr.name) === -1) {\n                        attributes[attr.name] = attr.value;\n                    }\n                }\n                return attributes;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugElement__POST_R3__.prototype, \"classes\", {\n            get: function () {\n                var classes = {};\n                var element = this.nativeElement;\n                if (element) {\n                    var lContext = loadLContextFromNode(element);\n                    var stylingContext = getStylingContextFromLView(lContext.nodeIndex, lContext.lView);\n                    if (stylingContext) {\n                        for (var i = 10 /* SingleStylesStartPosition */; i < stylingContext.length; i += 4 /* Size */) {\n                            if (isClassBasedValue(stylingContext, i)) {\n                                var className = getProp(stylingContext, i);\n                                var value = getValue(stylingContext, i);\n                                if (typeof value == 'boolean') {\n                                    // we want to ignore `null` since those don't overwrite the values.\n                                    classes[className] = value;\n                                }\n                            }\n                        }\n                    }\n                    else {\n                        // Fallback, just read DOM.\n                        var eClasses = element.classList;\n                        for (var i = 0; i < eClasses.length; i++) {\n                            classes[eClasses[i]] = true;\n                        }\n                    }\n                }\n                return classes;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugElement__POST_R3__.prototype, \"styles\", {\n            get: function () {\n                var styles = {};\n                var element = this.nativeElement;\n                if (element) {\n                    var lContext = loadLContextFromNode(element);\n                    var stylingContext = getStylingContextFromLView(lContext.nodeIndex, lContext.lView);\n                    if (stylingContext) {\n                        for (var i = 10 /* SingleStylesStartPosition */; i < stylingContext.length; i += 4 /* Size */) {\n                            if (!isClassBasedValue(stylingContext, i)) {\n                                var styleName = getProp(stylingContext, i);\n                                var value = getValue(stylingContext, i);\n                                if (value !== null) {\n                                    // we want to ignore `null` since those don't overwrite the values.\n                                    styles[styleName] = value;\n                                }\n                            }\n                        }\n                    }\n                    else {\n                        // Fallback, just read DOM.\n                        var eStyles = element.style;\n                        for (var i = 0; i < eStyles.length; i++) {\n                            var name_1 = eStyles.item(i);\n                            styles[name_1] = eStyles.getPropertyValue(name_1);\n                        }\n                    }\n                }\n                return styles;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugElement__POST_R3__.prototype, \"childNodes\", {\n            get: function () {\n                var childNodes = this.nativeNode.childNodes;\n                var children = [];\n                for (var i = 0; i < childNodes.length; i++) {\n                    var element = childNodes[i];\n                    children.push(getDebugNode__POST_R3__(element));\n                }\n                return children;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugElement__POST_R3__.prototype, \"children\", {\n            get: function () {\n                var nativeElement = this.nativeElement;\n                if (!nativeElement)\n                    return [];\n                var childNodes = nativeElement.children;\n                var children = [];\n                for (var i = 0; i < childNodes.length; i++) {\n                    var element = childNodes[i];\n                    children.push(getDebugNode__POST_R3__(element));\n                }\n                return children;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        DebugElement__POST_R3__.prototype.query = function (predicate) {\n            var results = this.queryAll(predicate);\n            return results[0] || null;\n        };\n        DebugElement__POST_R3__.prototype.queryAll = function (predicate) {\n            var matches = [];\n            _queryAllR3(this, predicate, matches, true);\n            return matches;\n        };\n        DebugElement__POST_R3__.prototype.queryAllNodes = function (predicate) {\n            var matches = [];\n            _queryAllR3(this, predicate, matches, false);\n            return matches;\n        };\n        DebugElement__POST_R3__.prototype.triggerEventHandler = function (eventName, eventObj) {\n            this.listeners.forEach(function (listener) {\n                if (listener.name === eventName) {\n                    listener.callback(eventObj);\n                }\n            });\n        };\n        return DebugElement__POST_R3__;\n    }(DebugNode__POST_R3__));\n    function _queryAllR3(parentElement, predicate, matches, elementsOnly) {\n        var context = loadLContext(parentElement.nativeNode);\n        var parentTNode = context.lView[TVIEW].data[context.nodeIndex];\n        _queryNodeChildrenR3(parentTNode, context.lView, predicate, matches, elementsOnly, parentElement.nativeNode);\n    }\n    /**\n     * Recursively match the current TNode against the predicate, and goes on with the next ones.\n     *\n     * @param tNode the current TNode\n     * @param lView the LView of this TNode\n     * @param predicate the predicate to match\n     * @param matches the list of positive matches\n     * @param elementsOnly whether only elements should be searched\n     * @param rootNativeNode the root native node on which predicate should not be matched\n     */\n    function _queryNodeChildrenR3(tNode, lView, predicate, matches, elementsOnly, rootNativeNode) {\n        var e_1, _a;\n        var nativeNode = getNativeByTNodeOrNull(tNode, lView);\n        // For each type of TNode, specific logic is executed.\n        if (tNode.type === 3 /* Element */ || tNode.type === 4 /* ElementContainer */) {\n            // Case 1: the TNode is an element\n            // The native node has to be checked.\n            _addQueryMatchR3(nativeNode, predicate, matches, elementsOnly, rootNativeNode);\n            if (isComponent(tNode)) {\n                // If the element is the host of a component, then all nodes in its view have to be processed.\n                // Note: the component's content (tNode.child) will be processed from the insertion points.\n                var componentView = getComponentViewByIndex(tNode.index, lView);\n                if (componentView && componentView[TVIEW].firstChild) {\n                    _queryNodeChildrenR3(componentView[TVIEW].firstChild, componentView, predicate, matches, elementsOnly, rootNativeNode);\n                }\n            }\n            else if (tNode.child) {\n                // Otherwise, its children have to be processed.\n                _queryNodeChildrenR3(tNode.child, lView, predicate, matches, elementsOnly, rootNativeNode);\n            }\n            // In all cases, if a dynamic container exists for this node, each view inside it has to be\n            // processed.\n            var nodeOrContainer = lView[tNode.index];\n            if (isLContainer(nodeOrContainer)) {\n                _queryNodeChildrenInContainerR3(nodeOrContainer, predicate, matches, elementsOnly, rootNativeNode);\n            }\n        }\n        else if (tNode.type === 0 /* Container */) {\n            // Case 2: the TNode is a container\n            // The native node has to be checked.\n            var lContainer = lView[tNode.index];\n            _addQueryMatchR3(lContainer[NATIVE], predicate, matches, elementsOnly, rootNativeNode);\n            // Each view inside the container has to be processed.\n            _queryNodeChildrenInContainerR3(lContainer, predicate, matches, elementsOnly, rootNativeNode);\n        }\n        else if (tNode.type === 1 /* Projection */) {\n            // Case 3: the TNode is a projection insertion point (i.e. a <ng-content>).\n            // The nodes projected at this location all need to be processed.\n            var componentView = findComponentView(lView);\n            var componentHost = componentView[T_HOST];\n            var head = componentHost.projection[tNode.projection];\n            if (Array.isArray(head)) {\n                try {\n                    for (var head_1 = __values(head), head_1_1 = head_1.next(); !head_1_1.done; head_1_1 = head_1.next()) {\n                        var nativeNode_1 = head_1_1.value;\n                        _addQueryMatchR3(nativeNode_1, predicate, matches, elementsOnly, rootNativeNode);\n                    }\n                }\n                catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                finally {\n                    try {\n                        if (head_1_1 && !head_1_1.done && (_a = head_1.return)) _a.call(head_1);\n                    }\n                    finally { if (e_1) throw e_1.error; }\n                }\n            }\n            else if (head) {\n                var nextLView = componentView[PARENT];\n                var nextTNode = nextLView[TVIEW].data[head.index];\n                _queryNodeChildrenR3(nextTNode, nextLView, predicate, matches, elementsOnly, rootNativeNode);\n            }\n        }\n        else if (tNode.child) {\n            // Case 4: the TNode is a view.\n            _queryNodeChildrenR3(tNode.child, lView, predicate, matches, elementsOnly, rootNativeNode);\n        }\n        // We don't want to go to the next sibling of the root node.\n        if (rootNativeNode !== nativeNode) {\n            // To determine the next node to be processed, we need to use the next or the projectionNext\n            // link, depending on whether the current node has been projected.\n            var nextTNode = (tNode.flags & 2 /* isProjected */) ? tNode.projectionNext : tNode.next;\n            if (nextTNode) {\n                _queryNodeChildrenR3(nextTNode, lView, predicate, matches, elementsOnly, rootNativeNode);\n            }\n        }\n    }\n    /**\n     * Process all TNodes in a given container.\n     *\n     * @param lContainer the container to be processed\n     * @param predicate the predicate to match\n     * @param matches the list of positive matches\n     * @param elementsOnly whether only elements should be searched\n     * @param rootNativeNode the root native node on which predicate should not be matched\n     */\n    function _queryNodeChildrenInContainerR3(lContainer, predicate, matches, elementsOnly, rootNativeNode) {\n        for (var i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n            var childView = lContainer[i];\n            _queryNodeChildrenR3(childView[TVIEW].node, childView, predicate, matches, elementsOnly, rootNativeNode);\n        }\n    }\n    /**\n     * Match the current native node against the predicate.\n     *\n     * @param nativeNode the current native node\n     * @param predicate the predicate to match\n     * @param matches the list of positive matches\n     * @param elementsOnly whether only elements should be searched\n     * @param rootNativeNode the root native node on which predicate should not be matched\n     */\n    function _addQueryMatchR3(nativeNode, predicate, matches, elementsOnly, rootNativeNode) {\n        if (rootNativeNode !== nativeNode) {\n            var debugNode = getDebugNode(nativeNode);\n            if (!debugNode) {\n                return;\n            }\n            // Type of the \"predicate and \"matches\" array are set based on the value of\n            // the \"elementsOnly\" parameter. TypeScript is not able to properly infer these\n            // types with generics, so we manually cast the parameters accordingly.\n            if (elementsOnly && debugNode instanceof DebugElement__POST_R3__ && predicate(debugNode)) {\n                matches.push(debugNode);\n            }\n            else if (!elementsOnly && predicate(debugNode)) {\n                matches.push(debugNode);\n            }\n        }\n    }\n    /**\n     * Iterates through the property bindings for a given node and generates\n     * a map of property names to values. This map only contains property bindings\n     * defined in templates, not in host bindings.\n     */\n    function collectPropertyBindings(tNode, lView, tData) {\n        var properties = {};\n        var bindingIndex = getFirstBindingIndex(tNode.propertyMetadataStartIndex, tData);\n        while (bindingIndex < tNode.propertyMetadataEndIndex) {\n            var value = void 0;\n            var propMetadata = tData[bindingIndex];\n            while (!isPropMetadataString(propMetadata)) {\n                // This is the first value for an interpolation. We need to build up\n                // the full interpolation by combining runtime values in LView with\n                // the static interstitial values stored in TData.\n                value = (value || '') + renderStringify(lView[bindingIndex]) + tData[bindingIndex];\n                propMetadata = tData[++bindingIndex];\n            }\n            value = value === undefined ? lView[bindingIndex] : value += lView[bindingIndex];\n            // Property metadata string has 3 parts: property name, prefix, and suffix\n            var metadataParts = propMetadata.split(INTERPOLATION_DELIMITER);\n            var propertyName = metadataParts[0];\n            // Attr bindings don't have property names and should be skipped\n            if (propertyName) {\n                // Wrap value with prefix and suffix (will be '' for normal bindings), if they're defined.\n                // Avoid wrapping for normal bindings so that the value doesn't get cast to a string.\n                properties[propertyName] = (metadataParts[1] && metadataParts[2]) ?\n                    metadataParts[1] + value + metadataParts[2] :\n                    value;\n            }\n            bindingIndex++;\n        }\n        return properties;\n    }\n    /**\n     * Retrieves the first binding index that holds values for this property\n     * binding.\n     *\n     * For normal bindings (e.g. `[id]=\"id\"`), the binding index is the\n     * same as the metadata index. For interpolations (e.g. `id=\"{{id}}-{{name}}\"`),\n     * there can be multiple binding values, so we might have to loop backwards\n     * from the metadata index until we find the first one.\n     *\n     * @param metadataIndex The index of the first property metadata string for\n     * this node.\n     * @param tData The data array for the current TView\n     * @returns The first binding index for this binding\n     */\n    function getFirstBindingIndex(metadataIndex, tData) {\n        var currentBindingIndex = metadataIndex - 1;\n        // If the slot before the metadata holds a string, we know that this\n        // metadata applies to an interpolation with at least 2 bindings, and\n        // we need to search further to access the first binding value.\n        var currentValue = tData[currentBindingIndex];\n        // We need to iterate until we hit either a:\n        // - TNode (it is an element slot marking the end of `consts` section), OR a\n        // - metadata string (slot is attribute metadata or a previous node's property metadata)\n        while (typeof currentValue === 'string' && !isPropMetadataString(currentValue)) {\n            currentValue = tData[--currentBindingIndex];\n        }\n        return currentBindingIndex + 1;\n    }\n    function collectHostPropertyBindings(tNode, lView, tData) {\n        var properties = {};\n        // Host binding values for a node are stored after directives on that node\n        var hostPropIndex = tNode.directiveEnd;\n        var propMetadata = tData[hostPropIndex];\n        // When we reach a value in TView.data that is not a string, we know we've\n        // hit the next node's providers and directives and should stop copying data.\n        while (typeof propMetadata === 'string') {\n            var propertyName = propMetadata.split(INTERPOLATION_DELIMITER)[0];\n            properties[propertyName] = lView[hostPropIndex];\n            propMetadata = tData[++hostPropIndex];\n        }\n        return properties;\n    }\n    function collectClassNames(debugElement) {\n        var e_2, _a;\n        var classes = debugElement.classes;\n        var output = '';\n        try {\n            for (var _b = __values(Object.keys(classes)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var className = _c.value;\n                if (classes[className]) {\n                    output = output ? output + (\" \" + className) : className;\n                }\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n        return output;\n    }\n    // Need to keep the nodes in a global Map so that multiple angular apps are supported.\n    var _nativeNodeToDebugNode = new Map();\n    var NG_DEBUG_PROPERTY = '__ng_debug__';\n    function getDebugNode__POST_R3__(nativeNode) {\n        if (nativeNode instanceof Node) {\n            if (!(nativeNode.hasOwnProperty(NG_DEBUG_PROPERTY))) {\n                nativeNode[NG_DEBUG_PROPERTY] = nativeNode.nodeType == Node.ELEMENT_NODE ?\n                    new DebugElement__POST_R3__(nativeNode) :\n                    new DebugNode__POST_R3__(nativeNode);\n            }\n            return nativeNode[NG_DEBUG_PROPERTY];\n        }\n        return null;\n    }\n    /**\n     * @publicApi\n     */\n    var getDebugNode = getDebugNode__POST_R3__;\n    function indexDebugNode(node) {\n        _nativeNodeToDebugNode.set(node.nativeNode, node);\n    }\n    function removeDebugNodeFromIndex(node) {\n        _nativeNodeToDebugNode.delete(node.nativeNode);\n    }\n    /**\n     * @publicApi\n     */\n    var DebugNode = DebugNode__POST_R3__;\n    /**\n     * @publicApi\n     */\n    var DebugElement = DebugElement__POST_R3__;\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var _CORE_PLATFORM_PROVIDERS = [\n        // Set a default platform name for platforms that don't set it explicitly.\n        { provide: PLATFORM_ID, useValue: 'unknown' },\n        { provide: PlatformRef, deps: [Injector] },\n        { provide: TestabilityRegistry, deps: [] },\n        { provide: Console, deps: [] },\n    ];\n    /**\n     * This platform has to be included in any other platform\n     *\n     * @publicApi\n     */\n    var platformCore = createPlatformFactory(null, 'core', _CORE_PLATFORM_PROVIDERS);\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function _iterableDiffersFactory() {\n        return defaultIterableDiffers;\n    }\n    function _keyValueDiffersFactory() {\n        return defaultKeyValueDiffers;\n    }\n    function _localeFactory(locale) {\n        if (locale) {\n            return locale;\n        }\n        // Use `goog.LOCALE` as default value for `LOCALE_ID` token for Closure Compiler.\n        // Note: default `goog.LOCALE` value is `en`, when Angular used `en-US`. In order to preserve\n        // backwards compatibility, we use Angular default value over Closure Compiler's one.\n        if (ngI18nClosureMode && typeof goog !== 'undefined' && goog.LOCALE !== 'en') {\n            return goog.LOCALE;\n        }\n        return 'en-US';\n    }\n    /**\n     * A built-in [dependency injection token](guide/glossary#di-token)\n     * that is used to configure the root injector for bootstrapping.\n     */\n    var APPLICATION_MODULE_PROVIDERS = [\n        {\n            provide: ApplicationRef,\n            useClass: ApplicationRef,\n            deps: [NgZone, Console, Injector, ErrorHandler, ComponentFactoryResolver, ApplicationInitStatus]\n        },\n        { provide: SCHEDULER, deps: [NgZone], useFactory: zoneSchedulerFactory },\n        {\n            provide: ApplicationInitStatus,\n            useClass: ApplicationInitStatus,\n            deps: [[new Optional(), APP_INITIALIZER]]\n        },\n        { provide: Compiler, useClass: Compiler, deps: [] },\n        APP_ID_RANDOM_PROVIDER,\n        { provide: IterableDiffers, useFactory: _iterableDiffersFactory, deps: [] },\n        { provide: KeyValueDiffers, useFactory: _keyValueDiffersFactory, deps: [] },\n        {\n            provide: LOCALE_ID$1,\n            useFactory: _localeFactory,\n            deps: [[new Inject(LOCALE_ID$1), new Optional(), new SkipSelf()]]\n        },\n    ];\n    /**\n     * Schedule work at next available slot.\n     *\n     * In Ivy this is just `requestAnimationFrame`. For compatibility reasons when bootstrapped\n     * using `platformRef.bootstrap` we need to use `NgZone.onStable` as the scheduling mechanism.\n     * This overrides the scheduling mechanism in Ivy to `NgZone.onStable`.\n     *\n     * @param ngZone NgZone to use for scheduling.\n     */\n    function zoneSchedulerFactory(ngZone) {\n        var queue = [];\n        ngZone.onStable.subscribe(function () {\n            while (queue.length) {\n                queue.pop()();\n            }\n        });\n        return function (fn) { queue.push(fn); };\n    }\n    /**\n     * Configures the root injector for an app with\n     * providers of `@angular/core` dependencies that `ApplicationRef` needs\n     * to bootstrap components.\n     *\n     * Re-exported by `BrowserModule`, which is included automatically in the root\n     * `AppModule` when you create a new app with the CLI `new` command.\n     *\n     * @publicApi\n     */\n    var ApplicationModule = /** @class */ (function () {\n        // Inject ApplicationRef to make it eager...\n        function ApplicationModule(appRef) {\n        }\n        ApplicationModule.ngModuleDef = ɵɵdefineNgModule({ type: ApplicationModule });\n        ApplicationModule.ngInjectorDef = ɵɵdefineInjector({ factory: function ApplicationModule_Factory(t) { return new (t || ApplicationModule)(ɵɵinject(ApplicationRef)); }, providers: APPLICATION_MODULE_PROVIDERS });\n        return ApplicationModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function anchorDef(flags, matchedQueriesDsl, ngContentIndex, childCount, handleEvent, templateFactory) {\n        flags |= 1 /* TypeElement */;\n        var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;\n        var template = templateFactory ? resolveDefinition(templateFactory) : null;\n        return {\n            // will bet set by the view definition\n            nodeIndex: -1,\n            parent: null,\n            renderParent: null,\n            bindingIndex: -1,\n            outputIndex: -1,\n            // regular values\n            flags: flags,\n            checkIndex: -1,\n            childFlags: 0,\n            directChildFlags: 0,\n            childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references, ngContentIndex: ngContentIndex, childCount: childCount,\n            bindings: [],\n            bindingFlags: 0,\n            outputs: [],\n            element: {\n                ns: null,\n                name: null,\n                attrs: null, template: template,\n                componentProvider: null,\n                componentView: null,\n                componentRendererType: null,\n                publicProviders: null,\n                allProviders: null,\n                handleEvent: handleEvent || NOOP\n            },\n            provider: null,\n            text: null,\n            query: null,\n            ngContent: null\n        };\n    }\n    function elementDef(checkIndex, flags, matchedQueriesDsl, ngContentIndex, childCount, namespaceAndName, fixedAttrs, bindings, outputs, handleEvent, componentView, componentRendererType) {\n        var _a;\n        if (fixedAttrs === void 0) { fixedAttrs = []; }\n        if (!handleEvent) {\n            handleEvent = NOOP;\n        }\n        var _b = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _b.matchedQueries, references = _b.references, matchedQueryIds = _b.matchedQueryIds;\n        var ns = null;\n        var name = null;\n        if (namespaceAndName) {\n            _a = __read(splitNamespace(namespaceAndName), 2), ns = _a[0], name = _a[1];\n        }\n        bindings = bindings || [];\n        var bindingDefs = new Array(bindings.length);\n        for (var i = 0; i < bindings.length; i++) {\n            var _c = __read(bindings[i], 3), bindingFlags = _c[0], namespaceAndName_1 = _c[1], suffixOrSecurityContext = _c[2];\n            var _d = __read(splitNamespace(namespaceAndName_1), 2), ns_1 = _d[0], name_1 = _d[1];\n            var securityContext = undefined;\n            var suffix = undefined;\n            switch (bindingFlags & 15 /* Types */) {\n                case 4 /* TypeElementStyle */:\n                    suffix = suffixOrSecurityContext;\n                    break;\n                case 1 /* TypeElementAttribute */:\n                case 8 /* TypeProperty */:\n                    securityContext = suffixOrSecurityContext;\n                    break;\n            }\n            bindingDefs[i] =\n                { flags: bindingFlags, ns: ns_1, name: name_1, nonMinifiedName: name_1, securityContext: securityContext, suffix: suffix };\n        }\n        outputs = outputs || [];\n        var outputDefs = new Array(outputs.length);\n        for (var i = 0; i < outputs.length; i++) {\n            var _e = __read(outputs[i], 2), target = _e[0], eventName = _e[1];\n            outputDefs[i] = {\n                type: 0 /* ElementOutput */,\n                target: target, eventName: eventName,\n                propName: null\n            };\n        }\n        fixedAttrs = fixedAttrs || [];\n        var attrs = fixedAttrs.map(function (_a) {\n            var _b = __read(_a, 2), namespaceAndName = _b[0], value = _b[1];\n            var _c = __read(splitNamespace(namespaceAndName), 2), ns = _c[0], name = _c[1];\n            return [ns, name, value];\n        });\n        componentRendererType = resolveRendererType2(componentRendererType);\n        if (componentView) {\n            flags |= 33554432 /* ComponentView */;\n        }\n        flags |= 1 /* TypeElement */;\n        return {\n            // will bet set by the view definition\n            nodeIndex: -1,\n            parent: null,\n            renderParent: null,\n            bindingIndex: -1,\n            outputIndex: -1,\n            // regular values\n            checkIndex: checkIndex,\n            flags: flags,\n            childFlags: 0,\n            directChildFlags: 0,\n            childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references, ngContentIndex: ngContentIndex, childCount: childCount,\n            bindings: bindingDefs,\n            bindingFlags: calcBindingFlags(bindingDefs),\n            outputs: outputDefs,\n            element: {\n                ns: ns,\n                name: name,\n                attrs: attrs,\n                template: null,\n                // will bet set by the view definition\n                componentProvider: null,\n                componentView: componentView || null,\n                componentRendererType: componentRendererType,\n                publicProviders: null,\n                allProviders: null,\n                handleEvent: handleEvent || NOOP,\n            },\n            provider: null,\n            text: null,\n            query: null,\n            ngContent: null\n        };\n    }\n    function createElement(view, renderHost, def) {\n        var elDef = def.element;\n        var rootSelectorOrNode = view.root.selectorOrNode;\n        var renderer = view.renderer;\n        var el;\n        if (view.parent || !rootSelectorOrNode) {\n            if (elDef.name) {\n                el = renderer.createElement(elDef.name, elDef.ns);\n            }\n            else {\n                el = renderer.createComment('');\n            }\n            var parentEl = getParentRenderElement(view, renderHost, def);\n            if (parentEl) {\n                renderer.appendChild(parentEl, el);\n            }\n        }\n        else {\n            // when using native Shadow DOM, do not clear the root element contents to allow slot projection\n            var preserveContent = (!!elDef.componentRendererType &&\n                elDef.componentRendererType.encapsulation === exports.ViewEncapsulation.ShadowDom);\n            el = renderer.selectRootElement(rootSelectorOrNode, preserveContent);\n        }\n        if (elDef.attrs) {\n            for (var i = 0; i < elDef.attrs.length; i++) {\n                var _a = __read(elDef.attrs[i], 3), ns = _a[0], name_2 = _a[1], value = _a[2];\n                renderer.setAttribute(el, name_2, value, ns);\n            }\n        }\n        return el;\n    }\n    function listenToElementOutputs(view, compView, def, el) {\n        for (var i = 0; i < def.outputs.length; i++) {\n            var output = def.outputs[i];\n            var handleEventClosure = renderEventHandlerClosure(view, def.nodeIndex, elementEventFullName(output.target, output.eventName));\n            var listenTarget = output.target;\n            var listenerView = view;\n            if (output.target === 'component') {\n                listenTarget = null;\n                listenerView = compView;\n            }\n            var disposable = listenerView.renderer.listen(listenTarget || el, output.eventName, handleEventClosure);\n            view.disposables[def.outputIndex + i] = disposable;\n        }\n    }\n    function renderEventHandlerClosure(view, index, eventName) {\n        return function (event) { return dispatchEvent(view, index, eventName, event); };\n    }\n    function checkAndUpdateElementInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n        var bindLen = def.bindings.length;\n        var changed = false;\n        if (bindLen > 0 && checkAndUpdateElementValue(view, def, 0, v0))\n            changed = true;\n        if (bindLen > 1 && checkAndUpdateElementValue(view, def, 1, v1))\n            changed = true;\n        if (bindLen > 2 && checkAndUpdateElementValue(view, def, 2, v2))\n            changed = true;\n        if (bindLen > 3 && checkAndUpdateElementValue(view, def, 3, v3))\n            changed = true;\n        if (bindLen > 4 && checkAndUpdateElementValue(view, def, 4, v4))\n            changed = true;\n        if (bindLen > 5 && checkAndUpdateElementValue(view, def, 5, v5))\n            changed = true;\n        if (bindLen > 6 && checkAndUpdateElementValue(view, def, 6, v6))\n            changed = true;\n        if (bindLen > 7 && checkAndUpdateElementValue(view, def, 7, v7))\n            changed = true;\n        if (bindLen > 8 && checkAndUpdateElementValue(view, def, 8, v8))\n            changed = true;\n        if (bindLen > 9 && checkAndUpdateElementValue(view, def, 9, v9))\n            changed = true;\n        return changed;\n    }\n    function checkAndUpdateElementDynamic(view, def, values) {\n        var changed = false;\n        for (var i = 0; i < values.length; i++) {\n            if (checkAndUpdateElementValue(view, def, i, values[i]))\n                changed = true;\n        }\n        return changed;\n    }\n    function checkAndUpdateElementValue(view, def, bindingIdx, value) {\n        if (!checkAndUpdateBinding(view, def, bindingIdx, value)) {\n            return false;\n        }\n        var binding = def.bindings[bindingIdx];\n        var elData = asElementData(view, def.nodeIndex);\n        var renderNode = elData.renderElement;\n        var name = binding.name;\n        switch (binding.flags & 15 /* Types */) {\n            case 1 /* TypeElementAttribute */:\n                setElementAttribute(view, binding, renderNode, binding.ns, name, value);\n                break;\n            case 2 /* TypeElementClass */:\n                setElementClass(view, renderNode, name, value);\n                break;\n            case 4 /* TypeElementStyle */:\n                setElementStyle(view, binding, renderNode, name, value);\n                break;\n            case 8 /* TypeProperty */:\n                var bindView = (def.flags & 33554432 /* ComponentView */ &&\n                    binding.flags & 32 /* SyntheticHostProperty */) ?\n                    elData.componentView :\n                    view;\n                setElementProperty(bindView, binding, renderNode, name, value);\n                break;\n        }\n        return true;\n    }\n    function setElementAttribute(view, binding, renderNode, ns, name, value) {\n        var securityContext = binding.securityContext;\n        var renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;\n        renderValue = renderValue != null ? renderValue.toString() : null;\n        var renderer = view.renderer;\n        if (value != null) {\n            renderer.setAttribute(renderNode, name, renderValue, ns);\n        }\n        else {\n            renderer.removeAttribute(renderNode, name, ns);\n        }\n    }\n    function setElementClass(view, renderNode, name, value) {\n        var renderer = view.renderer;\n        if (value) {\n            renderer.addClass(renderNode, name);\n        }\n        else {\n            renderer.removeClass(renderNode, name);\n        }\n    }\n    function setElementStyle(view, binding, renderNode, name, value) {\n        var renderValue = view.root.sanitizer.sanitize(exports.SecurityContext.STYLE, value);\n        if (renderValue != null) {\n            renderValue = renderValue.toString();\n            var unit = binding.suffix;\n            if (unit != null) {\n                renderValue = renderValue + unit;\n            }\n        }\n        else {\n            renderValue = null;\n        }\n        var renderer = view.renderer;\n        if (renderValue != null) {\n            renderer.setStyle(renderNode, name, renderValue);\n        }\n        else {\n            renderer.removeStyle(renderNode, name);\n        }\n    }\n    function setElementProperty(view, binding, renderNode, name, value) {\n        var securityContext = binding.securityContext;\n        var renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;\n        view.renderer.setProperty(renderNode, name, renderValue);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function queryDef(flags, id, bindings) {\n        var bindingDefs = [];\n        for (var propName in bindings) {\n            var bindingType = bindings[propName];\n            bindingDefs.push({ propName: propName, bindingType: bindingType });\n        }\n        return {\n            // will bet set by the view definition\n            nodeIndex: -1,\n            parent: null,\n            renderParent: null,\n            bindingIndex: -1,\n            outputIndex: -1,\n            // regular values\n            // TODO(vicb): check\n            checkIndex: -1, flags: flags,\n            childFlags: 0,\n            directChildFlags: 0,\n            childMatchedQueries: 0,\n            ngContentIndex: -1,\n            matchedQueries: {},\n            matchedQueryIds: 0,\n            references: {},\n            childCount: 0,\n            bindings: [],\n            bindingFlags: 0,\n            outputs: [],\n            element: null,\n            provider: null,\n            text: null,\n            query: { id: id, filterId: filterQueryId(id), bindings: bindingDefs },\n            ngContent: null\n        };\n    }\n    function createQuery() {\n        return new QueryList();\n    }\n    function dirtyParentQueries(view) {\n        var queryIds = view.def.nodeMatchedQueries;\n        while (view.parent && isEmbeddedView(view)) {\n            var tplDef = view.parentNodeDef;\n            view = view.parent;\n            // content queries\n            var end = tplDef.nodeIndex + tplDef.childCount;\n            for (var i = 0; i <= end; i++) {\n                var nodeDef = view.def.nodes[i];\n                if ((nodeDef.flags & 67108864 /* TypeContentQuery */) &&\n                    (nodeDef.flags & 536870912 /* DynamicQuery */) &&\n                    (nodeDef.query.filterId & queryIds) === nodeDef.query.filterId) {\n                    asQueryList(view, i).setDirty();\n                }\n                if ((nodeDef.flags & 1 /* TypeElement */ && i + nodeDef.childCount < tplDef.nodeIndex) ||\n                    !(nodeDef.childFlags & 67108864 /* TypeContentQuery */) ||\n                    !(nodeDef.childFlags & 536870912 /* DynamicQuery */)) {\n                    // skip elements that don't contain the template element or no query.\n                    i += nodeDef.childCount;\n                }\n            }\n        }\n        // view queries\n        if (view.def.nodeFlags & 134217728 /* TypeViewQuery */) {\n            for (var i = 0; i < view.def.nodes.length; i++) {\n                var nodeDef = view.def.nodes[i];\n                if ((nodeDef.flags & 134217728 /* TypeViewQuery */) && (nodeDef.flags & 536870912 /* DynamicQuery */)) {\n                    asQueryList(view, i).setDirty();\n                }\n                // only visit the root nodes\n                i += nodeDef.childCount;\n            }\n        }\n    }\n    function checkAndUpdateQuery(view, nodeDef) {\n        var queryList = asQueryList(view, nodeDef.nodeIndex);\n        if (!queryList.dirty) {\n            return;\n        }\n        var directiveInstance;\n        var newValues = undefined;\n        if (nodeDef.flags & 67108864 /* TypeContentQuery */) {\n            var elementDef = nodeDef.parent.parent;\n            newValues = calcQueryValues(view, elementDef.nodeIndex, elementDef.nodeIndex + elementDef.childCount, nodeDef.query, []);\n            directiveInstance = asProviderData(view, nodeDef.parent.nodeIndex).instance;\n        }\n        else if (nodeDef.flags & 134217728 /* TypeViewQuery */) {\n            newValues = calcQueryValues(view, 0, view.def.nodes.length - 1, nodeDef.query, []);\n            directiveInstance = view.component;\n        }\n        queryList.reset(newValues);\n        var bindings = nodeDef.query.bindings;\n        var notify = false;\n        for (var i = 0; i < bindings.length; i++) {\n            var binding = bindings[i];\n            var boundValue = void 0;\n            switch (binding.bindingType) {\n                case 0 /* First */:\n                    boundValue = queryList.first;\n                    break;\n                case 1 /* All */:\n                    boundValue = queryList;\n                    notify = true;\n                    break;\n            }\n            directiveInstance[binding.propName] = boundValue;\n        }\n        if (notify) {\n            queryList.notifyOnChanges();\n        }\n    }\n    function calcQueryValues(view, startIndex, endIndex, queryDef, values) {\n        for (var i = startIndex; i <= endIndex; i++) {\n            var nodeDef = view.def.nodes[i];\n            var valueType = nodeDef.matchedQueries[queryDef.id];\n            if (valueType != null) {\n                values.push(getQueryValue(view, nodeDef, valueType));\n            }\n            if (nodeDef.flags & 1 /* TypeElement */ && nodeDef.element.template &&\n                (nodeDef.element.template.nodeMatchedQueries & queryDef.filterId) ===\n                    queryDef.filterId) {\n                var elementData = asElementData(view, i);\n                // check embedded views that were attached at the place of their template,\n                // but process child nodes first if some match the query (see issue #16568)\n                if ((nodeDef.childMatchedQueries & queryDef.filterId) === queryDef.filterId) {\n                    calcQueryValues(view, i + 1, i + nodeDef.childCount, queryDef, values);\n                    i += nodeDef.childCount;\n                }\n                if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n                    var embeddedViews = elementData.viewContainer._embeddedViews;\n                    for (var k = 0; k < embeddedViews.length; k++) {\n                        var embeddedView = embeddedViews[k];\n                        var dvc = declaredViewContainer(embeddedView);\n                        if (dvc && dvc === elementData) {\n                            calcQueryValues(embeddedView, 0, embeddedView.def.nodes.length - 1, queryDef, values);\n                        }\n                    }\n                }\n                var projectedViews = elementData.template._projectedViews;\n                if (projectedViews) {\n                    for (var k = 0; k < projectedViews.length; k++) {\n                        var projectedView = projectedViews[k];\n                        calcQueryValues(projectedView, 0, projectedView.def.nodes.length - 1, queryDef, values);\n                    }\n                }\n            }\n            if ((nodeDef.childMatchedQueries & queryDef.filterId) !== queryDef.filterId) {\n                // if no child matches the query, skip the children.\n                i += nodeDef.childCount;\n            }\n        }\n        return values;\n    }\n    function getQueryValue(view, nodeDef, queryValueType) {\n        if (queryValueType != null) {\n            // a match\n            switch (queryValueType) {\n                case 1 /* RenderElement */:\n                    return asElementData(view, nodeDef.nodeIndex).renderElement;\n                case 0 /* ElementRef */:\n                    return new ElementRef(asElementData(view, nodeDef.nodeIndex).renderElement);\n                case 2 /* TemplateRef */:\n                    return asElementData(view, nodeDef.nodeIndex).template;\n                case 3 /* ViewContainerRef */:\n                    return asElementData(view, nodeDef.nodeIndex).viewContainer;\n                case 4 /* Provider */:\n                    return asProviderData(view, nodeDef.nodeIndex).instance;\n            }\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function ngContentDef(ngContentIndex, index) {\n        return {\n            // will bet set by the view definition\n            nodeIndex: -1,\n            parent: null,\n            renderParent: null,\n            bindingIndex: -1,\n            outputIndex: -1,\n            // regular values\n            checkIndex: -1,\n            flags: 8 /* TypeNgContent */,\n            childFlags: 0,\n            directChildFlags: 0,\n            childMatchedQueries: 0,\n            matchedQueries: {},\n            matchedQueryIds: 0,\n            references: {}, ngContentIndex: ngContentIndex,\n            childCount: 0,\n            bindings: [],\n            bindingFlags: 0,\n            outputs: [],\n            element: null,\n            provider: null,\n            text: null,\n            query: null,\n            ngContent: { index: index }\n        };\n    }\n    function appendNgContent(view, renderHost, def) {\n        var parentEl = getParentRenderElement(view, renderHost, def);\n        if (!parentEl) {\n            // Nothing to do if there is no parent element.\n            return;\n        }\n        var ngContentIndex = def.ngContent.index;\n        visitProjectedRenderNodes(view, ngContentIndex, 1 /* AppendChild */, parentEl, null, undefined);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function purePipeDef(checkIndex, argCount) {\n        // argCount + 1 to include the pipe as first arg\n        return _pureExpressionDef(128 /* TypePurePipe */, checkIndex, new Array(argCount + 1));\n    }\n    function pureArrayDef(checkIndex, argCount) {\n        return _pureExpressionDef(32 /* TypePureArray */, checkIndex, new Array(argCount));\n    }\n    function pureObjectDef(checkIndex, propToIndex) {\n        var keys = Object.keys(propToIndex);\n        var nbKeys = keys.length;\n        var propertyNames = new Array(nbKeys);\n        for (var i = 0; i < nbKeys; i++) {\n            var key = keys[i];\n            var index = propToIndex[key];\n            propertyNames[index] = key;\n        }\n        return _pureExpressionDef(64 /* TypePureObject */, checkIndex, propertyNames);\n    }\n    function _pureExpressionDef(flags, checkIndex, propertyNames) {\n        var bindings = new Array(propertyNames.length);\n        for (var i = 0; i < propertyNames.length; i++) {\n            var prop = propertyNames[i];\n            bindings[i] = {\n                flags: 8 /* TypeProperty */,\n                name: prop,\n                ns: null,\n                nonMinifiedName: prop,\n                securityContext: null,\n                suffix: null\n            };\n        }\n        return {\n            // will bet set by the view definition\n            nodeIndex: -1,\n            parent: null,\n            renderParent: null,\n            bindingIndex: -1,\n            outputIndex: -1,\n            // regular values\n            checkIndex: checkIndex,\n            flags: flags,\n            childFlags: 0,\n            directChildFlags: 0,\n            childMatchedQueries: 0,\n            matchedQueries: {},\n            matchedQueryIds: 0,\n            references: {},\n            ngContentIndex: -1,\n            childCount: 0, bindings: bindings,\n            bindingFlags: calcBindingFlags(bindings),\n            outputs: [],\n            element: null,\n            provider: null,\n            text: null,\n            query: null,\n            ngContent: null\n        };\n    }\n    function createPureExpression(view, def) {\n        return { value: undefined };\n    }\n    function checkAndUpdatePureExpressionInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n        var bindings = def.bindings;\n        var changed = false;\n        var bindLen = bindings.length;\n        if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))\n            changed = true;\n        if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))\n            changed = true;\n        if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))\n            changed = true;\n        if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))\n            changed = true;\n        if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))\n            changed = true;\n        if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))\n            changed = true;\n        if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))\n            changed = true;\n        if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))\n            changed = true;\n        if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))\n            changed = true;\n        if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))\n            changed = true;\n        if (changed) {\n            var data = asPureExpressionData(view, def.nodeIndex);\n            var value = void 0;\n            switch (def.flags & 201347067 /* Types */) {\n                case 32 /* TypePureArray */:\n                    value = new Array(bindings.length);\n                    if (bindLen > 0)\n                        value[0] = v0;\n                    if (bindLen > 1)\n                        value[1] = v1;\n                    if (bindLen > 2)\n                        value[2] = v2;\n                    if (bindLen > 3)\n                        value[3] = v3;\n                    if (bindLen > 4)\n                        value[4] = v4;\n                    if (bindLen > 5)\n                        value[5] = v5;\n                    if (bindLen > 6)\n                        value[6] = v6;\n                    if (bindLen > 7)\n                        value[7] = v7;\n                    if (bindLen > 8)\n                        value[8] = v8;\n                    if (bindLen > 9)\n                        value[9] = v9;\n                    break;\n                case 64 /* TypePureObject */:\n                    value = {};\n                    if (bindLen > 0)\n                        value[bindings[0].name] = v0;\n                    if (bindLen > 1)\n                        value[bindings[1].name] = v1;\n                    if (bindLen > 2)\n                        value[bindings[2].name] = v2;\n                    if (bindLen > 3)\n                        value[bindings[3].name] = v3;\n                    if (bindLen > 4)\n                        value[bindings[4].name] = v4;\n                    if (bindLen > 5)\n                        value[bindings[5].name] = v5;\n                    if (bindLen > 6)\n                        value[bindings[6].name] = v6;\n                    if (bindLen > 7)\n                        value[bindings[7].name] = v7;\n                    if (bindLen > 8)\n                        value[bindings[8].name] = v8;\n                    if (bindLen > 9)\n                        value[bindings[9].name] = v9;\n                    break;\n                case 128 /* TypePurePipe */:\n                    var pipe = v0;\n                    switch (bindLen) {\n                        case 1:\n                            value = pipe.transform(v0);\n                            break;\n                        case 2:\n                            value = pipe.transform(v1);\n                            break;\n                        case 3:\n                            value = pipe.transform(v1, v2);\n                            break;\n                        case 4:\n                            value = pipe.transform(v1, v2, v3);\n                            break;\n                        case 5:\n                            value = pipe.transform(v1, v2, v3, v4);\n                            break;\n                        case 6:\n                            value = pipe.transform(v1, v2, v3, v4, v5);\n                            break;\n                        case 7:\n                            value = pipe.transform(v1, v2, v3, v4, v5, v6);\n                            break;\n                        case 8:\n                            value = pipe.transform(v1, v2, v3, v4, v5, v6, v7);\n                            break;\n                        case 9:\n                            value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8);\n                            break;\n                        case 10:\n                            value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8, v9);\n                            break;\n                    }\n                    break;\n            }\n            data.value = value;\n        }\n        return changed;\n    }\n    function checkAndUpdatePureExpressionDynamic(view, def, values) {\n        var bindings = def.bindings;\n        var changed = false;\n        for (var i = 0; i < values.length; i++) {\n            // Note: We need to loop over all values, so that\n            // the old values are updates as well!\n            if (checkAndUpdateBinding(view, def, i, values[i])) {\n                changed = true;\n            }\n        }\n        if (changed) {\n            var data = asPureExpressionData(view, def.nodeIndex);\n            var value = void 0;\n            switch (def.flags & 201347067 /* Types */) {\n                case 32 /* TypePureArray */:\n                    value = values;\n                    break;\n                case 64 /* TypePureObject */:\n                    value = {};\n                    for (var i = 0; i < values.length; i++) {\n                        value[bindings[i].name] = values[i];\n                    }\n                    break;\n                case 128 /* TypePurePipe */:\n                    var pipe = values[0];\n                    var params = values.slice(1);\n                    value = pipe.transform.apply(pipe, __spread(params));\n                    break;\n            }\n            data.value = value;\n        }\n        return changed;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function textDef(checkIndex, ngContentIndex, staticText) {\n        var bindings = new Array(staticText.length - 1);\n        for (var i = 1; i < staticText.length; i++) {\n            bindings[i - 1] = {\n                flags: 8 /* TypeProperty */,\n                name: null,\n                ns: null,\n                nonMinifiedName: null,\n                securityContext: null,\n                suffix: staticText[i],\n            };\n        }\n        return {\n            // will bet set by the view definition\n            nodeIndex: -1,\n            parent: null,\n            renderParent: null,\n            bindingIndex: -1,\n            outputIndex: -1,\n            // regular values\n            checkIndex: checkIndex,\n            flags: 2 /* TypeText */,\n            childFlags: 0,\n            directChildFlags: 0,\n            childMatchedQueries: 0,\n            matchedQueries: {},\n            matchedQueryIds: 0,\n            references: {}, ngContentIndex: ngContentIndex,\n            childCount: 0, bindings: bindings,\n            bindingFlags: 8 /* TypeProperty */,\n            outputs: [],\n            element: null,\n            provider: null,\n            text: { prefix: staticText[0] },\n            query: null,\n            ngContent: null,\n        };\n    }\n    function createText(view, renderHost, def) {\n        var renderNode;\n        var renderer = view.renderer;\n        renderNode = renderer.createText(def.text.prefix);\n        var parentEl = getParentRenderElement(view, renderHost, def);\n        if (parentEl) {\n            renderer.appendChild(parentEl, renderNode);\n        }\n        return { renderText: renderNode };\n    }\n    function checkAndUpdateTextInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n        var changed = false;\n        var bindings = def.bindings;\n        var bindLen = bindings.length;\n        if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))\n            changed = true;\n        if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))\n            changed = true;\n        if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))\n            changed = true;\n        if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))\n            changed = true;\n        if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))\n            changed = true;\n        if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))\n            changed = true;\n        if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))\n            changed = true;\n        if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))\n            changed = true;\n        if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))\n            changed = true;\n        if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))\n            changed = true;\n        if (changed) {\n            var value = def.text.prefix;\n            if (bindLen > 0)\n                value += _addInterpolationPart(v0, bindings[0]);\n            if (bindLen > 1)\n                value += _addInterpolationPart(v1, bindings[1]);\n            if (bindLen > 2)\n                value += _addInterpolationPart(v2, bindings[2]);\n            if (bindLen > 3)\n                value += _addInterpolationPart(v3, bindings[3]);\n            if (bindLen > 4)\n                value += _addInterpolationPart(v4, bindings[4]);\n            if (bindLen > 5)\n                value += _addInterpolationPart(v5, bindings[5]);\n            if (bindLen > 6)\n                value += _addInterpolationPart(v6, bindings[6]);\n            if (bindLen > 7)\n                value += _addInterpolationPart(v7, bindings[7]);\n            if (bindLen > 8)\n                value += _addInterpolationPart(v8, bindings[8]);\n            if (bindLen > 9)\n                value += _addInterpolationPart(v9, bindings[9]);\n            var renderNode = asTextData(view, def.nodeIndex).renderText;\n            view.renderer.setValue(renderNode, value);\n        }\n        return changed;\n    }\n    function checkAndUpdateTextDynamic(view, def, values) {\n        var bindings = def.bindings;\n        var changed = false;\n        for (var i = 0; i < values.length; i++) {\n            // Note: We need to loop over all values, so that\n            // the old values are updates as well!\n            if (checkAndUpdateBinding(view, def, i, values[i])) {\n                changed = true;\n            }\n        }\n        if (changed) {\n            var value = '';\n            for (var i = 0; i < values.length; i++) {\n                value = value + _addInterpolationPart(values[i], bindings[i]);\n            }\n            value = def.text.prefix + value;\n            var renderNode = asTextData(view, def.nodeIndex).renderText;\n            view.renderer.setValue(renderNode, value);\n        }\n        return changed;\n    }\n    function _addInterpolationPart(value, binding) {\n        var valueStr = value != null ? value.toString() : '';\n        return valueStr + binding.suffix;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function viewDef(flags, nodes, updateDirectives, updateRenderer) {\n        // clone nodes and set auto calculated values\n        var viewBindingCount = 0;\n        var viewDisposableCount = 0;\n        var viewNodeFlags = 0;\n        var viewRootNodeFlags = 0;\n        var viewMatchedQueries = 0;\n        var currentParent = null;\n        var currentRenderParent = null;\n        var currentElementHasPublicProviders = false;\n        var currentElementHasPrivateProviders = false;\n        var lastRenderRootNode = null;\n        for (var i = 0; i < nodes.length; i++) {\n            var node = nodes[i];\n            node.nodeIndex = i;\n            node.parent = currentParent;\n            node.bindingIndex = viewBindingCount;\n            node.outputIndex = viewDisposableCount;\n            node.renderParent = currentRenderParent;\n            viewNodeFlags |= node.flags;\n            viewMatchedQueries |= node.matchedQueryIds;\n            if (node.element) {\n                var elDef = node.element;\n                elDef.publicProviders =\n                    currentParent ? currentParent.element.publicProviders : Object.create(null);\n                elDef.allProviders = elDef.publicProviders;\n                // Note: We assume that all providers of an element are before any child element!\n                currentElementHasPublicProviders = false;\n                currentElementHasPrivateProviders = false;\n                if (node.element.template) {\n                    viewMatchedQueries |= node.element.template.nodeMatchedQueries;\n                }\n            }\n            validateNode(currentParent, node, nodes.length);\n            viewBindingCount += node.bindings.length;\n            viewDisposableCount += node.outputs.length;\n            if (!currentRenderParent && (node.flags & 3 /* CatRenderNode */)) {\n                lastRenderRootNode = node;\n            }\n            if (node.flags & 20224 /* CatProvider */) {\n                if (!currentElementHasPublicProviders) {\n                    currentElementHasPublicProviders = true;\n                    // Use prototypical inheritance to not get O(n^2) complexity...\n                    currentParent.element.publicProviders =\n                        Object.create(currentParent.element.publicProviders);\n                    currentParent.element.allProviders = currentParent.element.publicProviders;\n                }\n                var isPrivateService = (node.flags & 8192 /* PrivateProvider */) !== 0;\n                var isComponent = (node.flags & 32768 /* Component */) !== 0;\n                if (!isPrivateService || isComponent) {\n                    currentParent.element.publicProviders[tokenKey(node.provider.token)] = node;\n                }\n                else {\n                    if (!currentElementHasPrivateProviders) {\n                        currentElementHasPrivateProviders = true;\n                        // Use prototypical inheritance to not get O(n^2) complexity...\n                        currentParent.element.allProviders =\n                            Object.create(currentParent.element.publicProviders);\n                    }\n                    currentParent.element.allProviders[tokenKey(node.provider.token)] = node;\n                }\n                if (isComponent) {\n                    currentParent.element.componentProvider = node;\n                }\n            }\n            if (currentParent) {\n                currentParent.childFlags |= node.flags;\n                currentParent.directChildFlags |= node.flags;\n                currentParent.childMatchedQueries |= node.matchedQueryIds;\n                if (node.element && node.element.template) {\n                    currentParent.childMatchedQueries |= node.element.template.nodeMatchedQueries;\n                }\n            }\n            else {\n                viewRootNodeFlags |= node.flags;\n            }\n            if (node.childCount > 0) {\n                currentParent = node;\n                if (!isNgContainer(node)) {\n                    currentRenderParent = node;\n                }\n            }\n            else {\n                // When the current node has no children, check if it is the last children of its parent.\n                // When it is, propagate the flags up.\n                // The loop is required because an element could be the last transitive children of several\n                // elements. We loop to either the root or the highest opened element (= with remaining\n                // children)\n                while (currentParent && i === currentParent.nodeIndex + currentParent.childCount) {\n                    var newParent = currentParent.parent;\n                    if (newParent) {\n                        newParent.childFlags |= currentParent.childFlags;\n                        newParent.childMatchedQueries |= currentParent.childMatchedQueries;\n                    }\n                    currentParent = newParent;\n                    // We also need to update the render parent & account for ng-container\n                    if (currentParent && isNgContainer(currentParent)) {\n                        currentRenderParent = currentParent.renderParent;\n                    }\n                    else {\n                        currentRenderParent = currentParent;\n                    }\n                }\n            }\n        }\n        var handleEvent = function (view, nodeIndex, eventName, event) {\n            return nodes[nodeIndex].element.handleEvent(view, eventName, event);\n        };\n        return {\n            // Will be filled later...\n            factory: null,\n            nodeFlags: viewNodeFlags,\n            rootNodeFlags: viewRootNodeFlags,\n            nodeMatchedQueries: viewMatchedQueries, flags: flags,\n            nodes: nodes,\n            updateDirectives: updateDirectives || NOOP,\n            updateRenderer: updateRenderer || NOOP, handleEvent: handleEvent,\n            bindingCount: viewBindingCount,\n            outputCount: viewDisposableCount, lastRenderRootNode: lastRenderRootNode\n        };\n    }\n    function isNgContainer(node) {\n        return (node.flags & 1 /* TypeElement */) !== 0 && node.element.name === null;\n    }\n    function validateNode(parent, node, nodeCount) {\n        var template = node.element && node.element.template;\n        if (template) {\n            if (!template.lastRenderRootNode) {\n                throw new Error(\"Illegal State: Embedded templates without nodes are not allowed!\");\n            }\n            if (template.lastRenderRootNode &&\n                template.lastRenderRootNode.flags & 16777216 /* EmbeddedViews */) {\n                throw new Error(\"Illegal State: Last root node of a template can't have embedded views, at index \" + node.nodeIndex + \"!\");\n            }\n        }\n        if (node.flags & 20224 /* CatProvider */) {\n            var parentFlags = parent ? parent.flags : 0;\n            if ((parentFlags & 1 /* TypeElement */) === 0) {\n                throw new Error(\"Illegal State: StaticProvider/Directive nodes need to be children of elements or anchors, at index \" + node.nodeIndex + \"!\");\n            }\n        }\n        if (node.query) {\n            if (node.flags & 67108864 /* TypeContentQuery */ &&\n                (!parent || (parent.flags & 16384 /* TypeDirective */) === 0)) {\n                throw new Error(\"Illegal State: Content Query nodes need to be children of directives, at index \" + node.nodeIndex + \"!\");\n            }\n            if (node.flags & 134217728 /* TypeViewQuery */ && parent) {\n                throw new Error(\"Illegal State: View Query nodes have to be top level nodes, at index \" + node.nodeIndex + \"!\");\n            }\n        }\n        if (node.childCount) {\n            var parentEnd = parent ? parent.nodeIndex + parent.childCount : nodeCount - 1;\n            if (node.nodeIndex <= parentEnd && node.nodeIndex + node.childCount > parentEnd) {\n                throw new Error(\"Illegal State: childCount of node leads outside of parent, at index \" + node.nodeIndex + \"!\");\n            }\n        }\n    }\n    function createEmbeddedView(parent, anchorDef, viewDef, context) {\n        // embedded views are seen as siblings to the anchor, so we need\n        // to get the parent of the anchor and use it as parentIndex.\n        var view = createView(parent.root, parent.renderer, parent, anchorDef, viewDef);\n        initView(view, parent.component, context);\n        createViewNodes(view);\n        return view;\n    }\n    function createRootView(root, def, context) {\n        var view = createView(root, root.renderer, null, null, def);\n        initView(view, context, context);\n        createViewNodes(view);\n        return view;\n    }\n    function createComponentView(parentView, nodeDef, viewDef, hostElement) {\n        var rendererType = nodeDef.element.componentRendererType;\n        var compRenderer;\n        if (!rendererType) {\n            compRenderer = parentView.root.renderer;\n        }\n        else {\n            compRenderer = parentView.root.rendererFactory.createRenderer(hostElement, rendererType);\n        }\n        return createView(parentView.root, compRenderer, parentView, nodeDef.element.componentProvider, viewDef);\n    }\n    function createView(root, renderer, parent, parentNodeDef, def) {\n        var nodes = new Array(def.nodes.length);\n        var disposables = def.outputCount ? new Array(def.outputCount) : null;\n        var view = {\n            def: def,\n            parent: parent,\n            viewContainerParent: null, parentNodeDef: parentNodeDef,\n            context: null,\n            component: null, nodes: nodes,\n            state: 13 /* CatInit */, root: root, renderer: renderer,\n            oldValues: new Array(def.bindingCount), disposables: disposables,\n            initIndex: -1\n        };\n        return view;\n    }\n    function initView(view, component, context) {\n        view.component = component;\n        view.context = context;\n    }\n    function createViewNodes(view) {\n        var renderHost;\n        if (isComponentView(view)) {\n            var hostDef = view.parentNodeDef;\n            renderHost = asElementData(view.parent, hostDef.parent.nodeIndex).renderElement;\n        }\n        var def = view.def;\n        var nodes = view.nodes;\n        for (var i = 0; i < def.nodes.length; i++) {\n            var nodeDef = def.nodes[i];\n            Services.setCurrentNode(view, i);\n            var nodeData = void 0;\n            switch (nodeDef.flags & 201347067 /* Types */) {\n                case 1 /* TypeElement */:\n                    var el = createElement(view, renderHost, nodeDef);\n                    var componentView = undefined;\n                    if (nodeDef.flags & 33554432 /* ComponentView */) {\n                        var compViewDef = resolveDefinition(nodeDef.element.componentView);\n                        componentView = Services.createComponentView(view, nodeDef, compViewDef, el);\n                    }\n                    listenToElementOutputs(view, componentView, nodeDef, el);\n                    nodeData = {\n                        renderElement: el,\n                        componentView: componentView,\n                        viewContainer: null,\n                        template: nodeDef.element.template ? createTemplateData(view, nodeDef) : undefined\n                    };\n                    if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n                        nodeData.viewContainer = createViewContainerData(view, nodeDef, nodeData);\n                    }\n                    break;\n                case 2 /* TypeText */:\n                    nodeData = createText(view, renderHost, nodeDef);\n                    break;\n                case 512 /* TypeClassProvider */:\n                case 1024 /* TypeFactoryProvider */:\n                case 2048 /* TypeUseExistingProvider */:\n                case 256 /* TypeValueProvider */: {\n                    nodeData = nodes[i];\n                    if (!nodeData && !(nodeDef.flags & 4096 /* LazyProvider */)) {\n                        var instance = createProviderInstance(view, nodeDef);\n                        nodeData = { instance: instance };\n                    }\n                    break;\n                }\n                case 16 /* TypePipe */: {\n                    var instance = createPipeInstance(view, nodeDef);\n                    nodeData = { instance: instance };\n                    break;\n                }\n                case 16384 /* TypeDirective */: {\n                    nodeData = nodes[i];\n                    if (!nodeData) {\n                        var instance = createDirectiveInstance(view, nodeDef);\n                        nodeData = { instance: instance };\n                    }\n                    if (nodeDef.flags & 32768 /* Component */) {\n                        var compView = asElementData(view, nodeDef.parent.nodeIndex).componentView;\n                        initView(compView, nodeData.instance, nodeData.instance);\n                    }\n                    break;\n                }\n                case 32 /* TypePureArray */:\n                case 64 /* TypePureObject */:\n                case 128 /* TypePurePipe */:\n                    nodeData = createPureExpression(view, nodeDef);\n                    break;\n                case 67108864 /* TypeContentQuery */:\n                case 134217728 /* TypeViewQuery */:\n                    nodeData = createQuery();\n                    break;\n                case 8 /* TypeNgContent */:\n                    appendNgContent(view, renderHost, nodeDef);\n                    // no runtime data needed for NgContent...\n                    nodeData = undefined;\n                    break;\n            }\n            nodes[i] = nodeData;\n        }\n        // Create the ViewData.nodes of component views after we created everything else,\n        // so that e.g. ng-content works\n        execComponentViewsAction(view, ViewAction.CreateViewNodes);\n        // fill static content and view queries\n        execQueriesAction(view, 67108864 /* TypeContentQuery */ | 134217728 /* TypeViewQuery */, 268435456 /* StaticQuery */, 0 /* CheckAndUpdate */);\n    }\n    function checkNoChangesView(view) {\n        markProjectedViewsForCheck(view);\n        Services.updateDirectives(view, 1 /* CheckNoChanges */);\n        execEmbeddedViewsAction(view, ViewAction.CheckNoChanges);\n        Services.updateRenderer(view, 1 /* CheckNoChanges */);\n        execComponentViewsAction(view, ViewAction.CheckNoChanges);\n        // Note: We don't check queries for changes as we didn't do this in v2.x.\n        // TODO(tbosch): investigate if we can enable the check again in v5.x with a nicer error message.\n        view.state &= ~(64 /* CheckProjectedViews */ | 32 /* CheckProjectedView */);\n    }\n    function checkAndUpdateView(view) {\n        if (view.state & 1 /* BeforeFirstCheck */) {\n            view.state &= ~1 /* BeforeFirstCheck */;\n            view.state |= 2 /* FirstCheck */;\n        }\n        else {\n            view.state &= ~2 /* FirstCheck */;\n        }\n        shiftInitState(view, 0 /* InitState_BeforeInit */, 256 /* InitState_CallingOnInit */);\n        markProjectedViewsForCheck(view);\n        Services.updateDirectives(view, 0 /* CheckAndUpdate */);\n        execEmbeddedViewsAction(view, ViewAction.CheckAndUpdate);\n        execQueriesAction(view, 67108864 /* TypeContentQuery */, 536870912 /* DynamicQuery */, 0 /* CheckAndUpdate */);\n        var callInit = shiftInitState(view, 256 /* InitState_CallingOnInit */, 512 /* InitState_CallingAfterContentInit */);\n        callLifecycleHooksChildrenFirst(view, 2097152 /* AfterContentChecked */ | (callInit ? 1048576 /* AfterContentInit */ : 0));\n        Services.updateRenderer(view, 0 /* CheckAndUpdate */);\n        execComponentViewsAction(view, ViewAction.CheckAndUpdate);\n        execQueriesAction(view, 134217728 /* TypeViewQuery */, 536870912 /* DynamicQuery */, 0 /* CheckAndUpdate */);\n        callInit = shiftInitState(view, 512 /* InitState_CallingAfterContentInit */, 768 /* InitState_CallingAfterViewInit */);\n        callLifecycleHooksChildrenFirst(view, 8388608 /* AfterViewChecked */ | (callInit ? 4194304 /* AfterViewInit */ : 0));\n        if (view.def.flags & 2 /* OnPush */) {\n            view.state &= ~8 /* ChecksEnabled */;\n        }\n        view.state &= ~(64 /* CheckProjectedViews */ | 32 /* CheckProjectedView */);\n        shiftInitState(view, 768 /* InitState_CallingAfterViewInit */, 1024 /* InitState_AfterInit */);\n    }\n    function checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n        if (argStyle === 0 /* Inline */) {\n            return checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        }\n        else {\n            return checkAndUpdateNodeDynamic(view, nodeDef, v0);\n        }\n    }\n    function markProjectedViewsForCheck(view) {\n        var def = view.def;\n        if (!(def.nodeFlags & 4 /* ProjectedTemplate */)) {\n            return;\n        }\n        for (var i = 0; i < def.nodes.length; i++) {\n            var nodeDef = def.nodes[i];\n            if (nodeDef.flags & 4 /* ProjectedTemplate */) {\n                var projectedViews = asElementData(view, i).template._projectedViews;\n                if (projectedViews) {\n                    for (var i_1 = 0; i_1 < projectedViews.length; i_1++) {\n                        var projectedView = projectedViews[i_1];\n                        projectedView.state |= 32 /* CheckProjectedView */;\n                        markParentViewsForCheckProjectedViews(projectedView, view);\n                    }\n                }\n            }\n            else if ((nodeDef.childFlags & 4 /* ProjectedTemplate */) === 0) {\n                // a parent with leafs\n                // no child is a component,\n                // then skip the children\n                i += nodeDef.childCount;\n            }\n        }\n    }\n    function checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n        switch (nodeDef.flags & 201347067 /* Types */) {\n            case 1 /* TypeElement */:\n                return checkAndUpdateElementInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n            case 2 /* TypeText */:\n                return checkAndUpdateTextInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n            case 16384 /* TypeDirective */:\n                return checkAndUpdateDirectiveInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n            case 32 /* TypePureArray */:\n            case 64 /* TypePureObject */:\n            case 128 /* TypePurePipe */:\n                return checkAndUpdatePureExpressionInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n            default:\n                throw 'unreachable';\n        }\n    }\n    function checkAndUpdateNodeDynamic(view, nodeDef, values) {\n        switch (nodeDef.flags & 201347067 /* Types */) {\n            case 1 /* TypeElement */:\n                return checkAndUpdateElementDynamic(view, nodeDef, values);\n            case 2 /* TypeText */:\n                return checkAndUpdateTextDynamic(view, nodeDef, values);\n            case 16384 /* TypeDirective */:\n                return checkAndUpdateDirectiveDynamic(view, nodeDef, values);\n            case 32 /* TypePureArray */:\n            case 64 /* TypePureObject */:\n            case 128 /* TypePurePipe */:\n                return checkAndUpdatePureExpressionDynamic(view, nodeDef, values);\n            default:\n                throw 'unreachable';\n        }\n    }\n    function checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n        if (argStyle === 0 /* Inline */) {\n            checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        }\n        else {\n            checkNoChangesNodeDynamic(view, nodeDef, v0);\n        }\n        // Returning false is ok here as we would have thrown in case of a change.\n        return false;\n    }\n    function checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n        var bindLen = nodeDef.bindings.length;\n        if (bindLen > 0)\n            checkBindingNoChanges(view, nodeDef, 0, v0);\n        if (bindLen > 1)\n            checkBindingNoChanges(view, nodeDef, 1, v1);\n        if (bindLen > 2)\n            checkBindingNoChanges(view, nodeDef, 2, v2);\n        if (bindLen > 3)\n            checkBindingNoChanges(view, nodeDef, 3, v3);\n        if (bindLen > 4)\n            checkBindingNoChanges(view, nodeDef, 4, v4);\n        if (bindLen > 5)\n            checkBindingNoChanges(view, nodeDef, 5, v5);\n        if (bindLen > 6)\n            checkBindingNoChanges(view, nodeDef, 6, v6);\n        if (bindLen > 7)\n            checkBindingNoChanges(view, nodeDef, 7, v7);\n        if (bindLen > 8)\n            checkBindingNoChanges(view, nodeDef, 8, v8);\n        if (bindLen > 9)\n            checkBindingNoChanges(view, nodeDef, 9, v9);\n    }\n    function checkNoChangesNodeDynamic(view, nodeDef, values) {\n        for (var i = 0; i < values.length; i++) {\n            checkBindingNoChanges(view, nodeDef, i, values[i]);\n        }\n    }\n    /**\n     * Workaround https://github.com/angular/tsickle/issues/497\n     * @suppress {misplacedTypeAnnotation}\n     */\n    function checkNoChangesQuery(view, nodeDef) {\n        var queryList = asQueryList(view, nodeDef.nodeIndex);\n        if (queryList.dirty) {\n            throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, nodeDef.nodeIndex), \"Query \" + nodeDef.query.id + \" not dirty\", \"Query \" + nodeDef.query.id + \" dirty\", (view.state & 1 /* BeforeFirstCheck */) !== 0);\n        }\n    }\n    function destroyView(view) {\n        if (view.state & 128 /* Destroyed */) {\n            return;\n        }\n        execEmbeddedViewsAction(view, ViewAction.Destroy);\n        execComponentViewsAction(view, ViewAction.Destroy);\n        callLifecycleHooksChildrenFirst(view, 131072 /* OnDestroy */);\n        if (view.disposables) {\n            for (var i = 0; i < view.disposables.length; i++) {\n                view.disposables[i]();\n            }\n        }\n        detachProjectedView(view);\n        if (view.renderer.destroyNode) {\n            destroyViewNodes(view);\n        }\n        if (isComponentView(view)) {\n            view.renderer.destroy();\n        }\n        view.state |= 128 /* Destroyed */;\n    }\n    function destroyViewNodes(view) {\n        var len = view.def.nodes.length;\n        for (var i = 0; i < len; i++) {\n            var def = view.def.nodes[i];\n            if (def.flags & 1 /* TypeElement */) {\n                view.renderer.destroyNode(asElementData(view, i).renderElement);\n            }\n            else if (def.flags & 2 /* TypeText */) {\n                view.renderer.destroyNode(asTextData(view, i).renderText);\n            }\n            else if (def.flags & 67108864 /* TypeContentQuery */ || def.flags & 134217728 /* TypeViewQuery */) {\n                asQueryList(view, i).destroy();\n            }\n        }\n    }\n    var ViewAction;\n    (function (ViewAction) {\n        ViewAction[ViewAction[\"CreateViewNodes\"] = 0] = \"CreateViewNodes\";\n        ViewAction[ViewAction[\"CheckNoChanges\"] = 1] = \"CheckNoChanges\";\n        ViewAction[ViewAction[\"CheckNoChangesProjectedViews\"] = 2] = \"CheckNoChangesProjectedViews\";\n        ViewAction[ViewAction[\"CheckAndUpdate\"] = 3] = \"CheckAndUpdate\";\n        ViewAction[ViewAction[\"CheckAndUpdateProjectedViews\"] = 4] = \"CheckAndUpdateProjectedViews\";\n        ViewAction[ViewAction[\"Destroy\"] = 5] = \"Destroy\";\n    })(ViewAction || (ViewAction = {}));\n    function execComponentViewsAction(view, action) {\n        var def = view.def;\n        if (!(def.nodeFlags & 33554432 /* ComponentView */)) {\n            return;\n        }\n        for (var i = 0; i < def.nodes.length; i++) {\n            var nodeDef = def.nodes[i];\n            if (nodeDef.flags & 33554432 /* ComponentView */) {\n                // a leaf\n                callViewAction(asElementData(view, i).componentView, action);\n            }\n            else if ((nodeDef.childFlags & 33554432 /* ComponentView */) === 0) {\n                // a parent with leafs\n                // no child is a component,\n                // then skip the children\n                i += nodeDef.childCount;\n            }\n        }\n    }\n    function execEmbeddedViewsAction(view, action) {\n        var def = view.def;\n        if (!(def.nodeFlags & 16777216 /* EmbeddedViews */)) {\n            return;\n        }\n        for (var i = 0; i < def.nodes.length; i++) {\n            var nodeDef = def.nodes[i];\n            if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n                // a leaf\n                var embeddedViews = asElementData(view, i).viewContainer._embeddedViews;\n                for (var k = 0; k < embeddedViews.length; k++) {\n                    callViewAction(embeddedViews[k], action);\n                }\n            }\n            else if ((nodeDef.childFlags & 16777216 /* EmbeddedViews */) === 0) {\n                // a parent with leafs\n                // no child is a component,\n                // then skip the children\n                i += nodeDef.childCount;\n            }\n        }\n    }\n    function callViewAction(view, action) {\n        var viewState = view.state;\n        switch (action) {\n            case ViewAction.CheckNoChanges:\n                if ((viewState & 128 /* Destroyed */) === 0) {\n                    if ((viewState & 12 /* CatDetectChanges */) === 12 /* CatDetectChanges */) {\n                        checkNoChangesView(view);\n                    }\n                    else if (viewState & 64 /* CheckProjectedViews */) {\n                        execProjectedViewsAction(view, ViewAction.CheckNoChangesProjectedViews);\n                    }\n                }\n                break;\n            case ViewAction.CheckNoChangesProjectedViews:\n                if ((viewState & 128 /* Destroyed */) === 0) {\n                    if (viewState & 32 /* CheckProjectedView */) {\n                        checkNoChangesView(view);\n                    }\n                    else if (viewState & 64 /* CheckProjectedViews */) {\n                        execProjectedViewsAction(view, action);\n                    }\n                }\n                break;\n            case ViewAction.CheckAndUpdate:\n                if ((viewState & 128 /* Destroyed */) === 0) {\n                    if ((viewState & 12 /* CatDetectChanges */) === 12 /* CatDetectChanges */) {\n                        checkAndUpdateView(view);\n                    }\n                    else if (viewState & 64 /* CheckProjectedViews */) {\n                        execProjectedViewsAction(view, ViewAction.CheckAndUpdateProjectedViews);\n                    }\n                }\n                break;\n            case ViewAction.CheckAndUpdateProjectedViews:\n                if ((viewState & 128 /* Destroyed */) === 0) {\n                    if (viewState & 32 /* CheckProjectedView */) {\n                        checkAndUpdateView(view);\n                    }\n                    else if (viewState & 64 /* CheckProjectedViews */) {\n                        execProjectedViewsAction(view, action);\n                    }\n                }\n                break;\n            case ViewAction.Destroy:\n                // Note: destroyView recurses over all views,\n                // so we don't need to special case projected views here.\n                destroyView(view);\n                break;\n            case ViewAction.CreateViewNodes:\n                createViewNodes(view);\n                break;\n        }\n    }\n    function execProjectedViewsAction(view, action) {\n        execEmbeddedViewsAction(view, action);\n        execComponentViewsAction(view, action);\n    }\n    function execQueriesAction(view, queryFlags, staticDynamicQueryFlag, checkType) {\n        if (!(view.def.nodeFlags & queryFlags) || !(view.def.nodeFlags & staticDynamicQueryFlag)) {\n            return;\n        }\n        var nodeCount = view.def.nodes.length;\n        for (var i = 0; i < nodeCount; i++) {\n            var nodeDef = view.def.nodes[i];\n            if ((nodeDef.flags & queryFlags) && (nodeDef.flags & staticDynamicQueryFlag)) {\n                Services.setCurrentNode(view, nodeDef.nodeIndex);\n                switch (checkType) {\n                    case 0 /* CheckAndUpdate */:\n                        checkAndUpdateQuery(view, nodeDef);\n                        break;\n                    case 1 /* CheckNoChanges */:\n                        checkNoChangesQuery(view, nodeDef);\n                        break;\n                }\n            }\n            if (!(nodeDef.childFlags & queryFlags) || !(nodeDef.childFlags & staticDynamicQueryFlag)) {\n                // no child has a matching query\n                // then skip the children\n                i += nodeDef.childCount;\n            }\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var initialized = false;\n    function initServicesIfNeeded() {\n        if (initialized) {\n            return;\n        }\n        initialized = true;\n        var services = isDevMode() ? createDebugServices() : createProdServices();\n        Services.setCurrentNode = services.setCurrentNode;\n        Services.createRootView = services.createRootView;\n        Services.createEmbeddedView = services.createEmbeddedView;\n        Services.createComponentView = services.createComponentView;\n        Services.createNgModuleRef = services.createNgModuleRef;\n        Services.overrideProvider = services.overrideProvider;\n        Services.overrideComponentView = services.overrideComponentView;\n        Services.clearOverrides = services.clearOverrides;\n        Services.checkAndUpdateView = services.checkAndUpdateView;\n        Services.checkNoChangesView = services.checkNoChangesView;\n        Services.destroyView = services.destroyView;\n        Services.resolveDep = resolveDep;\n        Services.createDebugContext = services.createDebugContext;\n        Services.handleEvent = services.handleEvent;\n        Services.updateDirectives = services.updateDirectives;\n        Services.updateRenderer = services.updateRenderer;\n        Services.dirtyParentQueries = dirtyParentQueries;\n    }\n    function createProdServices() {\n        return {\n            setCurrentNode: function () { },\n            createRootView: createProdRootView,\n            createEmbeddedView: createEmbeddedView,\n            createComponentView: createComponentView,\n            createNgModuleRef: createNgModuleRef,\n            overrideProvider: NOOP,\n            overrideComponentView: NOOP,\n            clearOverrides: NOOP,\n            checkAndUpdateView: checkAndUpdateView,\n            checkNoChangesView: checkNoChangesView,\n            destroyView: destroyView,\n            createDebugContext: function (view, nodeIndex) { return new DebugContext_(view, nodeIndex); },\n            handleEvent: function (view, nodeIndex, eventName, event) {\n                return view.def.handleEvent(view, nodeIndex, eventName, event);\n            },\n            updateDirectives: function (view, checkType) { return view.def.updateDirectives(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode :\n                prodCheckNoChangesNode, view); },\n            updateRenderer: function (view, checkType) { return view.def.updateRenderer(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode :\n                prodCheckNoChangesNode, view); },\n        };\n    }\n    function createDebugServices() {\n        return {\n            setCurrentNode: debugSetCurrentNode,\n            createRootView: debugCreateRootView,\n            createEmbeddedView: debugCreateEmbeddedView,\n            createComponentView: debugCreateComponentView,\n            createNgModuleRef: debugCreateNgModuleRef,\n            overrideProvider: debugOverrideProvider,\n            overrideComponentView: debugOverrideComponentView,\n            clearOverrides: debugClearOverrides,\n            checkAndUpdateView: debugCheckAndUpdateView,\n            checkNoChangesView: debugCheckNoChangesView,\n            destroyView: debugDestroyView,\n            createDebugContext: function (view, nodeIndex) { return new DebugContext_(view, nodeIndex); },\n            handleEvent: debugHandleEvent,\n            updateDirectives: debugUpdateDirectives,\n            updateRenderer: debugUpdateRenderer,\n        };\n    }\n    function createProdRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {\n        var rendererFactory = ngModule.injector.get(RendererFactory2);\n        return createRootView(createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode), def, context);\n    }\n    function debugCreateRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {\n        var rendererFactory = ngModule.injector.get(RendererFactory2);\n        var root = createRootData(elInjector, ngModule, new DebugRendererFactory2(rendererFactory), projectableNodes, rootSelectorOrNode);\n        var defWithOverride = applyProviderOverridesToView(def);\n        return callWithDebugContext(DebugAction.create, createRootView, null, [root, defWithOverride, context]);\n    }\n    function createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode) {\n        var sanitizer = ngModule.injector.get(Sanitizer);\n        var errorHandler = ngModule.injector.get(ErrorHandler);\n        var renderer = rendererFactory.createRenderer(null, null);\n        return {\n            ngModule: ngModule,\n            injector: elInjector, projectableNodes: projectableNodes,\n            selectorOrNode: rootSelectorOrNode, sanitizer: sanitizer, rendererFactory: rendererFactory, renderer: renderer, errorHandler: errorHandler\n        };\n    }\n    function debugCreateEmbeddedView(parentView, anchorDef, viewDef, context) {\n        var defWithOverride = applyProviderOverridesToView(viewDef);\n        return callWithDebugContext(DebugAction.create, createEmbeddedView, null, [parentView, anchorDef, defWithOverride, context]);\n    }\n    function debugCreateComponentView(parentView, nodeDef, viewDef, hostElement) {\n        var overrideComponentView = viewDefOverrides.get(nodeDef.element.componentProvider.provider.token);\n        if (overrideComponentView) {\n            viewDef = overrideComponentView;\n        }\n        else {\n            viewDef = applyProviderOverridesToView(viewDef);\n        }\n        return callWithDebugContext(DebugAction.create, createComponentView, null, [parentView, nodeDef, viewDef, hostElement]);\n    }\n    function debugCreateNgModuleRef(moduleType, parentInjector, bootstrapComponents, def) {\n        var defWithOverride = applyProviderOverridesToNgModule(def);\n        return createNgModuleRef(moduleType, parentInjector, bootstrapComponents, defWithOverride);\n    }\n    var providerOverrides = new Map();\n    var providerOverridesWithScope = new Map();\n    var viewDefOverrides = new Map();\n    function debugOverrideProvider(override) {\n        providerOverrides.set(override.token, override);\n        var injectableDef;\n        if (typeof override.token === 'function' && (injectableDef = getInjectableDef(override.token)) &&\n            typeof injectableDef.providedIn === 'function') {\n            providerOverridesWithScope.set(override.token, override);\n        }\n    }\n    function debugOverrideComponentView(comp, compFactory) {\n        var hostViewDef = resolveDefinition(getComponentViewDefinitionFactory(compFactory));\n        var compViewDef = resolveDefinition(hostViewDef.nodes[0].element.componentView);\n        viewDefOverrides.set(comp, compViewDef);\n    }\n    function debugClearOverrides() {\n        providerOverrides.clear();\n        providerOverridesWithScope.clear();\n        viewDefOverrides.clear();\n    }\n    // Notes about the algorithm:\n    // 1) Locate the providers of an element and check if one of them was overwritten\n    // 2) Change the providers of that element\n    //\n    // We only create new datastructures if we need to, to keep perf impact\n    // reasonable.\n    function applyProviderOverridesToView(def) {\n        if (providerOverrides.size === 0) {\n            return def;\n        }\n        var elementIndicesWithOverwrittenProviders = findElementIndicesWithOverwrittenProviders(def);\n        if (elementIndicesWithOverwrittenProviders.length === 0) {\n            return def;\n        }\n        // clone the whole view definition,\n        // as it maintains references between the nodes that are hard to update.\n        def = def.factory(function () { return NOOP; });\n        for (var i = 0; i < elementIndicesWithOverwrittenProviders.length; i++) {\n            applyProviderOverridesToElement(def, elementIndicesWithOverwrittenProviders[i]);\n        }\n        return def;\n        function findElementIndicesWithOverwrittenProviders(def) {\n            var elIndicesWithOverwrittenProviders = [];\n            var lastElementDef = null;\n            for (var i = 0; i < def.nodes.length; i++) {\n                var nodeDef = def.nodes[i];\n                if (nodeDef.flags & 1 /* TypeElement */) {\n                    lastElementDef = nodeDef;\n                }\n                if (lastElementDef && nodeDef.flags & 3840 /* CatProviderNoDirective */ &&\n                    providerOverrides.has(nodeDef.provider.token)) {\n                    elIndicesWithOverwrittenProviders.push(lastElementDef.nodeIndex);\n                    lastElementDef = null;\n                }\n            }\n            return elIndicesWithOverwrittenProviders;\n        }\n        function applyProviderOverridesToElement(viewDef, elIndex) {\n            for (var i = elIndex + 1; i < viewDef.nodes.length; i++) {\n                var nodeDef = viewDef.nodes[i];\n                if (nodeDef.flags & 1 /* TypeElement */) {\n                    // stop at the next element\n                    return;\n                }\n                if (nodeDef.flags & 3840 /* CatProviderNoDirective */) {\n                    var provider = nodeDef.provider;\n                    var override = providerOverrides.get(provider.token);\n                    if (override) {\n                        nodeDef.flags = (nodeDef.flags & ~3840 /* CatProviderNoDirective */) | override.flags;\n                        provider.deps = splitDepsDsl(override.deps);\n                        provider.value = override.value;\n                    }\n                }\n            }\n        }\n    }\n    // Notes about the algorithm:\n    // We only create new datastructures if we need to, to keep perf impact\n    // reasonable.\n    function applyProviderOverridesToNgModule(def) {\n        var _a = calcHasOverrides(def), hasOverrides = _a.hasOverrides, hasDeprecatedOverrides = _a.hasDeprecatedOverrides;\n        if (!hasOverrides) {\n            return def;\n        }\n        // clone the whole view definition,\n        // as it maintains references between the nodes that are hard to update.\n        def = def.factory(function () { return NOOP; });\n        applyProviderOverrides(def);\n        return def;\n        function calcHasOverrides(def) {\n            var hasOverrides = false;\n            var hasDeprecatedOverrides = false;\n            if (providerOverrides.size === 0) {\n                return { hasOverrides: hasOverrides, hasDeprecatedOverrides: hasDeprecatedOverrides };\n            }\n            def.providers.forEach(function (node) {\n                var override = providerOverrides.get(node.token);\n                if ((node.flags & 3840 /* CatProviderNoDirective */) && override) {\n                    hasOverrides = true;\n                    hasDeprecatedOverrides = hasDeprecatedOverrides || override.deprecatedBehavior;\n                }\n            });\n            def.modules.forEach(function (module) {\n                providerOverridesWithScope.forEach(function (override, token) {\n                    if (getInjectableDef(token).providedIn === module) {\n                        hasOverrides = true;\n                        hasDeprecatedOverrides = hasDeprecatedOverrides || override.deprecatedBehavior;\n                    }\n                });\n            });\n            return { hasOverrides: hasOverrides, hasDeprecatedOverrides: hasDeprecatedOverrides };\n        }\n        function applyProviderOverrides(def) {\n            for (var i = 0; i < def.providers.length; i++) {\n                var provider = def.providers[i];\n                if (hasDeprecatedOverrides) {\n                    // We had a bug where me made\n                    // all providers lazy. Keep this logic behind a flag\n                    // for migrating existing users.\n                    provider.flags |= 4096 /* LazyProvider */;\n                }\n                var override = providerOverrides.get(provider.token);\n                if (override) {\n                    provider.flags = (provider.flags & ~3840 /* CatProviderNoDirective */) | override.flags;\n                    provider.deps = splitDepsDsl(override.deps);\n                    provider.value = override.value;\n                }\n            }\n            if (providerOverridesWithScope.size > 0) {\n                var moduleSet_1 = new Set(def.modules);\n                providerOverridesWithScope.forEach(function (override, token) {\n                    if (moduleSet_1.has(getInjectableDef(token).providedIn)) {\n                        var provider = {\n                            token: token,\n                            flags: override.flags | (hasDeprecatedOverrides ? 4096 /* LazyProvider */ : 0 /* None */),\n                            deps: splitDepsDsl(override.deps),\n                            value: override.value,\n                            index: def.providers.length,\n                        };\n                        def.providers.push(provider);\n                        def.providersByKey[tokenKey(token)] = provider;\n                    }\n                });\n            }\n        }\n    }\n    function prodCheckAndUpdateNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n        var nodeDef = view.def.nodes[checkIndex];\n        checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        return (nodeDef.flags & 224 /* CatPureExpression */) ?\n            asPureExpressionData(view, checkIndex).value :\n            undefined;\n    }\n    function prodCheckNoChangesNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n        var nodeDef = view.def.nodes[checkIndex];\n        checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        return (nodeDef.flags & 224 /* CatPureExpression */) ?\n            asPureExpressionData(view, checkIndex).value :\n            undefined;\n    }\n    function debugCheckAndUpdateView(view) {\n        return callWithDebugContext(DebugAction.detectChanges, checkAndUpdateView, null, [view]);\n    }\n    function debugCheckNoChangesView(view) {\n        return callWithDebugContext(DebugAction.checkNoChanges, checkNoChangesView, null, [view]);\n    }\n    function debugDestroyView(view) {\n        return callWithDebugContext(DebugAction.destroy, destroyView, null, [view]);\n    }\n    var DebugAction;\n    (function (DebugAction) {\n        DebugAction[DebugAction[\"create\"] = 0] = \"create\";\n        DebugAction[DebugAction[\"detectChanges\"] = 1] = \"detectChanges\";\n        DebugAction[DebugAction[\"checkNoChanges\"] = 2] = \"checkNoChanges\";\n        DebugAction[DebugAction[\"destroy\"] = 3] = \"destroy\";\n        DebugAction[DebugAction[\"handleEvent\"] = 4] = \"handleEvent\";\n    })(DebugAction || (DebugAction = {}));\n    var _currentAction;\n    var _currentView;\n    var _currentNodeIndex;\n    function debugSetCurrentNode(view, nodeIndex) {\n        _currentView = view;\n        _currentNodeIndex = nodeIndex;\n    }\n    function debugHandleEvent(view, nodeIndex, eventName, event) {\n        debugSetCurrentNode(view, nodeIndex);\n        return callWithDebugContext(DebugAction.handleEvent, view.def.handleEvent, null, [view, nodeIndex, eventName, event]);\n    }\n    function debugUpdateDirectives(view, checkType) {\n        if (view.state & 128 /* Destroyed */) {\n            throw viewDestroyedError(DebugAction[_currentAction]);\n        }\n        debugSetCurrentNode(view, nextDirectiveWithBinding(view, 0));\n        return view.def.updateDirectives(debugCheckDirectivesFn, view);\n        function debugCheckDirectivesFn(view, nodeIndex, argStyle) {\n            var values = [];\n            for (var _i = 3; _i < arguments.length; _i++) {\n                values[_i - 3] = arguments[_i];\n            }\n            var nodeDef = view.def.nodes[nodeIndex];\n            if (checkType === 0 /* CheckAndUpdate */) {\n                debugCheckAndUpdateNode(view, nodeDef, argStyle, values);\n            }\n            else {\n                debugCheckNoChangesNode(view, nodeDef, argStyle, values);\n            }\n            if (nodeDef.flags & 16384 /* TypeDirective */) {\n                debugSetCurrentNode(view, nextDirectiveWithBinding(view, nodeIndex));\n            }\n            return (nodeDef.flags & 224 /* CatPureExpression */) ?\n                asPureExpressionData(view, nodeDef.nodeIndex).value :\n                undefined;\n        }\n    }\n    function debugUpdateRenderer(view, checkType) {\n        if (view.state & 128 /* Destroyed */) {\n            throw viewDestroyedError(DebugAction[_currentAction]);\n        }\n        debugSetCurrentNode(view, nextRenderNodeWithBinding(view, 0));\n        return view.def.updateRenderer(debugCheckRenderNodeFn, view);\n        function debugCheckRenderNodeFn(view, nodeIndex, argStyle) {\n            var values = [];\n            for (var _i = 3; _i < arguments.length; _i++) {\n                values[_i - 3] = arguments[_i];\n            }\n            var nodeDef = view.def.nodes[nodeIndex];\n            if (checkType === 0 /* CheckAndUpdate */) {\n                debugCheckAndUpdateNode(view, nodeDef, argStyle, values);\n            }\n            else {\n                debugCheckNoChangesNode(view, nodeDef, argStyle, values);\n            }\n            if (nodeDef.flags & 3 /* CatRenderNode */) {\n                debugSetCurrentNode(view, nextRenderNodeWithBinding(view, nodeIndex));\n            }\n            return (nodeDef.flags & 224 /* CatPureExpression */) ?\n                asPureExpressionData(view, nodeDef.nodeIndex).value :\n                undefined;\n        }\n    }\n    function debugCheckAndUpdateNode(view, nodeDef, argStyle, givenValues) {\n        var changed = checkAndUpdateNode.apply(void 0, __spread([view, nodeDef, argStyle], givenValues));\n        if (changed) {\n            var values = argStyle === 1 /* Dynamic */ ? givenValues[0] : givenValues;\n            if (nodeDef.flags & 16384 /* TypeDirective */) {\n                var bindingValues = {};\n                for (var i = 0; i < nodeDef.bindings.length; i++) {\n                    var binding = nodeDef.bindings[i];\n                    var value = values[i];\n                    if (binding.flags & 8 /* TypeProperty */) {\n                        bindingValues[normalizeDebugBindingName(binding.nonMinifiedName)] =\n                            normalizeDebugBindingValue(value);\n                    }\n                }\n                var elDef = nodeDef.parent;\n                var el = asElementData(view, elDef.nodeIndex).renderElement;\n                if (!elDef.element.name) {\n                    // a comment.\n                    view.renderer.setValue(el, \"bindings=\" + JSON.stringify(bindingValues, null, 2));\n                }\n                else {\n                    // a regular element.\n                    for (var attr in bindingValues) {\n                        var value = bindingValues[attr];\n                        if (value != null) {\n                            view.renderer.setAttribute(el, attr, value);\n                        }\n                        else {\n                            view.renderer.removeAttribute(el, attr);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    function debugCheckNoChangesNode(view, nodeDef, argStyle, values) {\n        checkNoChangesNode.apply(void 0, __spread([view, nodeDef, argStyle], values));\n    }\n    function nextDirectiveWithBinding(view, nodeIndex) {\n        for (var i = nodeIndex; i < view.def.nodes.length; i++) {\n            var nodeDef = view.def.nodes[i];\n            if (nodeDef.flags & 16384 /* TypeDirective */ && nodeDef.bindings && nodeDef.bindings.length) {\n                return i;\n            }\n        }\n        return null;\n    }\n    function nextRenderNodeWithBinding(view, nodeIndex) {\n        for (var i = nodeIndex; i < view.def.nodes.length; i++) {\n            var nodeDef = view.def.nodes[i];\n            if ((nodeDef.flags & 3 /* CatRenderNode */) && nodeDef.bindings && nodeDef.bindings.length) {\n                return i;\n            }\n        }\n        return null;\n    }\n    var DebugContext_ = /** @class */ (function () {\n        function DebugContext_(view, nodeIndex) {\n            this.view = view;\n            this.nodeIndex = nodeIndex;\n            if (nodeIndex == null) {\n                this.nodeIndex = nodeIndex = 0;\n            }\n            this.nodeDef = view.def.nodes[nodeIndex];\n            var elDef = this.nodeDef;\n            var elView = view;\n            while (elDef && (elDef.flags & 1 /* TypeElement */) === 0) {\n                elDef = elDef.parent;\n            }\n            if (!elDef) {\n                while (!elDef && elView) {\n                    elDef = viewParentEl(elView);\n                    elView = elView.parent;\n                }\n            }\n            this.elDef = elDef;\n            this.elView = elView;\n        }\n        Object.defineProperty(DebugContext_.prototype, \"elOrCompView\", {\n            get: function () {\n                // Has to be done lazily as we use the DebugContext also during creation of elements...\n                return asElementData(this.elView, this.elDef.nodeIndex).componentView || this.view;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugContext_.prototype, \"injector\", {\n            get: function () { return createInjector$1(this.elView, this.elDef); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugContext_.prototype, \"component\", {\n            get: function () { return this.elOrCompView.component; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugContext_.prototype, \"context\", {\n            get: function () { return this.elOrCompView.context; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugContext_.prototype, \"providerTokens\", {\n            get: function () {\n                var tokens = [];\n                if (this.elDef) {\n                    for (var i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {\n                        var childDef = this.elView.def.nodes[i];\n                        if (childDef.flags & 20224 /* CatProvider */) {\n                            tokens.push(childDef.provider.token);\n                        }\n                        i += childDef.childCount;\n                    }\n                }\n                return tokens;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugContext_.prototype, \"references\", {\n            get: function () {\n                var references = {};\n                if (this.elDef) {\n                    collectReferences(this.elView, this.elDef, references);\n                    for (var i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {\n                        var childDef = this.elView.def.nodes[i];\n                        if (childDef.flags & 20224 /* CatProvider */) {\n                            collectReferences(this.elView, childDef, references);\n                        }\n                        i += childDef.childCount;\n                    }\n                }\n                return references;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugContext_.prototype, \"componentRenderElement\", {\n            get: function () {\n                var elData = findHostElement(this.elOrCompView);\n                return elData ? elData.renderElement : undefined;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugContext_.prototype, \"renderNode\", {\n            get: function () {\n                return this.nodeDef.flags & 2 /* TypeText */ ? renderNode(this.view, this.nodeDef) :\n                    renderNode(this.elView, this.elDef);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        DebugContext_.prototype.logError = function (console) {\n            var values = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                values[_i - 1] = arguments[_i];\n            }\n            var logViewDef;\n            var logNodeIndex;\n            if (this.nodeDef.flags & 2 /* TypeText */) {\n                logViewDef = this.view.def;\n                logNodeIndex = this.nodeDef.nodeIndex;\n            }\n            else {\n                logViewDef = this.elView.def;\n                logNodeIndex = this.elDef.nodeIndex;\n            }\n            // Note: we only generate a log function for text and element nodes\n            // to make the generated code as small as possible.\n            var renderNodeIndex = getRenderNodeIndex(logViewDef, logNodeIndex);\n            var currRenderNodeIndex = -1;\n            var nodeLogger = function () {\n                var _a;\n                currRenderNodeIndex++;\n                if (currRenderNodeIndex === renderNodeIndex) {\n                    return (_a = console.error).bind.apply(_a, __spread([console], values));\n                }\n                else {\n                    return NOOP;\n                }\n            };\n            logViewDef.factory(nodeLogger);\n            if (currRenderNodeIndex < renderNodeIndex) {\n                console.error('Illegal state: the ViewDefinitionFactory did not call the logger!');\n                console.error.apply(console, __spread(values));\n            }\n        };\n        return DebugContext_;\n    }());\n    function getRenderNodeIndex(viewDef, nodeIndex) {\n        var renderNodeIndex = -1;\n        for (var i = 0; i <= nodeIndex; i++) {\n            var nodeDef = viewDef.nodes[i];\n            if (nodeDef.flags & 3 /* CatRenderNode */) {\n                renderNodeIndex++;\n            }\n        }\n        return renderNodeIndex;\n    }\n    function findHostElement(view) {\n        while (view && !isComponentView(view)) {\n            view = view.parent;\n        }\n        if (view.parent) {\n            return asElementData(view.parent, viewParentEl(view).nodeIndex);\n        }\n        return null;\n    }\n    function collectReferences(view, nodeDef, references) {\n        for (var refName in nodeDef.references) {\n            references[refName] = getQueryValue(view, nodeDef, nodeDef.references[refName]);\n        }\n    }\n    function callWithDebugContext(action, fn, self, args) {\n        var oldAction = _currentAction;\n        var oldView = _currentView;\n        var oldNodeIndex = _currentNodeIndex;\n        try {\n            _currentAction = action;\n            var result = fn.apply(self, args);\n            _currentView = oldView;\n            _currentNodeIndex = oldNodeIndex;\n            _currentAction = oldAction;\n            return result;\n        }\n        catch (e) {\n            if (isViewDebugError(e) || !_currentView) {\n                throw e;\n            }\n            throw viewWrappedDebugError(e, getCurrentDebugContext());\n        }\n    }\n    function getCurrentDebugContext() {\n        return _currentView ? new DebugContext_(_currentView, _currentNodeIndex) : null;\n    }\n    var DebugRendererFactory2 = /** @class */ (function () {\n        function DebugRendererFactory2(delegate) {\n            this.delegate = delegate;\n        }\n        DebugRendererFactory2.prototype.createRenderer = function (element, renderData) {\n            return new DebugRenderer2(this.delegate.createRenderer(element, renderData));\n        };\n        DebugRendererFactory2.prototype.begin = function () {\n            if (this.delegate.begin) {\n                this.delegate.begin();\n            }\n        };\n        DebugRendererFactory2.prototype.end = function () {\n            if (this.delegate.end) {\n                this.delegate.end();\n            }\n        };\n        DebugRendererFactory2.prototype.whenRenderingDone = function () {\n            if (this.delegate.whenRenderingDone) {\n                return this.delegate.whenRenderingDone();\n            }\n            return Promise.resolve(null);\n        };\n        return DebugRendererFactory2;\n    }());\n    var DebugRenderer2 = /** @class */ (function () {\n        function DebugRenderer2(delegate) {\n            this.delegate = delegate;\n            /**\n             * Factory function used to create a `DebugContext` when a node is created.\n             *\n             * The `DebugContext` allows to retrieve information about the nodes that are useful in tests.\n             *\n             * The factory is configurable so that the `DebugRenderer2` could instantiate either a View Engine\n             * or a Render context.\n             */\n            this.debugContextFactory = getCurrentDebugContext;\n            this.data = this.delegate.data;\n        }\n        DebugRenderer2.prototype.createDebugContext = function (nativeElement) { return this.debugContextFactory(nativeElement); };\n        DebugRenderer2.prototype.destroyNode = function (node) {\n            removeDebugNodeFromIndex(getDebugNode(node));\n            if (this.delegate.destroyNode) {\n                this.delegate.destroyNode(node);\n            }\n        };\n        DebugRenderer2.prototype.destroy = function () { this.delegate.destroy(); };\n        DebugRenderer2.prototype.createElement = function (name, namespace) {\n            var el = this.delegate.createElement(name, namespace);\n            var debugCtx = this.createDebugContext(el);\n            if (debugCtx) {\n                var debugEl = new DebugElement__PRE_R3__(el, null, debugCtx);\n                debugEl.name = name;\n                indexDebugNode(debugEl);\n            }\n            return el;\n        };\n        DebugRenderer2.prototype.createComment = function (value) {\n            var comment = this.delegate.createComment(value);\n            var debugCtx = this.createDebugContext(comment);\n            if (debugCtx) {\n                indexDebugNode(new DebugNode__PRE_R3__(comment, null, debugCtx));\n            }\n            return comment;\n        };\n        DebugRenderer2.prototype.createText = function (value) {\n            var text = this.delegate.createText(value);\n            var debugCtx = this.createDebugContext(text);\n            if (debugCtx) {\n                indexDebugNode(new DebugNode__PRE_R3__(text, null, debugCtx));\n            }\n            return text;\n        };\n        DebugRenderer2.prototype.appendChild = function (parent, newChild) {\n            var debugEl = getDebugNode(parent);\n            var debugChildEl = getDebugNode(newChild);\n            if (debugEl && debugChildEl && debugEl instanceof DebugElement__PRE_R3__) {\n                debugEl.addChild(debugChildEl);\n            }\n            this.delegate.appendChild(parent, newChild);\n        };\n        DebugRenderer2.prototype.insertBefore = function (parent, newChild, refChild) {\n            var debugEl = getDebugNode(parent);\n            var debugChildEl = getDebugNode(newChild);\n            var debugRefEl = getDebugNode(refChild);\n            if (debugEl && debugChildEl && debugEl instanceof DebugElement__PRE_R3__) {\n                debugEl.insertBefore(debugRefEl, debugChildEl);\n            }\n            this.delegate.insertBefore(parent, newChild, refChild);\n        };\n        DebugRenderer2.prototype.removeChild = function (parent, oldChild) {\n            var debugEl = getDebugNode(parent);\n            var debugChildEl = getDebugNode(oldChild);\n            if (debugEl && debugChildEl && debugEl instanceof DebugElement__PRE_R3__) {\n                debugEl.removeChild(debugChildEl);\n            }\n            this.delegate.removeChild(parent, oldChild);\n        };\n        DebugRenderer2.prototype.selectRootElement = function (selectorOrNode, preserveContent) {\n            var el = this.delegate.selectRootElement(selectorOrNode, preserveContent);\n            var debugCtx = getCurrentDebugContext();\n            if (debugCtx) {\n                indexDebugNode(new DebugElement__PRE_R3__(el, null, debugCtx));\n            }\n            return el;\n        };\n        DebugRenderer2.prototype.setAttribute = function (el, name, value, namespace) {\n            var debugEl = getDebugNode(el);\n            if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n                var fullName = namespace ? namespace + ':' + name : name;\n                debugEl.attributes[fullName] = value;\n            }\n            this.delegate.setAttribute(el, name, value, namespace);\n        };\n        DebugRenderer2.prototype.removeAttribute = function (el, name, namespace) {\n            var debugEl = getDebugNode(el);\n            if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n                var fullName = namespace ? namespace + ':' + name : name;\n                debugEl.attributes[fullName] = null;\n            }\n            this.delegate.removeAttribute(el, name, namespace);\n        };\n        DebugRenderer2.prototype.addClass = function (el, name) {\n            var debugEl = getDebugNode(el);\n            if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n                debugEl.classes[name] = true;\n            }\n            this.delegate.addClass(el, name);\n        };\n        DebugRenderer2.prototype.removeClass = function (el, name) {\n            var debugEl = getDebugNode(el);\n            if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n                debugEl.classes[name] = false;\n            }\n            this.delegate.removeClass(el, name);\n        };\n        DebugRenderer2.prototype.setStyle = function (el, style, value, flags) {\n            var debugEl = getDebugNode(el);\n            if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n                debugEl.styles[style] = value;\n            }\n            this.delegate.setStyle(el, style, value, flags);\n        };\n        DebugRenderer2.prototype.removeStyle = function (el, style, flags) {\n            var debugEl = getDebugNode(el);\n            if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n                debugEl.styles[style] = null;\n            }\n            this.delegate.removeStyle(el, style, flags);\n        };\n        DebugRenderer2.prototype.setProperty = function (el, name, value) {\n            var debugEl = getDebugNode(el);\n            if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n                debugEl.properties[name] = value;\n            }\n            this.delegate.setProperty(el, name, value);\n        };\n        DebugRenderer2.prototype.listen = function (target, eventName, callback) {\n            if (typeof target !== 'string') {\n                var debugEl = getDebugNode(target);\n                if (debugEl) {\n                    debugEl.listeners.push(new DebugEventListener(eventName, callback));\n                }\n            }\n            return this.delegate.listen(target, eventName, callback);\n        };\n        DebugRenderer2.prototype.parentNode = function (node) { return this.delegate.parentNode(node); };\n        DebugRenderer2.prototype.nextSibling = function (node) { return this.delegate.nextSibling(node); };\n        DebugRenderer2.prototype.setValue = function (node, value) { return this.delegate.setValue(node, value); };\n        return DebugRenderer2;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function overrideProvider(override) {\n        initServicesIfNeeded();\n        return Services.overrideProvider(override);\n    }\n    function overrideComponentView(comp, componentFactory) {\n        initServicesIfNeeded();\n        return Services.overrideComponentView(comp, componentFactory);\n    }\n    function clearOverrides() {\n        initServicesIfNeeded();\n        return Services.clearOverrides();\n    }\n    // Attention: this function is called as top level function.\n    // Putting any logic in here will destroy closure tree shaking!\n    function createNgModuleFactory(ngModuleType, bootstrapComponents, defFactory) {\n        return new NgModuleFactory_(ngModuleType, bootstrapComponents, defFactory);\n    }\n    function cloneNgModuleDefinition(def) {\n        var providers = Array.from(def.providers);\n        var modules = Array.from(def.modules);\n        var providersByKey = {};\n        for (var key in def.providersByKey) {\n            providersByKey[key] = def.providersByKey[key];\n        }\n        return {\n            factory: def.factory,\n            isRoot: def.isRoot, providers: providers, modules: modules, providersByKey: providersByKey,\n        };\n    }\n    var NgModuleFactory_ = /** @class */ (function (_super) {\n        __extends(NgModuleFactory_, _super);\n        function NgModuleFactory_(moduleType, _bootstrapComponents, _ngModuleDefFactory) {\n            var _this = \n            // Attention: this ctor is called as top level function.\n            // Putting any logic in here will destroy closure tree shaking!\n            _super.call(this) || this;\n            _this.moduleType = moduleType;\n            _this._bootstrapComponents = _bootstrapComponents;\n            _this._ngModuleDefFactory = _ngModuleDefFactory;\n            return _this;\n        }\n        NgModuleFactory_.prototype.create = function (parentInjector) {\n            initServicesIfNeeded();\n            // Clone the NgModuleDefinition so that any tree shakeable provider definition\n            // added to this instance of the NgModuleRef doesn't affect the cached copy.\n            // See https://github.com/angular/angular/issues/25018.\n            var def = cloneNgModuleDefinition(resolveDefinition(this._ngModuleDefFactory));\n            return Services.createNgModuleRef(this.moduleType, parentInjector || Injector.NULL, this._bootstrapComponents, def);\n        };\n        return NgModuleFactory_;\n    }(NgModuleFactory));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // clang-format on\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // This file only reexports content of the `src` folder. Keep it that way.\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    exports.createPlatform = createPlatform;\n    exports.assertPlatform = assertPlatform;\n    exports.destroyPlatform = destroyPlatform;\n    exports.getPlatform = getPlatform;\n    exports.PlatformRef = PlatformRef;\n    exports.ApplicationRef = ApplicationRef;\n    exports.createPlatformFactory = createPlatformFactory;\n    exports.NgProbeToken = NgProbeToken;\n    exports.enableProdMode = enableProdMode;\n    exports.isDevMode = isDevMode;\n    exports.APP_ID = APP_ID;\n    exports.PACKAGE_ROOT_URL = PACKAGE_ROOT_URL;\n    exports.PLATFORM_INITIALIZER = PLATFORM_INITIALIZER;\n    exports.PLATFORM_ID = PLATFORM_ID;\n    exports.APP_BOOTSTRAP_LISTENER = APP_BOOTSTRAP_LISTENER;\n    exports.APP_INITIALIZER = APP_INITIALIZER;\n    exports.ApplicationInitStatus = ApplicationInitStatus;\n    exports.DebugElement = DebugElement;\n    exports.DebugEventListener = DebugEventListener;\n    exports.DebugNode = DebugNode;\n    exports.asNativeElements = asNativeElements;\n    exports.getDebugNode = getDebugNode;\n    exports.Testability = Testability;\n    exports.TestabilityRegistry = TestabilityRegistry;\n    exports.setTestabilityGetter = setTestabilityGetter;\n    exports.TRANSLATIONS = TRANSLATIONS$1;\n    exports.TRANSLATIONS_FORMAT = TRANSLATIONS_FORMAT;\n    exports.LOCALE_ID = LOCALE_ID$1;\n    exports.ApplicationModule = ApplicationModule;\n    exports.wtfCreateScope = wtfCreateScope;\n    exports.wtfLeave = wtfLeave;\n    exports.wtfStartTimeRange = wtfStartTimeRange;\n    exports.wtfEndTimeRange = wtfEndTimeRange;\n    exports.Type = Type;\n    exports.EventEmitter = EventEmitter;\n    exports.ErrorHandler = ErrorHandler;\n    exports.Sanitizer = Sanitizer;\n    exports.Attribute = Attribute;\n    exports.ANALYZE_FOR_ENTRY_COMPONENTS = ANALYZE_FOR_ENTRY_COMPONENTS;\n    exports.ContentChild = ContentChild;\n    exports.ContentChildren = ContentChildren;\n    exports.Query = Query;\n    exports.ViewChild = ViewChild;\n    exports.ViewChildren = ViewChildren;\n    exports.Component = Component;\n    exports.Directive = Directive;\n    exports.HostBinding = HostBinding;\n    exports.HostListener = HostListener;\n    exports.Input = Input;\n    exports.Output = Output;\n    exports.Pipe = Pipe;\n    exports.NgModule = NgModule;\n    exports.CUSTOM_ELEMENTS_SCHEMA = CUSTOM_ELEMENTS_SCHEMA;\n    exports.NO_ERRORS_SCHEMA = NO_ERRORS_SCHEMA;\n    exports.Version = Version;\n    exports.VERSION = VERSION;\n    exports.ɵɵdefineInjectable = ɵɵdefineInjectable;\n    exports.defineInjectable = defineInjectable;\n    exports.ɵɵdefineInjector = ɵɵdefineInjector;\n    exports.forwardRef = forwardRef;\n    exports.resolveForwardRef = resolveForwardRef;\n    exports.Injectable = Injectable;\n    exports.Injector = Injector;\n    exports.ɵɵinject = ɵɵinject;\n    exports.inject = inject;\n    exports.INJECTOR = INJECTOR;\n    exports.ReflectiveInjector = ReflectiveInjector;\n    exports.ResolvedReflectiveFactory = ResolvedReflectiveFactory;\n    exports.ReflectiveKey = ReflectiveKey;\n    exports.InjectionToken = InjectionToken;\n    exports.Inject = Inject;\n    exports.Optional = Optional;\n    exports.Self = Self;\n    exports.SkipSelf = SkipSelf;\n    exports.Host = Host;\n    exports.NgZone = NgZone;\n    exports.ɵNoopNgZone = NoopNgZone;\n    exports.RenderComponentType = RenderComponentType;\n    exports.Renderer = Renderer;\n    exports.Renderer2 = Renderer2;\n    exports.RendererFactory2 = RendererFactory2;\n    exports.RootRenderer = RootRenderer;\n    exports.COMPILER_OPTIONS = COMPILER_OPTIONS;\n    exports.Compiler = Compiler;\n    exports.CompilerFactory = CompilerFactory;\n    exports.ModuleWithComponentFactories = ModuleWithComponentFactories;\n    exports.ComponentFactory = ComponentFactory;\n    exports.ɵComponentFactory = ComponentFactory;\n    exports.ComponentRef = ComponentRef;\n    exports.ComponentFactoryResolver = ComponentFactoryResolver;\n    exports.ElementRef = ElementRef;\n    exports.NgModuleFactory = NgModuleFactory;\n    exports.NgModuleRef = NgModuleRef;\n    exports.NgModuleFactoryLoader = NgModuleFactoryLoader;\n    exports.getModuleFactory = getModuleFactory;\n    exports.QueryList = QueryList;\n    exports.SystemJsNgModuleLoader = SystemJsNgModuleLoader;\n    exports.SystemJsNgModuleLoaderConfig = SystemJsNgModuleLoaderConfig;\n    exports.TemplateRef = TemplateRef;\n    exports.ViewContainerRef = ViewContainerRef;\n    exports.EmbeddedViewRef = EmbeddedViewRef;\n    exports.ViewRef = ViewRef$1;\n    exports.ChangeDetectorRef = ChangeDetectorRef;\n    exports.DefaultIterableDiffer = DefaultIterableDiffer;\n    exports.IterableDiffers = IterableDiffers;\n    exports.KeyValueDiffers = KeyValueDiffers;\n    exports.SimpleChange = SimpleChange;\n    exports.WrappedValue = WrappedValue;\n    exports.platformCore = platformCore;\n    exports.ɵALLOW_MULTIPLE_PLATFORMS = ALLOW_MULTIPLE_PLATFORMS;\n    exports.ɵAPP_ID_RANDOM_PROVIDER = APP_ID_RANDOM_PROVIDER;\n    exports.ɵdefaultIterableDiffers = defaultIterableDiffers;\n    exports.ɵdefaultKeyValueDiffers = defaultKeyValueDiffers;\n    exports.ɵdevModeEqual = devModeEqual;\n    exports.ɵisListLikeIterable = isListLikeIterable;\n    exports.ɵisDefaultChangeDetectionStrategy = isDefaultChangeDetectionStrategy;\n    exports.ɵConsole = Console;\n    exports.ɵsetCurrentInjector = setCurrentInjector;\n    exports.ɵgetInjectableDef = getInjectableDef;\n    exports.ɵAPP_ROOT = APP_ROOT;\n    exports.ɵivyEnabled = ivyEnabled;\n    exports.ɵCodegenComponentFactoryResolver = CodegenComponentFactoryResolver;\n    exports.ɵclearResolutionOfComponentResourcesQueue = clearResolutionOfComponentResourcesQueue;\n    exports.ɵresolveComponentResources = resolveComponentResources;\n    exports.ɵReflectionCapabilities = ReflectionCapabilities;\n    exports.ɵRenderDebugInfo = RenderDebugInfo;\n    exports.ɵ_sanitizeHtml = _sanitizeHtml;\n    exports.ɵ_sanitizeStyle = _sanitizeStyle;\n    exports.ɵ_sanitizeUrl = _sanitizeUrl;\n    exports.ɵglobal = _global;\n    exports.ɵlooseIdentical = looseIdentical;\n    exports.ɵstringify = stringify;\n    exports.ɵmakeDecorator = makeDecorator;\n    exports.ɵisObservable = isObservable;\n    exports.ɵisPromise = isPromise;\n    exports.ɵclearOverrides = clearOverrides;\n    exports.ɵinitServicesIfNeeded = initServicesIfNeeded;\n    exports.ɵoverrideComponentView = overrideComponentView;\n    exports.ɵoverrideProvider = overrideProvider;\n    exports.ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR;\n    exports.ɵgetLocalePluralCase = getLocalePluralCase;\n    exports.ɵfindLocaleData = findLocaleData;\n    exports.ɵLOCALE_DATA = LOCALE_DATA;\n    exports.ɵɵattribute = ɵɵattribute;\n    exports.ɵɵattributeInterpolate1 = ɵɵattributeInterpolate1;\n    exports.ɵɵattributeInterpolate2 = ɵɵattributeInterpolate2;\n    exports.ɵɵattributeInterpolate3 = ɵɵattributeInterpolate3;\n    exports.ɵɵattributeInterpolate4 = ɵɵattributeInterpolate4;\n    exports.ɵɵattributeInterpolate5 = ɵɵattributeInterpolate5;\n    exports.ɵɵattributeInterpolate6 = ɵɵattributeInterpolate6;\n    exports.ɵɵattributeInterpolate7 = ɵɵattributeInterpolate7;\n    exports.ɵɵattributeInterpolate8 = ɵɵattributeInterpolate8;\n    exports.ɵɵattributeInterpolateV = ɵɵattributeInterpolateV;\n    exports.ɵɵdefineBase = ɵɵdefineBase;\n    exports.ɵɵdefineComponent = ɵɵdefineComponent;\n    exports.ɵɵdefineDirective = ɵɵdefineDirective;\n    exports.ɵɵdefinePipe = ɵɵdefinePipe;\n    exports.ɵɵdefineNgModule = ɵɵdefineNgModule;\n    exports.ɵdetectChanges = detectChanges;\n    exports.ɵrenderComponent = renderComponent;\n    exports.ɵRender3ComponentFactory = ComponentFactory$1;\n    exports.ɵRender3ComponentRef = ComponentRef$1;\n    exports.ɵɵdirectiveInject = ɵɵdirectiveInject;\n    exports.ɵɵinjectAttribute = ɵɵinjectAttribute;\n    exports.ɵɵgetFactoryOf = ɵɵgetFactoryOf;\n    exports.ɵɵgetInheritedFactory = ɵɵgetInheritedFactory;\n    exports.ɵɵsetComponentScope = ɵɵsetComponentScope;\n    exports.ɵɵsetNgModuleScope = ɵɵsetNgModuleScope;\n    exports.ɵɵtemplateRefExtractor = ɵɵtemplateRefExtractor;\n    exports.ɵɵProvidersFeature = ɵɵProvidersFeature;\n    exports.ɵɵInheritDefinitionFeature = ɵɵInheritDefinitionFeature;\n    exports.ɵɵNgOnChangesFeature = ɵɵNgOnChangesFeature;\n    exports.ɵLifecycleHooksFeature = LifecycleHooksFeature;\n    exports.ɵRender3NgModuleRef = NgModuleRef$1;\n    exports.ɵmarkDirty = markDirty;\n    exports.ɵNgModuleFactory = NgModuleFactory$1;\n    exports.ɵNO_CHANGE = NO_CHANGE;\n    exports.ɵɵcontainer = ɵɵcontainer;\n    exports.ɵɵnextContext = ɵɵnextContext;\n    exports.ɵɵelementStart = ɵɵelementStart;\n    exports.ɵɵnamespaceHTML = ɵɵnamespaceHTML;\n    exports.ɵɵnamespaceMathML = ɵɵnamespaceMathML;\n    exports.ɵɵnamespaceSVG = ɵɵnamespaceSVG;\n    exports.ɵɵelement = ɵɵelement;\n    exports.ɵɵlistener = ɵɵlistener;\n    exports.ɵɵtext = ɵɵtext;\n    exports.ɵɵtextInterpolate = ɵɵtextInterpolate;\n    exports.ɵɵtextInterpolate1 = ɵɵtextInterpolate1;\n    exports.ɵɵtextInterpolate2 = ɵɵtextInterpolate2;\n    exports.ɵɵtextInterpolate3 = ɵɵtextInterpolate3;\n    exports.ɵɵtextInterpolate4 = ɵɵtextInterpolate4;\n    exports.ɵɵtextInterpolate5 = ɵɵtextInterpolate5;\n    exports.ɵɵtextInterpolate6 = ɵɵtextInterpolate6;\n    exports.ɵɵtextInterpolate7 = ɵɵtextInterpolate7;\n    exports.ɵɵtextInterpolate8 = ɵɵtextInterpolate8;\n    exports.ɵɵtextInterpolateV = ɵɵtextInterpolateV;\n    exports.ɵɵembeddedViewStart = ɵɵembeddedViewStart;\n    exports.ɵɵprojection = ɵɵprojection;\n    exports.ɵɵpipeBind1 = ɵɵpipeBind1;\n    exports.ɵɵpipeBind2 = ɵɵpipeBind2;\n    exports.ɵɵpipeBind3 = ɵɵpipeBind3;\n    exports.ɵɵpipeBind4 = ɵɵpipeBind4;\n    exports.ɵɵpipeBindV = ɵɵpipeBindV;\n    exports.ɵɵpureFunction0 = ɵɵpureFunction0;\n    exports.ɵɵpureFunction1 = ɵɵpureFunction1;\n    exports.ɵɵpureFunction2 = ɵɵpureFunction2;\n    exports.ɵɵpureFunction3 = ɵɵpureFunction3;\n    exports.ɵɵpureFunction4 = ɵɵpureFunction4;\n    exports.ɵɵpureFunction5 = ɵɵpureFunction5;\n    exports.ɵɵpureFunction6 = ɵɵpureFunction6;\n    exports.ɵɵpureFunction7 = ɵɵpureFunction7;\n    exports.ɵɵpureFunction8 = ɵɵpureFunction8;\n    exports.ɵɵpureFunctionV = ɵɵpureFunctionV;\n    exports.ɵɵgetCurrentView = ɵɵgetCurrentView;\n    exports.ɵgetDirectives = getDirectives;\n    exports.ɵgetHostElement = getHostElement;\n    exports.ɵɵrestoreView = ɵɵrestoreView;\n    exports.ɵɵcontainerRefreshStart = ɵɵcontainerRefreshStart;\n    exports.ɵɵcontainerRefreshEnd = ɵɵcontainerRefreshEnd;\n    exports.ɵɵqueryRefresh = ɵɵqueryRefresh;\n    exports.ɵɵviewQuery = ɵɵviewQuery;\n    exports.ɵɵstaticViewQuery = ɵɵstaticViewQuery;\n    exports.ɵɵstaticContentQuery = ɵɵstaticContentQuery;\n    exports.ɵɵloadViewQuery = ɵɵloadViewQuery;\n    exports.ɵɵcontentQuery = ɵɵcontentQuery;\n    exports.ɵɵloadContentQuery = ɵɵloadContentQuery;\n    exports.ɵɵelementEnd = ɵɵelementEnd;\n    exports.ɵɵhostProperty = ɵɵhostProperty;\n    exports.ɵɵproperty = ɵɵproperty;\n    exports.ɵɵpropertyInterpolate = ɵɵpropertyInterpolate;\n    exports.ɵɵpropertyInterpolate1 = ɵɵpropertyInterpolate1;\n    exports.ɵɵpropertyInterpolate2 = ɵɵpropertyInterpolate2;\n    exports.ɵɵpropertyInterpolate3 = ɵɵpropertyInterpolate3;\n    exports.ɵɵpropertyInterpolate4 = ɵɵpropertyInterpolate4;\n    exports.ɵɵpropertyInterpolate5 = ɵɵpropertyInterpolate5;\n    exports.ɵɵpropertyInterpolate6 = ɵɵpropertyInterpolate6;\n    exports.ɵɵpropertyInterpolate7 = ɵɵpropertyInterpolate7;\n    exports.ɵɵpropertyInterpolate8 = ɵɵpropertyInterpolate8;\n    exports.ɵɵpropertyInterpolateV = ɵɵpropertyInterpolateV;\n    exports.ɵɵupdateSyntheticHostBinding = ɵɵupdateSyntheticHostBinding;\n    exports.ɵɵcomponentHostSyntheticListener = ɵɵcomponentHostSyntheticListener;\n    exports.ɵɵprojectionDef = ɵɵprojectionDef;\n    exports.ɵɵreference = ɵɵreference;\n    exports.ɵɵenableBindings = ɵɵenableBindings;\n    exports.ɵɵdisableBindings = ɵɵdisableBindings;\n    exports.ɵɵallocHostVars = ɵɵallocHostVars;\n    exports.ɵɵelementContainerStart = ɵɵelementContainerStart;\n    exports.ɵɵelementContainerEnd = ɵɵelementContainerEnd;\n    exports.ɵɵelementContainer = ɵɵelementContainer;\n    exports.ɵɵstyling = ɵɵstyling;\n    exports.ɵɵstyleMap = ɵɵstyleMap;\n    exports.ɵɵclassMap = ɵɵclassMap;\n    exports.ɵɵclassMapInterpolate1 = ɵɵclassMapInterpolate1;\n    exports.ɵɵclassMapInterpolate2 = ɵɵclassMapInterpolate2;\n    exports.ɵɵclassMapInterpolate3 = ɵɵclassMapInterpolate3;\n    exports.ɵɵclassMapInterpolate4 = ɵɵclassMapInterpolate4;\n    exports.ɵɵclassMapInterpolate5 = ɵɵclassMapInterpolate5;\n    exports.ɵɵclassMapInterpolate6 = ɵɵclassMapInterpolate6;\n    exports.ɵɵclassMapInterpolate7 = ɵɵclassMapInterpolate7;\n    exports.ɵɵclassMapInterpolate8 = ɵɵclassMapInterpolate8;\n    exports.ɵɵclassMapInterpolateV = ɵɵclassMapInterpolateV;\n    exports.ɵɵstyleProp = ɵɵstyleProp;\n    exports.ɵɵstylePropInterpolate1 = ɵɵstylePropInterpolate1;\n    exports.ɵɵstylePropInterpolate2 = ɵɵstylePropInterpolate2;\n    exports.ɵɵstylePropInterpolate3 = ɵɵstylePropInterpolate3;\n    exports.ɵɵstylePropInterpolate4 = ɵɵstylePropInterpolate4;\n    exports.ɵɵstylePropInterpolate5 = ɵɵstylePropInterpolate5;\n    exports.ɵɵstylePropInterpolate6 = ɵɵstylePropInterpolate6;\n    exports.ɵɵstylePropInterpolate7 = ɵɵstylePropInterpolate7;\n    exports.ɵɵstylePropInterpolate8 = ɵɵstylePropInterpolate8;\n    exports.ɵɵstylePropInterpolateV = ɵɵstylePropInterpolateV;\n    exports.ɵɵstylingApply = ɵɵstylingApply;\n    exports.ɵɵclassProp = ɵɵclassProp;\n    exports.ɵɵelementHostAttrs = ɵɵelementHostAttrs;\n    exports.ɵɵselect = ɵɵselect;\n    exports.ɵɵtextBinding = ɵɵtextBinding;\n    exports.ɵɵtemplate = ɵɵtemplate;\n    exports.ɵɵembeddedViewEnd = ɵɵembeddedViewEnd;\n    exports.ɵstore = store;\n    exports.ɵɵload = ɵɵload;\n    exports.ɵɵpipe = ɵɵpipe;\n    exports.ɵwhenRendered = whenRendered;\n    exports.ɵɵi18n = ɵɵi18n;\n    exports.ɵɵi18nAttributes = ɵɵi18nAttributes;\n    exports.ɵɵi18nExp = ɵɵi18nExp;\n    exports.ɵɵi18nStart = ɵɵi18nStart;\n    exports.ɵɵi18nEnd = ɵɵi18nEnd;\n    exports.ɵɵi18nApply = ɵɵi18nApply;\n    exports.ɵɵi18nPostprocess = ɵɵi18nPostprocess;\n    exports.ɵi18nConfigureLocalize = i18nConfigureLocalize;\n    exports.ɵɵi18nLocalize = ɵɵi18nLocalize;\n    exports.ɵsetLocaleId = setLocaleId;\n    exports.ɵDEFAULT_LOCALE_ID = DEFAULT_LOCALE_ID;\n    exports.ɵsetClassMetadata = setClassMetadata;\n    exports.ɵɵresolveWindow = ɵɵresolveWindow;\n    exports.ɵɵresolveDocument = ɵɵresolveDocument;\n    exports.ɵɵresolveBody = ɵɵresolveBody;\n    exports.ɵcompileComponent = compileComponent;\n    exports.ɵcompileDirective = compileDirective;\n    exports.ɵcompileNgModule = compileNgModule;\n    exports.ɵcompileNgModuleDefs = compileNgModuleDefs;\n    exports.ɵpatchComponentDefWithScope = patchComponentDefWithScope;\n    exports.ɵresetCompiledComponents = resetCompiledComponents;\n    exports.ɵflushModuleScopingQueueAsMuchAsPossible = flushModuleScopingQueueAsMuchAsPossible;\n    exports.ɵtransitiveScopesFor = transitiveScopesFor;\n    exports.ɵcompilePipe = compilePipe;\n    exports.ɵɵsanitizeHtml = ɵɵsanitizeHtml;\n    exports.ɵɵsanitizeStyle = ɵɵsanitizeStyle;\n    exports.ɵɵdefaultStyleSanitizer = ɵɵdefaultStyleSanitizer;\n    exports.ɵɵsanitizeScript = ɵɵsanitizeScript;\n    exports.ɵɵsanitizeUrl = ɵɵsanitizeUrl;\n    exports.ɵɵsanitizeResourceUrl = ɵɵsanitizeResourceUrl;\n    exports.ɵɵsanitizeUrlOrResourceUrl = ɵɵsanitizeUrlOrResourceUrl;\n    exports.ɵbypassSanitizationTrustHtml = bypassSanitizationTrustHtml;\n    exports.ɵbypassSanitizationTrustStyle = bypassSanitizationTrustStyle;\n    exports.ɵbypassSanitizationTrustScript = bypassSanitizationTrustScript;\n    exports.ɵbypassSanitizationTrustUrl = bypassSanitizationTrustUrl;\n    exports.ɵbypassSanitizationTrustResourceUrl = bypassSanitizationTrustResourceUrl;\n    exports.ɵgetLContext = getLContext;\n    exports.ɵNG_ELEMENT_ID = NG_ELEMENT_ID;\n    exports.ɵNG_COMPONENT_DEF = NG_COMPONENT_DEF;\n    exports.ɵNG_DIRECTIVE_DEF = NG_DIRECTIVE_DEF;\n    exports.ɵNG_PIPE_DEF = NG_PIPE_DEF;\n    exports.ɵNG_MODULE_DEF = NG_MODULE_DEF;\n    exports.ɵNG_BASE_DEF = NG_BASE_DEF;\n    exports.ɵNG_INJECTABLE_DEF = NG_INJECTABLE_DEF;\n    exports.ɵNG_INJECTOR_DEF = NG_INJECTOR_DEF;\n    exports.ɵbindPlayerFactory = bindPlayerFactory;\n    exports.ɵaddPlayer = addPlayer;\n    exports.ɵgetPlayers = getPlayers;\n    exports.ɵcompileNgModuleFactory__POST_R3__ = compileNgModuleFactory__POST_R3__;\n    exports.ɵisBoundToModule__POST_R3__ = isBoundToModule__POST_R3__;\n    exports.ɵSWITCH_COMPILE_COMPONENT__POST_R3__ = SWITCH_COMPILE_COMPONENT__POST_R3__;\n    exports.ɵSWITCH_COMPILE_DIRECTIVE__POST_R3__ = SWITCH_COMPILE_DIRECTIVE__POST_R3__;\n    exports.ɵSWITCH_COMPILE_PIPE__POST_R3__ = SWITCH_COMPILE_PIPE__POST_R3__;\n    exports.ɵSWITCH_COMPILE_NGMODULE__POST_R3__ = SWITCH_COMPILE_NGMODULE__POST_R3__;\n    exports.ɵgetDebugNode__POST_R3__ = getDebugNode__POST_R3__;\n    exports.ɵSWITCH_COMPILE_INJECTABLE__POST_R3__ = SWITCH_COMPILE_INJECTABLE__POST_R3__;\n    exports.ɵSWITCH_IVY_ENABLED__POST_R3__ = SWITCH_IVY_ENABLED__POST_R3__;\n    exports.ɵSWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__ = SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__;\n    exports.ɵCompiler_compileModuleSync__POST_R3__ = Compiler_compileModuleSync__POST_R3__;\n    exports.ɵCompiler_compileModuleAsync__POST_R3__ = Compiler_compileModuleAsync__POST_R3__;\n    exports.ɵCompiler_compileModuleAndAllComponentsSync__POST_R3__ = Compiler_compileModuleAndAllComponentsSync__POST_R3__;\n    exports.ɵCompiler_compileModuleAndAllComponentsAsync__POST_R3__ = Compiler_compileModuleAndAllComponentsAsync__POST_R3__;\n    exports.ɵSWITCH_ELEMENT_REF_FACTORY__POST_R3__ = SWITCH_ELEMENT_REF_FACTORY__POST_R3__;\n    exports.ɵSWITCH_TEMPLATE_REF_FACTORY__POST_R3__ = SWITCH_TEMPLATE_REF_FACTORY__POST_R3__;\n    exports.ɵSWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__ = SWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__;\n    exports.ɵSWITCH_RENDERER2_FACTORY__POST_R3__ = SWITCH_RENDERER2_FACTORY__POST_R3__;\n    exports.ɵgetModuleFactory__POST_R3__ = getModuleFactory__POST_R3__;\n    exports.ɵregisterNgModuleType = registerNgModuleType;\n    exports.ɵpublishGlobalUtil = publishGlobalUtil;\n    exports.ɵpublishDefaultGlobalUtils = publishDefaultGlobalUtils;\n    exports.ɵcreateInjector = createInjector;\n    exports.ɵINJECTOR_IMPL__POST_R3__ = INJECTOR_IMPL__POST_R3__;\n    exports.ɵregisterModuleFactory = registerModuleFactory;\n    exports.ɵEMPTY_ARRAY = EMPTY_ARRAY$2;\n    exports.ɵEMPTY_MAP = EMPTY_MAP;\n    exports.ɵand = anchorDef;\n    exports.ɵccf = createComponentFactory;\n    exports.ɵcmf = createNgModuleFactory;\n    exports.ɵcrt = createRendererType2;\n    exports.ɵdid = directiveDef;\n    exports.ɵeld = elementDef;\n    exports.ɵgetComponentViewDefinitionFactory = getComponentViewDefinitionFactory;\n    exports.ɵinlineInterpolate = inlineInterpolate;\n    exports.ɵinterpolate = interpolate;\n    exports.ɵmod = moduleDef;\n    exports.ɵmpd = moduleProvideDef;\n    exports.ɵncd = ngContentDef;\n    exports.ɵnov = nodeValue;\n    exports.ɵpid = pipeDef;\n    exports.ɵprd = providerDef;\n    exports.ɵpad = pureArrayDef;\n    exports.ɵpod = pureObjectDef;\n    exports.ɵppd = purePipeDef;\n    exports.ɵqud = queryDef;\n    exports.ɵted = textDef;\n    exports.ɵunv = unwrapValue;\n    exports.ɵvid = viewDef;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=core.umd.js.map\n"]}