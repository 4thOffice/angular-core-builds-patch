{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","../../../packages/core/esm5/src/type.js","../../../packages/core/esm5/src/util.js","../../../packages/core/esm5/src/util/decorators.js","../../../packages/core/esm5/src/reflection/reflection_capabilities.js","../../../packages/core/esm5/src/di/forward_ref.js","../../../packages/core/esm5/src/di/injector.js","../../../packages/core/esm5/src/util/property.js","../../../packages/core/esm5/src/di/injectable.js","../../../packages/core/esm5/src/di/injection_token.js","../../../packages/core/esm5/src/change_detection/constants.js","../../../packages/core/esm5/src/metadata/view.js","../../../packages/core/esm5/src/version.js","../../../packages/core/esm5/src/errors.js","../../../packages/core/esm5/src/error_handler.js","../../../packages/core/esm5/src/di/reflective_errors.js","../../../packages/core/esm5/src/di/reflective_key.js","../../../packages/core/esm5/src/reflection/reflector.js","../../../packages/core/esm5/src/di/reflective_provider.js","../../../packages/core/esm5/src/di/reflective_injector.js","../../../packages/core/esm5/src/application_init.js","../../../packages/core/esm5/src/application_tokens.js","../../../packages/core/esm5/src/console.js","../../../packages/core/esm5/src/linker/compiler.js","../../../packages/core/esm5/src/linker/component_factory_resolver.js","../../../packages/core/esm5/src/profile/wtf_impl.js","../../../packages/core/esm5/src/event_emitter.js","../../../packages/core/esm5/src/zone/ng_zone.js","../../../packages/core/esm5/src/testability/testability.js","../../../packages/core/esm5/src/application_ref.js","../../../packages/core/esm5/src/render/api.js","../../../packages/core/esm5/src/linker/element_ref.js","../../../packages/core/esm5/src/linker/ng_module_factory_loader.js","../../../packages/core/esm5/src/linker/query_list.js","../../../packages/core/esm5/src/linker/system_js_ng_module_factory_loader.js","../../../packages/core/esm5/src/linker/view_ref.js","../../../packages/core/esm5/src/debug/debug_node.js","../../../packages/core/esm5/src/change_detection/change_detection_util.js","../../../packages/core/esm5/src/change_detection/differs/default_iterable_differ.js","../../../packages/core/esm5/src/change_detection/differs/default_keyvalue_differ.js","../../../packages/core/esm5/src/change_detection/differs/iterable_differs.js","../../../packages/core/esm5/src/change_detection/differs/keyvalue_differs.js","../../../packages/core/esm5/src/change_detection/change_detection.js","../../../packages/core/esm5/src/i18n/tokens.js","../../../packages/core/esm5/src/application_module.js","../../../packages/core/esm5/src/sanitization/inert_body.js","../../../packages/core/esm5/src/sanitization/url_sanitizer.js","../../../packages/core/esm5/src/sanitization/html_sanitizer.js","../../../packages/core/esm5/src/sanitization/style_sanitizer.js","../../../packages/core/esm5/src/sanitization/security.js","../../../packages/core/esm5/src/view/types.js","../../../packages/core/esm5/src/view/errors.js","../../../packages/core/esm5/src/view/util.js","../../../packages/core/esm5/src/view/element.js","../../../packages/core/esm5/src/view/ng_module.js","../../../packages/core/esm5/src/view/view_attach.js","../../../packages/core/esm5/src/view/refs.js","../../../packages/core/esm5/src/view/provider.js","../../../packages/core/esm5/src/view/query.js","../../../packages/core/esm5/src/view/ng_content.js","../../../packages/core/esm5/src/view/pure_expression.js","../../../packages/core/esm5/src/view/text.js","../../../packages/core/esm5/src/view/view.js","../../../packages/core/esm5/src/view/services.js","../../../packages/core/esm5/src/view/entrypoint.js","../../../packages/core/esm5/src/render3/hooks.js","../../../packages/core/esm5/src/render3/ng_dev_mode.js","../../../packages/core/esm5/src/render3/node_assert.js","../../../packages/core/esm5/src/render3/interfaces/renderer.js","../../../packages/core/esm5/src/render3/node_manipulation.js","../../../packages/core/esm5/src/render3/node_selector_matcher.js","../../../packages/core/esm5/src/render3/util.js","../../../packages/core/esm5/src/render3/instructions.js","../../../packages/core/esm5/src/render3/view_ref.js","../../../packages/core/esm5/src/render3/di.js","../../../packages/core/esm5/src/render3/definition.js","../../../packages/core/esm5/src/render3/pure_function.js","../../../packages/core/esm5/src/render3/query.js","../../../packages/core/esm5/src/render3/component.js","../../../packages/core/esm5/src/render3/pipe.js","../../../packages/core/esm5/src/sanitization/sanitization.js"],"names":["exports","module","factory","require","extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__","this","constructor","create","prototype","__assign","assign","t","s","i","n","arguments","length","Type","Function","__window","window","__self","self","WorkerGlobalScope","promise","Promise","resolve","_symbolIterator","getSymbolIterator","Symbol_1","iterator","keys","getOwnPropertyNames","Map","key","scheduleMicroTask","fn","Zone","then","apply","stringify","token","map","join","overriddenName","name","res","toString","metaCtor","makeMetadataCtor","props","DecoratorFactory","args","_i","call","concat","_a","annotationInstance","bind","TypeDecorator","cls","typeFn","ANNOTATIONS","defineProperty","value","push","chainFn","parentClass","values","propName","ParamDecoratorFactory","ParamDecorator","unusedKey","index","parameters","PARAMETERS","PropDecoratorFactory","decoratorInstance","target","meta","PROP_METADATA","unshift","_reflect","reflect","_global","ReflectionCapabilities","paramTypes","paramAnnotations","result","_ownParameters","DELEGATE_CTOR","exec","typeStr","INHERITED_CLASS","INHERITED_CLASS_WITH_CTOR","parentCtor","tsickleCtorParams","ctorParameters","paramTypes_1","ctorParam","type","convertTsickleDecoratorIntoMetadata","decorators","_zipTypesAndAnnotations","paramAnnotations_1","isType","getParentCtor","_ownAnnotations","annotations","typeOrFunc","_ownPropMetadata","propMetadata","propDecorators","propDecorators_1","propMetadata_1","prop","parentPropMetadata_1","forEach","ownPropMetadata","hasLifecycleHook","setter","method","resolveEnum","decoratorInvocations","decoratorInvocation","ctor","parentProto","getPrototypeOf","resolveForwardRef","__forward_ref__","forwardRef","_NullInjector","get","notFoundValue","_THROW_IF_NOT_FOUND","Error","options","parent","isArray","StaticInjector","providers","Injector","THROW_IF_NOT_FOUND","NULL","IDENT","GET_PROPERTY_NAME","CIRCULAR","USE_VALUE","getClosureSafeProperty","slice","GET_PROPERTY_NAME$1","USE_VALUE$1","objWithPropertyToExtract","getClosureSafeProperty$1","provide","String","useValue","NG_TEMP_TOKEN_PATH","source","NULL_INJECTOR","records","provider","staticError","resolvedProvider","deps","EMPTY","providerDeps","j","annotation","Optional","SkipSelf","Self","Inject","useExisting","computeDeps","useNew","useFactory","useClass","resolveProvider","multi","multiProvider","multiProviderMixError","set","MULTI_PROVIDER_FN","record","flags","_records","tryResolveToken","e","tokenPath","SOURCE","message","formatError","tokens","NO_NEW_LINE","obj","undefined","depRecords","depRecord","childRecord","resolveToken","text","charAt","substr","context","parts","JSON","_currentInjector","inject","types","arg","defaultValue","ngMetadataName","makeDecorator","injectableType","scope","ngInjectableDef","defineInjectable","deps_1","reflectionCapabilities","injectArgs","valueProvider_1","existingProvider_1","factoryProvider_1","EMPTY_ARRAY","classProvider_1","deps_2","deps_3","InjectionToken","_desc","OnPush","Default","ChangeDetectorStatus","CheckOnce","Checked","CheckAlways","Errored","Destroyed","Native","full","major","split","defaultErrorLogger","console","ErrorHandler","handleError","error","originalError","_findOriginalError","_findContext","errorLogger","getErrorLogger","_console","getOriginalError","constructResolvingPath","indexOf","findFirstClosedCycle","reverse","injectionError","injector","constructResolvingMessage","errMsg","wrappedError","addKey","params","signature","ii","parameter","ReflectiveKey","id","_globalKeyRegistry","numberOfKeys","enumerable","configurable","_allKeys","has","newKey","KeyRegistry","size","caps","Reflector","getter","importUri","fromKey","resolvedFactories","ResolvedReflectiveFactory","dependencies","resolveReflectiveFactory","factoryFn","resolvedDeps","reflector","_dependenciesFor","aliasInstance","ReflectiveDependency","constructDependencies","resolveReflectiveProviders","normalizedProvidersMap","existing","ResolvedReflectiveProvider_","_normalizeProviders","metadata","optional","_createDependency","visibility","paramMetadata","ReflectiveInjector_","_providers","_parent","_constructionCounter","len","keyIds","objs","resolveAndCreateChild","createChildFromResolved","resolveAndInstantiate","instantiateResolved","getProviderAtIndex","_new","_instantiateProvider","_instantiate","ResolvedReflectiveFactory$$1","originalException","dep","_this","_getByReflectiveDependency","INJECTOR_KEY","_getByKeySelf","_getObjByKeyId","keyId","UNDEFINED","inj","inj_","_mapProviders","displayName","ApplicationInitStatus","appInits","initialized","done","runInitializers","asyncInitPromises","complete","initResult","isPromise","all","catch","reject","Injectable","APP_ID","PLATFORM_INITIALIZER","APP_BOOTSTRAP_LISTENER","Console","ModuleWithComponentFactories","ngModuleFactory","componentFactories","Compiler","clearCacheFor","noComponentFactoryError","component","trace","events","_NullComponentFactoryResolver","resolveComponentFactory","ComponentFactoryResolver","CodegenComponentFactoryResolver","factories","_ngModule","_factories","tslib_1.__extends","ComponentFactoryBoundToModule","_super","ngModule","selector","componentType","wtf","EventEmitter","isAsync","generatorOrNext","schedulerFn","errorFn","err","completeFn","__isAsync","setTimeout","next","sink","subscribe","rxjs_Subscription","Subscription","Subject","add","hasPendingMicrotasks","onStable","onError","assertZonePatched","zone","_nesting","_outer","_inner","current","fork","isAngularZone","delegate","task","applyThis","applyArgs","onEnter","invokeTask","onLeave","callback","invoke","hasTaskState","hasTask","change","microTask","checkStable","hasPendingMacrotasks","macroTask","onHandleError","scheduleEventTask","EMPTY_PAYLOAD","noop","runTask","NgZone","isStable","onMicrotaskEmpty","emit","runOutsideAngular","NoopNgZone","Testability","_ngZone","_didWork","_watchAngularEvents","onUnstable","_isZoneStable","assertNotInAngularZone","_runCallbacksIfReady","increasePendingRequestCount","decreasePendingRequestCount","_pendingCount","_callbacks","pop","whenStable","using","exactMatch","TestabilityRegistry","unregisterApplication","getTestability","elem","findInAncestors","NgProbeToken","createPlatform","_platform","destroyed","ALLOW_MULTIPLE_PLATFORMS","PlatformRef","createPlatformFactory","parentPlatformFactory","desc","marker","extraProviders","platform","getPlatform","injectedProviders","assertPlatform","requiredToken","_injector","ngZone","ngZoneOption","getNgZone","run","ngZoneInjector","moduleFactory","moduleType","moduleRef","exceptionHandler","onDestroy","remove","_modules","errorHandler","initStatus","donePromise","_moduleDoBootstrap","compilerOptions","compilerFactory","CompilerFactory","appRef","ApplicationRef","_bootstrapComponents","f","bootstrap","instance","ngDoBootstrap","destroy","_destroyed","optionsReducer","dst","reduce","_zone","_exceptionHandler","_componentFactoryResolver","_initStatus","_stable","componentTypes","_enforceNoNewChanges","isDevMode","tick","isCurrentlyStable","rxjs_Observable","Observable","observer","unstableSub","assertInAngularZone","merge","unsubscribe","componentOrFactory","rootSelectorOrNode","componentFactory","ComponentFactory","NgModuleRef","selectorOrNode","compRef","_unloadComponent","testability","registerApplication","location","nativeElement","_loadComponent","_runningTick","_tickScope","_views","view","detectChanges","checkNoChanges","detachView","componentRef","attachView","hostView","wtfCreateScope","list","el","templateUrl","slotCount","encapsulation","styles","animations","Renderer","RendererStyleFlags2","DashCase","ElementRef","NgModuleFactoryLoader","QueryList","_results","some","reset","flatten","first","SystemJsNgModuleLoaderConfig","load","loadAndCompile","path","exportName","loadFactory","factoryClassSuffix","System","import","_config","factoryPathPrefix","factoryPathSuffix","SystemJsNgModuleLoader","checkNotEmpty","modulePath","ViewRef","__extends","EmbeddedViewRef","EventListener","DebugNode","nativeNode","_debugContext","DebugElement","addChild","references","providerTokens","properties","attributes","classes","child","removeChild","childIndex","childNodes","insertChildrenAfter","newChildren","siblingIndex","splice","c","insertBefore","refChild","newChild","refIndex","query","queryAll","queryAllNodes","predicate","matches","triggerEventHandler","eventName","eventObj","listeners","listener","element","node","parentNode","devModeEqual","a","isListLikeIterableA","isListLikeIterable","isListLikeIterableB","comparator","iterator1","iterator2","item1","item2","areIterablesEqual","WrappedValue","wrap","isWrapped","SimpleChange","isFirstChange","DefaultIterableDifferFactory","trackByFn","trackByIdentity","item","DefaultIterableDiffer","_linkedRecords","_unlinkedRecords","_previousItHead","_itHead","_itTail","_additionsHead","_additionsTail","_movesHead","_movesTail","_removalsHead","forEachItem","forEachOperation","addRemoveOffset","moveOffsets","nextRemove","adjPreviousIndex","getPreviousIndex","currentIndex","_nextRemoved","previousIndex","localMovePreviousIndex","localCurrentIndex","offset","forEachPreviousItem","forEachAddedItem","forEachMovedItem","forEachRemovedItem","forEachIdentityChange","diff","collection","check","_reset","itemTrackBy","mayBeDirty","index_1","_trackByFn","looseIdentical","trackById","_verifyReinsertion","_addIdentityChange","_next","isDirty","nextRecord","_nextPrevious","_nextAdded","_removalsTail","previousRecord","_prev","_moveAfter","_reinsertAfter","reinsertRecord","_addToRemovals","_unlink","clear","_nextMoved","prevRecord","prev","_prevRemoved","_insertAfter","_DuplicateMap","_remove","toIndex","_identityChangesTail","_identityChangesHead","_nextIdentityChange","_head","_tail","_nextDup","_DuplicateItemRecordList","atOrAfterIndex","_prevDup","put","duplicates","delete","moveOffset","isJsObject","DefaultKeyValueDifferFactory","DefaultKeyValueDiffer","_mapHead","_appendAfter","_previousMapHead","_changesHead","_changesTail","forEachChangedItem","_forEach","_maybeAddToChanges","_getOrCreateRecordForKey","_insertBeforeOrAppend","previousValue","currentValue","before","record_1","KeyValueChangeRecord_","_nextChanged","newValue","_addToAdditions","_addToChanges","IterableDiffers","find","iterable","supports","KeyValueDiffers","kv","keyValDiff","TRANSLATIONS_FORMAT","MissingTranslationStrategy","Warning","defaultIterableDiffers","_iterableDiffersFactory","_keyValueDiffersFactory","LOCALE_ID","_localeFactory","inertDocument","defaultDoc","implementation","createHTMLDocument","inertBodyElement","body","inertHtml","createElement","appendChild","innerHTML","querySelector","DOMParser","getInertBodyElement","getInertBodyElement_DOMParser","getInertBodyElement_XHR","html","encodeURI","xhr","XMLHttpRequest","responseType","open","parseFromString","templateEl","elAttrs","attrName","removeAttribute","childNode","firstChild","nodeType","Node","ELEMENT_NODE","stripCustomNsAttrs","DATA_URL_PATTERN","_sanitizeUrl","url","match","SAFE_URL_PATTERN","tagSet","tags","merge$1","sets","sets_1","v","VOID_ELEMENTS","OPTIONAL_END_TAG_BLOCK_ELEMENTS","OPTIONAL_END_TAG_INLINE_ELEMENTS","BLOCK_ELEMENTS","INLINE_ELEMENTS","VALID_ELEMENTS","OPTIONAL_END_TAG_ELEMENTS","URI_ATTRS","SRCSET_ATTRS","VALID_ATTRS","HTML_ATTRS","startElement","TEXT_NODE","chars","sanitizedSomething","endElement","checkClobberedElement","tagName","nodeName","toLowerCase","buf","elAttr","lower","SanitizingHtmlSerializer","nextNode","compareDocumentPosition","DOCUMENT_POSITION_CONTAINED_BY","outerHTML","encodeEntities","replace","SURROGATE_PAIR_REGEXP","charCodeAt","_sanitizeHtml","unsafeHtmlInput","unsafeHtml","inertBodyHelper","mXSSAttempts","parsedHtml","sanitizer","safeHtml","sanitizeChildren","getTemplateContent","parent_1","trim","urlMatch","URL_RE","SAFE_STYLE_VALUE","outsideSingle","outsideDouble","hasBalancedQuotes","SecurityContext","NONE","HTML","STYLE","SCRIPT","URL","RESOURCE_URL","state","initState","priorInitState","newInitState","shouldCallLifecycleInitHook","initIndex","Services","setCurrentNode","createRootView","createEmbeddedView","createComponentView","createNgModuleRef","overrideProvider","overrideComponentView","clearOverrides","checkAndUpdateView","checkNoChangesView","destroyView","resolveDep","createDebugContext","oldValue","currValue","isFirstCheck","msg","_tokenKeyCache","tokenKey","EMPTY_RENDERER_TYPE_ID","_renderCompCount","resolveRendererType2","UNDEFINED_RENDERER_TYPE_ID","isFilled","ViewEncapsulation","None","data","checkBinding","def","bindingIdx","oldValues","checkAndUpdateBinding","checkBindingNoChanges","bindingIndex","markParentViewsForCheck","currView","markParentViewsForCheckProjectedViews","endView","nodeIndex","event","nodes","asElementData","componentView","handleEvent","declaredViewContainer","viewParentEl","splitMatchedQueriesDsl","matchedQueriesDsl","matchedQueries","matchedQueryIds","valueType","queryId","filterQueryId","sourceName","renderHost","renderParent","componentRendererType","renderElement","resolveDefinition","DEFINITION_CACHE","NOOP","visitRootRenderNodes","action","nextSibling","visitSiblingRenderNodes","startIndex","endIndex","nodeDef","visitRenderNode","visitProjectedRenderNodes","ngContentIndex","compView","isComponentView","hostElDef","childCount","projectedNodes","root","projectableNodes","rn","renderNode","bindingFlags","execRenderNodeAction","embeddedViews","_embeddedViews","k","renderer","NS_PREFIX_RE","splitNamespace","calcBindingFlags","bindings","elDef","ns","createComment","parentEl","getParentRenderElement","selectRootElement","attrs","name_2","listenToElementOutputs","outputs","output","handleEventClosure","renderEventHandlerClosure","elementEventFullName","listenTarget","listenerView","checkAndUpdateElementValue","binding","elData","renderNode$$1","securityContext","renderValue","sanitize","setAttribute","setElementAttribute","addClass","setElementClass","unit","suffix","setStyle","resolveNgModuleDep","depDef","InjectorRefTokenKey","tokenKey$$1","InjectorRefTokenKey$1","NgModuleRefTokenKey","_createProviderInstance","_def","providersByKey","providerInstance","providerDef","_createProviderInstance$1","UNDEFINED_VALUE","injectableDef_1","former","setCurrentInjector","injectable","depValues","_createClass","_callFactory","attachEmbeddedView","parentView","elementData","viewIndex","viewContainerParent","addToArray","vcElementData","projectedViews","dvcElementData","template","_projectedViews","viewDef","nodeFlags","parentNodeDef","detachEmbeddedView","removeFromArray","prevRenderNode","arr","getComponentViewDefinitionFactory","viewDefFactory","ComponentFactory_","_inputs","_outputs","ngContentSelectors","inputsArr","inputs","templateName","outputsArr","componentNodeIndex","EMPTY_CONTEXT","asProviderData","VERSION","ComponentRef_","ViewRef_","_view","_viewRef","_component","_elDef","changeDetectorRef","Injector_","createViewContainerData","ViewContainerRef_","_data","ref","attachToViewContainerRef","ngModuleRef","contextInjector","parentInjector","insert","viewRef","viewRef_","move","oldViewIndex","newViewIndex","dirtyParentQueries","detach","createChangeDetectorRef","fs","rendererFactory","begin","disposables","_appRef","detachFromAppRef","attachToAppRef","vcRef","createTemplateData","TemplateRef_","_parentView","createInjector","createRendererV1","RendererAdapter","namespaceAndName","hostElement","createTemplateAnchor","parentElement","comment","createText","projectNodes","attachViewAfter","viewRootNodes","attributeValue","className","isAdd","styleName","styleValue","setText","animate","bootstrapComponents","NgModuleRef_","_moduleType","provDef","injectFlags","lifecycles","RendererV1TokenKey","Renderer2TokenKey","Renderer2","checkIndex","depDefs","splitDepsDsl","outputIndex","childFlags","directChildFlags","childMatchedQueries","createPipeInstance","createDirectiveInstance","allowPrivateServices","createClass","subscription","eventHandlerClosure","callFactory","startView","ChangeDetectorRefTokenKey","searchView","findCompView","ElementRefTokenKey","ViewContainerRefTokenKey","viewContainer","TemplateRefTokenKey","providerDef_1","allProviders","publicProviders","providerData","updateProp","changes","unwrap","callLifecycleHooksChildrenFirst","callProviderLifecycles","callElementProvidersLifecycles","ngAfterContentInit","ngAfterContentChecked","ngAfterViewInit","ngAfterViewChecked","queryIds","nodeMatchedQueries","isEmbeddedView","tplDef","end","filterId","asQueryList","setDirty","checkAndUpdateQuery","queryList","dirty","directiveInstance","newValues","elementDef","calcQueryValues","notify","boundValue","bindingType","queryDef","getQueryValue","embeddedView","dvc","projectedView","queryValueType","appendNgContent","propertyNames","nonMinifiedName","prefix","validateNode","nodeCount","lastRenderRootNode","parentEnd","anchorDef$$1","compRenderer","rendererType","createView","outputCount","createViewNodes","hostDef","nodeData","compViewDef","createProviderInstance","initView","execEmbeddedViewsAction","ViewAction","CheckNoChanges","updateRenderer","shiftInitState","markProjectedViewsForCheck","updateDirectives","CheckAndUpdate","execQueriesAction","callInit","checkAndUpdateNode","argStyle","v0","v1","v2","v3","v4","v5","v6","v7","v8","v9","bindLen","changed","checkAndUpdateElementInline","_addInterpolationPart","checkAndUpdateTextInline","directive","ngOnChanges","ngOnInit","checkAndUpdateDirectiveInline","asPureExpressionData","pipe","transform","checkAndUpdateNodeInline","checkAndUpdateElementDynamic","checkAndUpdateTextDynamic","checkAndUpdateDirectiveDynamic","i_1","checkNoChangesNode","checkNoChangesQuery","Destroy","destroyNode","asTextData","renderText","destroyViewNodes","CreateViewNodes","CheckNoChangesProjectedViews","CheckAndUpdateProjectedViews","execComponentViewsAction","viewState","execProjectedViewsAction","queryFlags","staticDynamicQueryFlag","checkType","initServicesIfNeeded","services","debugSetCurrentNode","debugCreateRootView","debugCreateEmbeddedView","debugCreateComponentView","debugCreateNgModuleRef","debugOverrideProvider","debugOverrideComponentView","debugClearOverrides","debugCheckAndUpdateView","debugCheckNoChangesView","debugDestroyView","DebugContext_","createProdRootView","prodCheckAndUpdateNode","prodCheckNoChangesNode","elInjector","createRootData","Sanitizer","createRenderer","viewDef$$1","viewDefOverrides","hasOverrides","hasDeprecatedOverrides","providerOverrides","override","comp","applyProviderOverridesToView","elIndicesWithOverwrittenProviders","lastElementDef","elementIndicesWithOverwrittenProviders","elIndex","callWithDebugContext","DebugAction","debugUpdateDirectives","debugCheckAndUpdateNode","debugCheckNoChangesNode","nextDirectiveWithBinding","debugUpdateRenderer","nextRenderNodeWithBinding","givenValues","bindingValues","normalizeDebugBindingName","normalizeDebugBindingValue","attr","setValue","CAMEL_CASE_REGEXP","m","elView","elOrCompView","childDef","collectReferences","findHostElement","logError","logViewDef","logNodeIndex","renderNodeIndex","getRenderNodeIndex","currRenderNodeIndex","oldAction","_currentAction","oldView","_currentView","oldNodeIndex","_currentNodeIndex","getCurrentDebugContext","DebugRendererFactory2","DebugRenderer2","renderData","whenRenderingDone","namespace","debugCtx","debugEl","getDebugNode","debugChildEl","debugRefEl","oldChild","removeClass","style","NgModuleFactory_","_ngModuleDefFactory","queueContentHooks","tView","afterContentInit","contentHooks","queueViewHooks","afterViewInit","viewHooks","executeInitHooks","currentView","creationMode","executeHooks","allHooks","checkHooks","ngDevMode","assertNodeOfPossibleTypes","typeName","RendererStyleFlags3","stopNode","currentNode","pNextOrParent","pNextOrParentType","findFirstRNode","currentSibling","parentType","initialNode","getNextLNodeWithProjection","rootNode","native","childContainerData","views","head","addRemoveViewFromContainer","container","insertMode","beforeNode","assertNodeType","isProceduralRenderer","getNextOrParentSiblingNode","insertView","newView","setViewNext","nextIndex","findNextRNodeSibling","containerNextNativeNode","removeView","removeIndex","viewNode","rootView","viewOrContainer","cleanUpView","getParentState","destroyViewTree","cleanup","removeEventListener","canInsertNativeNode","lContainer","isNodeMatchingSimpleSelector","tNode","noOfSelectorParts","assertNotNull","tagNameInSelector","nodeClassAttrVal","cssClassToMatch","matchIndex","matchEndIdx","attrNameInSelector","attrIdxInNode","attrsInNode","attrValInNode","attrValInSelector","positiveSelector","negativeSelectors","isNodeMatchingSelector","isNodeMatchingSelectorWithNegations","matchingSelectorIndex","selectors","textSelectors","ngProjectAsAttrVal","nodeAttrs","ngProjectAsAttrIdx","NG_PROJECT_AS_ATTR_NAME","getProjectAsAttrValue","stringify$1","NG_HOST_SYMBOL","currentQueries","enterView","host","bindingStartIndex","previousOrParentNode","isParent","leaveView","checkNoChangesMode","viewCheckHooks","createLView","viewId","tail","dynamicViewCount","createLNode","queries","isState","nodeInjector","assertNull","assertDataNext","tData","renderEmbeddedTemplate","_isParent","_previousOrParentNode","cm","firstTemplatePass","initHooks","contentCheckHooks","refreshDynamicChildren","directiveTypes","directiveDef","localRefs","defaultExport","exportAs","local","toExportAs","setUpAttributes","assertEqual","isProc","attrVal","locateHostElement","elementOrSelector","assertDataInRange","defaultRenderer","rNode","createError","createTNode","localName","localNames","initialInputs","generatePropertyAliases","lNodeFlags","direction","propStore","start","isInput","propertyAliasMap","publicName","internalName","directiveCreate","queryName","assertPreviousIsParent","tNode_1","diPublic","directiveIndex","initialInputData","minifiedInputName","inputsToStore","generateInitialInputs","setInputsFromAttrs","onInit","doCheck","container_1","directiveRefresh","elementIndex","executeContentHooks","appendToProjectionNode","projectionNode","appendedFirst","appendedLast","projectionNodeData","findComponentHost","lView","viewRootLNode","markViewDirty","rootContext","clean","_CLEAN_PROMISE","res_1","r","scheduler","_getComponentHostLElementNode","getRootView","componentOrContext","detectChangesInternal","hostNode","componentIndex","initBindings","store","consumeBinding","bindingUpdated","assertNotEqual","NO_CHANGE","isDifferent","throwErrorIfNoChangesMode","bindingUpdated2","exp3","exp4","different","instanceOrArray","_setComponentContext","notImplemented","addDestroyable","destroyFn","getOrCreateNodeInjectorForNode","bf0","bf1","bf2","bf3","cbf0","cbf1","cbf2","cbf3","templateRef","NG_ELEMENT_ID","bloomBit","mask","di","getClosestComponentAncestor","hostInjector","getOrCreateHostChangeDetector","getOrCreateInjectable","bloomHash","moduleInjector","createInjectionError","bloomFindPossibleInjector","flags_1","startInjector","ReadFromInjectorFn","getOrCreateElementRef","elementRef","ElementRef$1","getOrCreateTemplateRef","getOrCreateContainerRef","directiveIdx","_node","ViewContainerRef","TemplateRef","TemplateRef$1","defineComponent","componentDefinition","tag","h","hostBindings","noop$1","invertObject","inputsPropertyName","ngDoCheck","afterViewChecked","ngOnDestroy","onPush","changeDetection","ChangeDetectionStrategy","PRIVATE_PREFIX","EMPTY$1","newObj","pureFunction3","pureFn","exp1","exp2","thisArg","pureFunctionV","descend","read","deep","createQuery$1","shallow","containerValues","clonedQuery","viewValues","addNode","removed","geIdxOfMatchingDirective","readFromNodeInjector","matchingIdx","addMatch","getIdxOfMatchingSelector","previous","createPredicate","_valuesTree","_values","QueryList_","pure","opts","domRendererFactory3","componentDef","CLEAN_PROMISE","elementNode","lElement","getPreviousOrParentNode","tElement","definition","proto","_loop_1","pubKey","minKey","privateMinKey","writable","existingDesc","getOwnPropertyDescriptor","simpleChanges","propertyName","delegateHook","onChangesWrapper","currentParent","hack_findQueryName","addToViewTree","nameOrComponentType","node_1","hostComponentDef","isHostElement","ngComponentDef","name_1","initChangeDetectorIfExisting","cleanupFns","wrappedListener","listenerFn","wrapListenerWithDirtyLogic","cleanupFn","listen","preventDefault","wrapListenerWithDirtyAndDefault","createTextNode","viewBlockId","existingView","viewUpdateMode","tContainer","getOrCreateEmbeddedTView","memoryIndex","QueryList$1","LQueries_","track","localIndex","selectorIndex","nodesForSelector","nodeToProject","previouslyProjected","lastNodeToProject","i0","i1","i2","bindingUpdated4","i3","i4","i5","assertLessThan","content","exp5","exp6","exp7","exp8","assertHasParent","queryListImpl","dataValue","inputData","markDirtyIfOnPush","noOfNodeBuckets","distributedNodes","componentChild","strValue","classList","suffixOrSanitizer","removeStyle","removeProperty","existingNode","nativeSibling","containerState","previousView","pipeDef","firstInstance","getTView","destroyHooks","unsafeStyle","unsafeUrl","unsafeResourceUrl","moduleFactories","templateFactory","componentProvider","ngModuleType","defFactory","outputDefs","fixedAttrs","_b","bindingDefs","_c","namespaceAndName_1","suffixOrSecurityContext","ns_1","_d","_e","valueCount","c0","a1","c1","a2","c2","a3","c3","a4","c4","a5","c5","a6","c6","a7","c7","a8","c8","a9","c9","_toStringWithNull","constAndInterp","modules","isRoot","APP_ROOT_SCOPE","propToIndex","nbKeys","staticText","nodeIdx","globalBindingIdx","viewBindingCount","viewDisposableCount","viewNodeFlags","viewRootNodeFlags","viewMatchedQueries","currentRenderParent","currentElementHasPublicProviders","currentElementHasPrivateProviders","isPrivateService","isComponent","newParent","isNgContainer","rootNodeFlags"],"mappings":"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","file":"/home/travis/build/angular/angular/dist/packages-dist/core/bundles/core.umd.min.js.map","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@whatItDoes Represents a type that a Component or other object is instances of.\n *\n * \\@description\n *\n * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by\n * the `MyCustomComponent` constructor function.\n *\n * \\@stable\n */\nexport var /** @type {?} */ Type = Function;\n/**\n * @param {?} v\n * @return {?}\n */\nexport function isType(v) {\n    return typeof v === 'function';\n}\n//# sourceMappingURL=type.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar /** @type {?} */ __window = typeof window !== 'undefined' && window;\nvar /** @type {?} */ __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nvar /** @type {?} */ __global = typeof global !== 'undefined' && global;\nvar /** @type {?} */ _global = __window || __global || __self;\nvar /** @type {?} */ promise = Promise.resolve(0);\nexport { _global as global };\nvar /** @type {?} */ _symbolIterator = null;\n/**\n * @return {?}\n */\nexport function getSymbolIterator() {\n    if (!_symbolIterator) {\n        var /** @type {?} */ Symbol_1 = _global['Symbol'];\n        if (Symbol_1 && Symbol_1.iterator) {\n            _symbolIterator = Symbol_1.iterator;\n        }\n        else {\n            // es6-shim specific logic\n            var /** @type {?} */ keys = Object.getOwnPropertyNames(Map.prototype);\n            for (var /** @type {?} */ i = 0; i < keys.length; ++i) {\n                var /** @type {?} */ key = keys[i];\n                if (key !== 'entries' && key !== 'size' &&\n                    (/** @type {?} */ (Map)).prototype[key] === Map.prototype['entries']) {\n                    _symbolIterator = key;\n                }\n            }\n        }\n    }\n    return _symbolIterator;\n}\n/**\n * @param {?} fn\n * @return {?}\n */\nexport function scheduleMicroTask(fn) {\n    if (typeof Zone === 'undefined') {\n        // use promise to schedule microTask instead of use Zone\n        promise.then(function () { fn && fn.apply(null, null); });\n    }\n    else {\n        Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n    }\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nexport function looseIdentical(a, b) {\n    return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);\n}\n/**\n * @param {?} token\n * @return {?}\n */\nexport function stringify(token) {\n    if (typeof token === 'string') {\n        return token;\n    }\n    if (token instanceof Array) {\n        return '[' + token.map(stringify).join(', ') + ']';\n    }\n    if (token == null) {\n        return '' + token;\n    }\n    if (token.overriddenName) {\n        return \"\" + token.overriddenName;\n    }\n    if (token.name) {\n        return \"\" + token.name;\n    }\n    var /** @type {?} */ res = token.toString();\n    if (res == null) {\n        return '' + res;\n    }\n    var /** @type {?} */ newLineIndex = res.indexOf('\\n');\n    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n}\n//# sourceMappingURL=util.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An interface implemented by all Angular type decorators, which allows them to be used as ES7\n * decorators as well as\n * Angular DSL syntax.\n *\n * ES7 syntax:\n *\n * ```\n * \\@ng.Component({...})\n * class MyClass {...}\n * ```\n * \\@stable\n * @record\n */\nexport function TypeDecorator() { }\nfunction TypeDecorator_tsickle_Closure_declarations() {\n    /* TODO: handle strange member:\n    <T extends Type<any>>(type: T): T;\n    */\n    /* TODO: handle strange member:\n    (target: Object, propertyKey?: string|symbol, parameterIndex?: number): void;\n    */\n}\nexport var /** @type {?} */ ANNOTATIONS = '__annotations__';\nexport var /** @type {?} */ PARAMETERS = '__paramaters__';\nexport var /** @type {?} */ PROP_METADATA = '__prop__metadata__';\n/**\n * @suppress {globalThis}\n * @param {?} name\n * @param {?=} props\n * @param {?=} parentClass\n * @param {?=} chainFn\n * @param {?=} typeFn\n * @return {?}\n */\nexport function makeDecorator(name, props, parentClass, chainFn, typeFn) {\n    var /** @type {?} */ metaCtor = makeMetadataCtor(props);\n    /**\n     * @param {...?} args\n     * @return {?}\n     */\n    function DecoratorFactory() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (this instanceof DecoratorFactory) {\n            metaCtor.call.apply(metaCtor, [this].concat(args));\n            return this;\n        }\n        var /** @type {?} */ annotationInstance = new ((_a = (/** @type {?} */ (DecoratorFactory))).bind.apply(_a, [void 0].concat(args)))();\n        var /** @type {?} */ TypeDecorator = /** @type {?} */ (function TypeDecorator(cls) {\n            typeFn && typeFn.apply(void 0, [cls].concat(args));\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\n            // prevents the property is copied during subclassing.\n            var /** @type {?} */ annotations = cls.hasOwnProperty(ANNOTATIONS) ?\n                (/** @type {?} */ (cls))[ANNOTATIONS] :\n                Object.defineProperty(cls, ANNOTATIONS, { value: [] })[ANNOTATIONS];\n            annotations.push(annotationInstance);\n            return cls;\n        });\n        if (chainFn)\n            chainFn(TypeDecorator);\n        return TypeDecorator;\n        var _a;\n    }\n    if (parentClass) {\n        DecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    DecoratorFactory.prototype.ngMetadataName = name;\n    (/** @type {?} */ (DecoratorFactory)).annotationCls = DecoratorFactory;\n    return /** @type {?} */ (DecoratorFactory);\n}\n/**\n * @param {?=} props\n * @return {?}\n */\nfunction makeMetadataCtor(props) {\n    return function ctor() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (props) {\n            var /** @type {?} */ values = props.apply(void 0, args);\n            for (var /** @type {?} */ propName in values) {\n                this[propName] = values[propName];\n            }\n        }\n    };\n}\n/**\n * @param {?} name\n * @param {?=} props\n * @param {?=} parentClass\n * @return {?}\n */\nexport function makeParamDecorator(name, props, parentClass) {\n    var /** @type {?} */ metaCtor = makeMetadataCtor(props);\n    /**\n     * @param {...?} args\n     * @return {?}\n     */\n    function ParamDecoratorFactory() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (this instanceof ParamDecoratorFactory) {\n            metaCtor.apply(this, args);\n            return this;\n        }\n        var /** @type {?} */ annotationInstance = new ((_a = (/** @type {?} */ (ParamDecoratorFactory))).bind.apply(_a, [void 0].concat(args)))();\n        (/** @type {?} */ (ParamDecorator)).annotation = annotationInstance;\n        return ParamDecorator;\n        /**\n         * @param {?} cls\n         * @param {?} unusedKey\n         * @param {?} index\n         * @return {?}\n         */\n        function ParamDecorator(cls, unusedKey, index) {\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\n            // prevents the property is copied during subclassing.\n            var /** @type {?} */ parameters = cls.hasOwnProperty(PARAMETERS) ?\n                (/** @type {?} */ (cls))[PARAMETERS] :\n                Object.defineProperty(cls, PARAMETERS, { value: [] })[PARAMETERS];\n            // there might be gaps if some in between parameters do not have annotations.\n            // we pad with nulls.\n            while (parameters.length <= index) {\n                parameters.push(null);\n            }\n            (parameters[index] = parameters[index] || []).push(annotationInstance);\n            return cls;\n        }\n        var _a;\n    }\n    if (parentClass) {\n        ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    ParamDecoratorFactory.prototype.ngMetadataName = name;\n    (/** @type {?} */ (ParamDecoratorFactory)).annotationCls = ParamDecoratorFactory;\n    return ParamDecoratorFactory;\n}\n/**\n * @param {?} name\n * @param {?=} props\n * @param {?=} parentClass\n * @return {?}\n */\nexport function makePropDecorator(name, props, parentClass) {\n    var /** @type {?} */ metaCtor = makeMetadataCtor(props);\n    /**\n     * @param {...?} args\n     * @return {?}\n     */\n    function PropDecoratorFactory() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (this instanceof PropDecoratorFactory) {\n            metaCtor.apply(this, args);\n            return this;\n        }\n        var /** @type {?} */ decoratorInstance = new ((_a = (/** @type {?} */ (PropDecoratorFactory))).bind.apply(_a, [void 0].concat(args)))();\n        return function PropDecorator(target, name) {\n            var /** @type {?} */ constructor = target.constructor;\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\n            // prevents the property is copied during subclassing.\n            var /** @type {?} */ meta = constructor.hasOwnProperty(PROP_METADATA) ?\n                (/** @type {?} */ (constructor))[PROP_METADATA] :\n                Object.defineProperty(constructor, PROP_METADATA, { value: {} })[PROP_METADATA];\n            meta[name] = meta.hasOwnProperty(name) && meta[name] || [];\n            meta[name].unshift(decoratorInstance);\n        };\n        var _a;\n    }\n    if (parentClass) {\n        PropDecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    PropDecoratorFactory.prototype.ngMetadataName = name;\n    (/** @type {?} */ (PropDecoratorFactory)).annotationCls = PropDecoratorFactory;\n    return PropDecoratorFactory;\n}\n//# sourceMappingURL=decorators.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Type, isType } from '../type';\nimport { global, stringify } from '../util';\nimport { ANNOTATIONS, PARAMETERS, PROP_METADATA } from '../util/decorators';\n/**\n * Attention: These regex has to hold even if the code is minified!\n */\nexport var /** @type {?} */ DELEGATE_CTOR = /^function\\s+\\S+\\(\\)\\s*{[\\s\\S]+\\.apply\\(this,\\s*arguments\\)/;\nexport var /** @type {?} */ INHERITED_CLASS = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[A-Za-z\\d$_]+\\s*{/;\nexport var /** @type {?} */ INHERITED_CLASS_WITH_CTOR = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[A-Za-z\\d$_]+\\s*{[\\s\\S]*constructor\\s*\\(/;\nvar ReflectionCapabilities = /** @class */ (function () {\n    function ReflectionCapabilities(reflect) {\n        this._reflect = reflect || global['Reflect'];\n    }\n    /**\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.isReflectionEnabled = /**\n     * @return {?}\n     */\n    function () { return true; };\n    /**\n     * @template T\n     * @param {?} t\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.factory = /**\n     * @template T\n     * @param {?} t\n     * @return {?}\n     */\n    function (t) { return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return new (t.bind.apply(t, [void 0].concat(args)))();\n    }; };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} paramTypes\n     * @param {?} paramAnnotations\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype._zipTypesAndAnnotations = /**\n     * \\@internal\n     * @param {?} paramTypes\n     * @param {?} paramAnnotations\n     * @return {?}\n     */\n    function (paramTypes, paramAnnotations) {\n        var /** @type {?} */ result;\n        if (typeof paramTypes === 'undefined') {\n            result = new Array(paramAnnotations.length);\n        }\n        else {\n            result = new Array(paramTypes.length);\n        }\n        for (var /** @type {?} */ i = 0; i < result.length; i++) {\n            // TS outputs Object for parameters without types, while Traceur omits\n            // the annotations. For now we preserve the Traceur behavior to aid\n            // migration, but this can be revisited.\n            if (typeof paramTypes === 'undefined') {\n                result[i] = [];\n            }\n            else if (paramTypes[i] != Object) {\n                result[i] = [paramTypes[i]];\n            }\n            else {\n                result[i] = [];\n            }\n            if (paramAnnotations && paramAnnotations[i] != null) {\n                result[i] = result[i].concat(paramAnnotations[i]);\n            }\n        }\n        return result;\n    };\n    /**\n     * @param {?} type\n     * @param {?} parentCtor\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype._ownParameters = /**\n     * @param {?} type\n     * @param {?} parentCtor\n     * @return {?}\n     */\n    function (type, parentCtor) {\n        var /** @type {?} */ typeStr = type.toString();\n        // If we have no decorators, we only have function.length as metadata.\n        // In that case, to detect whether a child class declared an own constructor or not,\n        // we need to look inside of that constructor to check whether it is\n        // just calling the parent.\n        // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439\n        // that sets 'design:paramtypes' to []\n        // if a class inherits from another class but has no ctor declared itself.\n        if (DELEGATE_CTOR.exec(typeStr) ||\n            (INHERITED_CLASS.exec(typeStr) && !INHERITED_CLASS_WITH_CTOR.exec(typeStr))) {\n            return null;\n        }\n        // Prefer the direct API.\n        if ((/** @type {?} */ (type)).parameters && (/** @type {?} */ (type)).parameters !== parentCtor.parameters) {\n            return (/** @type {?} */ (type)).parameters;\n        }\n        // API of tsickle for lowering decorators to properties on the class.\n        var /** @type {?} */ tsickleCtorParams = (/** @type {?} */ (type)).ctorParameters;\n        if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {\n            // Newer tsickle uses a function closure\n            // Retain the non-function case for compatibility with older tsickle\n            var /** @type {?} */ ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;\n            var /** @type {?} */ paramTypes_1 = ctorParameters.map(function (ctorParam) { return ctorParam && ctorParam.type; });\n            var /** @type {?} */ paramAnnotations_1 = ctorParameters.map(function (ctorParam) {\n                return ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators);\n            });\n            return this._zipTypesAndAnnotations(paramTypes_1, paramAnnotations_1);\n        }\n        // API for metadata created by invoking the decorators.\n        var /** @type {?} */ paramAnnotations = type.hasOwnProperty(PARAMETERS) && (/** @type {?} */ (type))[PARAMETERS];\n        var /** @type {?} */ paramTypes = this._reflect && this._reflect.getOwnMetadata &&\n            this._reflect.getOwnMetadata('design:paramtypes', type);\n        if (paramTypes || paramAnnotations) {\n            return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n        }\n        // If a class has no decorators, at least create metadata\n        // based on function.length.\n        // Note: We know that this is a real constructor as we checked\n        // the content of the constructor above.\n        return new Array((/** @type {?} */ (type.length))).fill(undefined);\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.parameters = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        // Note: only report metadata if we have at least one class decorator\n        // to stay in sync with the static reflector.\n        if (!isType(type)) {\n            return [];\n        }\n        var /** @type {?} */ parentCtor = getParentCtor(type);\n        var /** @type {?} */ parameters = this._ownParameters(type, parentCtor);\n        if (!parameters && parentCtor !== Object) {\n            parameters = this.parameters(parentCtor);\n        }\n        return parameters || [];\n    };\n    /**\n     * @param {?} typeOrFunc\n     * @param {?} parentCtor\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype._ownAnnotations = /**\n     * @param {?} typeOrFunc\n     * @param {?} parentCtor\n     * @return {?}\n     */\n    function (typeOrFunc, parentCtor) {\n        // Prefer the direct API.\n        if ((/** @type {?} */ (typeOrFunc)).annotations && (/** @type {?} */ (typeOrFunc)).annotations !== parentCtor.annotations) {\n            var /** @type {?} */ annotations = (/** @type {?} */ (typeOrFunc)).annotations;\n            if (typeof annotations === 'function' && annotations.annotations) {\n                annotations = annotations.annotations;\n            }\n            return annotations;\n        }\n        // API of tsickle for lowering decorators to properties on the class.\n        if ((/** @type {?} */ (typeOrFunc)).decorators && (/** @type {?} */ (typeOrFunc)).decorators !== parentCtor.decorators) {\n            return convertTsickleDecoratorIntoMetadata((/** @type {?} */ (typeOrFunc)).decorators);\n        }\n        // API for metadata created by invoking the decorators.\n        if (typeOrFunc.hasOwnProperty(ANNOTATIONS)) {\n            return (/** @type {?} */ (typeOrFunc))[ANNOTATIONS];\n        }\n        return null;\n    };\n    /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.annotations = /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    function (typeOrFunc) {\n        if (!isType(typeOrFunc)) {\n            return [];\n        }\n        var /** @type {?} */ parentCtor = getParentCtor(typeOrFunc);\n        var /** @type {?} */ ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];\n        var /** @type {?} */ parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];\n        return parentAnnotations.concat(ownAnnotations);\n    };\n    /**\n     * @param {?} typeOrFunc\n     * @param {?} parentCtor\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype._ownPropMetadata = /**\n     * @param {?} typeOrFunc\n     * @param {?} parentCtor\n     * @return {?}\n     */\n    function (typeOrFunc, parentCtor) {\n        // Prefer the direct API.\n        if ((/** @type {?} */ (typeOrFunc)).propMetadata &&\n            (/** @type {?} */ (typeOrFunc)).propMetadata !== parentCtor.propMetadata) {\n            var /** @type {?} */ propMetadata = (/** @type {?} */ (typeOrFunc)).propMetadata;\n            if (typeof propMetadata === 'function' && propMetadata.propMetadata) {\n                propMetadata = propMetadata.propMetadata;\n            }\n            return propMetadata;\n        }\n        // API of tsickle for lowering decorators to properties on the class.\n        if ((/** @type {?} */ (typeOrFunc)).propDecorators &&\n            (/** @type {?} */ (typeOrFunc)).propDecorators !== parentCtor.propDecorators) {\n            var /** @type {?} */ propDecorators_1 = (/** @type {?} */ (typeOrFunc)).propDecorators;\n            var /** @type {?} */ propMetadata_1 = /** @type {?} */ ({});\n            Object.keys(propDecorators_1).forEach(function (prop) {\n                propMetadata_1[prop] = convertTsickleDecoratorIntoMetadata(propDecorators_1[prop]);\n            });\n            return propMetadata_1;\n        }\n        // API for metadata created by invoking the decorators.\n        if (typeOrFunc.hasOwnProperty(PROP_METADATA)) {\n            return (/** @type {?} */ (typeOrFunc))[PROP_METADATA];\n        }\n        return null;\n    };\n    /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.propMetadata = /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    function (typeOrFunc) {\n        if (!isType(typeOrFunc)) {\n            return {};\n        }\n        var /** @type {?} */ parentCtor = getParentCtor(typeOrFunc);\n        var /** @type {?} */ propMetadata = {};\n        if (parentCtor !== Object) {\n            var /** @type {?} */ parentPropMetadata_1 = this.propMetadata(parentCtor);\n            Object.keys(parentPropMetadata_1).forEach(function (propName) {\n                propMetadata[propName] = parentPropMetadata_1[propName];\n            });\n        }\n        var /** @type {?} */ ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);\n        if (ownPropMetadata) {\n            Object.keys(ownPropMetadata).forEach(function (propName) {\n                var /** @type {?} */ decorators = [];\n                if (propMetadata.hasOwnProperty(propName)) {\n                    decorators.push.apply(decorators, propMetadata[propName]);\n                }\n                decorators.push.apply(decorators, ownPropMetadata[propName]);\n                propMetadata[propName] = decorators;\n            });\n        }\n        return propMetadata;\n    };\n    /**\n     * @param {?} type\n     * @param {?} lcProperty\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.hasLifecycleHook = /**\n     * @param {?} type\n     * @param {?} lcProperty\n     * @return {?}\n     */\n    function (type, lcProperty) {\n        return type instanceof Type && lcProperty in type.prototype;\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.guards = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) { return {}; };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.getter = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) { return /** @type {?} */ (new Function('o', 'return o.' + name + ';')); };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.setter = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        return /** @type {?} */ (new Function('o', 'v', 'return o.' + name + ' = v;'));\n    };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.method = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        var /** @type {?} */ functionBody = \"if (!o.\" + name + \") throw new Error('\\\"\" + name + \"\\\" is undefined');\\n        return o.\" + name + \".apply(o, args);\";\n        return /** @type {?} */ (new Function('o', 'args', functionBody));\n    };\n    // There is not a concept of import uri in Js, but this is useful in developing Dart applications.\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.importUri = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        // StaticSymbol\n        if (typeof type === 'object' && type['filePath']) {\n            return type['filePath'];\n        }\n        // Runtime type\n        return \"./\" + stringify(type);\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.resourceUri = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) { return \"./\" + stringify(type); };\n    /**\n     * @param {?} name\n     * @param {?} moduleUrl\n     * @param {?} members\n     * @param {?} runtime\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.resolveIdentifier = /**\n     * @param {?} name\n     * @param {?} moduleUrl\n     * @param {?} members\n     * @param {?} runtime\n     * @return {?}\n     */\n    function (name, moduleUrl, members, runtime) {\n        return runtime;\n    };\n    /**\n     * @param {?} enumIdentifier\n     * @param {?} name\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.resolveEnum = /**\n     * @param {?} enumIdentifier\n     * @param {?} name\n     * @return {?}\n     */\n    function (enumIdentifier, name) { return enumIdentifier[name]; };\n    return ReflectionCapabilities;\n}());\nexport { ReflectionCapabilities };\nfunction ReflectionCapabilities_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ReflectionCapabilities.prototype._reflect;\n}\n/**\n * @param {?} decoratorInvocations\n * @return {?}\n */\nfunction convertTsickleDecoratorIntoMetadata(decoratorInvocations) {\n    if (!decoratorInvocations) {\n        return [];\n    }\n    return decoratorInvocations.map(function (decoratorInvocation) {\n        var /** @type {?} */ decoratorType = decoratorInvocation.type;\n        var /** @type {?} */ annotationCls = decoratorType.annotationCls;\n        var /** @type {?} */ annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];\n        return new (annotationCls.bind.apply(annotationCls, [void 0].concat(annotationArgs)))();\n    });\n}\n/**\n * @param {?} ctor\n * @return {?}\n */\nfunction getParentCtor(ctor) {\n    var /** @type {?} */ parentProto = ctor.prototype ? Object.getPrototypeOf(ctor.prototype) : null;\n    var /** @type {?} */ parentCtor = parentProto ? parentProto.constructor : null;\n    // Note: We always use `Object` as the null value\n    // to simplify checking later on.\n    return parentCtor || Object;\n}\n//# sourceMappingURL=reflection_capabilities.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { stringify } from '../util';\n/**\n * An interface that a function passed into {\\@link forwardRef} has to implement.\n *\n * ### Example\n *\n * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref_fn'}\n * \\@experimental\n * @record\n */\nexport function ForwardRefFn() { }\nfunction ForwardRefFn_tsickle_Closure_declarations() {\n    /* TODO: handle strange member:\n    (): any;\n    */\n}\n/**\n * Allows to refer to references which are not yet defined.\n *\n * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\n * DI is declared,\n * but not yet defined. It is also used when the `token` which we use when creating a query is not\n * yet defined.\n *\n * ### Example\n * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\n * \\@experimental\n * @param {?} forwardRefFn\n * @return {?}\n */\nexport function forwardRef(forwardRefFn) {\n    (/** @type {?} */ (forwardRefFn)).__forward_ref__ = forwardRef;\n    (/** @type {?} */ (forwardRefFn)).toString = function () { return stringify(this()); };\n    return (/** @type {?} */ (/** @type {?} */ (forwardRefFn)));\n}\n/**\n * Lazily retrieves the reference value from a forwardRef.\n *\n * Acts as the identity function when given a non-forward-ref value.\n *\n * ### Example ([live demo](http://plnkr.co/edit/GU72mJrk1fiodChcmiDR?p=preview))\n *\n * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\n *\n * See: {\\@link forwardRef}\n * \\@experimental\n * @param {?} type\n * @return {?}\n */\nexport function resolveForwardRef(type) {\n    if (typeof type === 'function' && type.hasOwnProperty('__forward_ref__') &&\n        type.__forward_ref__ === forwardRef) {\n        return (/** @type {?} */ (type))();\n    }\n    else {\n        return type;\n    }\n}\n//# sourceMappingURL=forward_ref.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { stringify } from '../util';\nimport { resolveForwardRef } from './forward_ref';\nimport { Inject, Optional, Self, SkipSelf } from './metadata';\nexport var /** @type {?} */ SOURCE = '__source';\nvar /** @type {?} */ _THROW_IF_NOT_FOUND = new Object();\nexport var /** @type {?} */ THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\nvar _NullInjector = /** @class */ (function () {\n    function _NullInjector() {\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    _NullInjector.prototype.get = /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    function (token, notFoundValue) {\n        if (notFoundValue === void 0) { notFoundValue = _THROW_IF_NOT_FOUND; }\n        if (notFoundValue === _THROW_IF_NOT_FOUND) {\n            throw new Error(\"NullInjectorError: No provider for \" + stringify(token) + \"!\");\n        }\n        return notFoundValue;\n    };\n    return _NullInjector;\n}());\n/**\n * \\@whatItDoes Injector interface\n * \\@howToUse\n * ```\n * const injector: Injector = ...;\n * injector.get(...);\n * ```\n *\n * \\@description\n * For more details, see the {\\@linkDocs guide/dependency-injection \"Dependency Injection Guide\"}.\n *\n * ### Example\n *\n * {\\@example core/di/ts/injector_spec.ts region='Injector'}\n *\n * `Injector` returns itself when given `Injector` as a token:\n * {\\@example core/di/ts/injector_spec.ts region='injectInjector'}\n *\n * \\@stable\n * @abstract\n */\nvar Injector = /** @class */ (function () {\n    function Injector() {\n    }\n    /**\n     * Create a new Injector which is configure using `StaticProvider`s.\n     *\n     * ### Example\n     *\n     * {@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n     */\n    /**\n     * Create a new Injector which is configure using `StaticProvider`s.\n     *\n     * ### Example\n     *\n     * {\\@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n     * @param {?} options\n     * @param {?=} parent\n     * @return {?}\n     */\n    Injector.create = /**\n     * Create a new Injector which is configure using `StaticProvider`s.\n     *\n     * ### Example\n     *\n     * {\\@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n     * @param {?} options\n     * @param {?=} parent\n     * @return {?}\n     */\n    function (options, parent) {\n        if (Array.isArray(options)) {\n            return new StaticInjector(options, parent);\n        }\n        else {\n            return new StaticInjector(options.providers, options.parent, options.name || null);\n        }\n    };\n    Injector.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n    Injector.NULL = new _NullInjector();\n    return Injector;\n}());\nexport { Injector };\nfunction Injector_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Injector.THROW_IF_NOT_FOUND;\n    /** @type {?} */\n    Injector.NULL;\n    /**\n     * Retrieves an instance from the injector based on the provided token.\n     * If not found:\n     * - Throws an error if no `notFoundValue` that is not equal to\n     * Injector.THROW_IF_NOT_FOUND is given\n     * - Returns the `notFoundValue` otherwise\n     * @abstract\n     * @template T\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} flags\n     * @return {?}\n     */\n    Injector.prototype.get = function (token, notFoundValue, flags) { };\n    /**\n     * @deprecated from v4.0.0 use Type<T> or InjectionToken<T>\n     * @suppress {duplicate}\n     * @abstract\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    Injector.prototype.get = function (token, notFoundValue) { };\n}\nvar /** @type {?} */ IDENT = function (value) {\n    return value;\n};\nvar ɵ0 = IDENT;\nvar /** @type {?} */ EMPTY = /** @type {?} */ ([]);\nvar /** @type {?} */ CIRCULAR = IDENT;\nvar /** @type {?} */ MULTI_PROVIDER_FN = function () {\n    return Array.prototype.slice.call(arguments);\n};\nvar ɵ1 = MULTI_PROVIDER_FN;\nvar /** @type {?} */ GET_PROPERTY_NAME = /** @type {?} */ ({});\nvar ɵ2 = GET_PROPERTY_NAME;\nvar /** @type {?} */ USE_VALUE = getClosureSafeProperty({ provide: String, useValue: ɵ2 });\nvar /** @type {?} */ NG_TOKEN_PATH = 'ngTokenPath';\nvar /** @type {?} */ NG_TEMP_TOKEN_PATH = 'ngTempTokenPath';\n/** @enum {number} */\nvar OptionFlags = {\n    Optional: 1,\n    CheckSelf: 2,\n    CheckParent: 4,\n    Default: 6,\n};\nvar /** @type {?} */ NULL_INJECTOR = Injector.NULL;\nvar /** @type {?} */ NEW_LINE = /\\n/gm;\nvar /** @type {?} */ NO_NEW_LINE = 'ɵ';\nvar StaticInjector = /** @class */ (function () {\n    function StaticInjector(providers, parent, source) {\n        if (parent === void 0) { parent = NULL_INJECTOR; }\n        if (source === void 0) { source = null; }\n        this.parent = parent;\n        this.source = source;\n        var /** @type {?} */ records = this._records = new Map();\n        records.set(Injector, /** @type {?} */ ({ token: Injector, fn: IDENT, deps: EMPTY, value: this, useNew: false }));\n        recursivelyProcessProviders(records, providers);\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} flags\n     * @return {?}\n     */\n    StaticInjector.prototype.get = /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} flags\n     * @return {?}\n     */\n    function (token, notFoundValue, flags) {\n        if (flags === void 0) { flags = 0 /* Default */; }\n        var /** @type {?} */ record = this._records.get(token);\n        try {\n            return tryResolveToken(token, record, this._records, this.parent, notFoundValue, flags);\n        }\n        catch (/** @type {?} */ e) {\n            var /** @type {?} */ tokenPath = e[NG_TEMP_TOKEN_PATH];\n            if (token[SOURCE]) {\n                tokenPath.unshift(token[SOURCE]);\n            }\n            e.message = formatError('\\n' + e.message, tokenPath, this.source);\n            e[NG_TOKEN_PATH] = tokenPath;\n            e[NG_TEMP_TOKEN_PATH] = null;\n            throw e;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    StaticInjector.prototype.toString = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ tokens = /** @type {?} */ ([]), /** @type {?} */ records = this._records;\n        records.forEach(function (v, token) { return tokens.push(stringify(token)); });\n        return \"StaticInjector[\" + tokens.join(', ') + \"]\";\n    };\n    return StaticInjector;\n}());\nexport { StaticInjector };\nfunction StaticInjector_tsickle_Closure_declarations() {\n    /** @type {?} */\n    StaticInjector.prototype.parent;\n    /** @type {?} */\n    StaticInjector.prototype.source;\n    /** @type {?} */\n    StaticInjector.prototype._records;\n}\n/**\n * @record\n */\nfunction Record() { }\nfunction Record_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Record.prototype.fn;\n    /** @type {?} */\n    Record.prototype.useNew;\n    /** @type {?} */\n    Record.prototype.deps;\n    /** @type {?} */\n    Record.prototype.value;\n}\n/**\n * @record\n */\nfunction DependencyRecord() { }\nfunction DependencyRecord_tsickle_Closure_declarations() {\n    /** @type {?} */\n    DependencyRecord.prototype.token;\n    /** @type {?} */\n    DependencyRecord.prototype.options;\n}\n/**\n * @param {?} provider\n * @return {?}\n */\nfunction resolveProvider(provider) {\n    var /** @type {?} */ deps = computeDeps(provider);\n    var /** @type {?} */ fn = IDENT;\n    var /** @type {?} */ value = EMPTY;\n    var /** @type {?} */ useNew = false;\n    var /** @type {?} */ provide = resolveForwardRef(provider.provide);\n    if (USE_VALUE in provider) {\n        // We need to use USE_VALUE in provider since provider.useValue could be defined as undefined.\n        value = (/** @type {?} */ (provider)).useValue;\n    }\n    else if ((/** @type {?} */ (provider)).useFactory) {\n        fn = (/** @type {?} */ (provider)).useFactory;\n    }\n    else if ((/** @type {?} */ (provider)).useExisting) {\n        // Just use IDENT\n    }\n    else if ((/** @type {?} */ (provider)).useClass) {\n        useNew = true;\n        fn = resolveForwardRef((/** @type {?} */ (provider)).useClass);\n    }\n    else if (typeof provide == 'function') {\n        useNew = true;\n        fn = provide;\n    }\n    else {\n        throw staticError('StaticProvider does not have [useValue|useFactory|useExisting|useClass] or [provide] is not newable', provider);\n    }\n    return { deps: deps, fn: fn, useNew: useNew, value: value };\n}\n/**\n * @param {?} token\n * @return {?}\n */\nfunction multiProviderMixError(token) {\n    return staticError('Cannot mix multi providers and regular providers', token);\n}\n/**\n * @param {?} records\n * @param {?} provider\n * @return {?}\n */\nfunction recursivelyProcessProviders(records, provider) {\n    if (provider) {\n        provider = resolveForwardRef(provider);\n        if (provider instanceof Array) {\n            // if we have an array recurse into the array\n            for (var /** @type {?} */ i = 0; i < provider.length; i++) {\n                recursivelyProcessProviders(records, provider[i]);\n            }\n        }\n        else if (typeof provider === 'function') {\n            // Functions were supported in ReflectiveInjector, but are not here. For safety give useful\n            // error messages\n            throw staticError('Function/Class not supported', provider);\n        }\n        else if (provider && typeof provider === 'object' && provider.provide) {\n            // At this point we have what looks like a provider: {provide: ?, ....}\n            var /** @type {?} */ token = resolveForwardRef(provider.provide);\n            var /** @type {?} */ resolvedProvider = resolveProvider(provider);\n            if (provider.multi === true) {\n                // This is a multi provider.\n                var /** @type {?} */ multiProvider = records.get(token);\n                if (multiProvider) {\n                    if (multiProvider.fn !== MULTI_PROVIDER_FN) {\n                        throw multiProviderMixError(token);\n                    }\n                }\n                else {\n                    // Create a placeholder factory which will look up the constituents of the multi provider.\n                    records.set(token, multiProvider = /** @type {?} */ ({\n                        token: provider.provide,\n                        deps: [],\n                        useNew: false,\n                        fn: MULTI_PROVIDER_FN,\n                        value: EMPTY\n                    }));\n                }\n                // Treat the provider as the token.\n                token = provider;\n                multiProvider.deps.push({ token: token, options: 6 /* Default */ });\n            }\n            var /** @type {?} */ record = records.get(token);\n            if (record && record.fn == MULTI_PROVIDER_FN) {\n                throw multiProviderMixError(token);\n            }\n            records.set(token, resolvedProvider);\n        }\n        else {\n            throw staticError('Unexpected provider', provider);\n        }\n    }\n}\n/**\n * @param {?} token\n * @param {?} record\n * @param {?} records\n * @param {?} parent\n * @param {?} notFoundValue\n * @param {?} flags\n * @return {?}\n */\nfunction tryResolveToken(token, record, records, parent, notFoundValue, flags) {\n    try {\n        return resolveToken(token, record, records, parent, notFoundValue, flags);\n    }\n    catch (/** @type {?} */ e) {\n        // ensure that 'e' is of type Error.\n        if (!(e instanceof Error)) {\n            e = new Error(e);\n        }\n        var /** @type {?} */ path = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];\n        path.unshift(token);\n        if (record && record.value == CIRCULAR) {\n            // Reset the Circular flag.\n            record.value = EMPTY;\n        }\n        throw e;\n    }\n}\n/**\n * @param {?} token\n * @param {?} record\n * @param {?} records\n * @param {?} parent\n * @param {?} notFoundValue\n * @param {?} flags\n * @return {?}\n */\nfunction resolveToken(token, record, records, parent, notFoundValue, flags) {\n    var /** @type {?} */ value;\n    if (record && !(flags & 1 /* SkipSelf */)) {\n        // If we don't have a record, this implies that we don't own the provider hence don't know how\n        // to resolve it.\n        value = record.value;\n        if (value == CIRCULAR) {\n            throw Error(NO_NEW_LINE + 'Circular dependency');\n        }\n        else if (value === EMPTY) {\n            record.value = CIRCULAR;\n            var /** @type {?} */ obj = undefined;\n            var /** @type {?} */ useNew = record.useNew;\n            var /** @type {?} */ fn = record.fn;\n            var /** @type {?} */ depRecords = record.deps;\n            var /** @type {?} */ deps = EMPTY;\n            if (depRecords.length) {\n                deps = [];\n                for (var /** @type {?} */ i = 0; i < depRecords.length; i++) {\n                    var /** @type {?} */ depRecord = depRecords[i];\n                    var /** @type {?} */ options = depRecord.options;\n                    var /** @type {?} */ childRecord = options & 2 /* CheckSelf */ ? records.get(depRecord.token) : undefined;\n                    deps.push(tryResolveToken(\n                    // Current Token to resolve\n                    depRecord.token, childRecord, records, \n                    // If we don't know how to resolve dependency and we should not check parent for it,\n                    // than pass in Null injector.\n                    !childRecord && !(options & 4 /* CheckParent */) ? NULL_INJECTOR : parent, options & 1 /* Optional */ ? null : Injector.THROW_IF_NOT_FOUND, 0 /* Default */));\n                }\n            }\n            record.value = value = useNew ? new ((_a = (/** @type {?} */ (fn))).bind.apply(_a, [void 0].concat(deps)))() : fn.apply(obj, deps);\n        }\n    }\n    else if (!(flags & 2 /* Self */)) {\n        value = parent.get(token, notFoundValue, 0 /* Default */);\n    }\n    return value;\n    var _a;\n}\n/**\n * @param {?} provider\n * @return {?}\n */\nfunction computeDeps(provider) {\n    var /** @type {?} */ deps = EMPTY;\n    var /** @type {?} */ providerDeps = (/** @type {?} */ (provider)).deps;\n    if (providerDeps && providerDeps.length) {\n        deps = [];\n        for (var /** @type {?} */ i = 0; i < providerDeps.length; i++) {\n            var /** @type {?} */ options = 6 /* Default */;\n            var /** @type {?} */ token = resolveForwardRef(providerDeps[i]);\n            if (token instanceof Array) {\n                for (var /** @type {?} */ j = 0, /** @type {?} */ annotations = token; j < annotations.length; j++) {\n                    var /** @type {?} */ annotation = annotations[j];\n                    if (annotation instanceof Optional || annotation == Optional) {\n                        options = options | 1 /* Optional */;\n                    }\n                    else if (annotation instanceof SkipSelf || annotation == SkipSelf) {\n                        options = options & ~2 /* CheckSelf */;\n                    }\n                    else if (annotation instanceof Self || annotation == Self) {\n                        options = options & ~4 /* CheckParent */;\n                    }\n                    else if (annotation instanceof Inject) {\n                        token = (/** @type {?} */ (annotation)).token;\n                    }\n                    else {\n                        token = resolveForwardRef(annotation);\n                    }\n                }\n            }\n            deps.push({ token: token, options: options });\n        }\n    }\n    else if ((/** @type {?} */ (provider)).useExisting) {\n        var /** @type {?} */ token = resolveForwardRef((/** @type {?} */ (provider)).useExisting);\n        deps = [{ token: token, options: 6 /* Default */ }];\n    }\n    else if (!providerDeps && !(USE_VALUE in provider)) {\n        // useValue & useExisting are the only ones which are exempt from deps all others need it.\n        throw staticError('\\'deps\\' required', provider);\n    }\n    return deps;\n}\n/**\n * @param {?} text\n * @param {?} obj\n * @param {?=} source\n * @return {?}\n */\nfunction formatError(text, obj, source) {\n    if (source === void 0) { source = null; }\n    text = text && text.charAt(0) === '\\n' && text.charAt(1) == NO_NEW_LINE ? text.substr(2) : text;\n    var /** @type {?} */ context = stringify(obj);\n    if (obj instanceof Array) {\n        context = obj.map(stringify).join(' -> ');\n    }\n    else if (typeof obj === 'object') {\n        var /** @type {?} */ parts = /** @type {?} */ ([]);\n        for (var /** @type {?} */ key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                var /** @type {?} */ value = obj[key];\n                parts.push(key + ':' + (typeof value === 'string' ? JSON.stringify(value) : stringify(value)));\n            }\n        }\n        context = \"{\" + parts.join(', ') + \"}\";\n    }\n    return \"StaticInjectorError\" + (source ? '(' + source + ')' : '') + \"[\" + context + \"]: \" + text.replace(NEW_LINE, '\\n  ');\n}\n/**\n * @param {?} text\n * @param {?} obj\n * @return {?}\n */\nfunction staticError(text, obj) {\n    return new Error(formatError(text, obj));\n}\n/**\n * @template T\n * @param {?} objWithPropertyToExtract\n * @return {?}\n */\nfunction getClosureSafeProperty(objWithPropertyToExtract) {\n    for (var /** @type {?} */ key in objWithPropertyToExtract) {\n        if (objWithPropertyToExtract[key] === GET_PROPERTY_NAME) {\n            return key;\n        }\n    }\n    throw Error('!prop');\n}\n/** @enum {number} */\nvar InjectFlags = {\n    Default: 0,\n    /** Skip the node that is requesting injection. */\n    SkipSelf: 1,\n    /** Don't descend into ancestors of the node requesting injection. */\n    Self: 2,\n};\nexport { InjectFlags };\nvar /** @type {?} */ _currentInjector = null;\n/**\n * @param {?} injector\n * @return {?}\n */\nexport function setCurrentInjector(injector) {\n    var /** @type {?} */ former = _currentInjector;\n    _currentInjector = injector;\n    return former;\n}\n/**\n * @template T\n * @param {?} token\n * @param {?=} notFoundValue\n * @param {?=} flags\n * @return {?}\n */\nexport function inject(token, notFoundValue, flags) {\n    if (flags === void 0) { flags = 0 /* Default */; }\n    if (_currentInjector === null) {\n        throw new Error(\"inject() must be called from an injection context\");\n    }\n    return _currentInjector.get(token, notFoundValue, flags);\n}\n/**\n * @param {?} types\n * @return {?}\n */\nexport function injectArgs(types) {\n    var /** @type {?} */ args = [];\n    for (var /** @type {?} */ i = 0; i < types.length; i++) {\n        var /** @type {?} */ arg = types[i];\n        if (Array.isArray(arg)) {\n            if (arg.length === 0) {\n                throw new Error('Arguments array must have arguments.');\n            }\n            var /** @type {?} */ type = undefined;\n            var /** @type {?} */ defaultValue = undefined;\n            var /** @type {?} */ flags = 0 /* Default */;\n            for (var /** @type {?} */ j = 0; j < arg.length; j++) {\n                var /** @type {?} */ meta = arg[j];\n                if (meta instanceof Optional || meta.__proto__.ngMetadataName === 'Optional') {\n                    defaultValue = null;\n                }\n                else if (meta instanceof SkipSelf || meta.__proto__.ngMetadataName === 'SkipSelf') {\n                    flags |= 1 /* SkipSelf */;\n                }\n                else if (meta instanceof Self || meta.__proto__.ngMetadataName === 'Self') {\n                    flags |= 2 /* Self */;\n                }\n                else if (meta instanceof Inject) {\n                    type = meta.token;\n                }\n                else {\n                    type = meta;\n                }\n            }\n            args.push(inject(/** @type {?} */ ((type)), defaultValue, 0 /* Default */));\n        }\n        else {\n            args.push(inject(arg));\n        }\n    }\n    return args;\n}\nexport { ɵ0, ɵ1, ɵ2 };\n//# sourceMappingURL=injector.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @template T\n * @param {?} objWithPropertyToExtract\n * @param {?} target\n * @return {?}\n */\nexport function getClosureSafeProperty(objWithPropertyToExtract, target) {\n    for (var /** @type {?} */ key in objWithPropertyToExtract) {\n        if (objWithPropertyToExtract[key] === target) {\n            return key;\n        }\n    }\n    throw Error('Could not find renamed property on target object.');\n}\n//# sourceMappingURL=property.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ReflectionCapabilities } from '../reflection/reflection_capabilities';\nimport { makeDecorator } from '../util/decorators';\nimport { getClosureSafeProperty } from '../util/property';\nimport { inject, injectArgs } from './injector';\nvar /** @type {?} */ GET_PROPERTY_NAME = /** @type {?} */ ({});\nvar ɵ0 = GET_PROPERTY_NAME;\nvar /** @type {?} */ USE_VALUE = getClosureSafeProperty({ provide: String, useValue: ɵ0 }, GET_PROPERTY_NAME);\n/**\n * Type of the Injectable decorator / constructor function.\n *\n * \\@stable\n * @record\n */\nexport function InjectableDecorator() { }\nfunction InjectableDecorator_tsickle_Closure_declarations() {\n    /* TODO: handle strange member:\n    (): any;\n    */\n    /* TODO: handle strange member:\n    (options?: {scope: Type<any>}&InjectableProvider): any;\n    */\n    /* TODO: handle strange member:\n    new (): Injectable;\n    */\n    /* TODO: handle strange member:\n    new (options?: {scope: Type<any>}&InjectableProvider): Injectable;\n    */\n}\nvar /** @type {?} */ EMPTY_ARRAY = [];\n/**\n * @param {?} type\n * @param {?=} provider\n * @return {?}\n */\nexport function convertInjectableProviderToFactory(type, provider) {\n    if (!provider) {\n        var /** @type {?} */ reflectionCapabilities = new ReflectionCapabilities();\n        var /** @type {?} */ deps_1 = reflectionCapabilities.parameters(type);\n        // TODO - convert to flags.\n        return function () { return new (type.bind.apply(type, [void 0].concat(injectArgs(/** @type {?} */ (deps_1)))))(); };\n    }\n    if (USE_VALUE in provider) {\n        var /** @type {?} */ valueProvider_1 = (/** @type {?} */ (provider));\n        return function () { return valueProvider_1.useValue; };\n    }\n    else if ((/** @type {?} */ (provider)).useExisting) {\n        var /** @type {?} */ existingProvider_1 = (/** @type {?} */ (provider));\n        return function () { return inject(existingProvider_1.useExisting); };\n    }\n    else if ((/** @type {?} */ (provider)).useFactory) {\n        var /** @type {?} */ factoryProvider_1 = (/** @type {?} */ (provider));\n        return function () { return factoryProvider_1.useFactory.apply(factoryProvider_1, injectArgs(factoryProvider_1.deps || EMPTY_ARRAY)); };\n    }\n    else if ((/** @type {?} */ (provider)).useClass) {\n        var /** @type {?} */ classProvider_1 = (/** @type {?} */ (provider));\n        var /** @type {?} */ deps_2 = (/** @type {?} */ (provider)).deps;\n        if (!deps_2) {\n            var /** @type {?} */ reflectionCapabilities = new ReflectionCapabilities();\n            deps_2 = reflectionCapabilities.parameters(type);\n        }\n        return function () {\n            return new ((_a = classProvider_1.useClass).bind.apply(_a, [void 0].concat(injectArgs(deps_2))))();\n            var _a;\n        };\n    }\n    else {\n        var /** @type {?} */ deps_3 = (/** @type {?} */ (provider)).deps;\n        if (!deps_3) {\n            var /** @type {?} */ reflectionCapabilities = new ReflectionCapabilities();\n            deps_3 = reflectionCapabilities.parameters(type);\n        }\n        return function () { return new (type.bind.apply(type, [void 0].concat(injectArgs(/** @type {?} */ ((deps_3))))))(); };\n    }\n}\n/**\n * Define injectable\n *\n * \\@experimental\n * @param {?} opts\n * @return {?}\n */\nexport function defineInjectable(opts) {\n    return opts;\n}\n/**\n * Injectable decorator and metadata.\n *\n * \\@stable\n * \\@Annotation\n */\nexport var /** @type {?} */ Injectable = makeDecorator('Injectable', undefined, undefined, undefined, function (injectableType, options) {\n    if (options && options.scope) {\n        (/** @type {?} */ (injectableType)).ngInjectableDef = defineInjectable({\n            scope: options.scope,\n            factory: convertInjectableProviderToFactory(injectableType, options)\n        });\n    }\n});\n/**\n * Type representing injectable service.\n *\n * \\@experimental\n * @record\n */\nexport function InjectableType() { }\nfunction InjectableType_tsickle_Closure_declarations() {\n    /** @type {?|undefined} */\n    InjectableType.prototype.ngInjectableDef;\n}\nexport { ɵ0 };\n//# sourceMappingURL=injectable.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { defineInjectable } from './injectable';\n/**\n * Creates a token that can be used in a DI Provider.\n *\n * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a\n * runtime representation) such as when injecting an interface, callable type, array or\n * parametrized type.\n *\n * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by\n * the `Injector`. This provides additional level of type safety.\n *\n * ```\n * interface MyInterface {...}\n * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));\n * // myInterface is inferred to be MyInterface.\n * ```\n *\n * ### Example\n *\n * {\\@example core/di/ts/injector_spec.ts region='InjectionToken'}\n *\n * \\@stable\n */\nvar /**\n * Creates a token that can be used in a DI Provider.\n *\n * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a\n * runtime representation) such as when injecting an interface, callable type, array or\n * parametrized type.\n *\n * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by\n * the `Injector`. This provides additional level of type safety.\n *\n * ```\n * interface MyInterface {...}\n * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));\n * // myInterface is inferred to be MyInterface.\n * ```\n *\n * ### Example\n *\n * {\\@example core/di/ts/injector_spec.ts region='InjectionToken'}\n *\n * \\@stable\n */\nInjectionToken = /** @class */ (function () {\n    function InjectionToken(_desc, options) {\n        this._desc = _desc;\n        /**\n         * \\@internal\n         */\n        this.ngMetadataName = 'InjectionToken';\n        if (options !== undefined) {\n            /** @nocollapse */ this.ngInjectableDef = defineInjectable({\n                scope: options.scope,\n                factory: options.factory,\n            });\n        }\n        else {\n            /** @nocollapse */ this.ngInjectableDef = undefined;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    InjectionToken.prototype.toString = /**\n     * @return {?}\n     */\n    function () { return \"InjectionToken \" + this._desc; };\n    return InjectionToken;\n}());\n/**\n * Creates a token that can be used in a DI Provider.\n *\n * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a\n * runtime representation) such as when injecting an interface, callable type, array or\n * parametrized type.\n *\n * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by\n * the `Injector`. This provides additional level of type safety.\n *\n * ```\n * interface MyInterface {...}\n * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));\n * // myInterface is inferred to be MyInterface.\n * ```\n *\n * ### Example\n *\n * {\\@example core/di/ts/injector_spec.ts region='InjectionToken'}\n *\n * \\@stable\n */\nexport { InjectionToken };\nfunction InjectionToken_tsickle_Closure_declarations() {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    InjectionToken.prototype.ngMetadataName;\n    /** @type {?} */\n    InjectionToken.prototype.ngInjectableDef;\n    /** @type {?} */\n    InjectionToken.prototype._desc;\n}\n//# sourceMappingURL=injection_token.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nvar ChangeDetectionStrategy = {\n    /**\n       * `OnPush` means that the change detector's mode will be initially set to `CheckOnce`.\n       */\n    OnPush: 0,\n    /**\n       * `Default` means that the change detector's mode will be initially set to `CheckAlways`.\n       */\n    Default: 1,\n};\nexport { ChangeDetectionStrategy };\nChangeDetectionStrategy[ChangeDetectionStrategy.OnPush] = \"OnPush\";\nChangeDetectionStrategy[ChangeDetectionStrategy.Default] = \"Default\";\n/** @enum {number} */\nvar ChangeDetectorStatus = {\n    /**\n       * `CheckOnce` means that after calling detectChanges the mode of the change detector\n       * will become `Checked`.\n       */\n    CheckOnce: 0,\n    /**\n       * `Checked` means that the change detector should be skipped until its mode changes to\n       * `CheckOnce`.\n       */\n    Checked: 1,\n    /**\n       * `CheckAlways` means that after calling detectChanges the mode of the change detector\n       * will remain `CheckAlways`.\n       */\n    CheckAlways: 2,\n    /**\n       * `Detached` means that the change detector sub tree is not a part of the main tree and\n       * should be skipped.\n       */\n    Detached: 3,\n    /**\n       * `Errored` means that the change detector encountered an error checking a binding\n       * or calling a directive lifecycle method and is now in an inconsistent state. Change\n       * detectors in this state will no longer detect changes.\n       */\n    Errored: 4,\n    /**\n       * `Destroyed` means that the change detector is destroyed.\n       */\n    Destroyed: 5,\n};\nexport { ChangeDetectorStatus };\nChangeDetectorStatus[ChangeDetectorStatus.CheckOnce] = \"CheckOnce\";\nChangeDetectorStatus[ChangeDetectorStatus.Checked] = \"Checked\";\nChangeDetectorStatus[ChangeDetectorStatus.CheckAlways] = \"CheckAlways\";\nChangeDetectorStatus[ChangeDetectorStatus.Detached] = \"Detached\";\nChangeDetectorStatus[ChangeDetectorStatus.Errored] = \"Errored\";\nChangeDetectorStatus[ChangeDetectorStatus.Destroyed] = \"Destroyed\";\n/**\n * @param {?} changeDetectionStrategy\n * @return {?}\n */\nexport function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {\n    return changeDetectionStrategy == null ||\n        changeDetectionStrategy === ChangeDetectionStrategy.Default;\n}\n//# sourceMappingURL=constants.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nvar ViewEncapsulation = {\n    /**\n       * Emulate `Native` scoping of styles by adding an attribute containing surrogate id to the Host\n       * Element and pre-processing the style rules provided via {@link Component#styles styles} or\n       * {@link Component#styleUrls styleUrls}, and adding the new Host Element attribute to all\n       * selectors.\n       *\n       * This is the default option.\n       */\n    Emulated: 0,\n    /**\n       * Use the native encapsulation mechanism of the renderer.\n       *\n       * For the DOM this means using [Shadow DOM](https://w3c.github.io/webcomponents/spec/shadow/) and\n       * creating a ShadowRoot for Component's Host Element.\n       */\n    Native: 1,\n    /**\n       * Don't provide any template or style encapsulation.\n       */\n    None: 2,\n};\nexport { ViewEncapsulation };\nViewEncapsulation[ViewEncapsulation.Emulated] = \"Emulated\";\nViewEncapsulation[ViewEncapsulation.Native] = \"Native\";\nViewEncapsulation[ViewEncapsulation.None] = \"None\";\n//# sourceMappingURL=view.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@whatItDoes Represents the version of Angular\n *\n * \\@stable\n */\nvar /**\n * \\@whatItDoes Represents the version of Angular\n *\n * \\@stable\n */\nVersion = /** @class */ (function () {\n    function Version(full) {\n        this.full = full;\n        this.major = full.split('.')[0];\n        this.minor = full.split('.')[1];\n        this.patch = full.split('.').slice(2).join('.');\n    }\n    return Version;\n}());\n/**\n * \\@whatItDoes Represents the version of Angular\n *\n * \\@stable\n */\nexport { Version };\nfunction Version_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Version.prototype.major;\n    /** @type {?} */\n    Version.prototype.minor;\n    /** @type {?} */\n    Version.prototype.patch;\n    /** @type {?} */\n    Version.prototype.full;\n}\n/**\n * \\@stable\n */\nexport var /** @type {?} */ VERSION = new Version('6.0.0-beta.7-21e44c6');\n//# sourceMappingURL=version.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport var /** @type {?} */ ERROR_TYPE = 'ngType';\nexport var /** @type {?} */ ERROR_DEBUG_CONTEXT = 'ngDebugContext';\nexport var /** @type {?} */ ERROR_ORIGINAL_ERROR = 'ngOriginalError';\nexport var /** @type {?} */ ERROR_LOGGER = 'ngErrorLogger';\n/**\n * @param {?} error\n * @return {?}\n */\nexport function getType(error) {\n    return (/** @type {?} */ (error))[ERROR_TYPE];\n}\n/**\n * @param {?} error\n * @return {?}\n */\nexport function getDebugContext(error) {\n    return (/** @type {?} */ (error))[ERROR_DEBUG_CONTEXT];\n}\n/**\n * @param {?} error\n * @return {?}\n */\nexport function getOriginalError(error) {\n    return (/** @type {?} */ (error))[ERROR_ORIGINAL_ERROR];\n}\n/**\n * @param {?} error\n * @return {?}\n */\nexport function getErrorLogger(error) {\n    return (/** @type {?} */ (error))[ERROR_LOGGER] || defaultErrorLogger;\n}\n/**\n * @param {?} console\n * @param {...?} values\n * @return {?}\n */\nfunction defaultErrorLogger(console) {\n    var values = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        values[_i - 1] = arguments[_i];\n    }\n    console.error.apply(console, values);\n}\n//# sourceMappingURL=errors.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ERROR_ORIGINAL_ERROR, getDebugContext, getErrorLogger, getOriginalError } from './errors';\n/**\n * \\@whatItDoes Provides a hook for centralized exception handling.\n *\n * \\@description\n *\n * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n * intercept error handling, write a custom exception handler that replaces this default as\n * appropriate for your app.\n *\n * ### Example\n *\n * ```\n * class MyErrorHandler implements ErrorHandler {\n *   handleError(error) {\n *     // do something with the exception\n *   }\n * }\n *\n * \\@NgModule({\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n * })\n * class MyModule {}\n * ```\n *\n * \\@stable\n */\nvar /**\n * \\@whatItDoes Provides a hook for centralized exception handling.\n *\n * \\@description\n *\n * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n * intercept error handling, write a custom exception handler that replaces this default as\n * appropriate for your app.\n *\n * ### Example\n *\n * ```\n * class MyErrorHandler implements ErrorHandler {\n *   handleError(error) {\n *     // do something with the exception\n *   }\n * }\n *\n * \\@NgModule({\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n * })\n * class MyModule {}\n * ```\n *\n * \\@stable\n */\nErrorHandler = /** @class */ (function () {\n    function ErrorHandler() {\n        /**\n         * \\@internal\n         */\n        this._console = console;\n    }\n    /**\n     * @param {?} error\n     * @return {?}\n     */\n    ErrorHandler.prototype.handleError = /**\n     * @param {?} error\n     * @return {?}\n     */\n    function (error) {\n        var /** @type {?} */ originalError = this._findOriginalError(error);\n        var /** @type {?} */ context = this._findContext(error);\n        // Note: Browser consoles show the place from where console.error was called.\n        // We can use this to give users additional information about the error.\n        var /** @type {?} */ errorLogger = getErrorLogger(error);\n        errorLogger(this._console, \"ERROR\", error);\n        if (originalError) {\n            errorLogger(this._console, \"ORIGINAL ERROR\", originalError);\n        }\n        if (context) {\n            errorLogger(this._console, 'ERROR CONTEXT', context);\n        }\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} error\n     * @return {?}\n     */\n    ErrorHandler.prototype._findContext = /**\n     * \\@internal\n     * @param {?} error\n     * @return {?}\n     */\n    function (error) {\n        if (error) {\n            return getDebugContext(error) ? getDebugContext(error) :\n                this._findContext(getOriginalError(error));\n        }\n        return null;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} error\n     * @return {?}\n     */\n    ErrorHandler.prototype._findOriginalError = /**\n     * \\@internal\n     * @param {?} error\n     * @return {?}\n     */\n    function (error) {\n        var /** @type {?} */ e = getOriginalError(error);\n        while (e && getOriginalError(e)) {\n            e = getOriginalError(e);\n        }\n        return e;\n    };\n    return ErrorHandler;\n}());\n/**\n * \\@whatItDoes Provides a hook for centralized exception handling.\n *\n * \\@description\n *\n * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n * intercept error handling, write a custom exception handler that replaces this default as\n * appropriate for your app.\n *\n * ### Example\n *\n * ```\n * class MyErrorHandler implements ErrorHandler {\n *   handleError(error) {\n *     // do something with the exception\n *   }\n * }\n *\n * \\@NgModule({\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n * })\n * class MyModule {}\n * ```\n *\n * \\@stable\n */\nexport { ErrorHandler };\nfunction ErrorHandler_tsickle_Closure_declarations() {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ErrorHandler.prototype._console;\n}\n/**\n * @param {?} message\n * @param {?} originalError\n * @return {?}\n */\nexport function wrappedError(message, originalError) {\n    var /** @type {?} */ msg = message + \" caused by: \" + (originalError instanceof Error ? originalError.message : originalError);\n    var /** @type {?} */ error = Error(msg);\n    (/** @type {?} */ (error))[ERROR_ORIGINAL_ERROR] = originalError;\n    return error;\n}\n//# sourceMappingURL=error_handler.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { wrappedError } from '../error_handler';\nimport { ERROR_ORIGINAL_ERROR } from '../errors';\nimport { stringify } from '../util';\n/**\n * @param {?} keys\n * @return {?}\n */\nfunction findFirstClosedCycle(keys) {\n    var /** @type {?} */ res = [];\n    for (var /** @type {?} */ i = 0; i < keys.length; ++i) {\n        if (res.indexOf(keys[i]) > -1) {\n            res.push(keys[i]);\n            return res;\n        }\n        res.push(keys[i]);\n    }\n    return res;\n}\n/**\n * @param {?} keys\n * @return {?}\n */\nfunction constructResolvingPath(keys) {\n    if (keys.length > 1) {\n        var /** @type {?} */ reversed = findFirstClosedCycle(keys.slice().reverse());\n        var /** @type {?} */ tokenStrs = reversed.map(function (k) { return stringify(k.token); });\n        return ' (' + tokenStrs.join(' -> ') + ')';\n    }\n    return '';\n}\n/**\n * @record\n */\nexport function InjectionError() { }\nfunction InjectionError_tsickle_Closure_declarations() {\n    /** @type {?} */\n    InjectionError.prototype.keys;\n    /** @type {?} */\n    InjectionError.prototype.injectors;\n    /** @type {?} */\n    InjectionError.prototype.constructResolvingMessage;\n    /** @type {?} */\n    InjectionError.prototype.addKey;\n}\n/**\n * @param {?} injector\n * @param {?} key\n * @param {?} constructResolvingMessage\n * @param {?=} originalError\n * @return {?}\n */\nfunction injectionError(injector, key, constructResolvingMessage, originalError) {\n    var /** @type {?} */ keys = [key];\n    var /** @type {?} */ errMsg = constructResolvingMessage(keys);\n    var /** @type {?} */ error = /** @type {?} */ ((originalError ? wrappedError(errMsg, originalError) : Error(errMsg)));\n    error.addKey = addKey;\n    error.keys = keys;\n    error.injectors = [injector];\n    error.constructResolvingMessage = constructResolvingMessage;\n    (/** @type {?} */ (error))[ERROR_ORIGINAL_ERROR] = originalError;\n    return error;\n}\n/**\n * @this {?}\n * @param {?} injector\n * @param {?} key\n * @return {?}\n */\nfunction addKey(injector, key) {\n    this.injectors.push(injector);\n    this.keys.push(key);\n    // Note: This updated message won't be reflected in the `.stack` property\n    this.message = this.constructResolvingMessage(this.keys);\n}\n/**\n * Thrown when trying to retrieve a dependency by key from {\\@link Injector}, but the\n * {\\@link Injector} does not have a {\\@link Provider} for the given key.\n *\n * ### Example ([live demo](http://plnkr.co/edit/vq8D3FRB9aGbnWJqtEPE?p=preview))\n *\n * ```typescript\n * class A {\n *   constructor(b:B) {}\n * }\n *\n * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n * ```\n * @param {?} injector\n * @param {?} key\n * @return {?}\n */\nexport function noProviderError(injector, key) {\n    return injectionError(injector, key, function (keys) {\n        var /** @type {?} */ first = stringify(keys[0].token);\n        return \"No provider for \" + first + \"!\" + constructResolvingPath(keys);\n    });\n}\n/**\n * Thrown when dependencies form a cycle.\n *\n * ### Example ([live demo](http://plnkr.co/edit/wYQdNos0Tzql3ei1EV9j?p=info))\n *\n * ```typescript\n * var injector = Injector.resolveAndCreate([\n *   {provide: \"one\", useFactory: (two) => \"two\", deps: [[new Inject(\"two\")]]},\n *   {provide: \"two\", useFactory: (one) => \"one\", deps: [[new Inject(\"one\")]]}\n * ]);\n *\n * expect(() => injector.get(\"one\")).toThrowError();\n * ```\n *\n * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.\n * @param {?} injector\n * @param {?} key\n * @return {?}\n */\nexport function cyclicDependencyError(injector, key) {\n    return injectionError(injector, key, function (keys) {\n        return \"Cannot instantiate cyclic dependency!\" + constructResolvingPath(keys);\n    });\n}\n/**\n * Thrown when a constructing type returns with an Error.\n *\n * The `InstantiationError` class contains the original error plus the dependency graph which caused\n * this object to be instantiated.\n *\n * ### Example ([live demo](http://plnkr.co/edit/7aWYdcqTQsP0eNqEdUAf?p=preview))\n *\n * ```typescript\n * class A {\n *   constructor() {\n *     throw new Error('message');\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([A]);\n * try {\n *   injector.get(A);\n * } catch (e) {\n *   expect(e instanceof InstantiationError).toBe(true);\n *   expect(e.originalException.message).toEqual(\"message\");\n *   expect(e.originalStack).toBeDefined();\n * }\n * ```\n * @param {?} injector\n * @param {?} originalException\n * @param {?} originalStack\n * @param {?} key\n * @return {?}\n */\nexport function instantiationError(injector, originalException, originalStack, key) {\n    return injectionError(injector, key, function (keys) {\n        var /** @type {?} */ first = stringify(keys[0].token);\n        return originalException.message + \": Error during instantiation of \" + first + \"!\" + constructResolvingPath(keys) + \".\";\n    }, originalException);\n}\n/**\n * Thrown when an object other then {\\@link Provider} (or `Type`) is passed to {\\@link Injector}\n * creation.\n *\n * ### Example ([live demo](http://plnkr.co/edit/YatCFbPAMCL0JSSQ4mvH?p=preview))\n *\n * ```typescript\n * expect(() => Injector.resolveAndCreate([\"not a type\"])).toThrowError();\n * ```\n * @param {?} provider\n * @return {?}\n */\nexport function invalidProviderError(provider) {\n    return Error(\"Invalid provider - only instances of Provider and Type are allowed, got: \" + provider);\n}\n/**\n * Thrown when the class has no annotation information.\n *\n * Lack of annotation information prevents the {\\@link Injector} from determining which dependencies\n * need to be injected into the constructor.\n *\n * ### Example ([live demo](http://plnkr.co/edit/rHnZtlNS7vJOPQ6pcVkm?p=preview))\n *\n * ```typescript\n * class A {\n *   constructor(b) {}\n * }\n *\n * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n * ```\n *\n * This error is also thrown when the class not marked with {\\@link Injectable} has parameter types.\n *\n * ```typescript\n * class B {}\n *\n * class A {\n *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.\n * }\n *\n * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();\n * ```\n * \\@stable\n * @param {?} typeOrFunc\n * @param {?} params\n * @return {?}\n */\nexport function noAnnotationError(typeOrFunc, params) {\n    var /** @type {?} */ signature = [];\n    for (var /** @type {?} */ i = 0, /** @type {?} */ ii = params.length; i < ii; i++) {\n        var /** @type {?} */ parameter = params[i];\n        if (!parameter || parameter.length == 0) {\n            signature.push('?');\n        }\n        else {\n            signature.push(parameter.map(stringify).join(' '));\n        }\n    }\n    return Error('Cannot resolve all parameters for \\'' + stringify(typeOrFunc) + '\\'(' +\n        signature.join(', ') + '). ' +\n        'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \\'' +\n        stringify(typeOrFunc) + '\\' is decorated with Injectable.');\n}\n/**\n * Thrown when getting an object by index.\n *\n * ### Example ([live demo](http://plnkr.co/edit/bRs0SX2OTQiJzqvjgl8P?p=preview))\n *\n * ```typescript\n * class A {}\n *\n * var injector = Injector.resolveAndCreate([A]);\n *\n * expect(() => injector.getAt(100)).toThrowError();\n * ```\n * \\@stable\n * @param {?} index\n * @return {?}\n */\nexport function outOfBoundsError(index) {\n    return Error(\"Index \" + index + \" is out-of-bounds.\");\n}\n/**\n * Thrown when a multi provider and a regular provider are bound to the same token.\n *\n * ### Example\n *\n * ```typescript\n * expect(() => Injector.resolveAndCreate([\n *   { provide: \"Strings\", useValue: \"string1\", multi: true},\n *   { provide: \"Strings\", useValue: \"string2\", multi: false}\n * ])).toThrowError();\n * ```\n * @param {?} provider1\n * @param {?} provider2\n * @return {?}\n */\nexport function mixingMultiProvidersWithRegularProvidersError(provider1, provider2) {\n    return Error(\"Cannot mix multi providers and regular providers, got: \" + provider1 + \" \" + provider2);\n}\n//# sourceMappingURL=reflective_errors.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { stringify } from '../util';\nimport { resolveForwardRef } from './forward_ref';\n/**\n * A unique object used for retrieving items from the {\\@link ReflectiveInjector}.\n *\n * Keys have:\n * - a system-wide unique `id`.\n * - a `token`.\n *\n * `Key` is used internally by {\\@link ReflectiveInjector} because its system-wide unique `id` allows\n * the\n * injector to store created objects in a more efficient way.\n *\n * `Key` should not be created directly. {\\@link ReflectiveInjector} creates keys automatically when\n * resolving\n * providers.\n * @deprecated No replacement\n */\nvar /**\n * A unique object used for retrieving items from the {\\@link ReflectiveInjector}.\n *\n * Keys have:\n * - a system-wide unique `id`.\n * - a `token`.\n *\n * `Key` is used internally by {\\@link ReflectiveInjector} because its system-wide unique `id` allows\n * the\n * injector to store created objects in a more efficient way.\n *\n * `Key` should not be created directly. {\\@link ReflectiveInjector} creates keys automatically when\n * resolving\n * providers.\n * @deprecated No replacement\n */\nReflectiveKey = /** @class */ (function () {\n    /**\n     * Private\n     */\n    function ReflectiveKey(token, id) {\n        this.token = token;\n        this.id = id;\n        if (!token) {\n            throw new Error('Token must be defined!');\n        }\n        this.displayName = stringify(this.token);\n    }\n    /**\n     * Retrieves a `Key` for a token.\n     */\n    /**\n     * Retrieves a `Key` for a token.\n     * @param {?} token\n     * @return {?}\n     */\n    ReflectiveKey.get = /**\n     * Retrieves a `Key` for a token.\n     * @param {?} token\n     * @return {?}\n     */\n    function (token) {\n        return _globalKeyRegistry.get(resolveForwardRef(token));\n    };\n    Object.defineProperty(ReflectiveKey, \"numberOfKeys\", {\n        /**\n         * @returns the number of keys registered in the system.\n         */\n        get: /**\n         * @return {?} the number of keys registered in the system.\n         */\n        function () { return _globalKeyRegistry.numberOfKeys; },\n        enumerable: true,\n        configurable: true\n    });\n    return ReflectiveKey;\n}());\n/**\n * A unique object used for retrieving items from the {\\@link ReflectiveInjector}.\n *\n * Keys have:\n * - a system-wide unique `id`.\n * - a `token`.\n *\n * `Key` is used internally by {\\@link ReflectiveInjector} because its system-wide unique `id` allows\n * the\n * injector to store created objects in a more efficient way.\n *\n * `Key` should not be created directly. {\\@link ReflectiveInjector} creates keys automatically when\n * resolving\n * providers.\n * @deprecated No replacement\n */\nexport { ReflectiveKey };\nfunction ReflectiveKey_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ReflectiveKey.prototype.displayName;\n    /** @type {?} */\n    ReflectiveKey.prototype.token;\n    /** @type {?} */\n    ReflectiveKey.prototype.id;\n}\nvar KeyRegistry = /** @class */ (function () {\n    function KeyRegistry() {\n        this._allKeys = new Map();\n    }\n    /**\n     * @param {?} token\n     * @return {?}\n     */\n    KeyRegistry.prototype.get = /**\n     * @param {?} token\n     * @return {?}\n     */\n    function (token) {\n        if (token instanceof ReflectiveKey)\n            return token;\n        if (this._allKeys.has(token)) {\n            return /** @type {?} */ ((this._allKeys.get(token)));\n        }\n        var /** @type {?} */ newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);\n        this._allKeys.set(token, newKey);\n        return newKey;\n    };\n    Object.defineProperty(KeyRegistry.prototype, \"numberOfKeys\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._allKeys.size; },\n        enumerable: true,\n        configurable: true\n    });\n    return KeyRegistry;\n}());\nexport { KeyRegistry };\nfunction KeyRegistry_tsickle_Closure_declarations() {\n    /** @type {?} */\n    KeyRegistry.prototype._allKeys;\n}\nvar /** @type {?} */ _globalKeyRegistry = new KeyRegistry();\n//# sourceMappingURL=reflective_key.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Provides access to reflection data about symbols. Used internally by Angular\n * to power dependency injection and compilation.\n */\nvar /**\n * Provides access to reflection data about symbols. Used internally by Angular\n * to power dependency injection and compilation.\n */\nReflector = /** @class */ (function () {\n    function Reflector(reflectionCapabilities) {\n        this.reflectionCapabilities = reflectionCapabilities;\n    }\n    /**\n     * @param {?} caps\n     * @return {?}\n     */\n    Reflector.prototype.updateCapabilities = /**\n     * @param {?} caps\n     * @return {?}\n     */\n    function (caps) { this.reflectionCapabilities = caps; };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    Reflector.prototype.factory = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) { return this.reflectionCapabilities.factory(type); };\n    /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    Reflector.prototype.parameters = /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    function (typeOrFunc) {\n        return this.reflectionCapabilities.parameters(typeOrFunc);\n    };\n    /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    Reflector.prototype.annotations = /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    function (typeOrFunc) {\n        return this.reflectionCapabilities.annotations(typeOrFunc);\n    };\n    /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    Reflector.prototype.propMetadata = /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    function (typeOrFunc) {\n        return this.reflectionCapabilities.propMetadata(typeOrFunc);\n    };\n    /**\n     * @param {?} type\n     * @param {?} lcProperty\n     * @return {?}\n     */\n    Reflector.prototype.hasLifecycleHook = /**\n     * @param {?} type\n     * @param {?} lcProperty\n     * @return {?}\n     */\n    function (type, lcProperty) {\n        return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);\n    };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    Reflector.prototype.getter = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) { return this.reflectionCapabilities.getter(name); };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    Reflector.prototype.setter = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) { return this.reflectionCapabilities.setter(name); };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    Reflector.prototype.method = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) { return this.reflectionCapabilities.method(name); };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    Reflector.prototype.importUri = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) { return this.reflectionCapabilities.importUri(type); };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    Reflector.prototype.resourceUri = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) { return this.reflectionCapabilities.resourceUri(type); };\n    /**\n     * @param {?} name\n     * @param {?} moduleUrl\n     * @param {?} members\n     * @param {?} runtime\n     * @return {?}\n     */\n    Reflector.prototype.resolveIdentifier = /**\n     * @param {?} name\n     * @param {?} moduleUrl\n     * @param {?} members\n     * @param {?} runtime\n     * @return {?}\n     */\n    function (name, moduleUrl, members, runtime) {\n        return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, members, runtime);\n    };\n    /**\n     * @param {?} identifier\n     * @param {?} name\n     * @return {?}\n     */\n    Reflector.prototype.resolveEnum = /**\n     * @param {?} identifier\n     * @param {?} name\n     * @return {?}\n     */\n    function (identifier, name) {\n        return this.reflectionCapabilities.resolveEnum(identifier, name);\n    };\n    return Reflector;\n}());\n/**\n * Provides access to reflection data about symbols. Used internally by Angular\n * to power dependency injection and compilation.\n */\nexport { Reflector };\nfunction Reflector_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Reflector.prototype.reflectionCapabilities;\n}\n//# sourceMappingURL=reflector.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { reflector } from '../reflection/reflection';\nimport { Type } from '../type';\nimport { resolveForwardRef } from './forward_ref';\nimport { InjectionToken } from './injection_token';\nimport { Inject, Optional, Self, SkipSelf } from './metadata';\nimport { invalidProviderError, mixingMultiProvidersWithRegularProvidersError, noAnnotationError } from './reflective_errors';\nimport { ReflectiveKey } from './reflective_key';\n/**\n * @record\n */\nfunction NormalizedProvider() { }\nfunction NormalizedProvider_tsickle_Closure_declarations() {\n}\n/**\n * `Dependency` is used by the framework to extend DI.\n * This is internal to Angular and should not be used directly.\n */\nvar /**\n * `Dependency` is used by the framework to extend DI.\n * This is internal to Angular and should not be used directly.\n */\nReflectiveDependency = /** @class */ (function () {\n    function ReflectiveDependency(key, optional, visibility) {\n        this.key = key;\n        this.optional = optional;\n        this.visibility = visibility;\n    }\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    ReflectiveDependency.fromKey = /**\n     * @param {?} key\n     * @return {?}\n     */\n    function (key) {\n        return new ReflectiveDependency(key, false, null);\n    };\n    return ReflectiveDependency;\n}());\n/**\n * `Dependency` is used by the framework to extend DI.\n * This is internal to Angular and should not be used directly.\n */\nexport { ReflectiveDependency };\nfunction ReflectiveDependency_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ReflectiveDependency.prototype.key;\n    /** @type {?} */\n    ReflectiveDependency.prototype.optional;\n    /** @type {?} */\n    ReflectiveDependency.prototype.visibility;\n}\nvar /** @type {?} */ _EMPTY_LIST = [];\n/**\n * An internal resolved representation of a {\\@link Provider} used by the {\\@link Injector}.\n *\n * It is usually created automatically by `Injector.resolveAndCreate`.\n *\n * It can be created manually, as follows:\n *\n * ### Example ([live demo](http://plnkr.co/edit/RfEnhh8kUEI0G3qsnIeT?p%3Dpreview&p=preview))\n *\n * ```typescript\n * var resolvedProviders = Injector.resolve([{ provide: 'message', useValue: 'Hello' }]);\n * var injector = Injector.fromResolvedProviders(resolvedProviders);\n *\n * expect(injector.get('message')).toEqual('Hello');\n * ```\n *\n * \\@experimental\n * @record\n */\nexport function ResolvedReflectiveProvider() { }\nfunction ResolvedReflectiveProvider_tsickle_Closure_declarations() {\n    /**\n     * A key, usually a `Type<any>`.\n     * @type {?}\n     */\n    ResolvedReflectiveProvider.prototype.key;\n    /**\n     * Factory function which can return an instance of an object represented by a key.\n     * @type {?}\n     */\n    ResolvedReflectiveProvider.prototype.resolvedFactories;\n    /**\n     * Indicates if the provider is a multi-provider or a regular provider.\n     * @type {?}\n     */\n    ResolvedReflectiveProvider.prototype.multiProvider;\n}\nvar ResolvedReflectiveProvider_ = /** @class */ (function () {\n    function ResolvedReflectiveProvider_(key, resolvedFactories, multiProvider) {\n        this.key = key;\n        this.resolvedFactories = resolvedFactories;\n        this.multiProvider = multiProvider;\n        this.resolvedFactory = this.resolvedFactories[0];\n    }\n    return ResolvedReflectiveProvider_;\n}());\nexport { ResolvedReflectiveProvider_ };\nfunction ResolvedReflectiveProvider__tsickle_Closure_declarations() {\n    /** @type {?} */\n    ResolvedReflectiveProvider_.prototype.resolvedFactory;\n    /** @type {?} */\n    ResolvedReflectiveProvider_.prototype.key;\n    /** @type {?} */\n    ResolvedReflectiveProvider_.prototype.resolvedFactories;\n    /** @type {?} */\n    ResolvedReflectiveProvider_.prototype.multiProvider;\n}\n/**\n * An internal resolved representation of a factory function created by resolving {\\@link\n * Provider}.\n * \\@experimental\n */\nvar /**\n * An internal resolved representation of a factory function created by resolving {\\@link\n * Provider}.\n * \\@experimental\n */\nResolvedReflectiveFactory = /** @class */ (function () {\n    function ResolvedReflectiveFactory(factory, dependencies) {\n        this.factory = factory;\n        this.dependencies = dependencies;\n    }\n    return ResolvedReflectiveFactory;\n}());\n/**\n * An internal resolved representation of a factory function created by resolving {\\@link\n * Provider}.\n * \\@experimental\n */\nexport { ResolvedReflectiveFactory };\nfunction ResolvedReflectiveFactory_tsickle_Closure_declarations() {\n    /**\n     * Factory function which can return an instance of an object represented by a key.\n     * @type {?}\n     */\n    ResolvedReflectiveFactory.prototype.factory;\n    /**\n     * Arguments (dependencies) to the `factory` function.\n     * @type {?}\n     */\n    ResolvedReflectiveFactory.prototype.dependencies;\n}\n/**\n * Resolve a single provider.\n * @param {?} provider\n * @return {?}\n */\nfunction resolveReflectiveFactory(provider) {\n    var /** @type {?} */ factoryFn;\n    var /** @type {?} */ resolvedDeps;\n    if (provider.useClass) {\n        var /** @type {?} */ useClass = resolveForwardRef(provider.useClass);\n        factoryFn = reflector.factory(useClass);\n        resolvedDeps = _dependenciesFor(useClass);\n    }\n    else if (provider.useExisting) {\n        factoryFn = function (aliasInstance) { return aliasInstance; };\n        resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];\n    }\n    else if (provider.useFactory) {\n        factoryFn = provider.useFactory;\n        resolvedDeps = constructDependencies(provider.useFactory, provider.deps);\n    }\n    else {\n        factoryFn = function () { return provider.useValue; };\n        resolvedDeps = _EMPTY_LIST;\n    }\n    return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);\n}\n/**\n * Converts the {\\@link Provider} into {\\@link ResolvedProvider}.\n *\n * {\\@link Injector} internally only uses {\\@link ResolvedProvider}, {\\@link Provider} contains\n * convenience provider syntax.\n * @param {?} provider\n * @return {?}\n */\nfunction resolveReflectiveProvider(provider) {\n    return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi || false);\n}\n/**\n * Resolve a list of Providers.\n * @param {?} providers\n * @return {?}\n */\nexport function resolveReflectiveProviders(providers) {\n    var /** @type {?} */ normalized = _normalizeProviders(providers, []);\n    var /** @type {?} */ resolved = normalized.map(resolveReflectiveProvider);\n    var /** @type {?} */ resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());\n    return Array.from(resolvedProviderMap.values());\n}\n/**\n * Merges a list of ResolvedProviders into a list where\n * each key is contained exactly once and multi providers\n * have been merged.\n * @param {?} providers\n * @param {?} normalizedProvidersMap\n * @return {?}\n */\nexport function mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {\n    for (var /** @type {?} */ i = 0; i < providers.length; i++) {\n        var /** @type {?} */ provider = providers[i];\n        var /** @type {?} */ existing = normalizedProvidersMap.get(provider.key.id);\n        if (existing) {\n            if (provider.multiProvider !== existing.multiProvider) {\n                throw mixingMultiProvidersWithRegularProvidersError(existing, provider);\n            }\n            if (provider.multiProvider) {\n                for (var /** @type {?} */ j = 0; j < provider.resolvedFactories.length; j++) {\n                    existing.resolvedFactories.push(provider.resolvedFactories[j]);\n                }\n            }\n            else {\n                normalizedProvidersMap.set(provider.key.id, provider);\n            }\n        }\n        else {\n            var /** @type {?} */ resolvedProvider = void 0;\n            if (provider.multiProvider) {\n                resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);\n            }\n            else {\n                resolvedProvider = provider;\n            }\n            normalizedProvidersMap.set(provider.key.id, resolvedProvider);\n        }\n    }\n    return normalizedProvidersMap;\n}\n/**\n * @param {?} providers\n * @param {?} res\n * @return {?}\n */\nfunction _normalizeProviders(providers, res) {\n    providers.forEach(function (b) {\n        if (b instanceof Type) {\n            res.push({ provide: b, useClass: b });\n        }\n        else if (b && typeof b == 'object' && (/** @type {?} */ (b)).provide !== undefined) {\n            res.push(/** @type {?} */ (b));\n        }\n        else if (b instanceof Array) {\n            _normalizeProviders(b, res);\n        }\n        else {\n            throw invalidProviderError(b);\n        }\n    });\n    return res;\n}\n/**\n * @param {?} typeOrFunc\n * @param {?=} dependencies\n * @return {?}\n */\nexport function constructDependencies(typeOrFunc, dependencies) {\n    if (!dependencies) {\n        return _dependenciesFor(typeOrFunc);\n    }\n    else {\n        var /** @type {?} */ params_1 = dependencies.map(function (t) { return [t]; });\n        return dependencies.map(function (t) { return _extractToken(typeOrFunc, t, params_1); });\n    }\n}\n/**\n * @param {?} typeOrFunc\n * @return {?}\n */\nfunction _dependenciesFor(typeOrFunc) {\n    var /** @type {?} */ params = reflector.parameters(typeOrFunc);\n    if (!params)\n        return [];\n    if (params.some(function (p) { return p == null; })) {\n        throw noAnnotationError(typeOrFunc, params);\n    }\n    return params.map(function (p) { return _extractToken(typeOrFunc, p, params); });\n}\n/**\n * @param {?} typeOrFunc\n * @param {?} metadata\n * @param {?} params\n * @return {?}\n */\nfunction _extractToken(typeOrFunc, metadata, params) {\n    var /** @type {?} */ token = null;\n    var /** @type {?} */ optional = false;\n    if (!Array.isArray(metadata)) {\n        if (metadata instanceof Inject) {\n            return _createDependency(metadata.token, optional, null);\n        }\n        else {\n            return _createDependency(metadata, optional, null);\n        }\n    }\n    var /** @type {?} */ visibility = null;\n    for (var /** @type {?} */ i = 0; i < metadata.length; ++i) {\n        var /** @type {?} */ paramMetadata = metadata[i];\n        if (paramMetadata instanceof Type) {\n            token = paramMetadata;\n        }\n        else if (paramMetadata instanceof Inject) {\n            token = paramMetadata.token;\n        }\n        else if (paramMetadata instanceof Optional) {\n            optional = true;\n        }\n        else if (paramMetadata instanceof Self || paramMetadata instanceof SkipSelf) {\n            visibility = paramMetadata;\n        }\n        else if (paramMetadata instanceof InjectionToken) {\n            token = paramMetadata;\n        }\n    }\n    token = resolveForwardRef(token);\n    if (token != null) {\n        return _createDependency(token, optional, visibility);\n    }\n    else {\n        throw noAnnotationError(typeOrFunc, params);\n    }\n}\n/**\n * @param {?} token\n * @param {?} optional\n * @param {?} visibility\n * @return {?}\n */\nfunction _createDependency(token, optional, visibility) {\n    return new ReflectiveDependency(ReflectiveKey.get(token), optional, visibility);\n}\n//# sourceMappingURL=reflective_provider.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injector, THROW_IF_NOT_FOUND } from './injector';\nimport { Self, SkipSelf } from './metadata';\nimport { cyclicDependencyError, instantiationError, noProviderError, outOfBoundsError } from './reflective_errors';\nimport { ReflectiveKey } from './reflective_key';\nimport { resolveReflectiveProviders } from './reflective_provider';\n// Threshold for the dynamic version\nvar /** @type {?} */ UNDEFINED = new Object();\n/**\n * A ReflectiveDependency injection container used for instantiating objects and resolving\n * dependencies.\n *\n * An `Injector` is a replacement for a `new` operator, which can automatically resolve the\n * constructor dependencies.\n *\n * In typical use, application code asks for the dependencies in the constructor and they are\n * resolved by the `Injector`.\n *\n * ### Example ([live demo](http://plnkr.co/edit/jzjec0?p=preview))\n *\n * The following example creates an `Injector` configured to create `Engine` and `Car`.\n *\n * ```typescript\n * \\@Injectable()\n * class Engine {\n * }\n *\n * \\@Injectable()\n * class Car {\n *   constructor(public engine:Engine) {}\n * }\n *\n * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n * var car = injector.get(Car);\n * expect(car instanceof Car).toBe(true);\n * expect(car.engine instanceof Engine).toBe(true);\n * ```\n *\n * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`\n * resolve all of the object's dependencies automatically.\n *\n * @deprecated from v5 - slow and brings in a lot of code, Use `Injector.create` instead.\n * @abstract\n */\nvar /**\n * A ReflectiveDependency injection container used for instantiating objects and resolving\n * dependencies.\n *\n * An `Injector` is a replacement for a `new` operator, which can automatically resolve the\n * constructor dependencies.\n *\n * In typical use, application code asks for the dependencies in the constructor and they are\n * resolved by the `Injector`.\n *\n * ### Example ([live demo](http://plnkr.co/edit/jzjec0?p=preview))\n *\n * The following example creates an `Injector` configured to create `Engine` and `Car`.\n *\n * ```typescript\n * \\@Injectable()\n * class Engine {\n * }\n *\n * \\@Injectable()\n * class Car {\n *   constructor(public engine:Engine) {}\n * }\n *\n * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n * var car = injector.get(Car);\n * expect(car instanceof Car).toBe(true);\n * expect(car.engine instanceof Engine).toBe(true);\n * ```\n *\n * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`\n * resolve all of the object's dependencies automatically.\n *\n * @deprecated from v5 - slow and brings in a lot of code, Use `Injector.create` instead.\n * @abstract\n */\nReflectiveInjector = /** @class */ (function () {\n    function ReflectiveInjector() {\n    }\n    /**\n     * Turns an array of provider definitions into an array of resolved providers.\n     *\n     * A resolution is a process of flattening multiple nested arrays and converting individual\n     * providers into an array of {@link ResolvedReflectiveProvider}s.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/AiXTHi?p=preview))\n     *\n     * ```typescript\n     * @Injectable()\n     * class Engine {\n     * }\n     *\n     * @Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\n     *\n     * expect(providers.length).toEqual(2);\n     *\n     * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);\n     * expect(providers[0].key.displayName).toBe(\"Car\");\n     * expect(providers[0].dependencies.length).toEqual(1);\n     * expect(providers[0].factory).toBeDefined();\n     *\n     * expect(providers[1].key.displayName).toBe(\"Engine\");\n     * });\n     * ```\n     *\n     * See {@link ReflectiveInjector#fromResolvedProviders fromResolvedProviders} for more info.\n     */\n    /**\n     * Turns an array of provider definitions into an array of resolved providers.\n     *\n     * A resolution is a process of flattening multiple nested arrays and converting individual\n     * providers into an array of {\\@link ResolvedReflectiveProvider}s.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/AiXTHi?p=preview))\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *\n     * \\@Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\n     *\n     * expect(providers.length).toEqual(2);\n     *\n     * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);\n     * expect(providers[0].key.displayName).toBe(\"Car\");\n     * expect(providers[0].dependencies.length).toEqual(1);\n     * expect(providers[0].factory).toBeDefined();\n     *\n     * expect(providers[1].key.displayName).toBe(\"Engine\");\n     * });\n     * ```\n     *\n     * See {\\@link ReflectiveInjector#fromResolvedProviders fromResolvedProviders} for more info.\n     * @param {?} providers\n     * @return {?}\n     */\n    ReflectiveInjector.resolve = /**\n     * Turns an array of provider definitions into an array of resolved providers.\n     *\n     * A resolution is a process of flattening multiple nested arrays and converting individual\n     * providers into an array of {\\@link ResolvedReflectiveProvider}s.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/AiXTHi?p=preview))\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *\n     * \\@Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\n     *\n     * expect(providers.length).toEqual(2);\n     *\n     * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);\n     * expect(providers[0].key.displayName).toBe(\"Car\");\n     * expect(providers[0].dependencies.length).toEqual(1);\n     * expect(providers[0].factory).toBeDefined();\n     *\n     * expect(providers[1].key.displayName).toBe(\"Engine\");\n     * });\n     * ```\n     *\n     * See {\\@link ReflectiveInjector#fromResolvedProviders fromResolvedProviders} for more info.\n     * @param {?} providers\n     * @return {?}\n     */\n    function (providers) {\n        return resolveReflectiveProviders(providers);\n    };\n    /**\n     * Resolves an array of providers and creates an injector from those providers.\n     *\n     * The passed-in providers can be an array of `Type`, {@link Provider},\n     * or a recursive array of more providers.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/ePOccA?p=preview))\n     *\n     * ```typescript\n     * @Injectable()\n     * class Engine {\n     * }\n     *\n     * @Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n     * expect(injector.get(Car) instanceof Car).toBe(true);\n     * ```\n     *\n     * This function is slower than the corresponding `fromResolvedProviders`\n     * because it needs to resolve the passed-in providers first.\n     * See {@link ReflectiveInjector#resolve resolve} and\n     * {@link ReflectiveInjector#fromResolvedProviders fromResolvedProviders}.\n     */\n    /**\n     * Resolves an array of providers and creates an injector from those providers.\n     *\n     * The passed-in providers can be an array of `Type`, {\\@link Provider},\n     * or a recursive array of more providers.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/ePOccA?p=preview))\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *\n     * \\@Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n     * expect(injector.get(Car) instanceof Car).toBe(true);\n     * ```\n     *\n     * This function is slower than the corresponding `fromResolvedProviders`\n     * because it needs to resolve the passed-in providers first.\n     * See {\\@link ReflectiveInjector#resolve resolve} and\n     * {\\@link ReflectiveInjector#fromResolvedProviders fromResolvedProviders}.\n     * @param {?} providers\n     * @param {?=} parent\n     * @return {?}\n     */\n    ReflectiveInjector.resolveAndCreate = /**\n     * Resolves an array of providers and creates an injector from those providers.\n     *\n     * The passed-in providers can be an array of `Type`, {\\@link Provider},\n     * or a recursive array of more providers.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/ePOccA?p=preview))\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *\n     * \\@Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n     * expect(injector.get(Car) instanceof Car).toBe(true);\n     * ```\n     *\n     * This function is slower than the corresponding `fromResolvedProviders`\n     * because it needs to resolve the passed-in providers first.\n     * See {\\@link ReflectiveInjector#resolve resolve} and\n     * {\\@link ReflectiveInjector#fromResolvedProviders fromResolvedProviders}.\n     * @param {?} providers\n     * @param {?=} parent\n     * @return {?}\n     */\n    function (providers, parent) {\n        var /** @type {?} */ ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n        return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);\n    };\n    /**\n     * Creates an injector from previously resolved providers.\n     *\n     * This API is the recommended way to construct injectors in performance-sensitive parts.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/KrSMci?p=preview))\n     *\n     * ```typescript\n     * @Injectable()\n     * class Engine {\n     * }\n     *\n     * @Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var providers = ReflectiveInjector.resolve([Car, Engine]);\n     * var injector = ReflectiveInjector.fromResolvedProviders(providers);\n     * expect(injector.get(Car) instanceof Car).toBe(true);\n     * ```\n     * @experimental\n     */\n    /**\n     * Creates an injector from previously resolved providers.\n     *\n     * This API is the recommended way to construct injectors in performance-sensitive parts.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/KrSMci?p=preview))\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *\n     * \\@Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var providers = ReflectiveInjector.resolve([Car, Engine]);\n     * var injector = ReflectiveInjector.fromResolvedProviders(providers);\n     * expect(injector.get(Car) instanceof Car).toBe(true);\n     * ```\n     * \\@experimental\n     * @param {?} providers\n     * @param {?=} parent\n     * @return {?}\n     */\n    ReflectiveInjector.fromResolvedProviders = /**\n     * Creates an injector from previously resolved providers.\n     *\n     * This API is the recommended way to construct injectors in performance-sensitive parts.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/KrSMci?p=preview))\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *\n     * \\@Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var providers = ReflectiveInjector.resolve([Car, Engine]);\n     * var injector = ReflectiveInjector.fromResolvedProviders(providers);\n     * expect(injector.get(Car) instanceof Car).toBe(true);\n     * ```\n     * \\@experimental\n     * @param {?} providers\n     * @param {?=} parent\n     * @return {?}\n     */\n    function (providers, parent) {\n        return new ReflectiveInjector_(providers, parent);\n    };\n    return ReflectiveInjector;\n}());\n/**\n * A ReflectiveDependency injection container used for instantiating objects and resolving\n * dependencies.\n *\n * An `Injector` is a replacement for a `new` operator, which can automatically resolve the\n * constructor dependencies.\n *\n * In typical use, application code asks for the dependencies in the constructor and they are\n * resolved by the `Injector`.\n *\n * ### Example ([live demo](http://plnkr.co/edit/jzjec0?p=preview))\n *\n * The following example creates an `Injector` configured to create `Engine` and `Car`.\n *\n * ```typescript\n * \\@Injectable()\n * class Engine {\n * }\n *\n * \\@Injectable()\n * class Car {\n *   constructor(public engine:Engine) {}\n * }\n *\n * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n * var car = injector.get(Car);\n * expect(car instanceof Car).toBe(true);\n * expect(car.engine instanceof Engine).toBe(true);\n * ```\n *\n * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`\n * resolve all of the object's dependencies automatically.\n *\n * @deprecated from v5 - slow and brings in a lot of code, Use `Injector.create` instead.\n * @abstract\n */\nexport { ReflectiveInjector };\nfunction ReflectiveInjector_tsickle_Closure_declarations() {\n    /**\n     * Parent of this injector.\n     *\n     * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n     * -->\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/eosMGo?p=preview))\n     *\n     * ```typescript\n     * var parent = ReflectiveInjector.resolveAndCreate([]);\n     * var child = parent.resolveAndCreateChild([]);\n     * expect(child.parent).toBe(parent);\n     * ```\n     * @abstract\n     * @return {?}\n     */\n    ReflectiveInjector.prototype.parent = function () { };\n    /**\n     * Resolves an array of providers and creates a child injector from those providers.\n     *\n     * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n     * -->\n     *\n     * The passed-in providers can be an array of `Type`, {\\@link Provider},\n     * or a recursive array of more providers.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/opB3T4?p=preview))\n     *\n     * ```typescript\n     * class ParentProvider {}\n     * class ChildProvider {}\n     *\n     * var parent = ReflectiveInjector.resolveAndCreate([ParentProvider]);\n     * var child = parent.resolveAndCreateChild([ChildProvider]);\n     *\n     * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);\n     * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);\n     * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));\n     * ```\n     *\n     * This function is slower than the corresponding `createChildFromResolved`\n     * because it needs to resolve the passed-in providers first.\n     * See {\\@link ReflectiveInjector#resolve resolve} and\n     * {\\@link ReflectiveInjector#createChildFromResolved createChildFromResolved}.\n     * @abstract\n     * @param {?} providers\n     * @return {?}\n     */\n    ReflectiveInjector.prototype.resolveAndCreateChild = function (providers) { };\n    /**\n     * Creates a child injector from previously resolved providers.\n     *\n     * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n     * -->\n     *\n     * This API is the recommended way to construct injectors in performance-sensitive parts.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/VhyfjN?p=preview))\n     *\n     * ```typescript\n     * class ParentProvider {}\n     * class ChildProvider {}\n     *\n     * var parentProviders = ReflectiveInjector.resolve([ParentProvider]);\n     * var childProviders = ReflectiveInjector.resolve([ChildProvider]);\n     *\n     * var parent = ReflectiveInjector.fromResolvedProviders(parentProviders);\n     * var child = parent.createChildFromResolved(childProviders);\n     *\n     * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);\n     * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);\n     * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));\n     * ```\n     * @abstract\n     * @param {?} providers\n     * @return {?}\n     */\n    ReflectiveInjector.prototype.createChildFromResolved = function (providers) { };\n    /**\n     * Resolves a provider and instantiates an object in the context of the injector.\n     *\n     * The created object does not get cached by the injector.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/yvVXoB?p=preview))\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *\n     * \\@Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var injector = ReflectiveInjector.resolveAndCreate([Engine]);\n     *\n     * var car = injector.resolveAndInstantiate(Car);\n     * expect(car.engine).toBe(injector.get(Engine));\n     * expect(car).not.toBe(injector.resolveAndInstantiate(Car));\n     * ```\n     * @abstract\n     * @param {?} provider\n     * @return {?}\n     */\n    ReflectiveInjector.prototype.resolveAndInstantiate = function (provider) { };\n    /**\n     * Instantiates an object using a resolved provider in the context of the injector.\n     *\n     * The created object does not get cached by the injector.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/ptCImQ?p=preview))\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *\n     * \\@Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var injector = ReflectiveInjector.resolveAndCreate([Engine]);\n     * var carProvider = ReflectiveInjector.resolve([Car])[0];\n     * var car = injector.instantiateResolved(carProvider);\n     * expect(car.engine).toBe(injector.get(Engine));\n     * expect(car).not.toBe(injector.instantiateResolved(carProvider));\n     * ```\n     * @abstract\n     * @param {?} provider\n     * @return {?}\n     */\n    ReflectiveInjector.prototype.instantiateResolved = function (provider) { };\n    /**\n     * @abstract\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    ReflectiveInjector.prototype.get = function (token, notFoundValue) { };\n}\nvar ReflectiveInjector_ = /** @class */ (function () {\n    /**\n     * Private\n     */\n    function ReflectiveInjector_(_providers, _parent) {\n        /**\n         * \\@internal\n         */\n        this._constructionCounter = 0;\n        this._providers = _providers;\n        this.parent = _parent || null;\n        var /** @type {?} */ len = _providers.length;\n        this.keyIds = new Array(len);\n        this.objs = new Array(len);\n        for (var /** @type {?} */ i = 0; i < len; i++) {\n            this.keyIds[i] = _providers[i].key.id;\n            this.objs[i] = UNDEFINED;\n        }\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype.get = /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    function (token, notFoundValue) {\n        if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }\n        return this._getByKey(ReflectiveKey.get(token), null, notFoundValue);\n    };\n    /**\n     * @param {?} providers\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype.resolveAndCreateChild = /**\n     * @param {?} providers\n     * @return {?}\n     */\n    function (providers) {\n        var /** @type {?} */ ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n        return this.createChildFromResolved(ResolvedReflectiveProviders);\n    };\n    /**\n     * @param {?} providers\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype.createChildFromResolved = /**\n     * @param {?} providers\n     * @return {?}\n     */\n    function (providers) {\n        var /** @type {?} */ inj = new ReflectiveInjector_(providers);\n        (/** @type {?} */ (inj)).parent = this;\n        return inj;\n    };\n    /**\n     * @param {?} provider\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype.resolveAndInstantiate = /**\n     * @param {?} provider\n     * @return {?}\n     */\n    function (provider) {\n        return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);\n    };\n    /**\n     * @param {?} provider\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype.instantiateResolved = /**\n     * @param {?} provider\n     * @return {?}\n     */\n    function (provider) {\n        return this._instantiateProvider(provider);\n    };\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype.getProviderAtIndex = /**\n     * @param {?} index\n     * @return {?}\n     */\n    function (index) {\n        if (index < 0 || index >= this._providers.length) {\n            throw outOfBoundsError(index);\n        }\n        return this._providers[index];\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} provider\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._new = /**\n     * \\@internal\n     * @param {?} provider\n     * @return {?}\n     */\n    function (provider) {\n        if (this._constructionCounter++ > this._getMaxNumberOfObjects()) {\n            throw cyclicDependencyError(this, provider.key);\n        }\n        return this._instantiateProvider(provider);\n    };\n    /**\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._getMaxNumberOfObjects = /**\n     * @return {?}\n     */\n    function () { return this.objs.length; };\n    /**\n     * @param {?} provider\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._instantiateProvider = /**\n     * @param {?} provider\n     * @return {?}\n     */\n    function (provider) {\n        if (provider.multiProvider) {\n            var /** @type {?} */ res = new Array(provider.resolvedFactories.length);\n            for (var /** @type {?} */ i = 0; i < provider.resolvedFactories.length; ++i) {\n                res[i] = this._instantiate(provider, provider.resolvedFactories[i]);\n            }\n            return res;\n        }\n        else {\n            return this._instantiate(provider, provider.resolvedFactories[0]);\n        }\n    };\n    /**\n     * @param {?} provider\n     * @param {?} ResolvedReflectiveFactory\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._instantiate = /**\n     * @param {?} provider\n     * @param {?} ResolvedReflectiveFactory\n     * @return {?}\n     */\n    function (provider, ResolvedReflectiveFactory) {\n        var _this = this;\n        var /** @type {?} */ factory = ResolvedReflectiveFactory.factory;\n        var /** @type {?} */ deps;\n        try {\n            deps =\n                ResolvedReflectiveFactory.dependencies.map(function (dep) { return _this._getByReflectiveDependency(dep); });\n        }\n        catch (/** @type {?} */ e) {\n            if (e.addKey) {\n                e.addKey(this, provider.key);\n            }\n            throw e;\n        }\n        var /** @type {?} */ obj;\n        try {\n            obj = factory.apply(void 0, deps);\n        }\n        catch (/** @type {?} */ e) {\n            throw instantiationError(this, e, e.stack, provider.key);\n        }\n        return obj;\n    };\n    /**\n     * @param {?} dep\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._getByReflectiveDependency = /**\n     * @param {?} dep\n     * @return {?}\n     */\n    function (dep) {\n        return this._getByKey(dep.key, dep.visibility, dep.optional ? null : THROW_IF_NOT_FOUND);\n    };\n    /**\n     * @param {?} key\n     * @param {?} visibility\n     * @param {?} notFoundValue\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._getByKey = /**\n     * @param {?} key\n     * @param {?} visibility\n     * @param {?} notFoundValue\n     * @return {?}\n     */\n    function (key, visibility, notFoundValue) {\n        if (key === ReflectiveInjector_.INJECTOR_KEY) {\n            return this;\n        }\n        if (visibility instanceof Self) {\n            return this._getByKeySelf(key, notFoundValue);\n        }\n        else {\n            return this._getByKeyDefault(key, notFoundValue, visibility);\n        }\n    };\n    /**\n     * @param {?} keyId\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._getObjByKeyId = /**\n     * @param {?} keyId\n     * @return {?}\n     */\n    function (keyId) {\n        for (var /** @type {?} */ i = 0; i < this.keyIds.length; i++) {\n            if (this.keyIds[i] === keyId) {\n                if (this.objs[i] === UNDEFINED) {\n                    this.objs[i] = this._new(this._providers[i]);\n                }\n                return this.objs[i];\n            }\n        }\n        return UNDEFINED;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} key\n     * @param {?} notFoundValue\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._throwOrNull = /**\n     * \\@internal\n     * @param {?} key\n     * @param {?} notFoundValue\n     * @return {?}\n     */\n    function (key, notFoundValue) {\n        if (notFoundValue !== THROW_IF_NOT_FOUND) {\n            return notFoundValue;\n        }\n        else {\n            throw noProviderError(this, key);\n        }\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} key\n     * @param {?} notFoundValue\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._getByKeySelf = /**\n     * \\@internal\n     * @param {?} key\n     * @param {?} notFoundValue\n     * @return {?}\n     */\n    function (key, notFoundValue) {\n        var /** @type {?} */ obj = this._getObjByKeyId(key.id);\n        return (obj !== UNDEFINED) ? obj : this._throwOrNull(key, notFoundValue);\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} key\n     * @param {?} notFoundValue\n     * @param {?} visibility\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._getByKeyDefault = /**\n     * \\@internal\n     * @param {?} key\n     * @param {?} notFoundValue\n     * @param {?} visibility\n     * @return {?}\n     */\n    function (key, notFoundValue, visibility) {\n        var /** @type {?} */ inj;\n        if (visibility instanceof SkipSelf) {\n            inj = this.parent;\n        }\n        else {\n            inj = this;\n        }\n        while (inj instanceof ReflectiveInjector_) {\n            var /** @type {?} */ inj_ = /** @type {?} */ (inj);\n            var /** @type {?} */ obj = inj_._getObjByKeyId(key.id);\n            if (obj !== UNDEFINED)\n                return obj;\n            inj = inj_.parent;\n        }\n        if (inj !== null) {\n            return inj.get(key.token, notFoundValue);\n        }\n        else {\n            return this._throwOrNull(key, notFoundValue);\n        }\n    };\n    Object.defineProperty(ReflectiveInjector_.prototype, \"displayName\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            var /** @type {?} */ providers = _mapProviders(this, function (b) { return ' \"' + b.key.displayName + '\" '; })\n                .join(', ');\n            return \"ReflectiveInjector(providers: [\" + providers + \"])\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype.toString = /**\n     * @return {?}\n     */\n    function () { return this.displayName; };\n    ReflectiveInjector_.INJECTOR_KEY = ReflectiveKey.get(Injector);\n    return ReflectiveInjector_;\n}());\nexport { ReflectiveInjector_ };\nfunction ReflectiveInjector__tsickle_Closure_declarations() {\n    /** @type {?} */\n    ReflectiveInjector_.INJECTOR_KEY;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ReflectiveInjector_.prototype._constructionCounter;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ReflectiveInjector_.prototype._providers;\n    /** @type {?} */\n    ReflectiveInjector_.prototype.parent;\n    /** @type {?} */\n    ReflectiveInjector_.prototype.keyIds;\n    /** @type {?} */\n    ReflectiveInjector_.prototype.objs;\n}\n/**\n * @param {?} injector\n * @param {?} fn\n * @return {?}\n */\nfunction _mapProviders(injector, fn) {\n    var /** @type {?} */ res = new Array(injector._providers.length);\n    for (var /** @type {?} */ i = 0; i < injector._providers.length; ++i) {\n        res[i] = fn(injector.getProviderAtIndex(i));\n    }\n    return res;\n}\n//# sourceMappingURL=reflective_injector.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { isPromise } from '../src/util/lang';\nimport { Inject, Injectable, InjectionToken, Optional } from './di';\n/**\n * A function that will be executed when an application is initialized.\n * \\@experimental\n */\nexport var /** @type {?} */ APP_INITIALIZER = new InjectionToken('Application Initializer');\n/**\n * A class that reflects the state of running {\\@link APP_INITIALIZER}s.\n *\n * \\@experimental\n */\nvar ApplicationInitStatus = /** @class */ (function () {\n    function ApplicationInitStatus(appInits) {\n        var _this = this;\n        this.appInits = appInits;\n        this.initialized = false;\n        this.done = false;\n        this.donePromise = new Promise(function (res, rej) {\n            _this.resolve = res;\n            _this.reject = rej;\n        });\n    }\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    ApplicationInitStatus.prototype.runInitializers = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this.initialized) {\n            return;\n        }\n        var /** @type {?} */ asyncInitPromises = [];\n        var /** @type {?} */ complete = function () {\n            (/** @type {?} */ (_this)).done = true;\n            _this.resolve();\n        };\n        if (this.appInits) {\n            for (var /** @type {?} */ i = 0; i < this.appInits.length; i++) {\n                var /** @type {?} */ initResult = this.appInits[i]();\n                if (isPromise(initResult)) {\n                    asyncInitPromises.push(initResult);\n                }\n            }\n        }\n        Promise.all(asyncInitPromises).then(function () { complete(); }).catch(function (e) { _this.reject(e); });\n        if (asyncInitPromises.length === 0) {\n            complete();\n        }\n        this.initialized = true;\n    };\n    ApplicationInitStatus.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    ApplicationInitStatus.ctorParameters = function () { return [\n        { type: Array, decorators: [{ type: Inject, args: [APP_INITIALIZER,] }, { type: Optional },] },\n    ]; };\n    return ApplicationInitStatus;\n}());\nexport { ApplicationInitStatus };\nfunction ApplicationInitStatus_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    ApplicationInitStatus.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    ApplicationInitStatus.ctorParameters;\n    /** @type {?} */\n    ApplicationInitStatus.prototype.resolve;\n    /** @type {?} */\n    ApplicationInitStatus.prototype.reject;\n    /** @type {?} */\n    ApplicationInitStatus.prototype.initialized;\n    /** @type {?} */\n    ApplicationInitStatus.prototype.donePromise;\n    /** @type {?} */\n    ApplicationInitStatus.prototype.done;\n    /** @type {?} */\n    ApplicationInitStatus.prototype.appInits;\n}\n//# sourceMappingURL=application_init.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from './di';\n/**\n * A DI Token representing a unique string id assigned to the application by Angular and used\n * primarily for prefixing application attributes and CSS styles when\n * {\\@link ViewEncapsulation#Emulated ViewEncapsulation.Emulated} is being used.\n *\n * If you need to avoid randomly generated value to be used as an application id, you can provide\n * a custom value via a DI provider <!-- TODO: provider --> configuring the root {\\@link Injector}\n * using this token.\n * \\@experimental\n */\nexport var /** @type {?} */ APP_ID = new InjectionToken('AppId');\n/**\n * @return {?}\n */\nexport function _appIdRandomProviderFactory() {\n    return \"\" + _randomChar() + _randomChar() + _randomChar();\n}\n/**\n * Providers that will generate a random APP_ID_TOKEN.\n * \\@experimental\n */\nexport var /** @type {?} */ APP_ID_RANDOM_PROVIDER = {\n    provide: APP_ID,\n    useFactory: _appIdRandomProviderFactory,\n    deps: /** @type {?} */ ([]),\n};\n/**\n * @return {?}\n */\nfunction _randomChar() {\n    return String.fromCharCode(97 + Math.floor(Math.random() * 25));\n}\n/**\n * A function that will be executed when a platform is initialized.\n * \\@experimental\n */\nexport var /** @type {?} */ PLATFORM_INITIALIZER = new InjectionToken('Platform Initializer');\n/**\n * A token that indicates an opaque platform id.\n * \\@experimental\n */\nexport var /** @type {?} */ PLATFORM_ID = new InjectionToken('Platform ID');\n/**\n * All callbacks provided via this token will be called for every component that is bootstrapped.\n * Signature of the callback:\n *\n * `(componentRef: ComponentRef) => void`.\n *\n * \\@experimental\n */\nexport var /** @type {?} */ APP_BOOTSTRAP_LISTENER = new InjectionToken('appBootstrapListener');\n/**\n * A token which indicates the root directory of the application\n * \\@experimental\n */\nexport var /** @type {?} */ PACKAGE_ROOT_URL = new InjectionToken('Application Packages Root URL');\n//# sourceMappingURL=application_tokens.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injectable } from './di';\nvar Console = /** @class */ (function () {\n    function Console() {\n    }\n    /**\n     * @param {?} message\n     * @return {?}\n     */\n    Console.prototype.log = /**\n     * @param {?} message\n     * @return {?}\n     */\n    function (message) {\n        // tslint:disable-next-line:no-console\n        console.log(message);\n    };\n    // Note: for reporting errors use `DOM.logError()` as it is platform specific\n    /**\n     * @param {?} message\n     * @return {?}\n     */\n    Console.prototype.warn = /**\n     * @param {?} message\n     * @return {?}\n     */\n    function (message) {\n        // tslint:disable-next-line:no-console\n        console.warn(message);\n    };\n    Console.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    Console.ctorParameters = function () { return []; };\n    return Console;\n}());\nexport { Console };\nfunction Console_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    Console.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    Console.ctorParameters;\n}\n//# sourceMappingURL=console.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injectable, InjectionToken } from '../di';\n/**\n * Combination of NgModuleFactory and ComponentFactorys.\n *\n * \\@experimental\n */\nvar /**\n * Combination of NgModuleFactory and ComponentFactorys.\n *\n * \\@experimental\n */\nModuleWithComponentFactories = /** @class */ (function () {\n    function ModuleWithComponentFactories(ngModuleFactory, componentFactories) {\n        this.ngModuleFactory = ngModuleFactory;\n        this.componentFactories = componentFactories;\n    }\n    return ModuleWithComponentFactories;\n}());\n/**\n * Combination of NgModuleFactory and ComponentFactorys.\n *\n * \\@experimental\n */\nexport { ModuleWithComponentFactories };\nfunction ModuleWithComponentFactories_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ModuleWithComponentFactories.prototype.ngModuleFactory;\n    /** @type {?} */\n    ModuleWithComponentFactories.prototype.componentFactories;\n}\n/**\n * @return {?}\n */\nfunction _throwError() {\n    throw new Error(\"Runtime compiler is not loaded\");\n}\n/**\n * Low-level service for running the angular compiler during runtime\n * to create {\\@link ComponentFactory}s, which\n * can later be used to create and render a Component instance.\n *\n * Each `\\@NgModule` provides an own `Compiler` to its injector,\n * that will use the directives/pipes of the ng module for compilation\n * of components.\n * \\@stable\n */\nvar Compiler = /** @class */ (function () {\n    function Compiler() {\n    }\n    /**\n     * Compiles the given NgModule and all of its components. All templates of the components listed\n     * in `entryComponents` have to be inlined.\n     */\n    /**\n     * Compiles the given NgModule and all of its components. All templates of the components listed\n     * in `entryComponents` have to be inlined.\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    Compiler.prototype.compileModuleSync = /**\n     * Compiles the given NgModule and all of its components. All templates of the components listed\n     * in `entryComponents` have to be inlined.\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    function (moduleType) { throw _throwError(); };\n    /**\n     * Compiles the given NgModule and all of its components\n     */\n    /**\n     * Compiles the given NgModule and all of its components\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    Compiler.prototype.compileModuleAsync = /**\n     * Compiles the given NgModule and all of its components\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    function (moduleType) { throw _throwError(); };\n    /**\n     * Same as {@link #compileModuleSync} but also creates ComponentFactories for all components.\n     */\n    /**\n     * Same as {\\@link #compileModuleSync} but also creates ComponentFactories for all components.\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    Compiler.prototype.compileModuleAndAllComponentsSync = /**\n     * Same as {\\@link #compileModuleSync} but also creates ComponentFactories for all components.\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    function (moduleType) {\n        throw _throwError();\n    };\n    /**\n     * Same as {@link #compileModuleAsync} but also creates ComponentFactories for all components.\n     */\n    /**\n     * Same as {\\@link #compileModuleAsync} but also creates ComponentFactories for all components.\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    Compiler.prototype.compileModuleAndAllComponentsAsync = /**\n     * Same as {\\@link #compileModuleAsync} but also creates ComponentFactories for all components.\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    function (moduleType) {\n        throw _throwError();\n    };\n    /**\n     * Clears all caches.\n     */\n    /**\n     * Clears all caches.\n     * @return {?}\n     */\n    Compiler.prototype.clearCache = /**\n     * Clears all caches.\n     * @return {?}\n     */\n    function () { };\n    /**\n     * Clears the cache for the given component/ngModule.\n     */\n    /**\n     * Clears the cache for the given component/ngModule.\n     * @param {?} type\n     * @return {?}\n     */\n    Compiler.prototype.clearCacheFor = /**\n     * Clears the cache for the given component/ngModule.\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) { };\n    Compiler.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    Compiler.ctorParameters = function () { return []; };\n    return Compiler;\n}());\nexport { Compiler };\nfunction Compiler_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    Compiler.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    Compiler.ctorParameters;\n}\n/**\n * Token to provide CompilerOptions in the platform injector.\n *\n * \\@experimental\n */\nexport var /** @type {?} */ COMPILER_OPTIONS = new InjectionToken('compilerOptions');\n/**\n * A factory for creating a Compiler\n *\n * \\@experimental\n * @abstract\n */\nvar /**\n * A factory for creating a Compiler\n *\n * \\@experimental\n * @abstract\n */\nCompilerFactory = /** @class */ (function () {\n    function CompilerFactory() {\n    }\n    return CompilerFactory;\n}());\n/**\n * A factory for creating a Compiler\n *\n * \\@experimental\n * @abstract\n */\nexport { CompilerFactory };\nfunction CompilerFactory_tsickle_Closure_declarations() {\n    /**\n     * @abstract\n     * @param {?=} options\n     * @return {?}\n     */\n    CompilerFactory.prototype.createCompiler = function (options) { };\n}\n//# sourceMappingURL=compiler.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { stringify } from '../util';\nimport { ComponentFactory } from './component_factory';\n/**\n * @param {?} component\n * @return {?}\n */\nexport function noComponentFactoryError(component) {\n    var /** @type {?} */ error = Error(\"No component factory found for \" + stringify(component) + \". Did you add it to @NgModule.entryComponents?\");\n    (/** @type {?} */ (error))[ERROR_COMPONENT] = component;\n    return error;\n}\nvar /** @type {?} */ ERROR_COMPONENT = 'ngComponent';\n/**\n * @param {?} error\n * @return {?}\n */\nexport function getComponent(error) {\n    return (/** @type {?} */ (error))[ERROR_COMPONENT];\n}\nvar _NullComponentFactoryResolver = /** @class */ (function () {\n    function _NullComponentFactoryResolver() {\n    }\n    /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    _NullComponentFactoryResolver.prototype.resolveComponentFactory = /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    function (component) {\n        throw noComponentFactoryError(component);\n    };\n    return _NullComponentFactoryResolver;\n}());\n/**\n * \\@stable\n * @abstract\n */\nvar ComponentFactoryResolver = /** @class */ (function () {\n    function ComponentFactoryResolver() {\n    }\n    ComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();\n    return ComponentFactoryResolver;\n}());\nexport { ComponentFactoryResolver };\nfunction ComponentFactoryResolver_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ComponentFactoryResolver.NULL;\n    /**\n     * @abstract\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    ComponentFactoryResolver.prototype.resolveComponentFactory = function (component) { };\n}\nvar CodegenComponentFactoryResolver = /** @class */ (function () {\n    function CodegenComponentFactoryResolver(factories, _parent, _ngModule) {\n        this._parent = _parent;\n        this._ngModule = _ngModule;\n        this._factories = new Map();\n        for (var /** @type {?} */ i = 0; i < factories.length; i++) {\n            var /** @type {?} */ factory = factories[i];\n            this._factories.set(factory.componentType, factory);\n        }\n    }\n    /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    CodegenComponentFactoryResolver.prototype.resolveComponentFactory = /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    function (component) {\n        var /** @type {?} */ factory = this._factories.get(component);\n        if (!factory && this._parent) {\n            factory = this._parent.resolveComponentFactory(component);\n        }\n        if (!factory) {\n            throw noComponentFactoryError(component);\n        }\n        return new ComponentFactoryBoundToModule(factory, this._ngModule);\n    };\n    return CodegenComponentFactoryResolver;\n}());\nexport { CodegenComponentFactoryResolver };\nfunction CodegenComponentFactoryResolver_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CodegenComponentFactoryResolver.prototype._factories;\n    /** @type {?} */\n    CodegenComponentFactoryResolver.prototype._parent;\n    /** @type {?} */\n    CodegenComponentFactoryResolver.prototype._ngModule;\n}\nvar ComponentFactoryBoundToModule = /** @class */ (function (_super) {\n    tslib_1.__extends(ComponentFactoryBoundToModule, _super);\n    function ComponentFactoryBoundToModule(factory, ngModule) {\n        var _this = _super.call(this) || this;\n        _this.factory = factory;\n        _this.ngModule = ngModule;\n        _this.selector = factory.selector;\n        _this.componentType = factory.componentType;\n        _this.ngContentSelectors = factory.ngContentSelectors;\n        _this.inputs = factory.inputs;\n        _this.outputs = factory.outputs;\n        return _this;\n    }\n    /**\n     * @param {?} injector\n     * @param {?=} projectableNodes\n     * @param {?=} rootSelectorOrNode\n     * @param {?=} ngModule\n     * @return {?}\n     */\n    ComponentFactoryBoundToModule.prototype.create = /**\n     * @param {?} injector\n     * @param {?=} projectableNodes\n     * @param {?=} rootSelectorOrNode\n     * @param {?=} ngModule\n     * @return {?}\n     */\n    function (injector, projectableNodes, rootSelectorOrNode, ngModule) {\n        return this.factory.create(injector, projectableNodes, rootSelectorOrNode, ngModule || this.ngModule);\n    };\n    return ComponentFactoryBoundToModule;\n}(ComponentFactory));\nexport { ComponentFactoryBoundToModule };\nfunction ComponentFactoryBoundToModule_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ComponentFactoryBoundToModule.prototype.selector;\n    /** @type {?} */\n    ComponentFactoryBoundToModule.prototype.componentType;\n    /** @type {?} */\n    ComponentFactoryBoundToModule.prototype.ngContentSelectors;\n    /** @type {?} */\n    ComponentFactoryBoundToModule.prototype.inputs;\n    /** @type {?} */\n    ComponentFactoryBoundToModule.prototype.outputs;\n    /** @type {?} */\n    ComponentFactoryBoundToModule.prototype.factory;\n    /** @type {?} */\n    ComponentFactoryBoundToModule.prototype.ngModule;\n}\n//# sourceMappingURL=component_factory_resolver.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { global } from '../util';\n/**\n * A scope function for the Web Tracing Framework (WTF).\n *\n * \\@experimental\n * @record\n */\nexport function WtfScopeFn() { }\nfunction WtfScopeFn_tsickle_Closure_declarations() {\n    /* TODO: handle strange member:\n    (arg0?: any, arg1?: any): any;\n    */\n}\n/**\n * @record\n */\nfunction WTF() { }\nfunction WTF_tsickle_Closure_declarations() {\n    /** @type {?} */\n    WTF.prototype.trace;\n}\n/**\n * @record\n */\nfunction Trace() { }\nfunction Trace_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Trace.prototype.events;\n    /** @type {?} */\n    Trace.prototype.leaveScope;\n    /** @type {?} */\n    Trace.prototype.beginTimeRange;\n    /** @type {?} */\n    Trace.prototype.endTimeRange;\n}\n/**\n * @record\n */\nexport function Range() { }\nfunction Range_tsickle_Closure_declarations() {\n}\n/**\n * @record\n */\nfunction Events() { }\nfunction Events_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Events.prototype.createScope;\n}\n/**\n * @record\n */\nexport function Scope() { }\nfunction Scope_tsickle_Closure_declarations() {\n    /* TODO: handle strange member:\n    (...args: any[] __* TODO #9100 __): any;\n    */\n}\nvar /** @type {?} */ trace;\nvar /** @type {?} */ events;\n/**\n * @return {?}\n */\nexport function detectWTF() {\n    var /** @type {?} */ wtf = (/** @type {?} */ (global /** TODO #9100 */) /** TODO #9100 */)['wtf'];\n    if (wtf) {\n        trace = wtf['trace'];\n        if (trace) {\n            events = trace['events'];\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * @param {?} signature\n * @param {?=} flags\n * @return {?}\n */\nexport function createScope(signature, flags) {\n    if (flags === void 0) { flags = null; }\n    return events.createScope(signature, flags);\n}\n/**\n * @template T\n * @param {?} scope\n * @param {?=} returnValue\n * @return {?}\n */\nexport function leave(scope, returnValue) {\n    trace.leaveScope(scope, returnValue);\n    return returnValue;\n}\n/**\n * @param {?} rangeType\n * @param {?} action\n * @return {?}\n */\nexport function startTimeRange(rangeType, action) {\n    return trace.beginTimeRange(rangeType, action);\n}\n/**\n * @param {?} range\n * @return {?}\n */\nexport function endTimeRange(range) {\n    trace.endTimeRange(range);\n}\n//# sourceMappingURL=wtf_impl.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs/Subscription';\n/**\n * Use by directives and components to emit custom Events.\n *\n * ### Examples\n *\n * In the following example, `Zippy` alternatively emits `open` and `close` events when its\n * title gets clicked:\n *\n * ```\n * \\@Component({\n *   selector: 'zippy',\n *   template: `\n *   <div class=\"zippy\">\n *     <div (click)=\"toggle()\">Toggle</div>\n *     <div [hidden]=\"!visible\">\n *       <ng-content></ng-content>\n *     </div>\n *  </div>`})\n * export class Zippy {\n *   visible: boolean = true;\n *   \\@Output() open: EventEmitter<any> = new EventEmitter();\n *   \\@Output() close: EventEmitter<any> = new EventEmitter();\n *\n *   toggle() {\n *     this.visible = !this.visible;\n *     if (this.visible) {\n *       this.open.emit(null);\n *     } else {\n *       this.close.emit(null);\n *     }\n *   }\n * }\n * ```\n *\n * The events payload can be accessed by the parameter `$event` on the components output event\n * handler:\n *\n * ```\n * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n * ```\n *\n * Uses Rx.Observable but provides an adapter to make it work as specified here:\n * https://github.com/jhusain/observable-spec\n *\n * Once a reference implementation of the spec is available, switch to it.\n * \\@stable\n */\nvar /**\n * Use by directives and components to emit custom Events.\n *\n * ### Examples\n *\n * In the following example, `Zippy` alternatively emits `open` and `close` events when its\n * title gets clicked:\n *\n * ```\n * \\@Component({\n *   selector: 'zippy',\n *   template: `\n *   <div class=\"zippy\">\n *     <div (click)=\"toggle()\">Toggle</div>\n *     <div [hidden]=\"!visible\">\n *       <ng-content></ng-content>\n *     </div>\n *  </div>`})\n * export class Zippy {\n *   visible: boolean = true;\n *   \\@Output() open: EventEmitter<any> = new EventEmitter();\n *   \\@Output() close: EventEmitter<any> = new EventEmitter();\n *\n *   toggle() {\n *     this.visible = !this.visible;\n *     if (this.visible) {\n *       this.open.emit(null);\n *     } else {\n *       this.close.emit(null);\n *     }\n *   }\n * }\n * ```\n *\n * The events payload can be accessed by the parameter `$event` on the components output event\n * handler:\n *\n * ```\n * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n * ```\n *\n * Uses Rx.Observable but provides an adapter to make it work as specified here:\n * https://github.com/jhusain/observable-spec\n *\n * Once a reference implementation of the spec is available, switch to it.\n * \\@stable\n */\nEventEmitter = /** @class */ (function (_super) {\n    tslib_1.__extends(EventEmitter, _super);\n    /**\n     * Creates an instance of {@link EventEmitter}, which depending on `isAsync`,\n     * delivers events synchronously or asynchronously.\n     *\n     * @param isAsync By default, events are delivered synchronously (default value: `false`).\n     * Set to `true` for asynchronous event delivery.\n     */\n    function EventEmitter(isAsync) {\n        if (isAsync === void 0) { isAsync = false; }\n        var _this = _super.call(this) || this;\n        _this.__isAsync = isAsync;\n        return _this;\n    }\n    /**\n     * @param {?=} value\n     * @return {?}\n     */\n    EventEmitter.prototype.emit = /**\n     * @param {?=} value\n     * @return {?}\n     */\n    function (value) { _super.prototype.next.call(this, value); };\n    /**\n     * @param {?=} generatorOrNext\n     * @param {?=} error\n     * @param {?=} complete\n     * @return {?}\n     */\n    EventEmitter.prototype.subscribe = /**\n     * @param {?=} generatorOrNext\n     * @param {?=} error\n     * @param {?=} complete\n     * @return {?}\n     */\n    function (generatorOrNext, error, complete) {\n        var /** @type {?} */ schedulerFn;\n        var /** @type {?} */ errorFn = function (err) { return null; };\n        var /** @type {?} */ completeFn = function () { return null; };\n        if (generatorOrNext && typeof generatorOrNext === 'object') {\n            schedulerFn = this.__isAsync ? function (value) {\n                setTimeout(function () { return generatorOrNext.next(value); });\n            } : function (value) { generatorOrNext.next(value); };\n            if (generatorOrNext.error) {\n                errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :\n                    function (err) { generatorOrNext.error(err); };\n            }\n            if (generatorOrNext.complete) {\n                completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :\n                    function () { generatorOrNext.complete(); };\n            }\n        }\n        else {\n            schedulerFn = this.__isAsync ? function (value) { setTimeout(function () { return generatorOrNext(value); }); } :\n                function (value) { generatorOrNext(value); };\n            if (error) {\n                errorFn =\n                    this.__isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };\n            }\n            if (complete) {\n                completeFn =\n                    this.__isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };\n            }\n        }\n        var /** @type {?} */ sink = _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);\n        if (generatorOrNext instanceof Subscription) {\n            generatorOrNext.add(sink);\n        }\n        return sink;\n    };\n    return EventEmitter;\n}(Subject));\n/**\n * Use by directives and components to emit custom Events.\n *\n * ### Examples\n *\n * In the following example, `Zippy` alternatively emits `open` and `close` events when its\n * title gets clicked:\n *\n * ```\n * \\@Component({\n *   selector: 'zippy',\n *   template: `\n *   <div class=\"zippy\">\n *     <div (click)=\"toggle()\">Toggle</div>\n *     <div [hidden]=\"!visible\">\n *       <ng-content></ng-content>\n *     </div>\n *  </div>`})\n * export class Zippy {\n *   visible: boolean = true;\n *   \\@Output() open: EventEmitter<any> = new EventEmitter();\n *   \\@Output() close: EventEmitter<any> = new EventEmitter();\n *\n *   toggle() {\n *     this.visible = !this.visible;\n *     if (this.visible) {\n *       this.open.emit(null);\n *     } else {\n *       this.close.emit(null);\n *     }\n *   }\n * }\n * ```\n *\n * The events payload can be accessed by the parameter `$event` on the components output event\n * handler:\n *\n * ```\n * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n * ```\n *\n * Uses Rx.Observable but provides an adapter to make it work as specified here:\n * https://github.com/jhusain/observable-spec\n *\n * Once a reference implementation of the spec is available, switch to it.\n * \\@stable\n */\nexport { EventEmitter };\nfunction EventEmitter_tsickle_Closure_declarations() {\n    /** @type {?} */\n    EventEmitter.prototype.__isAsync;\n}\n//# sourceMappingURL=event_emitter.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { EventEmitter } from '../event_emitter';\n/**\n * An injectable service for executing work inside or outside of the Angular zone.\n *\n * The most common use of this service is to optimize performance when starting a work consisting of\n * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\n * Angular. Such tasks can be kicked off via {\\@link #runOutsideAngular} and if needed, these tasks\n * can reenter the Angular zone via {\\@link #run}.\n *\n * <!-- TODO: add/fix links to:\n *   - docs explaining zones and the use of zones in Angular and change-detection\n *   - link to runOutsideAngular/run (throughout this file!)\n *   -->\n *\n * ### Example\n *\n * ```\n * import {Component, NgZone} from '\\@angular/core';\n * import {NgIf} from '\\@angular/common';\n *\n * \\@Component({\n *   selector: 'ng-zone-demo',\n *   template: `\n *     <h2>Demo: NgZone</h2>\n *\n *     <p>Progress: {{progress}}%</p>\n *     <p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!</p>\n *\n *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\n *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\n *   `,\n * })\n * export class NgZoneDemo {\n *   progress: number = 0;\n *   label: string;\n *\n *   constructor(private _ngZone: NgZone) {}\n *\n *   // Loop inside the Angular zone\n *   // so the UI DOES refresh after each setTimeout cycle\n *   processWithinAngularZone() {\n *     this.label = 'inside';\n *     this.progress = 0;\n *     this._increaseProgress(() => console.log('Inside Done!'));\n *   }\n *\n *   // Loop outside of the Angular zone\n *   // so the UI DOES NOT refresh after each setTimeout cycle\n *   processOutsideOfAngularZone() {\n *     this.label = 'outside';\n *     this.progress = 0;\n *     this._ngZone.runOutsideAngular(() => {\n *       this._increaseProgress(() => {\n *         // reenter the Angular zone and display done\n *         this._ngZone.run(() => { console.log('Outside Done!'); });\n *       });\n *     });\n *   }\n *\n *   _increaseProgress(doneCallback: () => void) {\n *     this.progress += 1;\n *     console.log(`Current progress: ${this.progress}%`);\n *\n *     if (this.progress < 100) {\n *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);\n *     } else {\n *       doneCallback();\n *     }\n *   }\n * }\n * ```\n *\n * \\@experimental\n */\nvar /**\n * An injectable service for executing work inside or outside of the Angular zone.\n *\n * The most common use of this service is to optimize performance when starting a work consisting of\n * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\n * Angular. Such tasks can be kicked off via {\\@link #runOutsideAngular} and if needed, these tasks\n * can reenter the Angular zone via {\\@link #run}.\n *\n * <!-- TODO: add/fix links to:\n *   - docs explaining zones and the use of zones in Angular and change-detection\n *   - link to runOutsideAngular/run (throughout this file!)\n *   -->\n *\n * ### Example\n *\n * ```\n * import {Component, NgZone} from '\\@angular/core';\n * import {NgIf} from '\\@angular/common';\n *\n * \\@Component({\n *   selector: 'ng-zone-demo',\n *   template: `\n *     <h2>Demo: NgZone</h2>\n *\n *     <p>Progress: {{progress}}%</p>\n *     <p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!</p>\n *\n *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\n *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\n *   `,\n * })\n * export class NgZoneDemo {\n *   progress: number = 0;\n *   label: string;\n *\n *   constructor(private _ngZone: NgZone) {}\n *\n *   // Loop inside the Angular zone\n *   // so the UI DOES refresh after each setTimeout cycle\n *   processWithinAngularZone() {\n *     this.label = 'inside';\n *     this.progress = 0;\n *     this._increaseProgress(() => console.log('Inside Done!'));\n *   }\n *\n *   // Loop outside of the Angular zone\n *   // so the UI DOES NOT refresh after each setTimeout cycle\n *   processOutsideOfAngularZone() {\n *     this.label = 'outside';\n *     this.progress = 0;\n *     this._ngZone.runOutsideAngular(() => {\n *       this._increaseProgress(() => {\n *         // reenter the Angular zone and display done\n *         this._ngZone.run(() => { console.log('Outside Done!'); });\n *       });\n *     });\n *   }\n *\n *   _increaseProgress(doneCallback: () => void) {\n *     this.progress += 1;\n *     console.log(`Current progress: ${this.progress}%`);\n *\n *     if (this.progress < 100) {\n *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);\n *     } else {\n *       doneCallback();\n *     }\n *   }\n * }\n * ```\n *\n * \\@experimental\n */\nNgZone = /** @class */ (function () {\n    function NgZone(_a) {\n        var _b = _a.enableLongStackTrace, enableLongStackTrace = _b === void 0 ? false : _b;\n        this.hasPendingMicrotasks = false;\n        this.hasPendingMacrotasks = false;\n        /**\n         * Whether there are no outstanding microtasks or macrotasks.\n         */\n        this.isStable = true;\n        /**\n         * Notifies when code enters Angular Zone. This gets fired first on VM Turn.\n         */\n        this.onUnstable = new EventEmitter(false);\n        /**\n         * Notifies when there is no more microtasks enqueued in the current VM Turn.\n         * This is a hint for Angular to do change detection, which may enqueue more microtasks.\n         * For this reason this event can fire multiple times per VM Turn.\n         */\n        this.onMicrotaskEmpty = new EventEmitter(false);\n        /**\n         * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which\n         * implies we are about to relinquish VM turn.\n         * This event gets called just once.\n         */\n        this.onStable = new EventEmitter(false);\n        /**\n         * Notifies that an error has been delivered.\n         */\n        this.onError = new EventEmitter(false);\n        if (typeof Zone == 'undefined') {\n            throw new Error(\"In this configuration Angular requires Zone.js\");\n        }\n        Zone.assertZonePatched();\n        var /** @type {?} */ self = /** @type {?} */ ((this));\n        self._nesting = 0;\n        self._outer = self._inner = Zone.current;\n        if ((/** @type {?} */ (Zone))['wtfZoneSpec']) {\n            self._inner = self._inner.fork((/** @type {?} */ (Zone))['wtfZoneSpec']);\n        }\n        if (enableLongStackTrace && (/** @type {?} */ (Zone))['longStackTraceZoneSpec']) {\n            self._inner = self._inner.fork((/** @type {?} */ (Zone))['longStackTraceZoneSpec']);\n        }\n        forkInnerZoneWithAngularBehavior(self);\n    }\n    /**\n     * @return {?}\n     */\n    NgZone.isInAngularZone = /**\n     * @return {?}\n     */\n    function () { return Zone.current.get('isAngularZone') === true; };\n    /**\n     * @return {?}\n     */\n    NgZone.assertInAngularZone = /**\n     * @return {?}\n     */\n    function () {\n        if (!NgZone.isInAngularZone()) {\n            throw new Error('Expected to be in Angular Zone, but it is not!');\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgZone.assertNotInAngularZone = /**\n     * @return {?}\n     */\n    function () {\n        if (NgZone.isInAngularZone()) {\n            throw new Error('Expected to not be in Angular Zone, but it is!');\n        }\n    };\n    /**\n     * Executes the `fn` function synchronously within the Angular zone and returns value returned by\n     * the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     */\n    /**\n     * Executes the `fn` function synchronously within the Angular zone and returns value returned by\n     * the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {\\@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     * @template T\n     * @param {?} fn\n     * @param {?=} applyThis\n     * @param {?=} applyArgs\n     * @return {?}\n     */\n    NgZone.prototype.run = /**\n     * Executes the `fn` function synchronously within the Angular zone and returns value returned by\n     * the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {\\@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     * @template T\n     * @param {?} fn\n     * @param {?=} applyThis\n     * @param {?=} applyArgs\n     * @return {?}\n     */\n    function (fn, applyThis, applyArgs) {\n        return /** @type {?} */ ((/** @type {?} */ ((this)))._inner.run(fn, applyThis, applyArgs));\n    };\n    /**\n     * Executes the `fn` function synchronously within the Angular zone as a task and returns value\n     * returned by the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     */\n    /**\n     * Executes the `fn` function synchronously within the Angular zone as a task and returns value\n     * returned by the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {\\@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     * @template T\n     * @param {?} fn\n     * @param {?=} applyThis\n     * @param {?=} applyArgs\n     * @param {?=} name\n     * @return {?}\n     */\n    NgZone.prototype.runTask = /**\n     * Executes the `fn` function synchronously within the Angular zone as a task and returns value\n     * returned by the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {\\@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     * @template T\n     * @param {?} fn\n     * @param {?=} applyThis\n     * @param {?=} applyArgs\n     * @param {?=} name\n     * @return {?}\n     */\n    function (fn, applyThis, applyArgs, name) {\n        var /** @type {?} */ zone = (/** @type {?} */ ((this)))._inner;\n        var /** @type {?} */ task = zone.scheduleEventTask('NgZoneEvent: ' + name, fn, EMPTY_PAYLOAD, noop, noop);\n        try {\n            return /** @type {?} */ (zone.runTask(task, applyThis, applyArgs));\n        }\n        finally {\n            zone.cancelTask(task);\n        }\n    };\n    /**\n     * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\n     * rethrown.\n     */\n    /**\n     * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\n     * rethrown.\n     * @template T\n     * @param {?} fn\n     * @param {?=} applyThis\n     * @param {?=} applyArgs\n     * @return {?}\n     */\n    NgZone.prototype.runGuarded = /**\n     * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\n     * rethrown.\n     * @template T\n     * @param {?} fn\n     * @param {?=} applyThis\n     * @param {?=} applyArgs\n     * @return {?}\n     */\n    function (fn, applyThis, applyArgs) {\n        return /** @type {?} */ ((/** @type {?} */ ((this)))._inner.runGuarded(fn, applyThis, applyArgs));\n    };\n    /**\n     * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\n     * the function.\n     *\n     * Running functions via {@link #runOutsideAngular} allows you to escape Angular's zone and do\n     * work that\n     * doesn't trigger Angular change-detection or is subject to Angular's error handling.\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * outside of the Angular zone.\n     *\n     * Use {@link #run} to reenter the Angular zone and do work that updates the application model.\n     */\n    /**\n     * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\n     * the function.\n     *\n     * Running functions via {\\@link #runOutsideAngular} allows you to escape Angular's zone and do\n     * work that\n     * doesn't trigger Angular change-detection or is subject to Angular's error handling.\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * outside of the Angular zone.\n     *\n     * Use {\\@link #run} to reenter the Angular zone and do work that updates the application model.\n     * @template T\n     * @param {?} fn\n     * @return {?}\n     */\n    NgZone.prototype.runOutsideAngular = /**\n     * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\n     * the function.\n     *\n     * Running functions via {\\@link #runOutsideAngular} allows you to escape Angular's zone and do\n     * work that\n     * doesn't trigger Angular change-detection or is subject to Angular's error handling.\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * outside of the Angular zone.\n     *\n     * Use {\\@link #run} to reenter the Angular zone and do work that updates the application model.\n     * @template T\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        return /** @type {?} */ ((/** @type {?} */ ((this)))._outer.run(fn));\n    };\n    return NgZone;\n}());\n/**\n * An injectable service for executing work inside or outside of the Angular zone.\n *\n * The most common use of this service is to optimize performance when starting a work consisting of\n * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\n * Angular. Such tasks can be kicked off via {\\@link #runOutsideAngular} and if needed, these tasks\n * can reenter the Angular zone via {\\@link #run}.\n *\n * <!-- TODO: add/fix links to:\n *   - docs explaining zones and the use of zones in Angular and change-detection\n *   - link to runOutsideAngular/run (throughout this file!)\n *   -->\n *\n * ### Example\n *\n * ```\n * import {Component, NgZone} from '\\@angular/core';\n * import {NgIf} from '\\@angular/common';\n *\n * \\@Component({\n *   selector: 'ng-zone-demo',\n *   template: `\n *     <h2>Demo: NgZone</h2>\n *\n *     <p>Progress: {{progress}}%</p>\n *     <p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!</p>\n *\n *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\n *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\n *   `,\n * })\n * export class NgZoneDemo {\n *   progress: number = 0;\n *   label: string;\n *\n *   constructor(private _ngZone: NgZone) {}\n *\n *   // Loop inside the Angular zone\n *   // so the UI DOES refresh after each setTimeout cycle\n *   processWithinAngularZone() {\n *     this.label = 'inside';\n *     this.progress = 0;\n *     this._increaseProgress(() => console.log('Inside Done!'));\n *   }\n *\n *   // Loop outside of the Angular zone\n *   // so the UI DOES NOT refresh after each setTimeout cycle\n *   processOutsideOfAngularZone() {\n *     this.label = 'outside';\n *     this.progress = 0;\n *     this._ngZone.runOutsideAngular(() => {\n *       this._increaseProgress(() => {\n *         // reenter the Angular zone and display done\n *         this._ngZone.run(() => { console.log('Outside Done!'); });\n *       });\n *     });\n *   }\n *\n *   _increaseProgress(doneCallback: () => void) {\n *     this.progress += 1;\n *     console.log(`Current progress: ${this.progress}%`);\n *\n *     if (this.progress < 100) {\n *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);\n *     } else {\n *       doneCallback();\n *     }\n *   }\n * }\n * ```\n *\n * \\@experimental\n */\nexport { NgZone };\nfunction NgZone_tsickle_Closure_declarations() {\n    /** @type {?} */\n    NgZone.prototype.hasPendingMicrotasks;\n    /** @type {?} */\n    NgZone.prototype.hasPendingMacrotasks;\n    /**\n     * Whether there are no outstanding microtasks or macrotasks.\n     * @type {?}\n     */\n    NgZone.prototype.isStable;\n    /**\n     * Notifies when code enters Angular Zone. This gets fired first on VM Turn.\n     * @type {?}\n     */\n    NgZone.prototype.onUnstable;\n    /**\n     * Notifies when there is no more microtasks enqueued in the current VM Turn.\n     * This is a hint for Angular to do change detection, which may enqueue more microtasks.\n     * For this reason this event can fire multiple times per VM Turn.\n     * @type {?}\n     */\n    NgZone.prototype.onMicrotaskEmpty;\n    /**\n     * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which\n     * implies we are about to relinquish VM turn.\n     * This event gets called just once.\n     * @type {?}\n     */\n    NgZone.prototype.onStable;\n    /**\n     * Notifies that an error has been delivered.\n     * @type {?}\n     */\n    NgZone.prototype.onError;\n}\n/**\n * @return {?}\n */\nfunction noop() { }\nvar /** @type {?} */ EMPTY_PAYLOAD = {};\n/**\n * @record\n */\nfunction NgZonePrivate() { }\nfunction NgZonePrivate_tsickle_Closure_declarations() {\n    /** @type {?} */\n    NgZonePrivate.prototype._outer;\n    /** @type {?} */\n    NgZonePrivate.prototype._inner;\n    /** @type {?} */\n    NgZonePrivate.prototype._nesting;\n    /** @type {?} */\n    NgZonePrivate.prototype.hasPendingMicrotasks;\n    /** @type {?} */\n    NgZonePrivate.prototype.hasPendingMacrotasks;\n    /** @type {?} */\n    NgZonePrivate.prototype.isStable;\n}\n/**\n * @param {?} zone\n * @return {?}\n */\nfunction checkStable(zone) {\n    if (zone._nesting == 0 && !zone.hasPendingMicrotasks && !zone.isStable) {\n        try {\n            zone._nesting++;\n            zone.onMicrotaskEmpty.emit(null);\n        }\n        finally {\n            zone._nesting--;\n            if (!zone.hasPendingMicrotasks) {\n                try {\n                    zone.runOutsideAngular(function () { return zone.onStable.emit(null); });\n                }\n                finally {\n                    zone.isStable = true;\n                }\n            }\n        }\n    }\n}\n/**\n * @param {?} zone\n * @return {?}\n */\nfunction forkInnerZoneWithAngularBehavior(zone) {\n    zone._inner = zone._inner.fork({\n        name: 'angular',\n        properties: /** @type {?} */ ({ 'isAngularZone': true }),\n        onInvokeTask: function (delegate, current, target, task, applyThis, applyArgs) {\n            try {\n                onEnter(zone);\n                return delegate.invokeTask(target, task, applyThis, applyArgs);\n            }\n            finally {\n                onLeave(zone);\n            }\n        },\n        onInvoke: function (delegate, current, target, callback, applyThis, applyArgs, source) {\n            try {\n                onEnter(zone);\n                return delegate.invoke(target, callback, applyThis, applyArgs, source);\n            }\n            finally {\n                onLeave(zone);\n            }\n        },\n        onHasTask: function (delegate, current, target, hasTaskState) {\n            delegate.hasTask(target, hasTaskState);\n            if (current === target) {\n                // We are only interested in hasTask events which originate from our zone\n                // (A child hasTask event is not interesting to us)\n                if (hasTaskState.change == 'microTask') {\n                    zone.hasPendingMicrotasks = hasTaskState.microTask;\n                    checkStable(zone);\n                }\n                else if (hasTaskState.change == 'macroTask') {\n                    zone.hasPendingMacrotasks = hasTaskState.macroTask;\n                }\n            }\n        },\n        onHandleError: function (delegate, current, target, error) {\n            delegate.handleError(target, error);\n            zone.runOutsideAngular(function () { return zone.onError.emit(error); });\n            return false;\n        }\n    });\n}\n/**\n * @param {?} zone\n * @return {?}\n */\nfunction onEnter(zone) {\n    zone._nesting++;\n    if (zone.isStable) {\n        zone.isStable = false;\n        zone.onUnstable.emit(null);\n    }\n}\n/**\n * @param {?} zone\n * @return {?}\n */\nfunction onLeave(zone) {\n    zone._nesting--;\n    checkStable(zone);\n}\n/**\n * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls\n * to framework to perform rendering.\n */\nvar /**\n * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls\n * to framework to perform rendering.\n */\nNoopNgZone = /** @class */ (function () {\n    function NoopNgZone() {\n        this.hasPendingMicrotasks = false;\n        this.hasPendingMacrotasks = false;\n        this.isStable = true;\n        this.onUnstable = new EventEmitter();\n        this.onMicrotaskEmpty = new EventEmitter();\n        this.onStable = new EventEmitter();\n        this.onError = new EventEmitter();\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NoopNgZone.prototype.run = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { return fn(); };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NoopNgZone.prototype.runGuarded = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { return fn(); };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NoopNgZone.prototype.runOutsideAngular = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { return fn(); };\n    /**\n     * @template T\n     * @param {?} fn\n     * @return {?}\n     */\n    NoopNgZone.prototype.runTask = /**\n     * @template T\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { return fn(); };\n    return NoopNgZone;\n}());\n/**\n * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls\n * to framework to perform rendering.\n */\nexport { NoopNgZone };\nfunction NoopNgZone_tsickle_Closure_declarations() {\n    /** @type {?} */\n    NoopNgZone.prototype.hasPendingMicrotasks;\n    /** @type {?} */\n    NoopNgZone.prototype.hasPendingMacrotasks;\n    /** @type {?} */\n    NoopNgZone.prototype.isStable;\n    /** @type {?} */\n    NoopNgZone.prototype.onUnstable;\n    /** @type {?} */\n    NoopNgZone.prototype.onMicrotaskEmpty;\n    /** @type {?} */\n    NoopNgZone.prototype.onStable;\n    /** @type {?} */\n    NoopNgZone.prototype.onError;\n}\n//# sourceMappingURL=ng_zone.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injectable } from '../di';\nimport { scheduleMicroTask } from '../util';\nimport { NgZone } from '../zone/ng_zone';\n/**\n * The Testability service provides testing hooks that can be accessed from\n * the browser and by services such as Protractor. Each bootstrapped Angular\n * application on the page will have an instance of Testability.\n * \\@experimental\n */\nvar Testability = /** @class */ (function () {\n    function Testability(_ngZone) {\n        this._ngZone = _ngZone;\n        /**\n         * \\@internal\n         */\n        this._pendingCount = 0;\n        /**\n         * \\@internal\n         */\n        this._isZoneStable = true;\n        /**\n         * Whether any work was done since the last 'whenStable' callback. This is\n         * useful to detect if this could have potentially destabilized another\n         * component while it is stabilizing.\n         * \\@internal\n         */\n        this._didWork = false;\n        /**\n         * \\@internal\n         */\n        this._callbacks = [];\n        this._watchAngularEvents();\n    }\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    Testability.prototype._watchAngularEvents = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._ngZone.onUnstable.subscribe({\n            next: function () {\n                _this._didWork = true;\n                _this._isZoneStable = false;\n            }\n        });\n        this._ngZone.runOutsideAngular(function () {\n            _this._ngZone.onStable.subscribe({\n                next: function () {\n                    NgZone.assertNotInAngularZone();\n                    scheduleMicroTask(function () {\n                        _this._isZoneStable = true;\n                        _this._runCallbacksIfReady();\n                    });\n                }\n            });\n        });\n    };\n    /**\n     * Increases the number of pending request\n     */\n    /**\n     * Increases the number of pending request\n     * @return {?}\n     */\n    Testability.prototype.increasePendingRequestCount = /**\n     * Increases the number of pending request\n     * @return {?}\n     */\n    function () {\n        this._pendingCount += 1;\n        this._didWork = true;\n        return this._pendingCount;\n    };\n    /**\n     * Decreases the number of pending request\n     */\n    /**\n     * Decreases the number of pending request\n     * @return {?}\n     */\n    Testability.prototype.decreasePendingRequestCount = /**\n     * Decreases the number of pending request\n     * @return {?}\n     */\n    function () {\n        this._pendingCount -= 1;\n        if (this._pendingCount < 0) {\n            throw new Error('pending async requests below zero');\n        }\n        this._runCallbacksIfReady();\n        return this._pendingCount;\n    };\n    /**\n     * Whether an associated application is stable\n     */\n    /**\n     * Whether an associated application is stable\n     * @return {?}\n     */\n    Testability.prototype.isStable = /**\n     * Whether an associated application is stable\n     * @return {?}\n     */\n    function () {\n        return this._isZoneStable && this._pendingCount == 0 && !this._ngZone.hasPendingMacrotasks;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    Testability.prototype._runCallbacksIfReady = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this.isStable()) {\n            // Schedules the call backs in a new frame so that it is always async.\n            scheduleMicroTask(function () {\n                while (_this._callbacks.length !== 0) {\n                    (/** @type {?} */ ((_this._callbacks.pop())))(_this._didWork);\n                }\n                _this._didWork = false;\n            });\n        }\n        else {\n            // Not Ready\n            this._didWork = true;\n        }\n    };\n    /**\n     * Run callback when the application is stable\n     * @param callback function to be called after the application is stable\n     */\n    /**\n     * Run callback when the application is stable\n     * @param {?} callback function to be called after the application is stable\n     * @return {?}\n     */\n    Testability.prototype.whenStable = /**\n     * Run callback when the application is stable\n     * @param {?} callback function to be called after the application is stable\n     * @return {?}\n     */\n    function (callback) {\n        this._callbacks.push(callback);\n        this._runCallbacksIfReady();\n    };\n    /**\n     * Get the number of pending requests\n     */\n    /**\n     * Get the number of pending requests\n     * @return {?}\n     */\n    Testability.prototype.getPendingRequestCount = /**\n     * Get the number of pending requests\n     * @return {?}\n     */\n    function () { return this._pendingCount; };\n    /**\n     * Find providers by name\n     * @param using The root element to search from\n     * @param provider The name of binding variable\n     * @param exactMatch Whether using exactMatch\n     */\n    /**\n     * Find providers by name\n     * @param {?} using The root element to search from\n     * @param {?} provider The name of binding variable\n     * @param {?} exactMatch Whether using exactMatch\n     * @return {?}\n     */\n    Testability.prototype.findProviders = /**\n     * Find providers by name\n     * @param {?} using The root element to search from\n     * @param {?} provider The name of binding variable\n     * @param {?} exactMatch Whether using exactMatch\n     * @return {?}\n     */\n    function (using, provider, exactMatch) {\n        // TODO(juliemr): implement.\n        return [];\n    };\n    Testability.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    Testability.ctorParameters = function () { return [\n        { type: NgZone, },\n    ]; };\n    return Testability;\n}());\nexport { Testability };\nfunction Testability_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    Testability.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    Testability.ctorParameters;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    Testability.prototype._pendingCount;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    Testability.prototype._isZoneStable;\n    /**\n     * Whether any work was done since the last 'whenStable' callback. This is\n     * useful to detect if this could have potentially destabilized another\n     * component while it is stabilizing.\n     * \\@internal\n     * @type {?}\n     */\n    Testability.prototype._didWork;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    Testability.prototype._callbacks;\n    /** @type {?} */\n    Testability.prototype._ngZone;\n}\n/**\n * A global registry of {\\@link Testability} instances for specific elements.\n * \\@experimental\n */\nvar TestabilityRegistry = /** @class */ (function () {\n    function TestabilityRegistry() {\n        /**\n         * \\@internal\n         */\n        this._applications = new Map();\n        _testabilityGetter.addToWindow(this);\n    }\n    /**\n     * Registers an application with a testability hook so that it can be tracked\n     * @param token token of application, root element\n     * @param testability Testability hook\n     */\n    /**\n     * Registers an application with a testability hook so that it can be tracked\n     * @param {?} token token of application, root element\n     * @param {?} testability Testability hook\n     * @return {?}\n     */\n    TestabilityRegistry.prototype.registerApplication = /**\n     * Registers an application with a testability hook so that it can be tracked\n     * @param {?} token token of application, root element\n     * @param {?} testability Testability hook\n     * @return {?}\n     */\n    function (token, testability) {\n        this._applications.set(token, testability);\n    };\n    /**\n     * Unregisters an application.\n     * @param token token of application, root element\n     */\n    /**\n     * Unregisters an application.\n     * @param {?} token token of application, root element\n     * @return {?}\n     */\n    TestabilityRegistry.prototype.unregisterApplication = /**\n     * Unregisters an application.\n     * @param {?} token token of application, root element\n     * @return {?}\n     */\n    function (token) { this._applications.delete(token); };\n    /**\n     * Unregisters all applications\n     */\n    /**\n     * Unregisters all applications\n     * @return {?}\n     */\n    TestabilityRegistry.prototype.unregisterAllApplications = /**\n     * Unregisters all applications\n     * @return {?}\n     */\n    function () { this._applications.clear(); };\n    /**\n     * Get a testability hook associated with the application\n     * @param elem root element\n     */\n    /**\n     * Get a testability hook associated with the application\n     * @param {?} elem root element\n     * @return {?}\n     */\n    TestabilityRegistry.prototype.getTestability = /**\n     * Get a testability hook associated with the application\n     * @param {?} elem root element\n     * @return {?}\n     */\n    function (elem) { return this._applications.get(elem) || null; };\n    /**\n     * Get all registered testabilities\n     */\n    /**\n     * Get all registered testabilities\n     * @return {?}\n     */\n    TestabilityRegistry.prototype.getAllTestabilities = /**\n     * Get all registered testabilities\n     * @return {?}\n     */\n    function () { return Array.from(this._applications.values()); };\n    /**\n     * Get all registered applications(root elements)\n     */\n    /**\n     * Get all registered applications(root elements)\n     * @return {?}\n     */\n    TestabilityRegistry.prototype.getAllRootElements = /**\n     * Get all registered applications(root elements)\n     * @return {?}\n     */\n    function () { return Array.from(this._applications.keys()); };\n    /**\n     * Find testability of a node in the Tree\n     * @param elem node\n     * @param findInAncestors whether finding testability in ancestors if testability was not found in\n     * current node\n     */\n    /**\n     * Find testability of a node in the Tree\n     * @param {?} elem node\n     * @param {?=} findInAncestors whether finding testability in ancestors if testability was not found in\n     * current node\n     * @return {?}\n     */\n    TestabilityRegistry.prototype.findTestabilityInTree = /**\n     * Find testability of a node in the Tree\n     * @param {?} elem node\n     * @param {?=} findInAncestors whether finding testability in ancestors if testability was not found in\n     * current node\n     * @return {?}\n     */\n    function (elem, findInAncestors) {\n        if (findInAncestors === void 0) { findInAncestors = true; }\n        return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);\n    };\n    TestabilityRegistry.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    TestabilityRegistry.ctorParameters = function () { return []; };\n    return TestabilityRegistry;\n}());\nexport { TestabilityRegistry };\nfunction TestabilityRegistry_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    TestabilityRegistry.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    TestabilityRegistry.ctorParameters;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    TestabilityRegistry.prototype._applications;\n}\n/**\n * Adapter interface for retrieving the `Testability` service associated for a\n * particular context.\n *\n * \\@experimental Testability apis are primarily intended to be used by e2e test tool vendors like\n * the Protractor team.\n * @record\n */\nexport function GetTestability() { }\nfunction GetTestability_tsickle_Closure_declarations() {\n    /** @type {?} */\n    GetTestability.prototype.addToWindow;\n    /** @type {?} */\n    GetTestability.prototype.findTestabilityInTree;\n}\nvar _NoopGetTestability = /** @class */ (function () {\n    function _NoopGetTestability() {\n    }\n    /**\n     * @param {?} registry\n     * @return {?}\n     */\n    _NoopGetTestability.prototype.addToWindow = /**\n     * @param {?} registry\n     * @return {?}\n     */\n    function (registry) { };\n    /**\n     * @param {?} registry\n     * @param {?} elem\n     * @param {?} findInAncestors\n     * @return {?}\n     */\n    _NoopGetTestability.prototype.findTestabilityInTree = /**\n     * @param {?} registry\n     * @param {?} elem\n     * @param {?} findInAncestors\n     * @return {?}\n     */\n    function (registry, elem, findInAncestors) {\n        return null;\n    };\n    return _NoopGetTestability;\n}());\n/**\n * Set the {\\@link GetTestability} implementation used by the Angular testing framework.\n * \\@experimental\n * @param {?} getter\n * @return {?}\n */\nexport function setTestabilityGetter(getter) {\n    _testabilityGetter = getter;\n}\nvar /** @type {?} */ _testabilityGetter = new _NoopGetTestability();\n//# sourceMappingURL=testability.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { Observable } from 'rxjs/Observable';\nimport { merge } from 'rxjs/observable/merge';\nimport { share } from 'rxjs/operator/share';\nimport { ErrorHandler } from '../src/error_handler';\nimport { scheduleMicroTask, stringify } from '../src/util';\nimport { isPromise } from '../src/util/lang';\nimport { ApplicationInitStatus } from './application_init';\nimport { APP_BOOTSTRAP_LISTENER, PLATFORM_INITIALIZER } from './application_tokens';\nimport { Console } from './console';\nimport { Injectable, InjectionToken, Injector } from './di';\nimport { CompilerFactory } from './linker/compiler';\nimport { ComponentFactory } from './linker/component_factory';\nimport { ComponentFactoryBoundToModule, ComponentFactoryResolver } from './linker/component_factory_resolver';\nimport { NgModuleRef } from './linker/ng_module_factory';\nimport { wtfCreateScope, wtfLeave } from './profile/profile';\nimport { Testability, TestabilityRegistry } from './testability/testability';\nimport { NgZone, NoopNgZone } from './zone/ng_zone';\nvar /** @type {?} */ _devMode = true;\nvar /** @type {?} */ _runModeLocked = false;\nvar /** @type {?} */ _platform;\nexport var /** @type {?} */ ALLOW_MULTIPLE_PLATFORMS = new InjectionToken('AllowMultipleToken');\n/**\n * Disable Angular's development mode, which turns off assertions and other\n * checks within the framework.\n *\n * One important assertion this disables verifies that a change detection pass\n * does not result in additional changes to any bindings (also known as\n * unidirectional data flow).\n *\n * \\@stable\n * @return {?}\n */\nexport function enableProdMode() {\n    if (_runModeLocked) {\n        throw new Error('Cannot enable prod mode after platform setup.');\n    }\n    _devMode = false;\n}\n/**\n * Returns whether Angular is in development mode. After called once,\n * the value is locked and won't change any more.\n *\n * By default, this is true, unless a user calls `enableProdMode` before calling this.\n *\n * \\@experimental APIs related to application bootstrap are currently under review.\n * @return {?}\n */\nexport function isDevMode() {\n    _runModeLocked = true;\n    return _devMode;\n}\n/**\n * A token for third-party components that can register themselves with NgProbe.\n *\n * \\@experimental\n */\nvar /**\n * A token for third-party components that can register themselves with NgProbe.\n *\n * \\@experimental\n */\nNgProbeToken = /** @class */ (function () {\n    function NgProbeToken(name, token) {\n        this.name = name;\n        this.token = token;\n    }\n    return NgProbeToken;\n}());\n/**\n * A token for third-party components that can register themselves with NgProbe.\n *\n * \\@experimental\n */\nexport { NgProbeToken };\nfunction NgProbeToken_tsickle_Closure_declarations() {\n    /** @type {?} */\n    NgProbeToken.prototype.name;\n    /** @type {?} */\n    NgProbeToken.prototype.token;\n}\n/**\n * Creates a platform.\n * Platforms have to be eagerly created via this function.\n *\n * \\@experimental APIs related to application bootstrap are currently under review.\n * @param {?} injector\n * @return {?}\n */\nexport function createPlatform(injector) {\n    if (_platform && !_platform.destroyed &&\n        !_platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n        throw new Error('There can be only one platform. Destroy the previous one to create a new one.');\n    }\n    _platform = injector.get(PlatformRef);\n    var /** @type {?} */ inits = injector.get(PLATFORM_INITIALIZER, null);\n    if (inits)\n        inits.forEach(function (init) { return init(); });\n    return _platform;\n}\n/**\n * Creates a factory for a platform\n *\n * \\@experimental APIs related to application bootstrap are currently under review.\n * @param {?} parentPlatformFactory\n * @param {?} name\n * @param {?=} providers\n * @return {?}\n */\nexport function createPlatformFactory(parentPlatformFactory, name, providers) {\n    if (providers === void 0) { providers = []; }\n    var /** @type {?} */ desc = \"Platform: \" + name;\n    var /** @type {?} */ marker = new InjectionToken(desc);\n    return function (extraProviders) {\n        if (extraProviders === void 0) { extraProviders = []; }\n        var /** @type {?} */ platform = getPlatform();\n        if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n            if (parentPlatformFactory) {\n                parentPlatformFactory(providers.concat(extraProviders).concat({ provide: marker, useValue: true }));\n            }\n            else {\n                var /** @type {?} */ injectedProviders = providers.concat(extraProviders).concat({ provide: marker, useValue: true });\n                createPlatform(Injector.create({ providers: injectedProviders, name: desc }));\n            }\n        }\n        return assertPlatform(marker);\n    };\n}\n/**\n * Checks that there currently is a platform which contains the given token as a provider.\n *\n * \\@experimental APIs related to application bootstrap are currently under review.\n * @param {?} requiredToken\n * @return {?}\n */\nexport function assertPlatform(requiredToken) {\n    var /** @type {?} */ platform = getPlatform();\n    if (!platform) {\n        throw new Error('No platform exists!');\n    }\n    if (!platform.injector.get(requiredToken, null)) {\n        throw new Error('A platform with a different configuration has been created. Please destroy it first.');\n    }\n    return platform;\n}\n/**\n * Destroy the existing platform.\n *\n * \\@experimental APIs related to application bootstrap are currently under review.\n * @return {?}\n */\nexport function destroyPlatform() {\n    if (_platform && !_platform.destroyed) {\n        _platform.destroy();\n    }\n}\n/**\n * Returns the current platform.\n *\n * \\@experimental APIs related to application bootstrap are currently under review.\n * @return {?}\n */\nexport function getPlatform() {\n    return _platform && !_platform.destroyed ? _platform : null;\n}\n/**\n * Provides additional options to the bootstraping process.\n *\n * \\@stable\n * @record\n */\nexport function BootstrapOptions() { }\nfunction BootstrapOptions_tsickle_Closure_declarations() {\n    /**\n     * Optionally specify which `NgZone` should be used.\n     *\n     * - Provide your own `NgZone` instance.\n     * - `zone.js` - Use default `NgZone` which requires `Zone.js`.\n     * - `noop` - Use `NoopNgZone` which does nothing.\n     * @type {?|undefined}\n     */\n    BootstrapOptions.prototype.ngZone;\n}\n/**\n * The Angular platform is the entry point for Angular on a web page. Each page\n * has exactly one platform, and services (such as reflection) which are common\n * to every Angular application running on the page are bound in its scope.\n *\n * A page's platform is initialized implicitly when a platform is created via a platform factory\n * (e.g. {\\@link platformBrowser}), or explicitly by calling the {\\@link createPlatform} function.\n *\n * \\@stable\n */\nvar PlatformRef = /** @class */ (function () {\n    /** @internal */\n    function PlatformRef(_injector) {\n        this._injector = _injector;\n        this._modules = [];\n        this._destroyListeners = [];\n        this._destroyed = false;\n    }\n    /**\n     * Creates an instance of an `@NgModule` for the given platform\n     * for offline compilation.\n     *\n     * ## Simple Example\n     *\n     * ```typescript\n     * my_module.ts:\n     *\n     * @NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * main.ts:\n     * import {MyModuleNgFactory} from './my_module.ngfactory';\n     * import {platformBrowser} from '@angular/platform-browser';\n     *\n     * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\n     * ```\n     *\n     * @experimental APIs related to application bootstrap are currently under review.\n     */\n    /**\n     * Creates an instance of an `\\@NgModule` for the given platform\n     * for offline compilation.\n     *\n     * ## Simple Example\n     *\n     * ```typescript\n     * my_module.ts:\n     *\n     * \\@NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * main.ts:\n     * import {MyModuleNgFactory} from './my_module.ngfactory';\n     * import {platformBrowser} from '\\@angular/platform-browser';\n     *\n     * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\n     * ```\n     *\n     * \\@experimental APIs related to application bootstrap are currently under review.\n     * @template M\n     * @param {?} moduleFactory\n     * @param {?=} options\n     * @return {?}\n     */\n    PlatformRef.prototype.bootstrapModuleFactory = /**\n     * Creates an instance of an `\\@NgModule` for the given platform\n     * for offline compilation.\n     *\n     * ## Simple Example\n     *\n     * ```typescript\n     * my_module.ts:\n     *\n     * \\@NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * main.ts:\n     * import {MyModuleNgFactory} from './my_module.ngfactory';\n     * import {platformBrowser} from '\\@angular/platform-browser';\n     *\n     * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\n     * ```\n     *\n     * \\@experimental APIs related to application bootstrap are currently under review.\n     * @template M\n     * @param {?} moduleFactory\n     * @param {?=} options\n     * @return {?}\n     */\n    function (moduleFactory, options) {\n        var _this = this;\n        // Note: We need to create the NgZone _before_ we instantiate the module,\n        // as instantiating the module creates some providers eagerly.\n        // So we create a mini parent injector that just contains the new NgZone and\n        // pass that as parent to the NgModuleFactory.\n        var /** @type {?} */ ngZoneOption = options ? options.ngZone : undefined;\n        var /** @type {?} */ ngZone = getNgZone(ngZoneOption);\n        var /** @type {?} */ providers = [{ provide: NgZone, useValue: ngZone }];\n        // Attention: Don't use ApplicationRef.run here,\n        // as we want to be sure that all possible constructor calls are inside `ngZone.run`!\n        return ngZone.run(function () {\n            var /** @type {?} */ ngZoneInjector = Injector.create({ providers: providers, parent: _this.injector, name: moduleFactory.moduleType.name });\n            var /** @type {?} */ moduleRef = /** @type {?} */ (moduleFactory.create(ngZoneInjector));\n            var /** @type {?} */ exceptionHandler = moduleRef.injector.get(ErrorHandler, null);\n            if (!exceptionHandler) {\n                throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');\n            }\n            moduleRef.onDestroy(function () { return remove(_this._modules, moduleRef); }); /** @type {?} */\n            ((ngZone)).runOutsideAngular(function () { return ((ngZone)).onError.subscribe({ next: function (error) { exceptionHandler.handleError(error); } }); });\n            return _callAndReportToErrorHandler(exceptionHandler, /** @type {?} */ ((ngZone)), function () {\n                var /** @type {?} */ initStatus = moduleRef.injector.get(ApplicationInitStatus);\n                initStatus.runInitializers();\n                return initStatus.donePromise.then(function () {\n                    _this._moduleDoBootstrap(moduleRef);\n                    return moduleRef;\n                });\n            });\n        });\n    };\n    /**\n     * Creates an instance of an `@NgModule` for a given platform using the given runtime compiler.\n     *\n     * ## Simple Example\n     *\n     * ```typescript\n     * @NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * let moduleRef = platformBrowser().bootstrapModule(MyModule);\n     * ```\n     * @stable\n     */\n    /**\n     * Creates an instance of an `\\@NgModule` for a given platform using the given runtime compiler.\n     *\n     * ## Simple Example\n     *\n     * ```typescript\n     * \\@NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * let moduleRef = platformBrowser().bootstrapModule(MyModule);\n     * ```\n     * \\@stable\n     * @template M\n     * @param {?} moduleType\n     * @param {?=} compilerOptions\n     * @return {?}\n     */\n    PlatformRef.prototype.bootstrapModule = /**\n     * Creates an instance of an `\\@NgModule` for a given platform using the given runtime compiler.\n     *\n     * ## Simple Example\n     *\n     * ```typescript\n     * \\@NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * let moduleRef = platformBrowser().bootstrapModule(MyModule);\n     * ```\n     * \\@stable\n     * @template M\n     * @param {?} moduleType\n     * @param {?=} compilerOptions\n     * @return {?}\n     */\n    function (moduleType, compilerOptions) {\n        var _this = this;\n        if (compilerOptions === void 0) { compilerOptions = []; }\n        var /** @type {?} */ compilerFactory = this.injector.get(CompilerFactory);\n        var /** @type {?} */ options = optionsReducer({}, compilerOptions);\n        var /** @type {?} */ compiler = compilerFactory.createCompiler([options]);\n        return compiler.compileModuleAsync(moduleType)\n            .then(function (moduleFactory) { return _this.bootstrapModuleFactory(moduleFactory, options); });\n    };\n    /**\n     * @param {?} moduleRef\n     * @return {?}\n     */\n    PlatformRef.prototype._moduleDoBootstrap = /**\n     * @param {?} moduleRef\n     * @return {?}\n     */\n    function (moduleRef) {\n        var /** @type {?} */ appRef = /** @type {?} */ (moduleRef.injector.get(ApplicationRef));\n        if (moduleRef._bootstrapComponents.length > 0) {\n            moduleRef._bootstrapComponents.forEach(function (f) { return appRef.bootstrap(f); });\n        }\n        else if (moduleRef.instance.ngDoBootstrap) {\n            moduleRef.instance.ngDoBootstrap(appRef);\n        }\n        else {\n            throw new Error(\"The module \" + stringify(moduleRef.instance.constructor) + \" was bootstrapped, but it does not declare \\\"@NgModule.bootstrap\\\" components nor a \\\"ngDoBootstrap\\\" method. \" +\n                \"Please define one of these.\");\n        }\n        this._modules.push(moduleRef);\n    };\n    /**\n     * Register a listener to be called when the platform is disposed.\n     */\n    /**\n     * Register a listener to be called when the platform is disposed.\n     * @param {?} callback\n     * @return {?}\n     */\n    PlatformRef.prototype.onDestroy = /**\n     * Register a listener to be called when the platform is disposed.\n     * @param {?} callback\n     * @return {?}\n     */\n    function (callback) { this._destroyListeners.push(callback); };\n    Object.defineProperty(PlatformRef.prototype, \"injector\", {\n        /**\n         * Retrieve the platform {@link Injector}, which is the parent injector for\n         * every Angular application on the page and provides singleton providers.\n         */\n        get: /**\n         * Retrieve the platform {\\@link Injector}, which is the parent injector for\n         * every Angular application on the page and provides singleton providers.\n         * @return {?}\n         */\n        function () { return this._injector; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Destroy the Angular platform and all Angular applications on the page.\n     */\n    /**\n     * Destroy the Angular platform and all Angular applications on the page.\n     * @return {?}\n     */\n    PlatformRef.prototype.destroy = /**\n     * Destroy the Angular platform and all Angular applications on the page.\n     * @return {?}\n     */\n    function () {\n        if (this._destroyed) {\n            throw new Error('The platform has already been destroyed!');\n        }\n        this._modules.slice().forEach(function (module) { return module.destroy(); });\n        this._destroyListeners.forEach(function (listener) { return listener(); });\n        this._destroyed = true;\n    };\n    Object.defineProperty(PlatformRef.prototype, \"destroyed\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._destroyed; },\n        enumerable: true,\n        configurable: true\n    });\n    PlatformRef.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    PlatformRef.ctorParameters = function () { return [\n        { type: Injector, },\n    ]; };\n    return PlatformRef;\n}());\nexport { PlatformRef };\nfunction PlatformRef_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    PlatformRef.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    PlatformRef.ctorParameters;\n    /** @type {?} */\n    PlatformRef.prototype._modules;\n    /** @type {?} */\n    PlatformRef.prototype._destroyListeners;\n    /** @type {?} */\n    PlatformRef.prototype._destroyed;\n    /** @type {?} */\n    PlatformRef.prototype._injector;\n}\n/**\n * @param {?=} ngZoneOption\n * @return {?}\n */\nfunction getNgZone(ngZoneOption) {\n    var /** @type {?} */ ngZone;\n    if (ngZoneOption === 'noop') {\n        ngZone = new NoopNgZone();\n    }\n    else {\n        ngZone = (ngZoneOption === 'zone.js' ? undefined : ngZoneOption) ||\n            new NgZone({ enableLongStackTrace: isDevMode() });\n    }\n    return ngZone;\n}\n/**\n * @param {?} errorHandler\n * @param {?} ngZone\n * @param {?} callback\n * @return {?}\n */\nfunction _callAndReportToErrorHandler(errorHandler, ngZone, callback) {\n    try {\n        var /** @type {?} */ result = callback();\n        if (isPromise(result)) {\n            return result.catch(function (e) {\n                ngZone.runOutsideAngular(function () { return errorHandler.handleError(e); });\n                // rethrow as the exception handler might not do it\n                throw e;\n            });\n        }\n        return result;\n    }\n    catch (/** @type {?} */ e) {\n        ngZone.runOutsideAngular(function () { return errorHandler.handleError(e); });\n        // rethrow as the exception handler might not do it\n        throw e;\n    }\n}\n/**\n * @template T\n * @param {?} dst\n * @param {?} objs\n * @return {?}\n */\nfunction optionsReducer(dst, objs) {\n    if (Array.isArray(objs)) {\n        dst = objs.reduce(optionsReducer, dst);\n    }\n    else {\n        dst = tslib_1.__assign({}, dst, (/** @type {?} */ (objs)));\n    }\n    return dst;\n}\n/**\n * A reference to an Angular application running on a page.\n *\n * \\@stable\n */\nvar ApplicationRef = /** @class */ (function () {\n    /** @internal */\n    function ApplicationRef(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus) {\n        var _this = this;\n        this._zone = _zone;\n        this._console = _console;\n        this._injector = _injector;\n        this._exceptionHandler = _exceptionHandler;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._initStatus = _initStatus;\n        this._bootstrapListeners = [];\n        this._views = [];\n        this._runningTick = false;\n        this._enforceNoNewChanges = false;\n        this._stable = true;\n        /**\n         * Get a list of component types registered to this application.\n         * This list is populated even before the component is created.\n         */\n        this.componentTypes = [];\n        /**\n         * Get a list of components registered to this application.\n         */\n        this.components = [];\n        this._enforceNoNewChanges = isDevMode();\n        this._zone.onMicrotaskEmpty.subscribe({ next: function () { _this._zone.run(function () { _this.tick(); }); } });\n        var /** @type {?} */ isCurrentlyStable = new Observable(function (observer) {\n            _this._stable = _this._zone.isStable && !_this._zone.hasPendingMacrotasks &&\n                !_this._zone.hasPendingMicrotasks;\n            _this._zone.runOutsideAngular(function () {\n                observer.next(_this._stable);\n                observer.complete();\n            });\n        });\n        var /** @type {?} */ isStable = new Observable(function (observer) {\n            // Create the subscription to onStable outside the Angular Zone so that\n            // the callback is run outside the Angular Zone.\n            var /** @type {?} */ stableSub;\n            _this._zone.runOutsideAngular(function () {\n                stableSub = _this._zone.onStable.subscribe(function () {\n                    NgZone.assertNotInAngularZone();\n                    // Check whether there are no pending macro/micro tasks in the next tick\n                    // to allow for NgZone to update the state.\n                    scheduleMicroTask(function () {\n                        if (!_this._stable && !_this._zone.hasPendingMacrotasks &&\n                            !_this._zone.hasPendingMicrotasks) {\n                            _this._stable = true;\n                            observer.next(true);\n                        }\n                    });\n                });\n            });\n            var /** @type {?} */ unstableSub = _this._zone.onUnstable.subscribe(function () {\n                NgZone.assertInAngularZone();\n                if (_this._stable) {\n                    _this._stable = false;\n                    _this._zone.runOutsideAngular(function () { observer.next(false); });\n                }\n            });\n            return function () {\n                stableSub.unsubscribe();\n                unstableSub.unsubscribe();\n            };\n        });\n        (/** @type {?} */ (this)).isStable =\n            merge(isCurrentlyStable, share.call(isStable));\n    }\n    /**\n     * Bootstrap a new component at the root level of the application.\n     *\n     * ### Bootstrap process\n     *\n     * When bootstrapping a new root component into an application, Angular mounts the\n     * specified application component onto DOM elements identified by the [componentType]'s\n     * selector and kicks off automatic change detection to finish initializing the component.\n     *\n     * Optionally, a component can be mounted onto a DOM element that does not match the\n     * [componentType]'s selector.\n     *\n     * ### Example\n     * {@example core/ts/platform/platform.ts region='longform'}\n     */\n    /**\n     * Bootstrap a new component at the root level of the application.\n     *\n     * ### Bootstrap process\n     *\n     * When bootstrapping a new root component into an application, Angular mounts the\n     * specified application component onto DOM elements identified by the [componentType]'s\n     * selector and kicks off automatic change detection to finish initializing the component.\n     *\n     * Optionally, a component can be mounted onto a DOM element that does not match the\n     * [componentType]'s selector.\n     *\n     * ### Example\n     * {\\@example core/ts/platform/platform.ts region='longform'}\n     * @template C\n     * @param {?} componentOrFactory\n     * @param {?=} rootSelectorOrNode\n     * @return {?}\n     */\n    ApplicationRef.prototype.bootstrap = /**\n     * Bootstrap a new component at the root level of the application.\n     *\n     * ### Bootstrap process\n     *\n     * When bootstrapping a new root component into an application, Angular mounts the\n     * specified application component onto DOM elements identified by the [componentType]'s\n     * selector and kicks off automatic change detection to finish initializing the component.\n     *\n     * Optionally, a component can be mounted onto a DOM element that does not match the\n     * [componentType]'s selector.\n     *\n     * ### Example\n     * {\\@example core/ts/platform/platform.ts region='longform'}\n     * @template C\n     * @param {?} componentOrFactory\n     * @param {?=} rootSelectorOrNode\n     * @return {?}\n     */\n    function (componentOrFactory, rootSelectorOrNode) {\n        var _this = this;\n        if (!this._initStatus.done) {\n            throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');\n        }\n        var /** @type {?} */ componentFactory;\n        if (componentOrFactory instanceof ComponentFactory) {\n            componentFactory = componentOrFactory;\n        }\n        else {\n            componentFactory =\n                /** @type {?} */ ((this._componentFactoryResolver.resolveComponentFactory(componentOrFactory)));\n        }\n        this.componentTypes.push(componentFactory.componentType);\n        // Create a factory associated with the current module if it's not bound to some other\n        var /** @type {?} */ ngModule = componentFactory instanceof ComponentFactoryBoundToModule ?\n            null :\n            this._injector.get(NgModuleRef);\n        var /** @type {?} */ selectorOrNode = rootSelectorOrNode || componentFactory.selector;\n        var /** @type {?} */ compRef = componentFactory.create(Injector.NULL, [], selectorOrNode, ngModule);\n        compRef.onDestroy(function () { _this._unloadComponent(compRef); });\n        var /** @type {?} */ testability = compRef.injector.get(Testability, null);\n        if (testability) {\n            compRef.injector.get(TestabilityRegistry)\n                .registerApplication(compRef.location.nativeElement, testability);\n        }\n        this._loadComponent(compRef);\n        if (isDevMode()) {\n            this._console.log(\"Angular is running in the development mode. Call enableProdMode() to enable the production mode.\");\n        }\n        return compRef;\n    };\n    /**\n     * Invoke this method to explicitly process change detection and its side-effects.\n     *\n     * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n     * further changes are detected. If additional changes are picked up during this second cycle,\n     * bindings in the app have side-effects that cannot be resolved in a single change detection\n     * pass.\n     * In this case, Angular throws an error, since an Angular application can only have one change\n     * detection pass during which all change detection must complete.\n     */\n    /**\n     * Invoke this method to explicitly process change detection and its side-effects.\n     *\n     * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n     * further changes are detected. If additional changes are picked up during this second cycle,\n     * bindings in the app have side-effects that cannot be resolved in a single change detection\n     * pass.\n     * In this case, Angular throws an error, since an Angular application can only have one change\n     * detection pass during which all change detection must complete.\n     * @return {?}\n     */\n    ApplicationRef.prototype.tick = /**\n     * Invoke this method to explicitly process change detection and its side-effects.\n     *\n     * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n     * further changes are detected. If additional changes are picked up during this second cycle,\n     * bindings in the app have side-effects that cannot be resolved in a single change detection\n     * pass.\n     * In this case, Angular throws an error, since an Angular application can only have one change\n     * detection pass during which all change detection must complete.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this._runningTick) {\n            throw new Error('ApplicationRef.tick is called recursively');\n        }\n        var /** @type {?} */ scope = ApplicationRef._tickScope();\n        try {\n            this._runningTick = true;\n            this._views.forEach(function (view) { return view.detectChanges(); });\n            if (this._enforceNoNewChanges) {\n                this._views.forEach(function (view) { return view.checkNoChanges(); });\n            }\n        }\n        catch (/** @type {?} */ e) {\n            // Attention: Don't rethrow as it could cancel subscriptions to Observables!\n            this._zone.runOutsideAngular(function () { return _this._exceptionHandler.handleError(e); });\n        }\n        finally {\n            this._runningTick = false;\n            wtfLeave(scope);\n        }\n    };\n    /**\n     * Attaches a view so that it will be dirty checked.\n     * The view will be automatically detached when it is destroyed.\n     * This will throw if the view is already attached to a ViewContainer.\n     */\n    /**\n     * Attaches a view so that it will be dirty checked.\n     * The view will be automatically detached when it is destroyed.\n     * This will throw if the view is already attached to a ViewContainer.\n     * @param {?} viewRef\n     * @return {?}\n     */\n    ApplicationRef.prototype.attachView = /**\n     * Attaches a view so that it will be dirty checked.\n     * The view will be automatically detached when it is destroyed.\n     * This will throw if the view is already attached to a ViewContainer.\n     * @param {?} viewRef\n     * @return {?}\n     */\n    function (viewRef) {\n        var /** @type {?} */ view = (/** @type {?} */ (viewRef));\n        this._views.push(view);\n        view.attachToAppRef(this);\n    };\n    /**\n     * Detaches a view from dirty checking again.\n     */\n    /**\n     * Detaches a view from dirty checking again.\n     * @param {?} viewRef\n     * @return {?}\n     */\n    ApplicationRef.prototype.detachView = /**\n     * Detaches a view from dirty checking again.\n     * @param {?} viewRef\n     * @return {?}\n     */\n    function (viewRef) {\n        var /** @type {?} */ view = (/** @type {?} */ (viewRef));\n        remove(this._views, view);\n        view.detachFromAppRef();\n    };\n    /**\n     * @param {?} componentRef\n     * @return {?}\n     */\n    ApplicationRef.prototype._loadComponent = /**\n     * @param {?} componentRef\n     * @return {?}\n     */\n    function (componentRef) {\n        this.attachView(componentRef.hostView);\n        this.tick();\n        this.components.push(componentRef);\n        // Get the listeners lazily to prevent DI cycles.\n        var /** @type {?} */ listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);\n        listeners.forEach(function (listener) { return listener(componentRef); });\n    };\n    /**\n     * @param {?} componentRef\n     * @return {?}\n     */\n    ApplicationRef.prototype._unloadComponent = /**\n     * @param {?} componentRef\n     * @return {?}\n     */\n    function (componentRef) {\n        this.detachView(componentRef.hostView);\n        remove(this.components, componentRef);\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    ApplicationRef.prototype.ngOnDestroy = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        // TODO(alxhub): Dispose of the NgZone.\n        this._views.slice().forEach(function (view) { return view.destroy(); });\n    };\n    Object.defineProperty(ApplicationRef.prototype, \"viewCount\", {\n        /**\n         * Returns the number of attached views.\n         */\n        get: /**\n         * Returns the number of attached views.\n         * @return {?}\n         */\n        function () { return this._views.length; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * \\@internal\n     */\n    ApplicationRef._tickScope = wtfCreateScope('ApplicationRef#tick()');\n    ApplicationRef.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    ApplicationRef.ctorParameters = function () { return [\n        { type: NgZone, },\n        { type: Console, },\n        { type: Injector, },\n        { type: ErrorHandler, },\n        { type: ComponentFactoryResolver, },\n        { type: ApplicationInitStatus, },\n    ]; };\n    return ApplicationRef;\n}());\nexport { ApplicationRef };\nfunction ApplicationRef_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    ApplicationRef.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    ApplicationRef.ctorParameters;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ApplicationRef._tickScope;\n    /** @type {?} */\n    ApplicationRef.prototype._bootstrapListeners;\n    /** @type {?} */\n    ApplicationRef.prototype._views;\n    /** @type {?} */\n    ApplicationRef.prototype._runningTick;\n    /** @type {?} */\n    ApplicationRef.prototype._enforceNoNewChanges;\n    /** @type {?} */\n    ApplicationRef.prototype._stable;\n    /**\n     * Get a list of component types registered to this application.\n     * This list is populated even before the component is created.\n     * @type {?}\n     */\n    ApplicationRef.prototype.componentTypes;\n    /**\n     * Get a list of components registered to this application.\n     * @type {?}\n     */\n    ApplicationRef.prototype.components;\n    /**\n     * Returns an Observable that indicates when the application is stable or unstable.\n     * @type {?}\n     */\n    ApplicationRef.prototype.isStable;\n    /** @type {?} */\n    ApplicationRef.prototype._zone;\n    /** @type {?} */\n    ApplicationRef.prototype._console;\n    /** @type {?} */\n    ApplicationRef.prototype._injector;\n    /** @type {?} */\n    ApplicationRef.prototype._exceptionHandler;\n    /** @type {?} */\n    ApplicationRef.prototype._componentFactoryResolver;\n    /** @type {?} */\n    ApplicationRef.prototype._initStatus;\n}\n/**\n * @template T\n * @param {?} list\n * @param {?} el\n * @return {?}\n */\nfunction remove(list, el) {\n    var /** @type {?} */ index = list.indexOf(el);\n    if (index > -1) {\n        list.splice(index, 1);\n    }\n}\n//# sourceMappingURL=application_ref.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '../di';\n/**\n * @deprecated Use `RendererType2` (and `Renderer2`) instead.\n */\nvar /**\n * @deprecated Use `RendererType2` (and `Renderer2`) instead.\n */\nRenderComponentType = /** @class */ (function () {\n    function RenderComponentType(id, templateUrl, slotCount, encapsulation, styles, animations) {\n        this.id = id;\n        this.templateUrl = templateUrl;\n        this.slotCount = slotCount;\n        this.encapsulation = encapsulation;\n        this.styles = styles;\n        this.animations = animations;\n    }\n    return RenderComponentType;\n}());\n/**\n * @deprecated Use `RendererType2` (and `Renderer2`) instead.\n */\nexport { RenderComponentType };\nfunction RenderComponentType_tsickle_Closure_declarations() {\n    /** @type {?} */\n    RenderComponentType.prototype.id;\n    /** @type {?} */\n    RenderComponentType.prototype.templateUrl;\n    /** @type {?} */\n    RenderComponentType.prototype.slotCount;\n    /** @type {?} */\n    RenderComponentType.prototype.encapsulation;\n    /** @type {?} */\n    RenderComponentType.prototype.styles;\n    /** @type {?} */\n    RenderComponentType.prototype.animations;\n}\n/**\n * @deprecated Debug info is handeled internally in the view engine now.\n * @abstract\n */\nvar /**\n * @deprecated Debug info is handeled internally in the view engine now.\n * @abstract\n */\nRenderDebugInfo = /** @class */ (function () {\n    function RenderDebugInfo() {\n    }\n    return RenderDebugInfo;\n}());\n/**\n * @deprecated Debug info is handeled internally in the view engine now.\n * @abstract\n */\nexport { RenderDebugInfo };\nfunction RenderDebugInfo_tsickle_Closure_declarations() {\n    /**\n     * @abstract\n     * @return {?}\n     */\n    RenderDebugInfo.prototype.injector = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    RenderDebugInfo.prototype.component = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    RenderDebugInfo.prototype.providerTokens = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    RenderDebugInfo.prototype.references = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    RenderDebugInfo.prototype.context = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    RenderDebugInfo.prototype.source = function () { };\n}\n/**\n * @deprecated Use the `Renderer2` instead.\n * @record\n */\nexport function DirectRenderer() { }\nfunction DirectRenderer_tsickle_Closure_declarations() {\n    /** @type {?} */\n    DirectRenderer.prototype.remove;\n    /** @type {?} */\n    DirectRenderer.prototype.appendChild;\n    /** @type {?} */\n    DirectRenderer.prototype.insertBefore;\n    /** @type {?} */\n    DirectRenderer.prototype.nextSibling;\n    /** @type {?} */\n    DirectRenderer.prototype.parentElement;\n}\n/**\n * @deprecated Use the `Renderer2` instead.\n * @abstract\n */\nvar /**\n * @deprecated Use the `Renderer2` instead.\n * @abstract\n */\nRenderer = /** @class */ (function () {\n    function Renderer() {\n    }\n    return Renderer;\n}());\n/**\n * @deprecated Use the `Renderer2` instead.\n * @abstract\n */\nexport { Renderer };\nfunction Renderer_tsickle_Closure_declarations() {\n    /**\n     * @abstract\n     * @param {?} selectorOrNode\n     * @param {?=} debugInfo\n     * @return {?}\n     */\n    Renderer.prototype.selectRootElement = function (selectorOrNode, debugInfo) { };\n    /**\n     * @abstract\n     * @param {?} parentElement\n     * @param {?} name\n     * @param {?=} debugInfo\n     * @return {?}\n     */\n    Renderer.prototype.createElement = function (parentElement, name, debugInfo) { };\n    /**\n     * @abstract\n     * @param {?} hostElement\n     * @return {?}\n     */\n    Renderer.prototype.createViewRoot = function (hostElement) { };\n    /**\n     * @abstract\n     * @param {?} parentElement\n     * @param {?=} debugInfo\n     * @return {?}\n     */\n    Renderer.prototype.createTemplateAnchor = function (parentElement, debugInfo) { };\n    /**\n     * @abstract\n     * @param {?} parentElement\n     * @param {?} value\n     * @param {?=} debugInfo\n     * @return {?}\n     */\n    Renderer.prototype.createText = function (parentElement, value, debugInfo) { };\n    /**\n     * @abstract\n     * @param {?} parentElement\n     * @param {?} nodes\n     * @return {?}\n     */\n    Renderer.prototype.projectNodes = function (parentElement, nodes) { };\n    /**\n     * @abstract\n     * @param {?} node\n     * @param {?} viewRootNodes\n     * @return {?}\n     */\n    Renderer.prototype.attachViewAfter = function (node, viewRootNodes) { };\n    /**\n     * @abstract\n     * @param {?} viewRootNodes\n     * @return {?}\n     */\n    Renderer.prototype.detachView = function (viewRootNodes) { };\n    /**\n     * @abstract\n     * @param {?} hostElement\n     * @param {?} viewAllNodes\n     * @return {?}\n     */\n    Renderer.prototype.destroyView = function (hostElement, viewAllNodes) { };\n    /**\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} name\n     * @param {?} callback\n     * @return {?}\n     */\n    Renderer.prototype.listen = function (renderElement, name, callback) { };\n    /**\n     * @abstract\n     * @param {?} target\n     * @param {?} name\n     * @param {?} callback\n     * @return {?}\n     */\n    Renderer.prototype.listenGlobal = function (target, name, callback) { };\n    /**\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} propertyName\n     * @param {?} propertyValue\n     * @return {?}\n     */\n    Renderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) { };\n    /**\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} attributeName\n     * @param {?} attributeValue\n     * @return {?}\n     */\n    Renderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) { };\n    /**\n     * Used only in debug mode to serialize property changes to dom nodes as attributes.\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} propertyName\n     * @param {?} propertyValue\n     * @return {?}\n     */\n    Renderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) { };\n    /**\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} className\n     * @param {?} isAdd\n     * @return {?}\n     */\n    Renderer.prototype.setElementClass = function (renderElement, className, isAdd) { };\n    /**\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} styleName\n     * @param {?} styleValue\n     * @return {?}\n     */\n    Renderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) { };\n    /**\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} methodName\n     * @param {?=} args\n     * @return {?}\n     */\n    Renderer.prototype.invokeElementMethod = function (renderElement, methodName, args) { };\n    /**\n     * @abstract\n     * @param {?} renderNode\n     * @param {?} text\n     * @return {?}\n     */\n    Renderer.prototype.setText = function (renderNode, text) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} startingStyles\n     * @param {?} keyframes\n     * @param {?} duration\n     * @param {?} delay\n     * @param {?} easing\n     * @param {?=} previousPlayers\n     * @return {?}\n     */\n    Renderer.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) { };\n}\nexport var /** @type {?} */ Renderer2Interceptor = new InjectionToken('Renderer2Interceptor');\n/**\n * Injectable service that provides a low-level interface for modifying the UI.\n *\n * Use this service to bypass Angular's templating and make custom UI changes that can't be\n * expressed declaratively. For example if you need to set a property or an attribute whose name is\n * not statically known, use {\\@link Renderer#setElementProperty setElementProperty} or\n * {\\@link Renderer#setElementAttribute setElementAttribute} respectively.\n *\n * If you are implementing a custom renderer, you must implement this interface.\n *\n * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.\n *\n * @deprecated Use `RendererFactory2` instead.\n * @abstract\n */\nvar /**\n * Injectable service that provides a low-level interface for modifying the UI.\n *\n * Use this service to bypass Angular's templating and make custom UI changes that can't be\n * expressed declaratively. For example if you need to set a property or an attribute whose name is\n * not statically known, use {\\@link Renderer#setElementProperty setElementProperty} or\n * {\\@link Renderer#setElementAttribute setElementAttribute} respectively.\n *\n * If you are implementing a custom renderer, you must implement this interface.\n *\n * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.\n *\n * @deprecated Use `RendererFactory2` instead.\n * @abstract\n */\nRootRenderer = /** @class */ (function () {\n    function RootRenderer() {\n    }\n    return RootRenderer;\n}());\n/**\n * Injectable service that provides a low-level interface for modifying the UI.\n *\n * Use this service to bypass Angular's templating and make custom UI changes that can't be\n * expressed declaratively. For example if you need to set a property or an attribute whose name is\n * not statically known, use {\\@link Renderer#setElementProperty setElementProperty} or\n * {\\@link Renderer#setElementAttribute setElementAttribute} respectively.\n *\n * If you are implementing a custom renderer, you must implement this interface.\n *\n * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.\n *\n * @deprecated Use `RendererFactory2` instead.\n * @abstract\n */\nexport { RootRenderer };\nfunction RootRenderer_tsickle_Closure_declarations() {\n    /**\n     * @abstract\n     * @param {?} componentType\n     * @return {?}\n     */\n    RootRenderer.prototype.renderComponent = function (componentType) { };\n}\n/**\n * \\@experimental\n * @record\n */\nexport function RendererType2() { }\nfunction RendererType2_tsickle_Closure_declarations() {\n    /** @type {?} */\n    RendererType2.prototype.id;\n    /** @type {?} */\n    RendererType2.prototype.encapsulation;\n    /** @type {?} */\n    RendererType2.prototype.styles;\n    /** @type {?} */\n    RendererType2.prototype.data;\n}\n/**\n * \\@experimental\n * @abstract\n */\nvar /**\n * \\@experimental\n * @abstract\n */\nRendererFactory2 = /** @class */ (function () {\n    function RendererFactory2() {\n    }\n    return RendererFactory2;\n}());\n/**\n * \\@experimental\n * @abstract\n */\nexport { RendererFactory2 };\nfunction RendererFactory2_tsickle_Closure_declarations() {\n    /**\n     * @abstract\n     * @param {?} hostElement\n     * @param {?} type\n     * @return {?}\n     */\n    RendererFactory2.prototype.createRenderer = function (hostElement, type) { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    RendererFactory2.prototype.begin = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    RendererFactory2.prototype.end = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    RendererFactory2.prototype.whenRenderingDone = function () { };\n}\n/** @enum {number} */\nvar RendererStyleFlags2 = {\n    Important: 1,\n    DashCase: 2,\n};\nexport { RendererStyleFlags2 };\nRendererStyleFlags2[RendererStyleFlags2.Important] = \"Important\";\nRendererStyleFlags2[RendererStyleFlags2.DashCase] = \"DashCase\";\n/**\n * \\@experimental\n * @abstract\n */\nvar /**\n * \\@experimental\n * @abstract\n */\nRenderer2 = /** @class */ (function () {\n    function Renderer2() {\n    }\n    return Renderer2;\n}());\n/**\n * \\@experimental\n * @abstract\n */\nexport { Renderer2 };\nfunction Renderer2_tsickle_Closure_declarations() {\n    /**\n     * This property is allowed to be null / undefined,\n     * in which case the view engine won't call it.\n     * This is used as a performance optimization for production mode.\n     * @type {?}\n     */\n    Renderer2.prototype.destroyNode;\n    /**\n     * This field can be used to store arbitrary data on this renderer instance.\n     * This is useful for renderers that delegate to other renderers.\n     * @abstract\n     * @return {?}\n     */\n    Renderer2.prototype.data = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    Renderer2.prototype.destroy = function () { };\n    /**\n     * @abstract\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    Renderer2.prototype.createElement = function (name, namespace) { };\n    /**\n     * @abstract\n     * @param {?} value\n     * @return {?}\n     */\n    Renderer2.prototype.createComment = function (value) { };\n    /**\n     * @abstract\n     * @param {?} value\n     * @return {?}\n     */\n    Renderer2.prototype.createText = function (value) { };\n    /**\n     * @abstract\n     * @param {?} parent\n     * @param {?} newChild\n     * @return {?}\n     */\n    Renderer2.prototype.appendChild = function (parent, newChild) { };\n    /**\n     * @abstract\n     * @param {?} parent\n     * @param {?} newChild\n     * @param {?} refChild\n     * @return {?}\n     */\n    Renderer2.prototype.insertBefore = function (parent, newChild, refChild) { };\n    /**\n     * @abstract\n     * @param {?} parent\n     * @param {?} oldChild\n     * @return {?}\n     */\n    Renderer2.prototype.removeChild = function (parent, oldChild) { };\n    /**\n     * @abstract\n     * @param {?} selectorOrNode\n     * @return {?}\n     */\n    Renderer2.prototype.selectRootElement = function (selectorOrNode) { };\n    /**\n     * Attention: On WebWorkers, this will always return a value,\n     * as we are asking for a result synchronously. I.e.\n     * the caller can't rely on checking whether this is null or not.\n     * @abstract\n     * @param {?} node\n     * @return {?}\n     */\n    Renderer2.prototype.parentNode = function (node) { };\n    /**\n     * Attention: On WebWorkers, this will always return a value,\n     * as we are asking for a result synchronously. I.e.\n     * the caller can't rely on checking whether this is null or not.\n     * @abstract\n     * @param {?} node\n     * @return {?}\n     */\n    Renderer2.prototype.nextSibling = function (node) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @param {?=} namespace\n     * @return {?}\n     */\n    Renderer2.prototype.setAttribute = function (el, name, value, namespace) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    Renderer2.prototype.removeAttribute = function (el, name, namespace) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    Renderer2.prototype.addClass = function (el, name) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    Renderer2.prototype.removeClass = function (el, name) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @param {?} style\n     * @param {?} value\n     * @param {?=} flags\n     * @return {?}\n     */\n    Renderer2.prototype.setStyle = function (el, style, value, flags) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @param {?} style\n     * @param {?=} flags\n     * @return {?}\n     */\n    Renderer2.prototype.removeStyle = function (el, style, flags) { };\n    /**\n     * @abstract\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    Renderer2.prototype.setProperty = function (el, name, value) { };\n    /**\n     * @abstract\n     * @param {?} node\n     * @param {?} value\n     * @return {?}\n     */\n    Renderer2.prototype.setValue = function (node, value) { };\n    /**\n     * @abstract\n     * @param {?} target\n     * @param {?} eventName\n     * @param {?} callback\n     * @return {?}\n     */\n    Renderer2.prototype.listen = function (target, eventName, callback) { };\n}\n//# sourceMappingURL=api.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A wrapper around a native element inside of a View.\n *\n * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM\n * element.\n *\n * \\@security Permitting direct access to the DOM can make your application more vulnerable to\n * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the\n * [Security Guide](http://g.co/ng/security).\n *\n * \\@stable\n */\nvar /**\n * A wrapper around a native element inside of a View.\n *\n * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM\n * element.\n *\n * \\@security Permitting direct access to the DOM can make your application more vulnerable to\n * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the\n * [Security Guide](http://g.co/ng/security).\n *\n * \\@stable\n */\nElementRef = /** @class */ (function () {\n    function ElementRef(nativeElement) {\n        this.nativeElement = nativeElement;\n    }\n    return ElementRef;\n}());\n/**\n * A wrapper around a native element inside of a View.\n *\n * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM\n * element.\n *\n * \\@security Permitting direct access to the DOM can make your application more vulnerable to\n * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the\n * [Security Guide](http://g.co/ng/security).\n *\n * \\@stable\n */\nexport { ElementRef };\nfunction ElementRef_tsickle_Closure_declarations() {\n    /**\n     * The underlying native element or `null` if direct access to native elements is not supported\n     * (e.g. when the application runs in a web worker).\n     *\n     * <div class=\"callout is-critical\">\n     *   <header>Use with caution</header>\n     *   <p>\n     *    Use this API as the last resort when direct access to DOM is needed. Use templating and\n     *    data-binding provided by Angular instead. Alternatively you can take a look at {\\@link\n     * Renderer2}\n     *    which provides API that can safely be used even when direct access to native elements is not\n     *    supported.\n     *   </p>\n     *   <p>\n     *    Relying on direct DOM access creates tight coupling between your application and rendering\n     *    layers which will make it impossible to separate the two and deploy your application into a\n     *    web worker.\n     *   </p>\n     * </div>\n     * \\@stable\n     * @type {?}\n     */\n    ElementRef.prototype.nativeElement;\n}\n//# sourceMappingURL=element_ref.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Used to load ng module factories.\n * \\@stable\n * @abstract\n */\nvar /**\n * Used to load ng module factories.\n * \\@stable\n * @abstract\n */\nNgModuleFactoryLoader = /** @class */ (function () {\n    function NgModuleFactoryLoader() {\n    }\n    return NgModuleFactoryLoader;\n}());\n/**\n * Used to load ng module factories.\n * \\@stable\n * @abstract\n */\nexport { NgModuleFactoryLoader };\nfunction NgModuleFactoryLoader_tsickle_Closure_declarations() {\n    /**\n     * @abstract\n     * @param {?} path\n     * @return {?}\n     */\n    NgModuleFactoryLoader.prototype.load = function (path) { };\n}\nvar /** @type {?} */ moduleFactories = new Map();\n/**\n * Registers a loaded module. Should only be called from generated NgModuleFactory code.\n * \\@experimental\n * @param {?} id\n * @param {?} factory\n * @return {?}\n */\nexport function registerModuleFactory(id, factory) {\n    var /** @type {?} */ existing = moduleFactories.get(id);\n    if (existing) {\n        throw new Error(\"Duplicate module registered for \" + id + \" - \" + existing.moduleType.name + \" vs \" + factory.moduleType.name);\n    }\n    moduleFactories.set(id, factory);\n}\n/**\n * @return {?}\n */\nexport function clearModulesForTest() {\n    moduleFactories = new Map();\n}\n/**\n * Returns the NgModuleFactory with the given id, if it exists and has been loaded.\n * Factories for modules that do not specify an `id` cannot be retrieved. Throws if the module\n * cannot be found.\n * \\@experimental\n * @param {?} id\n * @return {?}\n */\nexport function getModuleFactory(id) {\n    var /** @type {?} */ factory = moduleFactories.get(id);\n    if (!factory)\n        throw new Error(\"No module with ID \" + id + \" loaded\");\n    return factory;\n}\n//# sourceMappingURL=ng_module_factory_loader.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { EventEmitter } from '../event_emitter';\nimport { getSymbolIterator } from '../util';\n/**\n * An unmodifiable list of items that Angular keeps up to date when the state\n * of the application changes.\n *\n * The type of object that {\\@link ViewChildren}, {\\@link ContentChildren}, and {\\@link QueryList}\n * provide.\n *\n * Implements an iterable interface, therefore it can be used in both ES6\n * javascript `for (var i of items)` loops as well as in Angular templates with\n * `*ngFor=\"let i of myList\"`.\n *\n * Changes can be observed by subscribing to the changes `Observable`.\n *\n * NOTE: In the future this class will implement an `Observable` interface.\n *\n * ### Example ([live demo](http://plnkr.co/edit/RX8sJnQYl9FWuSCWme5z?p=preview))\n * ```typescript\n * \\@Component({...})\n * class Container {\n *   \\@ViewChildren(Item) items:QueryList<Item>;\n * }\n * ```\n * \\@stable\n */\nvar /**\n * An unmodifiable list of items that Angular keeps up to date when the state\n * of the application changes.\n *\n * The type of object that {\\@link ViewChildren}, {\\@link ContentChildren}, and {\\@link QueryList}\n * provide.\n *\n * Implements an iterable interface, therefore it can be used in both ES6\n * javascript `for (var i of items)` loops as well as in Angular templates with\n * `*ngFor=\"let i of myList\"`.\n *\n * Changes can be observed by subscribing to the changes `Observable`.\n *\n * NOTE: In the future this class will implement an `Observable` interface.\n *\n * ### Example ([live demo](http://plnkr.co/edit/RX8sJnQYl9FWuSCWme5z?p=preview))\n * ```typescript\n * \\@Component({...})\n * class Container {\n *   \\@ViewChildren(Item) items:QueryList<Item>;\n * }\n * ```\n * \\@stable\n */\nQueryList = /** @class */ (function () {\n    function QueryList() {\n        this.dirty = true;\n        this._results = [];\n        this.changes = new EventEmitter();\n        this.length = 0;\n    }\n    /**\n     * See\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n     */\n    /**\n     * See\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n     * @template U\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList.prototype.map = /**\n     * See\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n     * @template U\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { return this._results.map(fn); };\n    /**\n     * See\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n     */\n    /**\n     * See\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList.prototype.filter = /**\n     * See\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        return this._results.filter(fn);\n    };\n    /**\n     * See\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n     */\n    /**\n     * See\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList.prototype.find = /**\n     * See\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        return this._results.find(fn);\n    };\n    /**\n     * See\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n     */\n    /**\n     * See\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n     * @template U\n     * @param {?} fn\n     * @param {?} init\n     * @return {?}\n     */\n    QueryList.prototype.reduce = /**\n     * See\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n     * @template U\n     * @param {?} fn\n     * @param {?} init\n     * @return {?}\n     */\n    function (fn, init) {\n        return this._results.reduce(fn, init);\n    };\n    /**\n     * See\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n     */\n    /**\n     * See\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList.prototype.forEach = /**\n     * See\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this._results.forEach(fn); };\n    /**\n     * See\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n     */\n    /**\n     * See\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList.prototype.some = /**\n     * See\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        return this._results.some(fn);\n    };\n    /**\n     * @return {?}\n     */\n    QueryList.prototype.toArray = /**\n     * @return {?}\n     */\n    function () { return this._results.slice(); };\n    /**\n     * @return {?}\n     */\n    QueryList.prototype[getSymbolIterator()] = /**\n     * @return {?}\n     */\n    function () { return (/** @type {?} */ (this._results))[getSymbolIterator()](); };\n    /**\n     * @return {?}\n     */\n    QueryList.prototype.toString = /**\n     * @return {?}\n     */\n    function () { return this._results.toString(); };\n    /**\n     * @param {?} res\n     * @return {?}\n     */\n    QueryList.prototype.reset = /**\n     * @param {?} res\n     * @return {?}\n     */\n    function (res) {\n        this._results = flatten(res);\n        (/** @type {?} */ (this)).dirty = false;\n        (/** @type {?} */ (this)).length = this._results.length;\n        (/** @type {?} */ (this)).last = this._results[this.length - 1];\n        (/** @type {?} */ (this)).first = this._results[0];\n    };\n    /**\n     * @return {?}\n     */\n    QueryList.prototype.notifyOnChanges = /**\n     * @return {?}\n     */\n    function () { (/** @type {?} */ (this.changes)).emit(this); };\n    /** internal */\n    /**\n     * internal\n     * @return {?}\n     */\n    QueryList.prototype.setDirty = /**\n     * internal\n     * @return {?}\n     */\n    function () { (/** @type {?} */ (this)).dirty = true; };\n    /** internal */\n    /**\n     * internal\n     * @return {?}\n     */\n    QueryList.prototype.destroy = /**\n     * internal\n     * @return {?}\n     */\n    function () {\n        (/** @type {?} */ (this.changes)).complete();\n        (/** @type {?} */ (this.changes)).unsubscribe();\n    };\n    return QueryList;\n}());\n/**\n * An unmodifiable list of items that Angular keeps up to date when the state\n * of the application changes.\n *\n * The type of object that {\\@link ViewChildren}, {\\@link ContentChildren}, and {\\@link QueryList}\n * provide.\n *\n * Implements an iterable interface, therefore it can be used in both ES6\n * javascript `for (var i of items)` loops as well as in Angular templates with\n * `*ngFor=\"let i of myList\"`.\n *\n * Changes can be observed by subscribing to the changes `Observable`.\n *\n * NOTE: In the future this class will implement an `Observable` interface.\n *\n * ### Example ([live demo](http://plnkr.co/edit/RX8sJnQYl9FWuSCWme5z?p=preview))\n * ```typescript\n * \\@Component({...})\n * class Container {\n *   \\@ViewChildren(Item) items:QueryList<Item>;\n * }\n * ```\n * \\@stable\n */\nexport { QueryList };\nfunction QueryList_tsickle_Closure_declarations() {\n    /** @type {?} */\n    QueryList.prototype.dirty;\n    /** @type {?} */\n    QueryList.prototype._results;\n    /** @type {?} */\n    QueryList.prototype.changes;\n    /** @type {?} */\n    QueryList.prototype.length;\n    /** @type {?} */\n    QueryList.prototype.first;\n    /** @type {?} */\n    QueryList.prototype.last;\n}\n/**\n * @template T\n * @param {?} list\n * @return {?}\n */\nfunction flatten(list) {\n    return list.reduce(function (flat, item) {\n        var /** @type {?} */ flatItem = Array.isArray(item) ? flatten(item) : item;\n        return (/** @type {?} */ (flat)).concat(flatItem);\n    }, []);\n}\n//# sourceMappingURL=query_list.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injectable, Optional } from '../di';\nimport { Compiler } from './compiler';\nvar /** @type {?} */ _SEPARATOR = '#';\nvar /** @type {?} */ FACTORY_CLASS_SUFFIX = 'NgFactory';\n/**\n * Configuration for SystemJsNgModuleLoader.\n * token.\n *\n * \\@experimental\n * @abstract\n */\nvar /**\n * Configuration for SystemJsNgModuleLoader.\n * token.\n *\n * \\@experimental\n * @abstract\n */\nSystemJsNgModuleLoaderConfig = /** @class */ (function () {\n    function SystemJsNgModuleLoaderConfig() {\n    }\n    return SystemJsNgModuleLoaderConfig;\n}());\n/**\n * Configuration for SystemJsNgModuleLoader.\n * token.\n *\n * \\@experimental\n * @abstract\n */\nexport { SystemJsNgModuleLoaderConfig };\nfunction SystemJsNgModuleLoaderConfig_tsickle_Closure_declarations() {\n    /**\n     * Prefix to add when computing the name of the factory module for a given module name.\n     * @type {?}\n     */\n    SystemJsNgModuleLoaderConfig.prototype.factoryPathPrefix;\n    /**\n     * Suffix to add when computing the name of the factory module for a given module name.\n     * @type {?}\n     */\n    SystemJsNgModuleLoaderConfig.prototype.factoryPathSuffix;\n}\nvar /** @type {?} */ DEFAULT_CONFIG = {\n    factoryPathPrefix: '',\n    factoryPathSuffix: '.ngfactory',\n};\n/**\n * NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory\n * \\@experimental\n */\nvar SystemJsNgModuleLoader = /** @class */ (function () {\n    function SystemJsNgModuleLoader(_compiler, config) {\n        this._compiler = _compiler;\n        this._config = config || DEFAULT_CONFIG;\n    }\n    /**\n     * @param {?} path\n     * @return {?}\n     */\n    SystemJsNgModuleLoader.prototype.load = /**\n     * @param {?} path\n     * @return {?}\n     */\n    function (path) {\n        var /** @type {?} */ offlineMode = this._compiler instanceof Compiler;\n        return offlineMode ? this.loadFactory(path) : this.loadAndCompile(path);\n    };\n    /**\n     * @param {?} path\n     * @return {?}\n     */\n    SystemJsNgModuleLoader.prototype.loadAndCompile = /**\n     * @param {?} path\n     * @return {?}\n     */\n    function (path) {\n        var _this = this;\n        var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];\n        if (exportName === undefined) {\n            exportName = 'default';\n        }\n        return System.import(module)\n            .then(function (module) { return module[exportName]; })\n            .then(function (type) { return checkNotEmpty(type, module, exportName); })\n            .then(function (type) { return _this._compiler.compileModuleAsync(type); });\n    };\n    /**\n     * @param {?} path\n     * @return {?}\n     */\n    SystemJsNgModuleLoader.prototype.loadFactory = /**\n     * @param {?} path\n     * @return {?}\n     */\n    function (path) {\n        var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];\n        var /** @type {?} */ factoryClassSuffix = FACTORY_CLASS_SUFFIX;\n        if (exportName === undefined) {\n            exportName = 'default';\n            factoryClassSuffix = '';\n        }\n        return System.import(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix)\n            .then(function (module) { return module[exportName + factoryClassSuffix]; })\n            .then(function (factory) { return checkNotEmpty(factory, module, exportName); });\n    };\n    SystemJsNgModuleLoader.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    SystemJsNgModuleLoader.ctorParameters = function () { return [\n        { type: Compiler, },\n        { type: SystemJsNgModuleLoaderConfig, decorators: [{ type: Optional },] },\n    ]; };\n    return SystemJsNgModuleLoader;\n}());\nexport { SystemJsNgModuleLoader };\nfunction SystemJsNgModuleLoader_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    SystemJsNgModuleLoader.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    SystemJsNgModuleLoader.ctorParameters;\n    /** @type {?} */\n    SystemJsNgModuleLoader.prototype._config;\n    /** @type {?} */\n    SystemJsNgModuleLoader.prototype._compiler;\n}\n/**\n * @param {?} value\n * @param {?} modulePath\n * @param {?} exportName\n * @return {?}\n */\nfunction checkNotEmpty(value, modulePath, exportName) {\n    if (!value) {\n        throw new Error(\"Cannot find '\" + exportName + \"' in '\" + modulePath + \"'\");\n    }\n    return value;\n}\n//# sourceMappingURL=system_js_ng_module_factory_loader.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { ChangeDetectorRef } from '../change_detection/change_detector_ref';\n/**\n * \\@stable\n * @abstract\n */\nvar /**\n * \\@stable\n * @abstract\n */\nViewRef = /** @class */ (function (_super) {\n    tslib_1.__extends(ViewRef, _super);\n    function ViewRef() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return ViewRef;\n}(ChangeDetectorRef));\n/**\n * \\@stable\n * @abstract\n */\nexport { ViewRef };\nfunction ViewRef_tsickle_Closure_declarations() {\n    /**\n     * Destroys the view and all of the data structures associated with it.\n     * @abstract\n     * @return {?}\n     */\n    ViewRef.prototype.destroy = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    ViewRef.prototype.destroyed = function () { };\n    /**\n     * @abstract\n     * @param {?} callback\n     * @return {?}\n     */\n    ViewRef.prototype.onDestroy = function (callback) { };\n}\n/**\n * Represents an Angular View.\n *\n * <!-- TODO: move the next two paragraphs to the dev guide -->\n * A View is a fundamental building block of the application UI. It is the smallest grouping of\n * Elements which are created and destroyed together.\n *\n * Properties of elements in a View can change, but the structure (number and order) of elements in\n * a View cannot. Changing the structure of Elements can only be done by inserting, moving or\n * removing nested Views via a {\\@link ViewContainerRef}. Each View can contain many View Containers.\n * <!-- /TODO -->\n *\n * ### Example\n *\n * Given this template...\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <li *ngFor=\"let  item of items\">{{item}}</li>\n * </ul>\n * ```\n *\n * We have two {\\@link TemplateRef}s:\n *\n * Outer {\\@link TemplateRef}:\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <ng-template ngFor let-item [ngForOf]=\"items\"></ng-template>\n * </ul>\n * ```\n *\n * Inner {\\@link TemplateRef}:\n * ```\n *   <li>{{item}}</li>\n * ```\n *\n * Notice that the original template is broken down into two separate {\\@link TemplateRef}s.\n *\n * The outer/inner {\\@link TemplateRef}s are then assembled into views like so:\n *\n * ```\n * <!-- ViewRef: outer-0 -->\n * Count: 2\n * <ul>\n *   <ng-template view-container-ref></ng-template>\n *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->\n *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->\n * </ul>\n * <!-- /ViewRef: outer-0 -->\n * ```\n * \\@experimental\n * @abstract\n */\nvar /**\n * Represents an Angular View.\n *\n * <!-- TODO: move the next two paragraphs to the dev guide -->\n * A View is a fundamental building block of the application UI. It is the smallest grouping of\n * Elements which are created and destroyed together.\n *\n * Properties of elements in a View can change, but the structure (number and order) of elements in\n * a View cannot. Changing the structure of Elements can only be done by inserting, moving or\n * removing nested Views via a {\\@link ViewContainerRef}. Each View can contain many View Containers.\n * <!-- /TODO -->\n *\n * ### Example\n *\n * Given this template...\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <li *ngFor=\"let  item of items\">{{item}}</li>\n * </ul>\n * ```\n *\n * We have two {\\@link TemplateRef}s:\n *\n * Outer {\\@link TemplateRef}:\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <ng-template ngFor let-item [ngForOf]=\"items\"></ng-template>\n * </ul>\n * ```\n *\n * Inner {\\@link TemplateRef}:\n * ```\n *   <li>{{item}}</li>\n * ```\n *\n * Notice that the original template is broken down into two separate {\\@link TemplateRef}s.\n *\n * The outer/inner {\\@link TemplateRef}s are then assembled into views like so:\n *\n * ```\n * <!-- ViewRef: outer-0 -->\n * Count: 2\n * <ul>\n *   <ng-template view-container-ref></ng-template>\n *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->\n *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->\n * </ul>\n * <!-- /ViewRef: outer-0 -->\n * ```\n * \\@experimental\n * @abstract\n */\nEmbeddedViewRef = /** @class */ (function (_super) {\n    tslib_1.__extends(EmbeddedViewRef, _super);\n    function EmbeddedViewRef() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return EmbeddedViewRef;\n}(ViewRef));\n/**\n * Represents an Angular View.\n *\n * <!-- TODO: move the next two paragraphs to the dev guide -->\n * A View is a fundamental building block of the application UI. It is the smallest grouping of\n * Elements which are created and destroyed together.\n *\n * Properties of elements in a View can change, but the structure (number and order) of elements in\n * a View cannot. Changing the structure of Elements can only be done by inserting, moving or\n * removing nested Views via a {\\@link ViewContainerRef}. Each View can contain many View Containers.\n * <!-- /TODO -->\n *\n * ### Example\n *\n * Given this template...\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <li *ngFor=\"let  item of items\">{{item}}</li>\n * </ul>\n * ```\n *\n * We have two {\\@link TemplateRef}s:\n *\n * Outer {\\@link TemplateRef}:\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <ng-template ngFor let-item [ngForOf]=\"items\"></ng-template>\n * </ul>\n * ```\n *\n * Inner {\\@link TemplateRef}:\n * ```\n *   <li>{{item}}</li>\n * ```\n *\n * Notice that the original template is broken down into two separate {\\@link TemplateRef}s.\n *\n * The outer/inner {\\@link TemplateRef}s are then assembled into views like so:\n *\n * ```\n * <!-- ViewRef: outer-0 -->\n * Count: 2\n * <ul>\n *   <ng-template view-container-ref></ng-template>\n *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->\n *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->\n * </ul>\n * <!-- /ViewRef: outer-0 -->\n * ```\n * \\@experimental\n * @abstract\n */\nexport { EmbeddedViewRef };\nfunction EmbeddedViewRef_tsickle_Closure_declarations() {\n    /**\n     * @abstract\n     * @return {?}\n     */\n    EmbeddedViewRef.prototype.context = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    EmbeddedViewRef.prototype.rootNodes = function () { };\n}\n/**\n * @record\n */\nexport function InternalViewRef() { }\nfunction InternalViewRef_tsickle_Closure_declarations() {\n    /** @type {?} */\n    InternalViewRef.prototype.detachFromAppRef;\n    /** @type {?} */\n    InternalViewRef.prototype.attachToAppRef;\n}\n//# sourceMappingURL=view_ref.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nvar EventListener = /** @class */ (function () {\n    function EventListener(name, callback) {\n        this.name = name;\n        this.callback = callback;\n    }\n    return EventListener;\n}());\nexport { EventListener };\nfunction EventListener_tsickle_Closure_declarations() {\n    /** @type {?} */\n    EventListener.prototype.name;\n    /** @type {?} */\n    EventListener.prototype.callback;\n}\n/**\n * \\@experimental All debugging apis are currently experimental.\n */\nvar /**\n * \\@experimental All debugging apis are currently experimental.\n */\nDebugNode = /** @class */ (function () {\n    function DebugNode(nativeNode, parent, _debugContext) {\n        this._debugContext = _debugContext;\n        this.nativeNode = nativeNode;\n        if (parent && parent instanceof DebugElement) {\n            parent.addChild(this);\n        }\n        else {\n            this.parent = null;\n        }\n        this.listeners = [];\n    }\n    Object.defineProperty(DebugNode.prototype, \"injector\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._debugContext.injector; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode.prototype, \"componentInstance\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._debugContext.component; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode.prototype, \"context\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._debugContext.context; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode.prototype, \"references\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._debugContext.references; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode.prototype, \"providerTokens\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._debugContext.providerTokens; },\n        enumerable: true,\n        configurable: true\n    });\n    return DebugNode;\n}());\n/**\n * \\@experimental All debugging apis are currently experimental.\n */\nexport { DebugNode };\nfunction DebugNode_tsickle_Closure_declarations() {\n    /** @type {?} */\n    DebugNode.prototype.nativeNode;\n    /** @type {?} */\n    DebugNode.prototype.listeners;\n    /** @type {?} */\n    DebugNode.prototype.parent;\n    /** @type {?} */\n    DebugNode.prototype._debugContext;\n}\n/**\n * \\@experimental All debugging apis are currently experimental.\n */\nvar /**\n * \\@experimental All debugging apis are currently experimental.\n */\nDebugElement = /** @class */ (function (_super) {\n    tslib_1.__extends(DebugElement, _super);\n    function DebugElement(nativeNode, parent, _debugContext) {\n        var _this = _super.call(this, nativeNode, parent, _debugContext) || this;\n        _this.properties = {};\n        _this.attributes = {};\n        _this.classes = {};\n        _this.styles = {};\n        _this.childNodes = [];\n        _this.nativeElement = nativeNode;\n        return _this;\n    }\n    /**\n     * @param {?} child\n     * @return {?}\n     */\n    DebugElement.prototype.addChild = /**\n     * @param {?} child\n     * @return {?}\n     */\n    function (child) {\n        if (child) {\n            this.childNodes.push(child);\n            child.parent = this;\n        }\n    };\n    /**\n     * @param {?} child\n     * @return {?}\n     */\n    DebugElement.prototype.removeChild = /**\n     * @param {?} child\n     * @return {?}\n     */\n    function (child) {\n        var /** @type {?} */ childIndex = this.childNodes.indexOf(child);\n        if (childIndex !== -1) {\n            child.parent = null;\n            this.childNodes.splice(childIndex, 1);\n        }\n    };\n    /**\n     * @param {?} child\n     * @param {?} newChildren\n     * @return {?}\n     */\n    DebugElement.prototype.insertChildrenAfter = /**\n     * @param {?} child\n     * @param {?} newChildren\n     * @return {?}\n     */\n    function (child, newChildren) {\n        var _this = this;\n        var /** @type {?} */ siblingIndex = this.childNodes.indexOf(child);\n        if (siblingIndex !== -1) {\n            (_a = this.childNodes).splice.apply(_a, [siblingIndex + 1, 0].concat(newChildren));\n            newChildren.forEach(function (c) {\n                if (c.parent) {\n                    c.parent.removeChild(c);\n                }\n                c.parent = _this;\n            });\n        }\n        var _a;\n    };\n    /**\n     * @param {?} refChild\n     * @param {?} newChild\n     * @return {?}\n     */\n    DebugElement.prototype.insertBefore = /**\n     * @param {?} refChild\n     * @param {?} newChild\n     * @return {?}\n     */\n    function (refChild, newChild) {\n        var /** @type {?} */ refIndex = this.childNodes.indexOf(refChild);\n        if (refIndex === -1) {\n            this.addChild(newChild);\n        }\n        else {\n            if (newChild.parent) {\n                newChild.parent.removeChild(newChild);\n            }\n            newChild.parent = this;\n            this.childNodes.splice(refIndex, 0, newChild);\n        }\n    };\n    /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    DebugElement.prototype.query = /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    function (predicate) {\n        var /** @type {?} */ results = this.queryAll(predicate);\n        return results[0] || null;\n    };\n    /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    DebugElement.prototype.queryAll = /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    function (predicate) {\n        var /** @type {?} */ matches = [];\n        _queryElementChildren(this, predicate, matches);\n        return matches;\n    };\n    /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    DebugElement.prototype.queryAllNodes = /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    function (predicate) {\n        var /** @type {?} */ matches = [];\n        _queryNodeChildren(this, predicate, matches);\n        return matches;\n    };\n    Object.defineProperty(DebugElement.prototype, \"children\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return /** @type {?} */ (this.childNodes.filter(function (node) { return node instanceof DebugElement; }));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} eventName\n     * @param {?} eventObj\n     * @return {?}\n     */\n    DebugElement.prototype.triggerEventHandler = /**\n     * @param {?} eventName\n     * @param {?} eventObj\n     * @return {?}\n     */\n    function (eventName, eventObj) {\n        this.listeners.forEach(function (listener) {\n            if (listener.name == eventName) {\n                listener.callback(eventObj);\n            }\n        });\n    };\n    return DebugElement;\n}(DebugNode));\n/**\n * \\@experimental All debugging apis are currently experimental.\n */\nexport { DebugElement };\nfunction DebugElement_tsickle_Closure_declarations() {\n    /** @type {?} */\n    DebugElement.prototype.name;\n    /** @type {?} */\n    DebugElement.prototype.properties;\n    /** @type {?} */\n    DebugElement.prototype.attributes;\n    /** @type {?} */\n    DebugElement.prototype.classes;\n    /** @type {?} */\n    DebugElement.prototype.styles;\n    /** @type {?} */\n    DebugElement.prototype.childNodes;\n    /** @type {?} */\n    DebugElement.prototype.nativeElement;\n}\n/**\n * \\@experimental\n * @param {?} debugEls\n * @return {?}\n */\nexport function asNativeElements(debugEls) {\n    return debugEls.map(function (el) { return el.nativeElement; });\n}\n/**\n * @param {?} element\n * @param {?} predicate\n * @param {?} matches\n * @return {?}\n */\nfunction _queryElementChildren(element, predicate, matches) {\n    element.childNodes.forEach(function (node) {\n        if (node instanceof DebugElement) {\n            if (predicate(node)) {\n                matches.push(node);\n            }\n            _queryElementChildren(node, predicate, matches);\n        }\n    });\n}\n/**\n * @param {?} parentNode\n * @param {?} predicate\n * @param {?} matches\n * @return {?}\n */\nfunction _queryNodeChildren(parentNode, predicate, matches) {\n    if (parentNode instanceof DebugElement) {\n        parentNode.childNodes.forEach(function (node) {\n            if (predicate(node)) {\n                matches.push(node);\n            }\n            if (node instanceof DebugElement) {\n                _queryNodeChildren(node, predicate, matches);\n            }\n        });\n    }\n}\n// Need to keep the nodes in a global Map so that multiple angular apps are supported.\nvar /** @type {?} */ _nativeNodeToDebugNode = new Map();\n/**\n * \\@experimental\n * @param {?} nativeNode\n * @return {?}\n */\nexport function getDebugNode(nativeNode) {\n    return _nativeNodeToDebugNode.get(nativeNode) || null;\n}\n/**\n * @return {?}\n */\nexport function getAllDebugNodes() {\n    return Array.from(_nativeNodeToDebugNode.values());\n}\n/**\n * @param {?} node\n * @return {?}\n */\nexport function indexDebugNode(node) {\n    _nativeNodeToDebugNode.set(node.nativeNode, node);\n}\n/**\n * @param {?} node\n * @return {?}\n */\nexport function removeDebugNodeFromIndex(node) {\n    _nativeNodeToDebugNode.delete(node.nativeNode);\n}\n/**\n * A boolean-valued function over a value, possibly including context information\n * regarding that value's position in an array.\n *\n * \\@experimental All debugging apis are currently experimental.\n * @record\n */\nexport function Predicate() { }\nfunction Predicate_tsickle_Closure_declarations() {\n    /* TODO: handle strange member:\n    (value: T): boolean;\n    */\n}\n//# sourceMappingURL=debug_node.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { getSymbolIterator, looseIdentical } from '../util';\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nexport function devModeEqual(a, b) {\n    var /** @type {?} */ isListLikeIterableA = isListLikeIterable(a);\n    var /** @type {?} */ isListLikeIterableB = isListLikeIterable(b);\n    if (isListLikeIterableA && isListLikeIterableB) {\n        return areIterablesEqual(a, b, devModeEqual);\n    }\n    else {\n        var /** @type {?} */ isAObject = a && (typeof a === 'object' || typeof a === 'function');\n        var /** @type {?} */ isBObject = b && (typeof b === 'object' || typeof b === 'function');\n        if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {\n            return true;\n        }\n        else {\n            return looseIdentical(a, b);\n        }\n    }\n}\n/**\n * Indicates that the result of a {\\@link Pipe} transformation has changed even though the\n * reference has not changed.\n *\n * Wrapped values are unwrapped automatically during the change detection, and the unwrapped value\n * is stored.\n *\n * Example:\n *\n * ```\n * if (this._latestValue === this._latestReturnedValue) {\n *    return this._latestReturnedValue;\n *  } else {\n *    this._latestReturnedValue = this._latestValue;\n *    return WrappedValue.wrap(this._latestValue); // this will force update\n *  }\n * ```\n * \\@stable\n */\nvar /**\n * Indicates that the result of a {\\@link Pipe} transformation has changed even though the\n * reference has not changed.\n *\n * Wrapped values are unwrapped automatically during the change detection, and the unwrapped value\n * is stored.\n *\n * Example:\n *\n * ```\n * if (this._latestValue === this._latestReturnedValue) {\n *    return this._latestReturnedValue;\n *  } else {\n *    this._latestReturnedValue = this._latestValue;\n *    return WrappedValue.wrap(this._latestValue); // this will force update\n *  }\n * ```\n * \\@stable\n */\nWrappedValue = /** @class */ (function () {\n    function WrappedValue(value) {\n        this.wrapped = value;\n    }\n    /** Creates a wrapped value. */\n    /**\n     * Creates a wrapped value.\n     * @param {?} value\n     * @return {?}\n     */\n    WrappedValue.wrap = /**\n     * Creates a wrapped value.\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) { return new WrappedValue(value); };\n    /**\n     * Returns the underlying value of a wrapped value.\n     * Returns the given `value` when it is not wrapped.\n     **/\n    /**\n     * Returns the underlying value of a wrapped value.\n     * Returns the given `value` when it is not wrapped.\n     *\n     * @param {?} value\n     * @return {?}\n     */\n    WrappedValue.unwrap = /**\n     * Returns the underlying value of a wrapped value.\n     * Returns the given `value` when it is not wrapped.\n     *\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) { return WrappedValue.isWrapped(value) ? value.wrapped : value; };\n    /** Returns true if `value` is a wrapped value. */\n    /**\n     * Returns true if `value` is a wrapped value.\n     * @param {?} value\n     * @return {?}\n     */\n    WrappedValue.isWrapped = /**\n     * Returns true if `value` is a wrapped value.\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) { return value instanceof WrappedValue; };\n    return WrappedValue;\n}());\n/**\n * Indicates that the result of a {\\@link Pipe} transformation has changed even though the\n * reference has not changed.\n *\n * Wrapped values are unwrapped automatically during the change detection, and the unwrapped value\n * is stored.\n *\n * Example:\n *\n * ```\n * if (this._latestValue === this._latestReturnedValue) {\n *    return this._latestReturnedValue;\n *  } else {\n *    this._latestReturnedValue = this._latestValue;\n *    return WrappedValue.wrap(this._latestValue); // this will force update\n *  }\n * ```\n * \\@stable\n */\nexport { WrappedValue };\nfunction WrappedValue_tsickle_Closure_declarations() {\n    /**\n     * @deprecated from 5.3, use `unwrap()` instead - will switch to protected\n     * @type {?}\n     */\n    WrappedValue.prototype.wrapped;\n}\n/**\n * Represents a basic change from a previous to a new value.\n * \\@stable\n */\nvar /**\n * Represents a basic change from a previous to a new value.\n * \\@stable\n */\nSimpleChange = /** @class */ (function () {\n    function SimpleChange(previousValue, currentValue, firstChange) {\n        this.previousValue = previousValue;\n        this.currentValue = currentValue;\n        this.firstChange = firstChange;\n    }\n    /**\n     * Check whether the new value is the first value assigned.\n     */\n    /**\n     * Check whether the new value is the first value assigned.\n     * @return {?}\n     */\n    SimpleChange.prototype.isFirstChange = /**\n     * Check whether the new value is the first value assigned.\n     * @return {?}\n     */\n    function () { return this.firstChange; };\n    return SimpleChange;\n}());\n/**\n * Represents a basic change from a previous to a new value.\n * \\@stable\n */\nexport { SimpleChange };\nfunction SimpleChange_tsickle_Closure_declarations() {\n    /** @type {?} */\n    SimpleChange.prototype.previousValue;\n    /** @type {?} */\n    SimpleChange.prototype.currentValue;\n    /** @type {?} */\n    SimpleChange.prototype.firstChange;\n}\n/**\n * @param {?} obj\n * @return {?}\n */\nexport function isListLikeIterable(obj) {\n    if (!isJsObject(obj))\n        return false;\n    return Array.isArray(obj) ||\n        (!(obj instanceof Map) && // JS Map are iterables but return entries as [k, v]\n            // JS Map are iterables but return entries as [k, v]\n            getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop\n}\n/**\n * @param {?} a\n * @param {?} b\n * @param {?} comparator\n * @return {?}\n */\nexport function areIterablesEqual(a, b, comparator) {\n    var /** @type {?} */ iterator1 = a[getSymbolIterator()]();\n    var /** @type {?} */ iterator2 = b[getSymbolIterator()]();\n    while (true) {\n        var /** @type {?} */ item1 = iterator1.next();\n        var /** @type {?} */ item2 = iterator2.next();\n        if (item1.done && item2.done)\n            return true;\n        if (item1.done || item2.done)\n            return false;\n        if (!comparator(item1.value, item2.value))\n            return false;\n    }\n}\n/**\n * @param {?} obj\n * @param {?} fn\n * @return {?}\n */\nexport function iterateListLike(obj, fn) {\n    if (Array.isArray(obj)) {\n        for (var /** @type {?} */ i = 0; i < obj.length; i++) {\n            fn(obj[i]);\n        }\n    }\n    else {\n        var /** @type {?} */ iterator = obj[getSymbolIterator()]();\n        var /** @type {?} */ item = void 0;\n        while (!((item = iterator.next()).done)) {\n            fn(item.value);\n        }\n    }\n}\n/**\n * @param {?} o\n * @return {?}\n */\nexport function isJsObject(o) {\n    return o !== null && (typeof o === 'function' || typeof o === 'object');\n}\n//# sourceMappingURL=change_detection_util.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { looseIdentical, stringify } from '../../util';\nimport { isListLikeIterable, iterateListLike } from '../change_detection_util';\nvar DefaultIterableDifferFactory = /** @class */ (function () {\n    function DefaultIterableDifferFactory() {\n    }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    DefaultIterableDifferFactory.prototype.supports = /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function (obj) { return isListLikeIterable(obj); };\n    /**\n     * @template V\n     * @param {?=} trackByFn\n     * @return {?}\n     */\n    DefaultIterableDifferFactory.prototype.create = /**\n     * @template V\n     * @param {?=} trackByFn\n     * @return {?}\n     */\n    function (trackByFn) {\n        return new DefaultIterableDiffer(trackByFn);\n    };\n    return DefaultIterableDifferFactory;\n}());\nexport { DefaultIterableDifferFactory };\nvar /** @type {?} */ trackByIdentity = function (index, item) { return item; };\nvar ɵ0 = trackByIdentity;\n/**\n * @deprecated v4.0.0 - Should not be part of public API.\n */\nvar /**\n * @deprecated v4.0.0 - Should not be part of public API.\n */\nDefaultIterableDiffer = /** @class */ (function () {\n    function DefaultIterableDiffer(trackByFn) {\n        this.length = 0;\n        this._linkedRecords = null;\n        this._unlinkedRecords = null;\n        this._previousItHead = null;\n        this._itHead = null;\n        this._itTail = null;\n        this._additionsHead = null;\n        this._additionsTail = null;\n        this._movesHead = null;\n        this._movesTail = null;\n        this._removalsHead = null;\n        this._removalsTail = null;\n        this._identityChangesHead = null;\n        this._identityChangesTail = null;\n        this._trackByFn = trackByFn || trackByIdentity;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.forEachItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        var /** @type {?} */ record;\n        for (record = this._itHead; record !== null; record = record._next) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.forEachOperation = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        var /** @type {?} */ nextIt = this._itHead;\n        var /** @type {?} */ nextRemove = this._removalsHead;\n        var /** @type {?} */ addRemoveOffset = 0;\n        var /** @type {?} */ moveOffsets = null;\n        while (nextIt || nextRemove) {\n            // Figure out which is the next record to process\n            // Order: remove, add, move\n            var /** @type {?} */ record = !nextRemove ||\n                nextIt && /** @type {?} */ ((nextIt.currentIndex)) < getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ? /** @type {?} */\n                ((nextIt)) :\n                nextRemove;\n            var /** @type {?} */ adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);\n            var /** @type {?} */ currentIndex = record.currentIndex;\n            // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary\n            if (record === nextRemove) {\n                addRemoveOffset--;\n                nextRemove = nextRemove._nextRemoved;\n            }\n            else {\n                nextIt = /** @type {?} */ ((nextIt))._next;\n                if (record.previousIndex == null) {\n                    addRemoveOffset++;\n                }\n                else {\n                    // INVARIANT:  currentIndex < previousIndex\n                    if (!moveOffsets)\n                        moveOffsets = [];\n                    var /** @type {?} */ localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;\n                    var /** @type {?} */ localCurrentIndex = /** @type {?} */ ((currentIndex)) - addRemoveOffset;\n                    if (localMovePreviousIndex != localCurrentIndex) {\n                        for (var /** @type {?} */ i = 0; i < localMovePreviousIndex; i++) {\n                            var /** @type {?} */ offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);\n                            var /** @type {?} */ index = offset + i;\n                            if (localCurrentIndex <= index && index < localMovePreviousIndex) {\n                                moveOffsets[i] = offset + 1;\n                            }\n                        }\n                        var /** @type {?} */ previousIndex = record.previousIndex;\n                        moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;\n                    }\n                }\n            }\n            if (adjPreviousIndex !== currentIndex) {\n                fn(record, adjPreviousIndex, currentIndex);\n            }\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.forEachPreviousItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        var /** @type {?} */ record;\n        for (record = this._previousItHead; record !== null; record = record._nextPrevious) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.forEachAddedItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        var /** @type {?} */ record;\n        for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.forEachMovedItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        var /** @type {?} */ record;\n        for (record = this._movesHead; record !== null; record = record._nextMoved) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.forEachRemovedItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        var /** @type {?} */ record;\n        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.forEachIdentityChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        var /** @type {?} */ record;\n        for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} collection\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.diff = /**\n     * @param {?} collection\n     * @return {?}\n     */\n    function (collection) {\n        if (collection == null)\n            collection = [];\n        if (!isListLikeIterable(collection)) {\n            throw new Error(\"Error trying to diff '\" + stringify(collection) + \"'. Only arrays and iterables are allowed\");\n        }\n        if (this.check(collection)) {\n            return this;\n        }\n        else {\n            return null;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.onDestroy = /**\n     * @return {?}\n     */\n    function () { };\n    /**\n     * @param {?} collection\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.check = /**\n     * @param {?} collection\n     * @return {?}\n     */\n    function (collection) {\n        var _this = this;\n        this._reset();\n        var /** @type {?} */ record = this._itHead;\n        var /** @type {?} */ mayBeDirty = false;\n        var /** @type {?} */ index;\n        var /** @type {?} */ item;\n        var /** @type {?} */ itemTrackBy;\n        if (Array.isArray(collection)) {\n            (/** @type {?} */ (this)).length = collection.length;\n            for (var /** @type {?} */ index_1 = 0; index_1 < this.length; index_1++) {\n                item = collection[index_1];\n                itemTrackBy = this._trackByFn(index_1, item);\n                if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n                    record = this._mismatch(record, item, itemTrackBy, index_1);\n                    mayBeDirty = true;\n                }\n                else {\n                    if (mayBeDirty) {\n                        // TODO(misko): can we limit this to duplicates only?\n                        record = this._verifyReinsertion(record, item, itemTrackBy, index_1);\n                    }\n                    if (!looseIdentical(record.item, item))\n                        this._addIdentityChange(record, item);\n                }\n                record = record._next;\n            }\n        }\n        else {\n            index = 0;\n            iterateListLike(collection, function (item) {\n                itemTrackBy = _this._trackByFn(index, item);\n                if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n                    record = _this._mismatch(record, item, itemTrackBy, index);\n                    mayBeDirty = true;\n                }\n                else {\n                    if (mayBeDirty) {\n                        // TODO(misko): can we limit this to duplicates only?\n                        record = _this._verifyReinsertion(record, item, itemTrackBy, index);\n                    }\n                    if (!looseIdentical(record.item, item))\n                        _this._addIdentityChange(record, item);\n                }\n                record = record._next;\n                index++;\n            });\n            (/** @type {?} */ (this)).length = index;\n        }\n        this._truncate(record);\n        (/** @type {?} */ (this)).collection = collection;\n        return this.isDirty;\n    };\n    Object.defineProperty(DefaultIterableDiffer.prototype, \"isDirty\", {\n        /* CollectionChanges is considered dirty if it has any additions, moves, removals, or identity\n         * changes.\n         */\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this._additionsHead !== null || this._movesHead !== null ||\n                this._removalsHead !== null || this._identityChangesHead !== null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Reset the state of the change objects to show no changes. This means set previousKey to\n     * currentKey, and clear all of the queues (additions, moves, removals).\n     * Set the previousIndexes of moved and added items to their currentIndexes\n     * Reset the list of additions, moves and removals\n     *\n     * @internal\n     */\n    /**\n     * Reset the state of the change objects to show no changes. This means set previousKey to\n     * currentKey, and clear all of the queues (additions, moves, removals).\n     * Set the previousIndexes of moved and added items to their currentIndexes\n     * Reset the list of additions, moves and removals\n     *\n     * \\@internal\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._reset = /**\n     * Reset the state of the change objects to show no changes. This means set previousKey to\n     * currentKey, and clear all of the queues (additions, moves, removals).\n     * Set the previousIndexes of moved and added items to their currentIndexes\n     * Reset the list of additions, moves and removals\n     *\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        if (this.isDirty) {\n            var /** @type {?} */ record = void 0;\n            var /** @type {?} */ nextRecord = void 0;\n            for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {\n                record._nextPrevious = record._next;\n            }\n            for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n                record.previousIndex = record.currentIndex;\n            }\n            this._additionsHead = this._additionsTail = null;\n            for (record = this._movesHead; record !== null; record = nextRecord) {\n                record.previousIndex = record.currentIndex;\n                nextRecord = record._nextMoved;\n            }\n            this._movesHead = this._movesTail = null;\n            this._removalsHead = this._removalsTail = null;\n            this._identityChangesHead = this._identityChangesTail = null;\n            // todo(vicb) when assert gets supported\n            // assert(!this.isDirty);\n        }\n    };\n    /**\n     * This is the core function which handles differences between collections.\n     *\n     * - `record` is the record which we saw at this position last time. If null then it is a new\n     *   item.\n     * - `item` is the current item in the collection\n     * - `index` is the position of the item in the collection\n     *\n     * @internal\n     */\n    /**\n     * This is the core function which handles differences between collections.\n     *\n     * - `record` is the record which we saw at this position last time. If null then it is a new\n     *   item.\n     * - `item` is the current item in the collection\n     * - `index` is the position of the item in the collection\n     *\n     * \\@internal\n     * @param {?} record\n     * @param {?} item\n     * @param {?} itemTrackBy\n     * @param {?} index\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._mismatch = /**\n     * This is the core function which handles differences between collections.\n     *\n     * - `record` is the record which we saw at this position last time. If null then it is a new\n     *   item.\n     * - `item` is the current item in the collection\n     * - `index` is the position of the item in the collection\n     *\n     * \\@internal\n     * @param {?} record\n     * @param {?} item\n     * @param {?} itemTrackBy\n     * @param {?} index\n     * @return {?}\n     */\n    function (record, item, itemTrackBy, index) {\n        // The previous record after which we will append the current one.\n        var /** @type {?} */ previousRecord;\n        if (record === null) {\n            previousRecord = this._itTail;\n        }\n        else {\n            previousRecord = record._prev;\n            // Remove the record from the collection since we know it does not match the item.\n            this._remove(record);\n        }\n        // Attempt to see if we have seen the item before.\n        record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);\n        if (record !== null) {\n            // We have seen this before, we need to move it forward in the collection.\n            // But first we need to check if identity changed, so we can update in view if necessary\n            if (!looseIdentical(record.item, item))\n                this._addIdentityChange(record, item);\n            this._moveAfter(record, previousRecord, index);\n        }\n        else {\n            // Never seen it, check evicted list.\n            record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n            if (record !== null) {\n                // It is an item which we have evicted earlier: reinsert it back into the list.\n                // But first we need to check if identity changed, so we can update in view if necessary\n                if (!looseIdentical(record.item, item))\n                    this._addIdentityChange(record, item);\n                this._reinsertAfter(record, previousRecord, index);\n            }\n            else {\n                // It is a new item: add it.\n                record =\n                    this._addAfter(new IterableChangeRecord_(item, itemTrackBy), previousRecord, index);\n            }\n        }\n        return record;\n    };\n    /**\n     * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\n     *\n     * Use case: `[a, a]` => `[b, a, a]`\n     *\n     * If we did not have this check then the insertion of `b` would:\n     *   1) evict first `a`\n     *   2) insert `b` at `0` index.\n     *   3) leave `a` at index `1` as is. <-- this is wrong!\n     *   3) reinsert `a` at index 2. <-- this is wrong!\n     *\n     * The correct behavior is:\n     *   1) evict first `a`\n     *   2) insert `b` at `0` index.\n     *   3) reinsert `a` at index 1.\n     *   3) move `a` at from `1` to `2`.\n     *\n     *\n     * Double check that we have not evicted a duplicate item. We need to check if the item type may\n     * have already been removed:\n     * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\n     * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\n     * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\n     * at the end.\n     *\n     * @internal\n     */\n    /**\n     * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\n     *\n     * Use case: `[a, a]` => `[b, a, a]`\n     *\n     * If we did not have this check then the insertion of `b` would:\n     *   1) evict first `a`\n     *   2) insert `b` at `0` index.\n     *   3) leave `a` at index `1` as is. <-- this is wrong!\n     *   3) reinsert `a` at index 2. <-- this is wrong!\n     *\n     * The correct behavior is:\n     *   1) evict first `a`\n     *   2) insert `b` at `0` index.\n     *   3) reinsert `a` at index 1.\n     *   3) move `a` at from `1` to `2`.\n     *\n     *\n     * Double check that we have not evicted a duplicate item. We need to check if the item type may\n     * have already been removed:\n     * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\n     * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\n     * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\n     * at the end.\n     *\n     * \\@internal\n     * @param {?} record\n     * @param {?} item\n     * @param {?} itemTrackBy\n     * @param {?} index\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._verifyReinsertion = /**\n     * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\n     *\n     * Use case: `[a, a]` => `[b, a, a]`\n     *\n     * If we did not have this check then the insertion of `b` would:\n     *   1) evict first `a`\n     *   2) insert `b` at `0` index.\n     *   3) leave `a` at index `1` as is. <-- this is wrong!\n     *   3) reinsert `a` at index 2. <-- this is wrong!\n     *\n     * The correct behavior is:\n     *   1) evict first `a`\n     *   2) insert `b` at `0` index.\n     *   3) reinsert `a` at index 1.\n     *   3) move `a` at from `1` to `2`.\n     *\n     *\n     * Double check that we have not evicted a duplicate item. We need to check if the item type may\n     * have already been removed:\n     * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\n     * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\n     * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\n     * at the end.\n     *\n     * \\@internal\n     * @param {?} record\n     * @param {?} item\n     * @param {?} itemTrackBy\n     * @param {?} index\n     * @return {?}\n     */\n    function (record, item, itemTrackBy, index) {\n        var /** @type {?} */ reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n        if (reinsertRecord !== null) {\n            record = this._reinsertAfter(reinsertRecord, /** @type {?} */ ((record._prev)), index);\n        }\n        else if (record.currentIndex != index) {\n            record.currentIndex = index;\n            this._addToMoves(record, index);\n        }\n        return record;\n    };\n    /**\n     * Get rid of any excess {@link IterableChangeRecord_}s from the previous collection\n     *\n     * - `record` The first excess {@link IterableChangeRecord_}.\n     *\n     * @internal\n     */\n    /**\n     * Get rid of any excess {\\@link IterableChangeRecord_}s from the previous collection\n     *\n     * - `record` The first excess {\\@link IterableChangeRecord_}.\n     *\n     * \\@internal\n     * @param {?} record\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._truncate = /**\n     * Get rid of any excess {\\@link IterableChangeRecord_}s from the previous collection\n     *\n     * - `record` The first excess {\\@link IterableChangeRecord_}.\n     *\n     * \\@internal\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        // Anything after that needs to be removed;\n        while (record !== null) {\n            var /** @type {?} */ nextRecord = record._next;\n            this._addToRemovals(this._unlink(record));\n            record = nextRecord;\n        }\n        if (this._unlinkedRecords !== null) {\n            this._unlinkedRecords.clear();\n        }\n        if (this._additionsTail !== null) {\n            this._additionsTail._nextAdded = null;\n        }\n        if (this._movesTail !== null) {\n            this._movesTail._nextMoved = null;\n        }\n        if (this._itTail !== null) {\n            this._itTail._next = null;\n        }\n        if (this._removalsTail !== null) {\n            this._removalsTail._nextRemoved = null;\n        }\n        if (this._identityChangesTail !== null) {\n            this._identityChangesTail._nextIdentityChange = null;\n        }\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._reinsertAfter = /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    function (record, prevRecord, index) {\n        if (this._unlinkedRecords !== null) {\n            this._unlinkedRecords.remove(record);\n        }\n        var /** @type {?} */ prev = record._prevRemoved;\n        var /** @type {?} */ next = record._nextRemoved;\n        if (prev === null) {\n            this._removalsHead = next;\n        }\n        else {\n            prev._nextRemoved = next;\n        }\n        if (next === null) {\n            this._removalsTail = prev;\n        }\n        else {\n            next._prevRemoved = prev;\n        }\n        this._insertAfter(record, prevRecord, index);\n        this._addToMoves(record, index);\n        return record;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._moveAfter = /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    function (record, prevRecord, index) {\n        this._unlink(record);\n        this._insertAfter(record, prevRecord, index);\n        this._addToMoves(record, index);\n        return record;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._addAfter = /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    function (record, prevRecord, index) {\n        this._insertAfter(record, prevRecord, index);\n        if (this._additionsTail === null) {\n            // todo(vicb)\n            // assert(this._additionsHead === null);\n            this._additionsTail = this._additionsHead = record;\n        }\n        else {\n            // todo(vicb)\n            // assert(_additionsTail._nextAdded === null);\n            // assert(record._nextAdded === null);\n            this._additionsTail = this._additionsTail._nextAdded = record;\n        }\n        return record;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._insertAfter = /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    function (record, prevRecord, index) {\n        // todo(vicb)\n        // assert(record != prevRecord);\n        // assert(record._next === null);\n        // assert(record._prev === null);\n        var /** @type {?} */ next = prevRecord === null ? this._itHead : prevRecord._next;\n        // todo(vicb)\n        // assert(next != record);\n        // assert(prevRecord != record);\n        record._next = next;\n        record._prev = prevRecord;\n        if (next === null) {\n            this._itTail = record;\n        }\n        else {\n            next._prev = record;\n        }\n        if (prevRecord === null) {\n            this._itHead = record;\n        }\n        else {\n            prevRecord._next = record;\n        }\n        if (this._linkedRecords === null) {\n            this._linkedRecords = new _DuplicateMap();\n        }\n        this._linkedRecords.put(record);\n        record.currentIndex = index;\n        return record;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} record\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._remove = /**\n     * \\@internal\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        return this._addToRemovals(this._unlink(record));\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} record\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._unlink = /**\n     * \\@internal\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        if (this._linkedRecords !== null) {\n            this._linkedRecords.remove(record);\n        }\n        var /** @type {?} */ prev = record._prev;\n        var /** @type {?} */ next = record._next;\n        // todo(vicb)\n        // assert((record._prev = null) === null);\n        // assert((record._next = null) === null);\n        if (prev === null) {\n            this._itHead = next;\n        }\n        else {\n            prev._next = next;\n        }\n        if (next === null) {\n            this._itTail = prev;\n        }\n        else {\n            next._prev = prev;\n        }\n        return record;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} toIndex\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._addToMoves = /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} toIndex\n     * @return {?}\n     */\n    function (record, toIndex) {\n        // todo(vicb)\n        // assert(record._nextMoved === null);\n        if (record.previousIndex === toIndex) {\n            return record;\n        }\n        if (this._movesTail === null) {\n            // todo(vicb)\n            // assert(_movesHead === null);\n            this._movesTail = this._movesHead = record;\n        }\n        else {\n            // todo(vicb)\n            // assert(_movesTail._nextMoved === null);\n            this._movesTail = this._movesTail._nextMoved = record;\n        }\n        return record;\n    };\n    /**\n     * @param {?} record\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._addToRemovals = /**\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        if (this._unlinkedRecords === null) {\n            this._unlinkedRecords = new _DuplicateMap();\n        }\n        this._unlinkedRecords.put(record);\n        record.currentIndex = null;\n        record._nextRemoved = null;\n        if (this._removalsTail === null) {\n            // todo(vicb)\n            // assert(_removalsHead === null);\n            this._removalsTail = this._removalsHead = record;\n            record._prevRemoved = null;\n        }\n        else {\n            // todo(vicb)\n            // assert(_removalsTail._nextRemoved === null);\n            // assert(record._nextRemoved === null);\n            record._prevRemoved = this._removalsTail;\n            this._removalsTail = this._removalsTail._nextRemoved = record;\n        }\n        return record;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} item\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._addIdentityChange = /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} item\n     * @return {?}\n     */\n    function (record, item) {\n        record.item = item;\n        if (this._identityChangesTail === null) {\n            this._identityChangesTail = this._identityChangesHead = record;\n        }\n        else {\n            this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;\n        }\n        return record;\n    };\n    return DefaultIterableDiffer;\n}());\n/**\n * @deprecated v4.0.0 - Should not be part of public API.\n */\nexport { DefaultIterableDiffer };\nfunction DefaultIterableDiffer_tsickle_Closure_declarations() {\n    /** @type {?} */\n    DefaultIterableDiffer.prototype.length;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype.collection;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._linkedRecords;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._unlinkedRecords;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._previousItHead;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._itHead;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._itTail;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._additionsHead;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._additionsTail;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._movesHead;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._movesTail;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._removalsHead;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._removalsTail;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._identityChangesHead;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._identityChangesTail;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._trackByFn;\n}\n/**\n * \\@stable\n */\nvar /**\n * \\@stable\n */\nIterableChangeRecord_ = /** @class */ (function () {\n    function IterableChangeRecord_(item, trackById) {\n        this.item = item;\n        this.trackById = trackById;\n        this.currentIndex = null;\n        this.previousIndex = null;\n        /**\n         * \\@internal\n         */\n        this._nextPrevious = null;\n        /**\n         * \\@internal\n         */\n        this._prev = null;\n        /**\n         * \\@internal\n         */\n        this._next = null;\n        /**\n         * \\@internal\n         */\n        this._prevDup = null;\n        /**\n         * \\@internal\n         */\n        this._nextDup = null;\n        /**\n         * \\@internal\n         */\n        this._prevRemoved = null;\n        /**\n         * \\@internal\n         */\n        this._nextRemoved = null;\n        /**\n         * \\@internal\n         */\n        this._nextAdded = null;\n        /**\n         * \\@internal\n         */\n        this._nextMoved = null;\n        /**\n         * \\@internal\n         */\n        this._nextIdentityChange = null;\n    }\n    return IterableChangeRecord_;\n}());\n/**\n * \\@stable\n */\nexport { IterableChangeRecord_ };\nfunction IterableChangeRecord__tsickle_Closure_declarations() {\n    /** @type {?} */\n    IterableChangeRecord_.prototype.currentIndex;\n    /** @type {?} */\n    IterableChangeRecord_.prototype.previousIndex;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._nextPrevious;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._prev;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._next;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._prevDup;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._nextDup;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._prevRemoved;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._nextRemoved;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._nextAdded;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._nextMoved;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._nextIdentityChange;\n    /** @type {?} */\n    IterableChangeRecord_.prototype.item;\n    /** @type {?} */\n    IterableChangeRecord_.prototype.trackById;\n}\nvar _DuplicateItemRecordList = /** @class */ (function () {\n    function _DuplicateItemRecordList() {\n        /**\n         * \\@internal\n         */\n        this._head = null;\n        /**\n         * \\@internal\n         */\n        this._tail = null;\n    }\n    /**\n     * Append the record to the list of duplicates.\n     *\n     * Note: by design all records in the list of duplicates hold the same value in record.item.\n     */\n    /**\n     * Append the record to the list of duplicates.\n     *\n     * Note: by design all records in the list of duplicates hold the same value in record.item.\n     * @param {?} record\n     * @return {?}\n     */\n    _DuplicateItemRecordList.prototype.add = /**\n     * Append the record to the list of duplicates.\n     *\n     * Note: by design all records in the list of duplicates hold the same value in record.item.\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        if (this._head === null) {\n            this._head = this._tail = record;\n            record._nextDup = null;\n            record._prevDup = null;\n        }\n        else {\n            /** @type {?} */ ((\n            // todo(vicb)\n            // assert(record.item ==  _head.item ||\n            //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);\n            this._tail))._nextDup = record;\n            record._prevDup = this._tail;\n            record._nextDup = null;\n            this._tail = record;\n        }\n    };\n    // Returns a IterableChangeRecord_ having IterableChangeRecord_.trackById == trackById and\n    // IterableChangeRecord_.currentIndex >= atOrAfterIndex\n    /**\n     * @param {?} trackById\n     * @param {?} atOrAfterIndex\n     * @return {?}\n     */\n    _DuplicateItemRecordList.prototype.get = /**\n     * @param {?} trackById\n     * @param {?} atOrAfterIndex\n     * @return {?}\n     */\n    function (trackById, atOrAfterIndex) {\n        var /** @type {?} */ record;\n        for (record = this._head; record !== null; record = record._nextDup) {\n            if ((atOrAfterIndex === null || atOrAfterIndex <= /** @type {?} */ ((record.currentIndex))) &&\n                looseIdentical(record.trackById, trackById)) {\n                return record;\n            }\n        }\n        return null;\n    };\n    /**\n     * Remove one {@link IterableChangeRecord_} from the list of duplicates.\n     *\n     * Returns whether the list of duplicates is empty.\n     */\n    /**\n     * Remove one {\\@link IterableChangeRecord_} from the list of duplicates.\n     *\n     * Returns whether the list of duplicates is empty.\n     * @param {?} record\n     * @return {?}\n     */\n    _DuplicateItemRecordList.prototype.remove = /**\n     * Remove one {\\@link IterableChangeRecord_} from the list of duplicates.\n     *\n     * Returns whether the list of duplicates is empty.\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        // todo(vicb)\n        // assert(() {\n        //  // verify that the record being removed is in the list.\n        //  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {\n        //    if (identical(cursor, record)) return true;\n        //  }\n        //  return false;\n        //});\n        var /** @type {?} */ prev = record._prevDup;\n        var /** @type {?} */ next = record._nextDup;\n        if (prev === null) {\n            this._head = next;\n        }\n        else {\n            prev._nextDup = next;\n        }\n        if (next === null) {\n            this._tail = prev;\n        }\n        else {\n            next._prevDup = prev;\n        }\n        return this._head === null;\n    };\n    return _DuplicateItemRecordList;\n}());\nfunction _DuplicateItemRecordList_tsickle_Closure_declarations() {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    _DuplicateItemRecordList.prototype._head;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    _DuplicateItemRecordList.prototype._tail;\n}\nvar _DuplicateMap = /** @class */ (function () {\n    function _DuplicateMap() {\n        this.map = new Map();\n    }\n    /**\n     * @param {?} record\n     * @return {?}\n     */\n    _DuplicateMap.prototype.put = /**\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        var /** @type {?} */ key = record.trackById;\n        var /** @type {?} */ duplicates = this.map.get(key);\n        if (!duplicates) {\n            duplicates = new _DuplicateItemRecordList();\n            this.map.set(key, duplicates);\n        }\n        duplicates.add(record);\n    };\n    /**\n     * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we\n     * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.\n     *\n     * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\n     * have any more `a`s needs to return the second `a`.\n     */\n    /**\n     * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we\n     * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.\n     *\n     * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\n     * have any more `a`s needs to return the second `a`.\n     * @param {?} trackById\n     * @param {?} atOrAfterIndex\n     * @return {?}\n     */\n    _DuplicateMap.prototype.get = /**\n     * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we\n     * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.\n     *\n     * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\n     * have any more `a`s needs to return the second `a`.\n     * @param {?} trackById\n     * @param {?} atOrAfterIndex\n     * @return {?}\n     */\n    function (trackById, atOrAfterIndex) {\n        var /** @type {?} */ key = trackById;\n        var /** @type {?} */ recordList = this.map.get(key);\n        return recordList ? recordList.get(trackById, atOrAfterIndex) : null;\n    };\n    /**\n     * Removes a {@link IterableChangeRecord_} from the list of duplicates.\n     *\n     * The list of duplicates also is removed from the map if it gets empty.\n     */\n    /**\n     * Removes a {\\@link IterableChangeRecord_} from the list of duplicates.\n     *\n     * The list of duplicates also is removed from the map if it gets empty.\n     * @param {?} record\n     * @return {?}\n     */\n    _DuplicateMap.prototype.remove = /**\n     * Removes a {\\@link IterableChangeRecord_} from the list of duplicates.\n     *\n     * The list of duplicates also is removed from the map if it gets empty.\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        var /** @type {?} */ key = record.trackById;\n        var /** @type {?} */ recordList = /** @type {?} */ ((this.map.get(key)));\n        // Remove the list of duplicates when it gets empty\n        if (recordList.remove(record)) {\n            this.map.delete(key);\n        }\n        return record;\n    };\n    Object.defineProperty(_DuplicateMap.prototype, \"isEmpty\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.map.size === 0; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    _DuplicateMap.prototype.clear = /**\n     * @return {?}\n     */\n    function () { this.map.clear(); };\n    return _DuplicateMap;\n}());\nfunction _DuplicateMap_tsickle_Closure_declarations() {\n    /** @type {?} */\n    _DuplicateMap.prototype.map;\n}\n/**\n * @param {?} item\n * @param {?} addRemoveOffset\n * @param {?} moveOffsets\n * @return {?}\n */\nfunction getPreviousIndex(item, addRemoveOffset, moveOffsets) {\n    var /** @type {?} */ previousIndex = item.previousIndex;\n    if (previousIndex === null)\n        return previousIndex;\n    var /** @type {?} */ moveOffset = 0;\n    if (moveOffsets && previousIndex < moveOffsets.length) {\n        moveOffset = moveOffsets[previousIndex];\n    }\n    return previousIndex + addRemoveOffset + moveOffset;\n}\nexport { ɵ0 };\n//# sourceMappingURL=default_iterable_differ.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { looseIdentical, stringify } from '../../util';\nimport { isJsObject } from '../change_detection_util';\nvar DefaultKeyValueDifferFactory = /** @class */ (function () {\n    function DefaultKeyValueDifferFactory() {\n    }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    DefaultKeyValueDifferFactory.prototype.supports = /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function (obj) { return obj instanceof Map || isJsObject(obj); };\n    /**\n     * @template K, V\n     * @return {?}\n     */\n    DefaultKeyValueDifferFactory.prototype.create = /**\n     * @template K, V\n     * @return {?}\n     */\n    function () { return new DefaultKeyValueDiffer(); };\n    return DefaultKeyValueDifferFactory;\n}());\nexport { DefaultKeyValueDifferFactory };\nvar DefaultKeyValueDiffer = /** @class */ (function () {\n    function DefaultKeyValueDiffer() {\n        this._records = new Map();\n        this._mapHead = null;\n        this._appendAfter = null;\n        this._previousMapHead = null;\n        this._changesHead = null;\n        this._changesTail = null;\n        this._additionsHead = null;\n        this._additionsTail = null;\n        this._removalsHead = null;\n        this._removalsTail = null;\n    }\n    Object.defineProperty(DefaultKeyValueDiffer.prototype, \"isDirty\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this._additionsHead !== null || this._changesHead !== null ||\n                this._removalsHead !== null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype.forEachItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        var /** @type {?} */ record;\n        for (record = this._mapHead; record !== null; record = record._next) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype.forEachPreviousItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        var /** @type {?} */ record;\n        for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype.forEachChangedItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        var /** @type {?} */ record;\n        for (record = this._changesHead; record !== null; record = record._nextChanged) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype.forEachAddedItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        var /** @type {?} */ record;\n        for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype.forEachRemovedItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        var /** @type {?} */ record;\n        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?=} map\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype.diff = /**\n     * @param {?=} map\n     * @return {?}\n     */\n    function (map) {\n        if (!map) {\n            map = new Map();\n        }\n        else if (!(map instanceof Map || isJsObject(map))) {\n            throw new Error(\"Error trying to diff '\" + stringify(map) + \"'. Only maps and objects are allowed\");\n        }\n        return this.check(map) ? this : null;\n    };\n    /**\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype.onDestroy = /**\n     * @return {?}\n     */\n    function () { };\n    /**\n     * Check the current state of the map vs the previous.\n     * The algorithm is optimised for when the keys do no change.\n     */\n    /**\n     * Check the current state of the map vs the previous.\n     * The algorithm is optimised for when the keys do no change.\n     * @param {?} map\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype.check = /**\n     * Check the current state of the map vs the previous.\n     * The algorithm is optimised for when the keys do no change.\n     * @param {?} map\n     * @return {?}\n     */\n    function (map) {\n        var _this = this;\n        this._reset();\n        var /** @type {?} */ insertBefore = this._mapHead;\n        this._appendAfter = null;\n        this._forEach(map, function (value, key) {\n            if (insertBefore && insertBefore.key === key) {\n                _this._maybeAddToChanges(insertBefore, value);\n                _this._appendAfter = insertBefore;\n                insertBefore = insertBefore._next;\n            }\n            else {\n                var /** @type {?} */ record = _this._getOrCreateRecordForKey(key, value);\n                insertBefore = _this._insertBeforeOrAppend(insertBefore, record);\n            }\n        });\n        // Items remaining at the end of the list have been deleted\n        if (insertBefore) {\n            if (insertBefore._prev) {\n                insertBefore._prev._next = null;\n            }\n            this._removalsHead = insertBefore;\n            for (var /** @type {?} */ record = insertBefore; record !== null; record = record._nextRemoved) {\n                if (record === this._mapHead) {\n                    this._mapHead = null;\n                }\n                this._records.delete(record.key);\n                record._nextRemoved = record._next;\n                record.previousValue = record.currentValue;\n                record.currentValue = null;\n                record._prev = null;\n                record._next = null;\n            }\n        }\n        // Make sure tails have no next records from previous runs\n        if (this._changesTail)\n            this._changesTail._nextChanged = null;\n        if (this._additionsTail)\n            this._additionsTail._nextAdded = null;\n        return this.isDirty;\n    };\n    /**\n     * Inserts a record before `before` or append at the end of the list when `before` is null.\n     *\n     * Notes:\n     * - This method appends at `this._appendAfter`,\n     * - This method updates `this._appendAfter`,\n     * - The return value is the new value for the insertion pointer.\n     * @param {?} before\n     * @param {?} record\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype._insertBeforeOrAppend = /**\n     * Inserts a record before `before` or append at the end of the list when `before` is null.\n     *\n     * Notes:\n     * - This method appends at `this._appendAfter`,\n     * - This method updates `this._appendAfter`,\n     * - The return value is the new value for the insertion pointer.\n     * @param {?} before\n     * @param {?} record\n     * @return {?}\n     */\n    function (before, record) {\n        if (before) {\n            var /** @type {?} */ prev = before._prev;\n            record._next = before;\n            record._prev = prev;\n            before._prev = record;\n            if (prev) {\n                prev._next = record;\n            }\n            if (before === this._mapHead) {\n                this._mapHead = record;\n            }\n            this._appendAfter = before;\n            return before;\n        }\n        if (this._appendAfter) {\n            this._appendAfter._next = record;\n            record._prev = this._appendAfter;\n        }\n        else {\n            this._mapHead = record;\n        }\n        this._appendAfter = record;\n        return null;\n    };\n    /**\n     * @param {?} key\n     * @param {?} value\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype._getOrCreateRecordForKey = /**\n     * @param {?} key\n     * @param {?} value\n     * @return {?}\n     */\n    function (key, value) {\n        if (this._records.has(key)) {\n            var /** @type {?} */ record_1 = /** @type {?} */ ((this._records.get(key)));\n            this._maybeAddToChanges(record_1, value);\n            var /** @type {?} */ prev = record_1._prev;\n            var /** @type {?} */ next = record_1._next;\n            if (prev) {\n                prev._next = next;\n            }\n            if (next) {\n                next._prev = prev;\n            }\n            record_1._next = null;\n            record_1._prev = null;\n            return record_1;\n        }\n        var /** @type {?} */ record = new KeyValueChangeRecord_(key);\n        this._records.set(key, record);\n        record.currentValue = value;\n        this._addToAdditions(record);\n        return record;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype._reset = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        if (this.isDirty) {\n            var /** @type {?} */ record = void 0;\n            // let `_previousMapHead` contain the state of the map before the changes\n            this._previousMapHead = this._mapHead;\n            for (record = this._previousMapHead; record !== null; record = record._next) {\n                record._nextPrevious = record._next;\n            }\n            // Update `record.previousValue` with the value of the item before the changes\n            // We need to update all changed items (that's those which have been added and changed)\n            for (record = this._changesHead; record !== null; record = record._nextChanged) {\n                record.previousValue = record.currentValue;\n            }\n            for (record = this._additionsHead; record != null; record = record._nextAdded) {\n                record.previousValue = record.currentValue;\n            }\n            this._changesHead = this._changesTail = null;\n            this._additionsHead = this._additionsTail = null;\n            this._removalsHead = null;\n        }\n    };\n    /**\n     * @param {?} record\n     * @param {?} newValue\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype._maybeAddToChanges = /**\n     * @param {?} record\n     * @param {?} newValue\n     * @return {?}\n     */\n    function (record, newValue) {\n        if (!looseIdentical(newValue, record.currentValue)) {\n            record.previousValue = record.currentValue;\n            record.currentValue = newValue;\n            this._addToChanges(record);\n        }\n    };\n    /**\n     * @param {?} record\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype._addToAdditions = /**\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        if (this._additionsHead === null) {\n            this._additionsHead = this._additionsTail = record;\n        }\n        else {\n            /** @type {?} */ ((this._additionsTail))._nextAdded = record;\n            this._additionsTail = record;\n        }\n    };\n    /**\n     * @param {?} record\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype._addToChanges = /**\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        if (this._changesHead === null) {\n            this._changesHead = this._changesTail = record;\n        }\n        else {\n            /** @type {?} */ ((this._changesTail))._nextChanged = record;\n            this._changesTail = record;\n        }\n    };\n    /**\n     * \\@internal\n     * @template K, V\n     * @param {?} obj\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype._forEach = /**\n     * \\@internal\n     * @template K, V\n     * @param {?} obj\n     * @param {?} fn\n     * @return {?}\n     */\n    function (obj, fn) {\n        if (obj instanceof Map) {\n            obj.forEach(fn);\n        }\n        else {\n            Object.keys(obj).forEach(function (k) { return fn(obj[k], k); });\n        }\n    };\n    return DefaultKeyValueDiffer;\n}());\nexport { DefaultKeyValueDiffer };\nfunction DefaultKeyValueDiffer_tsickle_Closure_declarations() {\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._records;\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._mapHead;\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._appendAfter;\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._previousMapHead;\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._changesHead;\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._changesTail;\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._additionsHead;\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._additionsTail;\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._removalsHead;\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._removalsTail;\n}\n/**\n * \\@stable\n */\nvar /**\n * \\@stable\n */\nKeyValueChangeRecord_ = /** @class */ (function () {\n    function KeyValueChangeRecord_(key) {\n        this.key = key;\n        this.previousValue = null;\n        this.currentValue = null;\n        /**\n         * \\@internal\n         */\n        this._nextPrevious = null;\n        /**\n         * \\@internal\n         */\n        this._next = null;\n        /**\n         * \\@internal\n         */\n        this._prev = null;\n        /**\n         * \\@internal\n         */\n        this._nextAdded = null;\n        /**\n         * \\@internal\n         */\n        this._nextRemoved = null;\n        /**\n         * \\@internal\n         */\n        this._nextChanged = null;\n    }\n    return KeyValueChangeRecord_;\n}());\nfunction KeyValueChangeRecord__tsickle_Closure_declarations() {\n    /** @type {?} */\n    KeyValueChangeRecord_.prototype.previousValue;\n    /** @type {?} */\n    KeyValueChangeRecord_.prototype.currentValue;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    KeyValueChangeRecord_.prototype._nextPrevious;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    KeyValueChangeRecord_.prototype._next;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    KeyValueChangeRecord_.prototype._prev;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    KeyValueChangeRecord_.prototype._nextAdded;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    KeyValueChangeRecord_.prototype._nextRemoved;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    KeyValueChangeRecord_.prototype._nextChanged;\n    /** @type {?} */\n    KeyValueChangeRecord_.prototype.key;\n}\n//# sourceMappingURL=default_keyvalue_differ.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Optional, SkipSelf } from '../../di/metadata';\n/**\n * A strategy for tracking changes over time to an iterable. Used by {\\@link NgForOf} to\n * respond to changes in an iterable by effecting equivalent changes in the DOM.\n *\n * \\@stable\n * @record\n */\nexport function IterableDiffer() { }\nfunction IterableDiffer_tsickle_Closure_declarations() {\n    /**\n     * Compute a difference between the previous state and the new `object` state.\n     *\n     * \\@param object containing the new value.\n     * \\@return an object describing the difference. The return value is only valid until the next\n     * `diff()` invocation.\n     * @type {?}\n     */\n    IterableDiffer.prototype.diff;\n}\n/**\n * An object describing the changes in the `Iterable` collection since last time\n * `IterableDiffer#diff()` was invoked.\n *\n * \\@stable\n * @record\n */\nexport function IterableChanges() { }\nfunction IterableChanges_tsickle_Closure_declarations() {\n    /**\n     * Iterate over all changes. `IterableChangeRecord` will contain information about changes\n     * to each item.\n     * @type {?}\n     */\n    IterableChanges.prototype.forEachItem;\n    /**\n     * Iterate over a set of operations which when applied to the original `Iterable` will produce the\n     * new `Iterable`.\n     *\n     * NOTE: These are not necessarily the actual operations which were applied to the original\n     * `Iterable`, rather these are a set of computed operations which may not be the same as the\n     * ones applied.\n     *\n     * \\@param record A change which needs to be applied\n     * \\@param previousIndex The `IterableChangeRecord#previousIndex` of the `record` refers to the\n     *        original `Iterable` location, where as `previousIndex` refers to the transient location\n     *        of the item, after applying the operations up to this point.\n     * \\@param currentIndex The `IterableChangeRecord#currentIndex` of the `record` refers to the\n     *        original `Iterable` location, where as `currentIndex` refers to the transient location\n     *        of the item, after applying the operations up to this point.\n     * @type {?}\n     */\n    IterableChanges.prototype.forEachOperation;\n    /**\n     * Iterate over changes in the order of original `Iterable` showing where the original items\n     * have moved.\n     * @type {?}\n     */\n    IterableChanges.prototype.forEachPreviousItem;\n    /**\n     * Iterate over all added items.\n     * @type {?}\n     */\n    IterableChanges.prototype.forEachAddedItem;\n    /**\n     * Iterate over all moved items.\n     * @type {?}\n     */\n    IterableChanges.prototype.forEachMovedItem;\n    /**\n     * Iterate over all removed items.\n     * @type {?}\n     */\n    IterableChanges.prototype.forEachRemovedItem;\n    /**\n     * Iterate over all items which had their identity (as computed by the `TrackByFunction`)\n     * changed.\n     * @type {?}\n     */\n    IterableChanges.prototype.forEachIdentityChange;\n}\n/**\n * Record representing the item change information.\n *\n * \\@stable\n * @record\n */\nexport function IterableChangeRecord() { }\nfunction IterableChangeRecord_tsickle_Closure_declarations() {\n    /**\n     * Current index of the item in `Iterable` or null if removed.\n     * @type {?}\n     */\n    IterableChangeRecord.prototype.currentIndex;\n    /**\n     * Previous index of the item in `Iterable` or null if added.\n     * @type {?}\n     */\n    IterableChangeRecord.prototype.previousIndex;\n    /**\n     * The item.\n     * @type {?}\n     */\n    IterableChangeRecord.prototype.item;\n    /**\n     * Track by identity as computed by the `TrackByFunction`.\n     * @type {?}\n     */\n    IterableChangeRecord.prototype.trackById;\n}\n/**\n * @deprecated v4.0.0 - Use IterableChangeRecord instead.\n * @record\n */\nexport function CollectionChangeRecord() { }\nfunction CollectionChangeRecord_tsickle_Closure_declarations() {\n}\n/**\n * An optional function passed into {\\@link NgForOf} that defines how to track\n * items in an iterable (e.g. fby index or id)\n *\n * \\@stable\n * @record\n */\nexport function TrackByFunction() { }\nfunction TrackByFunction_tsickle_Closure_declarations() {\n    /* TODO: handle strange member:\n    (index: number, item: T): any;\n    */\n}\n/**\n * Provides a factory for {\\@link IterableDiffer}.\n *\n * \\@stable\n * @record\n */\nexport function IterableDifferFactory() { }\nfunction IterableDifferFactory_tsickle_Closure_declarations() {\n    /** @type {?} */\n    IterableDifferFactory.prototype.supports;\n    /** @type {?} */\n    IterableDifferFactory.prototype.create;\n}\n/**\n * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.\n * \\@stable\n */\nvar /**\n * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.\n * \\@stable\n */\nIterableDiffers = /** @class */ (function () {\n    function IterableDiffers(factories) {\n        this.factories = factories;\n    }\n    /**\n     * @param {?} factories\n     * @param {?=} parent\n     * @return {?}\n     */\n    IterableDiffers.create = /**\n     * @param {?} factories\n     * @param {?=} parent\n     * @return {?}\n     */\n    function (factories, parent) {\n        if (parent != null) {\n            var /** @type {?} */ copied = parent.factories.slice();\n            factories = factories.concat(copied);\n        }\n        return new IterableDiffers(factories);\n    };\n    /**\n     * Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the\n     * inherited {@link IterableDiffers} instance with the provided factories and return a new\n     * {@link IterableDiffers} instance.\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {@link IterableDiffer} available.\n     *\n     * ### Example\n     *\n     * ```\n     * @Component({\n     *   viewProviders: [\n     *     IterableDiffers.extend([new ImmutableListDiffer()])\n     *   ]\n     * })\n     * ```\n     */\n    /**\n     * Takes an array of {\\@link IterableDifferFactory} and returns a provider used to extend the\n     * inherited {\\@link IterableDiffers} instance with the provided factories and return a new\n     * {\\@link IterableDiffers} instance.\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {\\@link IterableDiffer} available.\n     *\n     * ### Example\n     *\n     * ```\n     * \\@Component({\n     *   viewProviders: [\n     *     IterableDiffers.extend([new ImmutableListDiffer()])\n     *   ]\n     * })\n     * ```\n     * @param {?} factories\n     * @return {?}\n     */\n    IterableDiffers.extend = /**\n     * Takes an array of {\\@link IterableDifferFactory} and returns a provider used to extend the\n     * inherited {\\@link IterableDiffers} instance with the provided factories and return a new\n     * {\\@link IterableDiffers} instance.\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {\\@link IterableDiffer} available.\n     *\n     * ### Example\n     *\n     * ```\n     * \\@Component({\n     *   viewProviders: [\n     *     IterableDiffers.extend([new ImmutableListDiffer()])\n     *   ]\n     * })\n     * ```\n     * @param {?} factories\n     * @return {?}\n     */\n    function (factories) {\n        return {\n            provide: IterableDiffers,\n            useFactory: function (parent) {\n                if (!parent) {\n                    // Typically would occur when calling IterableDiffers.extend inside of dependencies passed\n                    // to\n                    // bootstrap(), which would override default pipes instead of extending them.\n                    throw new Error('Cannot extend IterableDiffers without a parent injector');\n                }\n                return IterableDiffers.create(factories, parent);\n            },\n            // Dependency technically isn't optional, but we can provide a better error message this way.\n            deps: [[IterableDiffers, new SkipSelf(), new Optional()]]\n        };\n    };\n    /**\n     * @param {?} iterable\n     * @return {?}\n     */\n    IterableDiffers.prototype.find = /**\n     * @param {?} iterable\n     * @return {?}\n     */\n    function (iterable) {\n        var /** @type {?} */ factory = this.factories.find(function (f) { return f.supports(iterable); });\n        if (factory != null) {\n            return factory;\n        }\n        else {\n            throw new Error(\"Cannot find a differ supporting object '\" + iterable + \"' of type '\" + getTypeNameForDebugging(iterable) + \"'\");\n        }\n    };\n    return IterableDiffers;\n}());\n/**\n * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.\n * \\@stable\n */\nexport { IterableDiffers };\nfunction IterableDiffers_tsickle_Closure_declarations() {\n    /**\n     * @deprecated v4.0.0 - Should be private\n     * @type {?}\n     */\n    IterableDiffers.prototype.factories;\n}\n/**\n * @param {?} type\n * @return {?}\n */\nexport function getTypeNameForDebugging(type) {\n    return type['name'] || typeof type;\n}\n//# sourceMappingURL=iterable_differs.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Optional, SkipSelf } from '../../di';\n/**\n * A differ that tracks changes made to an object over time.\n *\n * \\@stable\n * @record\n */\nexport function KeyValueDiffer() { }\nfunction KeyValueDiffer_tsickle_Closure_declarations() {\n    /**\n     * Compute a difference between the previous state and the new `object` state.\n     *\n     * \\@param object containing the new value.\n     * \\@return an object describing the difference. The return value is only valid until the next\n     * `diff()` invocation.\n     * @type {?}\n     */\n    KeyValueDiffer.prototype.diff;\n    /**\n     * Compute a difference between the previous state and the new `object` state.\n     *\n     * \\@param object containing the new value.\n     * \\@return an object describing the difference. The return value is only valid until the next\n     * `diff()` invocation.\n     * @type {?}\n     */\n    KeyValueDiffer.prototype.diff;\n}\n/**\n * An object describing the changes in the `Map` or `{[k:string]: string}` since last time\n * `KeyValueDiffer#diff()` was invoked.\n *\n * \\@stable\n * @record\n */\nexport function KeyValueChanges() { }\nfunction KeyValueChanges_tsickle_Closure_declarations() {\n    /**\n     * Iterate over all changes. `KeyValueChangeRecord` will contain information about changes\n     * to each item.\n     * @type {?}\n     */\n    KeyValueChanges.prototype.forEachItem;\n    /**\n     * Iterate over changes in the order of original Map showing where the original items\n     * have moved.\n     * @type {?}\n     */\n    KeyValueChanges.prototype.forEachPreviousItem;\n    /**\n     * Iterate over all keys for which values have changed.\n     * @type {?}\n     */\n    KeyValueChanges.prototype.forEachChangedItem;\n    /**\n     * Iterate over all added items.\n     * @type {?}\n     */\n    KeyValueChanges.prototype.forEachAddedItem;\n    /**\n     * Iterate over all removed items.\n     * @type {?}\n     */\n    KeyValueChanges.prototype.forEachRemovedItem;\n}\n/**\n * Record representing the item change information.\n *\n * \\@stable\n * @record\n */\nexport function KeyValueChangeRecord() { }\nfunction KeyValueChangeRecord_tsickle_Closure_declarations() {\n    /**\n     * Current key in the Map.\n     * @type {?}\n     */\n    KeyValueChangeRecord.prototype.key;\n    /**\n     * Current value for the key or `null` if removed.\n     * @type {?}\n     */\n    KeyValueChangeRecord.prototype.currentValue;\n    /**\n     * Previous value for the key or `null` if added.\n     * @type {?}\n     */\n    KeyValueChangeRecord.prototype.previousValue;\n}\n/**\n * Provides a factory for {\\@link KeyValueDiffer}.\n *\n * \\@stable\n * @record\n */\nexport function KeyValueDifferFactory() { }\nfunction KeyValueDifferFactory_tsickle_Closure_declarations() {\n    /**\n     * Test to see if the differ knows how to diff this kind of object.\n     * @type {?}\n     */\n    KeyValueDifferFactory.prototype.supports;\n    /**\n     * Create a `KeyValueDiffer`.\n     * @type {?}\n     */\n    KeyValueDifferFactory.prototype.create;\n}\n/**\n * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.\n * \\@stable\n */\nvar /**\n * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.\n * \\@stable\n */\nKeyValueDiffers = /** @class */ (function () {\n    function KeyValueDiffers(factories) {\n        this.factories = factories;\n    }\n    /**\n     * @template S\n     * @param {?} factories\n     * @param {?=} parent\n     * @return {?}\n     */\n    KeyValueDiffers.create = /**\n     * @template S\n     * @param {?} factories\n     * @param {?=} parent\n     * @return {?}\n     */\n    function (factories, parent) {\n        if (parent) {\n            var /** @type {?} */ copied = parent.factories.slice();\n            factories = factories.concat(copied);\n        }\n        return new KeyValueDiffers(factories);\n    };\n    /**\n     * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the\n     * inherited {@link KeyValueDiffers} instance with the provided factories and return a new\n     * {@link KeyValueDiffers} instance.\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {@link KeyValueDiffer} available.\n     *\n     * ### Example\n     *\n     * ```\n     * @Component({\n     *   viewProviders: [\n     *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\n     *   ]\n     * })\n     * ```\n     */\n    /**\n     * Takes an array of {\\@link KeyValueDifferFactory} and returns a provider used to extend the\n     * inherited {\\@link KeyValueDiffers} instance with the provided factories and return a new\n     * {\\@link KeyValueDiffers} instance.\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {\\@link KeyValueDiffer} available.\n     *\n     * ### Example\n     *\n     * ```\n     * \\@Component({\n     *   viewProviders: [\n     *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\n     *   ]\n     * })\n     * ```\n     * @template S\n     * @param {?} factories\n     * @return {?}\n     */\n    KeyValueDiffers.extend = /**\n     * Takes an array of {\\@link KeyValueDifferFactory} and returns a provider used to extend the\n     * inherited {\\@link KeyValueDiffers} instance with the provided factories and return a new\n     * {\\@link KeyValueDiffers} instance.\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {\\@link KeyValueDiffer} available.\n     *\n     * ### Example\n     *\n     * ```\n     * \\@Component({\n     *   viewProviders: [\n     *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\n     *   ]\n     * })\n     * ```\n     * @template S\n     * @param {?} factories\n     * @return {?}\n     */\n    function (factories) {\n        return {\n            provide: KeyValueDiffers,\n            useFactory: function (parent) {\n                if (!parent) {\n                    // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed\n                    // to bootstrap(), which would override default pipes instead of extending them.\n                    throw new Error('Cannot extend KeyValueDiffers without a parent injector');\n                }\n                return KeyValueDiffers.create(factories, parent);\n            },\n            // Dependency technically isn't optional, but we can provide a better error message this way.\n            deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]\n        };\n    };\n    /**\n     * @param {?} kv\n     * @return {?}\n     */\n    KeyValueDiffers.prototype.find = /**\n     * @param {?} kv\n     * @return {?}\n     */\n    function (kv) {\n        var /** @type {?} */ factory = this.factories.find(function (f) { return f.supports(kv); });\n        if (factory) {\n            return factory;\n        }\n        throw new Error(\"Cannot find a differ supporting object '\" + kv + \"'\");\n    };\n    return KeyValueDiffers;\n}());\n/**\n * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.\n * \\@stable\n */\nexport { KeyValueDiffers };\nfunction KeyValueDiffers_tsickle_Closure_declarations() {\n    /**\n     * @deprecated v4.0.0 - Should be private.\n     * @type {?}\n     */\n    KeyValueDiffers.prototype.factories;\n}\n//# sourceMappingURL=keyvalue_differs.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DefaultIterableDifferFactory } from './differs/default_iterable_differ';\nimport { DefaultKeyValueDifferFactory } from './differs/default_keyvalue_differ';\nimport { IterableDiffers } from './differs/iterable_differs';\nimport { KeyValueDiffers } from './differs/keyvalue_differs';\nexport { SimpleChange, WrappedValue, devModeEqual } from './change_detection_util';\nexport { ChangeDetectorRef } from './change_detector_ref';\nexport { ChangeDetectionStrategy, ChangeDetectorStatus, isDefaultChangeDetectionStrategy } from './constants';\nexport { DefaultIterableDifferFactory } from './differs/default_iterable_differ';\nexport { DefaultIterableDiffer } from './differs/default_iterable_differ';\nexport { DefaultKeyValueDifferFactory } from './differs/default_keyvalue_differ';\nexport { IterableDiffers } from './differs/iterable_differs';\nexport { KeyValueDiffers } from './differs/keyvalue_differs';\n/**\n * Structural diffing for `Object`s and `Map`s.\n */\nvar /** @type {?} */ keyValDiff = [new DefaultKeyValueDifferFactory()];\n/**\n * Structural diffing for `Iterable` types such as `Array`s.\n */\nvar /** @type {?} */ iterableDiff = [new DefaultIterableDifferFactory()];\nexport var /** @type {?} */ defaultIterableDiffers = new IterableDiffers(iterableDiff);\nexport var /** @type {?} */ defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);\n//# sourceMappingURL=change_detection.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '../di/injection_token';\n/**\n * Provide this token to set the locale of your application.\n * It is used for i18n extraction, by i18n pipes (DatePipe, I18nPluralPipe, CurrencyPipe,\n * DecimalPipe and PercentPipe) and by ICU expressions.\n *\n * See the {\\@linkDocs guide/i18n#setting-up-locale i18n guide} for more information.\n *\n * ### Example\n *\n * ```typescript\n * import { LOCALE_ID } from '\\@angular/core';\n * import { platformBrowserDynamic } from '\\@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: LOCALE_ID, useValue: 'en-US' }]\n * });\n * ```\n *\n * \\@experimental i18n support is experimental.\n */\nexport var /** @type {?} */ LOCALE_ID = new InjectionToken('LocaleId');\n/**\n * Use this token at bootstrap to provide the content of your translation file (`xtb`,\n * `xlf` or `xlf2`) when you want to translate your application in another language.\n *\n * See the {\\@linkDocs guide/i18n#merge i18n guide} for more information.\n *\n * ### Example\n *\n * ```typescript\n * import { TRANSLATIONS } from '\\@angular/core';\n * import { platformBrowserDynamic } from '\\@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * // content of your translation file\n * const translations = '....';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: TRANSLATIONS, useValue: translations }]\n * });\n * ```\n *\n * \\@experimental i18n support is experimental.\n */\nexport var /** @type {?} */ TRANSLATIONS = new InjectionToken('Translations');\n/**\n * Provide this token at bootstrap to set the format of your {\\@link TRANSLATIONS}: `xtb`,\n * `xlf` or `xlf2`.\n *\n * See the {\\@linkDocs guide/i18n#merge i18n guide} for more information.\n *\n * ### Example\n *\n * ```typescript\n * import { TRANSLATIONS_FORMAT } from '\\@angular/core';\n * import { platformBrowserDynamic } from '\\@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: TRANSLATIONS_FORMAT, useValue: 'xlf' }]\n * });\n * ```\n *\n * \\@experimental i18n support is experimental.\n */\nexport var /** @type {?} */ TRANSLATIONS_FORMAT = new InjectionToken('TranslationsFormat');\n/** @enum {number} */\nvar MissingTranslationStrategy = {\n    Error: 0,\n    Warning: 1,\n    Ignore: 2,\n};\nexport { MissingTranslationStrategy };\nMissingTranslationStrategy[MissingTranslationStrategy.Error] = \"Error\";\nMissingTranslationStrategy[MissingTranslationStrategy.Warning] = \"Warning\";\nMissingTranslationStrategy[MissingTranslationStrategy.Ignore] = \"Ignore\";\n//# sourceMappingURL=tokens.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ApplicationInitStatus } from './application_init';\nimport { ApplicationRef } from './application_ref';\nimport { APP_ID_RANDOM_PROVIDER } from './application_tokens';\nimport { IterableDiffers, KeyValueDiffers, defaultIterableDiffers, defaultKeyValueDiffers } from './change_detection/change_detection';\nimport { Inject, Optional, SkipSelf } from './di/metadata';\nimport { LOCALE_ID } from './i18n/tokens';\nimport { Compiler } from './linker/compiler';\nimport { NgModule } from './metadata';\n/**\n * @return {?}\n */\nexport function _iterableDiffersFactory() {\n    return defaultIterableDiffers;\n}\n/**\n * @return {?}\n */\nexport function _keyValueDiffersFactory() {\n    return defaultKeyValueDiffers;\n}\n/**\n * @param {?=} locale\n * @return {?}\n */\nexport function _localeFactory(locale) {\n    return locale || 'en-US';\n}\n/**\n * This module includes the providers of \\@angular/core that are needed\n * to bootstrap components via `ApplicationRef`.\n *\n * \\@experimental\n */\nvar ApplicationModule = /** @class */ (function () {\n    // Inject ApplicationRef to make it eager...\n    function ApplicationModule(appRef) {\n    }\n    ApplicationModule.decorators = [\n        { type: NgModule, args: [{\n                    providers: [\n                        ApplicationRef,\n                        ApplicationInitStatus,\n                        Compiler,\n                        APP_ID_RANDOM_PROVIDER,\n                        { provide: IterableDiffers, useFactory: _iterableDiffersFactory },\n                        { provide: KeyValueDiffers, useFactory: _keyValueDiffersFactory },\n                        {\n                            provide: LOCALE_ID,\n                            useFactory: _localeFactory,\n                            deps: [[new Inject(LOCALE_ID), new Optional(), new SkipSelf()]]\n                        },\n                    ]\n                },] },\n    ];\n    /** @nocollapse */\n    ApplicationModule.ctorParameters = function () { return [\n        { type: ApplicationRef, },\n    ]; };\n    return ApplicationModule;\n}());\nexport { ApplicationModule };\nfunction ApplicationModule_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    ApplicationModule.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    ApplicationModule.ctorParameters;\n}\n//# sourceMappingURL=application_module.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This helper class is used to get hold of an inert tree of DOM elements containing dirty HTML\n * that needs sanitizing.\n * Depending upon browser support we must use one of three strategies for doing this.\n * Support: Safari 10.x -> XHR strategy\n * Support: Firefox -> DomParser strategy\n * Default: InertDocument strategy\n */\nvar /**\n * This helper class is used to get hold of an inert tree of DOM elements containing dirty HTML\n * that needs sanitizing.\n * Depending upon browser support we must use one of three strategies for doing this.\n * Support: Safari 10.x -> XHR strategy\n * Support: Firefox -> DomParser strategy\n * Default: InertDocument strategy\n */\nInertBodyHelper = /** @class */ (function () {\n    function InertBodyHelper(defaultDoc) {\n        this.defaultDoc = defaultDoc;\n        this.inertDocument = this.defaultDoc.implementation.createHTMLDocument('sanitization-inert');\n        this.inertBodyElement = this.inertDocument.body;\n        if (this.inertBodyElement == null) {\n            // usually there should be only one body element in the document, but IE doesn't have any, so\n            // we need to create one.\n            var /** @type {?} */ inertHtml = this.inertDocument.createElement('html');\n            this.inertDocument.appendChild(inertHtml);\n            this.inertBodyElement = this.inertDocument.createElement('body');\n            inertHtml.appendChild(this.inertBodyElement);\n        }\n        this.inertBodyElement.innerHTML = '<svg><g onload=\"this.parentNode.remove()\"></g></svg>';\n        if (this.inertBodyElement.querySelector && !this.inertBodyElement.querySelector('svg')) {\n            // We just hit the Safari 10.1 bug - which allows JS to run inside the SVG G element\n            // so use the XHR strategy.\n            this.getInertBodyElement = this.getInertBodyElement_XHR;\n            return;\n        }\n        this.inertBodyElement.innerHTML =\n            '<svg><p><style><img src=\"</style><img src=x onerror=alert(1)//\">';\n        if (this.inertBodyElement.querySelector && this.inertBodyElement.querySelector('svg img')) {\n            // We just hit the Firefox bug - which prevents the inner img JS from being sanitized\n            // so use the DOMParser strategy, if it is available.\n            // If the DOMParser is not available then we are not in Firefox (Server/WebWorker?) so we\n            // fall through to the default strategy below.\n            if (isDOMParserAvailable()) {\n                this.getInertBodyElement = this.getInertBodyElement_DOMParser;\n                return;\n            }\n        }\n        // None of the bugs were hit so it is safe for us to use the default InertDocument strategy\n        this.getInertBodyElement = this.getInertBodyElement_InertDocument;\n    }\n    /**\n     * Use XHR to create and fill an inert body element (on Safari 10.1)\n     * See\n     * https://github.com/cure53/DOMPurify/blob/a992d3a75031cb8bb032e5ea8399ba972bdf9a65/src/purify.js#L439-L449\n     * @param {?} html\n     * @return {?}\n     */\n    InertBodyHelper.prototype.getInertBodyElement_XHR = /**\n     * Use XHR to create and fill an inert body element (on Safari 10.1)\n     * See\n     * https://github.com/cure53/DOMPurify/blob/a992d3a75031cb8bb032e5ea8399ba972bdf9a65/src/purify.js#L439-L449\n     * @param {?} html\n     * @return {?}\n     */\n    function (html) {\n        // We add these extra elements to ensure that the rest of the content is parsed as expected\n        // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\n        // `<head>` tag.\n        html = '<body><remove></remove>' + html + '</body>';\n        try {\n            html = encodeURI(html);\n        }\n        catch (/** @type {?} */ e) {\n            return null;\n        }\n        var /** @type {?} */ xhr = new XMLHttpRequest();\n        xhr.responseType = 'document';\n        xhr.open('GET', 'data:text/html;charset=utf-8,' + html, false);\n        xhr.send(null);\n        var /** @type {?} */ body = xhr.response.body;\n        body.removeChild(/** @type {?} */ ((body.firstChild)));\n        return body;\n    };\n    /**\n     * Use DOMParser to create and fill an inert body element (on Firefox)\n     * See https://github.com/cure53/DOMPurify/releases/tag/0.6.7\n     *\n     * @param {?} html\n     * @return {?}\n     */\n    InertBodyHelper.prototype.getInertBodyElement_DOMParser = /**\n     * Use DOMParser to create and fill an inert body element (on Firefox)\n     * See https://github.com/cure53/DOMPurify/releases/tag/0.6.7\n     *\n     * @param {?} html\n     * @return {?}\n     */\n    function (html) {\n        // We add these extra elements to ensure that the rest of the content is parsed as expected\n        // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\n        // `<head>` tag.\n        html = '<body><remove></remove>' + html + '</body>';\n        try {\n            var /** @type {?} */ body = /** @type {?} */ (new (/** @type {?} */ (window))\n                .DOMParser()\n                .parseFromString(html, 'text/html')\n                .body);\n            body.removeChild(/** @type {?} */ ((body.firstChild)));\n            return body;\n        }\n        catch (/** @type {?} */ e) {\n            return null;\n        }\n    };\n    /**\n     * Use an HTML5 `template` element, if supported, or an inert body element created via\n     * `createHtmlDocument` to create and fill an inert DOM element.\n     * This is the default sane strategy to use if the browser does not require one of the specialised\n     * strategies above.\n     * @param {?} html\n     * @return {?}\n     */\n    InertBodyHelper.prototype.getInertBodyElement_InertDocument = /**\n     * Use an HTML5 `template` element, if supported, or an inert body element created via\n     * `createHtmlDocument` to create and fill an inert DOM element.\n     * This is the default sane strategy to use if the browser does not require one of the specialised\n     * strategies above.\n     * @param {?} html\n     * @return {?}\n     */\n    function (html) {\n        // Prefer using <template> element if supported.\n        var /** @type {?} */ templateEl = this.inertDocument.createElement('template');\n        if ('content' in templateEl) {\n            templateEl.innerHTML = html;\n            return templateEl;\n        }\n        this.inertBodyElement.innerHTML = html;\n        // Support: IE 9-11 only\n        // strip custom-namespaced attributes on IE<=11\n        if ((/** @type {?} */ (this.defaultDoc)).documentMode) {\n            this.stripCustomNsAttrs(this.inertBodyElement);\n        }\n        return this.inertBodyElement;\n    };\n    /**\n     * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'\n     * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g.\n     * 'ns1:xlink:foo').\n     *\n     * This is undesirable since we don't want to allow any of these custom attributes. This method\n     * strips them all.\n     * @param {?} el\n     * @return {?}\n     */\n    InertBodyHelper.prototype.stripCustomNsAttrs = /**\n     * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'\n     * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g.\n     * 'ns1:xlink:foo').\n     *\n     * This is undesirable since we don't want to allow any of these custom attributes. This method\n     * strips them all.\n     * @param {?} el\n     * @return {?}\n     */\n    function (el) {\n        var /** @type {?} */ elAttrs = el.attributes;\n        // loop backwards so that we can support removals.\n        for (var /** @type {?} */ i = elAttrs.length - 1; 0 < i; i--) {\n            var /** @type {?} */ attrib = elAttrs.item(i);\n            var /** @type {?} */ attrName = attrib.name;\n            if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {\n                el.removeAttribute(attrName);\n            }\n        }\n        var /** @type {?} */ childNode = el.firstChild;\n        while (childNode) {\n            if (childNode.nodeType === Node.ELEMENT_NODE)\n                this.stripCustomNsAttrs(/** @type {?} */ (childNode));\n            childNode = childNode.nextSibling;\n        }\n    };\n    return InertBodyHelper;\n}());\n/**\n * This helper class is used to get hold of an inert tree of DOM elements containing dirty HTML\n * that needs sanitizing.\n * Depending upon browser support we must use one of three strategies for doing this.\n * Support: Safari 10.x -> XHR strategy\n * Support: Firefox -> DomParser strategy\n * Default: InertDocument strategy\n */\nexport { InertBodyHelper };\nfunction InertBodyHelper_tsickle_Closure_declarations() {\n    /** @type {?} */\n    InertBodyHelper.prototype.inertBodyElement;\n    /** @type {?} */\n    InertBodyHelper.prototype.inertDocument;\n    /**\n     * Get an inert DOM element containing DOM created from the dirty HTML string provided.\n     * The implementation of this is determined in the constructor, when the class is instantiated.\n     * @type {?}\n     */\n    InertBodyHelper.prototype.getInertBodyElement;\n    /** @type {?} */\n    InertBodyHelper.prototype.defaultDoc;\n}\n/**\n * We need to determine whether the DOMParser exists in the global context.\n * The try-catch is because, on some browsers, trying to access this property\n * on window can actually throw an error.\n *\n * @suppress {uselessCode}\n * @return {?}\n */\nfunction isDOMParserAvailable() {\n    try {\n        return !!(/** @type {?} */ (window)).DOMParser;\n    }\n    catch (/** @type {?} */ e) {\n        return false;\n    }\n}\n//# sourceMappingURL=inert_body.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { isDevMode } from '../application_ref';\n/**\n * A pattern that recognizes a commonly useful subset of URLs that are safe.\n *\n * This regular expression matches a subset of URLs that will not cause script\n * execution if used in URL context within a HTML document. Specifically, this\n * regular expression matches if (comment from here on and regex copied from\n * Soy's EscapingConventions):\n * (1) Either a protocol in a whitelist (http, https, mailto or ftp).\n * (2) or no protocol.  A protocol must be followed by a colon. The below\n *     allows that by allowing colons only after one of the characters [/?#].\n *     A colon after a hash (#) must be in the fragment.\n *     Otherwise, a colon after a (?) must be in a query.\n *     Otherwise, a colon after a single solidus (/) must be in a path.\n *     Otherwise, a colon after a double solidus (//) must be in the authority\n *     (before port).\n *\n * The pattern disallows &, used in HTML entity declarations before\n * one of the characters in [/?#]. This disallows HTML entities used in the\n * protocol name, which should never happen, e.g. \"h&#116;tp\" for \"http\".\n * It also disallows HTML entities in the first path part of a relative path,\n * e.g. \"foo&lt;bar/baz\".  Our existing escaping functions should not produce\n * that. More importantly, it disallows masking of a colon,\n * e.g. \"javascript&#58;...\".\n *\n * This regular expression was taken from the Closure sanitization library.\n */\nvar /** @type {?} */ SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;\n/* A pattern that matches safe srcset values */\nvar /** @type {?} */ SAFE_SRCSET_PATTERN = /^(?:(?:https?|file):|[^&:/?#]*(?:[/?#]|$))/gi;\n/**\n * A pattern that matches safe data URLs. Only matches image, video and audio types.\n */\nvar /** @type {?} */ DATA_URL_PATTERN = /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\\/]+=*$/i;\n/**\n * @param {?} url\n * @return {?}\n */\nexport function _sanitizeUrl(url) {\n    url = String(url);\n    if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN))\n        return url;\n    if (isDevMode()) {\n        console.warn(\"WARNING: sanitizing unsafe URL value \" + url + \" (see http://g.co/ng/security#xss)\");\n    }\n    return 'unsafe:' + url;\n}\n/**\n * @param {?} srcset\n * @return {?}\n */\nexport function sanitizeSrcset(srcset) {\n    srcset = String(srcset);\n    return srcset.split(',').map(function (srcset) { return _sanitizeUrl(srcset.trim()); }).join(', ');\n}\n//# sourceMappingURL=url_sanitizer.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { isDevMode } from '../application_ref';\nimport { InertBodyHelper } from './inert_body';\nimport { _sanitizeUrl, sanitizeSrcset } from './url_sanitizer';\n/**\n * @param {?} tags\n * @return {?}\n */\nfunction tagSet(tags) {\n    var /** @type {?} */ res = {};\n    for (var _i = 0, _a = tags.split(','); _i < _a.length; _i++) {\n        var t = _a[_i];\n        res[t] = true;\n    }\n    return res;\n}\n/**\n * @param {...?} sets\n * @return {?}\n */\nfunction merge() {\n    var sets = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        sets[_i] = arguments[_i];\n    }\n    var /** @type {?} */ res = {};\n    for (var _a = 0, sets_1 = sets; _a < sets_1.length; _a++) {\n        var s = sets_1[_a];\n        for (var /** @type {?} */ v in s) {\n            if (s.hasOwnProperty(v))\n                res[v] = true;\n        }\n    }\n    return res;\n}\n// Good source of info about elements and attributes\n// http://dev.w3.org/html5/spec/Overview.html#semantics\n// http://simon.html5.org/html-elements\n// Safe Void Elements - HTML5\n// http://dev.w3.org/html5/spec/Overview.html#void-elements\nvar /** @type {?} */ VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');\n// Elements that you can, intentionally, leave open (and which close themselves)\n// http://dev.w3.org/html5/spec/Overview.html#optional-tags\nvar /** @type {?} */ OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');\nvar /** @type {?} */ OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');\nvar /** @type {?} */ OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);\n// Safe Block Elements - HTML5\nvar /** @type {?} */ BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' +\n    'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +\n    'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));\n// Inline Elements - HTML5\nvar /** @type {?} */ INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' +\n    'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' +\n    'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));\nvar /** @type {?} */ VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);\n// Attributes that have href and hence need to be sanitized\nvar /** @type {?} */ URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');\n// Attributes that have special href set hence need to be sanitized\nvar /** @type {?} */ SRCSET_ATTRS = tagSet('srcset');\nvar /** @type {?} */ HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' +\n    'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' +\n    'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' +\n    'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' +\n    'valign,value,vspace,width');\n// NB: This currently consciously doesn't support SVG. SVG sanitization has had several security\n// issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via\n// innerHTML is required, SVG attributes should be added here.\n// NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those\n// can be sanitized, but they increase security surface area without a legitimate use case, so they\n// are left out here.\nvar /** @type {?} */ VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS);\n/**\n * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe\n * attributes.\n */\nvar /**\n * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe\n * attributes.\n */\nSanitizingHtmlSerializer = /** @class */ (function () {\n    function SanitizingHtmlSerializer() {\n        this.sanitizedSomething = false;\n        this.buf = [];\n    }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    SanitizingHtmlSerializer.prototype.sanitizeChildren = /**\n     * @param {?} el\n     * @return {?}\n     */\n    function (el) {\n        // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.\n        // However this code never accesses properties off of `document` before deleting its contents\n        // again, so it shouldn't be vulnerable to DOM clobbering.\n        var /** @type {?} */ current = /** @type {?} */ ((el.firstChild));\n        while (current) {\n            if (current.nodeType === Node.ELEMENT_NODE) {\n                this.startElement(/** @type {?} */ (current));\n            }\n            else if (current.nodeType === Node.TEXT_NODE) {\n                this.chars(/** @type {?} */ ((current.nodeValue)));\n            }\n            else {\n                // Strip non-element, non-text nodes.\n                this.sanitizedSomething = true;\n            }\n            if (current.firstChild) {\n                current = /** @type {?} */ ((current.firstChild));\n                continue;\n            }\n            while (current) {\n                // Leaving the element. Walk up and to the right, closing tags as we go.\n                if (current.nodeType === Node.ELEMENT_NODE) {\n                    this.endElement(/** @type {?} */ (current));\n                }\n                var /** @type {?} */ next = this.checkClobberedElement(current, /** @type {?} */ ((current.nextSibling)));\n                if (next) {\n                    current = next;\n                    break;\n                }\n                current = this.checkClobberedElement(current, /** @type {?} */ ((current.parentNode)));\n            }\n        }\n        return this.buf.join('');\n    };\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    SanitizingHtmlSerializer.prototype.startElement = /**\n     * @param {?} element\n     * @return {?}\n     */\n    function (element) {\n        var /** @type {?} */ tagName = element.nodeName.toLowerCase();\n        if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\n            this.sanitizedSomething = true;\n            return;\n        }\n        this.buf.push('<');\n        this.buf.push(tagName);\n        var /** @type {?} */ elAttrs = element.attributes;\n        for (var /** @type {?} */ i = 0; i < elAttrs.length; i++) {\n            var /** @type {?} */ elAttr = elAttrs.item(i);\n            var /** @type {?} */ attrName = elAttr.name;\n            var /** @type {?} */ lower = attrName.toLowerCase();\n            if (!VALID_ATTRS.hasOwnProperty(lower)) {\n                this.sanitizedSomething = true;\n                continue;\n            }\n            var /** @type {?} */ value = elAttr.value;\n            // TODO(martinprobst): Special case image URIs for data:image/...\n            if (URI_ATTRS[lower])\n                value = _sanitizeUrl(value);\n            if (SRCSET_ATTRS[lower])\n                value = sanitizeSrcset(value);\n            this.buf.push(' ', attrName, '=\"', encodeEntities(value), '\"');\n        }\n        this.buf.push('>');\n    };\n    /**\n     * @param {?} current\n     * @return {?}\n     */\n    SanitizingHtmlSerializer.prototype.endElement = /**\n     * @param {?} current\n     * @return {?}\n     */\n    function (current) {\n        var /** @type {?} */ tagName = current.nodeName.toLowerCase();\n        if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {\n            this.buf.push('</');\n            this.buf.push(tagName);\n            this.buf.push('>');\n        }\n    };\n    /**\n     * @param {?} chars\n     * @return {?}\n     */\n    SanitizingHtmlSerializer.prototype.chars = /**\n     * @param {?} chars\n     * @return {?}\n     */\n    function (chars) { this.buf.push(encodeEntities(chars)); };\n    /**\n     * @param {?} node\n     * @param {?} nextNode\n     * @return {?}\n     */\n    SanitizingHtmlSerializer.prototype.checkClobberedElement = /**\n     * @param {?} node\n     * @param {?} nextNode\n     * @return {?}\n     */\n    function (node, nextNode) {\n        if (nextNode &&\n            (node.compareDocumentPosition(nextNode) &\n                Node.DOCUMENT_POSITION_CONTAINED_BY) === Node.DOCUMENT_POSITION_CONTAINED_BY) {\n            throw new Error(\"Failed to sanitize html because the element is clobbered: \" + ((/** @type {?} */ (node))).outerHTML);\n        }\n        return nextNode;\n    };\n    return SanitizingHtmlSerializer;\n}());\nfunction SanitizingHtmlSerializer_tsickle_Closure_declarations() {\n    /** @type {?} */\n    SanitizingHtmlSerializer.prototype.sanitizedSomething;\n    /** @type {?} */\n    SanitizingHtmlSerializer.prototype.buf;\n}\n// Regular Expressions for parsing tags and attributes\nvar /** @type {?} */ SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n// ! to ~ is the ASCII range.\nvar /** @type {?} */ NON_ALPHANUMERIC_REGEXP = /([^\\#-~ |!])/g;\n/**\n * Escapes all potentially dangerous characters, so that the\n * resulting string can be safely inserted into attribute or\n * element text.\n * @param {?} value\n * @return {?}\n */\nfunction encodeEntities(value) {\n    return value.replace(/&/g, '&amp;')\n        .replace(SURROGATE_PAIR_REGEXP, function (match) {\n        var /** @type {?} */ hi = match.charCodeAt(0);\n        var /** @type {?} */ low = match.charCodeAt(1);\n        return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';\n    })\n        .replace(NON_ALPHANUMERIC_REGEXP, function (match) { return '&#' + match.charCodeAt(0) + ';'; })\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;');\n}\nvar /** @type {?} */ inertBodyHelper;\n/**\n * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to\n * the DOM in a browser environment.\n * @param {?} defaultDoc\n * @param {?} unsafeHtmlInput\n * @return {?}\n */\nexport function _sanitizeHtml(defaultDoc, unsafeHtmlInput) {\n    var /** @type {?} */ inertBodyElement = null;\n    try {\n        inertBodyHelper = inertBodyHelper || new InertBodyHelper(defaultDoc);\n        // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).\n        var /** @type {?} */ unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';\n        inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n        // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser\n        // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.\n        var /** @type {?} */ mXSSAttempts = 5;\n        var /** @type {?} */ parsedHtml = unsafeHtml;\n        do {\n            if (mXSSAttempts === 0) {\n                throw new Error('Failed to sanitize html because the input is unstable');\n            }\n            mXSSAttempts--;\n            unsafeHtml = parsedHtml;\n            parsedHtml = /** @type {?} */ ((inertBodyElement)).innerHTML;\n            inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n        } while (unsafeHtml !== parsedHtml);\n        var /** @type {?} */ sanitizer = new SanitizingHtmlSerializer();\n        var /** @type {?} */ safeHtml = sanitizer.sanitizeChildren(/** @type {?} */ (getTemplateContent(/** @type {?} */ ((inertBodyElement)))) || inertBodyElement);\n        if (isDevMode() && sanitizer.sanitizedSomething) {\n            console.warn('WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).');\n        }\n        return safeHtml;\n    }\n    finally {\n        // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.\n        if (inertBodyElement) {\n            var /** @type {?} */ parent_1 = getTemplateContent(inertBodyElement) || inertBodyElement;\n            while (parent_1.firstChild) {\n                parent_1.removeChild(parent_1.firstChild);\n            }\n        }\n    }\n}\n/**\n * @param {?} el\n * @return {?}\n */\nfunction getTemplateContent(el) {\n    return 'content' in (/** @type {?} */ (el /** Microsoft/TypeScript#21517 */) /** Microsoft/TypeScript#21517 */) && isTemplateElement(el) ?\n        el.content :\n        null;\n}\n/**\n * @param {?} el\n * @return {?}\n */\nfunction isTemplateElement(el) {\n    return el.nodeType === Node.ELEMENT_NODE && el.nodeName === 'TEMPLATE';\n}\n//# sourceMappingURL=html_sanitizer.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { isDevMode } from '../application_ref';\nimport { _sanitizeUrl } from './url_sanitizer';\n/**\n * Regular expression for safe style values.\n *\n * Quotes (\" and ') are allowed, but a check must be done elsewhere to ensure they're balanced.\n *\n * ',' allows multiple values to be assigned to the same property (e.g. background-attachment or\n * font-family) and hence could allow multiple values to get injected, but that should pose no risk\n * of XSS.\n *\n * The function expression checks only for XSS safety, not for CSS validity.\n *\n * This regular expression was taken from the Closure sanitization library, and augmented for\n * transformation values.\n */\nvar /** @type {?} */ VALUES = '[-,.\"\\'%_!# a-zA-Z0-9]+';\nvar /** @type {?} */ TRANSFORMATION_FNS = '(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?';\nvar /** @type {?} */ COLOR_FNS = '(?:rgb|hsl)a?';\nvar /** @type {?} */ GRADIENTS = '(?:repeating-)?(?:linear|radial)-gradient';\nvar /** @type {?} */ CSS3_FNS = '(?:calc|attr)';\nvar /** @type {?} */ FN_ARGS = '\\\\([-0-9.%, #a-zA-Z]+\\\\)';\nvar /** @type {?} */ SAFE_STYLE_VALUE = new RegExp(\"^(\" + VALUES + \"|\" +\n    (\"(?:\" + TRANSFORMATION_FNS + \"|\" + COLOR_FNS + \"|\" + GRADIENTS + \"|\" + CSS3_FNS + \")\") +\n    (FN_ARGS + \")$\"), 'g');\n/**\n * Matches a `url(...)` value with an arbitrary argument as long as it does\n * not contain parentheses.\n *\n * The URL value still needs to be sanitized separately.\n *\n * `url(...)` values are a very common use case, e.g. for `background-image`. With carefully crafted\n * CSS style rules, it is possible to construct an information leak with `url` values in CSS, e.g.\n * by observing whether scroll bars are displayed, or character ranges used by a font face\n * definition.\n *\n * Angular only allows binding CSS values (as opposed to entire CSS rules), so it is unlikely that\n * binding a URL value without further cooperation from the page will cause an information leak, and\n * if so, it is just a leak, not a full blown XSS vulnerability.\n *\n * Given the common use case, low likelihood of attack vector, and low impact of an attack, this\n * code is permissive and allows URLs that sanitize otherwise.\n */\nvar /** @type {?} */ URL_RE = /^url\\(([^)]+)\\)$/;\n/**\n * Checks that quotes (\" and ') are properly balanced inside a string. Assumes\n * that neither escape (\\) nor any other character that could result in\n * breaking out of a string parsing context are allowed;\n * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.\n *\n * This code was taken from the Closure sanitization library.\n * @param {?} value\n * @return {?}\n */\nfunction hasBalancedQuotes(value) {\n    var /** @type {?} */ outsideSingle = true;\n    var /** @type {?} */ outsideDouble = true;\n    for (var /** @type {?} */ i = 0; i < value.length; i++) {\n        var /** @type {?} */ c = value.charAt(i);\n        if (c === '\\'' && outsideDouble) {\n            outsideSingle = !outsideSingle;\n        }\n        else if (c === '\"' && outsideSingle) {\n            outsideDouble = !outsideDouble;\n        }\n    }\n    return outsideSingle && outsideDouble;\n}\n/**\n * Sanitizes the given untrusted CSS style property value (i.e. not an entire object, just a single\n * value) and returns a value that is safe to use in a browser environment.\n * @param {?} value\n * @return {?}\n */\nexport function _sanitizeStyle(value) {\n    value = String(value).trim(); // Make sure it's actually a string.\n    if (!value)\n        return '';\n    // Single url(...) values are supported, but only for URLs that sanitize cleanly. See above for\n    // reasoning behind this.\n    var /** @type {?} */ urlMatch = value.match(URL_RE);\n    if ((urlMatch && _sanitizeUrl(urlMatch[1]) === urlMatch[1]) ||\n        value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {\n        return value; // Safe style values.\n    }\n    if (isDevMode()) {\n        console.warn(\"WARNING: sanitizing unsafe style value \" + value + \" (see http://g.co/ng/security#xss).\");\n    }\n    return 'unsafe';\n}\n//# sourceMappingURL=style_sanitizer.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nvar SecurityContext = {\n    NONE: 0,\n    HTML: 1,\n    STYLE: 2,\n    SCRIPT: 3,\n    URL: 4,\n    RESOURCE_URL: 5,\n};\nexport { SecurityContext };\nSecurityContext[SecurityContext.NONE] = \"NONE\";\nSecurityContext[SecurityContext.HTML] = \"HTML\";\nSecurityContext[SecurityContext.STYLE] = \"STYLE\";\nSecurityContext[SecurityContext.SCRIPT] = \"SCRIPT\";\nSecurityContext[SecurityContext.URL] = \"URL\";\nSecurityContext[SecurityContext.RESOURCE_URL] = \"RESOURCE_URL\";\n/**\n * Sanitizer is used by the views to sanitize potentially dangerous values.\n *\n * \\@stable\n * @abstract\n */\nvar /**\n * Sanitizer is used by the views to sanitize potentially dangerous values.\n *\n * \\@stable\n * @abstract\n */\nSanitizer = /** @class */ (function () {\n    function Sanitizer() {\n    }\n    return Sanitizer;\n}());\n/**\n * Sanitizer is used by the views to sanitize potentially dangerous values.\n *\n * \\@stable\n * @abstract\n */\nexport { Sanitizer };\nfunction Sanitizer_tsickle_Closure_declarations() {\n    /**\n     * @abstract\n     * @param {?} context\n     * @param {?} value\n     * @return {?}\n     */\n    Sanitizer.prototype.sanitize = function (context, value) { };\n}\n//# sourceMappingURL=security.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Factory for ViewDefinitions/NgModuleDefinitions.\n * We use a function so we can reexeute it in case an error happens and use the given logger\n * function to log the error from the definition of the node, which is shown in all browser\n * logs.\n * @record\n */\nexport function DefinitionFactory() { }\nfunction DefinitionFactory_tsickle_Closure_declarations() {\n    /* TODO: handle strange member:\n    (logger: NodeLogger): D;\n    */\n}\n/**\n * Function to call console.error at the right source location. This is an indirection\n * via another function as browser will log the location that actually called\n * `console.error`.\n * @record\n */\nexport function NodeLogger() { }\nfunction NodeLogger_tsickle_Closure_declarations() {\n    /* TODO: handle strange member:\n    (): () => void;\n    */\n}\n/**\n * @record\n */\nexport function Definition() { }\nfunction Definition_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Definition.prototype.factory;\n}\n/**\n * @record\n */\nexport function NgModuleDefinition() { }\nfunction NgModuleDefinition_tsickle_Closure_declarations() {\n    /** @type {?} */\n    NgModuleDefinition.prototype.providers;\n    /** @type {?} */\n    NgModuleDefinition.prototype.providersByKey;\n    /** @type {?} */\n    NgModuleDefinition.prototype.modules;\n    /** @type {?} */\n    NgModuleDefinition.prototype.isRoot;\n}\n/**\n * @record\n */\nexport function NgModuleDefinitionFactory() { }\nfunction NgModuleDefinitionFactory_tsickle_Closure_declarations() {\n}\n/**\n * @record\n */\nexport function ViewDefinition() { }\nfunction ViewDefinition_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ViewDefinition.prototype.flags;\n    /** @type {?} */\n    ViewDefinition.prototype.updateDirectives;\n    /** @type {?} */\n    ViewDefinition.prototype.updateRenderer;\n    /** @type {?} */\n    ViewDefinition.prototype.handleEvent;\n    /**\n     * Order: Depth first.\n     * Especially providers are before elements / anchors.\n     * @type {?}\n     */\n    ViewDefinition.prototype.nodes;\n    /**\n     * aggregated NodeFlags for all nodes *\n     * @type {?}\n     */\n    ViewDefinition.prototype.nodeFlags;\n    /** @type {?} */\n    ViewDefinition.prototype.rootNodeFlags;\n    /** @type {?} */\n    ViewDefinition.prototype.lastRenderRootNode;\n    /** @type {?} */\n    ViewDefinition.prototype.bindingCount;\n    /** @type {?} */\n    ViewDefinition.prototype.outputCount;\n    /**\n     * Binary or of all query ids that are matched by one of the nodes.\n     * This includes query ids from templates as well.\n     * Used as a bloom filter.\n     * @type {?}\n     */\n    ViewDefinition.prototype.nodeMatchedQueries;\n}\n/**\n * @record\n */\nexport function ViewDefinitionFactory() { }\nfunction ViewDefinitionFactory_tsickle_Closure_declarations() {\n}\n/**\n * @record\n */\nexport function ViewUpdateFn() { }\nfunction ViewUpdateFn_tsickle_Closure_declarations() {\n    /* TODO: handle strange member:\n    (check: NodeCheckFn, view: ViewData): void;\n    */\n}\n/**\n * @record\n */\nexport function NodeCheckFn() { }\nfunction NodeCheckFn_tsickle_Closure_declarations() {\n    /* TODO: handle strange member:\n    (view: ViewData, nodeIndex: number, argStyle: ArgumentType.Dynamic, values: any[]): any;\n    */\n    /* TODO: handle strange member:\n    (view: ViewData, nodeIndex: number, argStyle: ArgumentType.Inline, v0?: any, v1?: any, v2?: any,\n       v3?: any, v4?: any, v5?: any, v6?: any, v7?: any, v8?: any, v9?: any): any;\n    */\n}\n/** @enum {number} */\nvar ArgumentType = { Inline: 0, Dynamic: 1, };\nexport { ArgumentType };\n/**\n * @record\n */\nexport function ViewHandleEventFn() { }\nfunction ViewHandleEventFn_tsickle_Closure_declarations() {\n    /* TODO: handle strange member:\n    (view: ViewData, nodeIndex: number, eventName: string, event: any): boolean;\n    */\n}\n/** @enum {number} */\nvar ViewFlags = {\n    None: 0,\n    OnPush: 2,\n};\nexport { ViewFlags };\n/**\n * A node definition in the view.\n *\n * Note: We use one type for all nodes so that loops that loop over all nodes\n * of a ViewDefinition stay monomorphic!\n * @record\n */\nexport function NodeDef() { }\nfunction NodeDef_tsickle_Closure_declarations() {\n    /** @type {?} */\n    NodeDef.prototype.flags;\n    /** @type {?} */\n    NodeDef.prototype.nodeIndex;\n    /** @type {?} */\n    NodeDef.prototype.checkIndex;\n    /** @type {?} */\n    NodeDef.prototype.parent;\n    /** @type {?} */\n    NodeDef.prototype.renderParent;\n    /**\n     * this is checked against NgContentDef.index to find matched nodes\n     * @type {?}\n     */\n    NodeDef.prototype.ngContentIndex;\n    /**\n     * number of transitive children\n     * @type {?}\n     */\n    NodeDef.prototype.childCount;\n    /**\n     * aggregated NodeFlags for all transitive children (does not include self) *\n     * @type {?}\n     */\n    NodeDef.prototype.childFlags;\n    /**\n     * aggregated NodeFlags for all direct children (does not include self) *\n     * @type {?}\n     */\n    NodeDef.prototype.directChildFlags;\n    /** @type {?} */\n    NodeDef.prototype.bindingIndex;\n    /** @type {?} */\n    NodeDef.prototype.bindings;\n    /** @type {?} */\n    NodeDef.prototype.bindingFlags;\n    /** @type {?} */\n    NodeDef.prototype.outputIndex;\n    /** @type {?} */\n    NodeDef.prototype.outputs;\n    /**\n     * references that the user placed on the element\n     * @type {?}\n     */\n    NodeDef.prototype.references;\n    /**\n     * ids and value types of all queries that are matched by this node.\n     * @type {?}\n     */\n    NodeDef.prototype.matchedQueries;\n    /**\n     * Binary or of all matched query ids of this node.\n     * @type {?}\n     */\n    NodeDef.prototype.matchedQueryIds;\n    /**\n     * Binary or of all query ids that are matched by one of the children.\n     * This includes query ids from templates as well.\n     * Used as a bloom filter.\n     * @type {?}\n     */\n    NodeDef.prototype.childMatchedQueries;\n    /** @type {?} */\n    NodeDef.prototype.element;\n    /** @type {?} */\n    NodeDef.prototype.provider;\n    /** @type {?} */\n    NodeDef.prototype.text;\n    /** @type {?} */\n    NodeDef.prototype.query;\n    /** @type {?} */\n    NodeDef.prototype.ngContent;\n}\n/** @enum {number} */\nvar NodeFlags = {\n    None: 0,\n    TypeElement: 1,\n    TypeText: 2,\n    ProjectedTemplate: 4,\n    CatRenderNode: 3,\n    TypeNgContent: 8,\n    TypePipe: 16,\n    TypePureArray: 32,\n    TypePureObject: 64,\n    TypePurePipe: 128,\n    CatPureExpression: 224,\n    TypeValueProvider: 256,\n    TypeClassProvider: 512,\n    TypeFactoryProvider: 1024,\n    TypeUseExistingProvider: 2048,\n    LazyProvider: 4096,\n    PrivateProvider: 8192,\n    TypeDirective: 16384,\n    Component: 32768,\n    CatProviderNoDirective: 3840,\n    CatProvider: 20224,\n    OnInit: 65536,\n    OnDestroy: 131072,\n    DoCheck: 262144,\n    OnChanges: 524288,\n    AfterContentInit: 1048576,\n    AfterContentChecked: 2097152,\n    AfterViewInit: 4194304,\n    AfterViewChecked: 8388608,\n    EmbeddedViews: 16777216,\n    ComponentView: 33554432,\n    TypeContentQuery: 67108864,\n    TypeViewQuery: 134217728,\n    StaticQuery: 268435456,\n    DynamicQuery: 536870912,\n    TypeNgModule: 1073741824,\n    CatQuery: 201326592,\n    // mutually exclusive values...\n    Types: 201347067,\n};\nexport { NodeFlags };\n/**\n * @record\n */\nexport function BindingDef() { }\nfunction BindingDef_tsickle_Closure_declarations() {\n    /** @type {?} */\n    BindingDef.prototype.flags;\n    /** @type {?} */\n    BindingDef.prototype.ns;\n    /** @type {?} */\n    BindingDef.prototype.name;\n    /** @type {?} */\n    BindingDef.prototype.nonMinifiedName;\n    /** @type {?} */\n    BindingDef.prototype.securityContext;\n    /** @type {?} */\n    BindingDef.prototype.suffix;\n}\n/** @enum {number} */\nvar BindingFlags = {\n    TypeElementAttribute: 1,\n    TypeElementClass: 2,\n    TypeElementStyle: 4,\n    TypeProperty: 8,\n    SyntheticProperty: 16,\n    SyntheticHostProperty: 32,\n    CatSyntheticProperty: 48,\n    // mutually exclusive values...\n    Types: 15,\n};\nexport { BindingFlags };\n/**\n * @record\n */\nexport function OutputDef() { }\nfunction OutputDef_tsickle_Closure_declarations() {\n    /** @type {?} */\n    OutputDef.prototype.type;\n    /** @type {?} */\n    OutputDef.prototype.target;\n    /** @type {?} */\n    OutputDef.prototype.eventName;\n    /** @type {?} */\n    OutputDef.prototype.propName;\n}\n/** @enum {number} */\nvar OutputType = { ElementOutput: 0, DirectiveOutput: 1, };\nexport { OutputType };\n/** @enum {number} */\nvar QueryValueType = {\n    ElementRef: 0,\n    RenderElement: 1,\n    TemplateRef: 2,\n    ViewContainerRef: 3,\n    Provider: 4,\n};\nexport { QueryValueType };\n/**\n * @record\n */\nexport function ElementDef() { }\nfunction ElementDef_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ElementDef.prototype.name;\n    /** @type {?} */\n    ElementDef.prototype.ns;\n    /**\n     * ns, name, value\n     * @type {?}\n     */\n    ElementDef.prototype.attrs;\n    /** @type {?} */\n    ElementDef.prototype.template;\n    /** @type {?} */\n    ElementDef.prototype.componentProvider;\n    /** @type {?} */\n    ElementDef.prototype.componentRendererType;\n    /** @type {?} */\n    ElementDef.prototype.componentView;\n    /**\n     * visible public providers for DI in the view,\n     * as see from this element. This does not include private providers.\n     * @type {?}\n     */\n    ElementDef.prototype.publicProviders;\n    /**\n     * same as visiblePublicProviders, but also includes private providers\n     * that are located on this element.\n     * @type {?}\n     */\n    ElementDef.prototype.allProviders;\n    /** @type {?} */\n    ElementDef.prototype.handleEvent;\n}\n/**\n * @record\n */\nexport function ElementHandleEventFn() { }\nfunction ElementHandleEventFn_tsickle_Closure_declarations() {\n    /* TODO: handle strange member:\n    (view: ViewData, eventName: string, event: any): boolean;\n    */\n}\n/**\n * @record\n */\nexport function ProviderDef() { }\nfunction ProviderDef_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ProviderDef.prototype.token;\n    /** @type {?} */\n    ProviderDef.prototype.value;\n    /** @type {?} */\n    ProviderDef.prototype.deps;\n}\n/**\n * @record\n */\nexport function NgModuleProviderDef() { }\nfunction NgModuleProviderDef_tsickle_Closure_declarations() {\n    /** @type {?} */\n    NgModuleProviderDef.prototype.flags;\n    /** @type {?} */\n    NgModuleProviderDef.prototype.index;\n    /** @type {?} */\n    NgModuleProviderDef.prototype.token;\n    /** @type {?} */\n    NgModuleProviderDef.prototype.value;\n    /** @type {?} */\n    NgModuleProviderDef.prototype.deps;\n}\n/**\n * @record\n */\nexport function DepDef() { }\nfunction DepDef_tsickle_Closure_declarations() {\n    /** @type {?} */\n    DepDef.prototype.flags;\n    /** @type {?} */\n    DepDef.prototype.token;\n    /** @type {?} */\n    DepDef.prototype.tokenKey;\n}\n/** @enum {number} */\nvar DepFlags = {\n    None: 0,\n    SkipSelf: 1,\n    Optional: 2,\n    Self: 4,\n    Value: 8,\n};\nexport { DepFlags };\n/**\n * @record\n */\nexport function InjectableDef() { }\nfunction InjectableDef_tsickle_Closure_declarations() {\n    /** @type {?} */\n    InjectableDef.prototype.scope;\n    /** @type {?} */\n    InjectableDef.prototype.factory;\n}\n/**\n * @record\n */\nexport function TextDef() { }\nfunction TextDef_tsickle_Closure_declarations() {\n    /** @type {?} */\n    TextDef.prototype.prefix;\n}\n/**\n * @record\n */\nexport function QueryDef() { }\nfunction QueryDef_tsickle_Closure_declarations() {\n    /** @type {?} */\n    QueryDef.prototype.id;\n    /** @type {?} */\n    QueryDef.prototype.filterId;\n    /** @type {?} */\n    QueryDef.prototype.bindings;\n}\n/**\n * @record\n */\nexport function QueryBindingDef() { }\nfunction QueryBindingDef_tsickle_Closure_declarations() {\n    /** @type {?} */\n    QueryBindingDef.prototype.propName;\n    /** @type {?} */\n    QueryBindingDef.prototype.bindingType;\n}\n/** @enum {number} */\nvar QueryBindingType = { First: 0, All: 1, };\nexport { QueryBindingType };\n/**\n * @record\n */\nexport function NgContentDef() { }\nfunction NgContentDef_tsickle_Closure_declarations() {\n    /**\n     * this index is checked against NodeDef.ngContentIndex to find the nodes\n     * that are matched by this ng-content.\n     * Note that a NodeDef with an ng-content can be reprojected, i.e.\n     * have a ngContentIndex on its own.\n     * @type {?}\n     */\n    NgContentDef.prototype.index;\n}\n/**\n * @record\n */\nexport function NgModuleData() { }\nfunction NgModuleData_tsickle_Closure_declarations() {\n    /** @type {?} */\n    NgModuleData.prototype._def;\n    /** @type {?} */\n    NgModuleData.prototype._parent;\n    /** @type {?} */\n    NgModuleData.prototype._providers;\n}\n/**\n * View instance data.\n * Attention: Adding fields to this is performance sensitive!\n * @record\n */\nexport function ViewData() { }\nfunction ViewData_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ViewData.prototype.def;\n    /** @type {?} */\n    ViewData.prototype.root;\n    /** @type {?} */\n    ViewData.prototype.renderer;\n    /** @type {?} */\n    ViewData.prototype.parentNodeDef;\n    /** @type {?} */\n    ViewData.prototype.parent;\n    /** @type {?} */\n    ViewData.prototype.viewContainerParent;\n    /** @type {?} */\n    ViewData.prototype.component;\n    /** @type {?} */\n    ViewData.prototype.context;\n    /** @type {?} */\n    ViewData.prototype.nodes;\n    /** @type {?} */\n    ViewData.prototype.state;\n    /** @type {?} */\n    ViewData.prototype.oldValues;\n    /** @type {?} */\n    ViewData.prototype.disposables;\n    /** @type {?} */\n    ViewData.prototype.initIndex;\n}\n/** @enum {number} */\nvar ViewState = {\n    BeforeFirstCheck: 1,\n    FirstCheck: 2,\n    Attached: 4,\n    ChecksEnabled: 8,\n    IsProjectedView: 16,\n    CheckProjectedView: 32,\n    CheckProjectedViews: 64,\n    Destroyed: 128,\n    // InitState Uses 3 bits\n    InitState_Mask: 1792,\n    InitState_BeforeInit: 0,\n    InitState_CallingOnInit: 256,\n    InitState_CallingAfterContentInit: 512,\n    InitState_CallingAfterViewInit: 768,\n    InitState_AfterInit: 1024,\n    CatDetectChanges: 12,\n    CatInit: 13,\n};\nexport { ViewState };\n/**\n * @param {?} view\n * @param {?} priorInitState\n * @param {?} newInitState\n * @return {?}\n */\nexport function shiftInitState(view, priorInitState, newInitState) {\n    // Only update the InitState if we are currently in the prior state.\n    // For example, only move into CallingInit if we are in BeforeInit. Only\n    // move into CallingContentInit if we are in CallingInit. Normally this will\n    // always be true because of how checkCycle is called in checkAndUpdateView.\n    // However, if checkAndUpdateView is called recursively or if an exception is\n    // thrown while checkAndUpdateView is running, checkAndUpdateView starts over\n    // from the beginning. This ensures the state is monotonically increasing,\n    // terminating in the AfterInit state, which ensures the Init methods are called\n    // at least once and only once.\n    var /** @type {?} */ state = view.state;\n    var /** @type {?} */ initState = state & 1792 /* InitState_Mask */;\n    if (initState === priorInitState) {\n        view.state = (state & ~1792 /* InitState_Mask */) | newInitState;\n        view.initIndex = -1;\n        return true;\n    }\n    return initState === newInitState;\n}\n/**\n * @param {?} view\n * @param {?} initState\n * @param {?} index\n * @return {?}\n */\nexport function shouldCallLifecycleInitHook(view, initState, index) {\n    if ((view.state & 1792 /* InitState_Mask */) === initState && view.initIndex <= index) {\n        view.initIndex = index + 1;\n        return true;\n    }\n    return false;\n}\n/**\n * @record\n */\nexport function DisposableFn() { }\nfunction DisposableFn_tsickle_Closure_declarations() {\n    /* TODO: handle strange member:\n    (): void;\n    */\n}\n/**\n * Node instance data.\n *\n * We have a separate type per NodeType to save memory\n * (TextData | ElementData | ProviderData | PureExpressionData | QueryList<any>)\n *\n * To keep our code monomorphic,\n * we prohibit using `NodeData` directly but enforce the use of accessors (`asElementData`, ...).\n * This way, no usage site can get a `NodeData` from view.nodes and then use it for different\n * purposes.\n */\nvar /**\n * Node instance data.\n *\n * We have a separate type per NodeType to save memory\n * (TextData | ElementData | ProviderData | PureExpressionData | QueryList<any>)\n *\n * To keep our code monomorphic,\n * we prohibit using `NodeData` directly but enforce the use of accessors (`asElementData`, ...).\n * This way, no usage site can get a `NodeData` from view.nodes and then use it for different\n * purposes.\n */\nNodeData = /** @class */ (function () {\n    function NodeData() {\n    }\n    return NodeData;\n}());\n/**\n * Node instance data.\n *\n * We have a separate type per NodeType to save memory\n * (TextData | ElementData | ProviderData | PureExpressionData | QueryList<any>)\n *\n * To keep our code monomorphic,\n * we prohibit using `NodeData` directly but enforce the use of accessors (`asElementData`, ...).\n * This way, no usage site can get a `NodeData` from view.nodes and then use it for different\n * purposes.\n */\nexport { NodeData };\nfunction NodeData_tsickle_Closure_declarations() {\n    /** @type {?} */\n    NodeData.prototype.__brand;\n}\n/**\n * Data for an instantiated NodeType.Text.\n *\n * Attention: Adding fields to this is performance sensitive!\n * @record\n */\nexport function TextData() { }\nfunction TextData_tsickle_Closure_declarations() {\n    /** @type {?} */\n    TextData.prototype.renderText;\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nexport function asTextData(view, index) {\n    return /** @type {?} */ (view.nodes[index]);\n}\n/**\n * Data for an instantiated NodeType.Element.\n *\n * Attention: Adding fields to this is performance sensitive!\n * @record\n */\nexport function ElementData() { }\nfunction ElementData_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ElementData.prototype.renderElement;\n    /** @type {?} */\n    ElementData.prototype.componentView;\n    /** @type {?} */\n    ElementData.prototype.viewContainer;\n    /** @type {?} */\n    ElementData.prototype.template;\n}\n/**\n * @record\n */\nexport function ViewContainerData() { }\nfunction ViewContainerData_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ViewContainerData.prototype._embeddedViews;\n}\n/**\n * @record\n */\nexport function TemplateData() { }\nfunction TemplateData_tsickle_Closure_declarations() {\n    /** @type {?} */\n    TemplateData.prototype._projectedViews;\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nexport function asElementData(view, index) {\n    return /** @type {?} */ (view.nodes[index]);\n}\n/**\n * Data for an instantiated NodeType.Provider.\n *\n * Attention: Adding fields to this is performance sensitive!\n * @record\n */\nexport function ProviderData() { }\nfunction ProviderData_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ProviderData.prototype.instance;\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nexport function asProviderData(view, index) {\n    return /** @type {?} */ (view.nodes[index]);\n}\n/**\n * Data for an instantiated NodeType.PureExpression.\n *\n * Attention: Adding fields to this is performance sensitive!\n * @record\n */\nexport function PureExpressionData() { }\nfunction PureExpressionData_tsickle_Closure_declarations() {\n    /** @type {?} */\n    PureExpressionData.prototype.value;\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nexport function asPureExpressionData(view, index) {\n    return /** @type {?} */ (view.nodes[index]);\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nexport function asQueryList(view, index) {\n    return /** @type {?} */ (view.nodes[index]);\n}\n/**\n * @record\n */\nexport function RootData() { }\nfunction RootData_tsickle_Closure_declarations() {\n    /** @type {?} */\n    RootData.prototype.injector;\n    /** @type {?} */\n    RootData.prototype.ngModule;\n    /** @type {?} */\n    RootData.prototype.projectableNodes;\n    /** @type {?} */\n    RootData.prototype.selectorOrNode;\n    /** @type {?} */\n    RootData.prototype.renderer;\n    /** @type {?} */\n    RootData.prototype.rendererFactory;\n    /** @type {?} */\n    RootData.prototype.errorHandler;\n    /** @type {?} */\n    RootData.prototype.sanitizer;\n}\n/**\n * @abstract\n */\nvar /**\n * @abstract\n */\nDebugContext = /** @class */ (function () {\n    function DebugContext() {\n    }\n    return DebugContext;\n}());\n/**\n * @abstract\n */\nexport { DebugContext };\nfunction DebugContext_tsickle_Closure_declarations() {\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.view = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.nodeIndex = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.injector = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.component = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.providerTokens = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.references = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.context = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.componentRenderElement = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.renderNode = function () { };\n    /**\n     * @abstract\n     * @param {?} console\n     * @param {...?} values\n     * @return {?}\n     */\n    DebugContext.prototype.logError = function (console, values) { };\n}\n/** @enum {number} */\nvar CheckType = { CheckAndUpdate: 0, CheckNoChanges: 1, };\nexport { CheckType };\n/**\n * @record\n */\nexport function ProviderOverride() { }\nfunction ProviderOverride_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ProviderOverride.prototype.token;\n    /** @type {?} */\n    ProviderOverride.prototype.flags;\n    /** @type {?} */\n    ProviderOverride.prototype.value;\n    /** @type {?} */\n    ProviderOverride.prototype.deps;\n    /** @type {?} */\n    ProviderOverride.prototype.deprecatedBehavior;\n}\n/**\n * This object is used to prevent cycles in the source files and to have a place where\n * debug mode can hook it. It is lazily filled when `isDevMode` is known.\n */\nexport var /** @type {?} */ Services = {\n    setCurrentNode: /** @type {?} */ ((undefined)),\n    createRootView: /** @type {?} */ ((undefined)),\n    createEmbeddedView: /** @type {?} */ ((undefined)),\n    createComponentView: /** @type {?} */ ((undefined)),\n    createNgModuleRef: /** @type {?} */ ((undefined)),\n    overrideProvider: /** @type {?} */ ((undefined)),\n    overrideComponentView: /** @type {?} */ ((undefined)),\n    clearOverrides: /** @type {?} */ ((undefined)),\n    checkAndUpdateView: /** @type {?} */ ((undefined)),\n    checkNoChangesView: /** @type {?} */ ((undefined)),\n    destroyView: /** @type {?} */ ((undefined)),\n    resolveDep: /** @type {?} */ ((undefined)),\n    createDebugContext: /** @type {?} */ ((undefined)),\n    handleEvent: /** @type {?} */ ((undefined)),\n    updateDirectives: /** @type {?} */ ((undefined)),\n    updateRenderer: /** @type {?} */ ((undefined)),\n    dirtyParentQueries: /** @type {?} */ ((undefined)),\n};\n//# sourceMappingURL=types.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ERROR_DEBUG_CONTEXT, ERROR_LOGGER, getDebugContext } from '../errors';\n/**\n * @param {?} context\n * @param {?} oldValue\n * @param {?} currValue\n * @param {?} isFirstCheck\n * @return {?}\n */\nexport function expressionChangedAfterItHasBeenCheckedError(context, oldValue, currValue, isFirstCheck) {\n    var /** @type {?} */ msg = \"ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '\" + oldValue + \"'. Current value: '\" + currValue + \"'.\";\n    if (isFirstCheck) {\n        msg +=\n            \" It seems like the view has been created after its parent and its children have been dirty checked.\" +\n                \" Has it been created in a change detection hook ?\";\n    }\n    return viewDebugError(msg, context);\n}\n/**\n * @param {?} err\n * @param {?} context\n * @return {?}\n */\nexport function viewWrappedDebugError(err, context) {\n    if (!(err instanceof Error)) {\n        // errors that are not Error instances don't have a stack,\n        // so it is ok to wrap them into a new Error object...\n        err = new Error(err.toString());\n    }\n    _addDebugContext(err, context);\n    return err;\n}\n/**\n * @param {?} msg\n * @param {?} context\n * @return {?}\n */\nexport function viewDebugError(msg, context) {\n    var /** @type {?} */ err = new Error(msg);\n    _addDebugContext(err, context);\n    return err;\n}\n/**\n * @param {?} err\n * @param {?} context\n * @return {?}\n */\nfunction _addDebugContext(err, context) {\n    (/** @type {?} */ (err))[ERROR_DEBUG_CONTEXT] = context;\n    (/** @type {?} */ (err))[ERROR_LOGGER] = context.logError.bind(context);\n}\n/**\n * @param {?} err\n * @return {?}\n */\nexport function isViewDebugError(err) {\n    return !!getDebugContext(err);\n}\n/**\n * @param {?} action\n * @return {?}\n */\nexport function viewDestroyedError(action) {\n    return new Error(\"ViewDestroyedError: Attempt to use a destroyed view: \" + action);\n}\n//# sourceMappingURL=errors.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { WrappedValue, devModeEqual } from '../change_detection/change_detection';\nimport { SOURCE } from '../di/injector';\nimport { ViewEncapsulation } from '../metadata/view';\nimport { looseIdentical, stringify } from '../util';\nimport { expressionChangedAfterItHasBeenCheckedError } from './errors';\nimport { Services, asElementData, asTextData } from './types';\nexport var /** @type {?} */ NOOP = function () { };\nvar /** @type {?} */ _tokenKeyCache = new Map();\n/**\n * @param {?} token\n * @return {?}\n */\nexport function tokenKey(token) {\n    var /** @type {?} */ key = _tokenKeyCache.get(token);\n    if (!key) {\n        key = stringify(token) + '_' + _tokenKeyCache.size;\n        _tokenKeyCache.set(token, key);\n    }\n    return key;\n}\n/**\n * @param {?} view\n * @param {?} nodeIdx\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nexport function unwrapValue(view, nodeIdx, bindingIdx, value) {\n    if (WrappedValue.isWrapped(value)) {\n        value = WrappedValue.unwrap(value);\n        var /** @type {?} */ globalBindingIdx = view.def.nodes[nodeIdx].bindingIndex + bindingIdx;\n        var /** @type {?} */ oldValue = WrappedValue.unwrap(view.oldValues[globalBindingIdx]);\n        view.oldValues[globalBindingIdx] = new WrappedValue(oldValue);\n    }\n    return value;\n}\nvar /** @type {?} */ UNDEFINED_RENDERER_TYPE_ID = '$$undefined';\nvar /** @type {?} */ EMPTY_RENDERER_TYPE_ID = '$$empty';\n/**\n * @param {?} values\n * @return {?}\n */\nexport function createRendererType2(values) {\n    return {\n        id: UNDEFINED_RENDERER_TYPE_ID,\n        styles: values.styles,\n        encapsulation: values.encapsulation,\n        data: values.data\n    };\n}\nvar /** @type {?} */ _renderCompCount = 0;\n/**\n * @param {?=} type\n * @return {?}\n */\nexport function resolveRendererType2(type) {\n    if (type && type.id === UNDEFINED_RENDERER_TYPE_ID) {\n        // first time we see this RendererType2. Initialize it...\n        var /** @type {?} */ isFilled = ((type.encapsulation != null && type.encapsulation !== ViewEncapsulation.None) ||\n            type.styles.length || Object.keys(type.data).length);\n        if (isFilled) {\n            type.id = \"c\" + _renderCompCount++;\n        }\n        else {\n            type.id = EMPTY_RENDERER_TYPE_ID;\n        }\n    }\n    if (type && type.id === EMPTY_RENDERER_TYPE_ID) {\n        type = null;\n    }\n    return type || null;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nexport function checkBinding(view, def, bindingIdx, value) {\n    var /** @type {?} */ oldValues = view.oldValues;\n    if ((view.state & 2 /* FirstCheck */) ||\n        !looseIdentical(oldValues[def.bindingIndex + bindingIdx], value)) {\n        return true;\n    }\n    return false;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nexport function checkAndUpdateBinding(view, def, bindingIdx, value) {\n    if (checkBinding(view, def, bindingIdx, value)) {\n        view.oldValues[def.bindingIndex + bindingIdx] = value;\n        return true;\n    }\n    return false;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nexport function checkBindingNoChanges(view, def, bindingIdx, value) {\n    var /** @type {?} */ oldValue = view.oldValues[def.bindingIndex + bindingIdx];\n    if ((view.state & 1 /* BeforeFirstCheck */) || !devModeEqual(oldValue, value)) {\n        var /** @type {?} */ bindingName = def.bindings[bindingIdx].name;\n        throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, def.nodeIndex), bindingName + \": \" + oldValue, bindingName + \": \" + value, (view.state & 1 /* BeforeFirstCheck */) !== 0);\n    }\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function markParentViewsForCheck(view) {\n    var /** @type {?} */ currView = view;\n    while (currView) {\n        if (currView.def.flags & 2 /* OnPush */) {\n            currView.state |= 8 /* ChecksEnabled */;\n        }\n        currView = currView.viewContainerParent || currView.parent;\n    }\n}\n/**\n * @param {?} view\n * @param {?} endView\n * @return {?}\n */\nexport function markParentViewsForCheckProjectedViews(view, endView) {\n    var /** @type {?} */ currView = view;\n    while (currView && currView !== endView) {\n        currView.state |= 64 /* CheckProjectedViews */;\n        currView = currView.viewContainerParent || currView.parent;\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @param {?} eventName\n * @param {?} event\n * @return {?}\n */\nexport function dispatchEvent(view, nodeIndex, eventName, event) {\n    try {\n        var /** @type {?} */ nodeDef = view.def.nodes[nodeIndex];\n        var /** @type {?} */ startView = nodeDef.flags & 33554432 /* ComponentView */ ?\n            asElementData(view, nodeIndex).componentView :\n            view;\n        markParentViewsForCheck(startView);\n        return Services.handleEvent(view, nodeIndex, eventName, event);\n    }\n    catch (/** @type {?} */ e) {\n        // Attention: Don't rethrow, as it would cancel Observable subscriptions!\n        view.root.errorHandler.handleError(e);\n    }\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function declaredViewContainer(view) {\n    if (view.parent) {\n        var /** @type {?} */ parentView = view.parent;\n        return asElementData(parentView, /** @type {?} */ ((view.parentNodeDef)).nodeIndex);\n    }\n    return null;\n}\n/**\n * for component views, this is the host element.\n * for embedded views, this is the index of the parent node\n * that contains the view container.\n * @param {?} view\n * @return {?}\n */\nexport function viewParentEl(view) {\n    var /** @type {?} */ parentView = view.parent;\n    if (parentView) {\n        return /** @type {?} */ ((view.parentNodeDef)).parent;\n    }\n    else {\n        return null;\n    }\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nexport function renderNode(view, def) {\n    switch (def.flags & 201347067 /* Types */) {\n        case 1 /* TypeElement */:\n            return asElementData(view, def.nodeIndex).renderElement;\n        case 2 /* TypeText */:\n            return asTextData(view, def.nodeIndex).renderText;\n    }\n}\n/**\n * @param {?} target\n * @param {?} name\n * @return {?}\n */\nexport function elementEventFullName(target, name) {\n    return target ? target + \":\" + name : name;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function isComponentView(view) {\n    return !!view.parent && !!(/** @type {?} */ ((view.parentNodeDef)).flags & 32768 /* Component */);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function isEmbeddedView(view) {\n    return !!view.parent && !(/** @type {?} */ ((view.parentNodeDef)).flags & 32768 /* Component */);\n}\n/**\n * @param {?} queryId\n * @return {?}\n */\nexport function filterQueryId(queryId) {\n    return 1 << (queryId % 32);\n}\n/**\n * @param {?} matchedQueriesDsl\n * @return {?}\n */\nexport function splitMatchedQueriesDsl(matchedQueriesDsl) {\n    var /** @type {?} */ matchedQueries = {};\n    var /** @type {?} */ matchedQueryIds = 0;\n    var /** @type {?} */ references = {};\n    if (matchedQueriesDsl) {\n        matchedQueriesDsl.forEach(function (_a) {\n            var queryId = _a[0], valueType = _a[1];\n            if (typeof queryId === 'number') {\n                matchedQueries[queryId] = valueType;\n                matchedQueryIds |= filterQueryId(queryId);\n            }\n            else {\n                references[queryId] = valueType;\n            }\n        });\n    }\n    return { matchedQueries: matchedQueries, references: references, matchedQueryIds: matchedQueryIds };\n}\n/**\n * @param {?} deps\n * @param {?=} sourceName\n * @return {?}\n */\nexport function splitDepsDsl(deps, sourceName) {\n    return deps.map(function (value) {\n        var /** @type {?} */ token;\n        var /** @type {?} */ flags;\n        if (Array.isArray(value)) {\n            flags = value[0], token = value[1];\n        }\n        else {\n            flags = 0 /* None */;\n            token = value;\n        }\n        if (token && (typeof token === 'function' || typeof token === 'object') && sourceName) {\n            Object.defineProperty(token, SOURCE, { value: sourceName, configurable: true });\n        }\n        return { flags: flags, token: token, tokenKey: tokenKey(token) };\n    });\n}\n/**\n * @param {?} view\n * @param {?} renderHost\n * @param {?} def\n * @return {?}\n */\nexport function getParentRenderElement(view, renderHost, def) {\n    var /** @type {?} */ renderParent = def.renderParent;\n    if (renderParent) {\n        if ((renderParent.flags & 1 /* TypeElement */) === 0 ||\n            (renderParent.flags & 33554432 /* ComponentView */) === 0 ||\n            (/** @type {?} */ ((renderParent.element)).componentRendererType && /** @type {?} */ ((/** @type {?} */ ((renderParent.element)).componentRendererType)).encapsulation === ViewEncapsulation.Native)) {\n            // only children of non components, or children of components with native encapsulation should\n            // be attached.\n            return asElementData(view, /** @type {?} */ ((def.renderParent)).nodeIndex).renderElement;\n        }\n    }\n    else {\n        return renderHost;\n    }\n}\nvar /** @type {?} */ DEFINITION_CACHE = new WeakMap();\n/**\n * @template D\n * @param {?} factory\n * @return {?}\n */\nexport function resolveDefinition(factory) {\n    var /** @type {?} */ value = /** @type {?} */ (((DEFINITION_CACHE.get(factory))));\n    if (!value) {\n        value = factory(function () { return NOOP; });\n        value.factory = factory;\n        DEFINITION_CACHE.set(factory, value);\n    }\n    return value;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function rootRenderNodes(view) {\n    var /** @type {?} */ renderNodes = [];\n    visitRootRenderNodes(view, 0 /* Collect */, undefined, undefined, renderNodes);\n    return renderNodes;\n}\n/** @enum {number} */\nvar RenderNodeAction = { Collect: 0, AppendChild: 1, InsertBefore: 2, RemoveChild: 3, };\nexport { RenderNodeAction };\n/**\n * @param {?} view\n * @param {?} action\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nexport function visitRootRenderNodes(view, action, parentNode, nextSibling, target) {\n    // We need to re-compute the parent node in case the nodes have been moved around manually\n    if (action === 3 /* RemoveChild */) {\n        parentNode = view.renderer.parentNode(renderNode(view, /** @type {?} */ ((view.def.lastRenderRootNode))));\n    }\n    visitSiblingRenderNodes(view, action, 0, view.def.nodes.length - 1, parentNode, nextSibling, target);\n}\n/**\n * @param {?} view\n * @param {?} action\n * @param {?} startIndex\n * @param {?} endIndex\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nexport function visitSiblingRenderNodes(view, action, startIndex, endIndex, parentNode, nextSibling, target) {\n    for (var /** @type {?} */ i = startIndex; i <= endIndex; i++) {\n        var /** @type {?} */ nodeDef = view.def.nodes[i];\n        if (nodeDef.flags & (1 /* TypeElement */ | 2 /* TypeText */ | 8 /* TypeNgContent */)) {\n            visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target);\n        }\n        // jump to next sibling\n        i += nodeDef.childCount;\n    }\n}\n/**\n * @param {?} view\n * @param {?} ngContentIndex\n * @param {?} action\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nexport function visitProjectedRenderNodes(view, ngContentIndex, action, parentNode, nextSibling, target) {\n    var /** @type {?} */ compView = view;\n    while (compView && !isComponentView(compView)) {\n        compView = compView.parent;\n    }\n    var /** @type {?} */ hostView = /** @type {?} */ ((compView)).parent;\n    var /** @type {?} */ hostElDef = viewParentEl(/** @type {?} */ ((compView)));\n    var /** @type {?} */ startIndex = /** @type {?} */ ((hostElDef)).nodeIndex + 1;\n    var /** @type {?} */ endIndex = /** @type {?} */ ((hostElDef)).nodeIndex + /** @type {?} */ ((hostElDef)).childCount;\n    for (var /** @type {?} */ i = startIndex; i <= endIndex; i++) {\n        var /** @type {?} */ nodeDef = /** @type {?} */ ((hostView)).def.nodes[i];\n        if (nodeDef.ngContentIndex === ngContentIndex) {\n            visitRenderNode(/** @type {?} */ ((hostView)), nodeDef, action, parentNode, nextSibling, target);\n        }\n        // jump to next sibling\n        i += nodeDef.childCount;\n    }\n    if (!/** @type {?} */ ((hostView)).parent) {\n        // a root view\n        var /** @type {?} */ projectedNodes = view.root.projectableNodes[ngContentIndex];\n        if (projectedNodes) {\n            for (var /** @type {?} */ i = 0; i < projectedNodes.length; i++) {\n                execRenderNodeAction(view, projectedNodes[i], action, parentNode, nextSibling, target);\n            }\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} action\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nfunction visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target) {\n    if (nodeDef.flags & 8 /* TypeNgContent */) {\n        visitProjectedRenderNodes(view, /** @type {?} */ ((nodeDef.ngContent)).index, action, parentNode, nextSibling, target);\n    }\n    else {\n        var /** @type {?} */ rn = renderNode(view, nodeDef);\n        if (action === 3 /* RemoveChild */ && (nodeDef.flags & 33554432 /* ComponentView */) &&\n            (nodeDef.bindingFlags & 48 /* CatSyntheticProperty */)) {\n            // Note: we might need to do both actions.\n            if (nodeDef.bindingFlags & (16 /* SyntheticProperty */)) {\n                execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);\n            }\n            if (nodeDef.bindingFlags & (32 /* SyntheticHostProperty */)) {\n                var /** @type {?} */ compView = asElementData(view, nodeDef.nodeIndex).componentView;\n                execRenderNodeAction(compView, rn, action, parentNode, nextSibling, target);\n            }\n        }\n        else {\n            execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);\n        }\n        if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n            var /** @type {?} */ embeddedViews = /** @type {?} */ ((asElementData(view, nodeDef.nodeIndex).viewContainer))._embeddedViews;\n            for (var /** @type {?} */ k = 0; k < embeddedViews.length; k++) {\n                visitRootRenderNodes(embeddedViews[k], action, parentNode, nextSibling, target);\n            }\n        }\n        if (nodeDef.flags & 1 /* TypeElement */ && !/** @type {?} */ ((nodeDef.element)).name) {\n            visitSiblingRenderNodes(view, action, nodeDef.nodeIndex + 1, nodeDef.nodeIndex + nodeDef.childCount, parentNode, nextSibling, target);\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} renderNode\n * @param {?} action\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nfunction execRenderNodeAction(view, renderNode, action, parentNode, nextSibling, target) {\n    var /** @type {?} */ renderer = view.renderer;\n    switch (action) {\n        case 1 /* AppendChild */:\n            renderer.appendChild(parentNode, renderNode);\n            break;\n        case 2 /* InsertBefore */:\n            renderer.insertBefore(parentNode, renderNode, nextSibling);\n            break;\n        case 3 /* RemoveChild */:\n            renderer.removeChild(parentNode, renderNode);\n            break;\n        case 0 /* Collect */:\n            /** @type {?} */ ((target)).push(renderNode);\n            break;\n    }\n}\nvar /** @type {?} */ NS_PREFIX_RE = /^:([^:]+):(.+)$/;\n/**\n * @param {?} name\n * @return {?}\n */\nexport function splitNamespace(name) {\n    if (name[0] === ':') {\n        var /** @type {?} */ match = /** @type {?} */ ((name.match(NS_PREFIX_RE)));\n        return [match[1], match[2]];\n    }\n    return ['', name];\n}\n/**\n * @param {?} bindings\n * @return {?}\n */\nexport function calcBindingFlags(bindings) {\n    var /** @type {?} */ flags = 0;\n    for (var /** @type {?} */ i = 0; i < bindings.length; i++) {\n        flags |= bindings[i].flags;\n    }\n    return flags;\n}\n/**\n * @param {?} valueCount\n * @param {?} constAndInterp\n * @return {?}\n */\nexport function interpolate(valueCount, constAndInterp) {\n    var /** @type {?} */ result = '';\n    for (var /** @type {?} */ i = 0; i < valueCount * 2; i = i + 2) {\n        result = result + constAndInterp[i] + _toStringWithNull(constAndInterp[i + 1]);\n    }\n    return result + constAndInterp[valueCount * 2];\n}\n/**\n * @param {?} valueCount\n * @param {?} c0\n * @param {?} a1\n * @param {?} c1\n * @param {?=} a2\n * @param {?=} c2\n * @param {?=} a3\n * @param {?=} c3\n * @param {?=} a4\n * @param {?=} c4\n * @param {?=} a5\n * @param {?=} c5\n * @param {?=} a6\n * @param {?=} c6\n * @param {?=} a7\n * @param {?=} c7\n * @param {?=} a8\n * @param {?=} c8\n * @param {?=} a9\n * @param {?=} c9\n * @return {?}\n */\nexport function inlineInterpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {\n    switch (valueCount) {\n        case 1:\n            return c0 + _toStringWithNull(a1) + c1;\n        case 2:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;\n        case 3:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3;\n        case 4:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4;\n        case 5:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;\n        case 6:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;\n        case 7:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                c6 + _toStringWithNull(a7) + c7;\n        case 8:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;\n        case 9:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;\n        default:\n            throw new Error(\"Does not support more than 9 expressions\");\n    }\n}\n/**\n * @param {?} v\n * @return {?}\n */\nfunction _toStringWithNull(v) {\n    return v != null ? v.toString() : '';\n}\nexport var /** @type {?} */ EMPTY_ARRAY = [];\nexport var /** @type {?} */ EMPTY_MAP = {};\n//# sourceMappingURL=util.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { SecurityContext } from '../sanitization/security';\nimport { asElementData } from './types';\nimport { NOOP, calcBindingFlags, checkAndUpdateBinding, dispatchEvent, elementEventFullName, getParentRenderElement, resolveDefinition, resolveRendererType2, splitMatchedQueriesDsl, splitNamespace } from './util';\n/**\n * @param {?} flags\n * @param {?} matchedQueriesDsl\n * @param {?} ngContentIndex\n * @param {?} childCount\n * @param {?=} handleEvent\n * @param {?=} templateFactory\n * @return {?}\n */\nexport function anchorDef(flags, matchedQueriesDsl, ngContentIndex, childCount, handleEvent, templateFactory) {\n    flags |= 1 /* TypeElement */;\n    var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;\n    var /** @type {?} */ template = templateFactory ? resolveDefinition(templateFactory) : null;\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        flags: flags,\n        checkIndex: -1,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references, ngContentIndex: ngContentIndex, childCount: childCount,\n        bindings: [],\n        bindingFlags: 0,\n        outputs: [],\n        element: {\n            ns: null,\n            name: null,\n            attrs: null, template: template,\n            componentProvider: null,\n            componentView: null,\n            componentRendererType: null,\n            publicProviders: null,\n            allProviders: null,\n            handleEvent: handleEvent || NOOP\n        },\n        provider: null,\n        text: null,\n        query: null,\n        ngContent: null\n    };\n}\n/**\n * @param {?} checkIndex\n * @param {?} flags\n * @param {?} matchedQueriesDsl\n * @param {?} ngContentIndex\n * @param {?} childCount\n * @param {?} namespaceAndName\n * @param {?=} fixedAttrs\n * @param {?=} bindings\n * @param {?=} outputs\n * @param {?=} handleEvent\n * @param {?=} componentView\n * @param {?=} componentRendererType\n * @return {?}\n */\nexport function elementDef(checkIndex, flags, matchedQueriesDsl, ngContentIndex, childCount, namespaceAndName, fixedAttrs, bindings, outputs, handleEvent, componentView, componentRendererType) {\n    if (fixedAttrs === void 0) { fixedAttrs = []; }\n    if (!handleEvent) {\n        handleEvent = NOOP;\n    }\n    var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;\n    var /** @type {?} */ ns = /** @type {?} */ ((null));\n    var /** @type {?} */ name = /** @type {?} */ ((null));\n    if (namespaceAndName) {\n        _b = splitNamespace(namespaceAndName), ns = _b[0], name = _b[1];\n    }\n    bindings = bindings || [];\n    var /** @type {?} */ bindingDefs = new Array(bindings.length);\n    for (var /** @type {?} */ i = 0; i < bindings.length; i++) {\n        var _c = bindings[i], bindingFlags = _c[0], namespaceAndName_1 = _c[1], suffixOrSecurityContext = _c[2];\n        var _d = splitNamespace(namespaceAndName_1), ns_1 = _d[0], name_1 = _d[1];\n        var /** @type {?} */ securityContext = /** @type {?} */ ((undefined));\n        var /** @type {?} */ suffix = /** @type {?} */ ((undefined));\n        switch (bindingFlags & 15 /* Types */) {\n            case 4 /* TypeElementStyle */:\n                suffix = /** @type {?} */ (suffixOrSecurityContext);\n                break;\n            case 1 /* TypeElementAttribute */:\n            case 8 /* TypeProperty */:\n                securityContext = /** @type {?} */ (suffixOrSecurityContext);\n                break;\n        }\n        bindingDefs[i] =\n            { flags: bindingFlags, ns: ns_1, name: name_1, nonMinifiedName: name_1, securityContext: securityContext, suffix: suffix };\n    }\n    outputs = outputs || [];\n    var /** @type {?} */ outputDefs = new Array(outputs.length);\n    for (var /** @type {?} */ i = 0; i < outputs.length; i++) {\n        var _e = outputs[i], target = _e[0], eventName = _e[1];\n        outputDefs[i] = {\n            type: 0 /* ElementOutput */,\n            target: /** @type {?} */ (target), eventName: eventName,\n            propName: null\n        };\n    }\n    fixedAttrs = fixedAttrs || [];\n    var /** @type {?} */ attrs = /** @type {?} */ (fixedAttrs.map(function (_a) {\n        var namespaceAndName = _a[0], value = _a[1];\n        var _b = splitNamespace(namespaceAndName), ns = _b[0], name = _b[1];\n        return [ns, name, value];\n    }));\n    componentRendererType = resolveRendererType2(componentRendererType);\n    if (componentView) {\n        flags |= 33554432 /* ComponentView */;\n    }\n    flags |= 1 /* TypeElement */;\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex: checkIndex,\n        flags: flags,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references, ngContentIndex: ngContentIndex, childCount: childCount,\n        bindings: bindingDefs,\n        bindingFlags: calcBindingFlags(bindingDefs),\n        outputs: outputDefs,\n        element: {\n            ns: ns,\n            name: name,\n            attrs: attrs,\n            template: null,\n            // will bet set by the view definition\n            componentProvider: null,\n            componentView: componentView || null,\n            componentRendererType: componentRendererType,\n            publicProviders: null,\n            allProviders: null,\n            handleEvent: handleEvent || NOOP,\n        },\n        provider: null,\n        text: null,\n        query: null,\n        ngContent: null\n    };\n    var _b;\n}\n/**\n * @param {?} view\n * @param {?} renderHost\n * @param {?} def\n * @return {?}\n */\nexport function createElement(view, renderHost, def) {\n    var /** @type {?} */ elDef = /** @type {?} */ ((def.element));\n    var /** @type {?} */ rootSelectorOrNode = view.root.selectorOrNode;\n    var /** @type {?} */ renderer = view.renderer;\n    var /** @type {?} */ el;\n    if (view.parent || !rootSelectorOrNode) {\n        if (elDef.name) {\n            el = renderer.createElement(elDef.name, elDef.ns);\n        }\n        else {\n            el = renderer.createComment('');\n        }\n        var /** @type {?} */ parentEl = getParentRenderElement(view, renderHost, def);\n        if (parentEl) {\n            renderer.appendChild(parentEl, el);\n        }\n    }\n    else {\n        el = renderer.selectRootElement(rootSelectorOrNode);\n    }\n    if (elDef.attrs) {\n        for (var /** @type {?} */ i = 0; i < elDef.attrs.length; i++) {\n            var _a = elDef.attrs[i], ns = _a[0], name_2 = _a[1], value = _a[2];\n            renderer.setAttribute(el, name_2, value, ns);\n        }\n    }\n    return el;\n}\n/**\n * @param {?} view\n * @param {?} compView\n * @param {?} def\n * @param {?} el\n * @return {?}\n */\nexport function listenToElementOutputs(view, compView, def, el) {\n    for (var /** @type {?} */ i = 0; i < def.outputs.length; i++) {\n        var /** @type {?} */ output = def.outputs[i];\n        var /** @type {?} */ handleEventClosure = renderEventHandlerClosure(view, def.nodeIndex, elementEventFullName(output.target, output.eventName));\n        var /** @type {?} */ listenTarget = output.target;\n        var /** @type {?} */ listenerView = view;\n        if (output.target === 'component') {\n            listenTarget = null;\n            listenerView = compView;\n        }\n        var /** @type {?} */ disposable = /** @type {?} */ (listenerView.renderer.listen(listenTarget || el, output.eventName, handleEventClosure)); /** @type {?} */\n        ((view.disposables))[def.outputIndex + i] = disposable;\n    }\n}\n/**\n * @param {?} view\n * @param {?} index\n * @param {?} eventName\n * @return {?}\n */\nfunction renderEventHandlerClosure(view, index, eventName) {\n    return function (event) { return dispatchEvent(view, index, eventName, event); };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nexport function checkAndUpdateElementInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    var /** @type {?} */ bindLen = def.bindings.length;\n    var /** @type {?} */ changed = false;\n    if (bindLen > 0 && checkAndUpdateElementValue(view, def, 0, v0))\n        changed = true;\n    if (bindLen > 1 && checkAndUpdateElementValue(view, def, 1, v1))\n        changed = true;\n    if (bindLen > 2 && checkAndUpdateElementValue(view, def, 2, v2))\n        changed = true;\n    if (bindLen > 3 && checkAndUpdateElementValue(view, def, 3, v3))\n        changed = true;\n    if (bindLen > 4 && checkAndUpdateElementValue(view, def, 4, v4))\n        changed = true;\n    if (bindLen > 5 && checkAndUpdateElementValue(view, def, 5, v5))\n        changed = true;\n    if (bindLen > 6 && checkAndUpdateElementValue(view, def, 6, v6))\n        changed = true;\n    if (bindLen > 7 && checkAndUpdateElementValue(view, def, 7, v7))\n        changed = true;\n    if (bindLen > 8 && checkAndUpdateElementValue(view, def, 8, v8))\n        changed = true;\n    if (bindLen > 9 && checkAndUpdateElementValue(view, def, 9, v9))\n        changed = true;\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} values\n * @return {?}\n */\nexport function checkAndUpdateElementDynamic(view, def, values) {\n    var /** @type {?} */ changed = false;\n    for (var /** @type {?} */ i = 0; i < values.length; i++) {\n        if (checkAndUpdateElementValue(view, def, i, values[i]))\n            changed = true;\n    }\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nfunction checkAndUpdateElementValue(view, def, bindingIdx, value) {\n    if (!checkAndUpdateBinding(view, def, bindingIdx, value)) {\n        return false;\n    }\n    var /** @type {?} */ binding = def.bindings[bindingIdx];\n    var /** @type {?} */ elData = asElementData(view, def.nodeIndex);\n    var /** @type {?} */ renderNode = elData.renderElement;\n    var /** @type {?} */ name = /** @type {?} */ ((binding.name));\n    switch (binding.flags & 15 /* Types */) {\n        case 1 /* TypeElementAttribute */:\n            setElementAttribute(view, binding, renderNode, binding.ns, name, value);\n            break;\n        case 2 /* TypeElementClass */:\n            setElementClass(view, renderNode, name, value);\n            break;\n        case 4 /* TypeElementStyle */:\n            setElementStyle(view, binding, renderNode, name, value);\n            break;\n        case 8 /* TypeProperty */:\n            var /** @type {?} */ bindView = (def.flags & 33554432 /* ComponentView */ &&\n                binding.flags & 32 /* SyntheticHostProperty */) ?\n                elData.componentView :\n                view;\n            setElementProperty(bindView, binding, renderNode, name, value);\n            break;\n    }\n    return true;\n}\n/**\n * @param {?} view\n * @param {?} binding\n * @param {?} renderNode\n * @param {?} ns\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nfunction setElementAttribute(view, binding, renderNode, ns, name, value) {\n    var /** @type {?} */ securityContext = binding.securityContext;\n    var /** @type {?} */ renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;\n    renderValue = renderValue != null ? renderValue.toString() : null;\n    var /** @type {?} */ renderer = view.renderer;\n    if (value != null) {\n        renderer.setAttribute(renderNode, name, renderValue, ns);\n    }\n    else {\n        renderer.removeAttribute(renderNode, name, ns);\n    }\n}\n/**\n * @param {?} view\n * @param {?} renderNode\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nfunction setElementClass(view, renderNode, name, value) {\n    var /** @type {?} */ renderer = view.renderer;\n    if (value) {\n        renderer.addClass(renderNode, name);\n    }\n    else {\n        renderer.removeClass(renderNode, name);\n    }\n}\n/**\n * @param {?} view\n * @param {?} binding\n * @param {?} renderNode\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nfunction setElementStyle(view, binding, renderNode, name, value) {\n    var /** @type {?} */ renderValue = view.root.sanitizer.sanitize(SecurityContext.STYLE, /** @type {?} */ (value));\n    if (renderValue != null) {\n        renderValue = renderValue.toString();\n        var /** @type {?} */ unit = binding.suffix;\n        if (unit != null) {\n            renderValue = renderValue + unit;\n        }\n    }\n    else {\n        renderValue = null;\n    }\n    var /** @type {?} */ renderer = view.renderer;\n    if (renderValue != null) {\n        renderer.setStyle(renderNode, name, renderValue);\n    }\n    else {\n        renderer.removeStyle(renderNode, name);\n    }\n}\n/**\n * @param {?} view\n * @param {?} binding\n * @param {?} renderNode\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nfunction setElementProperty(view, binding, renderNode, name, value) {\n    var /** @type {?} */ securityContext = binding.securityContext;\n    var /** @type {?} */ renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;\n    view.renderer.setProperty(renderNode, name, renderValue);\n}\n//# sourceMappingURL=element.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { resolveForwardRef } from '../di/forward_ref';\nimport { Injector, setCurrentInjector } from '../di/injector';\nimport { APP_ROOT_SCOPE } from '../di/scope';\nimport { NgModuleRef } from '../linker/ng_module_factory';\nimport { stringify } from '../util';\nimport { splitDepsDsl, tokenKey } from './util';\nvar /** @type {?} */ UNDEFINED_VALUE = new Object();\nvar /** @type {?} */ InjectorRefTokenKey = tokenKey(Injector);\nvar /** @type {?} */ NgModuleRefTokenKey = tokenKey(NgModuleRef);\n/**\n * @param {?} scope\n * @param {?} factory\n * @return {?}\n */\nexport function injectableDef(scope, factory) {\n    return {\n        scope: scope, factory: factory,\n    };\n}\n/**\n * @param {?} flags\n * @param {?} token\n * @param {?} value\n * @param {?} deps\n * @return {?}\n */\nexport function moduleProvideDef(flags, token, value, deps) {\n    // Need to resolve forwardRefs as e.g. for `useValue` we\n    // lowered the expression and then stopped evaluating it,\n    // i.e. also didn't unwrap it.\n    value = resolveForwardRef(value);\n    var /** @type {?} */ depDefs = splitDepsDsl(deps, stringify(token));\n    return {\n        // will bet set by the module definition\n        index: -1,\n        deps: depDefs, flags: flags, token: token, value: value\n    };\n}\n/**\n * @param {?} providers\n * @return {?}\n */\nexport function moduleDef(providers) {\n    var /** @type {?} */ providersByKey = {};\n    var /** @type {?} */ modules = [];\n    var /** @type {?} */ isRoot = false;\n    for (var /** @type {?} */ i = 0; i < providers.length; i++) {\n        var /** @type {?} */ provider = providers[i];\n        if (provider.token === APP_ROOT_SCOPE) {\n            isRoot = true;\n        }\n        if (provider.flags & 1073741824 /* TypeNgModule */) {\n            modules.push(provider.token);\n        }\n        provider.index = i;\n        providersByKey[tokenKey(provider.token)] = provider;\n    }\n    return {\n        // Will be filled later...\n        factory: null,\n        providersByKey: providersByKey,\n        providers: providers,\n        modules: modules,\n        isRoot: isRoot,\n    };\n}\n/**\n * @param {?} data\n * @return {?}\n */\nexport function initNgModule(data) {\n    var /** @type {?} */ def = data._def;\n    var /** @type {?} */ providers = data._providers = new Array(def.providers.length);\n    for (var /** @type {?} */ i = 0; i < def.providers.length; i++) {\n        var /** @type {?} */ provDef = def.providers[i];\n        if (!(provDef.flags & 4096 /* LazyProvider */)) {\n            providers[i] = _createProviderInstance(data, provDef);\n        }\n    }\n}\n/**\n * @param {?} data\n * @param {?} depDef\n * @param {?=} notFoundValue\n * @return {?}\n */\nexport function resolveNgModuleDep(data, depDef, notFoundValue) {\n    if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n    if (depDef.flags & 8 /* Value */) {\n        return depDef.token;\n    }\n    if (depDef.flags & 2 /* Optional */) {\n        notFoundValue = null;\n    }\n    if (depDef.flags & 1 /* SkipSelf */) {\n        return data._parent.get(depDef.token, notFoundValue);\n    }\n    var /** @type {?} */ tokenKey = depDef.tokenKey;\n    switch (tokenKey) {\n        case InjectorRefTokenKey:\n        case NgModuleRefTokenKey:\n            return data;\n    }\n    var /** @type {?} */ providerDef = data._def.providersByKey[tokenKey];\n    if (providerDef) {\n        var /** @type {?} */ providerInstance = data._providers[providerDef.index];\n        if (providerInstance === undefined) {\n            providerInstance = data._providers[providerDef.index] =\n                _createProviderInstance(data, providerDef);\n        }\n        return providerInstance === UNDEFINED_VALUE ? undefined : providerInstance;\n    }\n    else if (depDef.token.ngInjectableDef && targetsModule(data, depDef.token.ngInjectableDef)) {\n        var /** @type {?} */ injectableDef_1 = /** @type {?} */ (depDef.token.ngInjectableDef);\n        var /** @type {?} */ key = tokenKey;\n        var /** @type {?} */ index = data._providers.length;\n        data._def.providersByKey[depDef.tokenKey] = {\n            flags: 1024 /* TypeFactoryProvider */ | 4096 /* LazyProvider */,\n            value: injectableDef_1.factory,\n            deps: [], index: index,\n            token: depDef.token,\n        };\n        var /** @type {?} */ former = setCurrentInjector(data);\n        try {\n            data._providers[index] = UNDEFINED_VALUE;\n            return (data._providers[index] =\n                _createProviderInstance(data, data._def.providersByKey[depDef.tokenKey]));\n        }\n        finally {\n            setCurrentInjector(former);\n        }\n    }\n    return data._parent.get(depDef.token, notFoundValue);\n}\n/**\n * @param {?} ngModule\n * @param {?} scope\n * @return {?}\n */\nfunction moduleTransitivelyPresent(ngModule, scope) {\n    return ngModule._def.modules.indexOf(scope) > -1;\n}\n/**\n * @param {?} ngModule\n * @param {?} def\n * @return {?}\n */\nfunction targetsModule(ngModule, def) {\n    return def.scope != null && (moduleTransitivelyPresent(ngModule, def.scope) ||\n        def.scope === APP_ROOT_SCOPE && ngModule._def.isRoot);\n}\n/**\n * @param {?} ngModule\n * @param {?} providerDef\n * @return {?}\n */\nfunction _createProviderInstance(ngModule, providerDef) {\n    var /** @type {?} */ injectable;\n    switch (providerDef.flags & 201347067 /* Types */) {\n        case 512 /* TypeClassProvider */:\n            injectable = _createClass(ngModule, providerDef.value, providerDef.deps);\n            break;\n        case 1024 /* TypeFactoryProvider */:\n            injectable = _callFactory(ngModule, providerDef.value, providerDef.deps);\n            break;\n        case 2048 /* TypeUseExistingProvider */:\n            injectable = resolveNgModuleDep(ngModule, providerDef.deps[0]);\n            break;\n        case 256 /* TypeValueProvider */:\n            injectable = providerDef.value;\n            break;\n    }\n    return injectable === undefined ? UNDEFINED_VALUE : injectable;\n}\n/**\n * @param {?} ngModule\n * @param {?} ctor\n * @param {?} deps\n * @return {?}\n */\nfunction _createClass(ngModule, ctor, deps) {\n    var /** @type {?} */ len = deps.length;\n    switch (len) {\n        case 0:\n            return new ctor();\n        case 1:\n            return new ctor(resolveNgModuleDep(ngModule, deps[0]));\n        case 2:\n            return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));\n        case 3:\n            return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));\n        default:\n            var /** @type {?} */ depValues = new Array(len);\n            for (var /** @type {?} */ i = 0; i < len; i++) {\n                depValues[i] = resolveNgModuleDep(ngModule, deps[i]);\n            }\n            return new (ctor.bind.apply(ctor, [void 0].concat(depValues)))();\n    }\n}\n/**\n * @param {?} ngModule\n * @param {?} factory\n * @param {?} deps\n * @return {?}\n */\nfunction _callFactory(ngModule, factory, deps) {\n    var /** @type {?} */ len = deps.length;\n    switch (len) {\n        case 0:\n            return factory();\n        case 1:\n            return factory(resolveNgModuleDep(ngModule, deps[0]));\n        case 2:\n            return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));\n        case 3:\n            return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));\n        default:\n            var /** @type {?} */ depValues = Array(len);\n            for (var /** @type {?} */ i = 0; i < len; i++) {\n                depValues[i] = resolveNgModuleDep(ngModule, deps[i]);\n            }\n            return factory.apply(void 0, depValues);\n    }\n}\n/**\n * @param {?} ngModule\n * @param {?} lifecycles\n * @return {?}\n */\nexport function callNgModuleLifecycle(ngModule, lifecycles) {\n    var /** @type {?} */ def = ngModule._def;\n    for (var /** @type {?} */ i = 0; i < def.providers.length; i++) {\n        var /** @type {?} */ provDef = def.providers[i];\n        if (provDef.flags & 131072 /* OnDestroy */) {\n            var /** @type {?} */ instance = ngModule._providers[i];\n            if (instance && instance !== UNDEFINED_VALUE) {\n                instance.ngOnDestroy();\n            }\n        }\n    }\n}\n//# sourceMappingURL=ng_module.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Services } from './types';\nimport { declaredViewContainer, renderNode, visitRootRenderNodes } from './util';\n/**\n * @param {?} parentView\n * @param {?} elementData\n * @param {?} viewIndex\n * @param {?} view\n * @return {?}\n */\nexport function attachEmbeddedView(parentView, elementData, viewIndex, view) {\n    var /** @type {?} */ embeddedViews = /** @type {?} */ ((elementData.viewContainer))._embeddedViews;\n    if (viewIndex === null || viewIndex === undefined) {\n        viewIndex = embeddedViews.length;\n    }\n    view.viewContainerParent = parentView;\n    addToArray(embeddedViews, /** @type {?} */ ((viewIndex)), view);\n    attachProjectedView(elementData, view);\n    Services.dirtyParentQueries(view);\n    var /** @type {?} */ prevView = /** @type {?} */ ((viewIndex)) > 0 ? embeddedViews[/** @type {?} */ ((viewIndex)) - 1] : null;\n    renderAttachEmbeddedView(elementData, prevView, view);\n}\n/**\n * @param {?} vcElementData\n * @param {?} view\n * @return {?}\n */\nfunction attachProjectedView(vcElementData, view) {\n    var /** @type {?} */ dvcElementData = declaredViewContainer(view);\n    if (!dvcElementData || dvcElementData === vcElementData ||\n        view.state & 16 /* IsProjectedView */) {\n        return;\n    }\n    // Note: For performance reasons, we\n    // - add a view to template._projectedViews only 1x throughout its lifetime,\n    //   and remove it not until the view is destroyed.\n    //   (hard, as when a parent view is attached/detached we would need to attach/detach all\n    //    nested projected views as well, even accross component boundaries).\n    // - don't track the insertion order of views in the projected views array\n    //   (hard, as when the views of the same template are inserted different view containers)\n    view.state |= 16 /* IsProjectedView */;\n    var /** @type {?} */ projectedViews = dvcElementData.template._projectedViews;\n    if (!projectedViews) {\n        projectedViews = dvcElementData.template._projectedViews = [];\n    }\n    projectedViews.push(view);\n    // Note: we are changing the NodeDef here as we cannot calculate\n    // the fact whether a template is used for projection during compilation.\n    markNodeAsProjectedTemplate(/** @type {?} */ ((view.parent)).def, /** @type {?} */ ((view.parentNodeDef)));\n}\n/**\n * @param {?} viewDef\n * @param {?} nodeDef\n * @return {?}\n */\nfunction markNodeAsProjectedTemplate(viewDef, nodeDef) {\n    if (nodeDef.flags & 4 /* ProjectedTemplate */) {\n        return;\n    }\n    viewDef.nodeFlags |= 4 /* ProjectedTemplate */;\n    nodeDef.flags |= 4 /* ProjectedTemplate */;\n    var /** @type {?} */ parentNodeDef = nodeDef.parent;\n    while (parentNodeDef) {\n        parentNodeDef.childFlags |= 4 /* ProjectedTemplate */;\n        parentNodeDef = parentNodeDef.parent;\n    }\n}\n/**\n * @param {?} elementData\n * @param {?=} viewIndex\n * @return {?}\n */\nexport function detachEmbeddedView(elementData, viewIndex) {\n    var /** @type {?} */ embeddedViews = /** @type {?} */ ((elementData.viewContainer))._embeddedViews;\n    if (viewIndex == null || viewIndex >= embeddedViews.length) {\n        viewIndex = embeddedViews.length - 1;\n    }\n    if (viewIndex < 0) {\n        return null;\n    }\n    var /** @type {?} */ view = embeddedViews[viewIndex];\n    view.viewContainerParent = null;\n    removeFromArray(embeddedViews, viewIndex);\n    // See attachProjectedView for why we don't update projectedViews here.\n    Services.dirtyParentQueries(view);\n    renderDetachView(view);\n    return view;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function detachProjectedView(view) {\n    if (!(view.state & 16 /* IsProjectedView */)) {\n        return;\n    }\n    var /** @type {?} */ dvcElementData = declaredViewContainer(view);\n    if (dvcElementData) {\n        var /** @type {?} */ projectedViews = dvcElementData.template._projectedViews;\n        if (projectedViews) {\n            removeFromArray(projectedViews, projectedViews.indexOf(view));\n            Services.dirtyParentQueries(view);\n        }\n    }\n}\n/**\n * @param {?} elementData\n * @param {?} oldViewIndex\n * @param {?} newViewIndex\n * @return {?}\n */\nexport function moveEmbeddedView(elementData, oldViewIndex, newViewIndex) {\n    var /** @type {?} */ embeddedViews = /** @type {?} */ ((elementData.viewContainer))._embeddedViews;\n    var /** @type {?} */ view = embeddedViews[oldViewIndex];\n    removeFromArray(embeddedViews, oldViewIndex);\n    if (newViewIndex == null) {\n        newViewIndex = embeddedViews.length;\n    }\n    addToArray(embeddedViews, newViewIndex, view);\n    // Note: Don't need to change projectedViews as the order in there\n    // as always invalid...\n    Services.dirtyParentQueries(view);\n    renderDetachView(view);\n    var /** @type {?} */ prevView = newViewIndex > 0 ? embeddedViews[newViewIndex - 1] : null;\n    renderAttachEmbeddedView(elementData, prevView, view);\n    return view;\n}\n/**\n * @param {?} elementData\n * @param {?} prevView\n * @param {?} view\n * @return {?}\n */\nfunction renderAttachEmbeddedView(elementData, prevView, view) {\n    var /** @type {?} */ prevRenderNode = prevView ? renderNode(prevView, /** @type {?} */ ((prevView.def.lastRenderRootNode))) :\n        elementData.renderElement;\n    var /** @type {?} */ parentNode = view.renderer.parentNode(prevRenderNode);\n    var /** @type {?} */ nextSibling = view.renderer.nextSibling(prevRenderNode);\n    // Note: We can't check if `nextSibling` is present, as on WebWorkers it will always be!\n    // However, browsers automatically do `appendChild` when there is no `nextSibling`.\n    visitRootRenderNodes(view, 2 /* InsertBefore */, parentNode, nextSibling, undefined);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function renderDetachView(view) {\n    visitRootRenderNodes(view, 3 /* RemoveChild */, null, null, undefined);\n}\n/**\n * @param {?} arr\n * @param {?} index\n * @param {?} value\n * @return {?}\n */\nfunction addToArray(arr, index, value) {\n    // perf: array.push is faster than array.splice!\n    if (index >= arr.length) {\n        arr.push(value);\n    }\n    else {\n        arr.splice(index, 0, value);\n    }\n}\n/**\n * @param {?} arr\n * @param {?} index\n * @return {?}\n */\nfunction removeFromArray(arr, index) {\n    // perf: array.pop is faster than array.splice!\n    if (index >= arr.length - 1) {\n        arr.pop();\n    }\n    else {\n        arr.splice(index, 1);\n    }\n}\n//# sourceMappingURL=view_attach.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { Injector } from '../di/injector';\nimport { ComponentFactory, ComponentRef } from '../linker/component_factory';\nimport { ComponentFactoryBoundToModule, ComponentFactoryResolver } from '../linker/component_factory_resolver';\nimport { ElementRef } from '../linker/element_ref';\nimport { NgModuleRef } from '../linker/ng_module_factory';\nimport { TemplateRef } from '../linker/template_ref';\nimport { stringify } from '../util';\nimport { VERSION } from '../version';\nimport { callNgModuleLifecycle, initNgModule, resolveNgModuleDep } from './ng_module';\nimport { Services, asElementData, asProviderData, asTextData } from './types';\nimport { markParentViewsForCheck, resolveDefinition, rootRenderNodes, splitNamespace, tokenKey, viewParentEl } from './util';\nimport { attachEmbeddedView, detachEmbeddedView, moveEmbeddedView, renderDetachView } from './view_attach';\nvar /** @type {?} */ EMPTY_CONTEXT = new Object();\n/**\n * @param {?} selector\n * @param {?} componentType\n * @param {?} viewDefFactory\n * @param {?} inputs\n * @param {?} outputs\n * @param {?} ngContentSelectors\n * @return {?}\n */\nexport function createComponentFactory(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors) {\n    return new ComponentFactory_(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors);\n}\n/**\n * @param {?} componentFactory\n * @return {?}\n */\nexport function getComponentViewDefinitionFactory(componentFactory) {\n    return (/** @type {?} */ (componentFactory)).viewDefFactory;\n}\nvar ComponentFactory_ = /** @class */ (function (_super) {\n    tslib_1.__extends(ComponentFactory_, _super);\n    function ComponentFactory_(selector, componentType, viewDefFactory, _inputs, _outputs, ngContentSelectors) {\n        var _this = \n        // Attention: this ctor is called as top level function.\n        // Putting any logic in here will destroy closure tree shaking!\n        _super.call(this) || this;\n        _this.selector = selector;\n        _this.componentType = componentType;\n        _this._inputs = _inputs;\n        _this._outputs = _outputs;\n        _this.ngContentSelectors = ngContentSelectors;\n        _this.viewDefFactory = viewDefFactory;\n        return _this;\n    }\n    Object.defineProperty(ComponentFactory_.prototype, \"inputs\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            var /** @type {?} */ inputsArr = [];\n            var /** @type {?} */ inputs = /** @type {?} */ ((this._inputs));\n            for (var /** @type {?} */ propName in inputs) {\n                var /** @type {?} */ templateName = inputs[propName];\n                inputsArr.push({ propName: propName, templateName: templateName });\n            }\n            return inputsArr;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComponentFactory_.prototype, \"outputs\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            var /** @type {?} */ outputsArr = [];\n            for (var /** @type {?} */ propName in this._outputs) {\n                var /** @type {?} */ templateName = this._outputs[propName];\n                outputsArr.push({ propName: propName, templateName: templateName });\n            }\n            return outputsArr;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Creates a new component.\n     */\n    /**\n     * Creates a new component.\n     * @param {?} injector\n     * @param {?=} projectableNodes\n     * @param {?=} rootSelectorOrNode\n     * @param {?=} ngModule\n     * @return {?}\n     */\n    ComponentFactory_.prototype.create = /**\n     * Creates a new component.\n     * @param {?} injector\n     * @param {?=} projectableNodes\n     * @param {?=} rootSelectorOrNode\n     * @param {?=} ngModule\n     * @return {?}\n     */\n    function (injector, projectableNodes, rootSelectorOrNode, ngModule) {\n        if (!ngModule) {\n            throw new Error('ngModule should be provided');\n        }\n        var /** @type {?} */ viewDef = resolveDefinition(this.viewDefFactory);\n        var /** @type {?} */ componentNodeIndex = /** @type {?} */ ((/** @type {?} */ ((viewDef.nodes[0].element)).componentProvider)).nodeIndex;\n        var /** @type {?} */ view = Services.createRootView(injector, projectableNodes || [], rootSelectorOrNode, viewDef, ngModule, EMPTY_CONTEXT);\n        var /** @type {?} */ component = asProviderData(view, componentNodeIndex).instance;\n        if (rootSelectorOrNode) {\n            view.renderer.setAttribute(asElementData(view, 0).renderElement, 'ng-version', VERSION.full);\n        }\n        return new ComponentRef_(view, new ViewRef_(view), component);\n    };\n    return ComponentFactory_;\n}(ComponentFactory));\nfunction ComponentFactory__tsickle_Closure_declarations() {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ComponentFactory_.prototype.viewDefFactory;\n    /** @type {?} */\n    ComponentFactory_.prototype.selector;\n    /** @type {?} */\n    ComponentFactory_.prototype.componentType;\n    /** @type {?} */\n    ComponentFactory_.prototype._inputs;\n    /** @type {?} */\n    ComponentFactory_.prototype._outputs;\n    /** @type {?} */\n    ComponentFactory_.prototype.ngContentSelectors;\n}\nvar ComponentRef_ = /** @class */ (function (_super) {\n    tslib_1.__extends(ComponentRef_, _super);\n    function ComponentRef_(_view, _viewRef, _component) {\n        var _this = _super.call(this) || this;\n        _this._view = _view;\n        _this._viewRef = _viewRef;\n        _this._component = _component;\n        _this._elDef = _this._view.def.nodes[0];\n        _this.hostView = _viewRef;\n        _this.changeDetectorRef = _viewRef;\n        _this.instance = _component;\n        return _this;\n    }\n    Object.defineProperty(ComponentRef_.prototype, \"location\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return new ElementRef(asElementData(this._view, this._elDef.nodeIndex).renderElement);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComponentRef_.prototype, \"injector\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return new Injector_(this._view, this._elDef); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComponentRef_.prototype, \"componentType\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return /** @type {?} */ (this._component.constructor); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    ComponentRef_.prototype.destroy = /**\n     * @return {?}\n     */\n    function () { this._viewRef.destroy(); };\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    ComponentRef_.prototype.onDestroy = /**\n     * @param {?} callback\n     * @return {?}\n     */\n    function (callback) { this._viewRef.onDestroy(callback); };\n    return ComponentRef_;\n}(ComponentRef));\nfunction ComponentRef__tsickle_Closure_declarations() {\n    /** @type {?} */\n    ComponentRef_.prototype.hostView;\n    /** @type {?} */\n    ComponentRef_.prototype.instance;\n    /** @type {?} */\n    ComponentRef_.prototype.changeDetectorRef;\n    /** @type {?} */\n    ComponentRef_.prototype._elDef;\n    /** @type {?} */\n    ComponentRef_.prototype._view;\n    /** @type {?} */\n    ComponentRef_.prototype._viewRef;\n    /** @type {?} */\n    ComponentRef_.prototype._component;\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} elData\n * @return {?}\n */\nexport function createViewContainerData(view, elDef, elData) {\n    return new ViewContainerRef_(view, elDef, elData);\n}\nvar ViewContainerRef_ = /** @class */ (function () {\n    function ViewContainerRef_(_view, _elDef, _data) {\n        this._view = _view;\n        this._elDef = _elDef;\n        this._data = _data;\n        /**\n         * \\@internal\n         */\n        this._embeddedViews = [];\n    }\n    Object.defineProperty(ViewContainerRef_.prototype, \"element\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return new ElementRef(this._data.renderElement); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewContainerRef_.prototype, \"injector\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return new Injector_(this._view, this._elDef); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewContainerRef_.prototype, \"parentInjector\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            var /** @type {?} */ view = this._view;\n            var /** @type {?} */ elDef = this._elDef.parent;\n            while (!elDef && view) {\n                elDef = viewParentEl(view);\n                view = /** @type {?} */ ((view.parent));\n            }\n            return view ? new Injector_(view, elDef) : new Injector_(this._view, null);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    ViewContainerRef_.prototype.clear = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ len = this._embeddedViews.length;\n        for (var /** @type {?} */ i = len - 1; i >= 0; i--) {\n            var /** @type {?} */ view = /** @type {?} */ ((detachEmbeddedView(this._data, i)));\n            Services.destroyView(view);\n        }\n    };\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    ViewContainerRef_.prototype.get = /**\n     * @param {?} index\n     * @return {?}\n     */\n    function (index) {\n        var /** @type {?} */ view = this._embeddedViews[index];\n        if (view) {\n            var /** @type {?} */ ref = new ViewRef_(view);\n            ref.attachToViewContainerRef(this);\n            return ref;\n        }\n        return null;\n    };\n    Object.defineProperty(ViewContainerRef_.prototype, \"length\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._embeddedViews.length; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @template C\n     * @param {?} templateRef\n     * @param {?=} context\n     * @param {?=} index\n     * @return {?}\n     */\n    ViewContainerRef_.prototype.createEmbeddedView = /**\n     * @template C\n     * @param {?} templateRef\n     * @param {?=} context\n     * @param {?=} index\n     * @return {?}\n     */\n    function (templateRef, context, index) {\n        var /** @type {?} */ viewRef = templateRef.createEmbeddedView(context || /** @type {?} */ ({}));\n        this.insert(viewRef, index);\n        return viewRef;\n    };\n    /**\n     * @template C\n     * @param {?} componentFactory\n     * @param {?=} index\n     * @param {?=} injector\n     * @param {?=} projectableNodes\n     * @param {?=} ngModuleRef\n     * @return {?}\n     */\n    ViewContainerRef_.prototype.createComponent = /**\n     * @template C\n     * @param {?} componentFactory\n     * @param {?=} index\n     * @param {?=} injector\n     * @param {?=} projectableNodes\n     * @param {?=} ngModuleRef\n     * @return {?}\n     */\n    function (componentFactory, index, injector, projectableNodes, ngModuleRef) {\n        var /** @type {?} */ contextInjector = injector || this.parentInjector;\n        if (!ngModuleRef && !(componentFactory instanceof ComponentFactoryBoundToModule)) {\n            ngModuleRef = contextInjector.get(NgModuleRef);\n        }\n        var /** @type {?} */ componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);\n        this.insert(componentRef.hostView, index);\n        return componentRef;\n    };\n    /**\n     * @param {?} viewRef\n     * @param {?=} index\n     * @return {?}\n     */\n    ViewContainerRef_.prototype.insert = /**\n     * @param {?} viewRef\n     * @param {?=} index\n     * @return {?}\n     */\n    function (viewRef, index) {\n        if (viewRef.destroyed) {\n            throw new Error('Cannot insert a destroyed View in a ViewContainer!');\n        }\n        var /** @type {?} */ viewRef_ = /** @type {?} */ (viewRef);\n        var /** @type {?} */ viewData = viewRef_._view;\n        attachEmbeddedView(this._view, this._data, index, viewData);\n        viewRef_.attachToViewContainerRef(this);\n        return viewRef;\n    };\n    /**\n     * @param {?} viewRef\n     * @param {?} currentIndex\n     * @return {?}\n     */\n    ViewContainerRef_.prototype.move = /**\n     * @param {?} viewRef\n     * @param {?} currentIndex\n     * @return {?}\n     */\n    function (viewRef, currentIndex) {\n        if (viewRef.destroyed) {\n            throw new Error('Cannot move a destroyed View in a ViewContainer!');\n        }\n        var /** @type {?} */ previousIndex = this._embeddedViews.indexOf(viewRef._view);\n        moveEmbeddedView(this._data, previousIndex, currentIndex);\n        return viewRef;\n    };\n    /**\n     * @param {?} viewRef\n     * @return {?}\n     */\n    ViewContainerRef_.prototype.indexOf = /**\n     * @param {?} viewRef\n     * @return {?}\n     */\n    function (viewRef) {\n        return this._embeddedViews.indexOf((/** @type {?} */ (viewRef))._view);\n    };\n    /**\n     * @param {?=} index\n     * @return {?}\n     */\n    ViewContainerRef_.prototype.remove = /**\n     * @param {?=} index\n     * @return {?}\n     */\n    function (index) {\n        var /** @type {?} */ viewData = detachEmbeddedView(this._data, index);\n        if (viewData) {\n            Services.destroyView(viewData);\n        }\n    };\n    /**\n     * @param {?=} index\n     * @return {?}\n     */\n    ViewContainerRef_.prototype.detach = /**\n     * @param {?=} index\n     * @return {?}\n     */\n    function (index) {\n        var /** @type {?} */ view = detachEmbeddedView(this._data, index);\n        return view ? new ViewRef_(view) : null;\n    };\n    return ViewContainerRef_;\n}());\nfunction ViewContainerRef__tsickle_Closure_declarations() {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ViewContainerRef_.prototype._embeddedViews;\n    /** @type {?} */\n    ViewContainerRef_.prototype._view;\n    /** @type {?} */\n    ViewContainerRef_.prototype._elDef;\n    /** @type {?} */\n    ViewContainerRef_.prototype._data;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function createChangeDetectorRef(view) {\n    return new ViewRef_(view);\n}\nvar ViewRef_ = /** @class */ (function () {\n    function ViewRef_(_view) {\n        this._view = _view;\n        this._viewContainerRef = null;\n        this._appRef = null;\n    }\n    Object.defineProperty(ViewRef_.prototype, \"rootNodes\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return rootRenderNodes(this._view); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewRef_.prototype, \"context\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._view.context; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewRef_.prototype, \"destroyed\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return (this._view.state & 128 /* Destroyed */) !== 0; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    ViewRef_.prototype.markForCheck = /**\n     * @return {?}\n     */\n    function () { markParentViewsForCheck(this._view); };\n    /**\n     * @return {?}\n     */\n    ViewRef_.prototype.detach = /**\n     * @return {?}\n     */\n    function () { this._view.state &= ~4 /* Attached */; };\n    /**\n     * @return {?}\n     */\n    ViewRef_.prototype.detectChanges = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ fs = this._view.root.rendererFactory;\n        if (fs.begin) {\n            fs.begin();\n        }\n        try {\n            Services.checkAndUpdateView(this._view);\n        }\n        finally {\n            if (fs.end) {\n                fs.end();\n            }\n        }\n    };\n    /**\n     * @return {?}\n     */\n    ViewRef_.prototype.checkNoChanges = /**\n     * @return {?}\n     */\n    function () { Services.checkNoChangesView(this._view); };\n    /**\n     * @return {?}\n     */\n    ViewRef_.prototype.reattach = /**\n     * @return {?}\n     */\n    function () { this._view.state |= 4 /* Attached */; };\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    ViewRef_.prototype.onDestroy = /**\n     * @param {?} callback\n     * @return {?}\n     */\n    function (callback) {\n        if (!this._view.disposables) {\n            this._view.disposables = [];\n        }\n        this._view.disposables.push(/** @type {?} */ (callback));\n    };\n    /**\n     * @return {?}\n     */\n    ViewRef_.prototype.destroy = /**\n     * @return {?}\n     */\n    function () {\n        if (this._appRef) {\n            this._appRef.detachView(this);\n        }\n        else if (this._viewContainerRef) {\n            this._viewContainerRef.detach(this._viewContainerRef.indexOf(this));\n        }\n        Services.destroyView(this._view);\n    };\n    /**\n     * @return {?}\n     */\n    ViewRef_.prototype.detachFromAppRef = /**\n     * @return {?}\n     */\n    function () {\n        this._appRef = null;\n        renderDetachView(this._view);\n        Services.dirtyParentQueries(this._view);\n    };\n    /**\n     * @param {?} appRef\n     * @return {?}\n     */\n    ViewRef_.prototype.attachToAppRef = /**\n     * @param {?} appRef\n     * @return {?}\n     */\n    function (appRef) {\n        if (this._viewContainerRef) {\n            throw new Error('This view is already attached to a ViewContainer!');\n        }\n        this._appRef = appRef;\n    };\n    /**\n     * @param {?} vcRef\n     * @return {?}\n     */\n    ViewRef_.prototype.attachToViewContainerRef = /**\n     * @param {?} vcRef\n     * @return {?}\n     */\n    function (vcRef) {\n        if (this._appRef) {\n            throw new Error('This view is already attached directly to the ApplicationRef!');\n        }\n        this._viewContainerRef = vcRef;\n    };\n    return ViewRef_;\n}());\nexport { ViewRef_ };\nfunction ViewRef__tsickle_Closure_declarations() {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ViewRef_.prototype._view;\n    /** @type {?} */\n    ViewRef_.prototype._viewContainerRef;\n    /** @type {?} */\n    ViewRef_.prototype._appRef;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nexport function createTemplateData(view, def) {\n    return new TemplateRef_(view, def);\n}\nvar TemplateRef_ = /** @class */ (function (_super) {\n    tslib_1.__extends(TemplateRef_, _super);\n    function TemplateRef_(_parentView, _def) {\n        var _this = _super.call(this) || this;\n        _this._parentView = _parentView;\n        _this._def = _def;\n        return _this;\n    }\n    /**\n     * @param {?} context\n     * @return {?}\n     */\n    TemplateRef_.prototype.createEmbeddedView = /**\n     * @param {?} context\n     * @return {?}\n     */\n    function (context) {\n        return new ViewRef_(Services.createEmbeddedView(this._parentView, this._def, /** @type {?} */ ((/** @type {?} */ ((this._def.element)).template)), context));\n    };\n    Object.defineProperty(TemplateRef_.prototype, \"elementRef\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return new ElementRef(asElementData(this._parentView, this._def.nodeIndex).renderElement);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return TemplateRef_;\n}(TemplateRef));\nfunction TemplateRef__tsickle_Closure_declarations() {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    TemplateRef_.prototype._projectedViews;\n    /** @type {?} */\n    TemplateRef_.prototype._parentView;\n    /** @type {?} */\n    TemplateRef_.prototype._def;\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @return {?}\n */\nexport function createInjector(view, elDef) {\n    return new Injector_(view, elDef);\n}\nvar Injector_ = /** @class */ (function () {\n    function Injector_(view, elDef) {\n        this.view = view;\n        this.elDef = elDef;\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    Injector_.prototype.get = /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    function (token, notFoundValue) {\n        if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n        var /** @type {?} */ allowPrivateServices = this.elDef ? (this.elDef.flags & 33554432 /* ComponentView */) !== 0 : false;\n        return Services.resolveDep(this.view, this.elDef, allowPrivateServices, { flags: 0 /* None */, token: token, tokenKey: tokenKey(token) }, notFoundValue);\n    };\n    return Injector_;\n}());\nfunction Injector__tsickle_Closure_declarations() {\n    /** @type {?} */\n    Injector_.prototype.view;\n    /** @type {?} */\n    Injector_.prototype.elDef;\n}\n/**\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nexport function nodeValue(view, index) {\n    var /** @type {?} */ def = view.def.nodes[index];\n    if (def.flags & 1 /* TypeElement */) {\n        var /** @type {?} */ elData = asElementData(view, def.nodeIndex);\n        return /** @type {?} */ ((def.element)).template ? elData.template : elData.renderElement;\n    }\n    else if (def.flags & 2 /* TypeText */) {\n        return asTextData(view, def.nodeIndex).renderText;\n    }\n    else if (def.flags & (20224 /* CatProvider */ | 16 /* TypePipe */)) {\n        return asProviderData(view, def.nodeIndex).instance;\n    }\n    throw new Error(\"Illegal state: read nodeValue for node index \" + index);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function createRendererV1(view) {\n    return new RendererAdapter(view.renderer);\n}\nvar RendererAdapter = /** @class */ (function () {\n    function RendererAdapter(delegate) {\n        this.delegate = delegate;\n    }\n    /**\n     * @param {?} selectorOrNode\n     * @return {?}\n     */\n    RendererAdapter.prototype.selectRootElement = /**\n     * @param {?} selectorOrNode\n     * @return {?}\n     */\n    function (selectorOrNode) {\n        return this.delegate.selectRootElement(selectorOrNode);\n    };\n    /**\n     * @param {?} parent\n     * @param {?} namespaceAndName\n     * @return {?}\n     */\n    RendererAdapter.prototype.createElement = /**\n     * @param {?} parent\n     * @param {?} namespaceAndName\n     * @return {?}\n     */\n    function (parent, namespaceAndName) {\n        var _a = splitNamespace(namespaceAndName), ns = _a[0], name = _a[1];\n        var /** @type {?} */ el = this.delegate.createElement(name, ns);\n        if (parent) {\n            this.delegate.appendChild(parent, el);\n        }\n        return el;\n    };\n    /**\n     * @param {?} hostElement\n     * @return {?}\n     */\n    RendererAdapter.prototype.createViewRoot = /**\n     * @param {?} hostElement\n     * @return {?}\n     */\n    function (hostElement) { return hostElement; };\n    /**\n     * @param {?} parentElement\n     * @return {?}\n     */\n    RendererAdapter.prototype.createTemplateAnchor = /**\n     * @param {?} parentElement\n     * @return {?}\n     */\n    function (parentElement) {\n        var /** @type {?} */ comment = this.delegate.createComment('');\n        if (parentElement) {\n            this.delegate.appendChild(parentElement, comment);\n        }\n        return comment;\n    };\n    /**\n     * @param {?} parentElement\n     * @param {?} value\n     * @return {?}\n     */\n    RendererAdapter.prototype.createText = /**\n     * @param {?} parentElement\n     * @param {?} value\n     * @return {?}\n     */\n    function (parentElement, value) {\n        var /** @type {?} */ node = this.delegate.createText(value);\n        if (parentElement) {\n            this.delegate.appendChild(parentElement, node);\n        }\n        return node;\n    };\n    /**\n     * @param {?} parentElement\n     * @param {?} nodes\n     * @return {?}\n     */\n    RendererAdapter.prototype.projectNodes = /**\n     * @param {?} parentElement\n     * @param {?} nodes\n     * @return {?}\n     */\n    function (parentElement, nodes) {\n        for (var /** @type {?} */ i = 0; i < nodes.length; i++) {\n            this.delegate.appendChild(parentElement, nodes[i]);\n        }\n    };\n    /**\n     * @param {?} node\n     * @param {?} viewRootNodes\n     * @return {?}\n     */\n    RendererAdapter.prototype.attachViewAfter = /**\n     * @param {?} node\n     * @param {?} viewRootNodes\n     * @return {?}\n     */\n    function (node, viewRootNodes) {\n        var /** @type {?} */ parentElement = this.delegate.parentNode(node);\n        var /** @type {?} */ nextSibling = this.delegate.nextSibling(node);\n        for (var /** @type {?} */ i = 0; i < viewRootNodes.length; i++) {\n            this.delegate.insertBefore(parentElement, viewRootNodes[i], nextSibling);\n        }\n    };\n    /**\n     * @param {?} viewRootNodes\n     * @return {?}\n     */\n    RendererAdapter.prototype.detachView = /**\n     * @param {?} viewRootNodes\n     * @return {?}\n     */\n    function (viewRootNodes) {\n        for (var /** @type {?} */ i = 0; i < viewRootNodes.length; i++) {\n            var /** @type {?} */ node = viewRootNodes[i];\n            var /** @type {?} */ parentElement = this.delegate.parentNode(node);\n            this.delegate.removeChild(parentElement, node);\n        }\n    };\n    /**\n     * @param {?} hostElement\n     * @param {?} viewAllNodes\n     * @return {?}\n     */\n    RendererAdapter.prototype.destroyView = /**\n     * @param {?} hostElement\n     * @param {?} viewAllNodes\n     * @return {?}\n     */\n    function (hostElement, viewAllNodes) {\n        for (var /** @type {?} */ i = 0; i < viewAllNodes.length; i++) {\n            /** @type {?} */ ((this.delegate.destroyNode))(viewAllNodes[i]);\n        }\n    };\n    /**\n     * @param {?} renderElement\n     * @param {?} name\n     * @param {?} callback\n     * @return {?}\n     */\n    RendererAdapter.prototype.listen = /**\n     * @param {?} renderElement\n     * @param {?} name\n     * @param {?} callback\n     * @return {?}\n     */\n    function (renderElement, name, callback) {\n        return this.delegate.listen(renderElement, name, /** @type {?} */ (callback));\n    };\n    /**\n     * @param {?} target\n     * @param {?} name\n     * @param {?} callback\n     * @return {?}\n     */\n    RendererAdapter.prototype.listenGlobal = /**\n     * @param {?} target\n     * @param {?} name\n     * @param {?} callback\n     * @return {?}\n     */\n    function (target, name, callback) {\n        return this.delegate.listen(target, name, /** @type {?} */ (callback));\n    };\n    /**\n     * @param {?} renderElement\n     * @param {?} propertyName\n     * @param {?} propertyValue\n     * @return {?}\n     */\n    RendererAdapter.prototype.setElementProperty = /**\n     * @param {?} renderElement\n     * @param {?} propertyName\n     * @param {?} propertyValue\n     * @return {?}\n     */\n    function (renderElement, propertyName, propertyValue) {\n        this.delegate.setProperty(renderElement, propertyName, propertyValue);\n    };\n    /**\n     * @param {?} renderElement\n     * @param {?} namespaceAndName\n     * @param {?} attributeValue\n     * @return {?}\n     */\n    RendererAdapter.prototype.setElementAttribute = /**\n     * @param {?} renderElement\n     * @param {?} namespaceAndName\n     * @param {?} attributeValue\n     * @return {?}\n     */\n    function (renderElement, namespaceAndName, attributeValue) {\n        var _a = splitNamespace(namespaceAndName), ns = _a[0], name = _a[1];\n        if (attributeValue != null) {\n            this.delegate.setAttribute(renderElement, name, attributeValue, ns);\n        }\n        else {\n            this.delegate.removeAttribute(renderElement, name, ns);\n        }\n    };\n    /**\n     * @param {?} renderElement\n     * @param {?} propertyName\n     * @param {?} propertyValue\n     * @return {?}\n     */\n    RendererAdapter.prototype.setBindingDebugInfo = /**\n     * @param {?} renderElement\n     * @param {?} propertyName\n     * @param {?} propertyValue\n     * @return {?}\n     */\n    function (renderElement, propertyName, propertyValue) { };\n    /**\n     * @param {?} renderElement\n     * @param {?} className\n     * @param {?} isAdd\n     * @return {?}\n     */\n    RendererAdapter.prototype.setElementClass = /**\n     * @param {?} renderElement\n     * @param {?} className\n     * @param {?} isAdd\n     * @return {?}\n     */\n    function (renderElement, className, isAdd) {\n        if (isAdd) {\n            this.delegate.addClass(renderElement, className);\n        }\n        else {\n            this.delegate.removeClass(renderElement, className);\n        }\n    };\n    /**\n     * @param {?} renderElement\n     * @param {?} styleName\n     * @param {?} styleValue\n     * @return {?}\n     */\n    RendererAdapter.prototype.setElementStyle = /**\n     * @param {?} renderElement\n     * @param {?} styleName\n     * @param {?} styleValue\n     * @return {?}\n     */\n    function (renderElement, styleName, styleValue) {\n        if (styleValue != null) {\n            this.delegate.setStyle(renderElement, styleName, styleValue);\n        }\n        else {\n            this.delegate.removeStyle(renderElement, styleName);\n        }\n    };\n    /**\n     * @param {?} renderElement\n     * @param {?} methodName\n     * @param {?} args\n     * @return {?}\n     */\n    RendererAdapter.prototype.invokeElementMethod = /**\n     * @param {?} renderElement\n     * @param {?} methodName\n     * @param {?} args\n     * @return {?}\n     */\n    function (renderElement, methodName, args) {\n        (/** @type {?} */ (renderElement))[methodName].apply(renderElement, args);\n    };\n    /**\n     * @param {?} renderNode\n     * @param {?} text\n     * @return {?}\n     */\n    RendererAdapter.prototype.setText = /**\n     * @param {?} renderNode\n     * @param {?} text\n     * @return {?}\n     */\n    function (renderNode, text) { this.delegate.setValue(renderNode, text); };\n    /**\n     * @return {?}\n     */\n    RendererAdapter.prototype.animate = /**\n     * @return {?}\n     */\n    function () { throw new Error('Renderer.animate is no longer supported!'); };\n    return RendererAdapter;\n}());\nfunction RendererAdapter_tsickle_Closure_declarations() {\n    /** @type {?} */\n    RendererAdapter.prototype.delegate;\n}\n/**\n * @param {?} moduleType\n * @param {?} parent\n * @param {?} bootstrapComponents\n * @param {?} def\n * @return {?}\n */\nexport function createNgModuleRef(moduleType, parent, bootstrapComponents, def) {\n    return new NgModuleRef_(moduleType, parent, bootstrapComponents, def);\n}\nvar NgModuleRef_ = /** @class */ (function () {\n    function NgModuleRef_(_moduleType, _parent, _bootstrapComponents, _def) {\n        this._moduleType = _moduleType;\n        this._parent = _parent;\n        this._bootstrapComponents = _bootstrapComponents;\n        this._def = _def;\n        this._destroyListeners = [];\n        this._destroyed = false;\n        this.injector = this;\n        initNgModule(this);\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} injectFlags\n     * @return {?}\n     */\n    NgModuleRef_.prototype.get = /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} injectFlags\n     * @return {?}\n     */\n    function (token, notFoundValue, injectFlags) {\n        if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n        if (injectFlags === void 0) { injectFlags = 0 /* Default */; }\n        var /** @type {?} */ flags = 0 /* None */;\n        if (injectFlags & 1 /* SkipSelf */) {\n            flags |= 1 /* SkipSelf */;\n        }\n        else if (injectFlags & 2 /* Self */) {\n            flags |= 4 /* Self */;\n        }\n        return resolveNgModuleDep(this, { token: token, tokenKey: tokenKey(token), flags: flags }, notFoundValue);\n    };\n    Object.defineProperty(NgModuleRef_.prototype, \"instance\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.get(this._moduleType); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgModuleRef_.prototype, \"componentFactoryResolver\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.get(ComponentFactoryResolver); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NgModuleRef_.prototype.destroy = /**\n     * @return {?}\n     */\n    function () {\n        if (this._destroyed) {\n            throw new Error(\"The ng module \" + stringify(this.instance.constructor) + \" has already been destroyed.\");\n        }\n        this._destroyed = true;\n        callNgModuleLifecycle(this, 131072 /* OnDestroy */);\n        this._destroyListeners.forEach(function (listener) { return listener(); });\n    };\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    NgModuleRef_.prototype.onDestroy = /**\n     * @param {?} callback\n     * @return {?}\n     */\n    function (callback) { this._destroyListeners.push(callback); };\n    return NgModuleRef_;\n}());\nfunction NgModuleRef__tsickle_Closure_declarations() {\n    /** @type {?} */\n    NgModuleRef_.prototype._destroyListeners;\n    /** @type {?} */\n    NgModuleRef_.prototype._destroyed;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    NgModuleRef_.prototype._providers;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    NgModuleRef_.prototype._modules;\n    /** @type {?} */\n    NgModuleRef_.prototype.injector;\n    /** @type {?} */\n    NgModuleRef_.prototype._moduleType;\n    /** @type {?} */\n    NgModuleRef_.prototype._parent;\n    /** @type {?} */\n    NgModuleRef_.prototype._bootstrapComponents;\n    /** @type {?} */\n    NgModuleRef_.prototype._def;\n}\n//# sourceMappingURL=refs.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectorRef, SimpleChange, WrappedValue } from '../change_detection/change_detection';\nimport { Injector, resolveForwardRef } from '../di';\nimport { ElementRef } from '../linker/element_ref';\nimport { TemplateRef } from '../linker/template_ref';\nimport { ViewContainerRef } from '../linker/view_container_ref';\nimport { Renderer as RendererV1, Renderer2 } from '../render/api';\nimport { stringify } from '../util';\nimport { createChangeDetectorRef, createInjector, createRendererV1 } from './refs';\nimport { Services, asElementData, asProviderData, shouldCallLifecycleInitHook } from './types';\nimport { calcBindingFlags, checkBinding, dispatchEvent, isComponentView, splitDepsDsl, splitMatchedQueriesDsl, tokenKey, viewParentEl } from './util';\nvar /** @type {?} */ RendererV1TokenKey = tokenKey(RendererV1);\nvar /** @type {?} */ Renderer2TokenKey = tokenKey(Renderer2);\nvar /** @type {?} */ ElementRefTokenKey = tokenKey(ElementRef);\nvar /** @type {?} */ ViewContainerRefTokenKey = tokenKey(ViewContainerRef);\nvar /** @type {?} */ TemplateRefTokenKey = tokenKey(TemplateRef);\nvar /** @type {?} */ ChangeDetectorRefTokenKey = tokenKey(ChangeDetectorRef);\nvar /** @type {?} */ InjectorRefTokenKey = tokenKey(Injector);\n/**\n * @param {?} checkIndex\n * @param {?} flags\n * @param {?} matchedQueries\n * @param {?} childCount\n * @param {?} ctor\n * @param {?} deps\n * @param {?=} props\n * @param {?=} outputs\n * @return {?}\n */\nexport function directiveDef(checkIndex, flags, matchedQueries, childCount, ctor, deps, props, outputs) {\n    var /** @type {?} */ bindings = [];\n    if (props) {\n        for (var /** @type {?} */ prop in props) {\n            var _a = props[prop], bindingIndex = _a[0], nonMinifiedName = _a[1];\n            bindings[bindingIndex] = {\n                flags: 8 /* TypeProperty */,\n                name: prop, nonMinifiedName: nonMinifiedName,\n                ns: null,\n                securityContext: null,\n                suffix: null\n            };\n        }\n    }\n    var /** @type {?} */ outputDefs = [];\n    if (outputs) {\n        for (var /** @type {?} */ propName in outputs) {\n            outputDefs.push({ type: 1 /* DirectiveOutput */, propName: propName, target: null, eventName: outputs[propName] });\n        }\n    }\n    flags |= 16384 /* TypeDirective */;\n    return _def(checkIndex, flags, matchedQueries, childCount, ctor, ctor, deps, bindings, outputDefs);\n}\n/**\n * @param {?} flags\n * @param {?} ctor\n * @param {?} deps\n * @return {?}\n */\nexport function pipeDef(flags, ctor, deps) {\n    flags |= 16 /* TypePipe */;\n    return _def(-1, flags, null, 0, ctor, ctor, deps);\n}\n/**\n * @param {?} flags\n * @param {?} matchedQueries\n * @param {?} token\n * @param {?} value\n * @param {?} deps\n * @return {?}\n */\nexport function providerDef(flags, matchedQueries, token, value, deps) {\n    return _def(-1, flags, matchedQueries, 0, token, value, deps);\n}\n/**\n * @param {?} checkIndex\n * @param {?} flags\n * @param {?} matchedQueriesDsl\n * @param {?} childCount\n * @param {?} token\n * @param {?} value\n * @param {?} deps\n * @param {?=} bindings\n * @param {?=} outputs\n * @return {?}\n */\nexport function _def(checkIndex, flags, matchedQueriesDsl, childCount, token, value, deps, bindings, outputs) {\n    var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;\n    if (!outputs) {\n        outputs = [];\n    }\n    if (!bindings) {\n        bindings = [];\n    }\n    // Need to resolve forwardRefs as e.g. for `useValue` we\n    // lowered the expression and then stopped evaluating it,\n    // i.e. also didn't unwrap it.\n    value = resolveForwardRef(value);\n    var /** @type {?} */ depDefs = splitDepsDsl(deps, stringify(token));\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex: checkIndex,\n        flags: flags,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references,\n        ngContentIndex: -1, childCount: childCount, bindings: bindings,\n        bindingFlags: calcBindingFlags(bindings), outputs: outputs,\n        element: null,\n        provider: { token: token, value: value, deps: depDefs },\n        text: null,\n        query: null,\n        ngContent: null\n    };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nexport function createProviderInstance(view, def) {\n    return _createProviderInstance(view, def);\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nexport function createPipeInstance(view, def) {\n    // deps are looked up from component.\n    var /** @type {?} */ compView = view;\n    while (compView.parent && !isComponentView(compView)) {\n        compView = compView.parent;\n    }\n    // pipes can see the private services of the component\n    var /** @type {?} */ allowPrivateServices = true;\n    // pipes are always eager and classes!\n    return createClass(/** @type {?} */ ((compView.parent)), /** @type {?} */ ((viewParentEl(compView))), allowPrivateServices, /** @type {?} */ ((def.provider)).value, /** @type {?} */ ((def.provider)).deps);\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nexport function createDirectiveInstance(view, def) {\n    // components can see other private services, other directives can't.\n    var /** @type {?} */ allowPrivateServices = (def.flags & 32768 /* Component */) > 0;\n    // directives are always eager and classes!\n    var /** @type {?} */ instance = createClass(view, /** @type {?} */ ((def.parent)), allowPrivateServices, /** @type {?} */ ((def.provider)).value, /** @type {?} */ ((def.provider)).deps);\n    if (def.outputs.length) {\n        for (var /** @type {?} */ i = 0; i < def.outputs.length; i++) {\n            var /** @type {?} */ output = def.outputs[i];\n            var /** @type {?} */ subscription = instance[/** @type {?} */ ((output.propName))].subscribe(eventHandlerClosure(view, /** @type {?} */ ((def.parent)).nodeIndex, output.eventName)); /** @type {?} */\n            ((view.disposables))[def.outputIndex + i] = subscription.unsubscribe.bind(subscription);\n        }\n    }\n    return instance;\n}\n/**\n * @param {?} view\n * @param {?} index\n * @param {?} eventName\n * @return {?}\n */\nfunction eventHandlerClosure(view, index, eventName) {\n    return function (event) { return dispatchEvent(view, index, eventName, event); };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nexport function checkAndUpdateDirectiveInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    var /** @type {?} */ providerData = asProviderData(view, def.nodeIndex);\n    var /** @type {?} */ directive = providerData.instance;\n    var /** @type {?} */ changed = false;\n    var /** @type {?} */ changes = /** @type {?} */ ((undefined));\n    var /** @type {?} */ bindLen = def.bindings.length;\n    if (bindLen > 0 && checkBinding(view, def, 0, v0)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 0, v0, changes);\n    }\n    if (bindLen > 1 && checkBinding(view, def, 1, v1)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 1, v1, changes);\n    }\n    if (bindLen > 2 && checkBinding(view, def, 2, v2)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 2, v2, changes);\n    }\n    if (bindLen > 3 && checkBinding(view, def, 3, v3)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 3, v3, changes);\n    }\n    if (bindLen > 4 && checkBinding(view, def, 4, v4)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 4, v4, changes);\n    }\n    if (bindLen > 5 && checkBinding(view, def, 5, v5)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 5, v5, changes);\n    }\n    if (bindLen > 6 && checkBinding(view, def, 6, v6)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 6, v6, changes);\n    }\n    if (bindLen > 7 && checkBinding(view, def, 7, v7)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 7, v7, changes);\n    }\n    if (bindLen > 8 && checkBinding(view, def, 8, v8)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 8, v8, changes);\n    }\n    if (bindLen > 9 && checkBinding(view, def, 9, v9)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 9, v9, changes);\n    }\n    if (changes) {\n        directive.ngOnChanges(changes);\n    }\n    if ((def.flags & 65536 /* OnInit */) &&\n        shouldCallLifecycleInitHook(view, 256 /* InitState_CallingOnInit */, def.nodeIndex)) {\n        directive.ngOnInit();\n    }\n    if (def.flags & 262144 /* DoCheck */) {\n        directive.ngDoCheck();\n    }\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} values\n * @return {?}\n */\nexport function checkAndUpdateDirectiveDynamic(view, def, values) {\n    var /** @type {?} */ providerData = asProviderData(view, def.nodeIndex);\n    var /** @type {?} */ directive = providerData.instance;\n    var /** @type {?} */ changed = false;\n    var /** @type {?} */ changes = /** @type {?} */ ((undefined));\n    for (var /** @type {?} */ i = 0; i < values.length; i++) {\n        if (checkBinding(view, def, i, values[i])) {\n            changed = true;\n            changes = updateProp(view, providerData, def, i, values[i], changes);\n        }\n    }\n    if (changes) {\n        directive.ngOnChanges(changes);\n    }\n    if ((def.flags & 65536 /* OnInit */) &&\n        shouldCallLifecycleInitHook(view, 256 /* InitState_CallingOnInit */, def.nodeIndex)) {\n        directive.ngOnInit();\n    }\n    if (def.flags & 262144 /* DoCheck */) {\n        directive.ngDoCheck();\n    }\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nfunction _createProviderInstance(view, def) {\n    // private services can see other private services\n    var /** @type {?} */ allowPrivateServices = (def.flags & 8192 /* PrivateProvider */) > 0;\n    var /** @type {?} */ providerDef = def.provider;\n    switch (def.flags & 201347067 /* Types */) {\n        case 512 /* TypeClassProvider */:\n            return createClass(view, /** @type {?} */ ((def.parent)), allowPrivateServices, /** @type {?} */ ((providerDef)).value, /** @type {?} */ ((providerDef)).deps);\n        case 1024 /* TypeFactoryProvider */:\n            return callFactory(view, /** @type {?} */ ((def.parent)), allowPrivateServices, /** @type {?} */ ((providerDef)).value, /** @type {?} */ ((providerDef)).deps);\n        case 2048 /* TypeUseExistingProvider */:\n            return resolveDep(view, /** @type {?} */ ((def.parent)), allowPrivateServices, /** @type {?} */ ((providerDef)).deps[0]);\n        case 256 /* TypeValueProvider */:\n            return /** @type {?} */ ((providerDef)).value;\n    }\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} allowPrivateServices\n * @param {?} ctor\n * @param {?} deps\n * @return {?}\n */\nfunction createClass(view, elDef, allowPrivateServices, ctor, deps) {\n    var /** @type {?} */ len = deps.length;\n    switch (len) {\n        case 0:\n            return new ctor();\n        case 1:\n            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]));\n        case 2:\n            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));\n        case 3:\n            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));\n        default:\n            var /** @type {?} */ depValues = new Array(len);\n            for (var /** @type {?} */ i = 0; i < len; i++) {\n                depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);\n            }\n            return new (ctor.bind.apply(ctor, [void 0].concat(depValues)))();\n    }\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} allowPrivateServices\n * @param {?} factory\n * @param {?} deps\n * @return {?}\n */\nfunction callFactory(view, elDef, allowPrivateServices, factory, deps) {\n    var /** @type {?} */ len = deps.length;\n    switch (len) {\n        case 0:\n            return factory();\n        case 1:\n            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]));\n        case 2:\n            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));\n        case 3:\n            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));\n        default:\n            var /** @type {?} */ depValues = Array(len);\n            for (var /** @type {?} */ i = 0; i < len; i++) {\n                depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);\n            }\n            return factory.apply(void 0, depValues);\n    }\n}\n// This default value is when checking the hierarchy for a token.\n//\n// It means both:\n// - the token is not provided by the current injector,\n// - only the element injectors should be checked (ie do not check module injectors\n//\n//          mod1\n//         /\n//       el1   mod2\n//         \\  /\n//         el2\n//\n// When requesting el2.injector.get(token), we should check in the following order and return the\n// first found value:\n// - el2.injector.get(token, default)\n// - el1.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) -> do not check the module\n// - mod2.injector.get(token, default)\nexport var /** @type {?} */ NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} allowPrivateServices\n * @param {?} depDef\n * @param {?=} notFoundValue\n * @return {?}\n */\nexport function resolveDep(view, elDef, allowPrivateServices, depDef, notFoundValue) {\n    if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n    if (depDef.flags & 8 /* Value */) {\n        return depDef.token;\n    }\n    var /** @type {?} */ startView = view;\n    if (depDef.flags & 2 /* Optional */) {\n        notFoundValue = null;\n    }\n    var /** @type {?} */ tokenKey = depDef.tokenKey;\n    if (tokenKey === ChangeDetectorRefTokenKey) {\n        // directives on the same element as a component should be able to control the change detector\n        // of that component as well.\n        allowPrivateServices = !!(elDef && /** @type {?} */ ((elDef.element)).componentView);\n    }\n    if (elDef && (depDef.flags & 1 /* SkipSelf */)) {\n        allowPrivateServices = false;\n        elDef = /** @type {?} */ ((elDef.parent));\n    }\n    var /** @type {?} */ searchView = view;\n    while (searchView) {\n        if (elDef) {\n            switch (tokenKey) {\n                case RendererV1TokenKey: {\n                    var /** @type {?} */ compView = findCompView(searchView, elDef, allowPrivateServices);\n                    return createRendererV1(compView);\n                }\n                case Renderer2TokenKey: {\n                    var /** @type {?} */ compView = findCompView(searchView, elDef, allowPrivateServices);\n                    return compView.renderer;\n                }\n                case ElementRefTokenKey:\n                    return new ElementRef(asElementData(searchView, elDef.nodeIndex).renderElement);\n                case ViewContainerRefTokenKey:\n                    return asElementData(searchView, elDef.nodeIndex).viewContainer;\n                case TemplateRefTokenKey: {\n                    if (/** @type {?} */ ((elDef.element)).template) {\n                        return asElementData(searchView, elDef.nodeIndex).template;\n                    }\n                    break;\n                }\n                case ChangeDetectorRefTokenKey: {\n                    var /** @type {?} */ cdView = findCompView(searchView, elDef, allowPrivateServices);\n                    return createChangeDetectorRef(cdView);\n                }\n                case InjectorRefTokenKey:\n                    return createInjector(searchView, elDef);\n                default:\n                    var /** @type {?} */ providerDef_1 = /** @type {?} */ (((allowPrivateServices ? /** @type {?} */ ((elDef.element)).allProviders : /** @type {?} */ ((elDef.element)).publicProviders)))[tokenKey];\n                    if (providerDef_1) {\n                        var /** @type {?} */ providerData = asProviderData(searchView, providerDef_1.nodeIndex);\n                        if (!providerData) {\n                            providerData = { instance: _createProviderInstance(searchView, providerDef_1) };\n                            searchView.nodes[providerDef_1.nodeIndex] = /** @type {?} */ (providerData);\n                        }\n                        return providerData.instance;\n                    }\n            }\n        }\n        allowPrivateServices = isComponentView(searchView);\n        elDef = /** @type {?} */ ((viewParentEl(searchView)));\n        searchView = /** @type {?} */ ((searchView.parent));\n        if (depDef.flags & 4 /* Self */) {\n            searchView = null;\n        }\n    }\n    var /** @type {?} */ value = startView.root.injector.get(depDef.token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR);\n    if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR ||\n        notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\n        // Return the value from the root element injector when\n        // - it provides it\n        //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n        // - the module injector should not be checked\n        //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n        return value;\n    }\n    return startView.root.ngModule.injector.get(depDef.token, notFoundValue);\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} allowPrivateServices\n * @return {?}\n */\nfunction findCompView(view, elDef, allowPrivateServices) {\n    var /** @type {?} */ compView;\n    if (allowPrivateServices) {\n        compView = asElementData(view, elDef.nodeIndex).componentView;\n    }\n    else {\n        compView = view;\n        while (compView.parent && !isComponentView(compView)) {\n            compView = compView.parent;\n        }\n    }\n    return compView;\n}\n/**\n * @param {?} view\n * @param {?} providerData\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @param {?} changes\n * @return {?}\n */\nfunction updateProp(view, providerData, def, bindingIdx, value, changes) {\n    if (def.flags & 32768 /* Component */) {\n        var /** @type {?} */ compView = asElementData(view, /** @type {?} */ ((def.parent)).nodeIndex).componentView;\n        if (compView.def.flags & 2 /* OnPush */) {\n            compView.state |= 8 /* ChecksEnabled */;\n        }\n    }\n    var /** @type {?} */ binding = def.bindings[bindingIdx];\n    var /** @type {?} */ propName = /** @type {?} */ ((binding.name));\n    // Note: This is still safe with Closure Compiler as\n    // the user passed in the property name as an object has to `providerDef`,\n    // so Closure Compiler will have renamed the property correctly already.\n    providerData.instance[propName] = value;\n    if (def.flags & 524288 /* OnChanges */) {\n        changes = changes || {};\n        var /** @type {?} */ oldValue = WrappedValue.unwrap(view.oldValues[def.bindingIndex + bindingIdx]);\n        var /** @type {?} */ binding_1 = def.bindings[bindingIdx];\n        changes[/** @type {?} */ ((binding_1.nonMinifiedName))] =\n            new SimpleChange(oldValue, value, (view.state & 2 /* FirstCheck */) !== 0);\n    }\n    view.oldValues[def.bindingIndex + bindingIdx] = value;\n    return changes;\n}\n/**\n * @param {?} view\n * @param {?} lifecycles\n * @return {?}\n */\nexport function callLifecycleHooksChildrenFirst(view, lifecycles) {\n    if (!(view.def.nodeFlags & lifecycles)) {\n        return;\n    }\n    var /** @type {?} */ nodes = view.def.nodes;\n    var /** @type {?} */ initIndex = 0;\n    for (var /** @type {?} */ i = 0; i < nodes.length; i++) {\n        var /** @type {?} */ nodeDef = nodes[i];\n        var /** @type {?} */ parent_1 = nodeDef.parent;\n        if (!parent_1 && nodeDef.flags & lifecycles) {\n            // matching root node (e.g. a pipe)\n            callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);\n        }\n        if ((nodeDef.childFlags & lifecycles) === 0) {\n            // no child matches one of the lifecycles\n            i += nodeDef.childCount;\n        }\n        while (parent_1 && (parent_1.flags & 1 /* TypeElement */) &&\n            i === parent_1.nodeIndex + parent_1.childCount) {\n            // last child of an element\n            if (parent_1.directChildFlags & lifecycles) {\n                initIndex = callElementProvidersLifecycles(view, parent_1, lifecycles, initIndex);\n            }\n            parent_1 = parent_1.parent;\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} lifecycles\n * @param {?} initIndex\n * @return {?}\n */\nfunction callElementProvidersLifecycles(view, elDef, lifecycles, initIndex) {\n    for (var /** @type {?} */ i = elDef.nodeIndex + 1; i <= elDef.nodeIndex + elDef.childCount; i++) {\n        var /** @type {?} */ nodeDef = view.def.nodes[i];\n        if (nodeDef.flags & lifecycles) {\n            callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);\n        }\n        // only visit direct children\n        i += nodeDef.childCount;\n    }\n    return initIndex;\n}\n/**\n * @param {?} view\n * @param {?} index\n * @param {?} lifecycles\n * @param {?} initIndex\n * @return {?}\n */\nfunction callProviderLifecycles(view, index, lifecycles, initIndex) {\n    var /** @type {?} */ providerData = asProviderData(view, index);\n    if (!providerData) {\n        return;\n    }\n    var /** @type {?} */ provider = providerData.instance;\n    if (!provider) {\n        return;\n    }\n    Services.setCurrentNode(view, index);\n    if (lifecycles & 1048576 /* AfterContentInit */ &&\n        shouldCallLifecycleInitHook(view, 512 /* InitState_CallingAfterContentInit */, initIndex)) {\n        provider.ngAfterContentInit();\n    }\n    if (lifecycles & 2097152 /* AfterContentChecked */) {\n        provider.ngAfterContentChecked();\n    }\n    if (lifecycles & 4194304 /* AfterViewInit */ &&\n        shouldCallLifecycleInitHook(view, 768 /* InitState_CallingAfterViewInit */, initIndex)) {\n        provider.ngAfterViewInit();\n    }\n    if (lifecycles & 8388608 /* AfterViewChecked */) {\n        provider.ngAfterViewChecked();\n    }\n    if (lifecycles & 131072 /* OnDestroy */) {\n        provider.ngOnDestroy();\n    }\n}\n//# sourceMappingURL=provider.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef } from '../linker/element_ref';\nimport { QueryList } from '../linker/query_list';\nimport { asElementData, asProviderData, asQueryList } from './types';\nimport { declaredViewContainer, filterQueryId, isEmbeddedView } from './util';\n/**\n * @param {?} flags\n * @param {?} id\n * @param {?} bindings\n * @return {?}\n */\nexport function queryDef(flags, id, bindings) {\n    var /** @type {?} */ bindingDefs = [];\n    for (var /** @type {?} */ propName in bindings) {\n        var /** @type {?} */ bindingType = bindings[propName];\n        bindingDefs.push({ propName: propName, bindingType: bindingType });\n    }\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        // TODO(vicb): check\n        checkIndex: -1, flags: flags,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0,\n        ngContentIndex: -1,\n        matchedQueries: {},\n        matchedQueryIds: 0,\n        references: {},\n        childCount: 0,\n        bindings: [],\n        bindingFlags: 0,\n        outputs: [],\n        element: null,\n        provider: null,\n        text: null,\n        query: { id: id, filterId: filterQueryId(id), bindings: bindingDefs },\n        ngContent: null\n    };\n}\n/**\n * @return {?}\n */\nexport function createQuery() {\n    return new QueryList();\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function dirtyParentQueries(view) {\n    var /** @type {?} */ queryIds = view.def.nodeMatchedQueries;\n    while (view.parent && isEmbeddedView(view)) {\n        var /** @type {?} */ tplDef = /** @type {?} */ ((view.parentNodeDef));\n        view = view.parent;\n        // content queries\n        var /** @type {?} */ end = tplDef.nodeIndex + tplDef.childCount;\n        for (var /** @type {?} */ i = 0; i <= end; i++) {\n            var /** @type {?} */ nodeDef = view.def.nodes[i];\n            if ((nodeDef.flags & 67108864 /* TypeContentQuery */) &&\n                (nodeDef.flags & 536870912 /* DynamicQuery */) &&\n                (/** @type {?} */ ((nodeDef.query)).filterId & queryIds) === /** @type {?} */ ((nodeDef.query)).filterId) {\n                asQueryList(view, i).setDirty();\n            }\n            if ((nodeDef.flags & 1 /* TypeElement */ && i + nodeDef.childCount < tplDef.nodeIndex) ||\n                !(nodeDef.childFlags & 67108864 /* TypeContentQuery */) ||\n                !(nodeDef.childFlags & 536870912 /* DynamicQuery */)) {\n                // skip elements that don't contain the template element or no query.\n                i += nodeDef.childCount;\n            }\n        }\n    }\n    // view queries\n    if (view.def.nodeFlags & 134217728 /* TypeViewQuery */) {\n        for (var /** @type {?} */ i = 0; i < view.def.nodes.length; i++) {\n            var /** @type {?} */ nodeDef = view.def.nodes[i];\n            if ((nodeDef.flags & 134217728 /* TypeViewQuery */) && (nodeDef.flags & 536870912 /* DynamicQuery */)) {\n                asQueryList(view, i).setDirty();\n            }\n            // only visit the root nodes\n            i += nodeDef.childCount;\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @return {?}\n */\nexport function checkAndUpdateQuery(view, nodeDef) {\n    var /** @type {?} */ queryList = asQueryList(view, nodeDef.nodeIndex);\n    if (!queryList.dirty) {\n        return;\n    }\n    var /** @type {?} */ directiveInstance;\n    var /** @type {?} */ newValues = /** @type {?} */ ((undefined));\n    if (nodeDef.flags & 67108864 /* TypeContentQuery */) {\n        var /** @type {?} */ elementDef = /** @type {?} */ ((/** @type {?} */ ((nodeDef.parent)).parent));\n        newValues = calcQueryValues(view, elementDef.nodeIndex, elementDef.nodeIndex + elementDef.childCount, /** @type {?} */ ((nodeDef.query)), []);\n        directiveInstance = asProviderData(view, /** @type {?} */ ((nodeDef.parent)).nodeIndex).instance;\n    }\n    else if (nodeDef.flags & 134217728 /* TypeViewQuery */) {\n        newValues = calcQueryValues(view, 0, view.def.nodes.length - 1, /** @type {?} */ ((nodeDef.query)), []);\n        directiveInstance = view.component;\n    }\n    queryList.reset(newValues);\n    var /** @type {?} */ bindings = /** @type {?} */ ((nodeDef.query)).bindings;\n    var /** @type {?} */ notify = false;\n    for (var /** @type {?} */ i = 0; i < bindings.length; i++) {\n        var /** @type {?} */ binding = bindings[i];\n        var /** @type {?} */ boundValue = void 0;\n        switch (binding.bindingType) {\n            case 0 /* First */:\n                boundValue = queryList.first;\n                break;\n            case 1 /* All */:\n                boundValue = queryList;\n                notify = true;\n                break;\n        }\n        directiveInstance[binding.propName] = boundValue;\n    }\n    if (notify) {\n        queryList.notifyOnChanges();\n    }\n}\n/**\n * @param {?} view\n * @param {?} startIndex\n * @param {?} endIndex\n * @param {?} queryDef\n * @param {?} values\n * @return {?}\n */\nfunction calcQueryValues(view, startIndex, endIndex, queryDef, values) {\n    for (var /** @type {?} */ i = startIndex; i <= endIndex; i++) {\n        var /** @type {?} */ nodeDef = view.def.nodes[i];\n        var /** @type {?} */ valueType = nodeDef.matchedQueries[queryDef.id];\n        if (valueType != null) {\n            values.push(getQueryValue(view, nodeDef, valueType));\n        }\n        if (nodeDef.flags & 1 /* TypeElement */ && /** @type {?} */ ((nodeDef.element)).template &&\n            (/** @type {?} */ ((/** @type {?} */ ((nodeDef.element)).template)).nodeMatchedQueries & queryDef.filterId) ===\n                queryDef.filterId) {\n            var /** @type {?} */ elementData = asElementData(view, i);\n            // check embedded views that were attached at the place of their template,\n            // but process child nodes first if some match the query (see issue #16568)\n            if ((nodeDef.childMatchedQueries & queryDef.filterId) === queryDef.filterId) {\n                calcQueryValues(view, i + 1, i + nodeDef.childCount, queryDef, values);\n                i += nodeDef.childCount;\n            }\n            if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n                var /** @type {?} */ embeddedViews = /** @type {?} */ ((elementData.viewContainer))._embeddedViews;\n                for (var /** @type {?} */ k = 0; k < embeddedViews.length; k++) {\n                    var /** @type {?} */ embeddedView = embeddedViews[k];\n                    var /** @type {?} */ dvc = declaredViewContainer(embeddedView);\n                    if (dvc && dvc === elementData) {\n                        calcQueryValues(embeddedView, 0, embeddedView.def.nodes.length - 1, queryDef, values);\n                    }\n                }\n            }\n            var /** @type {?} */ projectedViews = elementData.template._projectedViews;\n            if (projectedViews) {\n                for (var /** @type {?} */ k = 0; k < projectedViews.length; k++) {\n                    var /** @type {?} */ projectedView = projectedViews[k];\n                    calcQueryValues(projectedView, 0, projectedView.def.nodes.length - 1, queryDef, values);\n                }\n            }\n        }\n        if ((nodeDef.childMatchedQueries & queryDef.filterId) !== queryDef.filterId) {\n            // if no child matches the query, skip the children.\n            i += nodeDef.childCount;\n        }\n    }\n    return values;\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} queryValueType\n * @return {?}\n */\nexport function getQueryValue(view, nodeDef, queryValueType) {\n    if (queryValueType != null) {\n        // a match\n        switch (queryValueType) {\n            case 1 /* RenderElement */:\n                return asElementData(view, nodeDef.nodeIndex).renderElement;\n            case 0 /* ElementRef */:\n                return new ElementRef(asElementData(view, nodeDef.nodeIndex).renderElement);\n            case 2 /* TemplateRef */:\n                return asElementData(view, nodeDef.nodeIndex).template;\n            case 3 /* ViewContainerRef */:\n                return asElementData(view, nodeDef.nodeIndex).viewContainer;\n            case 4 /* Provider */:\n                return asProviderData(view, nodeDef.nodeIndex).instance;\n        }\n    }\n}\n//# sourceMappingURL=query.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { getParentRenderElement, visitProjectedRenderNodes } from './util';\n/**\n * @param {?} ngContentIndex\n * @param {?} index\n * @return {?}\n */\nexport function ngContentDef(ngContentIndex, index) {\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex: -1,\n        flags: 8 /* TypeNgContent */,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0,\n        matchedQueries: {},\n        matchedQueryIds: 0,\n        references: {}, ngContentIndex: ngContentIndex,\n        childCount: 0,\n        bindings: [],\n        bindingFlags: 0,\n        outputs: [],\n        element: null,\n        provider: null,\n        text: null,\n        query: null,\n        ngContent: { index: index }\n    };\n}\n/**\n * @param {?} view\n * @param {?} renderHost\n * @param {?} def\n * @return {?}\n */\nexport function appendNgContent(view, renderHost, def) {\n    var /** @type {?} */ parentEl = getParentRenderElement(view, renderHost, def);\n    if (!parentEl) {\n        // Nothing to do if there is no parent element.\n        return;\n    }\n    var /** @type {?} */ ngContentIndex = /** @type {?} */ ((def.ngContent)).index;\n    visitProjectedRenderNodes(view, ngContentIndex, 1 /* AppendChild */, parentEl, null, undefined);\n}\n//# sourceMappingURL=ng_content.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { asPureExpressionData } from './types';\nimport { calcBindingFlags, checkAndUpdateBinding } from './util';\n/**\n * @param {?} checkIndex\n * @param {?} argCount\n * @return {?}\n */\nexport function purePipeDef(checkIndex, argCount) {\n    // argCount + 1 to include the pipe as first arg\n    return _pureExpressionDef(128 /* TypePurePipe */, checkIndex, new Array(argCount + 1));\n}\n/**\n * @param {?} checkIndex\n * @param {?} argCount\n * @return {?}\n */\nexport function pureArrayDef(checkIndex, argCount) {\n    return _pureExpressionDef(32 /* TypePureArray */, checkIndex, new Array(argCount));\n}\n/**\n * @param {?} checkIndex\n * @param {?} propToIndex\n * @return {?}\n */\nexport function pureObjectDef(checkIndex, propToIndex) {\n    var /** @type {?} */ keys = Object.keys(propToIndex);\n    var /** @type {?} */ nbKeys = keys.length;\n    var /** @type {?} */ propertyNames = new Array(nbKeys);\n    for (var /** @type {?} */ i = 0; i < nbKeys; i++) {\n        var /** @type {?} */ key = keys[i];\n        var /** @type {?} */ index = propToIndex[key];\n        propertyNames[index] = key;\n    }\n    return _pureExpressionDef(64 /* TypePureObject */, checkIndex, propertyNames);\n}\n/**\n * @param {?} flags\n * @param {?} checkIndex\n * @param {?} propertyNames\n * @return {?}\n */\nfunction _pureExpressionDef(flags, checkIndex, propertyNames) {\n    var /** @type {?} */ bindings = new Array(propertyNames.length);\n    for (var /** @type {?} */ i = 0; i < propertyNames.length; i++) {\n        var /** @type {?} */ prop = propertyNames[i];\n        bindings[i] = {\n            flags: 8 /* TypeProperty */,\n            name: prop,\n            ns: null,\n            nonMinifiedName: prop,\n            securityContext: null,\n            suffix: null\n        };\n    }\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex: checkIndex,\n        flags: flags,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0,\n        matchedQueries: {},\n        matchedQueryIds: 0,\n        references: {},\n        ngContentIndex: -1,\n        childCount: 0, bindings: bindings,\n        bindingFlags: calcBindingFlags(bindings),\n        outputs: [],\n        element: null,\n        provider: null,\n        text: null,\n        query: null,\n        ngContent: null\n    };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nexport function createPureExpression(view, def) {\n    return { value: undefined };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nexport function checkAndUpdatePureExpressionInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    var /** @type {?} */ bindings = def.bindings;\n    var /** @type {?} */ changed = false;\n    var /** @type {?} */ bindLen = bindings.length;\n    if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))\n        changed = true;\n    if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))\n        changed = true;\n    if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))\n        changed = true;\n    if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))\n        changed = true;\n    if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))\n        changed = true;\n    if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))\n        changed = true;\n    if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))\n        changed = true;\n    if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))\n        changed = true;\n    if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))\n        changed = true;\n    if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))\n        changed = true;\n    if (changed) {\n        var /** @type {?} */ data = asPureExpressionData(view, def.nodeIndex);\n        var /** @type {?} */ value = void 0;\n        switch (def.flags & 201347067 /* Types */) {\n            case 32 /* TypePureArray */:\n                value = new Array(bindings.length);\n                if (bindLen > 0)\n                    value[0] = v0;\n                if (bindLen > 1)\n                    value[1] = v1;\n                if (bindLen > 2)\n                    value[2] = v2;\n                if (bindLen > 3)\n                    value[3] = v3;\n                if (bindLen > 4)\n                    value[4] = v4;\n                if (bindLen > 5)\n                    value[5] = v5;\n                if (bindLen > 6)\n                    value[6] = v6;\n                if (bindLen > 7)\n                    value[7] = v7;\n                if (bindLen > 8)\n                    value[8] = v8;\n                if (bindLen > 9)\n                    value[9] = v9;\n                break;\n            case 64 /* TypePureObject */:\n                value = {};\n                if (bindLen > 0)\n                    value[/** @type {?} */ ((bindings[0].name))] = v0;\n                if (bindLen > 1)\n                    value[/** @type {?} */ ((bindings[1].name))] = v1;\n                if (bindLen > 2)\n                    value[/** @type {?} */ ((bindings[2].name))] = v2;\n                if (bindLen > 3)\n                    value[/** @type {?} */ ((bindings[3].name))] = v3;\n                if (bindLen > 4)\n                    value[/** @type {?} */ ((bindings[4].name))] = v4;\n                if (bindLen > 5)\n                    value[/** @type {?} */ ((bindings[5].name))] = v5;\n                if (bindLen > 6)\n                    value[/** @type {?} */ ((bindings[6].name))] = v6;\n                if (bindLen > 7)\n                    value[/** @type {?} */ ((bindings[7].name))] = v7;\n                if (bindLen > 8)\n                    value[/** @type {?} */ ((bindings[8].name))] = v8;\n                if (bindLen > 9)\n                    value[/** @type {?} */ ((bindings[9].name))] = v9;\n                break;\n            case 128 /* TypePurePipe */:\n                var /** @type {?} */ pipe = v0;\n                switch (bindLen) {\n                    case 1:\n                        value = pipe.transform(v0);\n                        break;\n                    case 2:\n                        value = pipe.transform(v1);\n                        break;\n                    case 3:\n                        value = pipe.transform(v1, v2);\n                        break;\n                    case 4:\n                        value = pipe.transform(v1, v2, v3);\n                        break;\n                    case 5:\n                        value = pipe.transform(v1, v2, v3, v4);\n                        break;\n                    case 6:\n                        value = pipe.transform(v1, v2, v3, v4, v5);\n                        break;\n                    case 7:\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6);\n                        break;\n                    case 8:\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7);\n                        break;\n                    case 9:\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8);\n                        break;\n                    case 10:\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8, v9);\n                        break;\n                }\n                break;\n        }\n        data.value = value;\n    }\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} values\n * @return {?}\n */\nexport function checkAndUpdatePureExpressionDynamic(view, def, values) {\n    var /** @type {?} */ bindings = def.bindings;\n    var /** @type {?} */ changed = false;\n    for (var /** @type {?} */ i = 0; i < values.length; i++) {\n        // Note: We need to loop over all values, so that\n        // the old values are updates as well!\n        if (checkAndUpdateBinding(view, def, i, values[i])) {\n            changed = true;\n        }\n    }\n    if (changed) {\n        var /** @type {?} */ data = asPureExpressionData(view, def.nodeIndex);\n        var /** @type {?} */ value = void 0;\n        switch (def.flags & 201347067 /* Types */) {\n            case 32 /* TypePureArray */:\n                value = values;\n                break;\n            case 64 /* TypePureObject */:\n                value = {};\n                for (var /** @type {?} */ i = 0; i < values.length; i++) {\n                    value[/** @type {?} */ ((bindings[i].name))] = values[i];\n                }\n                break;\n            case 128 /* TypePurePipe */:\n                var /** @type {?} */ pipe = values[0];\n                var /** @type {?} */ params = values.slice(1);\n                value = pipe.transform.apply(pipe, params);\n                break;\n        }\n        data.value = value;\n    }\n    return changed;\n}\n//# sourceMappingURL=pure_expression.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { asTextData } from './types';\nimport { checkAndUpdateBinding, getParentRenderElement } from './util';\n/**\n * @param {?} checkIndex\n * @param {?} ngContentIndex\n * @param {?} staticText\n * @return {?}\n */\nexport function textDef(checkIndex, ngContentIndex, staticText) {\n    var /** @type {?} */ bindings = new Array(staticText.length - 1);\n    for (var /** @type {?} */ i = 1; i < staticText.length; i++) {\n        bindings[i - 1] = {\n            flags: 8 /* TypeProperty */,\n            name: null,\n            ns: null,\n            nonMinifiedName: null,\n            securityContext: null,\n            suffix: staticText[i],\n        };\n    }\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex: checkIndex,\n        flags: 2 /* TypeText */,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0,\n        matchedQueries: {},\n        matchedQueryIds: 0,\n        references: {}, ngContentIndex: ngContentIndex,\n        childCount: 0, bindings: bindings,\n        bindingFlags: 8 /* TypeProperty */,\n        outputs: [],\n        element: null,\n        provider: null,\n        text: { prefix: staticText[0] },\n        query: null,\n        ngContent: null,\n    };\n}\n/**\n * @param {?} view\n * @param {?} renderHost\n * @param {?} def\n * @return {?}\n */\nexport function createText(view, renderHost, def) {\n    var /** @type {?} */ renderNode;\n    var /** @type {?} */ renderer = view.renderer;\n    renderNode = renderer.createText(/** @type {?} */ ((def.text)).prefix);\n    var /** @type {?} */ parentEl = getParentRenderElement(view, renderHost, def);\n    if (parentEl) {\n        renderer.appendChild(parentEl, renderNode);\n    }\n    return { renderText: renderNode };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nexport function checkAndUpdateTextInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    var /** @type {?} */ changed = false;\n    var /** @type {?} */ bindings = def.bindings;\n    var /** @type {?} */ bindLen = bindings.length;\n    if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))\n        changed = true;\n    if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))\n        changed = true;\n    if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))\n        changed = true;\n    if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))\n        changed = true;\n    if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))\n        changed = true;\n    if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))\n        changed = true;\n    if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))\n        changed = true;\n    if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))\n        changed = true;\n    if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))\n        changed = true;\n    if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))\n        changed = true;\n    if (changed) {\n        var /** @type {?} */ value = /** @type {?} */ ((def.text)).prefix;\n        if (bindLen > 0)\n            value += _addInterpolationPart(v0, bindings[0]);\n        if (bindLen > 1)\n            value += _addInterpolationPart(v1, bindings[1]);\n        if (bindLen > 2)\n            value += _addInterpolationPart(v2, bindings[2]);\n        if (bindLen > 3)\n            value += _addInterpolationPart(v3, bindings[3]);\n        if (bindLen > 4)\n            value += _addInterpolationPart(v4, bindings[4]);\n        if (bindLen > 5)\n            value += _addInterpolationPart(v5, bindings[5]);\n        if (bindLen > 6)\n            value += _addInterpolationPart(v6, bindings[6]);\n        if (bindLen > 7)\n            value += _addInterpolationPart(v7, bindings[7]);\n        if (bindLen > 8)\n            value += _addInterpolationPart(v8, bindings[8]);\n        if (bindLen > 9)\n            value += _addInterpolationPart(v9, bindings[9]);\n        var /** @type {?} */ renderNode = asTextData(view, def.nodeIndex).renderText;\n        view.renderer.setValue(renderNode, value);\n    }\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} values\n * @return {?}\n */\nexport function checkAndUpdateTextDynamic(view, def, values) {\n    var /** @type {?} */ bindings = def.bindings;\n    var /** @type {?} */ changed = false;\n    for (var /** @type {?} */ i = 0; i < values.length; i++) {\n        // Note: We need to loop over all values, so that\n        // the old values are updates as well!\n        if (checkAndUpdateBinding(view, def, i, values[i])) {\n            changed = true;\n        }\n    }\n    if (changed) {\n        var /** @type {?} */ value = '';\n        for (var /** @type {?} */ i = 0; i < values.length; i++) {\n            value = value + _addInterpolationPart(values[i], bindings[i]);\n        }\n        value = /** @type {?} */ ((def.text)).prefix + value;\n        var /** @type {?} */ renderNode = asTextData(view, def.nodeIndex).renderText;\n        view.renderer.setValue(renderNode, value);\n    }\n    return changed;\n}\n/**\n * @param {?} value\n * @param {?} binding\n * @return {?}\n */\nfunction _addInterpolationPart(value, binding) {\n    var /** @type {?} */ valueStr = value != null ? value.toString() : '';\n    return valueStr + binding.suffix;\n}\n//# sourceMappingURL=text.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { checkAndUpdateElementDynamic, checkAndUpdateElementInline, createElement, listenToElementOutputs } from './element';\nimport { expressionChangedAfterItHasBeenCheckedError } from './errors';\nimport { appendNgContent } from './ng_content';\nimport { callLifecycleHooksChildrenFirst, checkAndUpdateDirectiveDynamic, checkAndUpdateDirectiveInline, createDirectiveInstance, createPipeInstance, createProviderInstance } from './provider';\nimport { checkAndUpdatePureExpressionDynamic, checkAndUpdatePureExpressionInline, createPureExpression } from './pure_expression';\nimport { checkAndUpdateQuery, createQuery } from './query';\nimport { createTemplateData, createViewContainerData } from './refs';\nimport { checkAndUpdateTextDynamic, checkAndUpdateTextInline, createText } from './text';\nimport { Services, asElementData, asQueryList, asTextData, shiftInitState } from './types';\nimport { NOOP, checkBindingNoChanges, isComponentView, markParentViewsForCheckProjectedViews, resolveDefinition, tokenKey } from './util';\nimport { detachProjectedView } from './view_attach';\n/**\n * @param {?} flags\n * @param {?} nodes\n * @param {?=} updateDirectives\n * @param {?=} updateRenderer\n * @return {?}\n */\nexport function viewDef(flags, nodes, updateDirectives, updateRenderer) {\n    // clone nodes and set auto calculated values\n    var /** @type {?} */ viewBindingCount = 0;\n    var /** @type {?} */ viewDisposableCount = 0;\n    var /** @type {?} */ viewNodeFlags = 0;\n    var /** @type {?} */ viewRootNodeFlags = 0;\n    var /** @type {?} */ viewMatchedQueries = 0;\n    var /** @type {?} */ currentParent = null;\n    var /** @type {?} */ currentRenderParent = null;\n    var /** @type {?} */ currentElementHasPublicProviders = false;\n    var /** @type {?} */ currentElementHasPrivateProviders = false;\n    var /** @type {?} */ lastRenderRootNode = null;\n    for (var /** @type {?} */ i = 0; i < nodes.length; i++) {\n        var /** @type {?} */ node = nodes[i];\n        node.nodeIndex = i;\n        node.parent = currentParent;\n        node.bindingIndex = viewBindingCount;\n        node.outputIndex = viewDisposableCount;\n        node.renderParent = currentRenderParent;\n        viewNodeFlags |= node.flags;\n        viewMatchedQueries |= node.matchedQueryIds;\n        if (node.element) {\n            var /** @type {?} */ elDef = node.element;\n            elDef.publicProviders =\n                currentParent ? /** @type {?} */ ((currentParent.element)).publicProviders : Object.create(null);\n            elDef.allProviders = elDef.publicProviders;\n            // Note: We assume that all providers of an element are before any child element!\n            currentElementHasPublicProviders = false;\n            currentElementHasPrivateProviders = false;\n            if (node.element.template) {\n                viewMatchedQueries |= node.element.template.nodeMatchedQueries;\n            }\n        }\n        validateNode(currentParent, node, nodes.length);\n        viewBindingCount += node.bindings.length;\n        viewDisposableCount += node.outputs.length;\n        if (!currentRenderParent && (node.flags & 3 /* CatRenderNode */)) {\n            lastRenderRootNode = node;\n        }\n        if (node.flags & 20224 /* CatProvider */) {\n            if (!currentElementHasPublicProviders) {\n                currentElementHasPublicProviders = true; /** @type {?} */\n                ((/** @type {?} */ ((currentParent)).element)).publicProviders = Object.create(/** @type {?} */ ((/** @type {?} */ ((currentParent)).element)).publicProviders); /** @type {?} */\n                ((/** @type {?} */ ((currentParent)).element)).allProviders = /** @type {?} */ ((/** @type {?} */ ((currentParent)).element)).publicProviders;\n            }\n            var /** @type {?} */ isPrivateService = (node.flags & 8192 /* PrivateProvider */) !== 0;\n            var /** @type {?} */ isComponent = (node.flags & 32768 /* Component */) !== 0;\n            if (!isPrivateService || isComponent) {\n                /** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ ((currentParent)).element)).publicProviders))[tokenKey(/** @type {?} */ ((node.provider)).token)] = node;\n            }\n            else {\n                if (!currentElementHasPrivateProviders) {\n                    currentElementHasPrivateProviders = true; /** @type {?} */\n                    ((/** @type {?} */ ((currentParent)).element)).allProviders = Object.create(/** @type {?} */ ((/** @type {?} */ ((currentParent)).element)).publicProviders);\n                } /** @type {?} */\n                ((/** @type {?} */ ((/** @type {?} */ ((currentParent)).element)).allProviders))[tokenKey(/** @type {?} */ ((node.provider)).token)] = node;\n            }\n            if (isComponent) {\n                /** @type {?} */ ((/** @type {?} */ ((currentParent)).element)).componentProvider = node;\n            }\n        }\n        if (currentParent) {\n            currentParent.childFlags |= node.flags;\n            currentParent.directChildFlags |= node.flags;\n            currentParent.childMatchedQueries |= node.matchedQueryIds;\n            if (node.element && node.element.template) {\n                currentParent.childMatchedQueries |= node.element.template.nodeMatchedQueries;\n            }\n        }\n        else {\n            viewRootNodeFlags |= node.flags;\n        }\n        if (node.childCount > 0) {\n            currentParent = node;\n            if (!isNgContainer(node)) {\n                currentRenderParent = node;\n            }\n        }\n        else {\n            // When the current node has no children, check if it is the last children of its parent.\n            // When it is, propagate the flags up.\n            // The loop is required because an element could be the last transitive children of several\n            // elements. We loop to either the root or the highest opened element (= with remaining\n            // children)\n            while (currentParent && i === currentParent.nodeIndex + currentParent.childCount) {\n                var /** @type {?} */ newParent = currentParent.parent;\n                if (newParent) {\n                    newParent.childFlags |= currentParent.childFlags;\n                    newParent.childMatchedQueries |= currentParent.childMatchedQueries;\n                }\n                currentParent = newParent;\n                // We also need to update the render parent & account for ng-container\n                if (currentParent && isNgContainer(currentParent)) {\n                    currentRenderParent = currentParent.renderParent;\n                }\n                else {\n                    currentRenderParent = currentParent;\n                }\n            }\n        }\n    }\n    var /** @type {?} */ handleEvent = function (view, nodeIndex, eventName, event) { return ((/** @type {?} */ ((nodes[nodeIndex].element)).handleEvent))(view, eventName, event); };\n    return {\n        // Will be filled later...\n        factory: null,\n        nodeFlags: viewNodeFlags,\n        rootNodeFlags: viewRootNodeFlags,\n        nodeMatchedQueries: viewMatchedQueries, flags: flags,\n        nodes: nodes,\n        updateDirectives: updateDirectives || NOOP,\n        updateRenderer: updateRenderer || NOOP, handleEvent: handleEvent,\n        bindingCount: viewBindingCount,\n        outputCount: viewDisposableCount, lastRenderRootNode: lastRenderRootNode\n    };\n}\n/**\n * @param {?} node\n * @return {?}\n */\nfunction isNgContainer(node) {\n    return (node.flags & 1 /* TypeElement */) !== 0 && /** @type {?} */ ((node.element)).name === null;\n}\n/**\n * @param {?} parent\n * @param {?} node\n * @param {?} nodeCount\n * @return {?}\n */\nfunction validateNode(parent, node, nodeCount) {\n    var /** @type {?} */ template = node.element && node.element.template;\n    if (template) {\n        if (!template.lastRenderRootNode) {\n            throw new Error(\"Illegal State: Embedded templates without nodes are not allowed!\");\n        }\n        if (template.lastRenderRootNode &&\n            template.lastRenderRootNode.flags & 16777216 /* EmbeddedViews */) {\n            throw new Error(\"Illegal State: Last root node of a template can't have embedded views, at index \" + node.nodeIndex + \"!\");\n        }\n    }\n    if (node.flags & 20224 /* CatProvider */) {\n        var /** @type {?} */ parentFlags = parent ? parent.flags : 0;\n        if ((parentFlags & 1 /* TypeElement */) === 0) {\n            throw new Error(\"Illegal State: StaticProvider/Directive nodes need to be children of elements or anchors, at index \" + node.nodeIndex + \"!\");\n        }\n    }\n    if (node.query) {\n        if (node.flags & 67108864 /* TypeContentQuery */ &&\n            (!parent || (parent.flags & 16384 /* TypeDirective */) === 0)) {\n            throw new Error(\"Illegal State: Content Query nodes need to be children of directives, at index \" + node.nodeIndex + \"!\");\n        }\n        if (node.flags & 134217728 /* TypeViewQuery */ && parent) {\n            throw new Error(\"Illegal State: View Query nodes have to be top level nodes, at index \" + node.nodeIndex + \"!\");\n        }\n    }\n    if (node.childCount) {\n        var /** @type {?} */ parentEnd = parent ? parent.nodeIndex + parent.childCount : nodeCount - 1;\n        if (node.nodeIndex <= parentEnd && node.nodeIndex + node.childCount > parentEnd) {\n            throw new Error(\"Illegal State: childCount of node leads outside of parent, at index \" + node.nodeIndex + \"!\");\n        }\n    }\n}\n/**\n * @param {?} parent\n * @param {?} anchorDef\n * @param {?} viewDef\n * @param {?=} context\n * @return {?}\n */\nexport function createEmbeddedView(parent, anchorDef, viewDef, context) {\n    // embedded views are seen as siblings to the anchor, so we need\n    // to get the parent of the anchor and use it as parentIndex.\n    var /** @type {?} */ view = createView(parent.root, parent.renderer, parent, anchorDef, viewDef);\n    initView(view, parent.component, context);\n    createViewNodes(view);\n    return view;\n}\n/**\n * @param {?} root\n * @param {?} def\n * @param {?=} context\n * @return {?}\n */\nexport function createRootView(root, def, context) {\n    var /** @type {?} */ view = createView(root, root.renderer, null, null, def);\n    initView(view, context, context);\n    createViewNodes(view);\n    return view;\n}\n/**\n * @param {?} parentView\n * @param {?} nodeDef\n * @param {?} viewDef\n * @param {?} hostElement\n * @return {?}\n */\nexport function createComponentView(parentView, nodeDef, viewDef, hostElement) {\n    var /** @type {?} */ rendererType = /** @type {?} */ ((nodeDef.element)).componentRendererType;\n    var /** @type {?} */ compRenderer;\n    if (!rendererType) {\n        compRenderer = parentView.root.renderer;\n    }\n    else {\n        compRenderer = parentView.root.rendererFactory.createRenderer(hostElement, rendererType);\n    }\n    return createView(parentView.root, compRenderer, parentView, /** @type {?} */ ((nodeDef.element)).componentProvider, viewDef);\n}\n/**\n * @param {?} root\n * @param {?} renderer\n * @param {?} parent\n * @param {?} parentNodeDef\n * @param {?} def\n * @return {?}\n */\nfunction createView(root, renderer, parent, parentNodeDef, def) {\n    var /** @type {?} */ nodes = new Array(def.nodes.length);\n    var /** @type {?} */ disposables = def.outputCount ? new Array(def.outputCount) : null;\n    var /** @type {?} */ view = {\n        def: def,\n        parent: parent,\n        viewContainerParent: null, parentNodeDef: parentNodeDef,\n        context: null,\n        component: null, nodes: nodes,\n        state: 13 /* CatInit */, root: root, renderer: renderer,\n        oldValues: new Array(def.bindingCount), disposables: disposables,\n        initIndex: -1\n    };\n    return view;\n}\n/**\n * @param {?} view\n * @param {?} component\n * @param {?} context\n * @return {?}\n */\nfunction initView(view, component, context) {\n    view.component = component;\n    view.context = context;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction createViewNodes(view) {\n    var /** @type {?} */ renderHost;\n    if (isComponentView(view)) {\n        var /** @type {?} */ hostDef = view.parentNodeDef;\n        renderHost = asElementData(/** @type {?} */ ((view.parent)), /** @type {?} */ ((/** @type {?} */ ((hostDef)).parent)).nodeIndex).renderElement;\n    }\n    var /** @type {?} */ def = view.def;\n    var /** @type {?} */ nodes = view.nodes;\n    for (var /** @type {?} */ i = 0; i < def.nodes.length; i++) {\n        var /** @type {?} */ nodeDef = def.nodes[i];\n        Services.setCurrentNode(view, i);\n        var /** @type {?} */ nodeData = void 0;\n        switch (nodeDef.flags & 201347067 /* Types */) {\n            case 1 /* TypeElement */:\n                var /** @type {?} */ el = /** @type {?} */ (createElement(view, renderHost, nodeDef));\n                var /** @type {?} */ componentView = /** @type {?} */ ((undefined));\n                if (nodeDef.flags & 33554432 /* ComponentView */) {\n                    var /** @type {?} */ compViewDef = resolveDefinition(/** @type {?} */ ((/** @type {?} */ ((nodeDef.element)).componentView)));\n                    componentView = Services.createComponentView(view, nodeDef, compViewDef, el);\n                }\n                listenToElementOutputs(view, componentView, nodeDef, el);\n                nodeData = /** @type {?} */ ({\n                    renderElement: el,\n                    componentView: componentView,\n                    viewContainer: null,\n                    template: /** @type {?} */ ((nodeDef.element)).template ? createTemplateData(view, nodeDef) : undefined\n                });\n                if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n                    nodeData.viewContainer = createViewContainerData(view, nodeDef, nodeData);\n                }\n                break;\n            case 2 /* TypeText */:\n                nodeData = /** @type {?} */ (createText(view, renderHost, nodeDef));\n                break;\n            case 512 /* TypeClassProvider */:\n            case 1024 /* TypeFactoryProvider */:\n            case 2048 /* TypeUseExistingProvider */:\n            case 256 /* TypeValueProvider */: {\n                nodeData = nodes[i];\n                if (!nodeData && !(nodeDef.flags & 4096 /* LazyProvider */)) {\n                    var /** @type {?} */ instance = createProviderInstance(view, nodeDef);\n                    nodeData = /** @type {?} */ ({ instance: instance });\n                }\n                break;\n            }\n            case 16 /* TypePipe */: {\n                var /** @type {?} */ instance = createPipeInstance(view, nodeDef);\n                nodeData = /** @type {?} */ ({ instance: instance });\n                break;\n            }\n            case 16384 /* TypeDirective */: {\n                nodeData = nodes[i];\n                if (!nodeData) {\n                    var /** @type {?} */ instance = createDirectiveInstance(view, nodeDef);\n                    nodeData = /** @type {?} */ ({ instance: instance });\n                }\n                if (nodeDef.flags & 32768 /* Component */) {\n                    var /** @type {?} */ compView = asElementData(view, /** @type {?} */ ((nodeDef.parent)).nodeIndex).componentView;\n                    initView(compView, nodeData.instance, nodeData.instance);\n                }\n                break;\n            }\n            case 32 /* TypePureArray */:\n            case 64 /* TypePureObject */:\n            case 128 /* TypePurePipe */:\n                nodeData = /** @type {?} */ (createPureExpression(view, nodeDef));\n                break;\n            case 67108864 /* TypeContentQuery */:\n            case 134217728 /* TypeViewQuery */:\n                nodeData = /** @type {?} */ (createQuery());\n                break;\n            case 8 /* TypeNgContent */:\n                appendNgContent(view, renderHost, nodeDef);\n                // no runtime data needed for NgContent...\n                nodeData = undefined;\n                break;\n        }\n        nodes[i] = nodeData;\n    }\n    // Create the ViewData.nodes of component views after we created everything else,\n    // so that e.g. ng-content works\n    execComponentViewsAction(view, ViewAction.CreateViewNodes);\n    // fill static content and view queries\n    execQueriesAction(view, 67108864 /* TypeContentQuery */ | 134217728 /* TypeViewQuery */, 268435456 /* StaticQuery */, 0 /* CheckAndUpdate */);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function checkNoChangesView(view) {\n    markProjectedViewsForCheck(view);\n    Services.updateDirectives(view, 1 /* CheckNoChanges */);\n    execEmbeddedViewsAction(view, ViewAction.CheckNoChanges);\n    Services.updateRenderer(view, 1 /* CheckNoChanges */);\n    execComponentViewsAction(view, ViewAction.CheckNoChanges);\n    // Note: We don't check queries for changes as we didn't do this in v2.x.\n    // TODO(tbosch): investigate if we can enable the check again in v5.x with a nicer error message.\n    view.state &= ~(64 /* CheckProjectedViews */ | 32 /* CheckProjectedView */);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function checkAndUpdateView(view) {\n    if (view.state & 1 /* BeforeFirstCheck */) {\n        view.state &= ~1 /* BeforeFirstCheck */;\n        view.state |= 2 /* FirstCheck */;\n    }\n    else {\n        view.state &= ~2 /* FirstCheck */;\n    }\n    shiftInitState(view, 0 /* InitState_BeforeInit */, 256 /* InitState_CallingOnInit */);\n    markProjectedViewsForCheck(view);\n    Services.updateDirectives(view, 0 /* CheckAndUpdate */);\n    execEmbeddedViewsAction(view, ViewAction.CheckAndUpdate);\n    execQueriesAction(view, 67108864 /* TypeContentQuery */, 536870912 /* DynamicQuery */, 0 /* CheckAndUpdate */);\n    var /** @type {?} */ callInit = shiftInitState(view, 256 /* InitState_CallingOnInit */, 512 /* InitState_CallingAfterContentInit */);\n    callLifecycleHooksChildrenFirst(view, 2097152 /* AfterContentChecked */ | (callInit ? 1048576 /* AfterContentInit */ : 0));\n    Services.updateRenderer(view, 0 /* CheckAndUpdate */);\n    execComponentViewsAction(view, ViewAction.CheckAndUpdate);\n    execQueriesAction(view, 134217728 /* TypeViewQuery */, 536870912 /* DynamicQuery */, 0 /* CheckAndUpdate */);\n    callInit = shiftInitState(view, 512 /* InitState_CallingAfterContentInit */, 768 /* InitState_CallingAfterViewInit */);\n    callLifecycleHooksChildrenFirst(view, 8388608 /* AfterViewChecked */ | (callInit ? 4194304 /* AfterViewInit */ : 0));\n    if (view.def.flags & 2 /* OnPush */) {\n        view.state &= ~8 /* ChecksEnabled */;\n    }\n    view.state &= ~(64 /* CheckProjectedViews */ | 32 /* CheckProjectedView */);\n    shiftInitState(view, 768 /* InitState_CallingAfterViewInit */, 1024 /* InitState_AfterInit */);\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} argStyle\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nexport function checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    if (argStyle === 0 /* Inline */) {\n        return checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    }\n    else {\n        return checkAndUpdateNodeDynamic(view, nodeDef, v0);\n    }\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction markProjectedViewsForCheck(view) {\n    var /** @type {?} */ def = view.def;\n    if (!(def.nodeFlags & 4 /* ProjectedTemplate */)) {\n        return;\n    }\n    for (var /** @type {?} */ i = 0; i < def.nodes.length; i++) {\n        var /** @type {?} */ nodeDef = def.nodes[i];\n        if (nodeDef.flags & 4 /* ProjectedTemplate */) {\n            var /** @type {?} */ projectedViews = asElementData(view, i).template._projectedViews;\n            if (projectedViews) {\n                for (var /** @type {?} */ i_1 = 0; i_1 < projectedViews.length; i_1++) {\n                    var /** @type {?} */ projectedView = projectedViews[i_1];\n                    projectedView.state |= 32 /* CheckProjectedView */;\n                    markParentViewsForCheckProjectedViews(projectedView, view);\n                }\n            }\n        }\n        else if ((nodeDef.childFlags & 4 /* ProjectedTemplate */) === 0) {\n            // a parent with leafs\n            // no child is a component,\n            // then skip the children\n            i += nodeDef.childCount;\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nfunction checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    switch (nodeDef.flags & 201347067 /* Types */) {\n        case 1 /* TypeElement */:\n            return checkAndUpdateElementInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        case 2 /* TypeText */:\n            return checkAndUpdateTextInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        case 16384 /* TypeDirective */:\n            return checkAndUpdateDirectiveInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        case 32 /* TypePureArray */:\n        case 64 /* TypePureObject */:\n        case 128 /* TypePurePipe */:\n            return checkAndUpdatePureExpressionInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        default:\n            throw 'unreachable';\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} values\n * @return {?}\n */\nfunction checkAndUpdateNodeDynamic(view, nodeDef, values) {\n    switch (nodeDef.flags & 201347067 /* Types */) {\n        case 1 /* TypeElement */:\n            return checkAndUpdateElementDynamic(view, nodeDef, values);\n        case 2 /* TypeText */:\n            return checkAndUpdateTextDynamic(view, nodeDef, values);\n        case 16384 /* TypeDirective */:\n            return checkAndUpdateDirectiveDynamic(view, nodeDef, values);\n        case 32 /* TypePureArray */:\n        case 64 /* TypePureObject */:\n        case 128 /* TypePurePipe */:\n            return checkAndUpdatePureExpressionDynamic(view, nodeDef, values);\n        default:\n            throw 'unreachable';\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} argStyle\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nexport function checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    if (argStyle === 0 /* Inline */) {\n        checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    }\n    else {\n        checkNoChangesNodeDynamic(view, nodeDef, v0);\n    }\n    // Returning false is ok here as we would have thrown in case of a change.\n    return false;\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nfunction checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    var /** @type {?} */ bindLen = nodeDef.bindings.length;\n    if (bindLen > 0)\n        checkBindingNoChanges(view, nodeDef, 0, v0);\n    if (bindLen > 1)\n        checkBindingNoChanges(view, nodeDef, 1, v1);\n    if (bindLen > 2)\n        checkBindingNoChanges(view, nodeDef, 2, v2);\n    if (bindLen > 3)\n        checkBindingNoChanges(view, nodeDef, 3, v3);\n    if (bindLen > 4)\n        checkBindingNoChanges(view, nodeDef, 4, v4);\n    if (bindLen > 5)\n        checkBindingNoChanges(view, nodeDef, 5, v5);\n    if (bindLen > 6)\n        checkBindingNoChanges(view, nodeDef, 6, v6);\n    if (bindLen > 7)\n        checkBindingNoChanges(view, nodeDef, 7, v7);\n    if (bindLen > 8)\n        checkBindingNoChanges(view, nodeDef, 8, v8);\n    if (bindLen > 9)\n        checkBindingNoChanges(view, nodeDef, 9, v9);\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} values\n * @return {?}\n */\nfunction checkNoChangesNodeDynamic(view, nodeDef, values) {\n    for (var /** @type {?} */ i = 0; i < values.length; i++) {\n        checkBindingNoChanges(view, nodeDef, i, values[i]);\n    }\n}\n/**\n * Workaround https://github.com/angular/tsickle/issues/497\n * @suppress {misplacedTypeAnnotation}\n * @param {?} view\n * @param {?} nodeDef\n * @return {?}\n */\nfunction checkNoChangesQuery(view, nodeDef) {\n    var /** @type {?} */ queryList = asQueryList(view, nodeDef.nodeIndex);\n    if (queryList.dirty) {\n        throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, nodeDef.nodeIndex), \"Query \" + (/** @type {?} */ ((nodeDef.query))).id + \" not dirty\", \"Query \" + (/** @type {?} */ ((nodeDef.query))).id + \" dirty\", (view.state & 1 /* BeforeFirstCheck */) !== 0);\n    }\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function destroyView(view) {\n    if (view.state & 128 /* Destroyed */) {\n        return;\n    }\n    execEmbeddedViewsAction(view, ViewAction.Destroy);\n    execComponentViewsAction(view, ViewAction.Destroy);\n    callLifecycleHooksChildrenFirst(view, 131072 /* OnDestroy */);\n    if (view.disposables) {\n        for (var /** @type {?} */ i = 0; i < view.disposables.length; i++) {\n            view.disposables[i]();\n        }\n    }\n    detachProjectedView(view);\n    if (view.renderer.destroyNode) {\n        destroyViewNodes(view);\n    }\n    if (isComponentView(view)) {\n        view.renderer.destroy();\n    }\n    view.state |= 128 /* Destroyed */;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction destroyViewNodes(view) {\n    var /** @type {?} */ len = view.def.nodes.length;\n    for (var /** @type {?} */ i = 0; i < len; i++) {\n        var /** @type {?} */ def = view.def.nodes[i];\n        if (def.flags & 1 /* TypeElement */) {\n            /** @type {?} */ ((view.renderer.destroyNode))(asElementData(view, i).renderElement);\n        }\n        else if (def.flags & 2 /* TypeText */) {\n            /** @type {?} */ ((view.renderer.destroyNode))(asTextData(view, i).renderText);\n        }\n        else if (def.flags & 67108864 /* TypeContentQuery */ || def.flags & 134217728 /* TypeViewQuery */) {\n            asQueryList(view, i).destroy();\n        }\n    }\n}\n/** @enum {number} */\nvar ViewAction = {\n    CreateViewNodes: 0,\n    CheckNoChanges: 1,\n    CheckNoChangesProjectedViews: 2,\n    CheckAndUpdate: 3,\n    CheckAndUpdateProjectedViews: 4,\n    Destroy: 5,\n};\nViewAction[ViewAction.CreateViewNodes] = \"CreateViewNodes\";\nViewAction[ViewAction.CheckNoChanges] = \"CheckNoChanges\";\nViewAction[ViewAction.CheckNoChangesProjectedViews] = \"CheckNoChangesProjectedViews\";\nViewAction[ViewAction.CheckAndUpdate] = \"CheckAndUpdate\";\nViewAction[ViewAction.CheckAndUpdateProjectedViews] = \"CheckAndUpdateProjectedViews\";\nViewAction[ViewAction.Destroy] = \"Destroy\";\n/**\n * @param {?} view\n * @param {?} action\n * @return {?}\n */\nfunction execComponentViewsAction(view, action) {\n    var /** @type {?} */ def = view.def;\n    if (!(def.nodeFlags & 33554432 /* ComponentView */)) {\n        return;\n    }\n    for (var /** @type {?} */ i = 0; i < def.nodes.length; i++) {\n        var /** @type {?} */ nodeDef = def.nodes[i];\n        if (nodeDef.flags & 33554432 /* ComponentView */) {\n            // a leaf\n            callViewAction(asElementData(view, i).componentView, action);\n        }\n        else if ((nodeDef.childFlags & 33554432 /* ComponentView */) === 0) {\n            // a parent with leafs\n            // no child is a component,\n            // then skip the children\n            i += nodeDef.childCount;\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} action\n * @return {?}\n */\nfunction execEmbeddedViewsAction(view, action) {\n    var /** @type {?} */ def = view.def;\n    if (!(def.nodeFlags & 16777216 /* EmbeddedViews */)) {\n        return;\n    }\n    for (var /** @type {?} */ i = 0; i < def.nodes.length; i++) {\n        var /** @type {?} */ nodeDef = def.nodes[i];\n        if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n            // a leaf\n            var /** @type {?} */ embeddedViews = /** @type {?} */ ((asElementData(view, i).viewContainer))._embeddedViews;\n            for (var /** @type {?} */ k = 0; k < embeddedViews.length; k++) {\n                callViewAction(embeddedViews[k], action);\n            }\n        }\n        else if ((nodeDef.childFlags & 16777216 /* EmbeddedViews */) === 0) {\n            // a parent with leafs\n            // no child is a component,\n            // then skip the children\n            i += nodeDef.childCount;\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} action\n * @return {?}\n */\nfunction callViewAction(view, action) {\n    var /** @type {?} */ viewState = view.state;\n    switch (action) {\n        case ViewAction.CheckNoChanges:\n            if ((viewState & 128 /* Destroyed */) === 0) {\n                if ((viewState & 12 /* CatDetectChanges */) === 12 /* CatDetectChanges */) {\n                    checkNoChangesView(view);\n                }\n                else if (viewState & 64 /* CheckProjectedViews */) {\n                    execProjectedViewsAction(view, ViewAction.CheckNoChangesProjectedViews);\n                }\n            }\n            break;\n        case ViewAction.CheckNoChangesProjectedViews:\n            if ((viewState & 128 /* Destroyed */) === 0) {\n                if (viewState & 32 /* CheckProjectedView */) {\n                    checkNoChangesView(view);\n                }\n                else if (viewState & 64 /* CheckProjectedViews */) {\n                    execProjectedViewsAction(view, action);\n                }\n            }\n            break;\n        case ViewAction.CheckAndUpdate:\n            if ((viewState & 128 /* Destroyed */) === 0) {\n                if ((viewState & 12 /* CatDetectChanges */) === 12 /* CatDetectChanges */) {\n                    checkAndUpdateView(view);\n                }\n                else if (viewState & 64 /* CheckProjectedViews */) {\n                    execProjectedViewsAction(view, ViewAction.CheckAndUpdateProjectedViews);\n                }\n            }\n            break;\n        case ViewAction.CheckAndUpdateProjectedViews:\n            if ((viewState & 128 /* Destroyed */) === 0) {\n                if (viewState & 32 /* CheckProjectedView */) {\n                    checkAndUpdateView(view);\n                }\n                else if (viewState & 64 /* CheckProjectedViews */) {\n                    execProjectedViewsAction(view, action);\n                }\n            }\n            break;\n        case ViewAction.Destroy:\n            // Note: destroyView recurses over all views,\n            // so we don't need to special case projected views here.\n            destroyView(view);\n            break;\n        case ViewAction.CreateViewNodes:\n            createViewNodes(view);\n            break;\n    }\n}\n/**\n * @param {?} view\n * @param {?} action\n * @return {?}\n */\nfunction execProjectedViewsAction(view, action) {\n    execEmbeddedViewsAction(view, action);\n    execComponentViewsAction(view, action);\n}\n/**\n * @param {?} view\n * @param {?} queryFlags\n * @param {?} staticDynamicQueryFlag\n * @param {?} checkType\n * @return {?}\n */\nfunction execQueriesAction(view, queryFlags, staticDynamicQueryFlag, checkType) {\n    if (!(view.def.nodeFlags & queryFlags) || !(view.def.nodeFlags & staticDynamicQueryFlag)) {\n        return;\n    }\n    var /** @type {?} */ nodeCount = view.def.nodes.length;\n    for (var /** @type {?} */ i = 0; i < nodeCount; i++) {\n        var /** @type {?} */ nodeDef = view.def.nodes[i];\n        if ((nodeDef.flags & queryFlags) && (nodeDef.flags & staticDynamicQueryFlag)) {\n            Services.setCurrentNode(view, nodeDef.nodeIndex);\n            switch (checkType) {\n                case 0 /* CheckAndUpdate */:\n                    checkAndUpdateQuery(view, nodeDef);\n                    break;\n                case 1 /* CheckNoChanges */:\n                    checkNoChangesQuery(view, nodeDef);\n                    break;\n            }\n        }\n        if (!(nodeDef.childFlags & queryFlags) || !(nodeDef.childFlags & staticDynamicQueryFlag)) {\n            // no child has a matching query\n            // then skip the children\n            i += nodeDef.childCount;\n        }\n    }\n}\n//# sourceMappingURL=view.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { isDevMode } from '../application_ref';\nimport { DebugElement, DebugNode, EventListener, getDebugNode, indexDebugNode, removeDebugNodeFromIndex } from '../debug/debug_node';\nimport { ErrorHandler } from '../error_handler';\nimport { RendererFactory2 } from '../render/api';\nimport { Sanitizer } from '../sanitization/security';\nimport { isViewDebugError, viewDestroyedError, viewWrappedDebugError } from './errors';\nimport { resolveDep } from './provider';\nimport { dirtyParentQueries, getQueryValue } from './query';\nimport { createInjector, createNgModuleRef, getComponentViewDefinitionFactory } from './refs';\nimport { Services, asElementData, asPureExpressionData } from './types';\nimport { NOOP, isComponentView, renderNode, resolveDefinition, splitDepsDsl, viewParentEl } from './util';\nimport { checkAndUpdateNode, checkAndUpdateView, checkNoChangesNode, checkNoChangesView, createComponentView, createEmbeddedView, createRootView, destroyView } from './view';\nvar /** @type {?} */ initialized = false;\n/**\n * @return {?}\n */\nexport function initServicesIfNeeded() {\n    if (initialized) {\n        return;\n    }\n    initialized = true;\n    var /** @type {?} */ services = isDevMode() ? createDebugServices() : createProdServices();\n    Services.setCurrentNode = services.setCurrentNode;\n    Services.createRootView = services.createRootView;\n    Services.createEmbeddedView = services.createEmbeddedView;\n    Services.createComponentView = services.createComponentView;\n    Services.createNgModuleRef = services.createNgModuleRef;\n    Services.overrideProvider = services.overrideProvider;\n    Services.overrideComponentView = services.overrideComponentView;\n    Services.clearOverrides = services.clearOverrides;\n    Services.checkAndUpdateView = services.checkAndUpdateView;\n    Services.checkNoChangesView = services.checkNoChangesView;\n    Services.destroyView = services.destroyView;\n    Services.resolveDep = resolveDep;\n    Services.createDebugContext = services.createDebugContext;\n    Services.handleEvent = services.handleEvent;\n    Services.updateDirectives = services.updateDirectives;\n    Services.updateRenderer = services.updateRenderer;\n    Services.dirtyParentQueries = dirtyParentQueries;\n}\n/**\n * @return {?}\n */\nfunction createProdServices() {\n    return {\n        setCurrentNode: function () { },\n        createRootView: createProdRootView,\n        createEmbeddedView: createEmbeddedView,\n        createComponentView: createComponentView,\n        createNgModuleRef: createNgModuleRef,\n        overrideProvider: NOOP,\n        overrideComponentView: NOOP,\n        clearOverrides: NOOP,\n        checkAndUpdateView: checkAndUpdateView,\n        checkNoChangesView: checkNoChangesView,\n        destroyView: destroyView,\n        createDebugContext: function (view, nodeIndex) { return new DebugContext_(view, nodeIndex); },\n        handleEvent: function (view, nodeIndex, eventName, event) {\n            return view.def.handleEvent(view, nodeIndex, eventName, event);\n        },\n        updateDirectives: function (view, checkType) {\n            return view.def.updateDirectives(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode :\n                prodCheckNoChangesNode, view);\n        },\n        updateRenderer: function (view, checkType) {\n            return view.def.updateRenderer(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode :\n                prodCheckNoChangesNode, view);\n        },\n    };\n}\n/**\n * @return {?}\n */\nfunction createDebugServices() {\n    return {\n        setCurrentNode: debugSetCurrentNode,\n        createRootView: debugCreateRootView,\n        createEmbeddedView: debugCreateEmbeddedView,\n        createComponentView: debugCreateComponentView,\n        createNgModuleRef: debugCreateNgModuleRef,\n        overrideProvider: debugOverrideProvider,\n        overrideComponentView: debugOverrideComponentView,\n        clearOverrides: debugClearOverrides,\n        checkAndUpdateView: debugCheckAndUpdateView,\n        checkNoChangesView: debugCheckNoChangesView,\n        destroyView: debugDestroyView,\n        createDebugContext: function (view, nodeIndex) { return new DebugContext_(view, nodeIndex); },\n        handleEvent: debugHandleEvent,\n        updateDirectives: debugUpdateDirectives,\n        updateRenderer: debugUpdateRenderer,\n    };\n}\n/**\n * @param {?} elInjector\n * @param {?} projectableNodes\n * @param {?} rootSelectorOrNode\n * @param {?} def\n * @param {?} ngModule\n * @param {?=} context\n * @return {?}\n */\nfunction createProdRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {\n    var /** @type {?} */ rendererFactory = ngModule.injector.get(RendererFactory2);\n    return createRootView(createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode), def, context);\n}\n/**\n * @param {?} elInjector\n * @param {?} projectableNodes\n * @param {?} rootSelectorOrNode\n * @param {?} def\n * @param {?} ngModule\n * @param {?=} context\n * @return {?}\n */\nfunction debugCreateRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {\n    var /** @type {?} */ rendererFactory = ngModule.injector.get(RendererFactory2);\n    var /** @type {?} */ root = createRootData(elInjector, ngModule, new DebugRendererFactory2(rendererFactory), projectableNodes, rootSelectorOrNode);\n    var /** @type {?} */ defWithOverride = applyProviderOverridesToView(def);\n    return callWithDebugContext(DebugAction.create, createRootView, null, [root, defWithOverride, context]);\n}\n/**\n * @param {?} elInjector\n * @param {?} ngModule\n * @param {?} rendererFactory\n * @param {?} projectableNodes\n * @param {?} rootSelectorOrNode\n * @return {?}\n */\nfunction createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode) {\n    var /** @type {?} */ sanitizer = ngModule.injector.get(Sanitizer);\n    var /** @type {?} */ errorHandler = ngModule.injector.get(ErrorHandler);\n    var /** @type {?} */ renderer = rendererFactory.createRenderer(null, null);\n    return {\n        ngModule: ngModule,\n        injector: elInjector, projectableNodes: projectableNodes,\n        selectorOrNode: rootSelectorOrNode, sanitizer: sanitizer, rendererFactory: rendererFactory, renderer: renderer, errorHandler: errorHandler\n    };\n}\n/**\n * @param {?} parentView\n * @param {?} anchorDef\n * @param {?} viewDef\n * @param {?=} context\n * @return {?}\n */\nfunction debugCreateEmbeddedView(parentView, anchorDef, viewDef, context) {\n    var /** @type {?} */ defWithOverride = applyProviderOverridesToView(viewDef);\n    return callWithDebugContext(DebugAction.create, createEmbeddedView, null, [parentView, anchorDef, defWithOverride, context]);\n}\n/**\n * @param {?} parentView\n * @param {?} nodeDef\n * @param {?} viewDef\n * @param {?} hostElement\n * @return {?}\n */\nfunction debugCreateComponentView(parentView, nodeDef, viewDef, hostElement) {\n    var /** @type {?} */ overrideComponentView = viewDefOverrides.get(/** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ ((nodeDef.element)).componentProvider)).provider)).token);\n    if (overrideComponentView) {\n        viewDef = overrideComponentView;\n    }\n    else {\n        viewDef = applyProviderOverridesToView(viewDef);\n    }\n    return callWithDebugContext(DebugAction.create, createComponentView, null, [parentView, nodeDef, viewDef, hostElement]);\n}\n/**\n * @param {?} moduleType\n * @param {?} parentInjector\n * @param {?} bootstrapComponents\n * @param {?} def\n * @return {?}\n */\nfunction debugCreateNgModuleRef(moduleType, parentInjector, bootstrapComponents, def) {\n    var /** @type {?} */ defWithOverride = applyProviderOverridesToNgModule(def);\n    return createNgModuleRef(moduleType, parentInjector, bootstrapComponents, defWithOverride);\n}\nvar /** @type {?} */ providerOverrides = new Map();\nvar /** @type {?} */ viewDefOverrides = new Map();\n/**\n * @param {?} override\n * @return {?}\n */\nfunction debugOverrideProvider(override) {\n    providerOverrides.set(override.token, override);\n}\n/**\n * @param {?} comp\n * @param {?} compFactory\n * @return {?}\n */\nfunction debugOverrideComponentView(comp, compFactory) {\n    var /** @type {?} */ hostViewDef = resolveDefinition(getComponentViewDefinitionFactory(compFactory));\n    var /** @type {?} */ compViewDef = resolveDefinition(/** @type {?} */ ((/** @type {?} */ ((hostViewDef.nodes[0].element)).componentView)));\n    viewDefOverrides.set(comp, compViewDef);\n}\n/**\n * @return {?}\n */\nfunction debugClearOverrides() {\n    providerOverrides.clear();\n    viewDefOverrides.clear();\n}\n/**\n * @param {?} def\n * @return {?}\n */\nfunction applyProviderOverridesToView(def) {\n    if (providerOverrides.size === 0) {\n        return def;\n    }\n    var /** @type {?} */ elementIndicesWithOverwrittenProviders = findElementIndicesWithOverwrittenProviders(def);\n    if (elementIndicesWithOverwrittenProviders.length === 0) {\n        return def;\n    }\n    // clone the whole view definition,\n    // as it maintains references between the nodes that are hard to update.\n    def = /** @type {?} */ ((def.factory))(function () { return NOOP; });\n    for (var /** @type {?} */ i = 0; i < elementIndicesWithOverwrittenProviders.length; i++) {\n        applyProviderOverridesToElement(def, elementIndicesWithOverwrittenProviders[i]);\n    }\n    return def;\n    /**\n     * @param {?} def\n     * @return {?}\n     */\n    function findElementIndicesWithOverwrittenProviders(def) {\n        var /** @type {?} */ elIndicesWithOverwrittenProviders = [];\n        var /** @type {?} */ lastElementDef = null;\n        for (var /** @type {?} */ i = 0; i < def.nodes.length; i++) {\n            var /** @type {?} */ nodeDef = def.nodes[i];\n            if (nodeDef.flags & 1 /* TypeElement */) {\n                lastElementDef = nodeDef;\n            }\n            if (lastElementDef && nodeDef.flags & 3840 /* CatProviderNoDirective */ &&\n                providerOverrides.has(/** @type {?} */ ((nodeDef.provider)).token)) {\n                elIndicesWithOverwrittenProviders.push(/** @type {?} */ ((lastElementDef)).nodeIndex);\n                lastElementDef = null;\n            }\n        }\n        return elIndicesWithOverwrittenProviders;\n    }\n    /**\n     * @param {?} viewDef\n     * @param {?} elIndex\n     * @return {?}\n     */\n    function applyProviderOverridesToElement(viewDef, elIndex) {\n        for (var /** @type {?} */ i = elIndex + 1; i < viewDef.nodes.length; i++) {\n            var /** @type {?} */ nodeDef = viewDef.nodes[i];\n            if (nodeDef.flags & 1 /* TypeElement */) {\n                // stop at the next element\n                return;\n            }\n            if (nodeDef.flags & 3840 /* CatProviderNoDirective */) {\n                var /** @type {?} */ provider = /** @type {?} */ ((nodeDef.provider));\n                var /** @type {?} */ override = providerOverrides.get(provider.token);\n                if (override) {\n                    nodeDef.flags = (nodeDef.flags & ~3840 /* CatProviderNoDirective */) | override.flags;\n                    provider.deps = splitDepsDsl(override.deps);\n                    provider.value = override.value;\n                }\n            }\n        }\n    }\n}\n/**\n * @param {?} def\n * @return {?}\n */\nfunction applyProviderOverridesToNgModule(def) {\n    var _a = calcHasOverrides(def), hasOverrides = _a.hasOverrides, hasDeprecatedOverrides = _a.hasDeprecatedOverrides;\n    if (!hasOverrides) {\n        return def;\n    }\n    // clone the whole view definition,\n    // as it maintains references between the nodes that are hard to update.\n    def = /** @type {?} */ ((def.factory))(function () { return NOOP; });\n    applyProviderOverrides(def);\n    return def;\n    /**\n     * @param {?} def\n     * @return {?}\n     */\n    function calcHasOverrides(def) {\n        var /** @type {?} */ hasOverrides = false;\n        var /** @type {?} */ hasDeprecatedOverrides = false;\n        if (providerOverrides.size === 0) {\n            return { hasOverrides: hasOverrides, hasDeprecatedOverrides: hasDeprecatedOverrides };\n        }\n        def.providers.forEach(function (node) {\n            var /** @type {?} */ override = providerOverrides.get(node.token);\n            if ((node.flags & 3840 /* CatProviderNoDirective */) && override) {\n                hasOverrides = true;\n                hasDeprecatedOverrides = hasDeprecatedOverrides || override.deprecatedBehavior;\n            }\n        });\n        return { hasOverrides: hasOverrides, hasDeprecatedOverrides: hasDeprecatedOverrides };\n    }\n    /**\n     * @param {?} def\n     * @return {?}\n     */\n    function applyProviderOverrides(def) {\n        for (var /** @type {?} */ i = 0; i < def.providers.length; i++) {\n            var /** @type {?} */ provider = def.providers[i];\n            if (hasDeprecatedOverrides) {\n                // We had a bug where me made\n                // all providers lazy. Keep this logic behind a flag\n                // for migrating existing users.\n                provider.flags |= 4096 /* LazyProvider */;\n            }\n            var /** @type {?} */ override = providerOverrides.get(provider.token);\n            if (override) {\n                provider.flags = (provider.flags & ~3840 /* CatProviderNoDirective */) | override.flags;\n                provider.deps = splitDepsDsl(override.deps);\n                provider.value = override.value;\n            }\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} checkIndex\n * @param {?} argStyle\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nfunction prodCheckAndUpdateNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    var /** @type {?} */ nodeDef = view.def.nodes[checkIndex];\n    checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    return (nodeDef.flags & 224 /* CatPureExpression */) ?\n        asPureExpressionData(view, checkIndex).value :\n        undefined;\n}\n/**\n * @param {?} view\n * @param {?} checkIndex\n * @param {?} argStyle\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nfunction prodCheckNoChangesNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    var /** @type {?} */ nodeDef = view.def.nodes[checkIndex];\n    checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    return (nodeDef.flags & 224 /* CatPureExpression */) ?\n        asPureExpressionData(view, checkIndex).value :\n        undefined;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction debugCheckAndUpdateView(view) {\n    return callWithDebugContext(DebugAction.detectChanges, checkAndUpdateView, null, [view]);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction debugCheckNoChangesView(view) {\n    return callWithDebugContext(DebugAction.checkNoChanges, checkNoChangesView, null, [view]);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction debugDestroyView(view) {\n    return callWithDebugContext(DebugAction.destroy, destroyView, null, [view]);\n}\n/** @enum {number} */\nvar DebugAction = {\n    create: 0,\n    detectChanges: 1,\n    checkNoChanges: 2,\n    destroy: 3,\n    handleEvent: 4,\n};\nDebugAction[DebugAction.create] = \"create\";\nDebugAction[DebugAction.detectChanges] = \"detectChanges\";\nDebugAction[DebugAction.checkNoChanges] = \"checkNoChanges\";\nDebugAction[DebugAction.destroy] = \"destroy\";\nDebugAction[DebugAction.handleEvent] = \"handleEvent\";\nvar /** @type {?} */ _currentAction;\nvar /** @type {?} */ _currentView;\nvar /** @type {?} */ _currentNodeIndex;\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @return {?}\n */\nfunction debugSetCurrentNode(view, nodeIndex) {\n    _currentView = view;\n    _currentNodeIndex = nodeIndex;\n}\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @param {?} eventName\n * @param {?} event\n * @return {?}\n */\nfunction debugHandleEvent(view, nodeIndex, eventName, event) {\n    debugSetCurrentNode(view, nodeIndex);\n    return callWithDebugContext(DebugAction.handleEvent, view.def.handleEvent, null, [view, nodeIndex, eventName, event]);\n}\n/**\n * @param {?} view\n * @param {?} checkType\n * @return {?}\n */\nfunction debugUpdateDirectives(view, checkType) {\n    if (view.state & 128 /* Destroyed */) {\n        throw viewDestroyedError(DebugAction[_currentAction]);\n    }\n    debugSetCurrentNode(view, nextDirectiveWithBinding(view, 0));\n    return view.def.updateDirectives(debugCheckDirectivesFn, view);\n    /**\n     * @param {?} view\n     * @param {?} nodeIndex\n     * @param {?} argStyle\n     * @param {...?} values\n     * @return {?}\n     */\n    function debugCheckDirectivesFn(view, nodeIndex, argStyle) {\n        var values = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            values[_i - 3] = arguments[_i];\n        }\n        var /** @type {?} */ nodeDef = view.def.nodes[nodeIndex];\n        if (checkType === 0 /* CheckAndUpdate */) {\n            debugCheckAndUpdateNode(view, nodeDef, argStyle, values);\n        }\n        else {\n            debugCheckNoChangesNode(view, nodeDef, argStyle, values);\n        }\n        if (nodeDef.flags & 16384 /* TypeDirective */) {\n            debugSetCurrentNode(view, nextDirectiveWithBinding(view, nodeIndex));\n        }\n        return (nodeDef.flags & 224 /* CatPureExpression */) ?\n            asPureExpressionData(view, nodeDef.nodeIndex).value :\n            undefined;\n    }\n}\n/**\n * @param {?} view\n * @param {?} checkType\n * @return {?}\n */\nfunction debugUpdateRenderer(view, checkType) {\n    if (view.state & 128 /* Destroyed */) {\n        throw viewDestroyedError(DebugAction[_currentAction]);\n    }\n    debugSetCurrentNode(view, nextRenderNodeWithBinding(view, 0));\n    return view.def.updateRenderer(debugCheckRenderNodeFn, view);\n    /**\n     * @param {?} view\n     * @param {?} nodeIndex\n     * @param {?} argStyle\n     * @param {...?} values\n     * @return {?}\n     */\n    function debugCheckRenderNodeFn(view, nodeIndex, argStyle) {\n        var values = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            values[_i - 3] = arguments[_i];\n        }\n        var /** @type {?} */ nodeDef = view.def.nodes[nodeIndex];\n        if (checkType === 0 /* CheckAndUpdate */) {\n            debugCheckAndUpdateNode(view, nodeDef, argStyle, values);\n        }\n        else {\n            debugCheckNoChangesNode(view, nodeDef, argStyle, values);\n        }\n        if (nodeDef.flags & 3 /* CatRenderNode */) {\n            debugSetCurrentNode(view, nextRenderNodeWithBinding(view, nodeIndex));\n        }\n        return (nodeDef.flags & 224 /* CatPureExpression */) ?\n            asPureExpressionData(view, nodeDef.nodeIndex).value :\n            undefined;\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} argStyle\n * @param {?} givenValues\n * @return {?}\n */\nfunction debugCheckAndUpdateNode(view, nodeDef, argStyle, givenValues) {\n    var /** @type {?} */ changed = (/** @type {?} */ (checkAndUpdateNode)).apply(void 0, [view, nodeDef, argStyle].concat(givenValues));\n    if (changed) {\n        var /** @type {?} */ values = argStyle === 1 /* Dynamic */ ? givenValues[0] : givenValues;\n        if (nodeDef.flags & 16384 /* TypeDirective */) {\n            var /** @type {?} */ bindingValues = {};\n            for (var /** @type {?} */ i = 0; i < nodeDef.bindings.length; i++) {\n                var /** @type {?} */ binding = nodeDef.bindings[i];\n                var /** @type {?} */ value = values[i];\n                if (binding.flags & 8 /* TypeProperty */) {\n                    bindingValues[normalizeDebugBindingName(/** @type {?} */ ((binding.nonMinifiedName)))] =\n                        normalizeDebugBindingValue(value);\n                }\n            }\n            var /** @type {?} */ elDef = /** @type {?} */ ((nodeDef.parent));\n            var /** @type {?} */ el = asElementData(view, elDef.nodeIndex).renderElement;\n            if (!/** @type {?} */ ((elDef.element)).name) {\n                // a comment.\n                view.renderer.setValue(el, \"bindings=\" + JSON.stringify(bindingValues, null, 2));\n            }\n            else {\n                // a regular element.\n                for (var /** @type {?} */ attr in bindingValues) {\n                    var /** @type {?} */ value = bindingValues[attr];\n                    if (value != null) {\n                        view.renderer.setAttribute(el, attr, value);\n                    }\n                    else {\n                        view.renderer.removeAttribute(el, attr);\n                    }\n                }\n            }\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} argStyle\n * @param {?} values\n * @return {?}\n */\nfunction debugCheckNoChangesNode(view, nodeDef, argStyle, values) {\n    (/** @type {?} */ (checkNoChangesNode)).apply(void 0, [view, nodeDef, argStyle].concat(values));\n}\n/**\n * @param {?} name\n * @return {?}\n */\nfunction normalizeDebugBindingName(name) {\n    // Attribute names with `$` (eg `x-y$`) are valid per spec, but unsupported by some browsers\n    name = camelCaseToDashCase(name.replace(/[$@]/g, '_'));\n    return \"ng-reflect-\" + name;\n}\nvar /** @type {?} */ CAMEL_CASE_REGEXP = /([A-Z])/g;\n/**\n * @param {?} input\n * @return {?}\n */\nfunction camelCaseToDashCase(input) {\n    return input.replace(CAMEL_CASE_REGEXP, function () {\n        var m = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            m[_i] = arguments[_i];\n        }\n        return '-' + m[1].toLowerCase();\n    });\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction normalizeDebugBindingValue(value) {\n    try {\n        // Limit the size of the value as otherwise the DOM just gets polluted.\n        return value != null ? value.toString().slice(0, 30) : value;\n    }\n    catch (/** @type {?} */ e) {\n        return '[ERROR] Exception while trying to serialize the value';\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @return {?}\n */\nfunction nextDirectiveWithBinding(view, nodeIndex) {\n    for (var /** @type {?} */ i = nodeIndex; i < view.def.nodes.length; i++) {\n        var /** @type {?} */ nodeDef = view.def.nodes[i];\n        if (nodeDef.flags & 16384 /* TypeDirective */ && nodeDef.bindings && nodeDef.bindings.length) {\n            return i;\n        }\n    }\n    return null;\n}\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @return {?}\n */\nfunction nextRenderNodeWithBinding(view, nodeIndex) {\n    for (var /** @type {?} */ i = nodeIndex; i < view.def.nodes.length; i++) {\n        var /** @type {?} */ nodeDef = view.def.nodes[i];\n        if ((nodeDef.flags & 3 /* CatRenderNode */) && nodeDef.bindings && nodeDef.bindings.length) {\n            return i;\n        }\n    }\n    return null;\n}\nvar DebugContext_ = /** @class */ (function () {\n    function DebugContext_(view, nodeIndex) {\n        this.view = view;\n        this.nodeIndex = nodeIndex;\n        if (nodeIndex == null) {\n            this.nodeIndex = nodeIndex = 0;\n        }\n        this.nodeDef = view.def.nodes[nodeIndex];\n        var /** @type {?} */ elDef = this.nodeDef;\n        var /** @type {?} */ elView = view;\n        while (elDef && (elDef.flags & 1 /* TypeElement */) === 0) {\n            elDef = /** @type {?} */ ((elDef.parent));\n        }\n        if (!elDef) {\n            while (!elDef && elView) {\n                elDef = /** @type {?} */ ((viewParentEl(elView)));\n                elView = /** @type {?} */ ((elView.parent));\n            }\n        }\n        this.elDef = elDef;\n        this.elView = elView;\n    }\n    Object.defineProperty(DebugContext_.prototype, \"elOrCompView\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            // Has to be done lazily as we use the DebugContext also during creation of elements...\n            return asElementData(this.elView, this.elDef.nodeIndex).componentView || this.view;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"injector\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return createInjector(this.elView, this.elDef); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"component\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.elOrCompView.component; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"context\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.elOrCompView.context; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"providerTokens\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            var /** @type {?} */ tokens = [];\n            if (this.elDef) {\n                for (var /** @type {?} */ i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {\n                    var /** @type {?} */ childDef = this.elView.def.nodes[i];\n                    if (childDef.flags & 20224 /* CatProvider */) {\n                        tokens.push(/** @type {?} */ ((childDef.provider)).token);\n                    }\n                    i += childDef.childCount;\n                }\n            }\n            return tokens;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"references\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            var /** @type {?} */ references = {};\n            if (this.elDef) {\n                collectReferences(this.elView, this.elDef, references);\n                for (var /** @type {?} */ i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {\n                    var /** @type {?} */ childDef = this.elView.def.nodes[i];\n                    if (childDef.flags & 20224 /* CatProvider */) {\n                        collectReferences(this.elView, childDef, references);\n                    }\n                    i += childDef.childCount;\n                }\n            }\n            return references;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"componentRenderElement\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            var /** @type {?} */ elData = findHostElement(this.elOrCompView);\n            return elData ? elData.renderElement : undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"renderNode\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this.nodeDef.flags & 2 /* TypeText */ ? renderNode(this.view, this.nodeDef) :\n                renderNode(this.elView, this.elDef);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} console\n     * @param {...?} values\n     * @return {?}\n     */\n    DebugContext_.prototype.logError = /**\n     * @param {?} console\n     * @param {...?} values\n     * @return {?}\n     */\n    function (console) {\n        var values = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            values[_i - 1] = arguments[_i];\n        }\n        var /** @type {?} */ logViewDef;\n        var /** @type {?} */ logNodeIndex;\n        if (this.nodeDef.flags & 2 /* TypeText */) {\n            logViewDef = this.view.def;\n            logNodeIndex = this.nodeDef.nodeIndex;\n        }\n        else {\n            logViewDef = this.elView.def;\n            logNodeIndex = this.elDef.nodeIndex;\n        }\n        // Note: we only generate a log function for text and element nodes\n        // to make the generated code as small as possible.\n        var /** @type {?} */ renderNodeIndex = getRenderNodeIndex(logViewDef, logNodeIndex);\n        var /** @type {?} */ currRenderNodeIndex = -1;\n        var /** @type {?} */ nodeLogger = function () {\n            currRenderNodeIndex++;\n            if (currRenderNodeIndex === renderNodeIndex) {\n                return (_a = console.error).bind.apply(_a, [console].concat(values));\n            }\n            else {\n                return NOOP;\n            }\n            var _a;\n        }; /** @type {?} */\n        ((logViewDef.factory))(nodeLogger);\n        if (currRenderNodeIndex < renderNodeIndex) {\n            console.error('Illegal state: the ViewDefinitionFactory did not call the logger!');\n            console.error.apply(console, values);\n        }\n    };\n    return DebugContext_;\n}());\nfunction DebugContext__tsickle_Closure_declarations() {\n    /** @type {?} */\n    DebugContext_.prototype.nodeDef;\n    /** @type {?} */\n    DebugContext_.prototype.elView;\n    /** @type {?} */\n    DebugContext_.prototype.elDef;\n    /** @type {?} */\n    DebugContext_.prototype.view;\n    /** @type {?} */\n    DebugContext_.prototype.nodeIndex;\n}\n/**\n * @param {?} viewDef\n * @param {?} nodeIndex\n * @return {?}\n */\nfunction getRenderNodeIndex(viewDef, nodeIndex) {\n    var /** @type {?} */ renderNodeIndex = -1;\n    for (var /** @type {?} */ i = 0; i <= nodeIndex; i++) {\n        var /** @type {?} */ nodeDef = viewDef.nodes[i];\n        if (nodeDef.flags & 3 /* CatRenderNode */) {\n            renderNodeIndex++;\n        }\n    }\n    return renderNodeIndex;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction findHostElement(view) {\n    while (view && !isComponentView(view)) {\n        view = /** @type {?} */ ((view.parent));\n    }\n    if (view.parent) {\n        return asElementData(view.parent, /** @type {?} */ ((viewParentEl(view))).nodeIndex);\n    }\n    return null;\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} references\n * @return {?}\n */\nfunction collectReferences(view, nodeDef, references) {\n    for (var /** @type {?} */ refName in nodeDef.references) {\n        references[refName] = getQueryValue(view, nodeDef, nodeDef.references[refName]);\n    }\n}\n/**\n * @param {?} action\n * @param {?} fn\n * @param {?} self\n * @param {?} args\n * @return {?}\n */\nfunction callWithDebugContext(action, fn, self, args) {\n    var /** @type {?} */ oldAction = _currentAction;\n    var /** @type {?} */ oldView = _currentView;\n    var /** @type {?} */ oldNodeIndex = _currentNodeIndex;\n    try {\n        _currentAction = action;\n        var /** @type {?} */ result = fn.apply(self, args);\n        _currentView = oldView;\n        _currentNodeIndex = oldNodeIndex;\n        _currentAction = oldAction;\n        return result;\n    }\n    catch (/** @type {?} */ e) {\n        if (isViewDebugError(e) || !_currentView) {\n            throw e;\n        }\n        throw viewWrappedDebugError(e, /** @type {?} */ ((getCurrentDebugContext())));\n    }\n}\n/**\n * @return {?}\n */\nexport function getCurrentDebugContext() {\n    return _currentView ? new DebugContext_(_currentView, _currentNodeIndex) : null;\n}\nvar DebugRendererFactory2 = /** @class */ (function () {\n    function DebugRendererFactory2(delegate) {\n        this.delegate = delegate;\n    }\n    /**\n     * @param {?} element\n     * @param {?} renderData\n     * @return {?}\n     */\n    DebugRendererFactory2.prototype.createRenderer = /**\n     * @param {?} element\n     * @param {?} renderData\n     * @return {?}\n     */\n    function (element, renderData) {\n        return new DebugRenderer2(this.delegate.createRenderer(element, renderData));\n    };\n    /**\n     * @return {?}\n     */\n    DebugRendererFactory2.prototype.begin = /**\n     * @return {?}\n     */\n    function () {\n        if (this.delegate.begin) {\n            this.delegate.begin();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DebugRendererFactory2.prototype.end = /**\n     * @return {?}\n     */\n    function () {\n        if (this.delegate.end) {\n            this.delegate.end();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DebugRendererFactory2.prototype.whenRenderingDone = /**\n     * @return {?}\n     */\n    function () {\n        if (this.delegate.whenRenderingDone) {\n            return this.delegate.whenRenderingDone();\n        }\n        return Promise.resolve(null);\n    };\n    return DebugRendererFactory2;\n}());\nfunction DebugRendererFactory2_tsickle_Closure_declarations() {\n    /** @type {?} */\n    DebugRendererFactory2.prototype.delegate;\n}\nvar DebugRenderer2 = /** @class */ (function () {\n    function DebugRenderer2(delegate) {\n        this.delegate = delegate;\n        this.data = this.delegate.data;\n    }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    DebugRenderer2.prototype.destroyNode = /**\n     * @param {?} node\n     * @return {?}\n     */\n    function (node) {\n        removeDebugNodeFromIndex(/** @type {?} */ ((getDebugNode(node))));\n        if (this.delegate.destroyNode) {\n            this.delegate.destroyNode(node);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DebugRenderer2.prototype.destroy = /**\n     * @return {?}\n     */\n    function () { this.delegate.destroy(); };\n    /**\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    DebugRenderer2.prototype.createElement = /**\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    function (name, namespace) {\n        var /** @type {?} */ el = this.delegate.createElement(name, namespace);\n        var /** @type {?} */ debugCtx = getCurrentDebugContext();\n        if (debugCtx) {\n            var /** @type {?} */ debugEl = new DebugElement(el, null, debugCtx);\n            debugEl.name = name;\n            indexDebugNode(debugEl);\n        }\n        return el;\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    DebugRenderer2.prototype.createComment = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        var /** @type {?} */ comment = this.delegate.createComment(value);\n        var /** @type {?} */ debugCtx = getCurrentDebugContext();\n        if (debugCtx) {\n            indexDebugNode(new DebugNode(comment, null, debugCtx));\n        }\n        return comment;\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    DebugRenderer2.prototype.createText = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        var /** @type {?} */ text = this.delegate.createText(value);\n        var /** @type {?} */ debugCtx = getCurrentDebugContext();\n        if (debugCtx) {\n            indexDebugNode(new DebugNode(text, null, debugCtx));\n        }\n        return text;\n    };\n    /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @return {?}\n     */\n    DebugRenderer2.prototype.appendChild = /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @return {?}\n     */\n    function (parent, newChild) {\n        var /** @type {?} */ debugEl = getDebugNode(parent);\n        var /** @type {?} */ debugChildEl = getDebugNode(newChild);\n        if (debugEl && debugChildEl && debugEl instanceof DebugElement) {\n            debugEl.addChild(debugChildEl);\n        }\n        this.delegate.appendChild(parent, newChild);\n    };\n    /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @param {?} refChild\n     * @return {?}\n     */\n    DebugRenderer2.prototype.insertBefore = /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @param {?} refChild\n     * @return {?}\n     */\n    function (parent, newChild, refChild) {\n        var /** @type {?} */ debugEl = getDebugNode(parent);\n        var /** @type {?} */ debugChildEl = getDebugNode(newChild);\n        var /** @type {?} */ debugRefEl = /** @type {?} */ ((getDebugNode(refChild)));\n        if (debugEl && debugChildEl && debugEl instanceof DebugElement) {\n            debugEl.insertBefore(debugRefEl, debugChildEl);\n        }\n        this.delegate.insertBefore(parent, newChild, refChild);\n    };\n    /**\n     * @param {?} parent\n     * @param {?} oldChild\n     * @return {?}\n     */\n    DebugRenderer2.prototype.removeChild = /**\n     * @param {?} parent\n     * @param {?} oldChild\n     * @return {?}\n     */\n    function (parent, oldChild) {\n        var /** @type {?} */ debugEl = getDebugNode(parent);\n        var /** @type {?} */ debugChildEl = getDebugNode(oldChild);\n        if (debugEl && debugChildEl && debugEl instanceof DebugElement) {\n            debugEl.removeChild(debugChildEl);\n        }\n        this.delegate.removeChild(parent, oldChild);\n    };\n    /**\n     * @param {?} selectorOrNode\n     * @return {?}\n     */\n    DebugRenderer2.prototype.selectRootElement = /**\n     * @param {?} selectorOrNode\n     * @return {?}\n     */\n    function (selectorOrNode) {\n        var /** @type {?} */ el = this.delegate.selectRootElement(selectorOrNode);\n        var /** @type {?} */ debugCtx = getCurrentDebugContext();\n        if (debugCtx) {\n            indexDebugNode(new DebugElement(el, null, debugCtx));\n        }\n        return el;\n    };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @param {?=} namespace\n     * @return {?}\n     */\n    DebugRenderer2.prototype.setAttribute = /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @param {?=} namespace\n     * @return {?}\n     */\n    function (el, name, value, namespace) {\n        var /** @type {?} */ debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement) {\n            var /** @type {?} */ fullName = namespace ? namespace + ':' + name : name;\n            debugEl.attributes[fullName] = value;\n        }\n        this.delegate.setAttribute(el, name, value, namespace);\n    };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    DebugRenderer2.prototype.removeAttribute = /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    function (el, name, namespace) {\n        var /** @type {?} */ debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement) {\n            var /** @type {?} */ fullName = namespace ? namespace + ':' + name : name;\n            debugEl.attributes[fullName] = null;\n        }\n        this.delegate.removeAttribute(el, name, namespace);\n    };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    DebugRenderer2.prototype.addClass = /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    function (el, name) {\n        var /** @type {?} */ debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement) {\n            debugEl.classes[name] = true;\n        }\n        this.delegate.addClass(el, name);\n    };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    DebugRenderer2.prototype.removeClass = /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    function (el, name) {\n        var /** @type {?} */ debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement) {\n            debugEl.classes[name] = false;\n        }\n        this.delegate.removeClass(el, name);\n    };\n    /**\n     * @param {?} el\n     * @param {?} style\n     * @param {?} value\n     * @param {?} flags\n     * @return {?}\n     */\n    DebugRenderer2.prototype.setStyle = /**\n     * @param {?} el\n     * @param {?} style\n     * @param {?} value\n     * @param {?} flags\n     * @return {?}\n     */\n    function (el, style, value, flags) {\n        var /** @type {?} */ debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement) {\n            debugEl.styles[style] = value;\n        }\n        this.delegate.setStyle(el, style, value, flags);\n    };\n    /**\n     * @param {?} el\n     * @param {?} style\n     * @param {?} flags\n     * @return {?}\n     */\n    DebugRenderer2.prototype.removeStyle = /**\n     * @param {?} el\n     * @param {?} style\n     * @param {?} flags\n     * @return {?}\n     */\n    function (el, style, flags) {\n        var /** @type {?} */ debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement) {\n            debugEl.styles[style] = null;\n        }\n        this.delegate.removeStyle(el, style, flags);\n    };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    DebugRenderer2.prototype.setProperty = /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    function (el, name, value) {\n        var /** @type {?} */ debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement) {\n            debugEl.properties[name] = value;\n        }\n        this.delegate.setProperty(el, name, value);\n    };\n    /**\n     * @param {?} target\n     * @param {?} eventName\n     * @param {?} callback\n     * @return {?}\n     */\n    DebugRenderer2.prototype.listen = /**\n     * @param {?} target\n     * @param {?} eventName\n     * @param {?} callback\n     * @return {?}\n     */\n    function (target, eventName, callback) {\n        if (typeof target !== 'string') {\n            var /** @type {?} */ debugEl = getDebugNode(target);\n            if (debugEl) {\n                debugEl.listeners.push(new EventListener(eventName, callback));\n            }\n        }\n        return this.delegate.listen(target, eventName, callback);\n    };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    DebugRenderer2.prototype.parentNode = /**\n     * @param {?} node\n     * @return {?}\n     */\n    function (node) { return this.delegate.parentNode(node); };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    DebugRenderer2.prototype.nextSibling = /**\n     * @param {?} node\n     * @return {?}\n     */\n    function (node) { return this.delegate.nextSibling(node); };\n    /**\n     * @param {?} node\n     * @param {?} value\n     * @return {?}\n     */\n    DebugRenderer2.prototype.setValue = /**\n     * @param {?} node\n     * @param {?} value\n     * @return {?}\n     */\n    function (node, value) { return this.delegate.setValue(node, value); };\n    return DebugRenderer2;\n}());\nfunction DebugRenderer2_tsickle_Closure_declarations() {\n    /** @type {?} */\n    DebugRenderer2.prototype.data;\n    /** @type {?} */\n    DebugRenderer2.prototype.delegate;\n}\n//# sourceMappingURL=services.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { Injector } from '../di/injector';\nimport { NgModuleFactory } from '../linker/ng_module_factory';\nimport { initServicesIfNeeded } from './services';\nimport { Services } from './types';\nimport { resolveDefinition } from './util';\n/**\n * @param {?} override\n * @return {?}\n */\nexport function overrideProvider(override) {\n    initServicesIfNeeded();\n    return Services.overrideProvider(override);\n}\n/**\n * @param {?} comp\n * @param {?} componentFactory\n * @return {?}\n */\nexport function overrideComponentView(comp, componentFactory) {\n    initServicesIfNeeded();\n    return Services.overrideComponentView(comp, componentFactory);\n}\n/**\n * @return {?}\n */\nexport function clearOverrides() {\n    initServicesIfNeeded();\n    return Services.clearOverrides();\n}\n/**\n * @param {?} ngModuleType\n * @param {?} bootstrapComponents\n * @param {?} defFactory\n * @return {?}\n */\nexport function createNgModuleFactory(ngModuleType, bootstrapComponents, defFactory) {\n    return new NgModuleFactory_(ngModuleType, bootstrapComponents, defFactory);\n}\nvar NgModuleFactory_ = /** @class */ (function (_super) {\n    tslib_1.__extends(NgModuleFactory_, _super);\n    function NgModuleFactory_(moduleType, _bootstrapComponents, _ngModuleDefFactory) {\n        var _this = \n        // Attention: this ctor is called as top level function.\n        // Putting any logic in here will destroy closure tree shaking!\n        _super.call(this) || this;\n        _this.moduleType = moduleType;\n        _this._bootstrapComponents = _bootstrapComponents;\n        _this._ngModuleDefFactory = _ngModuleDefFactory;\n        return _this;\n    }\n    /**\n     * @param {?} parentInjector\n     * @return {?}\n     */\n    NgModuleFactory_.prototype.create = /**\n     * @param {?} parentInjector\n     * @return {?}\n     */\n    function (parentInjector) {\n        initServicesIfNeeded();\n        var /** @type {?} */ def = resolveDefinition(this._ngModuleDefFactory);\n        return Services.createNgModuleRef(this.moduleType, parentInjector || Injector.NULL, this._bootstrapComponents, def);\n    };\n    return NgModuleFactory_;\n}(NgModuleFactory));\nfunction NgModuleFactory__tsickle_Closure_declarations() {\n    /** @type {?} */\n    NgModuleFactory_.prototype.moduleType;\n    /** @type {?} */\n    NgModuleFactory_.prototype._bootstrapComponents;\n    /** @type {?} */\n    NgModuleFactory_.prototype._ngModuleDefFactory;\n}\n//# sourceMappingURL=entrypoint.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * If this is the first template pass, any ngOnInit or ngDoCheck hooks will be queued into\n * TView.initHooks during directiveCreate.\n *\n * The directive index and hook type are encoded into one number (1st bit: type, remaining bits:\n * directive index), then saved in the even indices of the initHooks array. The odd indices\n * hold the hook functions themselves.\n *\n * @param {?} index The index of the directive in LView.data\n * @param {?} onInit\n * @param {?} doCheck\n * @param {?} tView The current TView\n * @return {?}\n */\nexport function queueInitHooks(index, onInit, doCheck, tView) {\n    if (tView.firstTemplatePass === true) {\n        if (onInit != null) {\n            (tView.initHooks || (tView.initHooks = [])).push(index, onInit);\n        }\n        if (doCheck != null) {\n            (tView.initHooks || (tView.initHooks = [])).push(index, doCheck);\n            (tView.checkHooks || (tView.checkHooks = [])).push(index, doCheck);\n        }\n    }\n}\n/**\n * Loops through the directives on a node and queues all their hooks except ngOnInit\n * and ngDoCheck, which are queued separately in directiveCreate.\n * @param {?} flags\n * @param {?} currentView\n * @return {?}\n */\nexport function queueLifecycleHooks(flags, currentView) {\n    var /** @type {?} */ tView = currentView.tView;\n    if (tView.firstTemplatePass === true) {\n        var /** @type {?} */ size = (flags & 4092 /* SIZE_MASK */) >> 2 /* SIZE_SHIFT */;\n        var /** @type {?} */ start = flags >> 12 /* INDX_SHIFT */;\n        // It's necessary to loop through the directives at elementEnd() (rather than processing in\n        // directiveCreate) so we can preserve the current hook order. Content, view, and destroy\n        // hooks for projected components and directives must be called *before* their hosts.\n        for (var /** @type {?} */ i = start, /** @type {?} */ end = start + size; i < end; i++) {\n            var /** @type {?} */ def = (/** @type {?} */ (tView.data[i]));\n            queueContentHooks(def, tView, i);\n            queueViewHooks(def, tView, i);\n            queueDestroyHooks(def, tView, i);\n        }\n    }\n}\n/**\n * Queues afterContentInit and afterContentChecked hooks on TView\n * @param {?} def\n * @param {?} tView\n * @param {?} i\n * @return {?}\n */\nfunction queueContentHooks(def, tView, i) {\n    if (def.afterContentInit != null) {\n        (tView.contentHooks || (tView.contentHooks = [])).push(i, def.afterContentInit);\n    }\n    if (def.afterContentChecked != null) {\n        (tView.contentHooks || (tView.contentHooks = [])).push(i, def.afterContentChecked);\n        (tView.contentCheckHooks || (tView.contentCheckHooks = [])).push(i, def.afterContentChecked);\n    }\n}\n/**\n * Queues afterViewInit and afterViewChecked hooks on TView\n * @param {?} def\n * @param {?} tView\n * @param {?} i\n * @return {?}\n */\nfunction queueViewHooks(def, tView, i) {\n    if (def.afterViewInit != null) {\n        (tView.viewHooks || (tView.viewHooks = [])).push(i, def.afterViewInit);\n    }\n    if (def.afterViewChecked != null) {\n        (tView.viewHooks || (tView.viewHooks = [])).push(i, def.afterViewChecked);\n        (tView.viewCheckHooks || (tView.viewCheckHooks = [])).push(i, def.afterViewChecked);\n    }\n}\n/**\n * Queues onDestroy hooks on TView\n * @param {?} def\n * @param {?} tView\n * @param {?} i\n * @return {?}\n */\nfunction queueDestroyHooks(def, tView, i) {\n    if (def.onDestroy != null) {\n        (tView.destroyHooks || (tView.destroyHooks = [])).push(i, def.onDestroy);\n    }\n}\n/**\n * Calls onInit and doCheck calls if they haven't already been called.\n *\n * @param {?} currentView The current view\n * @param {?} tView\n * @param {?} creationMode\n * @return {?}\n */\nexport function executeInitHooks(currentView, tView, creationMode) {\n    if (currentView.lifecycleStage === 1 /* INIT */) {\n        executeHooks(currentView.data, tView.initHooks, tView.checkHooks, creationMode);\n        currentView.lifecycleStage = 2 /* CONTENT_INIT */;\n    }\n}\n/**\n * Calls all afterContentInit and afterContentChecked hooks for the view, then splices\n * out afterContentInit hooks to prep for the next run in update mode.\n *\n * @param {?} currentView The current view\n * @param {?} tView\n * @param {?} creationMode\n * @return {?}\n */\nexport function executeContentHooks(currentView, tView, creationMode) {\n    if (currentView.lifecycleStage < 3 /* VIEW_INIT */) {\n        executeHooks(currentView.data, tView.contentHooks, tView.contentCheckHooks, creationMode);\n        currentView.lifecycleStage = 3 /* VIEW_INIT */;\n    }\n}\n/**\n * Iterates over afterViewInit and afterViewChecked functions and calls them.\n *\n * @param {?} data\n * @param {?} allHooks\n * @param {?} checkHooks\n * @param {?} creationMode\n * @return {?}\n */\nexport function executeHooks(data, allHooks, checkHooks, creationMode) {\n    var /** @type {?} */ hooksToCall = creationMode ? allHooks : checkHooks;\n    if (hooksToCall != null) {\n        callHooks(data, hooksToCall);\n    }\n}\n/**\n * Calls lifecycle hooks with their contexts, skipping init hooks if it's not\n * creation mode.\n *\n * @param {?} data\n * @param {?} arr The array in which the hooks are found\n * @return {?}\n */\nexport function callHooks(data, arr) {\n    for (var /** @type {?} */ i = 0; i < arr.length; i += 2) {\n        (/** @type {?} */ (arr[i | 1])).call(data[/** @type {?} */ (arr[i])]);\n    }\n}\n//# sourceMappingURL=hooks.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nif (typeof ngDevMode == 'undefined') {\n    if (typeof window != 'undefined')\n        (/** @type {?} */ (window)).ngDevMode = true;\n    if (typeof self != 'undefined')\n        (/** @type {?} */ (self)).ngDevMode = true;\n    if (typeof global != 'undefined')\n        (/** @type {?} */ (global)).ngDevMode = true;\n}\nexport var /** @type {?} */ _ngDevMode = true;\n//# sourceMappingURL=ng_dev_mode.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { assertEqual, assertNotNull } from './assert';\n/**\n * @param {?} node\n * @param {?} type\n * @return {?}\n */\nexport function assertNodeType(node, type) {\n    assertNotNull(node, 'should be called with a node');\n    assertEqual(node.flags & 3 /* TYPE_MASK */, type, \"should be a \" + typeName(type));\n}\n/**\n * @param {?} node\n * @param {...?} types\n * @return {?}\n */\nexport function assertNodeOfPossibleTypes(node) {\n    var types = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        types[_i - 1] = arguments[_i];\n    }\n    assertNotNull(node, 'should be called with a node');\n    var /** @type {?} */ nodeType = node.flags & 3 /* TYPE_MASK */;\n    var /** @type {?} */ found = types.some(function (type) { return nodeType === type; });\n    assertEqual(found, true, \"Should be one of \" + types.map(typeName).join(', '));\n}\n/**\n * @param {?} type\n * @return {?}\n */\nfunction typeName(type) {\n    if (type == 1 /* Projection */)\n        return 'Projection';\n    if (type == 0 /* Container */)\n        return 'Container';\n    if (type == 2 /* View */)\n        return 'View';\n    if (type == 3 /* Element */)\n        return 'Element';\n    return '<unknown>';\n}\n//# sourceMappingURL=node_assert.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nvar RendererStyleFlags3 = {\n    Important: 1,\n    DashCase: 2,\n};\nexport { RendererStyleFlags3 };\nRendererStyleFlags3[RendererStyleFlags3.Important] = \"Important\";\nRendererStyleFlags3[RendererStyleFlags3.DashCase] = \"DashCase\";\n/**\n * Object Oriented style of API needed to create elements and text nodes.\n *\n * This is the native browser API style, e.g. operations are methods on individual objects\n * like HTMLElement. With this style, no additional code is needed as a facade\n * (reducing payload size).\n *\n * @record\n */\nexport function ObjectOrientedRenderer3() { }\nfunction ObjectOrientedRenderer3_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ObjectOrientedRenderer3.prototype.createElement;\n    /** @type {?} */\n    ObjectOrientedRenderer3.prototype.createTextNode;\n    /** @type {?} */\n    ObjectOrientedRenderer3.prototype.querySelector;\n}\n/**\n * Returns wether the `renderer` is a `ProceduralRenderer3`\n * @param {?} renderer\n * @return {?}\n */\nexport function isProceduralRenderer(renderer) {\n    return !!((/** @type {?} */ (renderer)).listen);\n}\n/**\n * Procedural style of API needed to create elements and text nodes.\n *\n * In non-native browser environments (e.g. platforms such as web-workers), this is the\n * facade that enables element manipulation. This also facilitates backwards compatibility\n * with Renderer2.\n * @record\n */\nexport function ProceduralRenderer3() { }\nfunction ProceduralRenderer3_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ProceduralRenderer3.prototype.destroy;\n    /** @type {?} */\n    ProceduralRenderer3.prototype.createElement;\n    /** @type {?} */\n    ProceduralRenderer3.prototype.createText;\n    /**\n     * This property is allowed to be null / undefined,\n     * in which case the view engine won't call it.\n     * This is used as a performance optimization for production mode.\n     * @type {?|undefined}\n     */\n    ProceduralRenderer3.prototype.destroyNode;\n    /** @type {?} */\n    ProceduralRenderer3.prototype.appendChild;\n    /** @type {?} */\n    ProceduralRenderer3.prototype.insertBefore;\n    /** @type {?} */\n    ProceduralRenderer3.prototype.removeChild;\n    /** @type {?} */\n    ProceduralRenderer3.prototype.selectRootElement;\n    /** @type {?} */\n    ProceduralRenderer3.prototype.setAttribute;\n    /** @type {?} */\n    ProceduralRenderer3.prototype.removeAttribute;\n    /** @type {?} */\n    ProceduralRenderer3.prototype.addClass;\n    /** @type {?} */\n    ProceduralRenderer3.prototype.removeClass;\n    /** @type {?} */\n    ProceduralRenderer3.prototype.setStyle;\n    /** @type {?} */\n    ProceduralRenderer3.prototype.removeStyle;\n    /** @type {?} */\n    ProceduralRenderer3.prototype.setProperty;\n    /** @type {?} */\n    ProceduralRenderer3.prototype.setValue;\n    /** @type {?} */\n    ProceduralRenderer3.prototype.listen;\n}\n/**\n * @record\n */\nexport function RendererFactory3() { }\nfunction RendererFactory3_tsickle_Closure_declarations() {\n    /** @type {?} */\n    RendererFactory3.prototype.createRenderer;\n    /** @type {?|undefined} */\n    RendererFactory3.prototype.begin;\n    /** @type {?|undefined} */\n    RendererFactory3.prototype.end;\n}\nexport var /** @type {?} */ domRendererFactory3 = {\n    createRenderer: function (hostElement, rendererType) { return document; }\n};\n/**\n * Subset of API needed for appending elements and text nodes.\n * @record\n */\nexport function RNode() { }\nfunction RNode_tsickle_Closure_declarations() {\n    /** @type {?} */\n    RNode.prototype.removeChild;\n    /**\n     * Insert a child node.\n     *\n     * Used exclusively for adding View root nodes into ViewAnchor location.\n     * @type {?}\n     */\n    RNode.prototype.insertBefore;\n    /**\n     * Append a child node.\n     *\n     * Used exclusively for building up DOM which are static (ie not View roots)\n     * @type {?}\n     */\n    RNode.prototype.appendChild;\n}\n/**\n * Subset of API needed for writing attributes, properties, and setting up\n * listeners on Element.\n * @record\n */\nexport function RElement() { }\nfunction RElement_tsickle_Closure_declarations() {\n    /** @type {?} */\n    RElement.prototype.style;\n    /** @type {?} */\n    RElement.prototype.classList;\n    /** @type {?} */\n    RElement.prototype.setAttribute;\n    /** @type {?} */\n    RElement.prototype.removeAttribute;\n    /** @type {?} */\n    RElement.prototype.setAttributeNS;\n    /** @type {?} */\n    RElement.prototype.addEventListener;\n    /** @type {?} */\n    RElement.prototype.removeEventListener;\n    /** @type {?|undefined} */\n    RElement.prototype.setProperty;\n}\n/**\n * @record\n */\nexport function RCssStyleDeclaration() { }\nfunction RCssStyleDeclaration_tsickle_Closure_declarations() {\n    /** @type {?} */\n    RCssStyleDeclaration.prototype.removeProperty;\n    /** @type {?} */\n    RCssStyleDeclaration.prototype.setProperty;\n}\n/**\n * @record\n */\nexport function RDomTokenList() { }\nfunction RDomTokenList_tsickle_Closure_declarations() {\n    /** @type {?} */\n    RDomTokenList.prototype.add;\n    /** @type {?} */\n    RDomTokenList.prototype.remove;\n}\n/**\n * @record\n */\nexport function RText() { }\nfunction RText_tsickle_Closure_declarations() {\n    /** @type {?} */\n    RText.prototype.textContent;\n}\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\nexport var /** @type {?} */ unusedValueExportToPlacateAjd = 1;\n//# sourceMappingURL=renderer.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { callHooks } from './hooks';\nimport { unusedValueExportToPlacateAjd as unused1 } from './interfaces/container';\nimport { unusedValueExportToPlacateAjd as unused2 } from './interfaces/node';\nimport { unusedValueExportToPlacateAjd as unused3 } from './interfaces/projection';\nimport { isProceduralRenderer, unusedValueExportToPlacateAjd as unused4 } from './interfaces/renderer';\nimport { unusedValueExportToPlacateAjd as unused5 } from './interfaces/view';\nimport { assertNodeType } from './node_assert';\nvar /** @type {?} */ unusedValueToPlacateAjd = unused1 + unused2 + unused3 + unused4 + unused5;\n/**\n * Returns the first RNode following the given LNode in the same parent DOM element.\n *\n * This is needed in order to insert the given node with insertBefore.\n *\n * @param {?} node The node whose following DOM node must be found.\n * @param {?} stopNode A parent node at which the lookup in the tree should be stopped, or null if the\n * lookup should not be stopped until the result is found.\n * @return {?} RNode before which the provided node should be inserted or null if the lookup was\n * stopped\n * or if there is no native node after the given logical node in the same native parent.\n */\nfunction findNextRNodeSibling(node, stopNode) {\n    var /** @type {?} */ currentNode = node;\n    while (currentNode && currentNode !== stopNode) {\n        var /** @type {?} */ pNextOrParent = currentNode.pNextOrParent;\n        if (pNextOrParent) {\n            var /** @type {?} */ pNextOrParentType = pNextOrParent.flags & 3 /* TYPE_MASK */;\n            while (pNextOrParentType !== 1 /* Projection */) {\n                var /** @type {?} */ nativeNode = findFirstRNode(pNextOrParent);\n                if (nativeNode) {\n                    return nativeNode;\n                }\n                pNextOrParent = /** @type {?} */ ((pNextOrParent.pNextOrParent));\n            }\n            currentNode = pNextOrParent;\n        }\n        else {\n            var /** @type {?} */ currentSibling = currentNode.next;\n            while (currentSibling) {\n                var /** @type {?} */ nativeNode = findFirstRNode(currentSibling);\n                if (nativeNode) {\n                    return nativeNode;\n                }\n                currentSibling = currentSibling.next;\n            }\n            var /** @type {?} */ parentNode = currentNode.parent;\n            currentNode = null;\n            if (parentNode) {\n                var /** @type {?} */ parentType = parentNode.flags & 3 /* TYPE_MASK */;\n                if (parentType === 0 /* Container */ || parentType === 2 /* View */) {\n                    currentNode = parentNode;\n                }\n            }\n        }\n    }\n    return null;\n}\n/**\n * Get the next node in the LNode tree, taking into account the place where a node is\n * projected (in the shadow DOM) rather than where it comes from (in the light DOM).\n *\n * @param {?} node The node whose next node in the LNode tree must be found.\n * @return {?} LNode|null The next sibling in the LNode tree.\n */\nfunction getNextLNodeWithProjection(node) {\n    var /** @type {?} */ pNextOrParent = node.pNextOrParent;\n    if (pNextOrParent) {\n        // The node is projected\n        var /** @type {?} */ isLastProjectedNode = (pNextOrParent.flags & 3 /* TYPE_MASK */) === 1 /* Projection */;\n        // returns pNextOrParent if we are not at the end of the list, null otherwise\n        return isLastProjectedNode ? null : pNextOrParent;\n    }\n    // returns node.next because the the node is not projected\n    return node.next;\n}\n/**\n * Find the next node in the LNode tree, taking into account the place where a node is\n * projected (in the shadow DOM) rather than where it comes from (in the light DOM).\n *\n * If there is no sibling node, this function goes to the next sibling of the parent node...\n * until it reaches rootNode (at which point null is returned).\n *\n * @param {?} initialNode The node whose following node in the LNode tree must be found.\n * @param {?} rootNode The root node at which the lookup should stop.\n * @return {?} LNode|null The following node in the LNode tree.\n */\nfunction getNextOrParentSiblingNode(initialNode, rootNode) {\n    var /** @type {?} */ node = initialNode;\n    var /** @type {?} */ nextNode = getNextLNodeWithProjection(node);\n    while (node && !nextNode) {\n        // if node.pNextOrParent is not null here, it is not the next node\n        // (because, at this point, nextNode is null, so it is the parent)\n        node = node.pNextOrParent || node.parent;\n        if (node === rootNode) {\n            return null;\n        }\n        nextNode = node && getNextLNodeWithProjection(node);\n    }\n    return nextNode;\n}\n/**\n * Returns the first RNode inside the given LNode.\n *\n * @param {?} rootNode\n * @return {?} RNode The first RNode of the given LNode or null if there is none.\n */\nfunction findFirstRNode(rootNode) {\n    var /** @type {?} */ node = rootNode;\n    while (node) {\n        var /** @type {?} */ type = node.flags & 3 /* TYPE_MASK */;\n        var /** @type {?} */ nextNode = null;\n        if (type === 3 /* Element */) {\n            // A LElementNode has a matching RNode in LElementNode.native\n            return (/** @type {?} */ (node)).native;\n        }\n        else if (type === 0 /* Container */) {\n            // For container look at the first node of the view next\n            var /** @type {?} */ childContainerData = (/** @type {?} */ (node)).data;\n            nextNode = childContainerData.views.length ? childContainerData.views[0].child : null;\n        }\n        else if (type === 1 /* Projection */) {\n            // For Projection look at the first projected node\n            nextNode = (/** @type {?} */ (node)).data.head;\n        }\n        else {\n            // Otherwise look at the first child\n            nextNode = (/** @type {?} */ (node)).child;\n        }\n        node = nextNode === null ? getNextOrParentSiblingNode(node, rootNode) : nextNode;\n    }\n    return null;\n}\n/**\n * @param {?} container\n * @param {?} rootNode\n * @param {?} insertMode\n * @param {?=} beforeNode\n * @return {?}\n */\nexport function addRemoveViewFromContainer(container, rootNode, insertMode, beforeNode) {\n    ngDevMode && assertNodeType(container, 0 /* Container */);\n    ngDevMode && assertNodeType(rootNode, 2 /* View */);\n    var /** @type {?} */ parentNode = container.data.renderParent;\n    var /** @type {?} */ parent = parentNode ? parentNode.native : null;\n    var /** @type {?} */ node = rootNode.child;\n    if (parent) {\n        while (node) {\n            var /** @type {?} */ type = node.flags & 3 /* TYPE_MASK */;\n            var /** @type {?} */ nextNode = null;\n            var /** @type {?} */ renderer = container.view.renderer;\n            if (type === 3 /* Element */) {\n                if (insertMode) {\n                    isProceduralRenderer(renderer) ?\n                        renderer.insertBefore(parent, /** @type {?} */ ((node.native)), /** @type {?} */ (beforeNode)) :\n                        parent.insertBefore(/** @type {?} */ ((node.native)), /** @type {?} */ (beforeNode), true);\n                }\n                else {\n                    isProceduralRenderer(renderer) ? renderer.removeChild(/** @type {?} */ (parent), /** @type {?} */ ((node.native))) :\n                        parent.removeChild(/** @type {?} */ ((node.native)));\n                }\n                nextNode = node.next;\n            }\n            else if (type === 0 /* Container */) {\n                // if we get to a container, it must be a root node of a view because we are only\n                // propagating down into child views / containers and not child elements\n                var /** @type {?} */ childContainerData = (/** @type {?} */ (node)).data;\n                childContainerData.renderParent = parentNode;\n                nextNode = childContainerData.views.length ? childContainerData.views[0].child : null;\n            }\n            else if (type === 1 /* Projection */) {\n                nextNode = (/** @type {?} */ (node)).data.head;\n            }\n            else {\n                nextNode = (/** @type {?} */ (node)).child;\n            }\n            if (nextNode === null) {\n                node = getNextOrParentSiblingNode(node, rootNode);\n            }\n            else {\n                node = nextNode;\n            }\n        }\n    }\n}\n/**\n * Traverses the tree of component views and containers to remove listeners and\n * call onDestroy callbacks.\n *\n * Notes:\n *  - Because it's used for onDestroy calls, it needs to be bottom-up.\n *  - Must process containers instead of their views to avoid splicing\n *  when views are destroyed and re-added.\n *  - Using a while loop because it's faster than recursion\n *  - Destroy only called on movement to sibling or movement to parent (laterally or up)\n *\n *  \\@param rootView The view to destroy\n * @param {?} rootView\n * @return {?}\n */\nexport function destroyViewTree(rootView) {\n    var /** @type {?} */ viewOrContainer = rootView;\n    while (viewOrContainer) {\n        var /** @type {?} */ next = null;\n        if (viewOrContainer.views && viewOrContainer.views.length) {\n            next = viewOrContainer.views[0].data;\n        }\n        else if (viewOrContainer.child) {\n            next = viewOrContainer.child;\n        }\n        else if (viewOrContainer.next) {\n            cleanUpView(/** @type {?} */ (viewOrContainer));\n            next = viewOrContainer.next;\n        }\n        if (next == null) {\n            // If the viewOrContainer is the rootView, then the cleanup is done twice.\n            // Without this check, ngOnDestroy would be called twice for a directive on an element.\n            while (viewOrContainer && !/** @type {?} */ ((viewOrContainer)).next && viewOrContainer !== rootView) {\n                cleanUpView(/** @type {?} */ (viewOrContainer));\n                viewOrContainer = getParentState(viewOrContainer, rootView);\n            }\n            cleanUpView(/** @type {?} */ (viewOrContainer) || rootView);\n            next = viewOrContainer && viewOrContainer.next;\n        }\n        viewOrContainer = next;\n    }\n}\n/**\n * Inserts a view into a container.\n *\n * This adds the view to the container's array of active views in the correct\n * position. It also adds the view's elements to the DOM if the container isn't a\n * root node of another view (in that case, the view's elements will be added when\n * the container's parent view is added later).\n *\n * @param {?} container The container into which the view should be inserted\n * @param {?} newView The view to insert\n * @param {?} index The index at which to insert the view\n * @return {?} The inserted view\n */\nexport function insertView(container, newView, index) {\n    var /** @type {?} */ state = container.data;\n    var /** @type {?} */ views = state.views;\n    if (index > 0) {\n        // This is a new view, we need to add it to the children.\n        setViewNext(views[index - 1], newView);\n    }\n    if (index < views.length && views[index].data.id !== newView.data.id) {\n        // View ID change replace the view.\n        setViewNext(newView, views[index]);\n        views.splice(index, 0, newView);\n    }\n    else if (index >= views.length) {\n        views.push(newView);\n    }\n    if (state.nextIndex <= index) {\n        state.nextIndex++;\n    }\n    // If the container's renderParent is null, we know that it is a root node of its own parent view\n    // and we should wait until that parent processes its nodes (otherwise, we will insert this view's\n    // nodes twice - once now and once when its parent inserts its views).\n    if (container.data.renderParent !== null) {\n        var /** @type {?} */ beforeNode = findNextRNodeSibling(newView, container);\n        if (!beforeNode) {\n            var /** @type {?} */ containerNextNativeNode = container.native;\n            if (containerNextNativeNode === undefined) {\n                containerNextNativeNode = container.native = findNextRNodeSibling(container, null);\n            }\n            beforeNode = containerNextNativeNode;\n        }\n        addRemoveViewFromContainer(container, newView, true, beforeNode);\n    }\n    return newView;\n}\n/**\n * Removes a view from a container.\n *\n * This method splices the view from the container's array of active views. It also\n * removes the view's elements from the DOM and conducts cleanup (e.g. removing\n * listeners, calling onDestroys).\n *\n * @param {?} container The container from which to remove a view\n * @param {?} removeIndex The index of the view to remove\n * @return {?} The removed view\n */\nexport function removeView(container, removeIndex) {\n    var /** @type {?} */ views = container.data.views;\n    var /** @type {?} */ viewNode = views[removeIndex];\n    if (removeIndex > 0) {\n        setViewNext(views[removeIndex - 1], viewNode.next);\n    }\n    views.splice(removeIndex, 1);\n    destroyViewTree(viewNode.data);\n    addRemoveViewFromContainer(container, viewNode, false);\n    // Notify query that view has been removed\n    container.data.queries && container.data.queries.removeView(removeIndex);\n    return viewNode;\n}\n/**\n * Sets a next on the view node, so views in for loops can easily jump from\n * one view to the next to add/remove elements. Also adds the LView (view.data)\n * to the view tree for easy traversal when cleaning up the view.\n *\n * @param {?} view The view to set up\n * @param {?} next The view's new next\n * @return {?}\n */\nexport function setViewNext(view, next) {\n    view.next = next;\n    view.data.next = next ? next.data : null;\n}\n/**\n * Determines which LViewOrLContainer to jump to when traversing back up the\n * tree in destroyViewTree.\n *\n * Normally, the view's parent LView should be checked, but in the case of\n * embedded views, the container (which is the view node's parent, but not the\n * LView's parent) needs to be checked for a possible next property.\n *\n * @param {?} state The LViewOrLContainer for which we need a parent state\n * @param {?} rootView The rootView, so we don't propagate too far up the view tree\n * @return {?} The correct parent LViewOrLContainer\n */\nexport function getParentState(state, rootView) {\n    var /** @type {?} */ node;\n    if ((node = /** @type {?} */ (((/** @type {?} */ (state)))).node) && (node.flags & 3 /* TYPE_MASK */) === 2 /* View */) {\n        // if it's an embedded view, the state needs to go up to the container, in case the\n        // container has a next\n        return /** @type {?} */ (((node.parent)).data);\n    }\n    else {\n        // otherwise, use parent view for containers or component views\n        return state.parent === rootView ? null : state.parent;\n    }\n}\n/**\n * Removes all listeners and call all onDestroys in a given view.\n *\n * @param {?} view The LView to clean up\n * @return {?}\n */\nfunction cleanUpView(view) {\n    removeListeners(view);\n    executeOnDestroys(view);\n}\n/**\n * Removes listeners and unsubscribes from output subscriptions\n * @param {?} view\n * @return {?}\n */\nfunction removeListeners(view) {\n    var /** @type {?} */ cleanup = /** @type {?} */ ((view.cleanup));\n    if (cleanup != null) {\n        for (var /** @type {?} */ i = 0; i < cleanup.length - 1; i += 2) {\n            if (typeof cleanup[i] === 'string') {\n                /** @type {?} */ ((cleanup))[i + 1].removeEventListener(cleanup[i], cleanup[i + 2], cleanup[i + 3]);\n                i += 2;\n            }\n            else {\n                cleanup[i].call(cleanup[i + 1]);\n            }\n        }\n        view.cleanup = null;\n    }\n}\n/**\n * Calls onDestroy hooks for this view\n * @param {?} view\n * @return {?}\n */\nfunction executeOnDestroys(view) {\n    var /** @type {?} */ tView = view.tView;\n    var /** @type {?} */ destroyHooks;\n    if (tView != null && (destroyHooks = tView.destroyHooks) != null) {\n        callHooks(view.data, destroyHooks);\n    }\n}\n/**\n * Returns whether a native element should be inserted in the given parent.\n *\n * The native node can be inserted when its parent is:\n * - A regular element => Yes\n * - A component host element =>\n *    - if the `currentView` === the parent `view`: The element is in the content (vs the\n *      template)\n *      => don't add as the parent component will project if needed.\n *    - `currentView` !== the parent `view` => The element is in the template (vs the content),\n *      add it\n * - View element => delay insertion, will be done on `viewEnd()`\n *\n * @param {?} parent The parent in which to insert the child\n * @param {?} currentView The LView being processed\n * @return {?} boolean Whether the child element should be inserted.\n */\nexport function canInsertNativeNode(parent, currentView) {\n    var /** @type {?} */ parentIsElement = (parent.flags & 3 /* TYPE_MASK */) === 3 /* Element */;\n    return parentIsElement &&\n        (parent.view !== currentView || parent.data === null /* Regular Element. */);\n}\n/**\n * Appends the `child` element to the `parent`.\n *\n * The element insertion might be delayed {\\@link canInsertNativeNode}\n *\n * @param {?} parent The parent to which to append the child\n * @param {?} child The child that should be appended\n * @param {?} currentView The current LView\n * @return {?} Whether or not the child was appended\n */\nexport function appendChild(parent, child, currentView) {\n    if (child !== null && canInsertNativeNode(parent, currentView)) {\n        // We only add element if not in View or not projected.\n        var /** @type {?} */ renderer = currentView.renderer;\n        isProceduralRenderer(renderer) ? renderer.appendChild(/** @type {?} */ (((parent.native))), child) : /** @type {?} */ ((parent.native)).appendChild(child);\n        return true;\n    }\n    return false;\n}\n/**\n * Inserts the provided node before the correct element in the DOM.\n *\n * The element insertion might be delayed {\\@link canInsertNativeNode}\n *\n * @param {?} node Node to insert\n * @param {?} currentView Current LView\n * @return {?}\n */\nexport function insertChild(node, currentView) {\n    var /** @type {?} */ parent = /** @type {?} */ ((node.parent));\n    if (canInsertNativeNode(parent, currentView)) {\n        var /** @type {?} */ nativeSibling = findNextRNodeSibling(node, null);\n        var /** @type {?} */ renderer = currentView.renderer;\n        isProceduralRenderer(renderer) ?\n            renderer.insertBefore(/** @type {?} */ ((parent.native)), /** @type {?} */ ((node.native)), nativeSibling) : /** @type {?} */ ((parent.native)).insertBefore(/** @type {?} */ ((node.native)), nativeSibling, false);\n    }\n}\n/**\n * Appends a projected node to the DOM, or in the case of a projected container,\n * appends the nodes from all of the container's active views to the DOM.\n *\n * @param {?} node The node to process\n * @param {?} currentParent The last parent element to be processed\n * @param {?} currentView Current LView\n * @return {?}\n */\nexport function appendProjectedNode(node, currentParent, currentView) {\n    if ((node.flags & 3 /* TYPE_MASK */) !== 0 /* Container */) {\n        appendChild(currentParent, (/** @type {?} */ (node)).native, currentView);\n    }\n    else if (canInsertNativeNode(currentParent, currentView)) {\n        // The node we are adding is a Container and we are adding it to Element which\n        // is not a component (no more re-projection).\n        // Alternatively a container is projected at the root of a component's template\n        // and can't be re-projected (as not content of any component).\n        // Assignee the final projection location in those cases.\n        var /** @type {?} */ lContainer = (/** @type {?} */ (node)).data;\n        lContainer.renderParent = /** @type {?} */ (currentParent);\n        var /** @type {?} */ views = lContainer.views;\n        for (var /** @type {?} */ i = 0; i < views.length; i++) {\n            addRemoveViewFromContainer(/** @type {?} */ (node), views[i], true, null);\n        }\n    }\n}\n//# sourceMappingURL=node_manipulation.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport './ng_dev_mode';\nimport { assertNotNull } from './assert';\nimport { unusedValueExportToPlacateAjd as unused1 } from './interfaces/node';\nimport { NG_PROJECT_AS_ATTR_NAME, unusedValueExportToPlacateAjd as unused2 } from './interfaces/projection';\nvar /** @type {?} */ unusedValueToPlacateAjd = unused1 + unused2;\n/**\n * @param {?} nodeClassAttrVal\n * @param {?} cssClassToMatch\n * @return {?}\n */\nfunction isCssClassMatching(nodeClassAttrVal, cssClassToMatch) {\n    var /** @type {?} */ nodeClassesLen = nodeClassAttrVal.length;\n    var /** @type {?} */ matchIndex = /** @type {?} */ ((nodeClassAttrVal)).indexOf(cssClassToMatch);\n    var /** @type {?} */ matchEndIdx = matchIndex + cssClassToMatch.length;\n    if (matchIndex === -1 // no match\n        || (matchIndex > 0 && /** @type {?} */ ((nodeClassAttrVal))[matchIndex - 1] !== ' ') // no space before\n        ||\n            (matchEndIdx < nodeClassesLen && /** @type {?} */ ((nodeClassAttrVal))[matchEndIdx] !== ' ')) {\n        return false;\n    }\n    return true;\n}\n/**\n * A utility function to match an Ivy node static data against a simple CSS selector\n *\n * @param {?} tNode\n * @param {?} selector\n * @return {?} true if node matches the selector.\n */\nexport function isNodeMatchingSimpleSelector(tNode, selector) {\n    var /** @type {?} */ noOfSelectorParts = selector.length;\n    ngDevMode && assertNotNull(selector[0], 'the selector should have a tag name');\n    var /** @type {?} */ tagNameInSelector = selector[0];\n    // check tag tame\n    if (tagNameInSelector !== '' && tagNameInSelector !== tNode.tagName) {\n        return false;\n    }\n    // short-circuit case where we are only matching on element's tag name\n    if (noOfSelectorParts === 1) {\n        return true;\n    }\n    // short-circuit case where an element has no attrs but a selector tries to match some\n    if (noOfSelectorParts > 1 && !tNode.attrs) {\n        return false;\n    }\n    var /** @type {?} */ attrsInNode = /** @type {?} */ ((tNode.attrs));\n    for (var /** @type {?} */ i = 1; i < noOfSelectorParts; i += 2) {\n        var /** @type {?} */ attrNameInSelector = selector[i];\n        var /** @type {?} */ attrIdxInNode = attrsInNode.indexOf(attrNameInSelector);\n        if (attrIdxInNode % 2 !== 0) {\n            // attribute names are stored at even indexes\n            return false;\n        }\n        else {\n            var /** @type {?} */ attrValInSelector = selector[i + 1];\n            if (attrValInSelector !== '') {\n                // selector should also match on an attribute value\n                var /** @type {?} */ attrValInNode = attrsInNode[attrIdxInNode + 1];\n                if (attrNameInSelector === 'class') {\n                    // iterate over all the remaining items in the selector selector array = class names\n                    for (i++; i < noOfSelectorParts; i++) {\n                        if (!isCssClassMatching(attrValInNode, selector[i])) {\n                            return false;\n                        }\n                    }\n                }\n                else if (attrValInSelector !== attrValInNode) {\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n}\n/**\n * @param {?} tNode\n * @param {?} selector\n * @return {?}\n */\nexport function isNodeMatchingSelectorWithNegations(tNode, selector) {\n    var /** @type {?} */ positiveSelector = selector[0];\n    if (positiveSelector != null && !isNodeMatchingSimpleSelector(tNode, positiveSelector)) {\n        return false;\n    }\n    // do we have any negation parts in this selector?\n    var /** @type {?} */ negativeSelectors = selector[1];\n    if (negativeSelectors) {\n        for (var /** @type {?} */ i = 0; i < negativeSelectors.length; i++) {\n            // if one of negative selectors matched than the whole selector doesn't match\n            if (isNodeMatchingSimpleSelector(tNode, negativeSelectors[i])) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n/**\n * @param {?} tNode\n * @param {?} selector\n * @return {?}\n */\nexport function isNodeMatchingSelector(tNode, selector) {\n    for (var /** @type {?} */ i = 0; i < selector.length; i++) {\n        if (isNodeMatchingSelectorWithNegations(tNode, selector[i])) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nexport function getProjectAsAttrValue(tNode) {\n    var /** @type {?} */ nodeAttrs = tNode.attrs;\n    if (nodeAttrs != null) {\n        var /** @type {?} */ ngProjectAsAttrIdx = nodeAttrs.indexOf(NG_PROJECT_AS_ATTR_NAME);\n        // only check for ngProjectAs in attribute names, don't accidentally match attribute's value\n        // (attribute names are stored at even indexes)\n        if ((ngProjectAsAttrIdx & 1) === 0) {\n            return nodeAttrs[ngProjectAsAttrIdx + 1];\n        }\n    }\n    return null;\n}\n/**\n * Checks a given node against matching selectors and returns\n * selector index (or 0 if none matched).\n *\n * This function takes into account the ngProjectAs attribute: if present its value will be compared\n * to the raw (un-parsed) CSS selector instead of using standard selector matching logic.\n * @param {?} tNode\n * @param {?} selectors\n * @param {?} textSelectors\n * @return {?}\n */\nexport function matchingSelectorIndex(tNode, selectors, textSelectors) {\n    var /** @type {?} */ ngProjectAsAttrVal = getProjectAsAttrValue(tNode);\n    for (var /** @type {?} */ i = 0; i < selectors.length; i++) {\n        // if a node has the ngProjectAs attribute match it against unparsed selector\n        // match a node against a parsed selector only if ngProjectAs attribute is not present\n        if (ngProjectAsAttrVal === textSelectors[i] ||\n            ngProjectAsAttrVal === null && isNodeMatchingSelector(tNode, selectors[i])) {\n            return i + 1; // first matching selector \"captures\" a given node\n        }\n    }\n    return 0;\n}\n//# sourceMappingURL=node_selector_matcher.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Must use this method for CD (instead of === ) since NaN !== NaN\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nexport function isDifferent(a, b) {\n    // NaN is the only value that is not equal to itself so the first\n    // test checks if both a and b are not NaN\n    return !(a !== a && b !== b) && a !== b;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nexport function stringify(value) {\n    if (typeof value == 'function')\n        return value.name || value;\n    if (typeof value == 'string')\n        return value;\n    if (value == null)\n        return '';\n    return '' + value;\n}\n/**\n *  Function that throws a \"not implemented\" error so it's clear certain\n *  behaviors/methods aren't yet ready.\n *\n * @return {?} Not implemented error\n */\nexport function notImplemented() {\n    return new Error('NotImplemented');\n}\n/**\n * Flattens an array in non-recursive way. Input arrays are not modified.\n * @param {?} list\n * @return {?}\n */\nexport function flatten(list) {\n    var /** @type {?} */ result = [];\n    var /** @type {?} */ i = 0;\n    while (i < list.length) {\n        var /** @type {?} */ item = list[i];\n        if (Array.isArray(item)) {\n            if (item.length > 0) {\n                list = item.concat(list.slice(i + 1));\n                i = 0;\n            }\n            else {\n                i++;\n            }\n        }\n        else {\n            result.push(item);\n            i++;\n        }\n    }\n    return result;\n}\n//# sourceMappingURL=util.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport './ng_dev_mode';\nimport { assertEqual, assertLessThan, assertNotEqual, assertNotNull, assertNull, assertSame } from './assert';\nimport { NG_PROJECT_AS_ATTR_NAME } from './interfaces/projection';\nimport { assertNodeType } from './node_assert';\nimport { appendChild, insertChild, insertView, appendProjectedNode, removeView, canInsertNativeNode } from './node_manipulation';\nimport { matchingSelectorIndex } from './node_selector_matcher';\nimport { RendererStyleFlags3, isProceduralRenderer } from './interfaces/renderer';\nimport { isDifferent, stringify } from './util';\nimport { executeHooks, executeContentHooks, queueLifecycleHooks, queueInitHooks, executeInitHooks } from './hooks';\n/**\n * Directive (D) sets a property on all component instances using this constant as a key and the\n * component's host node (LElement) as the value. This is used in methods like detectChanges to\n * facilitate jumping from an instance to the host node.\n */\nexport var /** @type {?} */ NG_HOST_SYMBOL = '__ngHostLNode__';\n/**\n * A permanent marker promise which signifies that the current CD tree is\n * clean.\n */\nvar /** @type {?} */ _CLEAN_PROMISE = Promise.resolve(null);\n/**\n * This property gets set before entering a template.\n *\n * This renderer can be one of two varieties of Renderer3:\n *\n * - ObjectedOrientedRenderer3\n *\n * This is the native browser API style, e.g. operations are methods on individual objects\n * like HTMLElement. With this style, no additional code is needed as a facade (reducing payload\n * size).\n *\n * - ProceduralRenderer3\n *\n * In non-native browser environments (e.g. platforms such as web-workers), this is the facade\n * that enables element manipulation. This also facilitates backwards compatibility with\n * Renderer2.\n */\nvar /** @type {?} */ renderer;\nvar /** @type {?} */ rendererFactory;\n/**\n * @return {?}\n */\nexport function getRenderer() {\n    // top level variables should not be exported for performance reason (PERF_NOTES.md)\n    return renderer;\n}\n/**\n * Used to set the parent property when nodes are created.\n */\nvar /** @type {?} */ previousOrParentNode;\n/**\n * @return {?}\n */\nexport function getPreviousOrParentNode() {\n    // top level variables should not be exported for performance reason (PERF_NOTES.md)\n    return previousOrParentNode;\n}\n/**\n * If `isParent` is:\n *  - `true`: then `previousOrParentNode` points to a parent node.\n *  - `false`: then `previousOrParentNode` points to previous node (sibling).\n */\nvar /** @type {?} */ isParent;\n/**\n * Static data that corresponds to the instance-specific data array on an LView.\n *\n * Each node's static data is stored in tData at the same index that it's stored\n * in the data array. Each directive's definition is stored here at the same index\n * as its directive instance in the data array. Any nodes that do not have static\n * data store a null value in tData to avoid a sparse array.\n */\nvar /** @type {?} */ tData;\n/**\n * State of the current view being processed.\n *\n * NOTE: we cheat here and initialize it to `null` even thought the type does not\n * contain `null`. This is because we expect this value to be not `null` as soon\n * as we enter the view. Declaring the type as `null` would require us to place `!`\n * in most instructions since they all assume that `currentView` is defined.\n */\nvar /** @type {?} */ currentView = /** @type {?} */ ((null));\nvar /** @type {?} */ currentQueries;\n/**\n * @param {?} QueryType\n * @return {?}\n */\nexport function getCurrentQueries(QueryType) {\n    // top level variables should not be exported for performance reason (PERF_NOTES.md)\n    return currentQueries || (currentQueries = new QueryType());\n}\n/**\n * This property gets set before entering a template.\n */\nvar /** @type {?} */ creationMode;\n/**\n * @return {?}\n */\nexport function getCreationMode() {\n    // top level variables should not be exported for performance reason (PERF_NOTES.md)\n    return creationMode;\n}\n/**\n * An array of nodes (text, element, container, etc), pipes, their bindings, and\n * any local variables that need to be stored between invocations.\n */\nvar /** @type {?} */ data;\n/**\n * Points to the next binding index to read or write to.\n */\nvar /** @type {?} */ bindingIndex;\n/**\n * When a view is destroyed, listeners need to be released and outputs need to be\n * unsubscribed. This cleanup array stores both listener data (in chunks of 4)\n * and output data (in chunks of 2) for a particular view. Combining the arrays\n * saves on memory (70 bytes per array) and on a few bytes of code size (for two\n * separate for loops).\n *\n * If it's a listener being stored:\n * 1st index is: event name to remove\n * 2nd index is: native element\n * 3rd index is: listener function\n * 4th index is: useCapture boolean\n *\n * If it's an output subscription:\n * 1st index is: unsubscribe function\n * 2nd index is: context for function\n */\nvar /** @type {?} */ cleanup;\n/**\n * In this mode, any changes in bindings will throw an ExpressionChangedAfterChecked error.\n *\n * Necessary to support ChangeDetectorRef.checkNoChanges().\n */\nvar /** @type {?} */ checkNoChangesMode = false;\n/** @enum {number} */\nvar BindingDirection = {\n    Input: 0,\n    Output: 1,\n};\n/**\n * Swap the current state with a new state.\n *\n * For performance reasons we store the state in the top level of the module.\n * This way we minimize the number of properties to read. Whenever a new view\n * is entered we have to store the state for later, and when the view is\n * exited the state has to be restored\n *\n * @param {?} newView New state to become active\n * @param {?} host Element to which the View is a child of\n * @return {?} the previous state;\n */\nexport function enterView(newView, host) {\n    var /** @type {?} */ oldView = currentView;\n    data = newView && newView.data;\n    bindingIndex = newView && newView.bindingStartIndex || 0;\n    tData = newView && newView.tView.data;\n    creationMode = newView && (newView.flags & 1 /* CreationMode */) === 1 /* CreationMode */;\n    cleanup = newView && newView.cleanup;\n    renderer = newView && newView.renderer;\n    if (host != null) {\n        previousOrParentNode = host;\n        isParent = true;\n    }\n    currentView = newView;\n    currentQueries = newView && newView.queries;\n    return /** @type {?} */ ((oldView));\n}\n/**\n * Used in lieu of enterView to make it clear when we are exiting a child view. This makes\n * the direction of traversal (up or down the view tree) a bit clearer.\n * @param {?} newView\n * @return {?}\n */\nexport function leaveView(newView) {\n    if (!checkNoChangesMode) {\n        executeHooks(currentView.data, currentView.tView.viewHooks, currentView.tView.viewCheckHooks, creationMode);\n    }\n    // Views should be clean and in update mode after being checked, so these bits are cleared\n    currentView.flags &= ~(1 /* CreationMode */ | 4 /* Dirty */);\n    currentView.lifecycleStage = 1 /* INIT */;\n    currentView.tView.firstTemplatePass = false;\n    enterView(newView, null);\n}\n/**\n * @param {?} viewId\n * @param {?} renderer\n * @param {?} tView\n * @param {?} template\n * @param {?} context\n * @param {?} flags\n * @return {?}\n */\nexport function createLView(viewId, renderer, tView, template, context, flags) {\n    var /** @type {?} */ newView = {\n        parent: currentView,\n        id: viewId,\n        // -1 for component views\n        flags: flags | 1 /* CreationMode */ | 8 /* Attached */,\n        node: /** @type {?} */ ((null)),\n        // until we initialize it in createNode.\n        data: [],\n        tView: tView,\n        cleanup: null,\n        renderer: renderer,\n        child: null,\n        tail: null,\n        next: null,\n        bindingStartIndex: null,\n        template: template,\n        context: context,\n        dynamicViewCount: 0,\n        lifecycleStage: 1 /* INIT */,\n        queries: null,\n    };\n    return newView;\n}\n/**\n * @param {?} index\n * @param {?} type\n * @param {?} native\n * @param {?=} state\n * @return {?}\n */\nexport function createLNode(index, type, native, state) {\n    var /** @type {?} */ parent = isParent ? previousOrParentNode :\n        previousOrParentNode && /** @type {?} */ (previousOrParentNode.parent);\n    var /** @type {?} */ queries = (isParent ? currentQueries : previousOrParentNode && previousOrParentNode.queries) ||\n        parent && parent.queries && parent.queries.child();\n    var /** @type {?} */ isState = state != null;\n    var /** @type {?} */ node = {\n        flags: type,\n        native: /** @type {?} */ (native),\n        view: currentView,\n        parent: /** @type {?} */ (parent),\n        child: null,\n        next: null,\n        nodeInjector: parent ? parent.nodeInjector : null,\n        data: isState ? /** @type {?} */ (state) : null,\n        queries: queries,\n        tNode: null,\n        pNextOrParent: null\n    };\n    if ((type & 2 /* ViewOrElement */) === 2 /* ViewOrElement */ && isState) {\n        // Bit of a hack to bust through the readonly because there is a circular dep between\n        // LView and LNode.\n        ngDevMode && assertNull((/** @type {?} */ (state)).node, 'LView.node should not have been initialized');\n        (/** @type {?} */ ((state))).node = node;\n    }\n    if (index != null) {\n        // We are Element or Container\n        ngDevMode && assertDataNext(index);\n        data[index] = node;\n        // Every node adds a value to the static data array to avoid a sparse array\n        if (index >= tData.length) {\n            tData[index] = null;\n        }\n        else {\n            node.tNode = /** @type {?} */ (tData[index]);\n        }\n        // Now link ourselves into the tree.\n        if (isParent) {\n            currentQueries = null;\n            if (previousOrParentNode.view === currentView ||\n                (previousOrParentNode.flags & 3 /* TYPE_MASK */) === 2 /* View */) {\n                // We are in the same view, which means we are adding content node to the parent View.\n                ngDevMode && assertNull(previousOrParentNode.child, \"previousOrParentNode's child should not have been set.\");\n                previousOrParentNode.child = node;\n            }\n            else {\n                // We are adding component view, so we don't link parent node child to this node.\n            }\n        }\n        else if (previousOrParentNode) {\n            ngDevMode && assertNull(previousOrParentNode.next, \"previousOrParentNode's next property should not have been set.\");\n            previousOrParentNode.next = node;\n        }\n    }\n    previousOrParentNode = node;\n    isParent = true;\n    return node;\n}\n/**\n * Resets the application state.\n * @return {?}\n */\nfunction resetApplicationState() {\n    isParent = false;\n    previousOrParentNode = /** @type {?} */ ((null));\n}\n/**\n *\n * @template T\n * @param {?} hostNode\n * @param {?} template Template function with the instructions.\n * @param {?} context to pass into the template.\n * @param {?} providedRendererFactory\n * @param {?} host Existing node to render into.\n * @return {?}\n */\nexport function renderTemplate(hostNode, template, context, providedRendererFactory, host) {\n    if (host == null) {\n        resetApplicationState();\n        rendererFactory = providedRendererFactory;\n        host = createLNode(null, 3 /* Element */, hostNode, createLView(-1, providedRendererFactory.createRenderer(null, null), getOrCreateTView(template), null, {}, 2 /* CheckAlways */));\n    }\n    var /** @type {?} */ hostView = /** @type {?} */ ((host.data));\n    ngDevMode && assertNotNull(hostView, 'Host node should have an LView defined in host.data.');\n    renderComponentOrTemplate(host, hostView, context, template);\n    return host;\n}\n/**\n * @template T\n * @param {?} viewNode\n * @param {?} template\n * @param {?} context\n * @param {?} renderer\n * @return {?}\n */\nexport function renderEmbeddedTemplate(viewNode, template, context, renderer) {\n    var /** @type {?} */ _isParent = isParent;\n    var /** @type {?} */ _previousOrParentNode = previousOrParentNode;\n    try {\n        isParent = true;\n        previousOrParentNode = /** @type {?} */ ((null));\n        var /** @type {?} */ cm = false;\n        if (viewNode == null) {\n            var /** @type {?} */ view = createLView(-1, renderer, createTView(), template, context, 2 /* CheckAlways */);\n            viewNode = createLNode(null, 2 /* View */, null, view);\n            cm = true;\n        }\n        enterView(viewNode.data, viewNode);\n        template(context, cm);\n    }\n    finally {\n        refreshDynamicChildren();\n        leaveView(/** @type {?} */ ((/** @type {?} */ ((currentView)).parent)));\n        isParent = _isParent;\n        previousOrParentNode = _previousOrParentNode;\n    }\n    return viewNode;\n}\n/**\n * @template T\n * @param {?} node\n * @param {?} hostView\n * @param {?} componentOrContext\n * @param {?=} template\n * @return {?}\n */\nexport function renderComponentOrTemplate(node, hostView, componentOrContext, template) {\n    var /** @type {?} */ oldView = enterView(hostView, node);\n    try {\n        if (rendererFactory.begin) {\n            rendererFactory.begin();\n        }\n        if (template) {\n            template(/** @type {?} */ ((componentOrContext)), creationMode);\n        }\n        else {\n            // Element was stored at 0 and directive was stored at 1 in renderComponent\n            // so to refresh the component, refresh() needs to be called with (1, 0)\n            directiveRefresh(1, 0);\n        }\n    }\n    finally {\n        if (rendererFactory.end) {\n            rendererFactory.end();\n        }\n        leaveView(oldView);\n    }\n}\n/**\n * Create DOM element. The instruction must later be followed by `elementEnd()` call.\n *\n * @param {?} index Index of the element in the data array\n * @param {?=} nameOrComponentType Name of the DOM Node or `ComponentType` to create.\n * @param {?=} attrs Statically bound set of attributes to be written into the DOM element on creation.\n * @param {?=} directiveTypes A set of directives declared on this element.\n * @param {?=} localRefs A set of local reference bindings on the element.\n *\n * Attributes and localRefs are passed as an array of strings where elements with an even index\n * hold an attribute name and elements with an odd index hold an attribute value, ex.:\n * ['id', 'warning5', 'class', 'alert']\n * @return {?}\n */\nexport function elementStart(index, nameOrComponentType, attrs, directiveTypes, localRefs) {\n    var /** @type {?} */ node;\n    var /** @type {?} */ native;\n    if (nameOrComponentType == null) {\n        // native node retrieval - used for exporting elements as tpl local variables (<div #foo>)\n        var /** @type {?} */ node_1 = /** @type {?} */ ((data[index]));\n        native = node_1 && (/** @type {?} */ (node_1)).native;\n    }\n    else {\n        ngDevMode &&\n            assertNull(currentView.bindingStartIndex, 'elements should be created before any bindings');\n        var /** @type {?} */ isHostElement = typeof nameOrComponentType !== 'string';\n        // MEGAMORPHIC: `ngComponentDef` is a megamorphic property access here.\n        // This is OK, since we will refactor this code and store the result in `TView.data`\n        // which means that we will be reading this value only once. We are trading clean/simple\n        // template\n        // code for slight startup(first run) performance. (No impact on subsequent runs)\n        // TODO(misko): refactor this to store the `ComponentDef` in `TView.data`.\n        var /** @type {?} */ hostComponentDef = isHostElement ? (/** @type {?} */ (nameOrComponentType)).ngComponentDef : null;\n        var /** @type {?} */ name_1 = isHostElement ? /** @type {?} */ ((hostComponentDef)).tag : /** @type {?} */ (nameOrComponentType);\n        if (name_1 === null) {\n            // TODO: future support for nameless components.\n            throw 'for now name is required';\n        }\n        else {\n            native = renderer.createElement(name_1);\n            var /** @type {?} */ componentView = null;\n            if (isHostElement) {\n                var /** @type {?} */ tView = getOrCreateTView(/** @type {?} */ ((hostComponentDef)).template);\n                var /** @type {?} */ hostView = createLView(-1, rendererFactory.createRenderer(native, /** @type {?} */ ((hostComponentDef)).rendererType), tView, null, null, /** @type {?} */ ((hostComponentDef)).onPush ? 4 /* Dirty */ : 2 /* CheckAlways */);\n                componentView = addToViewTree(hostView);\n            }\n            // Only component views should be added to the view tree directly. Embedded views are\n            // accessed through their containers because they may be removed / re-added later.\n            node = createLNode(index, 3 /* Element */, native, componentView);\n            // TODO(misko): implement code which caches the local reference resolution\n            var /** @type {?} */ queryName = hack_findQueryName(hostComponentDef, localRefs, '');\n            if (node.tNode == null) {\n                ngDevMode && assertDataInRange(index - 1);\n                node.tNode = tData[index] =\n                    createTNode(name_1, attrs || null, null, hostComponentDef ? null : queryName);\n            }\n            if (attrs)\n                setUpAttributes(native, attrs);\n            appendChild(/** @type {?} */ ((node.parent)), native, currentView);\n            if (hostComponentDef) {\n                // TODO(mhevery): This assumes that the directives come in correct order, which\n                // is not guaranteed. Must be refactored to take it into account.\n                var /** @type {?} */ instance = hostComponentDef.n();\n                directiveCreate(++index, instance, hostComponentDef, queryName);\n                initChangeDetectorIfExisting(node.nodeInjector, instance);\n            }\n            hack_declareDirectives(index, directiveTypes, localRefs);\n        }\n    }\n    return native;\n}\n/**\n * Sets the context for a ChangeDetectorRef to the given instance.\n * @param {?} injector\n * @param {?} instance\n * @return {?}\n */\nexport function initChangeDetectorIfExisting(injector, instance) {\n    if (injector && injector.changeDetectorRef != null) {\n        (/** @type {?} */ (injector.changeDetectorRef))._setComponentContext(instance);\n    }\n}\n/**\n * This function instantiates a directive with a correct queryName. It is a hack since we should\n * compute the query value only once and store it with the template (rather than on each invocation)\n * @param {?} index\n * @param {?} directiveTypes\n * @param {?} localRefs\n * @return {?}\n */\nfunction hack_declareDirectives(index, directiveTypes, localRefs) {\n    if (directiveTypes) {\n        // TODO(mhevery): This assumes that the directives come in correct order, which\n        // is not guaranteed. Must be refactored to take it into account.\n        for (var /** @type {?} */ i = 0; i < directiveTypes.length; i++) {\n            // MEGAMORPHIC: `ngDirectiveDef` is a megamorphic property access here.\n            // This is OK, since we will refactor this code and store the result in `TView.data`\n            // which means that we will be reading this value only once. We are trading clean/simple\n            // template\n            // code for slight startup(first run) performance. (No impact on subsequent runs)\n            // TODO(misko): refactor this to store the `DirectiveDef` in `TView.data`.\n            var /** @type {?} */ directiveType = directiveTypes[i];\n            var /** @type {?} */ directiveDef = directiveType.ngDirectiveDef;\n            directiveCreate(++index, directiveDef.n(), directiveDef, hack_findQueryName(directiveDef, localRefs));\n        }\n    }\n}\n/**\n * This function returns the queryName for a directive. It is a hack since we should\n * compute the query value only once and store it with the template (rather than on each invocation)\n * @param {?} directiveDef\n * @param {?} localRefs\n * @param {?=} defaultExport\n * @return {?}\n */\nfunction hack_findQueryName(directiveDef, localRefs, defaultExport) {\n    var /** @type {?} */ exportAs = directiveDef && directiveDef.exportAs || defaultExport;\n    if (exportAs != null && localRefs) {\n        for (var /** @type {?} */ i = 0; i < localRefs.length; i = i + 2) {\n            var /** @type {?} */ local = localRefs[i];\n            var /** @type {?} */ toExportAs = localRefs[i | 1];\n            if (toExportAs === exportAs || toExportAs === defaultExport) {\n                return local;\n            }\n        }\n    }\n    return null;\n}\n/**\n * Gets TView from a template function or creates a new TView\n * if it doesn't already exist.\n *\n * @param {?} template The template from which to get static data\n * @return {?} TView\n */\nfunction getOrCreateTView(template) {\n    return template.ngPrivateData || (template.ngPrivateData = /** @type {?} */ (createTView()));\n}\n/**\n * Creates a TView instance\n * @return {?}\n */\nexport function createTView() {\n    return {\n        data: [],\n        firstTemplatePass: true,\n        initHooks: null,\n        checkHooks: null,\n        contentHooks: null,\n        contentCheckHooks: null,\n        viewHooks: null,\n        viewCheckHooks: null,\n        destroyHooks: null\n    };\n}\n/**\n * @param {?} native\n * @param {?} attrs\n * @return {?}\n */\nfunction setUpAttributes(native, attrs) {\n    ngDevMode && assertEqual(attrs.length % 2, 0, 'each attribute should have a key and a value');\n    var /** @type {?} */ isProc = isProceduralRenderer(renderer);\n    for (var /** @type {?} */ i = 0; i < attrs.length; i += 2) {\n        var /** @type {?} */ attrName = attrs[i];\n        if (attrName !== NG_PROJECT_AS_ATTR_NAME) {\n            var /** @type {?} */ attrVal = attrs[i + 1];\n            isProc ? (/** @type {?} */ (renderer)).setAttribute(native, attrName, attrVal) :\n                native.setAttribute(attrName, attrVal);\n        }\n    }\n}\n/**\n * @param {?} text\n * @param {?} token\n * @return {?}\n */\nexport function createError(text, token) {\n    return new Error(\"Renderer: \" + text + \" [\" + stringify(token) + \"]\");\n}\n/**\n * Locates the host native element, used for bootstrapping existing nodes into rendering pipeline.\n *\n * @param {?} factory\n * @param {?} elementOrSelector Render element or CSS selector to locate the element.\n * @return {?}\n */\nexport function locateHostElement(factory, elementOrSelector) {\n    ngDevMode && assertDataInRange(-1);\n    rendererFactory = factory;\n    var /** @type {?} */ defaultRenderer = factory.createRenderer(null, null);\n    var /** @type {?} */ rNode = typeof elementOrSelector === 'string' ?\n        (isProceduralRenderer(defaultRenderer) ?\n            defaultRenderer.selectRootElement(elementOrSelector) :\n            defaultRenderer.querySelector(elementOrSelector)) :\n        elementOrSelector;\n    if (ngDevMode && !rNode) {\n        if (typeof elementOrSelector === 'string') {\n            throw createError('Host node with selector not found:', elementOrSelector);\n        }\n        else {\n            throw createError('Host node is required:', elementOrSelector);\n        }\n    }\n    return rNode;\n}\n/**\n * Creates the host LNode.\n *\n * @param {?} rNode Render host element.\n * @param {?} def ComponentDef\n *\n * @return {?} LElementNode created\n */\nexport function hostElement(rNode, def) {\n    resetApplicationState();\n    return createLNode(0, 3 /* Element */, rNode, createLView(-1, renderer, getOrCreateTView(def.template), null, null, def.onPush ? 4 /* Dirty */ : 2 /* CheckAlways */));\n}\n/**\n * Adds an event listener to the current node.\n *\n * If an output exists on one of the node's directives, it also subscribes to the output\n * and saves the subscription for later cleanup.\n *\n * @param {?} eventName Name of the event\n * @param {?} listenerFn The function to be called when event emits\n * @param {?=} useCapture Whether or not to use capture in event listener.\n * @return {?}\n */\nexport function listener(eventName, listenerFn, useCapture) {\n    if (useCapture === void 0) { useCapture = false; }\n    ngDevMode && assertPreviousIsParent();\n    var /** @type {?} */ node = previousOrParentNode;\n    var /** @type {?} */ native = /** @type {?} */ (node.native);\n    // In order to match current behavior, native DOM event listeners must be added for all\n    // events (including outputs).\n    var /** @type {?} */ cleanupFns = cleanup || (cleanup = currentView.cleanup = []);\n    if (isProceduralRenderer(renderer)) {\n        var /** @type {?} */ wrappedListener = wrapListenerWithDirtyLogic(currentView, listenerFn);\n        var /** @type {?} */ cleanupFn = renderer.listen(native, eventName, wrappedListener);\n        cleanupFns.push(cleanupFn, null);\n    }\n    else {\n        var /** @type {?} */ wrappedListener = wrapListenerWithDirtyAndDefault(currentView, listenerFn);\n        native.addEventListener(eventName, wrappedListener, useCapture);\n        cleanupFns.push(eventName, native, wrappedListener, useCapture);\n    }\n    var /** @type {?} */ tNode = /** @type {?} */ ((node.tNode));\n    if (tNode.outputs === undefined) {\n        // if we create TNode here, inputs must be undefined so we know they still need to be\n        // checked\n        tNode.outputs = generatePropertyAliases(node.flags, 1 /* Output */);\n    }\n    var /** @type {?} */ outputs = tNode.outputs;\n    var /** @type {?} */ outputData;\n    if (outputs && (outputData = outputs[eventName])) {\n        createOutput(outputData, listenerFn);\n    }\n}\n/**\n * Iterates through the outputs associated with a particular event name and subscribes to\n * each output.\n * @param {?} outputs\n * @param {?} listener\n * @return {?}\n */\nfunction createOutput(outputs, listener) {\n    for (var /** @type {?} */ i = 0; i < outputs.length; i += 2) {\n        ngDevMode && assertDataInRange(/** @type {?} */ (outputs[i]));\n        var /** @type {?} */ subscription = data[/** @type {?} */ (outputs[i])][outputs[i | 1]].subscribe(listener); /** @type {?} */\n        ((cleanup)).push(subscription.unsubscribe, subscription);\n    }\n}\n/**\n * Mark the end of the element.\n * @return {?}\n */\nexport function elementEnd() {\n    if (isParent) {\n        isParent = false;\n    }\n    else {\n        ngDevMode && assertHasParent();\n        previousOrParentNode = /** @type {?} */ ((previousOrParentNode.parent));\n    }\n    ngDevMode && assertNodeType(previousOrParentNode, 3 /* Element */);\n    var /** @type {?} */ queries = previousOrParentNode.queries;\n    queries && queries.addNode(previousOrParentNode);\n    queueLifecycleHooks(previousOrParentNode.flags, currentView);\n}\n/**\n * Updates the value of removes an attribute on an Element.\n *\n * @param {?} index\n * @param {?} name name The name of the attribute.\n * @param {?} value value The attribute is removed when value is `null` or `undefined`.\n *                  Otherwise the attribute value is set to the stringified value.\n * @param {?=} sanitizer An optional function used to sanitize the value.\n * @return {?}\n */\nexport function elementAttribute(index, name, value, sanitizer) {\n    if (value !== NO_CHANGE) {\n        var /** @type {?} */ element = data[index];\n        if (value == null) {\n            isProceduralRenderer(renderer) ? renderer.removeAttribute(element.native, name) :\n                element.native.removeAttribute(name);\n        }\n        else {\n            var /** @type {?} */ strValue = sanitizer == null ? stringify(value) : sanitizer(value);\n            isProceduralRenderer(renderer) ? renderer.setAttribute(element.native, name, strValue) :\n                element.native.setAttribute(name, strValue);\n        }\n    }\n}\n/**\n * Update a property on an Element.\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new \\@Inputs don't have to be re-compiled.\n *\n * @template T\n * @param {?} index The index of the element to update in the data array\n * @param {?} propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param {?} value New value to write.\n * @param {?=} sanitizer An optional function used to sanitize the value.\n * @return {?}\n */\nexport function elementProperty(index, propName, value, sanitizer) {\n    if (value === NO_CHANGE)\n        return;\n    var /** @type {?} */ node = /** @type {?} */ (data[index]);\n    var /** @type {?} */ tNode = /** @type {?} */ ((node.tNode));\n    // if tNode.inputs is undefined, a listener has created outputs, but inputs haven't\n    // yet been checked\n    if (tNode.inputs === undefined) {\n        // mark inputs as checked\n        tNode.inputs = generatePropertyAliases(node.flags, 0 /* Input */);\n    }\n    var /** @type {?} */ inputData = tNode.inputs;\n    var /** @type {?} */ dataValue;\n    if (inputData && (dataValue = inputData[propName])) {\n        setInputsForProperty(dataValue, value);\n        markDirtyIfOnPush(node);\n    }\n    else {\n        // It is assumed that the sanitizer is only added when the compiler determines that the property\n        // is risky, so sanitization can be done without further checks.\n        value = sanitizer != null ? (/** @type {?} */ (sanitizer(value))) : value;\n        var /** @type {?} */ native = node.native;\n        isProceduralRenderer(renderer) ? renderer.setProperty(native, propName, value) :\n            (native.setProperty ? native.setProperty(propName, value) :\n                (/** @type {?} */ (native))[propName] = value);\n    }\n}\n/**\n * Constructs a TNode object from the arguments.\n *\n * @param {?} tagName\n * @param {?} attrs\n * @param {?} data\n * @param {?} localName\n * @return {?} the TNode object\n */\nfunction createTNode(tagName, attrs, data, localName) {\n    return {\n        tagName: tagName,\n        attrs: attrs,\n        localNames: localName ? [localName, -1] : null,\n        initialInputs: undefined,\n        inputs: undefined,\n        outputs: undefined,\n        data: data\n    };\n}\n/**\n * Given a list of directive indices and minified input names, sets the\n * input properties on the corresponding directives.\n * @param {?} inputs\n * @param {?} value\n * @return {?}\n */\nfunction setInputsForProperty(inputs, value) {\n    for (var /** @type {?} */ i = 0; i < inputs.length; i += 2) {\n        ngDevMode && assertDataInRange(/** @type {?} */ (inputs[i]));\n        data[/** @type {?} */ (inputs[i])][inputs[i | 1]] = value;\n    }\n}\n/**\n * Consolidates all inputs or outputs of all directives on this logical node.\n *\n * @param {?} lNodeFlags\n * @param {?} direction\n * @return {?} PropertyAliases|null aggregate of all properties if any, `null` otherwise\n */\nfunction generatePropertyAliases(lNodeFlags, direction) {\n    var /** @type {?} */ size = (lNodeFlags & 4092 /* SIZE_MASK */) >> 2 /* SIZE_SHIFT */;\n    var /** @type {?} */ propStore = null;\n    if (size > 0) {\n        var /** @type {?} */ start = lNodeFlags >> 12 /* INDX_SHIFT */;\n        var /** @type {?} */ isInput = direction === 0 /* Input */;\n        for (var /** @type {?} */ i = start, /** @type {?} */ ii = start + size; i < ii; i++) {\n            var /** @type {?} */ directiveDef = /** @type {?} */ (((tData))[i]);\n            var /** @type {?} */ propertyAliasMap = isInput ? directiveDef.inputs : directiveDef.outputs;\n            for (var /** @type {?} */ publicName in propertyAliasMap) {\n                if (propertyAliasMap.hasOwnProperty(publicName)) {\n                    propStore = propStore || {};\n                    var /** @type {?} */ internalName = propertyAliasMap[publicName];\n                    var /** @type {?} */ hasProperty = propStore.hasOwnProperty(publicName);\n                    hasProperty ? propStore[publicName].push(i, internalName) :\n                        (propStore[publicName] = [i, internalName]);\n                }\n            }\n        }\n    }\n    return propStore;\n}\n/**\n * Add or remove a class in a classList.\n *\n * This instruction is meant to handle the [class.foo]=\"exp\" case\n *\n * @template T\n * @param {?} index The index of the element to update in the data array\n * @param {?} className Name of class to toggle. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param {?} value A value indicating if a given class should be added or removed.\n * @return {?}\n */\nexport function elementClass(index, className, value) {\n    if (value !== NO_CHANGE) {\n        var /** @type {?} */ lElement = /** @type {?} */ (data[index]);\n        if (value) {\n            isProceduralRenderer(renderer) ? renderer.addClass(lElement.native, className) :\n                lElement.native.classList.add(className);\n        }\n        else {\n            isProceduralRenderer(renderer) ? renderer.removeClass(lElement.native, className) :\n                lElement.native.classList.remove(className);\n        }\n    }\n}\n/**\n * @template T\n * @param {?} index\n * @param {?} styleName\n * @param {?} value\n * @param {?=} suffixOrSanitizer\n * @return {?}\n */\nexport function elementStyle(index, styleName, value, suffixOrSanitizer) {\n    if (value !== NO_CHANGE) {\n        var /** @type {?} */ lElement = /** @type {?} */ (data[index]);\n        if (value == null) {\n            isProceduralRenderer(renderer) ?\n                renderer.removeStyle(lElement.native, styleName, RendererStyleFlags3.DashCase) :\n                lElement.native.style.removeProperty(styleName);\n        }\n        else {\n            var /** @type {?} */ strValue = typeof suffixOrSanitizer == 'function' ? suffixOrSanitizer(value) : stringify(value);\n            if (typeof suffixOrSanitizer == 'string')\n                strValue = strValue + suffixOrSanitizer;\n            isProceduralRenderer(renderer) ?\n                renderer.setStyle(lElement.native, styleName, strValue, RendererStyleFlags3.DashCase) :\n                lElement.native.style.setProperty(styleName, strValue);\n        }\n    }\n}\n/**\n * Create static text node\n *\n * @param {?} index Index of the node in the data array.\n * @param {?=} value Value to write. This value will be stringified.\n *   If value is not provided than the actual creation of the text node is delayed.\n * @return {?}\n */\nexport function text(index, value) {\n    ngDevMode &&\n        assertNull(currentView.bindingStartIndex, 'text nodes should be created before bindings');\n    var /** @type {?} */ textNode = value != null ?\n        (isProceduralRenderer(renderer) ? renderer.createText(stringify(value)) :\n            renderer.createTextNode(stringify(value))) :\n        null;\n    var /** @type {?} */ node = createLNode(index, 3 /* Element */, textNode);\n    // Text nodes are self closing.\n    isParent = false;\n    appendChild(/** @type {?} */ ((node.parent)), textNode, currentView);\n}\n/**\n * Create text node with binding\n * Bindings should be handled externally with the proper bind(1-8) method\n *\n * @template T\n * @param {?} index Index of the node in the data array.\n * @param {?} value Stringified value to write.\n * @return {?}\n */\nexport function textBinding(index, value) {\n    ngDevMode && assertDataInRange(index);\n    var /** @type {?} */ existingNode = /** @type {?} */ (data[index]);\n    ngDevMode && assertNotNull(existingNode, 'existing node');\n    if (existingNode.native) {\n        // If DOM node exists and value changed, update textContent\n        value !== NO_CHANGE &&\n            (isProceduralRenderer(renderer) ? renderer.setValue(existingNode.native, stringify(value)) :\n                existingNode.native.textContent = stringify(value));\n    }\n    else {\n        // Node was created but DOM node creation was delayed. Create and append now.\n        existingNode.native = isProceduralRenderer(renderer) ?\n            renderer.createText(stringify(value)) :\n            renderer.createTextNode(stringify(value));\n        insertChild(existingNode, currentView);\n    }\n}\n/**\n * Create a directive.\n *\n * NOTE: directives can be created in order other than the index order. They can also\n *       be retrieved before they are created in which case the value will be null.\n *\n * @template T\n * @param {?} index Each directive in a `View` will have a unique index. Directives can\n *        be created or retrieved out of order.\n * @param {?} directive The directive instance.\n * @param {?} directiveDef DirectiveDef object which contains information about the template.\n * @param {?=} queryName Name under which the query can retrieve the directive instance.\n * @return {?}\n */\nexport function directiveCreate(index, directive, directiveDef, queryName) {\n    var /** @type {?} */ instance;\n    ngDevMode &&\n        assertNull(currentView.bindingStartIndex, 'directives should be created before any bindings');\n    ngDevMode && assertPreviousIsParent();\n    var /** @type {?} */ flags = /** @type {?} */ ((previousOrParentNode)).flags;\n    var /** @type {?} */ size = flags & 4092 /* SIZE_MASK */;\n    if (size === 0) {\n        flags = (index << 12 /* INDX_SHIFT */) | 4 /* SIZE_SKIP */ | flags & 3 /* TYPE_MASK */;\n    }\n    else {\n        flags += 4 /* SIZE_SKIP */;\n    } /** @type {?} */\n    ((previousOrParentNode)).flags = flags;\n    ngDevMode && assertDataInRange(index - 1);\n    Object.defineProperty(directive, NG_HOST_SYMBOL, { enumerable: false, value: previousOrParentNode });\n    data[index] = instance = directive;\n    if (index >= tData.length) {\n        tData[index] = /** @type {?} */ ((directiveDef));\n        if (queryName) {\n            ngDevMode && assertNotNull(previousOrParentNode.tNode, 'previousOrParentNode.tNode');\n            var /** @type {?} */ tNode_1 = /** @type {?} */ ((/** @type {?} */ ((previousOrParentNode)).tNode));\n            (tNode_1.localNames || (tNode_1.localNames = [])).push(queryName, index);\n        }\n    }\n    var /** @type {?} */ diPublic = /** @type {?} */ ((directiveDef)).diPublic;\n    if (diPublic) {\n        diPublic(/** @type {?} */ ((directiveDef)));\n    }\n    if (/** @type {?} */ ((directiveDef)).attributes != null && (previousOrParentNode.flags & 3 /* TYPE_MASK */) == 3 /* Element */) {\n        setUpAttributes((/** @type {?} */ (previousOrParentNode)).native, /** @type {?} */ (((directiveDef)).attributes));\n    }\n    var /** @type {?} */ tNode = /** @type {?} */ ((previousOrParentNode.tNode));\n    if (tNode && tNode.attrs) {\n        setInputsFromAttrs(instance, /** @type {?} */ ((directiveDef)).inputs, tNode);\n    }\n    // Init hooks are queued now so ngOnInit is called in host components before\n    // any projected components.\n    queueInitHooks(index, directiveDef.onInit, directiveDef.doCheck, currentView.tView);\n    return instance;\n}\n/**\n * Sets initial input properties on directive instances from attribute data\n *\n * @template T\n * @param {?} instance Instance of the directive on which to set the initial inputs\n * @param {?} inputs The list of inputs from the directive def\n * @param {?} tNode The static data for this node\n * @return {?}\n */\nfunction setInputsFromAttrs(instance, inputs, tNode) {\n    var /** @type {?} */ directiveIndex = ((previousOrParentNode.flags & 4092 /* SIZE_MASK */) >> 2 /* SIZE_SHIFT */) - 1;\n    var /** @type {?} */ initialInputData = /** @type {?} */ (tNode.initialInputs);\n    if (initialInputData === undefined || directiveIndex >= initialInputData.length) {\n        initialInputData = generateInitialInputs(directiveIndex, inputs, tNode);\n    }\n    var /** @type {?} */ initialInputs = initialInputData[directiveIndex];\n    if (initialInputs) {\n        for (var /** @type {?} */ i = 0; i < initialInputs.length; i += 2) {\n            (/** @type {?} */ (instance))[initialInputs[i]] = initialInputs[i | 1];\n        }\n    }\n}\n/**\n * Generates initialInputData for a node and stores it in the template's static storage\n * so subsequent template invocations don't have to recalculate it.\n *\n * initialInputData is an array containing values that need to be set as input properties\n * for directives on this node, but only once on creation. We need this array to support\n * the case where you set an \\@Input property of a directive using attribute-like syntax.\n * e.g. if you have a `name` \\@Input, you can set it once like this:\n *\n * <my-component name=\"Bess\"></my-component>\n *\n * @param {?} directiveIndex Index to store the initial input data\n * @param {?} inputs The list of inputs from the directive def\n * @param {?} tNode The static data on this node\n * @return {?}\n */\nfunction generateInitialInputs(directiveIndex, inputs, tNode) {\n    var /** @type {?} */ initialInputData = tNode.initialInputs || (tNode.initialInputs = []);\n    initialInputData[directiveIndex] = null;\n    var /** @type {?} */ attrs = /** @type {?} */ ((tNode.attrs));\n    for (var /** @type {?} */ i = 0; i < attrs.length; i += 2) {\n        var /** @type {?} */ attrName = attrs[i];\n        var /** @type {?} */ minifiedInputName = inputs[attrName];\n        if (minifiedInputName !== undefined) {\n            var /** @type {?} */ inputsToStore = initialInputData[directiveIndex] || (initialInputData[directiveIndex] = []);\n            inputsToStore.push(minifiedInputName, attrs[i | 1]);\n        }\n    }\n    return initialInputData;\n}\n/**\n * Creates an LContainerNode.\n *\n * Only `LViewNodes` can go into `LContainerNodes`.\n *\n * @param {?} index The index of the container in the data array\n * @param {?=} directiveTypes\n * @param {?=} template Optional inline template\n * @param {?=} tagName The name of the container element, if applicable\n * @param {?=} attrs The attrs attached to the container, if applicable\n * @param {?=} localRefs A set of local reference bindings on the element.\n * @return {?}\n */\nexport function container(index, directiveTypes, template, tagName, attrs, localRefs) {\n    ngDevMode &&\n        assertNull(currentView.bindingStartIndex, 'container nodes should be created before any bindings');\n    var /** @type {?} */ currentParent = isParent ? previousOrParentNode : /** @type {?} */ ((previousOrParentNode.parent));\n    ngDevMode && assertNotNull(currentParent, 'containers should have a parent');\n    var /** @type {?} */ lContainer = /** @type {?} */ ({\n        views: [],\n        nextIndex: 0,\n        // If the direct parent of the container is a view, its views will need to be added\n        // through insertView() when its parent view is being inserted:\n        renderParent: canInsertNativeNode(currentParent, currentView) ? currentParent : null,\n        template: template == null ? null : template,\n        next: null,\n        parent: currentView,\n        dynamicViewCount: 0,\n        queries: null\n    });\n    var /** @type {?} */ node = createLNode(index, 0 /* Container */, undefined, lContainer);\n    if (node.tNode == null) {\n        // TODO(misko): implement queryName caching\n        var /** @type {?} */ queryName = hack_findQueryName(null, localRefs, '');\n        node.tNode = tData[index] = createTNode(tagName || null, attrs || null, [], queryName || null);\n    }\n    // Containers are added to the current view tree instead of their embedded views\n    // because views can be removed and re-inserted.\n    addToViewTree(node.data);\n    hack_declareDirectives(index, directiveTypes, localRefs);\n    isParent = false;\n    ngDevMode && assertNodeType(previousOrParentNode, 0 /* Container */);\n    var /** @type {?} */ queries = node.queries;\n    if (queries) {\n        // check if a given container node matches\n        queries.addNode(node);\n        // prepare place for matching nodes from views inserted into a given container\n        lContainer.queries = queries.container();\n    }\n}\n/**\n * Sets a container up to receive views.\n *\n * @param {?} index The index of the container in the data array\n * @return {?}\n */\nexport function containerRefreshStart(index) {\n    ngDevMode && assertDataInRange(index);\n    previousOrParentNode = /** @type {?} */ (data[index]);\n    ngDevMode && assertNodeType(previousOrParentNode, 0 /* Container */);\n    isParent = true;\n    (/** @type {?} */ (previousOrParentNode)).data.nextIndex = 0;\n    ngDevMode && assertSame((/** @type {?} */ (previousOrParentNode)).native, undefined, \"the container's native element should not have been set yet.\");\n    if (!checkNoChangesMode) {\n        // We need to execute init hooks here so ngOnInit hooks are called in top level views\n        // before they are called in embedded views (for backwards compatibility).\n        executeInitHooks(currentView, currentView.tView, creationMode);\n    }\n}\n/**\n * Marks the end of the LContainerNode.\n *\n * Marking the end of LContainerNode is the time when to child Views get inserted or removed.\n * @return {?}\n */\nexport function containerRefreshEnd() {\n    if (isParent) {\n        isParent = false;\n    }\n    else {\n        ngDevMode && assertNodeType(previousOrParentNode, 2 /* View */);\n        ngDevMode && assertHasParent();\n        previousOrParentNode = /** @type {?} */ ((previousOrParentNode.parent));\n    }\n    ngDevMode && assertNodeType(previousOrParentNode, 0 /* Container */);\n    var /** @type {?} */ container = /** @type {?} */ (previousOrParentNode);\n    container.native = undefined;\n    ngDevMode && assertNodeType(container, 0 /* Container */);\n    var /** @type {?} */ nextIndex = container.data.nextIndex;\n    while (nextIndex < container.data.views.length) {\n        // remove extra view.\n        removeView(container, nextIndex);\n    }\n}\n/**\n * @return {?}\n */\nfunction refreshDynamicChildren() {\n    for (var /** @type {?} */ current = currentView.child; current !== null; current = current.next) {\n        if (current.dynamicViewCount !== 0 && (/** @type {?} */ (current)).views) {\n            var /** @type {?} */ container_1 = /** @type {?} */ (current);\n            for (var /** @type {?} */ i = 0; i < container_1.views.length; i++) {\n                var /** @type {?} */ view = container_1.views[i];\n                renderEmbeddedTemplate(view, /** @type {?} */ ((view.data.template)), /** @type {?} */ ((view.data.context)), renderer);\n            }\n        }\n    }\n}\n/**\n * Marks the start of an embedded view.\n *\n * @param {?} viewBlockId The ID of this view\n * @return {?} boolean Whether or not this view is in creation mode\n */\nexport function embeddedViewStart(viewBlockId) {\n    var /** @type {?} */ container = /** @type {?} */ ((isParent ? previousOrParentNode : /** @type {?} */ ((previousOrParentNode.parent))));\n    ngDevMode && assertNodeType(container, 0 /* Container */);\n    var /** @type {?} */ lContainer = container.data;\n    var /** @type {?} */ views = lContainer.views;\n    var /** @type {?} */ existingView = !creationMode && lContainer.nextIndex < views.length && views[lContainer.nextIndex];\n    var /** @type {?} */ viewUpdateMode = existingView && viewBlockId === (/** @type {?} */ (existingView)).data.id;\n    if (viewUpdateMode) {\n        previousOrParentNode = views[lContainer.nextIndex++];\n        ngDevMode && assertNodeType(previousOrParentNode, 2 /* View */);\n        isParent = true;\n        enterView((/** @type {?} */ (existingView)).data, /** @type {?} */ (previousOrParentNode));\n    }\n    else {\n        // When we create a new LView, we always reset the state of the instructions.\n        var /** @type {?} */ newView = createLView(viewBlockId, renderer, getOrCreateEmbeddedTView(viewBlockId, container), null, null, 2 /* CheckAlways */);\n        if (lContainer.queries) {\n            newView.queries = lContainer.queries.enterView(lContainer.nextIndex);\n        }\n        enterView(newView, createLNode(null, 2 /* View */, null, newView));\n        lContainer.nextIndex++;\n    }\n    return !viewUpdateMode;\n}\n/**\n * Initialize the TView (e.g. static data) for the active embedded view.\n *\n * Each embedded view needs to set the global tData variable to the static data for\n * that view. Otherwise, the view's static data for a particular node would overwrite\n * the static data for a node in the view above it with the same index (since it's in the\n * same template).\n *\n * @param {?} viewIndex The index of the TView in TContainer\n * @param {?} parent The parent container in which to look for the view's static data\n * @return {?} TView\n */\nfunction getOrCreateEmbeddedTView(viewIndex, parent) {\n    ngDevMode && assertNodeType(parent, 0 /* Container */);\n    var /** @type {?} */ tContainer = (/** @type {?} */ (((parent)).tNode)).data;\n    if (viewIndex >= tContainer.length || tContainer[viewIndex] == null) {\n        tContainer[viewIndex] = createTView();\n    }\n    return tContainer[viewIndex];\n}\n/**\n * Marks the end of an embedded view.\n * @return {?}\n */\nexport function embeddedViewEnd() {\n    isParent = false;\n    var /** @type {?} */ viewNode = previousOrParentNode = /** @type {?} */ (currentView.node);\n    var /** @type {?} */ container = /** @type {?} */ (previousOrParentNode.parent);\n    if (container) {\n        ngDevMode && assertNodeType(viewNode, 2 /* View */);\n        ngDevMode && assertNodeType(container, 0 /* Container */);\n        var /** @type {?} */ containerState = container.data;\n        var /** @type {?} */ previousView = containerState.nextIndex <= containerState.views.length ? /** @type {?} */ (containerState.views[containerState.nextIndex - 1]) :\n            null;\n        var /** @type {?} */ viewIdChanged = previousView == null ? true : previousView.data.id !== viewNode.data.id;\n        if (viewIdChanged) {\n            insertView(container, viewNode, containerState.nextIndex - 1);\n        }\n    }\n    leaveView(/** @type {?} */ ((/** @type {?} */ ((currentView)).parent)));\n    ngDevMode && assertEqual(isParent, false, 'isParent');\n    ngDevMode && assertNodeType(previousOrParentNode, 2 /* View */);\n}\n/**\n * Refreshes the directive, triggering init and content hooks.\n *\n * When it is a component, it also enters the component's view and processes it to update bindings,\n * queries, etc.\n *\n * @template T\n * @param {?} directiveIndex\n * @param {?} elementIndex\n * @return {?}\n */\nexport function directiveRefresh(directiveIndex, elementIndex) {\n    if (!checkNoChangesMode) {\n        executeInitHooks(currentView, currentView.tView, creationMode);\n        executeContentHooks(currentView, currentView.tView, creationMode);\n    }\n    var /** @type {?} */ template = (/** @type {?} */ (tData[directiveIndex])).template;\n    if (template != null) {\n        ngDevMode && assertDataInRange(elementIndex);\n        var /** @type {?} */ element = /** @type {?} */ (((data))[elementIndex]);\n        ngDevMode && assertNodeType(element, 3 /* Element */);\n        ngDevMode &&\n            assertNotNull(element.data, \"Component's host node should have an LView attached.\");\n        var /** @type {?} */ hostView = /** @type {?} */ ((element.data));\n        // Only attached CheckAlways components or attached, dirty OnPush components should be checked\n        if (viewAttached(hostView) && hostView.flags & (2 /* CheckAlways */ | 4 /* Dirty */)) {\n            ngDevMode && assertDataInRange(directiveIndex);\n            detectChangesInternal(hostView, element, getDirectiveInstance(data[directiveIndex]));\n        }\n    }\n}\n/**\n * Returns a boolean for whether the view is attached\n * @param {?} view\n * @return {?}\n */\nfunction viewAttached(view) {\n    return (view.flags & 8 /* Attached */) === 8 /* Attached */;\n}\n/**\n * Instruction to distribute projectable nodes among <ng-content> occurrences in a given template.\n * It takes all the selectors from the entire component's template and decides where\n * each projected node belongs (it re-distributes nodes among \"buckets\" where each \"bucket\" is\n * backed by a selector).\n *\n * This function requires CSS selectors to be provided in 2 forms: parsed (by a compiler) and text,\n * un-parsed form.\n *\n * The parsed form is needed for efficient matching of a node against a given CSS selector.\n * The un-parsed, textual form is needed for support of the ngProjectAs attribute.\n *\n * Having a CSS selector in 2 different formats is not ideal, but alternatives have even more\n * drawbacks:\n * - having only a textual form would require runtime parsing of CSS selectors;\n * - we can't have only a parsed as we can't re-construct textual form from it (as entered by a\n * template author).\n *\n * @param {?} index\n * @param {?=} selectors A collection of parsed CSS selectors\n * @param {?=} textSelectors\n * @return {?}\n */\nexport function projectionDef(index, selectors, textSelectors) {\n    var /** @type {?} */ noOfNodeBuckets = selectors ? selectors.length + 1 : 1;\n    var /** @type {?} */ distributedNodes = new Array(noOfNodeBuckets);\n    for (var /** @type {?} */ i = 0; i < noOfNodeBuckets; i++) {\n        distributedNodes[i] = [];\n    }\n    var /** @type {?} */ componentNode = findComponentHost(currentView);\n    var /** @type {?} */ componentChild = componentNode.child;\n    while (componentChild !== null) {\n        // execute selector matching logic if and only if:\n        // - there are selectors defined\n        // - a node has a tag name / attributes that can be matched\n        if (selectors && componentChild.tNode) {\n            var /** @type {?} */ matchedIdx = matchingSelectorIndex(componentChild.tNode, selectors, /** @type {?} */ ((textSelectors)));\n            distributedNodes[matchedIdx].push(componentChild);\n        }\n        else {\n            distributedNodes[0].push(componentChild);\n        }\n        componentChild = componentChild.next;\n    }\n    ngDevMode && assertDataNext(index);\n    data[index] = distributedNodes;\n}\n/**\n * Updates the linked list of a projection node, by appending another linked list.\n *\n * @param {?} projectionNode Projection node whose projected nodes linked list has to be updated\n * @param {?} appendedFirst First node of the linked list to append.\n * @param {?} appendedLast Last node of the linked list to append.\n * @return {?}\n */\nfunction appendToProjectionNode(projectionNode, appendedFirst, appendedLast) {\n    ngDevMode && assertEqual(!!appendedFirst, !!appendedLast, 'appendedFirst can be null if and only if appendedLast is also null');\n    if (!appendedLast) {\n        // nothing to append\n        return;\n    }\n    var /** @type {?} */ projectionNodeData = projectionNode.data;\n    if (projectionNodeData.tail) {\n        projectionNodeData.tail.pNextOrParent = appendedFirst;\n    }\n    else {\n        projectionNodeData.head = appendedFirst;\n    }\n    projectionNodeData.tail = appendedLast;\n    appendedLast.pNextOrParent = projectionNode;\n}\n/**\n * Inserts previously re-distributed projected nodes. This instruction must be preceded by a call\n * to the projectionDef instruction.\n *\n * @param {?} nodeIndex\n * @param {?} localIndex - index under which distribution of projected nodes was memorized\n * @param {?=} selectorIndex - 0 means <ng-content> without any selector\n * @param {?=} attrs - attributes attached to the ng-content node, if present\n * @return {?}\n */\nexport function projection(nodeIndex, localIndex, selectorIndex, attrs) {\n    if (selectorIndex === void 0) { selectorIndex = 0; }\n    var /** @type {?} */ node = createLNode(nodeIndex, 1 /* Projection */, null, { head: null, tail: null });\n    if (node.tNode == null) {\n        node.tNode = createTNode(null, attrs || null, null, null);\n    }\n    isParent = false; // self closing\n    var /** @type {?} */ currentParent = node.parent;\n    // re-distribution of projectable nodes is memorized on a component's view level\n    var /** @type {?} */ componentNode = findComponentHost(currentView);\n    // make sure that nodes to project were memorized\n    var /** @type {?} */ nodesForSelector = /** @type {?} */ ((/** @type {?} */ ((componentNode.data)).data))[localIndex][selectorIndex];\n    // build the linked list of projected nodes:\n    for (var /** @type {?} */ i = 0; i < nodesForSelector.length; i++) {\n        var /** @type {?} */ nodeToProject = nodesForSelector[i];\n        if ((nodeToProject.flags & 3 /* TYPE_MASK */) === 1 /* Projection */) {\n            var /** @type {?} */ previouslyProjected = (/** @type {?} */ (nodeToProject)).data;\n            appendToProjectionNode(node, previouslyProjected.head, previouslyProjected.tail);\n        }\n        else {\n            appendToProjectionNode(node, /** @type {?} */ (nodeToProject), /** @type {?} */ (nodeToProject));\n        }\n    }\n    if (canInsertNativeNode(currentParent, currentView)) {\n        // process each node in the list of projected nodes:\n        var /** @type {?} */ nodeToProject = node.data.head;\n        var /** @type {?} */ lastNodeToProject = node.data.tail;\n        while (nodeToProject) {\n            appendProjectedNode(/** @type {?} */ (nodeToProject), currentParent, currentView);\n            nodeToProject = nodeToProject === lastNodeToProject ? null : nodeToProject.pNextOrParent;\n        }\n    }\n}\n/**\n * Given a current view, finds the nearest component's host (LElement).\n *\n * @param {?} lView LView for which we want a host element node\n * @return {?} The host node\n */\nfunction findComponentHost(lView) {\n    var /** @type {?} */ viewRootLNode = lView.node;\n    while ((viewRootLNode.flags & 3 /* TYPE_MASK */) === 2 /* View */) {\n        ngDevMode && assertNotNull(lView.parent, 'lView.parent');\n        lView = /** @type {?} */ ((lView.parent));\n        viewRootLNode = lView.node;\n    }\n    ngDevMode && assertNodeType(viewRootLNode, 3 /* Element */);\n    ngDevMode && assertNotNull(viewRootLNode.data, 'node.data');\n    return /** @type {?} */ (viewRootLNode);\n}\n/**\n * Adds a LView or a LContainer to the end of the current view tree.\n *\n * This structure will be used to traverse through nested views to remove listeners\n * and call onDestroy callbacks.\n *\n * @template T\n * @param {?} state The LView or LContainer to add to the view tree\n * @return {?} The state passed in\n */\nexport function addToViewTree(state) {\n    currentView.tail ? (currentView.tail.next = state) : (currentView.child = state);\n    currentView.tail = state;\n    return state;\n}\n/**\n * If node is an OnPush component, marks its LView dirty.\n * @param {?} node\n * @return {?}\n */\nexport function markDirtyIfOnPush(node) {\n    // Because data flows down the component tree, ancestors do not need to be marked dirty\n    if (node.data && !(node.data.flags & 2 /* CheckAlways */)) {\n        node.data.flags |= 4 /* Dirty */;\n    }\n}\n/**\n * Wraps an event listener so its host view and its ancestor views will be marked dirty\n * whenever the event fires. Necessary to support OnPush components.\n * @param {?} view\n * @param {?} listenerFn\n * @return {?}\n */\nexport function wrapListenerWithDirtyLogic(view, listenerFn) {\n    return function (e) {\n        markViewDirty(view);\n        return listenerFn(e);\n    };\n}\n/**\n * Wraps an event listener so its host view and its ancestor views will be marked dirty\n * whenever the event fires. Also wraps with preventDefault behavior.\n * @param {?} view\n * @param {?} listenerFn\n * @return {?}\n */\nexport function wrapListenerWithDirtyAndDefault(view, listenerFn) {\n    return function (e) {\n        markViewDirty(view);\n        if (listenerFn(e) === false) {\n            e.preventDefault();\n            // Necessary for legacy browsers that don't support preventDefault (e.g. IE)\n            e.returnValue = false;\n        }\n    };\n}\n/**\n * Marks current view and all ancestors dirty\n * @param {?} view\n * @return {?}\n */\nexport function markViewDirty(view) {\n    var /** @type {?} */ currentView = view;\n    while (currentView.parent != null) {\n        currentView.flags |= 4 /* Dirty */;\n        currentView = currentView.parent;\n    }\n    currentView.flags |= 4 /* Dirty */;\n    ngDevMode && assertNotNull(/** @type {?} */ ((currentView)).context, 'rootContext');\n    scheduleTick(/** @type {?} */ (((currentView)).context));\n}\n/**\n * Used to schedule change detection on the whole application.\n *\n * Unlike `tick`, `scheduleTick` coalesces multiple calls into one change detection run.\n * It is usually called indirectly by calling `markDirty` when the view needs to be\n * re-rendered.\n *\n * Typically `scheduleTick` uses `requestAnimationFrame` to coalesce multiple\n * `scheduleTick` requests. The scheduling function can be overridden in\n * `renderComponent`'s `scheduler` option.\n * @template T\n * @param {?} rootContext\n * @return {?}\n */\nexport function scheduleTick(rootContext) {\n    if (rootContext.clean == _CLEAN_PROMISE) {\n        var /** @type {?} */ res_1;\n        rootContext.clean = new Promise(function (r) { return res_1 = r; });\n        rootContext.scheduler(function () {\n            tick(rootContext.component); /** @type {?} */\n            ((res_1))(null);\n            rootContext.clean = _CLEAN_PROMISE;\n        });\n    }\n}\n/**\n * Used to perform change detection on the whole application.\n *\n * This is equivalent to `detectChanges`, but invoked on root component. Additionally, `tick`\n * executes lifecycle hooks and conditionally checks components based on their\n * `ChangeDetectionStrategy` and dirtiness.\n *\n * The preferred way to trigger change detection is to call `markDirty`. `markDirty` internally\n * schedules `tick` using a scheduler in order to coalesce multiple `markDirty` calls into a\n * single change detection run. By default, the scheduler is `requestAnimationFrame`, but can\n * be changed when calling `renderComponent` and providing the `scheduler` option.\n * @template T\n * @param {?} component\n * @return {?}\n */\nexport function tick(component) {\n    var /** @type {?} */ rootView = getRootView(component);\n    var /** @type {?} */ rootComponent = (/** @type {?} */ (rootView.context)).component;\n    var /** @type {?} */ hostNode = _getComponentHostLElementNode(rootComponent);\n    ngDevMode && assertNotNull(hostNode.data, 'Component host node should be attached to an LView');\n    renderComponentOrTemplate(hostNode, rootView, rootComponent);\n}\n/**\n * Retrieve the root view from any component by walking the parent `LView` until\n * reaching the root `LView`.\n *\n * @param {?} component any component\n * @return {?}\n */\nexport function getRootView(component) {\n    ngDevMode && assertNotNull(component, 'component');\n    var /** @type {?} */ lElementNode = _getComponentHostLElementNode(component);\n    var /** @type {?} */ lView = lElementNode.view;\n    while (lView.parent) {\n        lView = lView.parent;\n    }\n    return lView;\n}\n/**\n * Synchronously perform change detection on a component (and possibly its sub-components).\n *\n * This function triggers change detection in a synchronous way on a component. There should\n * be very little reason to call this function directly since a preferred way to do change\n * detection is to {\\@link markDirty} the component and wait for the scheduler to call this method\n * at some future point in time. This is because a single user action often results in many\n * components being invalidated and calling change detection on each component synchronously\n * would be inefficient. It is better to wait until all components are marked as dirty and\n * then perform single change detection across all of the components\n *\n * @template T\n * @param {?} component The component which the change detection should be performed on.\n * @return {?}\n */\nexport function detectChanges(component) {\n    var /** @type {?} */ hostNode = _getComponentHostLElementNode(component);\n    ngDevMode && assertNotNull(hostNode.data, 'Component host node should be attached to an LView');\n    detectChangesInternal(/** @type {?} */ (hostNode.data), hostNode, component);\n}\n/**\n * Checks the change detector and its children, and throws if any changes are detected.\n *\n * This is used in development mode to verify that running change detection doesn't\n * introduce other changes.\n * @template T\n * @param {?} component\n * @return {?}\n */\nexport function checkNoChanges(component) {\n    checkNoChangesMode = true;\n    try {\n        detectChanges(component);\n    }\n    finally {\n        checkNoChangesMode = false;\n    }\n}\n/**\n * Throws an ExpressionChangedAfterChecked error if checkNoChanges mode is on.\n * @param {?} oldValue\n * @param {?} currValue\n * @return {?}\n */\nfunction throwErrorIfNoChangesMode(oldValue, currValue) {\n    if (checkNoChangesMode) {\n        var /** @type {?} */ msg = \"ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '\" + oldValue + \"'. Current value: '\" + currValue + \"'.\";\n        if (creationMode) {\n            msg +=\n                \" It seems like the view has been created after its parent and its children have been dirty checked.\" +\n                    \" Has it been created in a change detection hook ?\";\n        }\n        // TODO: include debug context\n        throw new Error(msg);\n    }\n}\n/**\n * Checks the view of the component provided. Does not gate on dirty checks or execute doCheck.\n * @template T\n * @param {?} hostView\n * @param {?} hostNode\n * @param {?} component\n * @return {?}\n */\nfunction detectChangesInternal(hostView, hostNode, component) {\n    var /** @type {?} */ componentIndex = hostNode.flags >> 12 /* INDX_SHIFT */;\n    var /** @type {?} */ template = (/** @type {?} */ (hostNode.view.tView.data[componentIndex])).template;\n    var /** @type {?} */ oldView = enterView(hostView, hostNode);\n    if (template != null) {\n        try {\n            template(component, creationMode);\n        }\n        finally {\n            refreshDynamicChildren();\n            leaveView(oldView);\n        }\n    }\n}\n/**\n * Mark the component as dirty (needing change detection).\n *\n * Marking a component dirty will schedule a change detection on this\n * component at some point in the future. Marking an already dirty\n * component as dirty is a noop. Only one outstanding change detection\n * can be scheduled per component tree. (Two components bootstrapped with\n * separate `renderComponent` will have separate schedulers)\n *\n * When the root component is bootstrapped with `renderComponent`, a scheduler\n * can be provided.\n *\n * @template T\n * @param {?} component Component to mark as dirty.\n * @return {?}\n */\nexport function markDirty(component) {\n    ngDevMode && assertNotNull(component, 'component');\n    var /** @type {?} */ lElementNode = _getComponentHostLElementNode(component);\n    markViewDirty(lElementNode.view);\n}\n/**\n * A special value which designates that a value has not changed.\n */\nexport var /** @type {?} */ NO_CHANGE = /** @type {?} */ ({});\n/**\n *  Initializes the binding start index. Will get inlined.\n *\n *  This function must be called before any binding related function is called\n *  (ie `bind()`, `interpolationX()`, `pureFunctionX()`)\n * @return {?}\n */\nfunction initBindings() {\n    // `bindingIndex` is initialized when the view is first entered when not in creation mode\n    ngDevMode &&\n        assertEqual(creationMode, true, 'should only be called in creationMode for performance reasons');\n    if (currentView.bindingStartIndex == null) {\n        bindingIndex = currentView.bindingStartIndex = data.length;\n    }\n}\n/**\n * Creates a single value binding.\n *\n * @template T\n * @param {?} value Value to diff\n * @return {?}\n */\nexport function bind(value) {\n    if (creationMode) {\n        initBindings();\n        return data[bindingIndex++] = value;\n    }\n    var /** @type {?} */ changed = value !== NO_CHANGE && isDifferent(data[bindingIndex], value);\n    if (changed) {\n        throwErrorIfNoChangesMode(data[bindingIndex], value);\n        data[bindingIndex] = value;\n    }\n    bindingIndex++;\n    return changed ? value : NO_CHANGE;\n}\n/**\n * Create interpolation bindings with a variable number of expressions.\n *\n * If there are 1 to 8 expressions `interpolation1()` to `interpolation8()` should be used instead.\n * Those are faster because there is no need to create an array of expressions and iterate over it.\n *\n * `values`:\n * - has static text at even indexes,\n * - has evaluated expressions at odd indexes.\n *\n * Returns the concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n * @param {?} values\n * @return {?}\n */\nexport function interpolationV(values) {\n    ngDevMode && assertLessThan(2, values.length, 'should have at least 3 values');\n    ngDevMode && assertEqual(values.length % 2, 1, 'should have an odd number of values');\n    var /** @type {?} */ different = false;\n    for (var /** @type {?} */ i = 1; i < values.length; i += 2) {\n        // Check if bindings (odd indexes) have changed\n        bindingUpdated(values[i]) && (different = true);\n    }\n    if (!different) {\n        return NO_CHANGE;\n    }\n    // Build the updated content\n    var /** @type {?} */ content = values[0];\n    for (var /** @type {?} */ i = 1; i < values.length; i += 2) {\n        content += stringify(values[i]) + values[i + 1];\n    }\n    return content;\n}\n/**\n * Creates an interpolation binding with 1 expression.\n *\n * @param {?} prefix static value used for concatenation only.\n * @param {?} v0 value checked for change.\n * @param {?} suffix static value used for concatenation only.\n * @return {?}\n */\nexport function interpolation1(prefix, v0, suffix) {\n    var /** @type {?} */ different = bindingUpdated(v0);\n    return different ? prefix + stringify(v0) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 2 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} suffix\n * @return {?}\n */\nexport function interpolation2(prefix, v0, i0, v1, suffix) {\n    var /** @type {?} */ different = bindingUpdated2(v0, v1);\n    return different ? prefix + stringify(v0) + i0 + stringify(v1) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation bindings with 3 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} suffix\n * @return {?}\n */\nexport function interpolation3(prefix, v0, i0, v1, i1, v2, suffix) {\n    var /** @type {?} */ different = bindingUpdated2(v0, v1);\n    different = bindingUpdated(v2) || different;\n    return different ? prefix + stringify(v0) + i0 + stringify(v1) + i1 + stringify(v2) + suffix :\n        NO_CHANGE;\n}\n/**\n * Create an interpolation binding with 4 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} suffix\n * @return {?}\n */\nexport function interpolation4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\n    var /** @type {?} */ different = bindingUpdated4(v0, v1, v2, v3);\n    return different ?\n        prefix + stringify(v0) + i0 + stringify(v1) + i1 + stringify(v2) + i2 + stringify(v3) +\n            suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 5 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} i3\n * @param {?} v4\n * @param {?} suffix\n * @return {?}\n */\nexport function interpolation5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\n    var /** @type {?} */ different = bindingUpdated4(v0, v1, v2, v3);\n    different = bindingUpdated(v4) || different;\n    return different ?\n        prefix + stringify(v0) + i0 + stringify(v1) + i1 + stringify(v2) + i2 + stringify(v3) + i3 +\n            stringify(v4) + suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 6 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} i3\n * @param {?} v4\n * @param {?} i4\n * @param {?} v5\n * @param {?} suffix\n * @return {?}\n */\nexport function interpolation6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\n    var /** @type {?} */ different = bindingUpdated4(v0, v1, v2, v3);\n    different = bindingUpdated2(v4, v5) || different;\n    return different ?\n        prefix + stringify(v0) + i0 + stringify(v1) + i1 + stringify(v2) + i2 + stringify(v3) + i3 +\n            stringify(v4) + i4 + stringify(v5) + suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 7 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} i3\n * @param {?} v4\n * @param {?} i4\n * @param {?} v5\n * @param {?} i5\n * @param {?} v6\n * @param {?} suffix\n * @return {?}\n */\nexport function interpolation7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\n    var /** @type {?} */ different = bindingUpdated4(v0, v1, v2, v3);\n    different = bindingUpdated2(v4, v5) || different;\n    different = bindingUpdated(v6) || different;\n    return different ?\n        prefix + stringify(v0) + i0 + stringify(v1) + i1 + stringify(v2) + i2 + stringify(v3) + i3 +\n            stringify(v4) + i4 + stringify(v5) + i5 + stringify(v6) + suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 8 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} i3\n * @param {?} v4\n * @param {?} i4\n * @param {?} v5\n * @param {?} i5\n * @param {?} v6\n * @param {?} i6\n * @param {?} v7\n * @param {?} suffix\n * @return {?}\n */\nexport function interpolation8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\n    var /** @type {?} */ different = bindingUpdated4(v0, v1, v2, v3);\n    different = bindingUpdated4(v4, v5, v6, v7) || different;\n    return different ?\n        prefix + stringify(v0) + i0 + stringify(v1) + i1 + stringify(v2) + i2 + stringify(v3) + i3 +\n            stringify(v4) + i4 + stringify(v5) + i5 + stringify(v6) + i6 + stringify(v7) + suffix :\n        NO_CHANGE;\n}\n/**\n * Store a value in the `data` at a given `index`.\n * @template T\n * @param {?} index\n * @param {?} value\n * @return {?}\n */\nexport function store(index, value) {\n    // We don't store any static data for local variables, so the first time\n    // we see the template, we should store as null to avoid a sparse array\n    if (index >= tData.length) {\n        tData[index] = null;\n    }\n    data[index] = value;\n}\n/**\n * Retrieves a value from the `data`.\n * @template T\n * @param {?} index\n * @return {?}\n */\nexport function load(index) {\n    ngDevMode && assertDataInRange(index, data);\n    return data[index];\n}\n/**\n * Gets the current binding value and increments the binding index.\n * @return {?}\n */\nexport function consumeBinding() {\n    ngDevMode && assertDataInRange(bindingIndex);\n    ngDevMode &&\n        assertNotEqual(data[bindingIndex], NO_CHANGE, 'Stored value should never be NO_CHANGE.');\n    return data[bindingIndex++];\n}\n/**\n * Updates binding if changed, then returns whether it was updated.\n * @param {?} value\n * @return {?}\n */\nexport function bindingUpdated(value) {\n    ngDevMode && assertNotEqual(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');\n    if (creationMode) {\n        initBindings();\n    }\n    else if (isDifferent(data[bindingIndex], value)) {\n        throwErrorIfNoChangesMode(data[bindingIndex], value);\n    }\n    else {\n        bindingIndex++;\n        return false;\n    }\n    data[bindingIndex++] = value;\n    return true;\n}\n/**\n * Updates binding if changed, then returns the latest value.\n * @param {?} value\n * @return {?}\n */\nexport function checkAndUpdateBinding(value) {\n    bindingUpdated(value);\n    return value;\n}\n/**\n * Updates 2 bindings if changed, then returns whether either was updated.\n * @param {?} exp1\n * @param {?} exp2\n * @return {?}\n */\nexport function bindingUpdated2(exp1, exp2) {\n    var /** @type {?} */ different = bindingUpdated(exp1);\n    return bindingUpdated(exp2) || different;\n}\n/**\n * Updates 4 bindings if changed, then returns whether any was updated.\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @return {?}\n */\nexport function bindingUpdated4(exp1, exp2, exp3, exp4) {\n    var /** @type {?} */ different = bindingUpdated2(exp1, exp2);\n    return bindingUpdated2(exp3, exp4) || different;\n}\n/**\n * @return {?}\n */\nexport function getTView() {\n    return currentView.tView;\n}\n/**\n * @template T\n * @param {?} instanceOrArray\n * @return {?}\n */\nexport function getDirectiveInstance(instanceOrArray) {\n    // Directives with content queries store an array in data[directiveIndex]\n    // with the instance as the first index\n    return Array.isArray(instanceOrArray) ? instanceOrArray[0] : instanceOrArray;\n}\n/**\n * @return {?}\n */\nexport function assertPreviousIsParent() {\n    assertEqual(isParent, true, 'previousOrParentNode should be a parent');\n}\n/**\n * @return {?}\n */\nfunction assertHasParent() {\n    assertNotNull(previousOrParentNode.parent, 'previousOrParentNode should have a parent');\n}\n/**\n * @param {?} index\n * @param {?=} arr\n * @return {?}\n */\nfunction assertDataInRange(index, arr) {\n    if (arr == null)\n        arr = data;\n    assertLessThan(index, arr ? arr.length : 0, 'index expected to be a valid data index');\n}\n/**\n * @param {?} index\n * @return {?}\n */\nfunction assertDataNext(index) {\n    assertEqual(data.length, index, 'index expected to be at the end of data');\n}\n/**\n * @template T\n * @param {?} component\n * @return {?}\n */\nexport function _getComponentHostLElementNode(component) {\n    ngDevMode && assertNotNull(component, 'expecting component got null');\n    var /** @type {?} */ lElementNode = /** @type {?} */ ((/** @type {?} */ (component))[NG_HOST_SYMBOL]);\n    ngDevMode && assertNotNull(component, 'object is not a component');\n    return lElementNode;\n}\nexport var /** @type {?} */ CLEAN_PROMISE = _CLEAN_PROMISE;\n//# sourceMappingURL=instructions.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { checkNoChanges, detectChanges, markViewDirty } from './instructions';\nimport { notImplemented } from './util';\nvar ViewRef = /** @class */ (function () {\n    function ViewRef(_view, context) {\n        this._view = _view;\n        this.context = /** @type {?} */ ((context));\n    }\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} context\n     * @return {?}\n     */\n    ViewRef.prototype._setComponentContext = /**\n     * \\@internal\n     * @param {?} context\n     * @return {?}\n     */\n    function (context) { this.context = context; };\n    /**\n     * @return {?}\n     */\n    ViewRef.prototype.destroy = /**\n     * @return {?}\n     */\n    function () { notImplemented(); };\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    ViewRef.prototype.onDestroy = /**\n     * @param {?} callback\n     * @return {?}\n     */\n    function (callback) { notImplemented(); };\n    /**\n     * Marks a view and all of its ancestors dirty.\n     *\n     * It also triggers change detection by calling `scheduleTick` internally, which coalesces\n     * multiple `markForCheck` calls to into one change detection run.\n     *\n     * This can be used to ensure an {@link ChangeDetectionStrategy#OnPush OnPush} component is\n     * checked when it needs to be re-rendered but the two normal triggers haven't marked it\n     * dirty (i.e. inputs haven't changed and events haven't fired in the view).\n     *\n     * <!-- TODO: Add a link to a chapter on OnPush components -->\n     *\n     * ### Example ([live demo](https://stackblitz.com/edit/angular-kx7rrw))\n     *\n     * ```typescript\n     * @Component({\n     *   selector: 'my-app',\n     *   template: `Number of ticks: {{numberOfTicks}}`\n     *   changeDetection: ChangeDetectionStrategy.OnPush,\n     * })\n     * class AppComponent {\n     *   numberOfTicks = 0;\n     *\n     *   constructor(private ref: ChangeDetectorRef) {\n     *     setInterval(() => {\n     *       this.numberOfTicks++;\n     *       // the following is required, otherwise the view will not be updated\n     *       this.ref.markForCheck();\n     *     }, 1000);\n     *   }\n     * }\n     * ```\n     */\n    /**\n     * Marks a view and all of its ancestors dirty.\n     *\n     * It also triggers change detection by calling `scheduleTick` internally, which coalesces\n     * multiple `markForCheck` calls to into one change detection run.\n     *\n     * This can be used to ensure an {\\@link ChangeDetectionStrategy#OnPush OnPush} component is\n     * checked when it needs to be re-rendered but the two normal triggers haven't marked it\n     * dirty (i.e. inputs haven't changed and events haven't fired in the view).\n     *\n     * <!-- TODO: Add a link to a chapter on OnPush components -->\n     *\n     * ### Example ([live demo](https://stackblitz.com/edit/angular-kx7rrw))\n     *\n     * ```typescript\n     * \\@Component({\n     *   selector: 'my-app',\n     *   template: `Number of ticks: {{numberOfTicks}}`\n     *   changeDetection: ChangeDetectionStrategy.OnPush,\n     * })\n     * class AppComponent {\n     *   numberOfTicks = 0;\n     *\n     *   constructor(private ref: ChangeDetectorRef) {\n     *     setInterval(() => {\n     *       this.numberOfTicks++;\n     *       // the following is required, otherwise the view will not be updated\n     *       this.ref.markForCheck();\n     *     }, 1000);\n     *   }\n     * }\n     * ```\n     * @return {?}\n     */\n    ViewRef.prototype.markForCheck = /**\n     * Marks a view and all of its ancestors dirty.\n     *\n     * It also triggers change detection by calling `scheduleTick` internally, which coalesces\n     * multiple `markForCheck` calls to into one change detection run.\n     *\n     * This can be used to ensure an {\\@link ChangeDetectionStrategy#OnPush OnPush} component is\n     * checked when it needs to be re-rendered but the two normal triggers haven't marked it\n     * dirty (i.e. inputs haven't changed and events haven't fired in the view).\n     *\n     * <!-- TODO: Add a link to a chapter on OnPush components -->\n     *\n     * ### Example ([live demo](https://stackblitz.com/edit/angular-kx7rrw))\n     *\n     * ```typescript\n     * \\@Component({\n     *   selector: 'my-app',\n     *   template: `Number of ticks: {{numberOfTicks}}`\n     *   changeDetection: ChangeDetectionStrategy.OnPush,\n     * })\n     * class AppComponent {\n     *   numberOfTicks = 0;\n     *\n     *   constructor(private ref: ChangeDetectorRef) {\n     *     setInterval(() => {\n     *       this.numberOfTicks++;\n     *       // the following is required, otherwise the view will not be updated\n     *       this.ref.markForCheck();\n     *     }, 1000);\n     *   }\n     * }\n     * ```\n     * @return {?}\n     */\n    function () { markViewDirty(this._view); };\n    /**\n     * Detaches the view from the change detection tree.\n     *\n     * Detached views will not be checked during change detection runs until they are\n     * re-attached, even if they are dirty. `detach` can be used in combination with\n     * {@link ChangeDetectorRef#detectChanges detectChanges} to implement local change\n     * detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds. We can do that by detaching\n     * the component's change detector and doing a local check every five seconds.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   // in a real application the returned data will be different every time\n     *   get data() {\n     *     return [1,2,3,4,5];\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'giant-list',\n     *   template: `\n     *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</li>\n     *   `,\n     * })\n     * class GiantList {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\n     *     ref.detach();\n     *     setInterval(() => {\n     *       this.ref.detectChanges();\n     *     }, 5000);\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     <giant-list><giant-list>\n     *   `,\n     * })\n     * class App {\n     * }\n     * ```\n     */\n    /**\n     * Detaches the view from the change detection tree.\n     *\n     * Detached views will not be checked during change detection runs until they are\n     * re-attached, even if they are dirty. `detach` can be used in combination with\n     * {\\@link ChangeDetectorRef#detectChanges detectChanges} to implement local change\n     * detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds. We can do that by detaching\n     * the component's change detector and doing a local check every five seconds.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   // in a real application the returned data will be different every time\n     *   get data() {\n     *     return [1,2,3,4,5];\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'giant-list',\n     *   template: `\n     *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</li>\n     *   `,\n     * })\n     * class GiantList {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\n     *     ref.detach();\n     *     setInterval(() => {\n     *       this.ref.detectChanges();\n     *     }, 5000);\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     <giant-list><giant-list>\n     *   `,\n     * })\n     * class App {\n     * }\n     * ```\n     * @return {?}\n     */\n    ViewRef.prototype.detach = /**\n     * Detaches the view from the change detection tree.\n     *\n     * Detached views will not be checked during change detection runs until they are\n     * re-attached, even if they are dirty. `detach` can be used in combination with\n     * {\\@link ChangeDetectorRef#detectChanges detectChanges} to implement local change\n     * detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds. We can do that by detaching\n     * the component's change detector and doing a local check every five seconds.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   // in a real application the returned data will be different every time\n     *   get data() {\n     *     return [1,2,3,4,5];\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'giant-list',\n     *   template: `\n     *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</li>\n     *   `,\n     * })\n     * class GiantList {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\n     *     ref.detach();\n     *     setInterval(() => {\n     *       this.ref.detectChanges();\n     *     }, 5000);\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     <giant-list><giant-list>\n     *   `,\n     * })\n     * class App {\n     * }\n     * ```\n     * @return {?}\n     */\n    function () { this._view.flags &= ~8 /* Attached */; };\n    /**\n     * Re-attaches a view to the change detection tree.\n     *\n     * This can be used to re-attach views that were previously detached from the tree\n     * using {@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     *\n     * ### Example ([live demo](https://stackblitz.com/edit/angular-ymgsxw))\n     *\n     * The following example creates a component displaying `live` data. The component will detach\n     * its change detector from the main change detector tree when the component's live property\n     * is set to false.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   data = 1;\n     *\n     *   constructor() {\n     *     setInterval(() => {\n     *       this.data = this.data * 2;\n     *     }, 500);\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'live-data',\n     *   inputs: ['live'],\n     *   template: 'Data: {{dataProvider.data}}'\n     * })\n     * class LiveData {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\n     *\n     *   set live(value) {\n     *     if (value) {\n     *       this.ref.reattach();\n     *     } else {\n     *       this.ref.detach();\n     *     }\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'my-app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\n     *     <live-data [live]=\"live\"><live-data>\n     *   `,\n     * })\n     * class AppComponent {\n     *   live = true;\n     * }\n     * ```\n     */\n    /**\n     * Re-attaches a view to the change detection tree.\n     *\n     * This can be used to re-attach views that were previously detached from the tree\n     * using {\\@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     *\n     * ### Example ([live demo](https://stackblitz.com/edit/angular-ymgsxw))\n     *\n     * The following example creates a component displaying `live` data. The component will detach\n     * its change detector from the main change detector tree when the component's live property\n     * is set to false.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   data = 1;\n     *\n     *   constructor() {\n     *     setInterval(() => {\n     *       this.data = this.data * 2;\n     *     }, 500);\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'live-data',\n     *   inputs: ['live'],\n     *   template: 'Data: {{dataProvider.data}}'\n     * })\n     * class LiveData {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\n     *\n     *   set live(value) {\n     *     if (value) {\n     *       this.ref.reattach();\n     *     } else {\n     *       this.ref.detach();\n     *     }\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'my-app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\n     *     <live-data [live]=\"live\"><live-data>\n     *   `,\n     * })\n     * class AppComponent {\n     *   live = true;\n     * }\n     * ```\n     * @return {?}\n     */\n    ViewRef.prototype.reattach = /**\n     * Re-attaches a view to the change detection tree.\n     *\n     * This can be used to re-attach views that were previously detached from the tree\n     * using {\\@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     *\n     * ### Example ([live demo](https://stackblitz.com/edit/angular-ymgsxw))\n     *\n     * The following example creates a component displaying `live` data. The component will detach\n     * its change detector from the main change detector tree when the component's live property\n     * is set to false.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   data = 1;\n     *\n     *   constructor() {\n     *     setInterval(() => {\n     *       this.data = this.data * 2;\n     *     }, 500);\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'live-data',\n     *   inputs: ['live'],\n     *   template: 'Data: {{dataProvider.data}}'\n     * })\n     * class LiveData {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\n     *\n     *   set live(value) {\n     *     if (value) {\n     *       this.ref.reattach();\n     *     } else {\n     *       this.ref.detach();\n     *     }\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'my-app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\n     *     <live-data [live]=\"live\"><live-data>\n     *   `,\n     * })\n     * class AppComponent {\n     *   live = true;\n     * }\n     * ```\n     * @return {?}\n     */\n    function () { this._view.flags |= 8 /* Attached */; };\n    /**\n     * Checks the view and its children.\n     *\n     * This can also be used in combination with {@link ChangeDetectorRef#detach detach} to implement\n     * local change detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine, the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds.\n     *\n     * We can do that by detaching the component's change detector and doing a local change detection\n     * check every five seconds.\n     *\n     * See {@link ChangeDetectorRef#detach detach} for more information.\n     */\n    /**\n     * Checks the view and its children.\n     *\n     * This can also be used in combination with {\\@link ChangeDetectorRef#detach detach} to implement\n     * local change detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine, the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds.\n     *\n     * We can do that by detaching the component's change detector and doing a local change detection\n     * check every five seconds.\n     *\n     * See {\\@link ChangeDetectorRef#detach detach} for more information.\n     * @return {?}\n     */\n    ViewRef.prototype.detectChanges = /**\n     * Checks the view and its children.\n     *\n     * This can also be used in combination with {\\@link ChangeDetectorRef#detach detach} to implement\n     * local change detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine, the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds.\n     *\n     * We can do that by detaching the component's change detector and doing a local change detection\n     * check every five seconds.\n     *\n     * See {\\@link ChangeDetectorRef#detach detach} for more information.\n     * @return {?}\n     */\n    function () { detectChanges(this.context); };\n    /**\n     * Checks the change detector and its children, and throws if any changes are detected.\n     *\n     * This is used in development mode to verify that running change detection doesn't\n     * introduce other changes.\n     */\n    /**\n     * Checks the change detector and its children, and throws if any changes are detected.\n     *\n     * This is used in development mode to verify that running change detection doesn't\n     * introduce other changes.\n     * @return {?}\n     */\n    ViewRef.prototype.checkNoChanges = /**\n     * Checks the change detector and its children, and throws if any changes are detected.\n     *\n     * This is used in development mode to verify that running change detection doesn't\n     * introduce other changes.\n     * @return {?}\n     */\n    function () { checkNoChanges(this.context); };\n    return ViewRef;\n}());\nexport { ViewRef };\nfunction ViewRef_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ViewRef.prototype.context;\n    /** @type {?} */\n    ViewRef.prototype.rootNodes;\n    /** @type {?} */\n    ViewRef.prototype.destroyed;\n    /** @type {?} */\n    ViewRef.prototype._view;\n}\nvar EmbeddedViewRef = /** @class */ (function (_super) {\n    tslib_1.__extends(EmbeddedViewRef, _super);\n    function EmbeddedViewRef(viewNode, template, context) {\n        var _this = _super.call(this, viewNode.data, context) || this;\n        _this._lViewNode = viewNode;\n        return _this;\n    }\n    return EmbeddedViewRef;\n}(ViewRef));\nexport { EmbeddedViewRef };\nfunction EmbeddedViewRef_tsickle_Closure_declarations() {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    EmbeddedViewRef.prototype._lViewNode;\n}\n/**\n * Creates a ViewRef bundled with destroy functionality.\n *\n * @template T\n * @param {?} view\n * @param {?} context The context for this view\n * @return {?} The ViewRef\n */\nexport function createViewRef(view, context) {\n    // TODO: add detectChanges back in when implementing ChangeDetectorRef.detectChanges\n    return addDestroyable(new ViewRef(view, context));\n}\n/**\n * Interface for destroy logic. Implemented by addDestroyable.\n * @record\n */\nexport function DestroyRef() { }\nfunction DestroyRef_tsickle_Closure_declarations() {\n    /**\n     * Whether or not this object has been destroyed\n     * @type {?}\n     */\n    DestroyRef.prototype.destroyed;\n    /**\n     * Destroy the instance and call all onDestroy callbacks.\n     * @type {?}\n     */\n    DestroyRef.prototype.destroy;\n    /**\n     * Register callbacks that should be called onDestroy\n     * @type {?}\n     */\n    DestroyRef.prototype.onDestroy;\n}\n/**\n * Decorates an object with destroy logic (implementing the DestroyRef interface)\n * and returns the enhanced object.\n *\n * @template T, C\n * @param {?} obj The object to decorate\n * @return {?} The object with destroy logic\n */\nexport function addDestroyable(obj) {\n    var /** @type {?} */ destroyFn = null;\n    obj.destroyed = false;\n    obj.destroy = function () {\n        destroyFn && destroyFn.forEach(function (fn) { return fn(); });\n        this.destroyed = true;\n    };\n    obj.onDestroy = function (fn) { return (destroyFn || (destroyFn = [])).push(fn); };\n    return obj;\n}\n//# sourceMappingURL=view_ref.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { assertLessThan, assertNotNull } from './assert';\nimport { assertPreviousIsParent, getDirectiveInstance, getPreviousOrParentNode, getRenderer, renderEmbeddedTemplate } from './instructions';\nimport { assertNodeOfPossibleTypes, assertNodeType } from './node_assert';\nimport { insertView } from './node_manipulation';\nimport { notImplemented, stringify } from './util';\nimport { EmbeddedViewRef, addDestroyable, createViewRef } from './view_ref';\n/**\n * If a directive is diPublic, bloomAdd sets a property on the instance with this constant as\n * the key and the directive's unique ID as the value. This allows us to map directives to their\n * bloom filter bit for DI.\n */\nvar /** @type {?} */ NG_ELEMENT_ID = '__NG_ELEMENT_ID__';\n/**\n * The number of slots in each bloom filter (used by DI). The larger this number, the fewer\n * directives that will share slots, and thus, the fewer false positives when checking for\n * the existence of a directive.\n */\nvar /** @type {?} */ BLOOM_SIZE = 128;\n/**\n * Counter used to generate unique IDs for directives.\n */\nvar /** @type {?} */ nextNgElementId = 0;\n/**\n * Registers this directive as present in its node's injector by flipping the directive's\n * corresponding bit in the injector's bloom filter.\n *\n * @param {?} injector The node injector in which the directive should be registered\n * @param {?} type The directive to register\n * @return {?}\n */\nexport function bloomAdd(injector, type) {\n    var /** @type {?} */ id = (/** @type {?} */ (type))[NG_ELEMENT_ID];\n    // Set a unique ID on the directive type, so if something tries to inject the directive,\n    // we can easily retrieve the ID and hash it into the bloom bit that should be checked.\n    if (id == null) {\n        id = (/** @type {?} */ (type))[NG_ELEMENT_ID] = nextNgElementId++;\n    }\n    // We only have BLOOM_SIZE (128) slots in our bloom filter (4 buckets * 32 bits each),\n    // so all unique IDs must be modulo-ed into a number from 0 - 127 to fit into the filter.\n    // This means that after 128, some directives will share slots, leading to some false positives\n    // when checking for a directive's presence.\n    var /** @type {?} */ bloomBit = id % BLOOM_SIZE;\n    // Create a mask that targets the specific bit associated with the directive.\n    // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\n    // to bit positions 0 - 31 in a 32 bit integer.\n    var /** @type {?} */ mask = 1 << bloomBit;\n    // Use the raw bloomBit number to determine which bloom filter bucket we should check\n    // e.g: bf0 = [0 - 31], bf1 = [32 - 63], bf2 = [64 - 95], bf3 = [96 - 127]\n    if (bloomBit < 64) {\n        if (bloomBit < 32) {\n            // Then use the mask to flip on the bit (0-31) associated with the directive in that bucket\n            injector.bf0 |= mask;\n        }\n        else {\n            injector.bf1 |= mask;\n        }\n    }\n    else {\n        if (bloomBit < 96) {\n            injector.bf2 |= mask;\n        }\n        else {\n            injector.bf3 |= mask;\n        }\n    }\n}\n/**\n * @return {?}\n */\nexport function getOrCreateNodeInjector() {\n    ngDevMode && assertPreviousIsParent();\n    return getOrCreateNodeInjectorForNode(/** @type {?} */ (getPreviousOrParentNode()));\n}\n/**\n * Creates (or gets an existing) injector for a given element or container.\n *\n * @param {?} node for which an injector should be retrieved / created.\n * @return {?} Node injector\n */\nexport function getOrCreateNodeInjectorForNode(node) {\n    var /** @type {?} */ nodeInjector = node.nodeInjector;\n    var /** @type {?} */ parentInjector = node.parent && node.parent.nodeInjector;\n    if (nodeInjector != parentInjector) {\n        return /** @type {?} */ ((nodeInjector));\n    }\n    return node.nodeInjector = {\n        parent: parentInjector,\n        node: node,\n        bf0: 0,\n        bf1: 0,\n        bf2: 0,\n        bf3: 0,\n        cbf0: parentInjector == null ? 0 : parentInjector.cbf0 | parentInjector.bf0,\n        cbf1: parentInjector == null ? 0 : parentInjector.cbf1 | parentInjector.bf1,\n        cbf2: parentInjector == null ? 0 : parentInjector.cbf2 | parentInjector.bf2,\n        cbf3: parentInjector == null ? 0 : parentInjector.cbf3 | parentInjector.bf3,\n        injector: null,\n        templateRef: null,\n        viewContainerRef: null,\n        elementRef: null,\n        changeDetectorRef: null\n    };\n}\n/** @enum {number} */\nvar InjectFlags = {\n    /** Dependency is not required. Null will be injected if there is no provider for the dependency.\n         */\n    Optional: 1,\n    /** When resolving a dependency, include the node that is requesting injection. */\n    CheckSelf: 2,\n    /** When resolving a dependency, include ancestors of the node requesting injection. */\n    CheckParent: 4,\n    /** Default injection options: required, checks both self and ancestors. */\n    Default: 6,\n};\nexport { InjectFlags };\n/**\n * Constructs an injection error with the given text and token.\n *\n * @param {?} text The text of the error\n * @param {?} token The token associated with the error\n * @return {?} The error that was created\n */\nfunction createInjectionError(text, token) {\n    return new Error(\"ElementInjector: \" + text + \" [\" + stringify(token) + \"]\");\n}\n/**\n * Makes a directive public to the DI system by adding it to an injector's bloom filter.\n *\n * @param {?} di The node injector in which a directive will be added\n * @param {?} def The definition of the directive to be made public\n * @return {?}\n */\nexport function diPublicInInjector(di, def) {\n    bloomAdd(di, def.type);\n}\n/**\n * Makes a directive public to the DI system by adding it to an injector's bloom filter.\n *\n * @param {?} def The definition of the directive to be made public\n * @return {?}\n */\nexport function diPublic(def) {\n    diPublicInInjector(getOrCreateNodeInjector(), def);\n}\n/**\n * Searches for an instance of the given type up the injector tree and returns\n * that instance if found.\n *\n * If not found, it will propagate up to the next parent injector until the token\n * is found or the top is reached.\n *\n * Usage example (in factory function):\n *\n * class SomeDirective {\n *   constructor(directive: DirectiveA) {}\n *\n *   static ngDirectiveDef = defineDirective({\n *     type: SomeDirective,\n *     factory: () => new SomeDirective(directiveInject(DirectiveA))\n *   });\n * }\n *\n * NOTE: use `directiveInject` with `\\@Directive`, `\\@Component`, and `\\@Pipe`. For\n * all other injection use `inject` which does not walk the DOM render tree.\n *\n * @template T\n * @param {?} token The directive type to search for\n * @param {?=} flags Injection flags (e.g. CheckParent)\n * @param {?=} defaultValue\n * @return {?} The instance found\n */\nexport function directiveInject(token, flags, defaultValue) {\n    return getOrCreateInjectable(getOrCreateNodeInjector(), token, flags, defaultValue);\n}\n/**\n * Creates an ElementRef and stores it on the injector.\n * Or, if the ElementRef already exists, retrieves the existing ElementRef.\n *\n * @return {?} The ElementRef instance to use\n */\nexport function injectElementRef() {\n    return getOrCreateElementRef(getOrCreateNodeInjector());\n}\n/**\n * Creates a TemplateRef and stores it on the injector. Or, if the TemplateRef already\n * exists, retrieves the existing TemplateRef.\n *\n * @template T\n * @return {?} The TemplateRef instance to use\n */\nexport function injectTemplateRef() {\n    return getOrCreateTemplateRef(getOrCreateNodeInjector());\n}\n/**\n * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef\n * already exists, retrieves the existing ViewContainerRef.\n *\n * @return {?} The ViewContainerRef instance to use\n */\nexport function injectViewContainerRef() {\n    return getOrCreateContainerRef(getOrCreateNodeInjector());\n}\n/**\n * Returns a ChangeDetectorRef (a.k.a. a ViewRef)\n * @return {?}\n */\nexport function injectChangeDetectorRef() {\n    return getOrCreateChangeDetectorRef(getOrCreateNodeInjector(), null);\n}\n/**\n * Inject static attribute value into directive constructor.\n *\n * This method is used with `factory` functions which are generated as part of\n * `defineDirective` or `defineComponent`. The method retrieves the static value\n * of an attribute. (Dynamic attributes are not supported since they are not resolved\n *  at the time of injection and can change over time.)\n *\n * # Example\n * Given:\n * ```\n * \\@Component(...)\n * class MyComponent {\n *   constructor(\\@Attribute('title') title: string) { ... }\n * }\n * ```\n * When instantiated with\n * ```\n * <my-component title=\"Hello\"></my-component>\n * ```\n *\n * Then factory method generated is:\n * ```\n * MyComponent.ngComponentDef = defineComponent({\n *   factory: () => new MyComponent(injectAttribute('title'))\n *   ...\n * })\n * ```\n *\n * \\@experimental\n * @param {?} attrName\n * @return {?}\n */\nexport function injectAttribute(attrName) {\n    ngDevMode && assertPreviousIsParent();\n    var /** @type {?} */ lElement = /** @type {?} */ (getPreviousOrParentNode());\n    ngDevMode && assertNodeType(lElement, 3 /* Element */);\n    var /** @type {?} */ tElement = /** @type {?} */ ((lElement.tNode));\n    ngDevMode && assertNotNull(tElement, 'expecting tNode');\n    var /** @type {?} */ attrs = tElement.attrs;\n    if (attrs) {\n        for (var /** @type {?} */ i = 0; i < attrs.length; i = i + 2) {\n            if (attrs[i] == attrName) {\n                return attrs[i + 1];\n            }\n        }\n    }\n    return undefined;\n}\n/**\n * Creates a ViewRef and stores it on the injector as ChangeDetectorRef (public alias).\n * Or, if it already exists, retrieves the existing instance.\n *\n * @param {?} di\n * @param {?} context\n * @return {?} The ChangeDetectorRef to use\n */\nexport function getOrCreateChangeDetectorRef(di, context) {\n    if (di.changeDetectorRef)\n        return di.changeDetectorRef;\n    var /** @type {?} */ currentNode = di.node;\n    if (currentNode.data === null) {\n        // if data is null, this node is a regular element node (not a component)\n        return di.changeDetectorRef = getOrCreateHostChangeDetector(currentNode.view.node);\n    }\n    else if ((currentNode.flags & 3 /* TYPE_MASK */) === 3 /* Element */) {\n        // if it's an element node with data, it's a component and context will be set later\n        return di.changeDetectorRef = createViewRef(/** @type {?} */ (currentNode.data), context);\n    }\n    return /** @type {?} */ ((null));\n}\n/**\n * Gets or creates ChangeDetectorRef for the closest host component\n * @param {?} currentNode\n * @return {?}\n */\nfunction getOrCreateHostChangeDetector(currentNode) {\n    var /** @type {?} */ hostNode = getClosestComponentAncestor(currentNode);\n    var /** @type {?} */ hostInjector = hostNode.nodeInjector;\n    var /** @type {?} */ existingRef = hostInjector && hostInjector.changeDetectorRef;\n    return existingRef ?\n        existingRef :\n        createViewRef(/** @type {?} */ (hostNode.data), hostNode.view.data[hostNode.flags >> 12 /* INDX_SHIFT */]);\n}\n/**\n * If the node is an embedded view, traverses up the view tree to return the closest\n * ancestor view that is attached to a component. If it's already a component node,\n * returns itself.\n * @param {?} node\n * @return {?}\n */\nfunction getClosestComponentAncestor(node) {\n    while ((node.flags & 3 /* TYPE_MASK */) === 2 /* View */) {\n        node = node.view.node;\n    }\n    return /** @type {?} */ (node);\n}\n/**\n * Searches for an instance of the given directive type up the injector tree and returns\n * that instance if found.\n *\n * Specifically, it gets the bloom filter bit associated with the directive (see bloomHashBit),\n * checks that bit against the bloom filter structure to identify an injector that might have\n * the directive (see bloomFindPossibleInjector), then searches the directives on that injector\n * for a match.\n *\n * If not found, it will propagate up to the next parent injector until the token\n * is found or the top is reached.\n *\n * @template T\n * @param {?} di Node injector where the search should start\n * @param {?} token The directive type to search for\n * @param {?=} flags Injection flags (e.g. CheckParent)\n * @param {?=} defaultValue\n * @return {?} The instance found\n */\nexport function getOrCreateInjectable(di, token, flags, defaultValue) {\n    var /** @type {?} */ bloomHash = bloomHashBit(token);\n    // If the token has a bloom hash, then it is a directive that is public to the injection system\n    // (diPublic). If there is no hash, fall back to the module injector.\n    if (bloomHash === null) {\n        var /** @type {?} */ moduleInjector = di.injector;\n        if (!moduleInjector) {\n            if (defaultValue != null) {\n                return defaultValue;\n            }\n            throw createInjectionError('NotFound', token);\n        }\n        moduleInjector.get(token);\n    }\n    else {\n        var /** @type {?} */ injector = di;\n        while (injector) {\n            // Get the closest potential matching injector (upwards in the injector tree) that\n            // *potentially* has the token.\n            injector = bloomFindPossibleInjector(injector, bloomHash);\n            // If no injector is found, we *know* that there is no ancestor injector that contains the\n            // token, so we abort.\n            if (!injector) {\n                break;\n            }\n            // At this point, we have an injector which *may* contain the token, so we step through the\n            // directives associated with the injector's corresponding node to get the directive instance.\n            var /** @type {?} */ node = injector.node;\n            // The size of the node's directive's list is stored in certain bits of the node's flags,\n            // so exact it with a mask and shift it back such that the bits reflect the real value.\n            var /** @type {?} */ flags_1 = node.flags;\n            var /** @type {?} */ size = (flags_1 & 4092 /* SIZE_MASK */) >> 2 /* SIZE_SHIFT */;\n            if (size !== 0) {\n                // The start index of the directives list is also part of the node's flags, but there is\n                // nothing to the \"left\" of it so it doesn't need a mask.\n                var /** @type {?} */ start = flags_1 >> 12 /* INDX_SHIFT */;\n                var /** @type {?} */ tData = node.view.tView.data;\n                for (var /** @type {?} */ i = start, /** @type {?} */ ii = start + size; i < ii; i++) {\n                    // Get the definition for the directive at this index and, if it is injectable (diPublic),\n                    // and matches the given token, return the directive instance.\n                    var /** @type {?} */ directiveDef = /** @type {?} */ (tData[i]);\n                    if (directiveDef.diPublic && directiveDef.type == token) {\n                        return getDirectiveInstance(node.view.data[i]);\n                    }\n                }\n            }\n            // If we *didn't* find the directive for the token from the candidate injector, we had a false\n            // positive. Traverse up the tree and continue.\n            injector = injector.parent;\n        }\n    }\n    // No directive was found for the given token.\n    // TODO: implement optional, check-self, and check-parent.\n    throw createInjectionError('Not found', token);\n}\n/**\n * Given a directive type, this function returns the bit in an injector's bloom filter\n * that should be used to determine whether or not the directive is present.\n *\n * When the directive was added to the bloom filter, it was given a unique ID that can be\n * retrieved on the class. Since there are only BLOOM_SIZE slots per bloom filter, the directive's\n * ID must be modulo-ed by BLOOM_SIZE to get the correct bloom bit (directives share slots after\n * BLOOM_SIZE is reached).\n *\n * @param {?} type The directive type\n * @return {?} The bloom bit to check for the directive\n */\nfunction bloomHashBit(type) {\n    var /** @type {?} */ id = (/** @type {?} */ (type))[NG_ELEMENT_ID];\n    return typeof id === 'number' ? id % BLOOM_SIZE : null;\n}\n/**\n * Finds the closest injector that might have a certain directive.\n *\n * Each directive corresponds to a bit in an injector's bloom filter. Given the bloom bit to\n * check and a starting injector, this function traverses up injectors until it finds an\n * injector that contains a 1 for that bit in its bloom filter. A 1 indicates that the\n * injector may have that directive. It only *may* have the directive because directives begin\n * to share bloom filter bits after the BLOOM_SIZE is reached, and it could correspond to a\n * different directive sharing the bit.\n *\n * Note: We can skip checking further injectors up the tree if an injector's cbf structure\n * has a 0 for that bloom bit. Since cbf contains the merged value of all the parent\n * injectors, a 0 in the bloom bit indicates that the parents definitely do not contain\n * the directive and do not need to be checked.\n *\n * @param {?} startInjector\n * @param {?} bloomBit The bit to check in each injector's bloom filter\n * @return {?} An injector that might have the directive\n */\nexport function bloomFindPossibleInjector(startInjector, bloomBit) {\n    // Create a mask that targets the specific bit associated with the directive we're looking for.\n    // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\n    // to bit positions 0 - 31 in a 32 bit integer.\n    var /** @type {?} */ mask = 1 << bloomBit;\n    // Traverse up the injector tree until we find a potential match or until we know there *isn't* a\n    // match.\n    var /** @type {?} */ injector = startInjector;\n    while (injector) {\n        // Our bloom filter size is 128 bits, which is four 32-bit bloom filter buckets:\n        // bf0 = [0 - 31], bf1 = [32 - 63], bf2 = [64 - 95], bf3 = [96 - 127]\n        // Get the bloom filter value from the appropriate bucket based on the directive's bloomBit.\n        var /** @type {?} */ value = bloomBit < 64 ? (bloomBit < 32 ? injector.bf0 : injector.bf1) :\n            (bloomBit < 96 ? injector.bf2 : injector.bf3);\n        // If the bloom filter value has the bit corresponding to the directive's bloomBit flipped on,\n        // this injector is a potential match.\n        if ((value & mask) === mask) {\n            return injector;\n        }\n        // If the current injector does not have the directive, check the bloom filters for the ancestor\n        // injectors (cbf0 - cbf3). These filters capture *all* ancestor injectors.\n        value = bloomBit < 64 ? (bloomBit < 32 ? injector.cbf0 : injector.cbf1) :\n            (bloomBit < 96 ? injector.cbf2 : injector.cbf3);\n        // If the ancestor bloom filter value has the bit corresponding to the directive, traverse up to\n        // find the specific injector. If the ancestor bloom filter does not have the bit, we can abort.\n        injector = (value & mask) ? injector.parent : null;\n    }\n    return null;\n}\nvar ReadFromInjectorFn = /** @class */ (function () {\n    function ReadFromInjectorFn(read) {\n        this.read = read;\n    }\n    return ReadFromInjectorFn;\n}());\nexport { ReadFromInjectorFn };\nfunction ReadFromInjectorFn_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ReadFromInjectorFn.prototype.read;\n}\n/**\n * Creates an ElementRef for a given node injector and stores it on the injector.\n * Or, if the ElementRef already exists, retrieves the existing ElementRef.\n *\n * @param {?} di The node injector where we should store a created ElementRef\n * @return {?} The ElementRef instance to use\n */\nexport function getOrCreateElementRef(di) {\n    return di.elementRef ||\n        (di.elementRef = new ElementRef(((di.node.flags & 3 /* TYPE_MASK */) === 0 /* Container */) ? null :\n            di.node.native));\n}\nexport var /** @type {?} */ QUERY_READ_TEMPLATE_REF = /** @type {?} */ ((/** @type {?} */ (new ReadFromInjectorFn(function (injector) { return getOrCreateTemplateRef(injector); }))));\nexport var /** @type {?} */ QUERY_READ_CONTAINER_REF = /** @type {?} */ ((/** @type {?} */ (new ReadFromInjectorFn(function (injector) { return getOrCreateContainerRef(injector); }))));\nexport var /** @type {?} */ QUERY_READ_ELEMENT_REF = /** @type {?} */ ((/** @type {?} */ (new ReadFromInjectorFn(function (injector) { return getOrCreateElementRef(injector); }))));\nexport var /** @type {?} */ QUERY_READ_FROM_NODE = (/** @type {?} */ ((new ReadFromInjectorFn(function (injector, node, directiveIdx) {\n    ngDevMode && assertNodeOfPossibleTypes(node, 0 /* Container */, 3 /* Element */);\n    if (directiveIdx > -1) {\n        return node.view.data[directiveIdx];\n    }\n    else if ((node.flags & 3 /* TYPE_MASK */) === 3 /* Element */) {\n        return getOrCreateElementRef(injector);\n    }\n    else if ((node.flags & 3 /* TYPE_MASK */) === 0 /* Container */) {\n        return getOrCreateTemplateRef(injector);\n    }\n    throw new Error('fail');\n}))));\n/**\n * A ref to a node's native element.\n */\nvar /**\n * A ref to a node's native element.\n */\nElementRef = /** @class */ (function () {\n    function ElementRef(nativeElement) {\n        this.nativeElement = nativeElement;\n    }\n    return ElementRef;\n}());\nfunction ElementRef_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ElementRef.prototype.nativeElement;\n}\n/**\n * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef\n * already exists, retrieves the existing ViewContainerRef.\n *\n * @param {?} di\n * @return {?} The ViewContainerRef instance to use\n */\nexport function getOrCreateContainerRef(di) {\n    return di.viewContainerRef ||\n        (di.viewContainerRef = new ViewContainerRef(/** @type {?} */ (di.node)));\n}\n/**\n * A ref to a container that enables adding and removing views from that container\n * imperatively.\n */\nvar /**\n * A ref to a container that enables adding and removing views from that container\n * imperatively.\n */\nViewContainerRef = /** @class */ (function () {\n    function ViewContainerRef(_node) {\n        this._node = _node;\n    }\n    /**\n     * @return {?}\n     */\n    ViewContainerRef.prototype.clear = /**\n     * @return {?}\n     */\n    function () { throw notImplemented(); };\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    ViewContainerRef.prototype.get = /**\n     * @param {?} index\n     * @return {?}\n     */\n    function (index) { throw notImplemented(); };\n    /**\n     * @template C\n     * @param {?} templateRef\n     * @param {?=} context\n     * @param {?=} index\n     * @return {?}\n     */\n    ViewContainerRef.prototype.createEmbeddedView = /**\n     * @template C\n     * @param {?} templateRef\n     * @param {?=} context\n     * @param {?=} index\n     * @return {?}\n     */\n    function (templateRef, context, index) {\n        var /** @type {?} */ viewRef = templateRef.createEmbeddedView(/** @type {?} */ ((context)));\n        this.insert(viewRef, index);\n        return viewRef;\n    };\n    /**\n     * @template C\n     * @param {?} componentFactory\n     * @param {?=} index\n     * @param {?=} injector\n     * @param {?=} projectableNodes\n     * @param {?=} ngModule\n     * @return {?}\n     */\n    ViewContainerRef.prototype.createComponent = /**\n     * @template C\n     * @param {?} componentFactory\n     * @param {?=} index\n     * @param {?=} injector\n     * @param {?=} projectableNodes\n     * @param {?=} ngModule\n     * @return {?}\n     */\n    function (componentFactory, index, injector, projectableNodes, ngModule) {\n        throw notImplemented();\n    };\n    /**\n     * @param {?} viewRef\n     * @param {?=} index\n     * @return {?}\n     */\n    ViewContainerRef.prototype.insert = /**\n     * @param {?} viewRef\n     * @param {?=} index\n     * @return {?}\n     */\n    function (viewRef, index) {\n        if (index == null) {\n            index = this._node.data.views.length;\n        }\n        else {\n            // +1 because it's legal to insert at the end.\n            ngDevMode && assertLessThan(index, this._node.data.views.length + 1, 'index');\n        }\n        var /** @type {?} */ lView = (/** @type {?} */ (viewRef))._lViewNode;\n        insertView(this._node, lView, index);\n        // If the view is dynamic (has a template), it needs to be counted both at the container\n        // level and at the node above the container.\n        if (lView.data.template !== null) {\n            // Increment the container view count.\n            this._node.data.dynamicViewCount++;\n            // Look for the parent node and increment its dynamic view count.\n            if (this._node.parent !== null && this._node.parent.data !== null) {\n                ngDevMode &&\n                    assertNodeOfPossibleTypes(this._node.parent, 2 /* View */, 3 /* Element */);\n                this._node.parent.data.dynamicViewCount++;\n            }\n        }\n        return viewRef;\n    };\n    /**\n     * @param {?} viewRef\n     * @param {?} currentIndex\n     * @return {?}\n     */\n    ViewContainerRef.prototype.move = /**\n     * @param {?} viewRef\n     * @param {?} currentIndex\n     * @return {?}\n     */\n    function (viewRef, currentIndex) {\n        throw notImplemented();\n    };\n    /**\n     * @param {?} viewRef\n     * @return {?}\n     */\n    ViewContainerRef.prototype.indexOf = /**\n     * @param {?} viewRef\n     * @return {?}\n     */\n    function (viewRef) { throw notImplemented(); };\n    /**\n     * @param {?=} index\n     * @return {?}\n     */\n    ViewContainerRef.prototype.remove = /**\n     * @param {?=} index\n     * @return {?}\n     */\n    function (index) { throw notImplemented(); };\n    /**\n     * @param {?=} index\n     * @return {?}\n     */\n    ViewContainerRef.prototype.detach = /**\n     * @param {?=} index\n     * @return {?}\n     */\n    function (index) { throw notImplemented(); };\n    return ViewContainerRef;\n}());\nfunction ViewContainerRef_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ViewContainerRef.prototype.element;\n    /** @type {?} */\n    ViewContainerRef.prototype.injector;\n    /** @type {?} */\n    ViewContainerRef.prototype.parentInjector;\n    /** @type {?} */\n    ViewContainerRef.prototype.length;\n    /** @type {?} */\n    ViewContainerRef.prototype._node;\n}\n/**\n * Creates a TemplateRef and stores it on the injector. Or, if the TemplateRef already\n * exists, retrieves the existing TemplateRef.\n *\n * @template T\n * @param {?} di The node injector where we should store a created TemplateRef\n * @return {?} The TemplateRef instance to use\n */\nexport function getOrCreateTemplateRef(di) {\n    ngDevMode && assertNodeType(di.node, 0 /* Container */);\n    var /** @type {?} */ data = (/** @type {?} */ (di.node)).data;\n    return di.templateRef || (di.templateRef = new TemplateRef(getOrCreateElementRef(di), /** @type {?} */ ((data.template)), getRenderer()));\n}\nvar TemplateRef = /** @class */ (function () {\n    function TemplateRef(elementRef, template, _renderer) {\n        this._renderer = _renderer;\n        this.elementRef = elementRef;\n        this._template = template;\n    }\n    /**\n     * @param {?} context\n     * @return {?}\n     */\n    TemplateRef.prototype.createEmbeddedView = /**\n     * @param {?} context\n     * @return {?}\n     */\n    function (context) {\n        var /** @type {?} */ viewNode = renderEmbeddedTemplate(null, this._template, context, this._renderer);\n        return addDestroyable(new EmbeddedViewRef(viewNode, this._template, context));\n    };\n    return TemplateRef;\n}());\nfunction TemplateRef_tsickle_Closure_declarations() {\n    /** @type {?} */\n    TemplateRef.prototype.elementRef;\n    /** @type {?} */\n    TemplateRef.prototype._template;\n    /** @type {?} */\n    TemplateRef.prototype._renderer;\n}\n//# sourceMappingURL=di.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { SimpleChange } from '../change_detection/change_detection_util';\nimport { ChangeDetectionStrategy } from '../change_detection/constants';\nimport { resolveRendererType2 } from '../view/util';\nimport { diPublic } from './di';\n/**\n * Create a component definition object.\n *\n *\n * # Example\n * ```\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ngComponentDef = defineComponent({\n *     ...\n *   });\n * }\n * ```\n * @template T\n * @param {?} componentDefinition\n * @return {?}\n */\nexport function defineComponent(componentDefinition) {\n    var /** @type {?} */ type = componentDefinition.type;\n    var /** @type {?} */ def = /** @type {?} */ ({\n        type: type,\n        diPublic: null,\n        n: componentDefinition.factory,\n        tag: (/** @type {?} */ (componentDefinition)).tag || /** @type {?} */ ((null)),\n        template: (/** @type {?} */ (componentDefinition)).template || /** @type {?} */ ((null)),\n        h: componentDefinition.hostBindings || noop,\n        attributes: componentDefinition.attributes || null,\n        inputs: invertObject(componentDefinition.inputs),\n        inputsPropertyName: componentDefinition.inputsPropertyName || null,\n        outputs: invertObject(componentDefinition.outputs),\n        rendererType: resolveRendererType2(componentDefinition.rendererType) || null,\n        exportAs: componentDefinition.exportAs,\n        onInit: type.prototype.ngOnInit || null,\n        doCheck: type.prototype.ngDoCheck || null,\n        afterContentInit: type.prototype.ngAfterContentInit || null,\n        afterContentChecked: type.prototype.ngAfterContentChecked || null,\n        afterViewInit: type.prototype.ngAfterViewInit || null,\n        afterViewChecked: type.prototype.ngAfterViewChecked || null,\n        onDestroy: type.prototype.ngOnDestroy || null,\n        onPush: (/** @type {?} */ (componentDefinition)).changeDetection ===\n            ChangeDetectionStrategy.OnPush\n    });\n    var /** @type {?} */ feature = componentDefinition.features;\n    feature && feature.forEach(function (fn) { return fn(def); });\n    return def;\n}\nvar /** @type {?} */ PRIVATE_PREFIX = '__ngOnChanges_';\n/**\n * @param {?} definition\n * @return {?}\n */\nexport function NgOnChangesFeature(definition) {\n    var /** @type {?} */ inputs = definition.inputs;\n    var /** @type {?} */ proto = definition.type.prototype;\n    var /** @type {?} */ inputsPropertyName = definition.inputsPropertyName;\n    // Place where we will store SimpleChanges if there is a change\n    Object.defineProperty(proto, PRIVATE_PREFIX, { value: undefined, writable: true });\n    var _loop_1 = function (pubKey) {\n        var /** @type {?} */ minKey = inputs[pubKey];\n        var /** @type {?} */ propertyName = inputsPropertyName && inputsPropertyName[minKey] || pubKey;\n        var /** @type {?} */ privateMinKey = PRIVATE_PREFIX + minKey;\n        // Create a place where the actual value will be stored and make it non-enumerable\n        Object.defineProperty(proto, privateMinKey, { value: undefined, writable: true });\n        var /** @type {?} */ existingDesc = Object.getOwnPropertyDescriptor(proto, minKey);\n        // create a getter and setter for property\n        Object.defineProperty(proto, minKey, {\n            get: function () {\n                return (existingDesc && existingDesc.get) ? existingDesc.get.call(this) :\n                    this[privateMinKey];\n            },\n            set: function (value) {\n                var /** @type {?} */ simpleChanges = this[PRIVATE_PREFIX];\n                var /** @type {?} */ isFirstChange = simpleChanges === undefined;\n                if (simpleChanges == null) {\n                    simpleChanges = this[PRIVATE_PREFIX] = {};\n                }\n                simpleChanges[propertyName] = new SimpleChange(this[privateMinKey], value, isFirstChange);\n                (existingDesc && existingDesc.set) ? existingDesc.set.call(this, value) :\n                    this[privateMinKey] = value;\n            }\n        });\n    };\n    for (var /** @type {?} */ pubKey in inputs) {\n        _loop_1(pubKey);\n    }\n    // If an onInit hook is defined, it will need to wrap the ngOnChanges call\n    // so the call order is changes-init-check in creation mode. In subsequent\n    // change detection runs, only the check wrapper will be called.\n    if (definition.onInit != null) {\n        definition.onInit = onChangesWrapper(definition.onInit);\n    }\n    definition.doCheck = onChangesWrapper(definition.doCheck);\n    /**\n     * @param {?} delegateHook\n     * @return {?}\n     */\n    function onChangesWrapper(delegateHook) {\n        return function () {\n            var /** @type {?} */ simpleChanges = this[PRIVATE_PREFIX];\n            if (simpleChanges != null) {\n                this.ngOnChanges(simpleChanges);\n                this[PRIVATE_PREFIX] = null;\n            }\n            delegateHook && delegateHook.apply(this);\n        };\n    }\n}\n/**\n * @template T\n * @param {?} definition\n * @return {?}\n */\nexport function PublicFeature(definition) {\n    definition.diPublic = diPublic;\n}\nvar /** @type {?} */ EMPTY = {};\n/**\n * @return {?}\n */\nfunction noop() { }\n/**\n * Swaps the keys and values of an object.\n * @param {?} obj\n * @return {?}\n */\nfunction invertObject(obj) {\n    if (obj == null)\n        return EMPTY;\n    var /** @type {?} */ newObj = {};\n    for (var /** @type {?} */ minifiedKey in obj) {\n        newObj[obj[minifiedKey]] = minifiedKey;\n    }\n    return newObj;\n}\n/**\n * Create a directive definition object.\n *\n * # Example\n * ```\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ngDirectiveDef = defineDirective({\n *     ...\n *   });\n * }\n * ```\n */\nexport var /** @type {?} */ defineDirective = /** @type {?} */ (defineComponent);\n/**\n * Create a pipe definition object.\n *\n * # Example\n * ```\n * class MyPipe implements PipeTransform {\n *   // Generated by Angular Template Compiler\n *   static ngPipeDef = definePipe({\n *     ...\n *   });\n * }\n * ```\n * @template T\n * @param {?} __0\n * @return {?}\n */\nexport function definePipe(_a) {\n    var type = _a.type, factory = _a.factory, pure = _a.pure;\n    return /** @type {?} */ ({\n        n: factory,\n        pure: pure !== false,\n        onDestroy: type.prototype.ngOnDestroy || null\n    });\n}\n//# sourceMappingURL=definition.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { bindingUpdated, bindingUpdated2, bindingUpdated4, checkAndUpdateBinding, consumeBinding, getCreationMode } from './instructions';\n/**\n * If the value hasn't been saved, calls the pure function to store and return the\n * value. If it has been saved, returns the saved value.\n *\n * @template T\n * @param {?} pureFn Function that returns a value\n * @param {?=} thisArg\n * @return {?} value\n */\nexport function pureFunction0(pureFn, thisArg) {\n    return getCreationMode() ? checkAndUpdateBinding(thisArg ? pureFn.call(thisArg) : pureFn()) :\n        consumeBinding();\n}\n/**\n * If the value of the provided exp has changed, calls the pure function to return\n * an updated value. Or if the value has not changed, returns cached value.\n *\n * @param {?} pureFn Function that returns an updated value\n * @param {?} exp Updated expression value\n * @param {?=} thisArg\n * @return {?} Updated value\n */\nexport function pureFunction1(pureFn, exp, thisArg) {\n    return bindingUpdated(exp) ?\n        checkAndUpdateBinding(thisArg ? pureFn.call(thisArg, exp) : pureFn(exp)) :\n        consumeBinding();\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?=} thisArg\n * @return {?} Updated value\n */\nexport function pureFunction2(pureFn, exp1, exp2, thisArg) {\n    return bindingUpdated2(exp1, exp2) ?\n        checkAndUpdateBinding(thisArg ? pureFn.call(thisArg, exp1, exp2) : pureFn(exp1, exp2)) :\n        consumeBinding();\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?=} thisArg\n * @return {?} Updated value\n */\nexport function pureFunction3(pureFn, exp1, exp2, exp3, thisArg) {\n    var /** @type {?} */ different = bindingUpdated2(exp1, exp2);\n    return bindingUpdated(exp3) || different ?\n        checkAndUpdateBinding(thisArg ? pureFn.call(thisArg, exp1, exp2, exp3) : pureFn(exp1, exp2, exp3)) :\n        consumeBinding();\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @param {?=} thisArg\n * @return {?} Updated value\n */\nexport function pureFunction4(pureFn, exp1, exp2, exp3, exp4, thisArg) {\n    return bindingUpdated4(exp1, exp2, exp3, exp4) ?\n        checkAndUpdateBinding(thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4) : pureFn(exp1, exp2, exp3, exp4)) :\n        consumeBinding();\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @param {?} exp5\n * @param {?=} thisArg\n * @return {?} Updated value\n */\nexport function pureFunction5(pureFn, exp1, exp2, exp3, exp4, exp5, thisArg) {\n    var /** @type {?} */ different = bindingUpdated4(exp1, exp2, exp3, exp4);\n    return bindingUpdated(exp5) || different ?\n        checkAndUpdateBinding(thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5) :\n            pureFn(exp1, exp2, exp3, exp4, exp5)) :\n        consumeBinding();\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @param {?} exp5\n * @param {?} exp6\n * @param {?=} thisArg\n * @return {?} Updated value\n */\nexport function pureFunction6(pureFn, exp1, exp2, exp3, exp4, exp5, exp6, thisArg) {\n    var /** @type {?} */ different = bindingUpdated4(exp1, exp2, exp3, exp4);\n    return bindingUpdated2(exp5, exp6) || different ?\n        checkAndUpdateBinding(thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6) :\n            pureFn(exp1, exp2, exp3, exp4, exp5, exp6)) :\n        consumeBinding();\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @param {?} exp5\n * @param {?} exp6\n * @param {?} exp7\n * @param {?=} thisArg\n * @return {?} Updated value\n */\nexport function pureFunction7(pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, thisArg) {\n    var /** @type {?} */ different = bindingUpdated4(exp1, exp2, exp3, exp4);\n    different = bindingUpdated2(exp5, exp6) || different;\n    return bindingUpdated(exp7) || different ?\n        checkAndUpdateBinding(thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7) :\n            pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7)) :\n        consumeBinding();\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @param {?} exp5\n * @param {?} exp6\n * @param {?} exp7\n * @param {?} exp8\n * @param {?=} thisArg\n * @return {?} Updated value\n */\nexport function pureFunction8(pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8, thisArg) {\n    var /** @type {?} */ different = bindingUpdated4(exp1, exp2, exp3, exp4);\n    return bindingUpdated4(exp5, exp6, exp7, exp8) || different ?\n        checkAndUpdateBinding(thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8) :\n            pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8)) :\n        consumeBinding();\n}\n/**\n * pureFunction instruction that can support any number of bindings.\n *\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} pureFn A pure function that takes binding values and builds an object or array\n * containing those values.\n * @param {?} exps\n * @param {?=} thisArg\n * @return {?} Updated value\n */\nexport function pureFunctionV(pureFn, exps, thisArg) {\n    var /** @type {?} */ different = false;\n    for (var /** @type {?} */ i = 0; i < exps.length; i++) {\n        bindingUpdated(exps[i]) && (different = true);\n    }\n    return different ? checkAndUpdateBinding(pureFn.apply(thisArg, exps)) : consumeBinding();\n}\n//# sourceMappingURL=pure_function.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { EventEmitter } from '../event_emitter';\nimport { getSymbolIterator } from '../util';\nimport { assertEqual, assertNotNull } from './assert';\nimport { ReadFromInjectorFn, getOrCreateNodeInjectorForNode } from './di';\nimport { assertPreviousIsParent, getCurrentQueries, store } from './instructions';\nimport { unusedValueExportToPlacateAjd as unused1 } from './interfaces/definition';\nimport { unusedValueExportToPlacateAjd as unused2 } from './interfaces/injector';\nimport { unusedValueExportToPlacateAjd as unused3 } from './interfaces/node';\nimport { unusedValueExportToPlacateAjd as unused4 } from './interfaces/query';\nimport { flatten } from './util';\nvar /** @type {?} */ unusedValueToPlacateAjd = unused1 + unused2 + unused3 + unused4;\n/**\n * A predicate which determines if a given element/directive should be included in the query\n * results.\n * @record\n */\nexport function QueryPredicate() { }\nfunction QueryPredicate_tsickle_Closure_declarations() {\n    /**\n     * If looking for directives then it contains the directive type.\n     * @type {?}\n     */\n    QueryPredicate.prototype.type;\n    /**\n     * If selector then contains local names to query for.\n     * @type {?}\n     */\n    QueryPredicate.prototype.selector;\n    /**\n     * Indicates which token should be read from DI for this query.\n     * @type {?}\n     */\n    QueryPredicate.prototype.read;\n}\n/**\n * An object representing a query, which is a combination of:\n * - query predicate to determines if a given element/directive should be included in the query\n * - values collected based on a predicate\n * - `QueryList` to which collected values should be reported\n * @record\n */\nexport function LQuery() { }\nfunction LQuery_tsickle_Closure_declarations() {\n    /**\n     * Next query. Used when queries are stored as a linked list in `LQueries`.\n     * @type {?}\n     */\n    LQuery.prototype.next;\n    /**\n     * Destination to which the value should be added.\n     * @type {?}\n     */\n    LQuery.prototype.list;\n    /**\n     * A predicate which determines if a given element/directive should be included in the query\n     * results.\n     * @type {?}\n     */\n    LQuery.prototype.predicate;\n    /**\n     * Values which have been located.\n     *\n     * This is what builds up the `QueryList._valuesTree`.\n     * @type {?}\n     */\n    LQuery.prototype.values;\n}\nvar LQueries_ = /** @class */ (function () {\n    function LQueries_(deep) {\n        this.shallow = null;\n        this.deep = null;\n        this.deep = deep == null ? null : deep;\n    }\n    /**\n     * @template T\n     * @param {?} queryList\n     * @param {?} predicate\n     * @param {?=} descend\n     * @param {?=} read\n     * @return {?}\n     */\n    LQueries_.prototype.track = /**\n     * @template T\n     * @param {?} queryList\n     * @param {?} predicate\n     * @param {?=} descend\n     * @param {?=} read\n     * @return {?}\n     */\n    function (queryList, predicate, descend, read) {\n        // TODO(misko): This is not right. In case of inherited state, a calling track will incorrectly\n        // mutate parent.\n        if (descend) {\n            this.deep = createQuery(this.deep, queryList, predicate, read != null ? read : null);\n        }\n        else {\n            this.shallow = createQuery(this.shallow, queryList, predicate, read != null ? read : null);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    LQueries_.prototype.child = /**\n     * @return {?}\n     */\n    function () {\n        if (this.deep === null) {\n            // if we don't have any deep queries then no need to track anything more.\n            return null;\n        }\n        if (this.shallow === null) {\n            // DeepQuery: We can reuse the current state if the child state would be same as current\n            // state.\n            return this;\n        }\n        else {\n            // We need to create new state\n            return new LQueries_(this.deep);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    LQueries_.prototype.container = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ result = null;\n        var /** @type {?} */ query = this.deep;\n        while (query) {\n            var /** @type {?} */ containerValues = []; // prepare room for views\n            query.values.push(containerValues);\n            var /** @type {?} */ clonedQuery = { next: null, list: query.list, predicate: query.predicate, values: containerValues };\n            clonedQuery.next = result;\n            result = clonedQuery;\n            query = query.next;\n        }\n        return result ? new LQueries_(result) : null;\n    };\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    LQueries_.prototype.enterView = /**\n     * @param {?} index\n     * @return {?}\n     */\n    function (index) {\n        var /** @type {?} */ result = null;\n        var /** @type {?} */ query = this.deep;\n        while (query) {\n            var /** @type {?} */ viewValues = []; // prepare room for view nodes\n            query.values.splice(index, 0, viewValues);\n            var /** @type {?} */ clonedQuery = { next: null, list: query.list, predicate: query.predicate, values: viewValues };\n            clonedQuery.next = result;\n            result = clonedQuery;\n            query = query.next;\n        }\n        return result ? new LQueries_(result) : null;\n    };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    LQueries_.prototype.addNode = /**\n     * @param {?} node\n     * @return {?}\n     */\n    function (node) {\n        add(this.shallow, node);\n        add(this.deep, node);\n    };\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    LQueries_.prototype.removeView = /**\n     * @param {?} index\n     * @return {?}\n     */\n    function (index) {\n        var /** @type {?} */ query = this.deep;\n        while (query) {\n            var /** @type {?} */ removed = query.values.splice(index, 1);\n            // mark a query as dirty only when removed view had matching modes\n            ngDevMode && assertEqual(removed.length, 1, 'removed.length');\n            if (removed[0].length) {\n                query.list.setDirty();\n            }\n            query = query.next;\n        }\n    };\n    return LQueries_;\n}());\nexport { LQueries_ };\nfunction LQueries__tsickle_Closure_declarations() {\n    /** @type {?} */\n    LQueries_.prototype.shallow;\n    /** @type {?} */\n    LQueries_.prototype.deep;\n}\n/**\n * Iterates over local names for a given node and returns directive index\n * (or -1 if a local name points to an element).\n *\n * @param {?} tNode static data of a node to check\n * @param {?} selector selector to match\n * @return {?} directive index, -1 or null if a selector didn't match any of the local names\n */\nfunction getIdxOfMatchingSelector(tNode, selector) {\n    var /** @type {?} */ localNames = tNode.localNames;\n    if (localNames) {\n        for (var /** @type {?} */ i = 0; i < localNames.length; i += 2) {\n            if (localNames[i] === selector) {\n                return /** @type {?} */ (localNames[i + 1]);\n            }\n        }\n    }\n    return null;\n}\n/**\n * Iterates over all the directives for a node and returns index of a directive for a given type.\n *\n * @param {?} node Node on which directives are present.\n * @param {?} type Type of a directive to look for.\n * @return {?} Index of a found directive or null when none found.\n */\nfunction geIdxOfMatchingDirective(node, type) {\n    var /** @type {?} */ tData = node.view.tView.data;\n    var /** @type {?} */ flags = node.flags;\n    for (var /** @type {?} */ i = flags >> 12 /* INDX_SHIFT */, /** @type {?} */\n    ii = i + ((flags & 4092 /* SIZE_MASK */) >> 2 /* SIZE_SHIFT */); i < ii; i++) {\n        var /** @type {?} */ def = /** @type {?} */ (tData[i]);\n        if (def.diPublic && def.type === type) {\n            return i;\n        }\n    }\n    return null;\n}\n/**\n * @param {?} nodeInjector\n * @param {?} node\n * @param {?} read\n * @param {?} directiveIdx\n * @return {?}\n */\nfunction readFromNodeInjector(nodeInjector, node, read, directiveIdx) {\n    if (read instanceof ReadFromInjectorFn) {\n        return read.read(nodeInjector, node, directiveIdx);\n    }\n    else {\n        var /** @type {?} */ matchingIdx = geIdxOfMatchingDirective(node, /** @type {?} */ (read));\n        if (matchingIdx !== null) {\n            return node.view.data[matchingIdx];\n        }\n    }\n    return null;\n}\n/**\n * @param {?} query\n * @param {?} node\n * @return {?}\n */\nfunction add(query, node) {\n    var /** @type {?} */ nodeInjector = getOrCreateNodeInjectorForNode(/** @type {?} */ (node));\n    while (query) {\n        var /** @type {?} */ predicate = query.predicate;\n        var /** @type {?} */ type = predicate.type;\n        if (type) {\n            var /** @type {?} */ directiveIdx = geIdxOfMatchingDirective(node, type);\n            if (directiveIdx !== null) {\n                // a node is matching a predicate - determine what to read\n                // if read token and / or strategy is not specified, use type as read token\n                var /** @type {?} */ result = readFromNodeInjector(nodeInjector, node, predicate.read || type, directiveIdx);\n                if (result !== null) {\n                    addMatch(query, result);\n                }\n            }\n        }\n        else {\n            var /** @type {?} */ selector = /** @type {?} */ ((predicate.selector));\n            for (var /** @type {?} */ i = 0; i < selector.length; i++) {\n                ngDevMode && assertNotNull(node.tNode, 'node.tNode');\n                var /** @type {?} */ directiveIdx = getIdxOfMatchingSelector(/** @type {?} */ ((node.tNode)), selector[i]);\n                if (directiveIdx !== null) {\n                    // a node is matching a predicate - determine what to read\n                    // note that queries using name selector must specify read strategy\n                    ngDevMode && assertNotNull(predicate.read, 'the node should have a predicate');\n                    var /** @type {?} */ result = readFromNodeInjector(nodeInjector, node, /** @type {?} */ ((predicate.read)), directiveIdx);\n                    if (result !== null) {\n                        addMatch(query, result);\n                    }\n                }\n            }\n        }\n        query = query.next;\n    }\n}\n/**\n * @param {?} query\n * @param {?} matchingValue\n * @return {?}\n */\nfunction addMatch(query, matchingValue) {\n    query.values.push(matchingValue);\n    query.list.setDirty();\n}\n/**\n * @template T\n * @param {?} predicate\n * @param {?} read\n * @return {?}\n */\nfunction createPredicate(predicate, read) {\n    var /** @type {?} */ isArray = Array.isArray(predicate);\n    return {\n        type: isArray ? null : /** @type {?} */ (predicate),\n        selector: isArray ? /** @type {?} */ (predicate) : null,\n        read: read\n    };\n}\n/**\n * @template T\n * @param {?} previous\n * @param {?} queryList\n * @param {?} predicate\n * @param {?} read\n * @return {?}\n */\nfunction createQuery(previous, queryList, predicate, read) {\n    return {\n        next: previous,\n        list: queryList,\n        predicate: createPredicate(predicate, read),\n        values: (/** @type {?} */ ((queryList)))._valuesTree\n    };\n}\nvar QueryList_ = /** @class */ (function () {\n    function QueryList_() {\n        this.dirty = true;\n        this.changes = new EventEmitter();\n        this._values = [];\n        /**\n         * \\@internal\n         */\n        this._valuesTree = [];\n    }\n    Object.defineProperty(QueryList_.prototype, \"length\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._values.length; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(QueryList_.prototype, \"first\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            var /** @type {?} */ values = this._values;\n            return values.length ? values[0] : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(QueryList_.prototype, \"last\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            var /** @type {?} */ values = this._values;\n            return values.length ? values[values.length - 1] : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * See\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n     */\n    /**\n     * See\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n     * @template U\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList_.prototype.map = /**\n     * See\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n     * @template U\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { return this._values.map(fn); };\n    /**\n     * See\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n     */\n    /**\n     * See\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList_.prototype.filter = /**\n     * See\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        return this._values.filter(fn);\n    };\n    /**\n     * See\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n     */\n    /**\n     * See\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList_.prototype.find = /**\n     * See\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        return this._values.find(fn);\n    };\n    /**\n     * See\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n     */\n    /**\n     * See\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n     * @template U\n     * @param {?} fn\n     * @param {?} init\n     * @return {?}\n     */\n    QueryList_.prototype.reduce = /**\n     * See\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n     * @template U\n     * @param {?} fn\n     * @param {?} init\n     * @return {?}\n     */\n    function (fn, init) {\n        return this._values.reduce(fn, init);\n    };\n    /**\n     * See\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n     */\n    /**\n     * See\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList_.prototype.forEach = /**\n     * See\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this._values.forEach(fn); };\n    /**\n     * See\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n     */\n    /**\n     * See\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList_.prototype.some = /**\n     * See\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        return this._values.some(fn);\n    };\n    /**\n     * @return {?}\n     */\n    QueryList_.prototype.toArray = /**\n     * @return {?}\n     */\n    function () { return this._values.slice(0); };\n    /**\n     * @return {?}\n     */\n    QueryList_.prototype[getSymbolIterator()] = /**\n     * @return {?}\n     */\n    function () { return (/** @type {?} */ (this._values))[getSymbolIterator()](); };\n    /**\n     * @return {?}\n     */\n    QueryList_.prototype.toString = /**\n     * @return {?}\n     */\n    function () { return this._values.toString(); };\n    /**\n     * @param {?} res\n     * @return {?}\n     */\n    QueryList_.prototype.reset = /**\n     * @param {?} res\n     * @return {?}\n     */\n    function (res) {\n        this._values = flatten(res);\n        (/** @type {?} */ (this)).dirty = false;\n    };\n    /**\n     * @return {?}\n     */\n    QueryList_.prototype.notifyOnChanges = /**\n     * @return {?}\n     */\n    function () { (/** @type {?} */ (this.changes)).emit(this); };\n    /**\n     * @return {?}\n     */\n    QueryList_.prototype.setDirty = /**\n     * @return {?}\n     */\n    function () { (/** @type {?} */ (this)).dirty = true; };\n    /**\n     * @return {?}\n     */\n    QueryList_.prototype.destroy = /**\n     * @return {?}\n     */\n    function () {\n        (/** @type {?} */ (this.changes)).complete();\n        (/** @type {?} */ (this.changes)).unsubscribe();\n    };\n    return QueryList_;\n}());\nfunction QueryList__tsickle_Closure_declarations() {\n    /** @type {?} */\n    QueryList_.prototype.dirty;\n    /** @type {?} */\n    QueryList_.prototype.changes;\n    /** @type {?} */\n    QueryList_.prototype._values;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    QueryList_.prototype._valuesTree;\n}\nexport var /** @type {?} */ QueryList = /** @type {?} */ (QueryList_);\n/**\n * Creates and returns a QueryList.\n *\n * @template T\n * @param {?} memoryIndex The index in memory where the QueryList should be saved. If null,\n * this is is a content query and the QueryList will be saved later through directiveCreate.\n * @param {?} predicate The type for which the query will search\n * @param {?=} descend Whether or not to descend into children\n * @param {?=} read What to save in the query\n * @return {?} QueryList<T>\n */\nexport function query(memoryIndex, predicate, descend, read) {\n    ngDevMode && assertPreviousIsParent();\n    var /** @type {?} */ queryList = new QueryList();\n    var /** @type {?} */ queries = getCurrentQueries(LQueries_);\n    queries.track(queryList, predicate, descend, read);\n    if (memoryIndex != null) {\n        store(memoryIndex, queryList);\n    }\n    return queryList;\n}\n/**\n * Refreshes a query by combining matches from all active views and removing matches from deleted\n * views.\n * Returns true if a query got dirty during change detection, false otherwise.\n * @param {?} queryList\n * @return {?}\n */\nexport function queryRefresh(queryList) {\n    var /** @type {?} */ queryListImpl = (/** @type {?} */ ((queryList)));\n    if (queryList.dirty) {\n        queryList.reset(queryListImpl._valuesTree);\n        queryList.notifyOnChanges();\n        return true;\n    }\n    return false;\n}\n//# sourceMappingURL=query.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { assertNotNull } from './assert';\nimport { queueLifecycleHooks } from './hooks';\nimport { CLEAN_PROMISE, _getComponentHostLElementNode, createLView, createTView, directiveCreate, enterView, getDirectiveInstance, getRootView, hostElement, initChangeDetectorIfExisting, locateHostElement, tick } from './instructions';\nimport { domRendererFactory3 } from './interfaces/renderer';\nimport { stringify } from './util';\nimport { createViewRef } from './view_ref';\n/**\n * Options that control how the component should be bootstrapped.\n * @record\n */\nexport function CreateComponentOptions() { }\nfunction CreateComponentOptions_tsickle_Closure_declarations() {\n    /**\n     * Which renderer factory to use.\n     * @type {?|undefined}\n     */\n    CreateComponentOptions.prototype.rendererFactory;\n    /**\n     * Host element on which the component will be bootstrapped. If not specified,\n     * the component definition's `tag` is used to query the existing DOM for the\n     * element to bootstrap.\n     * @type {?|undefined}\n     */\n    CreateComponentOptions.prototype.host;\n    /**\n     * Module injector for the component. If unspecified, the injector will be NULL_INJECTOR.\n     * @type {?|undefined}\n     */\n    CreateComponentOptions.prototype.injector;\n    /**\n     * List of features to be applied to the created component. Features are simply\n     * functions that decorate a component with a certain behavior.\n     *\n     * Typically, the features in this list are features that cannot be added to the\n     * other features list in the component definition because they rely on other factors.\n     *\n     * Example: `RootLifecycleHooks` is a function that adds lifecycle hook capabilities\n     * to root components in a tree-shakable way. It cannot be added to the component\n     * features list because there's no way of knowing when the component will be used as\n     * a root component.\n     * @type {?|undefined}\n     */\n    CreateComponentOptions.prototype.hostFeatures;\n    /**\n     * A function which is used to schedule change detection work in the future.\n     *\n     * When marking components as dirty, it is necessary to schedule the work of\n     * change detection in the future. This is done to coalesce multiple\n     * {\\@link markDirty} calls into a single changed detection processing.\n     *\n     * The default value of the scheduler is the `requestAnimationFrame` function.\n     *\n     * It is also useful to override this function for testing purposes.\n     * @type {?|undefined}\n     */\n    CreateComponentOptions.prototype.scheduler;\n}\n/**\n * Bootstraps a component, then creates and returns a `ComponentRef` for that component.\n *\n * @template T\n * @param {?} componentType Component to bootstrap\n * @param {?} opts\n * @return {?}\n */\nexport function createComponentRef(componentType, opts) {\n    var /** @type {?} */ component = renderComponent(componentType, opts);\n    var /** @type {?} */ hostView = /** @type {?} */ (_getComponentHostLElementNode(component).data);\n    var /** @type {?} */ hostViewRef = createViewRef(hostView, component);\n    return {\n        location: { nativeElement: getHostElement(component) },\n        injector: opts.injector || NULL_INJECTOR,\n        instance: component,\n        hostView: hostViewRef,\n        changeDetectorRef: hostViewRef,\n        componentType: componentType,\n        // TODO: implement destroy and onDestroy\n        destroy: function () { },\n        onDestroy: function (cb) { }\n    };\n}\n// TODO: A hack to not pull in the NullInjector from @angular/core.\nexport var /** @type {?} */ NULL_INJECTOR = {\n    get: function (token, notFoundValue) {\n        throw new Error('NullInjector: Not found: ' + stringify(token));\n    }\n};\n/**\n * Bootstraps a Component into an existing host element and returns an instance\n * of the component.\n *\n * Use this function to bootstrap a component into the DOM tree. Each invocation\n * of this function will create a separate tree of components, injectors and\n * change detection cycles and lifetimes. To dynamically insert a new component\n * into an existing tree such that it shares the same injection, change detection\n * and object lifetime, use {\\@link ViewContainer#createComponent}.\n *\n * @template T\n * @param {?} componentType Component to bootstrap\n * @param {?=} opts\n * @return {?}\n */\nexport function renderComponent(componentType, opts) {\n    if (opts === void 0) { opts = {}; }\n    var /** @type {?} */ rendererFactory = opts.rendererFactory || domRendererFactory3;\n    var /** @type {?} */ componentDef = /** @type {?} */ (componentType.ngComponentDef);\n    if (componentDef.type != componentType)\n        componentDef.type = componentType;\n    var /** @type {?} */ component;\n    var /** @type {?} */ hostNode = locateHostElement(rendererFactory, opts.host || componentDef.tag);\n    var /** @type {?} */ rootContext = {\n        // Incomplete initialization due to circular reference.\n        component: /** @type {?} */ ((null)),\n        scheduler: opts.scheduler || requestAnimationFrame,\n        clean: CLEAN_PROMISE,\n    };\n    var /** @type {?} */ oldView = enterView(createLView(-1, rendererFactory.createRenderer(hostNode, componentDef.rendererType), createTView(), null, rootContext, componentDef.onPush ? 4 /* Dirty */ : 2 /* CheckAlways */), /** @type {?} */ ((null)));\n    try {\n        // Create element node at index 0 in data array\n        var /** @type {?} */ elementNode = hostElement(hostNode, componentDef);\n        // Create directive instance with n() and store at index 1 in data array (el is 0)\n        component = rootContext.component =\n            getDirectiveInstance(directiveCreate(1, componentDef.n(), componentDef));\n        initChangeDetectorIfExisting(elementNode.nodeInjector, component);\n    }\n    finally {\n        // We must not use leaveView here because it will set creationMode to false too early,\n        // causing init-only hooks not to run. The detectChanges call below will execute\n        // leaveView at the appropriate time in the lifecycle.\n        enterView(oldView, null);\n    }\n    opts.hostFeatures && opts.hostFeatures.forEach(function (feature) { return feature(component, componentDef); });\n    tick(component);\n    return component;\n}\n/**\n * Used to enable lifecycle hooks on the root component.\n *\n * Include this feature when calling `renderComponent` if the root component\n * you are rendering has lifecycle hooks defined. Otherwise, the hooks won't\n * be called properly.\n *\n * Example:\n *\n * ```\n * renderComponent(AppComponent, {features: [RootLifecycleHooks]});\n * ```\n * @param {?} component\n * @param {?} def\n * @return {?}\n */\nexport function LifecycleHooksFeature(component, def) {\n    var /** @type {?} */ elementNode = _getComponentHostLElementNode(component);\n    queueLifecycleHooks(elementNode.flags, elementNode.view);\n}\n/**\n * Retrieve the root context for any component by walking the parent `LView` until\n * reaching the root `LView`.\n *\n * @param {?} component any component\n * @return {?}\n */\nfunction getRootContext(component) {\n    var /** @type {?} */ rootContext = /** @type {?} */ (getRootView(component).context);\n    ngDevMode && assertNotNull(rootContext, 'rootContext');\n    return rootContext;\n}\n/**\n * Retrieve the host element of the component.\n *\n * Use this function to retrieve the host element of the component. The host\n * element is the element which the component is associated with.\n *\n * @template T\n * @param {?} component Component for which the host element should be retrieved.\n * @return {?}\n */\nexport function getHostElement(component) {\n    return /** @type {?} */ (_getComponentHostLElementNode(component).native);\n}\n/**\n * Retrieves the rendered text for a given component.\n *\n * This function retrieves the host element of a component and\n * and then returns the `textContent` for that element. This implies\n * that the text returned will include re-projected content of\n * the component as well.\n *\n * @param {?} component The component to return the content text for.\n * @return {?}\n */\nexport function getRenderedText(component) {\n    var /** @type {?} */ hostElement = getHostElement(component);\n    return hostElement.textContent || '';\n}\n/**\n * Wait on component until it is rendered.\n *\n * This function returns a `Promise` which is resolved when the component's\n * change detection is executed. This is determined by finding the scheduler\n * associated with the `component`'s render tree and waiting until the scheduler\n * flushes. If nothing is scheduled, the function returns a resolved promise.\n *\n * Example:\n * ```\n * await whenRendered(myComponent);\n * ```\n *\n * @param {?} component Component to wait upon\n * @return {?} Promise which resolves when the component is rendered.\n */\nexport function whenRendered(component) {\n    return getRootContext(component).clean;\n}\n//# sourceMappingURL=component.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { getTView, load, store } from './instructions';\nimport { pureFunction1, pureFunction2, pureFunction3, pureFunction4, pureFunctionV } from './pure_function';\n/**\n * Create a pipe.\n *\n * @template T\n * @param {?} index Pipe index where the pipe will be stored.\n * @param {?} pipeDef Pipe definition object for registering life cycle hooks.\n * @param {?=} firstInstance (optional) The first instance of the pipe that can be reused for pure pipes.\n * @return {?} T the instance of the pipe.\n */\nexport function pipe(index, pipeDef, firstInstance) {\n    var /** @type {?} */ tView = getTView();\n    if (tView.firstTemplatePass) {\n        tView.data[index] = pipeDef;\n        if (pipeDef.onDestroy != null) {\n            (tView.destroyHooks || (tView.destroyHooks = [])).push(index, pipeDef.onDestroy);\n        }\n    }\n    var /** @type {?} */ pipeInstance = pipeDef.pure && firstInstance ? firstInstance : pipeDef.n();\n    store(index, pipeInstance);\n    return pipeInstance;\n}\n/**\n * Invokes a pipe with 1 arguments.\n *\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param {?} index Pipe index where the pipe was stored on creation.\n * @param {?} v1 1st argument to {\\@link PipeTransform#transform}.\n * @return {?}\n */\nexport function pipeBind1(index, v1) {\n    var /** @type {?} */ pipeInstance = load(index);\n    return isPure(index) ? pureFunction1(pipeInstance.transform, v1, pipeInstance) :\n        pipeInstance.transform(v1);\n}\n/**\n * Invokes a pipe with 2 arguments.\n *\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param {?} index Pipe index where the pipe was stored on creation.\n * @param {?} v1 1st argument to {\\@link PipeTransform#transform}.\n * @param {?} v2 2nd argument to {\\@link PipeTransform#transform}.\n * @return {?}\n */\nexport function pipeBind2(index, v1, v2) {\n    var /** @type {?} */ pipeInstance = load(index);\n    return isPure(index) ? pureFunction2(pipeInstance.transform, v1, v2, pipeInstance) :\n        pipeInstance.transform(v1, v2);\n}\n/**\n * Invokes a pipe with 3 arguments.\n *\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param {?} index Pipe index where the pipe was stored on creation.\n * @param {?} v1 1st argument to {\\@link PipeTransform#transform}.\n * @param {?} v2 2nd argument to {\\@link PipeTransform#transform}.\n * @param {?} v3 4rd argument to {\\@link PipeTransform#transform}.\n * @return {?}\n */\nexport function pipeBind3(index, v1, v2, v3) {\n    var /** @type {?} */ pipeInstance = load(index);\n    return isPure(index) ? pureFunction3(pipeInstance.transform.bind(pipeInstance), v1, v2, v3) :\n        pipeInstance.transform(v1, v2, v3);\n}\n/**\n * Invokes a pipe with 4 arguments.\n *\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param {?} index Pipe index where the pipe was stored on creation.\n * @param {?} v1 1st argument to {\\@link PipeTransform#transform}.\n * @param {?} v2 2nd argument to {\\@link PipeTransform#transform}.\n * @param {?} v3 3rd argument to {\\@link PipeTransform#transform}.\n * @param {?} v4 4th argument to {\\@link PipeTransform#transform}.\n * @return {?}\n */\nexport function pipeBind4(index, v1, v2, v3, v4) {\n    var /** @type {?} */ pipeInstance = load(index);\n    return isPure(index) ? pureFunction4(pipeInstance.transform, v1, v2, v3, v4, pipeInstance) :\n        pipeInstance.transform(v1, v2, v3, v4);\n}\n/**\n * Invokes a pipe with variable number of arguments.\n *\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param {?} index Pipe index where the pipe was stored on creation.\n * @param {?} values Array of arguments to pass to {\\@link PipeTransform#transform} method.\n * @return {?}\n */\nexport function pipeBindV(index, values) {\n    var /** @type {?} */ pipeInstance = load(index);\n    return isPure(index) ? pureFunctionV(pipeInstance.transform, values, pipeInstance) :\n        pipeInstance.transform.apply(pipeInstance, values);\n}\n/**\n * @param {?} index\n * @return {?}\n */\nfunction isPure(index) {\n    return (/** @type {?} */ (getTView().data[index])).pure;\n}\n//# sourceMappingURL=pipe.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { stringify } from '../render3/util';\nimport { _sanitizeHtml as _sanitizeHtml } from './html_sanitizer';\nimport { _sanitizeStyle as _sanitizeStyle } from './style_sanitizer';\nimport { _sanitizeUrl as _sanitizeUrl } from './url_sanitizer';\nvar /** @type {?} */ BRAND = '__SANITIZER_TRUSTED_BRAND__';\n/**\n * A branded trusted string used with sanitization.\n *\n * See: {\\@link TrustedHtmlString}, {\\@link TrustedResourceUrlString}, {\\@link TrustedScriptString},\n * {\\@link TrustedStyleString}, {\\@link TrustedUrlString}\n * @record\n */\nexport function TrustedString() { }\nfunction TrustedString_tsickle_Closure_declarations() {\n    /** @type {?} */\n    TrustedString.prototype.__SANITIZER_TRUSTED_BRAND__;\n}\n/**\n * A branded trusted string used with sanitization of `html` strings.\n *\n * See: {\\@link bypassSanitizationTrustHtml} and {\\@link htmlSanitizer}.\n * @record\n */\nexport function TrustedHtmlString() { }\nfunction TrustedHtmlString_tsickle_Closure_declarations() {\n    /** @type {?} */\n    TrustedHtmlString.prototype.__SANITIZER_TRUSTED_BRAND__;\n}\n/**\n * A branded trusted string used with sanitization of `style` strings.\n *\n * See: {\\@link bypassSanitizationTrustStyle} and {\\@link styleSanitizer}.\n * @record\n */\nexport function TrustedStyleString() { }\nfunction TrustedStyleString_tsickle_Closure_declarations() {\n    /** @type {?} */\n    TrustedStyleString.prototype.__SANITIZER_TRUSTED_BRAND__;\n}\n/**\n * A branded trusted string used with sanitization of `url` strings.\n *\n * See: {\\@link bypassSanitizationTrustScript} and {\\@link scriptSanitizer}.\n * @record\n */\nexport function TrustedScriptString() { }\nfunction TrustedScriptString_tsickle_Closure_declarations() {\n    /** @type {?} */\n    TrustedScriptString.prototype.__SANITIZER_TRUSTED_BRAND__;\n}\n/**\n * A branded trusted string used with sanitization of `url` strings.\n *\n * See: {\\@link bypassSanitizationTrustUrl} and {\\@link urlSanitizer}.\n * @record\n */\nexport function TrustedUrlString() { }\nfunction TrustedUrlString_tsickle_Closure_declarations() {\n    /** @type {?} */\n    TrustedUrlString.prototype.__SANITIZER_TRUSTED_BRAND__;\n}\n/**\n * A branded trusted string used with sanitization of `resourceUrl` strings.\n *\n * See: {\\@link bypassSanitizationTrustResourceUrl} and {\\@link resourceUrlSanitizer}.\n * @record\n */\nexport function TrustedResourceUrlString() { }\nfunction TrustedResourceUrlString_tsickle_Closure_declarations() {\n    /** @type {?} */\n    TrustedResourceUrlString.prototype.__SANITIZER_TRUSTED_BRAND__;\n}\n/**\n * An `html` sanitizer which converts untrusted `html` **string** into trusted string by removing\n * dangerous content.\n *\n * This method parses the `html` and locates potentially dangerous content (such as urls and\n * javascript) and removes it.\n *\n * It is possible to mark a string as trusted by calling {\\@link bypassSanitizationTrustHtml}.\n *\n * @param {?} unsafeHtml untrusted `html`, typically from the user.\n * @return {?} `html` string which is safe to display to user, because all of the dangerous javascript\n * and urls have been removed.\n */\nexport function sanitizeHtml(unsafeHtml) {\n    if (unsafeHtml instanceof String && (/** @type {?} */ (unsafeHtml))[BRAND] === 'Html') {\n        return unsafeHtml.toString();\n    }\n    return _sanitizeHtml(document, stringify(unsafeHtml));\n}\n/**\n * A `style` sanitizer which converts untrusted `style` **string** into trusted string by removing\n * dangerous content.\n *\n * This method parses the `style` and locates potentially dangerous content (such as urls and\n * javascript) and removes it.\n *\n * It is possible to mark a string as trusted by calling {\\@link bypassSanitizationTrustStyle}.\n *\n * @param {?} unsafeStyle untrusted `style`, typically from the user.\n * @return {?} `style` string which is safe to bind to the `style` properties, because all of the\n * dangerous javascript and urls have been removed.\n */\nexport function sanitizeStyle(unsafeStyle) {\n    if (unsafeStyle instanceof String && (/** @type {?} */ (unsafeStyle))[BRAND] === 'Style') {\n        return unsafeStyle.toString();\n    }\n    return _sanitizeStyle(stringify(unsafeStyle));\n}\n/**\n * A `url` sanitizer which converts untrusted `url` **string** into trusted string by removing\n * dangerous\n * content.\n *\n * This method parses the `url` and locates potentially dangerous content (such as javascript) and\n * removes it.\n *\n * It is possible to mark a string as trusted by calling {\\@link bypassSanitizationTrustUrl}.\n *\n * @param {?} unsafeUrl untrusted `url`, typically from the user.\n * @return {?} `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * all of the dangerous javascript has been removed.\n */\nexport function sanitizeUrl(unsafeUrl) {\n    if (unsafeUrl instanceof String && (/** @type {?} */ (unsafeUrl))[BRAND] === 'Url') {\n        return unsafeUrl.toString();\n    }\n    return _sanitizeUrl(stringify(unsafeUrl));\n}\n/**\n * A `url` sanitizer which only lets trusted `url`s through.\n *\n * This passes only `url`s marked trusted by calling {\\@link bypassSanitizationTrustResourceUrl}.\n *\n * @param {?} unsafeResourceUrl untrusted `url`, typically from the user.\n * @return {?} `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * only trusted `url`s have been allowed to pass.\n */\nexport function sanitizeResourceUrl(unsafeResourceUrl) {\n    if (unsafeResourceUrl instanceof String &&\n        (/** @type {?} */ (unsafeResourceUrl))[BRAND] === 'ResourceUrl') {\n        return unsafeResourceUrl.toString();\n    }\n    throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');\n}\n/**\n * A `script` sanitizer which only lets trusted javascript through.\n *\n * This passes only `script`s marked trusted by calling {\\@link bypassSanitizationTrustScript}.\n *\n * @param {?} unsafeScript untrusted `script`, typically from the user.\n * @return {?} `url` string which is safe to bind to the `<script>` element such as `<img src>`,\n * because only trusted `scripts`s have been allowed to pass.\n */\nexport function sanitizeScript(unsafeScript) {\n    if (unsafeScript instanceof String && (/** @type {?} */ (unsafeScript))[BRAND] === 'Script') {\n        return unsafeScript.toString();\n    }\n    throw new Error('unsafe value used in a script context');\n}\n/**\n * Mark `html` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {\\@link htmlSanitizer} to be trusted implicitly.\n *\n * @param {?} trustedHtml `html` string which needs to be implicitly trusted.\n * @return {?} a `html` `String` which has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustHtml(trustedHtml) {\n    return bypassSanitizationTrustString(trustedHtml, 'Html');\n}\n/**\n * Mark `style` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {\\@link styleSanitizer} to be trusted implicitly.\n *\n * @param {?} trustedStyle `style` string which needs to be implicitly trusted.\n * @return {?} a `style` `String` which has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustStyle(trustedStyle) {\n    return bypassSanitizationTrustString(trustedStyle, 'Style');\n}\n/**\n * Mark `script` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {\\@link scriptSanitizer} to be trusted implicitly.\n *\n * @param {?} trustedScript `script` string which needs to be implicitly trusted.\n * @return {?} a `script` `String` which has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustScript(trustedScript) {\n    return bypassSanitizationTrustString(trustedScript, 'Script');\n}\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {\\@link urlSanitizer} to be trusted implicitly.\n *\n * @param {?} trustedUrl `url` string which needs to be implicitly trusted.\n * @return {?} a `url` `String` which has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustUrl(trustedUrl) {\n    return bypassSanitizationTrustString(trustedUrl, 'Url');\n}\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {\\@link resourceUrlSanitizer} to be trusted implicitly.\n *\n * @param {?} trustedResourceUrl `url` string which needs to be implicitly trusted.\n * @return {?} a `url` `String` which has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustResourceUrl(trustedResourceUrl) {\n    return bypassSanitizationTrustString(trustedResourceUrl, 'ResourceUrl');\n}\n/**\n * @param {?} trustedString\n * @param {?} mode\n * @return {?}\n */\nfunction bypassSanitizationTrustString(trustedString, mode) {\n    var /** @type {?} */ trusted = /** @type {?} */ (new String(trustedString));\n    trusted[BRAND] = mode;\n    return trusted;\n}\n//# sourceMappingURL=sanitization.js.map"]}