{"version":3,"sources":["packages/core/core.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","core","rxjs","operators","this","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__values","o","m","Symbol","iterator","next","value","done","__read","r","e","ar","push","error","__spread","concat","ANNOTATIONS","PARAMETERS","PROP_METADATA","makeDecorator","name","props","parentClass","additionalProcessing","typeFn","metaCtor","makeMetadataCtor","DecoratorFactory","_a","args","_i","annotationInstance","bind","TypeDecorator","cls","defineProperty","ngMetadataName","annotationCls","ctor","values","propName","makeParamDecorator","ParamDecoratorFactory","ParamDecorator","annotation","unusedKey","index","parameters","makePropDecorator","PropDecoratorFactory","decoratorInstance","PropDecorator","target","meta","unshift","InjectFlags","Inject","token","Optional","Self","SkipSelf","Host","Attribute","attributeName","getClosureSafeProperty","objWithPropertyToExtract","key","Error","fillProperties","source","ɵɵdefineInjectable","opts","providedIn","undefined","defineInjectable","ɵɵdefineInjector","options","providers","imports","getInjectableDef","type","def","NG_INJECTABLE_DEF","getInjectorDef","NG_INJECTOR_DEF","ngInjectableDef","ngInjectorDef","stringify","map","join","overriddenName","res","toString","newLineIndex","indexOf","substring","__forward_ref__","forwardRef","forwardRefFn","resolveForwardRef","fn","R3ResolvedDependencyType","__globalThis","globalThis","__window","window","__self","WorkerGlobalScope","__global","_global","getCompilerFacade","globalNg","ɵcompilerFacade","_injectImplementation","InjectionToken","_desc","__NG_ELEMENT_ID__","INJECTOR","THROW_IF_NOT_FOUND","NEW_LINE","SOURCE","USE_VALUE","provide","String","useValue","_currentInjector","setCurrentInjector","injector","former","setInjectImplementation","impl","previous","ɵɵinject","flags","Default","injectInjectorOnly","injectRootLimpMode","get","inject","notFoundValue","injectableDef","injectArgs","types","arg","isArray","j","NullInjector","angularCoreDiEnv","ɵɵgetFactoryOf","getFactoryOf","typeAny","Type","Function","isType","v","DELEGATE_CTOR","INHERITED_CLASS","INHERITED_CLASS_WITH_CTOR","INHERITED_CLASS_WITH_DELEGATE_CTOR","ReflectionCapabilities","reflect","_reflect","isReflectionEnabled","_zipTypesAndAnnotations","paramTypes","paramAnnotations","result","_ownParameters","parentCtor","isDelegateCtor","typeStr","test","tsickleCtorParams","ctorParameters","paramTypes_1","ctorParam","paramAnnotations_1","convertTsickleDecoratorIntoMetadata","decorators","getOwnMetadata","fill","getParentCtor","_ownAnnotations","typeOrFunc","annotations","ownAnnotations","_ownPropMetadata","propMetadata","propDecorators","propDecorators_1","propMetadata_1","keys","forEach","prop","parentPropMetadata_1","ownPropMetadata","hasLifecycleHook","lcProperty","guards","getter","setter","method","importUri","resourceUri","resolveIdentifier","moduleUrl","members","runtime","resolveEnum","enumIdentifier","decoratorInvocations","decoratorInvocation","parentProto","getPrototypeOf","getReflect","reflectDependencies","convertDependencies","deps","compiler","dep","reflectDependency","host","optional","resolved","Token","skipSelf","setTokenAndResolvedType","param","compileInjectable","srcMeta","hasAProvider","isUseClassProvider","isUseFactoryProvider","isUseValueProvider","isUseExistingProvider","compilerMeta","typeArgumentCount","ctorDeps","userDeps","useClass","useFactory","useExisting","USE_VALUE$1","Injectable","SWITCH_COMPILE_INJECTABLE","SWITCH_COMPILE_INJECTABLE__POST_R3__","throwMultipleComponentError","tNode","tagName","throwMixedMultiProviderError","APP_ROOT","NOT_YET","CIRCULAR","EMPTY_ARRAY","NULL_INJECTOR","getNullInjector","createInjector","defType","parent","additionalProviders","R3Injector","_this","records","Map","injectorDefTypes","Set","onDestroy","_destroyed","dedupStack","deepForEach","injectorDef","processInjectorType","provider","processProvider","set","makeRecord","isRootInjector","has","enumerable","configurable","destroy","assertNotDestroyed","service","ngOnDestroy","clear","previousInjector","record","couldBeInjectableType","injectableDefInScope","injectableDefOrInjectorDefFactory","hydrate","catchInjectorError","injectorErrorName","tokenPath","message","formatError","text","obj","charAt","substr","context","parts","JSON","replace","tokens","defOrWrappedDef","parents","ngModule","isDuplicate","add","importTypesWithProviders_1","imported","_loop_1","ngModule_1","defProviders","injectorType_1","ngModuleType","isTypeProvider","providerToRecord","providerToFactory","isValueProvider","multi","existing","multiRecord_1","throwCyclicDependencyError","hasOnDestroy","getUndecoratedInjectableFactory","paramLength","inheritedInjectableDef","getInheritedInjectableDef","console","warn","isExistingProvider","isFactoryProvider","classRef_1","throwInvalidProviderError","ngModuleDetail","hasDeps","input","INJECTOR_IMPL__POST_R3__","INJECTOR_IMPL","Injector","NULL","ERROR_DEBUG_CONTEXT","ERROR_ORIGINAL_ERROR","ERROR_LOGGER","constructResolvingPath","findFirstClosedCycle","slice","reverse","k","injectionError","constructResolvingMessage","originalError","errMsg","wrappedError","msg","addKey","injectors","noAnnotationError","params","signature","ii","parameter","ReflectiveKey","id","displayName","_globalKeyRegistry","numberOfKeys","KeyRegistry","_allKeys","newKey","size","reflector","Reflector","reflectionCapabilities","updateCapabilities","caps","identifier","ReflectiveDependency","visibility","fromKey","_EMPTY_LIST","ResolvedReflectiveProvider_","resolvedFactories","multiProvider","resolvedFactory","ResolvedReflectiveFactory","dependencies","resolveReflectiveFactory","factoryFn","resolvedDeps","_dependenciesFor","aliasInstance","constructDependencies","params_1","_extractToken","resolveReflectiveProvider","some","metadata","_createDependency","paramMetadata","ChangeDetectionStrategy","ChangeDetectorStatus","Query","UNDEFINED","ReflectiveInjector","resolve","resolveReflectiveProviders","resolvedProviderMap","mergeResolvedReflectiveProviders","normalizedProvidersMap","resolvedProvider","_normalizeProviders","invalidProviderError","from","resolveAndCreate","ResolvedReflectiveProviders","fromResolvedProviders","ReflectiveInjector_","_providers","_parent","_constructionCounter","len","keyIds","objs","_getByKey","resolveAndCreateChild","createChildFromResolved","inj","resolveAndInstantiate","instantiateResolved","_instantiateProvider","getProviderAtIndex","outOfBoundsError","_new","_getMaxNumberOfObjects","cyclicDependencyError","_instantiate","_getByReflectiveDependency","instantiationError","originalException","originalStack","first","INJECTOR_KEY","_getByKeySelf","_getByKeyDefault","_getObjByKeyId","keyId","_throwOrNull","noProviderError","inj_","_mapProviders","ANALYZE_FOR_ENTRY_COMPONENTS","ContentChildren","selector","data","isViewQuery","descendants","ContentChild","ViewChildren","ViewChild","resolveComponentResources","resourceResolver","componentResolved","urlMap","cachedResourceResolve","url","promise","resp","then","unwrapResponse","componentResourceResolutionQueue","component","promises","templateUrl","template","styleUrls","styles","styleOffset","styleUrl","style","splice","fullyResolved","Promise","all","componentDefResolved","componentDefPendingResolution","delete","clearResolutionOfComponentResourcesQueue","ɵChangeDetectorStatus","ViewEncapsulation","componentNeedsResolution","old","response","noSideEffects","EMPTY_OBJ","EMPTY_ARRAY$1","NG_COMPONENT_DEF","ngComponentDef","NG_DIRECTIVE_DEF","ngDirectiveDef","NG_PIPE_DEF","ngPipeDef","NG_MODULE_DEF","ngModuleDef","NG_LOCALE_ID_DEF","ngLocaleIdDef","NG_BASE_DEF","ngBaseDef","NG_ELEMENT_ID","_renderCompCount","ɵɵdefineComponent","componentDefinition","typePrototype","declaredInputs","providersResolver","consts","vars","ngContentSelectors","hostBindings","contentQueries","inputs","outputs","exportAs","onChanges","onInit","ngOnInit","doCheck","ngDoCheck","afterContentInit","ngAfterContentInit","afterContentChecked","ngAfterContentChecked","afterViewInit","ngAfterViewInit","afterViewChecked","ngAfterViewChecked","onPush","changeDetection","OnPush","directiveDefs","pipeDefs","selectors","viewQuery","features","encapsulation","Emulated","_","setInput","schemas","tView","directiveTypes","directives","feature","pipeTypes","pipes","invertObject","extractDirectiveDef","extractPipeDef","ɵɵsetComponentScope","getComponentDef","getDirectiveDef","getPipeDef","ɵɵdefineNgModule","bootstrap","declarations","transitiveCompileScopes","ɵɵsetNgModuleScope","scope","getNgModuleDef","secondary","newLookup","minifiedKey","publicName","declaredName","ɵɵdefineBase","baseDefinition","ɵɵdefineDirective","ɵɵdefinePipe","pipeDef","pure","getBaseDef","throwNotFound","renderStringify","stringifyForError","defaultScheduler","requestAnimationFrame","setTimeout","ɵɵresolveWindow","element","ownerDocument","defaultView","ɵɵresolveDocument","ɵɵresolveBody","body","INTERPOLATION_DELIMITER","isPropMetadataString","str","maybeUnwrapFn","HOST","TVIEW","FLAGS","PARENT","NEXT","QUERIES","T_HOST","BINDING_INDEX","CLEANUP","CONTEXT","INJECTOR$1","RENDERER_FACTORY","RENDERER","SANITIZER","CHILD_HEAD","CHILD_TAIL","CONTENT_QUERIES","DECLARATION_VIEW","PREORDER_HOOK_FLAGS","HEADER_OFFSET","throwError","TYPE","ACTIVE_INDEX","NATIVE","CONTAINER_HEADER_OFFSET","MONKEY_PATCH_KEY_NAME","unwrapRNode","isLView","isLContainer","isStylingContext","getNativeByIndex","lView","getNativeByTNode","hostView","getTNode","view","loadInternal","getComponentViewByIndex","nodeIndex","slotValue","isContentQueryHost","isComponent","isComponentDef","isRootView","readPatchedData","readPatchedLView","viewAttachedToContainer","resetPreOrderHookFlags","registerPreOrderHooks","directiveIndex","directiveDef","initialPreOrderHooksLength","initialPreOrderCheckHooksLength","preOrderHooks","preOrderCheckHooks","registerPostOrderHooks","firstTemplatePass","directiveStart","end","directiveEnd","contentHooks","contentCheckHooks","viewHooks","viewCheckHooks","destroyHooks","executePreOrderHooks","currentView","checkNoChangesMode","currentNodeIndex","executeHooks","firstPassHooks","checkHooks","initPhaseState","hooksToCall","callHooks","arr","initPhase","nodeIndexLimit","lastNodeIndexFound","callHook","isInitHook","hook","directive","elementDepthCount","stylingContext","setCachedStylingContext","bindingsEnabled","currentDirectiveDef","setCurrentDirectiveDef","ɵɵenableBindings","ɵɵdisableBindings","getLView","previousOrParentTNode","isParent","MIN_DIRECTIVE_ID","activeDirectiveId","activeDirectiveSuperClassDepthPosition","activeDirectiveSuperClassHeight","setActiveHostElement","elementIndex","_selectedIndex","setSelectedIndex","getActiveDirectiveId","incrementActiveDirectiveId","adjustActiveDirectiveSuperClassDepthPosition","delta","Math","max","getActiveDirectiveSuperClassHeight","getActiveDirectiveSuperClassDepth","ɵɵrestoreView","viewToRestore","contextLView","getPreviousOrParentTNode","setPreviousOrParentTNode","_isParent","setTNodeAndViewData","getIsParent","setIsNotParent","isCreationMode","getCheckNoChangesMode","setCheckNoChangesMode","mode","bindingRootIndex","getBindingRoot","setBindingRoot","currentQueryIndex","getCurrentQueryIndex","setCurrentQueryIndex","enterView","newView","hostTNode","oldView","bindingStartIndex","leaveView","getSelectedIndex","_currentNamespace","ɵɵnamespaceSVG","ɵɵnamespaceMathML","ɵɵnamespaceHTML","BRAND","allowSanitizationBypass","bypassSanitizationTrustString","trustedString","trusted","_devMode","_runModeLocked","isDevMode","InertBodyHelper","defaultDoc","inertDocument","implementation","createHTMLDocument","inertBodyElement","inertHtml","createElement","appendChild","innerHTML","querySelector","getInertBodyElement","isDOMParserAvailable","DOMParser","getInertBodyElement_DOMParser","getInertBodyElement_InertDocument","getInertBodyElement_XHR","html","encodeURI","xhr","XMLHttpRequest","responseType","open","send","removeChild","firstChild","parseFromString","templateEl","documentMode","stripCustomNsAttrs","el","elAttrs","attributes","attrName","item","removeAttribute","childNode","nodeType","Node","ELEMENT_NODE","nextSibling","SAFE_URL_PATTERN","DATA_URL_PATTERN","_sanitizeUrl","match","sanitizeSrcset","srcset","split","trim","tagSet","tags","e_1","_b","_c","e_1_1","return","merge","e_2","sets","sets_1","sets_1_1","e_2_1","inertBodyHelper","SecurityContext","VOID_ELEMENTS","OPTIONAL_END_TAG_BLOCK_ELEMENTS","OPTIONAL_END_TAG_INLINE_ELEMENTS","OPTIONAL_END_TAG_ELEMENTS","BLOCK_ELEMENTS","INLINE_ELEMENTS","VALID_ELEMENTS","URI_ATTRS","SRCSET_ATTRS","HTML_ATTRS","ARIA_ATTRS","VALID_ATTRS","SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS","SanitizingHtmlSerializer","sanitizedSomething","buf","sanitizeChildren","current","traverseContent","startElement","TEXT_NODE","chars","nodeValue","endElement","checkClobberedElement","parentNode","nodeName","toLowerCase","elAttr","lower","encodeEntities","node","nextNode","compareDocumentPosition","DOCUMENT_POSITION_CONTAINED_BY","outerHTML","SURROGATE_PAIR_REGEXP","NON_ALPHANUMERIC_REGEXP","charCodeAt","_sanitizeHtml","unsafeHtmlInput","unsafeHtml","mXSSAttempts","parsedHtml","sanitizer","safeHtml","getTemplateContent","parent_1","isTemplateElement","content","Sanitizer","SAFE_STYLE_VALUE","RegExp","URL_RE","_sanitizeStyle","urlMatch","hasBalancedQuotes","outsideSingle","outsideDouble","c","ɵɵsanitizeHtml","getSanitizer","sanitize","HTML","document","ɵɵsanitizeStyle","unsafeStyle","STYLE","ɵɵsanitizeUrl","unsafeUrl","URL","ɵɵsanitizeResourceUrl","unsafeResourceUrl","RESOURCE_URL","ɵɵsanitizeScript","unsafeScript","SCRIPT","ɵɵsanitizeUrlOrResourceUrl","tag","getUrlSanitizer","ɵɵdefaultStyleSanitizer","doSanitizeValue","RendererStyleFlags3","TNODE","PARENT_INJECTOR","INJECTOR_BLOOM_PARENT_SIZE","NO_PARENT_INJECTOR","NodeInjectorFactory","isViewProvider","injectImplementation","resolving","canSeeViewProviders","injectImpl","isProceduralRenderer","renderer","domRendererFactory3","createRenderer","hostElement","rendererType","getLContext","mpValue","isComponentInstance","instance","findViaComponent","isDirectiveInstance","findViaDirective","directiveInstance","directiveIndexEnd","traverseNextElement","getDirectivesAtNodeIndex","findViaNativeElement","existingCtx","native","createLContext","attachPatchData","rElement","parentContext","localRefs","getComponentViewByInstance","componentInstance","child","componentIndices","components","elementComponentIndex","includeComponents","directiveStartIndex","CorePlayerHandler","_players","flushPlayers","player","state","play","queuePlayer","DEFAULT_TEMPLATE_DIRECTIVE_INDEX","ANIMATION_PROP_PREFIX","createEmptyStylingContext","wrappedElement","initialStyles","initialClasses","allocateOrUpdateDirectiveIntoContext","singlePropValuesIndex","styleSanitizer","directiveRegistry","limit","propValuesStartPosition","getStylingContextFromLView","viewData","storageIndex","wrapper","stylingTemplate","allocStylingContext","templateStyleContext","isAnimationProp","hasClassInput","hasStyleInput","addPlayerInternal","playerContext","rootContext","playerContextIndex","ref","addEventListener","playerHandler","getPlayerContext","allocPlayerContext","setUpAttributes","attrs","isProc","namespaceURI","attrVal","setAttribute","setAttributeNS","setProperty","attrsStylingIndexOf","startIndex","val","isNameOnlyAttributeMarker","marker","hasParentInjector","parentLocation","getParentInjectorIndex","getParentInjectorViewOffset","getParentInjectorView","location","startView","viewOffset","parentView","getLViewParent","findComponentView","rootTNode","getRootContext","viewOrComponent","getRootView","componentOrLView","includeViewProviders","setIncludeViewProviders","oldValue","BLOOM_MASK","BLOOM_SIZE","nextNgElementId","getOrCreateNodeInjectorForNode","existingInjectorIndex","getInjectorIndex","injectorIndex","insertBloom","blueprint","parentLoc","getParentInjectorLocation","parentIndex","parentLView","parentData","footer","diPublicInInjector","bloomAdd","bloomBit","mask","b6","b5","tData","getOrCreateInjectable","bloomHash","bloomHashBitOrFactory","tokenId","savePreviousOrParentTNode","saveLView","NodeInjector","previousTView","hostTElementNode","shouldSearchParent","bloomHasToken","searchTokensOnInjector","NOT_FOUND","moduleInjector","previousInjectImplementation","currentTView","injectableIdx","locateDirectiveOrProvider","getNodeInjectable","canAccessViewProviders","isHostSpecialCase","nodeProviderIndexes","providerIndexes","tInjectables","injectablesStart","directivesStart","cptViewProvidersCount","endIndex","providerTokenOrDef","dirDef","lData","isFactory","previousIncludeViewProviders","injectorView","isFirstHostTNode","_tNode","_lView","ɵɵgetInheritedFactory","getDebugContext","getOriginalError","defaultErrorLogger","ErrorHandler","_console","handleError","_findOriginalError","_findContext","errorLogger","getErrorLogger","CAMEL_CASE_REGEXP","normalizeDebugBindingValue","NO_CHANGE","enqueueHostInstruction","priority","instructionFn","instructionFnArgs","buffer","findNextInsertionIndex","BoundPlayerFactory","initializeStaticContext","stylingStartIndex","patchContextWithStaticAttrs","attrsStylingStartIndex","attr","patchInitialStylingValue","initialStyling","directiveOwnerIndex","allowValueChange","addOrUpdateStaticStyle","renderInitialClasses","setClass","renderInitialStyles","setStyle","getMatchingBindingIndex","bindingName","start","getProp","updateClassMap","classesInput","updateStylingMap","updateStyleMap","stylesInput","entryIsClassBased","isMultiValueCacheHit","newValue","readCachedMapValue","propNames","playerBuilder","ClassAndStylePlayerBuilder","rawValue","playerBuilderPosition","playerBuilderIndex","playerBuildersAreDirty","hasPlayerBuilderChanged","setPlayerBuilder","applyAll","getMultiClassesStartIndex","getMultiStylesStartIndex","patchStylingMapIntoContext","ctxStart","ctxEnd","cacheValue","dirty","cacheIndex","cachedValues","ownershipValuesStartIndex","existingCachedValueCount","valuesEntryShapeChange","totalUniqueValues","totalNewAllocatedSlots","applyAllProps","ctxIndex","totalRemainingProperties","currentProp","normalizedProp","mapProp","hyphenate","currentValue","getValue","currentDirectiveIndex","getDirectiveIndexFromEntry","currentFlag","getPointers","hasValueChanged","setValue","setPlayerBuilderIndex","hasInitialValueChanged","setDirty","getStyleSanitizer","propertiesLoop","isInsideOwnershipArea","distantCtxDirectiveIndex","distantCtxPlayerBuilderIndex","getPlayerBuilderIndex","distantCtxValue","distantCtxFlag","swapMultiContextEntries","insertNewMultiProperty","prepareInitialFlag","ctxValue","ctxFlag","updateCachedMapValue","startPosition","endPosition","totalValues","dirtyFutureValues","nextStartPosition","totalStylingEntries","classCache","diffInStartPosition","setContextDirty","setContextPlayersDirty","updateClassProp","offset","forceOverride","updateSingleStylingValue","updateStyleProp","isClassBased","singleIndex","getSinglePropIndexValue","currValue","currFlag","currDirective","value_1","currPlayerIndex","newIndex","setSanitizeFlag","sanitizeYes","indexForMulti","getMultiOrSingleIndex","valueForMulti","multiDirty","singleDirty","valueExists","store","DashCase","removeStyle","removeProperty","className","addClass","removeClass","remove","isDirtyYes","adjustedIndex","isDirty","isClassBasedValue","isSanitizable","pointers","configFlag","staticIndex","dynamicIndex","getInitialValue","flag","getInitialIndex","setProp","builder","insertionIndex","directiveOwnerPointers","playerIndex","getPlayerBuilder","setFlag","indexA","indexB","tmpValue","tmpProp","tmpFlag","tmpPlayerBuilderIndex","tmpDirectiveIndex","flagA","flagB","singleIndexA","_flag","singleIndexB","classBased","doShift","updateSinglePointerValues","indexStartPosition","initialIndexForSingle","initialIndex","getInitialStylingValuesIndexOf","initialValue","a","_element","_type","_values","_dirty","_factory","buildPlayer","currentPlayer","isFirstRender","keyValues","singlePropOffsetRegistryIndex","offsets","dirs","currentDirectiveOwner","newDirectiveOwner","getInitialClassNameValue","initialClassValues","registerMultiMapEntry","count","staticStyles","NG_TEMPLATE_SELECTOR","isCssClassMatching","nodeClassAttrVal","cssClassToMatch","nodeClassesLen","matchIndex","matchEndIdx","hasTagAndTypeMatch","currentSelector","isProjectionMode","isNodeMatchingSelector","nodeAttrs","nameOnlyMarkerIdx","getNameOnlyMarkerIndex","skipToNextSelector","isPositive","selectorAttrValue","readClassValueFromTNode","attrIndexInNode","findAttrIndexInNode","nodeAttrValue","compareAgainstClassName","isInlineTemplate","bindingsMode","maybeAttrName","matchTemplateAttribute","isNodeMatchingSelectorList","isSelectorInSelectorList","list","selectorListLoop","currentSelectorInList","_currentSanitizer","ELEMENT_MARKER","COMMENT_MARKER","_stylingMode","runtimeIsNewStylingInUse","setCurrentStyleSanitizer","getCurrentStyleSanitizer","MAP_BASED_ENTRY_PROP_NAME","getBindingNameFromIndex","updateContextDirectiveIndex","getConfig","getProp$1","getPropConfig","isSanitizationRequired","getGuardMask","setGuardMask","maskValue","config","getValuesCount","getBindingValue","getDefaultValue","allowStylingFlush","lockContext","setConfig","isContextLocked","getPropValuesStartPosition","hasValueChanged$1","isStylingValueDefined","getCurrentOrLViewSanitizer","sanitizeUsingSanitizerObject","DEFAULT_BINDING_VALUE","DEFAULT_SIZE_VALUE","DEFAULT_GUARD_MASK_VALUE","STYLING_INDEX_FOR_MAP_BINDING","STYLING_INDEX_START_VALUE","currentStyleIndex","currentClassIndex","stylesBitMask","classesBitMask","deferredBindingQueue","updateClassBinding","bindingIndex","deferRegistration","forceUpdate","updateBindingData","updateStyleBinding","isMapBased","counterIndex","sanitizationRequired","deferBindingRegistration","flushDeferredBindings","registerBinding","changed","countId","bindingValue","found","valuesCount","allocateNewContextEntry","addBindingIntoContext","lastValueIndex","applyStyling","bindingData","bitMaskValue","applyStylingFn","bitMask","normalizeBitMaskValue","stylingMapsSyncFn","getStylingMapsSyncFn","_activeStylingMapApplyFn","mapsMode","valueApplied","valuesCountUpToDefault","defaultValue","valueAppliedWithinMap","setStyle$1","setClass$1","classList","syncStylingMap","targetProp","targetPropValueWasApplied","runTheSyncAlgorithm","loopUntilEnd","innerSyncStylingMap","currentMapIndex","lStylingMap","cursor","getCurrentSyncCursor","mapIndex","MAP_CURSORS","getMapProp","iteratedTooFar","isTargetPropMatched","valueIsDefined","resolveInnerMapMode","isValueAllowedToBeApplied","useDefault","valueToApply","bindingIndexToApply","setCurrentSyncCursor","indexValue","resetSyncCursors","activeStylingMapFeature","setStylingMapsSyncFn","currentMode","isExactMatch","innerMode","doApplyValue","setMapValue","TStylingContextDebug","entries","guardMask","bindingsStartPosition","sources","NodeStylingDebug","_data","_isClassBased","_sanitizer","overrideSanitizer","_mapValues","toDebug","debug","assertDefined","actual","toHtml","includeChildren","isTextNode","textContent","readLViewValue","LViewDebug","_raw_lView","__raw__flags__","creationMode","firstViewPass","checkAlways","attached","destroyed","isRoot","indexWithinInitPhase","toDebugNodes","debugNodes","tNodeCursor","componentLViewDebug","classes","newStyles","newClasses","nodes","cleanup","rendererFactory","childHead","childTail","declarationView","queries","tHost","childViews","__other__","LContainerDebug","_raw_lContainer","I18NDebugItem","__raw_opCode","ɵɵselect","selectInternal","I18nMutateOpCodesDebug","__raw_opCodes","__lView","results","opCode","commentValue","code","I18nUpdateOpCodesDebug","icus","checkBit","skipCodes","tIcuIndex","tIcu","sanitizeFn","attrValue","_CLEAN_PROMISE","refreshDescendantViews","refreshDynamicEmbeddedViews","dynamicViewData","renderEmbeddedTemplate","refreshContentQueries","setHostBindings","selectedIndex","expandoInstructions","expandoStartIndex","currentElementIndex","instruction","providerCount","staticContentQueries","refreshChildComponents","viewAttachedToChangeDetector","syncViewWithBlueprint","componentView","componentTView","checkView","directiveDefIdx","elementCreate","overriddenRenderer","rendererToUse","namespace","getNamespace","createElementNS","createLView","tHostNode","getOrCreateTNode","createTNodeAtIndex","createTNode","assignTViewNodeToLView","tParentNode","viewToRender","_previousOrParentTNode","tickRootContext","executeTemplate","getRenderFlags","renderComponentOrTemplate","templateFn","normalExecutionPath","creationModeIsActive","begin","rf","prevSelectedIndex","setNodeStylingTemplate","attrsStartIndex","stylingAttrsStartIndex","executeContentQueries","createDirectivesAndLocals","localRefExtractor","getBindingsEnabled","resolveDirectives","exportsMap","","initNodeFlags","generateExpandoInstructionBlock","baseResolveDirective","saveNameToExportMap","cacheMatchingLocalNames","localNames","findDirectiveMatches","registry","matches","instantiateAllDirectives","addComponentLogic","postProcessDirective","invokeDirectivesHostBindings","expando","invokeHostBindingsInCreationMode","saveResolvedLocalsInData","localIndex","getOrCreateTView","createTView","viewIndex","initialViewLength","createViewBlueprint","viewQueryStartIndex","staticViewQueries","pipeRegistry","locateHostElement","elementOrSelector","defaultRenderer","selectRootElement","tParent","propertyMetadataStartIndex","propertyMetadataEndIndex","initialInputs","tViews","projectionNext","projection","onElementCreationFns","generatePropertyAliases","direction","propStore","isInput","defs","propertyAliasMap","internalName","ATTR_TO_PROP","class","for","formaction","innerHtml","readonly","tabindex","elementPropertyInternal","nativeOnly","loadRendererFn","inputData","dataValue","initializeTNodeInputs","setInputsForProperty","markDirtyIfOnPush","childComponentLView","savePropertyDebugData","lastBindingIndex","bindingMetadata","previousExpandoLength","directiveCount","postProcessBaseDirective","setInputsFromAttrs","initialInputData","generateInitialInputs","i_1","minifiedInputName","privateName","queueComponentIndexForCheck","numberOfDirectives","directiveFactory","nodeInjectorFactory","addToViewTree","elementAttributeInternal","strValue","createLContainer","hostNative","isForViewContainerRef","lViewOrLContainer","markViewDirty","scheduleTick","res_1","nothingScheduled","clean","scheduler","rootComponent","detectChangesInternal","detectChangesInRootView","hostTView","executeViewQueryFn","storeBindingMetadata","prefix","suffix","CLEAN_PROMISE","getCleanup","getTViewCleanup","loadComponentRenderer","errorHandler","textBindingInternal","applyOnCreateInstructions","fns","ɵɵallocHostVars","queueHostBindingForCheck","hostVars","getCurrentDirectiveDef","prefillHostVars","totalHostVars","_symbolIterator","getSymbolIterator","Symbol_1","getOwnPropertyNames","looseIdentical","isNaN","devModeEqual","isListLikeIterableA","isListLikeIterable","isListLikeIterableB","areIterablesEqual","comparator","iterator1","iterator2","item1","item2","WrappedValue","wrapped","wrap","unwrap","isWrapped","isJsObject","updateBinding","getBinding","bindingUpdated","isDifferent","bindingUpdated2","exp1","exp2","different","bindingUpdated3","exp3","bindingUpdated4","exp4","ɵɵproperty","bindReconciledValue","ɵɵupdateSyntheticHostBinding","bound","ɵɵattribute","ɵɵinterpolationV","isBindingUpdated","ɵɵinterpolation1","v0","ɵɵinterpolation2","i0","v1","ɵɵinterpolation3","i1","v2","ɵɵinterpolation4","i2","v3","ɵɵinterpolation5","i3","v4","ɵɵinterpolation6","i4","v5","ɵɵinterpolation7","i5","v6","ɵɵinterpolation8","i6","v7","ɵɵattributeInterpolate1","interpolatedValue","ɵɵattributeInterpolate2","ɵɵattributeInterpolate3","ɵɵattributeInterpolate4","ɵɵattributeInterpolate5","ɵɵattributeInterpolate6","ɵɵattributeInterpolate7","ɵɵattributeInterpolate8","ɵɵattributeInterpolateV","interpolated","markDirty","getLContainer","embeddedView","container","getContainerRenderParent","tViewNode","nativeParentNode","projectionNodeStack","walkTNodeTree","viewToWalk","action","renderParent","beforeNode","projectionNodeIndex","nextTNode","executeNodeAction","nodeOrContainer","firstView","lContainer","head","head_1","head_1_1","nativeInsertBefore","nativeRemoveNode","destroyNode","createTextNode","createText","addRemoveViewFromContainer","insertMode","insertView","indexInContainer","containerLength","detachView","removeIndex","viewToDetach","removeView","detachedView","destroyLView","destroyViewTree","rootView","cleanUpView","getParentState","executeOnDestroys","removeListeners","tCleanup","lCleanup","idxOrTargetGetter","useCaptureOrSubIdx","removeEventListener","unsubscribe","insertBefore","nativeAppendOrInsertBefore","nativeAppendChild","childEl","childTNode","getRenderParent","getHighestElementOrICUContainer","getHostNative","isIcuCase","ShadowDom","Native","anchorNode","getNativeAnchorNode","parentTNode","getBeforeNodeForView","childEl_1","childEl_1_1","viewIndexInContainer","nextViewIndex","tViewNodeChild","rNode","isHostElement","nativeParent","nativeRemoveChild","appendProjectedNodes","tProjectionNode","selectorIndex","projectedView","nodeToProject","appendProjectedNode","appendProjectedChildren","ngContainerChildTNode","projectionView","projectedTNode","ɵɵcontainer","containerInternal","addTContainerToQueries","ɵɵtemplate","tContainerNode","ɵɵcontainerRefreshStart","ɵɵcontainerRefreshEnd","nextIndex","insertNodeBeforeViews","addNode","comment","createComment","ɵɵreference","getContextLView","ɵɵload","ɵɵdirectiveInject","ɵɵinjectAttribute","attrNameToInject","injectAttributeImpl","attrsLength","accumulatedClasses","accumulatedStyles","_stylingProp","defer","getClassesContext","getStylesContext","_stylingMap","valueHasChanged","normalizeIntoStylingMap","newValues","allValuesTrue","outer","propAtIndex","getActiveDirectiveStylingIndex","getContext","allocTStylingContext","ɵɵstyling","classBindingNames","styleBindingNames","directiveStylingIndex","getActiveDirectiveStylingIndex$1","stylingInit","updateLastDirectiveIndex","initStyling","registerHostDirective","updateContextWithBindings","findOrPatchDirectiveIntoRegistry","staticModeOnly","hyphenateEntries","newEntries","singlePropOffsetValues","totalCurrentClassBindings","totalCurrentStyleBindings","cachedClassMapValues","cachedStyleMapValues","stylesOffset","singleClassesStartIndex","multiStylesStartIndex","multiClassesStartIndex","currentSinglePropsLength","insertionOffset","filteredStyleBindingNames","name_1","singlePropIndex","filteredClassBindingNames","i_2","name_2","totalStyles","totalClasses","totalNewEntries","i_3","isMultiBased","singleOrMultiIndex","i_4","i_5","i_6","multiIndex","initialValuesToLookup","indexForInitial","initialFlag","newStylesSpaceAllocationSize","newClassesSpaceAllocationSize","cachedStyleMapIndex","i_7","cachedClassMapIndex","i_8","ɵɵstyleProp","styleIndex","valueToAdd","resolveStylePropValue$1","getStylingContext","styleProp","resolveStylePropValue","resolvedValue","ɵɵclassProp","classIndex","booleanOrNull","classProp","ɵɵstyleMap","styleInputVal","forceStylesAsString","styleMap","ɵɵclassMap","classInputVal","forceClassesAsString","classMap","ɵɵstylingApply","runtimeAllowOldStyling","renderStyling","rootOrView","classesStore","stylesStore","totalPlayersQueued","allowFlush","flushQueue","isContextDirty","flushPlayerBuilders","multiStartIndex","directiveIndex_1","playersStartIndex","playerInsertionIndex","oldPlayer","stylingApply","getRenderer","getNativeFromLView","applyClasses","applyStyles","getCachedStylingContext","ɵɵelementStart","initialStylesIndex","initialClassesIndex","lastAttrIndex","getElementDepthCount","increaseElementDepthCount","registerInitialStylingIntoContext","classesContext","stylesContext","currentQueries","clone","ɵɵelementEnd","decreaseElementDepthCount","getInitialStyleStringValue","initialStyleValues","styleString","ɵɵelement","ɵɵelementHostAttrs","hostElementIndex","ɵɵelementContainerStart","ɵɵelementContainerEnd","ɵɵembeddedViewStart","viewBlockId","containerTNode","scanForView","startIdx","viewAtPositionId","setIsParent","getOrCreateEmbeddedTView","containerTViews","createView","ɵɵembeddedViewEnd","viewHost","ɵɵgetCurrentView","isPromise","isObservable","subscribe","ɵɵlistener","eventName","listenerFn","useCapture","eventTargetResolver","listenerInternal","ɵɵcomponentHostSyntheticListener","processOutputs","lCleanupIndex","existingListener","hasDirectives","findExistingListener","tNodeIdx","cleanupEventName","listenerIdxInLCleanup","__ngNextListenerFn__","wrapListener","cleanupFn","listen","propsLength","subscription","idx","executeListenerWithErrorHandling","wrapWithPreventDefault","wrapListenerIn_markDirtyAndPreventDefault","nextListenerFn","preventDefault","returnValue","ɵɵnextContext","level","nextContextImpl","walkUpViews","nestingLevel","matchingProjectionSlotIndex","projectionSlots","wildcardNgContentIndex","ngProjectAsAttrVal","getProjectAsAttrValue","ngProjectAsAttrIdx","ɵɵprojectionDef","componentNode","projectionHeads","tails","componentChild","slotIndex","delayProjection","setDelayProjection","ɵɵprojection","ɵɵpropertyInterpolate","ɵɵpropertyInterpolate1","ɵɵpropertyInterpolate2","ɵɵpropertyInterpolate3","ɵɵpropertyInterpolate4","ɵɵpropertyInterpolate5","ɵɵpropertyInterpolate6","ɵɵpropertyInterpolate7","ɵɵpropertyInterpolate8","ɵɵpropertyInterpolateV","ɵɵtext","textNative","ɵɵtextBinding","ɵɵtextInterpolate","ɵɵtextInterpolate1","ɵɵtextInterpolate2","ɵɵtextInterpolate3","ɵɵtextInterpolate4","ɵɵtextInterpolate5","ɵɵtextInterpolate6","ɵɵtextInterpolate7","ɵɵtextInterpolate8","ɵɵtextInterpolateV","getPlayers","getPlayersInternal","players","nonFactoryPlayersStart","getComponent","loadLContextFromNode","getComponentAtNodeIndex","getContext$1","getViewComponent","loadLContext","getRootComponents","getInjector","getDirectives","throwOnNotFound","getHostElement","isBrowserEvents","listener","getListeners","listeners","firstParam","secondParam","listenerElement","callback","useCaptureOrIndx","sort","sortListeners","GLOBAL_PUBLISH_EXPANDO_KEY","_published","publishGlobalUtil","createRootComponentView","resetComponentState","createRootComponent","componentDef","hostFeatures","instantiateRootComponent","createRootContext","LifecycleHooksFeature","rootTView","dirIndex","SimpleChange","previousValue","firstChange","isFirstChange","ɵɵNgOnChangesFeature","NgOnChangesFeatureImpl","ngInherit","definition","ngOnChanges","ngOnChangesSetInput","wrapOnChanges","wrapOnChangesHook_inPreviousChangesStorage","simpleChangesStore","getSimpleChangesStore","setSimpleChangesStore","SIMPLE_CHANGES_STORE","previousChange","ɵɵInheritDefinitionFeature","superType","getSuperType","superDef","baseDef","writeableDef","maybeUnwrapEmpty","baseViewQuery","baseContentQueries","baseHostBindings","inheritHostBindings","inheritViewQuery","inheritContentQueries","superHostBindings","superViewQuery","superContentQueries","features_1","features_1_1","superPrototype","prevViewQuery","ctx","prevContentQueries","prevHostBindings","resolveProvider","lInjectablesBlueprint","providerFactory","beginIndex","isClassProvider","existingFactoryIndex","existingProvidersFactoryIndex","existingViewProvidersFactoryIndex","doesViewProvidersFactoryExist","multiFactory","f","componentProviders","multiFactoryAdd","multiViewProvidersFactoryResolver","multiProvidersFactoryResolver","isComponentProvider","multiResolve","factories","componentCount","multiProviders","ɵɵProvidersFeature","viewProviders","processProvidersFn","ComponentRef","ComponentFactory","noComponentFactoryError","ERROR_COMPONENT","R3ElementRef","R3TemplateRef","R3ViewContainerRef","_NullComponentFactoryResolver","resolveComponentFactory","ComponentFactoryResolver","CodegenComponentFactoryResolver","_ngModule","_factories","componentType","ComponentFactoryBoundToModule","_super","projectableNodes","rootSelectorOrNode","NgModuleRef","NgModuleFactory","ViewRef","_context","_componentIndex","_appRef","_viewContainerRef","_tViewNode","collectNativeNodes","tNodeChild","nativeNode","componentHost","currentProjectedNode","_lookUpContext","detach","storeCleanupFn","markForCheck","reattach","detectChanges","checkNoChanges","checkNoChangesInternal","attachToViewContainerRef","vcRef","detachFromAppRef","renderDetachView","attachToAppRef","appRef","RootViewRef","_view","checkNoChangesInRootView","createElementRef","ElementRefToken","ElementRef_","createTemplateRef","TemplateRefToken","TemplateRef_","_declarationParentView","elementRef","_tView","_hostLContainer","_injectorIndex","createEmbeddedView","createEmbeddedViewAndNode","viewRef","hostContainer","RendererStyleFlags2","ElementRef","nativeElement","SWITCH_ELEMENT_REF_FACTORY","SWITCH_ELEMENT_REF_FACTORY__POST_R3__","injectElementRef","RenderComponentType","slotCount","animations","RenderDebugInfo","Renderer","RootRenderer","RendererFactory2","Version","Renderer2","SWITCH_RENDERER2_FACTORY","SWITCH_RENDERER2_FACTORY__POST_R3__","injectRenderer2","getOrCreateRenderer2","VERSION","full","major","minor","patch","DefaultIterableDifferFactory","supports","trackByFn","DefaultIterableDiffer","trackByIdentity","_linkedRecords","_unlinkedRecords","_previousItHead","_itHead","_itTail","_additionsHead","_additionsTail","_movesHead","_movesTail","_removalsHead","_removalsTail","_identityChangesHead","_identityChangesTail","_trackByFn","forEachItem","_next","forEachOperation","nextIt","nextRemove","addRemoveOffset","moveOffsets","currentIndex","getPreviousIndex","adjPreviousIndex","_nextRemoved","previousIndex","localMovePreviousIndex","localCurrentIndex","forEachPreviousItem","_nextPrevious","forEachAddedItem","_nextAdded","forEachMovedItem","_nextMoved","forEachRemovedItem","forEachIdentityChange","_nextIdentityChange","diff","collection","check","_reset","itemTrackBy","mayBeDirty","index_1","trackById","_verifyReinsertion","_addIdentityChange","_mismatch","iterateListLike","_truncate","nextRecord","previousRecord","_prev","_remove","_moveAfter","_reinsertAfter","_addAfter","IterableChangeRecord_","reinsertRecord","_addToMoves","_addToRemovals","_unlink","prevRecord","prev","_prevRemoved","_insertAfter","_DuplicateMap","put","toIndex","_prevDup","_nextDup","_DuplicateItemRecordList","_head","_tail","atOrAfterIndex","duplicates","recordList","moveOffset","DefaultKeyValueDifferFactory","DefaultKeyValueDiffer","_records","_mapHead","_appendAfter","_previousMapHead","_changesHead","_changesTail","forEachChangedItem","_nextChanged","_forEach","_maybeAddToChanges","_getOrCreateRecordForKey","_insertBeforeOrAppend","before","record_1","KeyValueChangeRecord_","_addToAdditions","_addToChanges","IterableDiffers","copied","extend","find","iterable","getTypeNameForDebugging","KeyValueDiffers","kv","ChangeDetectorRef","SWITCH_CHANGE_DETECTOR_REF_FACTORY","SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__","injectChangeDetectorRef","createViewRef","componentIndex","hostComponentView","keyValDiff","defaultIterableDiffers","defaultKeyValueDiffers","TemplateRef","SWITCH_TEMPLATE_REF_FACTORY","SWITCH_TEMPLATE_REF_FACTORY__POST_R3__","injectTemplateRef","ViewContainerRef","SWITCH_VIEW_CONTAINER_REF_FACTORY","SWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__","injectViewContainerRef","ViewContainerRefToken","createContainerRef","ViewContainerRef_","_lContainer","_hostTNode","_hostView","_viewRefs","getParentInjectorTNode","startTNode","parentTNode_1","viewAmount","templateRef","adjustedIdx","_adjustIndex","createComponent","componentFactory","ngModuleRef","contextInjector","parentInjector","componentRef","insert","move","shift","commentNode","nativeNextSibling","expressionChangedAfterItHasBeenCheckedError","isFirstCheck","viewDebugError","err","_addDebugContext","logError","viewDestroyedError","shiftInitState","priorInitState","newInitState","initState","initIndex","shouldCallLifecycleInitHook","asTextData","asElementData","asProviderData","asPureExpressionData","asQueryList","Services","setCurrentNode","createRootView","createComponentView","createNgModuleRef","overrideProvider","overrideComponentView","clearOverrides","checkAndUpdateView","checkNoChangesView","destroyView","resolveDep","createDebugContext","handleEvent","updateDirectives","updateRenderer","dirtyParentQueries","NOOP","_tokenKeyCache","tokenKey","_renderCompCount$1","checkBinding","bindingIdx","oldValues","checkAndUpdateBinding","checkBindingNoChanges","bindings","markParentViewsForCheck","currView","viewContainerParent","markParentViewsForCheckProjectedViews","endView","dispatchEvent","event","root","declaredViewContainer","parentNodeDef","viewParentEl","renderNode","renderElement","renderText","isComponentView","isEmbeddedView","filterQueryId","queryId","splitMatchedQueriesDsl","matchedQueriesDsl","matchedQueries","matchedQueryIds","references","valueType","splitDepsDsl","sourceName","getParentRenderElement","renderHost","componentRendererType","DEFINITION_CACHE","WeakMap","resolveDefinition","visitRootRenderNodes","lastRenderRootNode","visitSiblingRenderNodes","nodeDef","visitRenderNode","childCount","visitProjectedRenderNodes","ngContentIndex","compView","hostElDef","projectedNodes","execRenderNodeAction","ngContent","rn","bindingFlags","embeddedViews","viewContainer","_embeddedViews","NS_PREFIX_RE","splitNamespace","calcBindingFlags","_toStringWithNull","UNDEFINED_VALUE","InjectorRefTokenKey","INJECTORRefTokenKey","NgModuleRefTokenKey","resolveNgModuleDep","depDef","tokenKey_1","providerDef","_def","providersByKey","providerInstance","_createProviderInstance","targetsModule","moduleTransitivelyPresent","modules","injectable","_createClass","depValues","_callFactory","detachEmbeddedView","elementData","removeFromArray","renderDetachView$1","renderAttachEmbeddedView","prevView","prevRenderNode","addToArray","pop","EMPTY_CONTEXT","getComponentViewDefinitionFactory","viewDefFactory","ComponentFactory_","_inputs","_outputs","inputsArr","templateName","outputsArr","viewDef","componentNodeIndex","componentProvider","ComponentRef_","ViewRef_","_viewRef","_component","_elDef","changeDetectorRef","Injector_","createViewContainerData","elDef","elData","viewRef_","attachEmbeddedView","attachProjectedView","vcElementData","dvcElementData","projectedViews","_projectedViews","markNodeAsProjectedTemplate","nodeFlags","childFlags","moveEmbeddedView","oldViewIndex","newViewIndex","createChangeDetectorRef","rootRenderNodes","renderNodes","fs","disposables","createTemplateData","_parentView","createInjector$1","createRendererV1","RendererAdapter","delegate","selectorOrNode","namespaceAndName","createViewRoot","createTemplateAnchor","parentElement","projectNodes","attachViewAfter","viewRootNodes","viewAllNodes","listenGlobal","setElementProperty","propertyName","propertyValue","setElementAttribute","attributeValue","ns","setBindingDebugInfo","setElementClass","isAdd","setElementStyle","styleName","styleValue","invokeElementMethod","methodName","setText","animate","moduleType","bootstrapComponents","NgModuleRef_","_moduleType","_bootstrapComponents","_destroyListeners","initNgModule","provDef","injectFlags","callNgModuleLifecycle","lifecycles","RendererV1TokenKey","Renderer2TokenKey","ElementRefTokenKey","ViewContainerRefTokenKey","TemplateRefTokenKey","ChangeDetectorRefTokenKey","InjectorRefTokenKey$1","INJECTORRefTokenKey$1","checkIndex","depDefs","outputIndex","directChildFlags","childMatchedQueries","query","createProviderInstance","_createProviderInstance$1","createPipeInstance","createClass","createDirectiveInstance","output","outputObservable","eventHandlerClosure","allowPrivateServices","callFactory","NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR","searchView","findCompView","providerDef_1","allProviders","publicProviders","providerData","updateProp","changes","nonMinifiedName","callLifecycleHooksChildrenFirst","callProviderLifecycles","callElementProvidersLifecycles","ComponentFactoryResolver$1","ComponentFactory$1","toRefArray","array","nonMinified","LocaleDataIndex","ROOT_CONTEXT","SCHEDULER","isBoundToModule","isInternalRootView","rootViewInjector","createChainedInjector","hostRNode","rootFlags","isIsolated","tElementNode","rootLView","oldLView","nodesforSlot","ComponentRef$1","_rootLView","destroyCbs","LOCALE_DATA","ɵLocaleDataIndex","u","localeEn","plural","floor","abs","getLocalePluralCase","locale","findLocaleData","PluralCase","normalizedLocale","parentLocale","addAllToArray","items","flatten","dst","MARKER","ICU_BLOCK_REGEXP","SUBTEMPLATE_REGEXP","PH_REGEXP","BINDING_REGEXP","ICU_REGEXP","ROOT_TEMPLATE_ID","PP_MULTI_VALUE_PLACEHOLDERS_REGEXP","PP_PLACEHOLDERS_REGEXP","PP_ICU_VARS_REGEXP","PP_ICUS_REGEXP","PP_CLOSE_TEMPLATE_REGEXP","PP_TEMPLATE_ID_REGEXP","extractParts","pattern","prevPos","braceStack","braces","lastIndex","exec","pos","block","parseICUBlock","substring_1","cases","icuType","mainBinding","binding","parseInt","blocks","assertGreaterThan","expected","removeInnerTemplateTranslation","tagMatched","inTemplate","generateBindingUpdateOpCodes","destinationNode","updateOpCodes","textParts","textValue","toMaskBit","getBindingMask","icuExpression","valueArr","i18nIndexStack","i18nIndexStackPointer","min","i18nVarsCount","parentIndexStack","ɵɵi18nStart","subTemplateIndex","i18nStartFirstPass","parentIndexPointer","createOpCodes","icuExpressions","msgParts","getTranslationForTemplate","search","phIndex","icuNodeIndex","icuStart","hasBinding","textNodeIndex","allocExpando","numSlotsToAlloc","update","appendI18nNode","previousTNode","ɵɵi18nPostprocess","replacements","matches_1","templateIdsStack_1","phs","tmpl","placeholders","placeholder","templateId","isCloseTemplateTag","currentTemplateId","_idx","ɵɵi18nEnd","i18nEndFirstPass","rootIndex","tI18n","lastCreatedNode","visitedNodes","readCreateOpCodes","removeNode","createDynamicNodeAtIndex","currentTNode","textRNode","destinationNodeIndex","elementNodeIndex","commentNodeIndex","commentRNode","activeCaseIndex","tagNameValue","removedPhTNode","removedPhRNode","ɵɵi18n","ɵɵi18nAttributes","i18nAttributesFirstPass","previousElementIndex","changeMask","shiftsCounter","ɵɵi18nExp","ɵɵi18nApply","readUpdateOpCodes","bindingsStartIndex","bypassCheckBit","caseCreated","icuTNode","removeCodes","removeOpCode","activeIndex","caseIndex","getCaseIndex","resolvedCase","getPluralCase","getLocaleId","LOCALE_ID","tIcus","createCodes","updateCodes","childIcus","nestedIcus","icuIndex","icuCase","parseIcuCase","opCodes","parseNodes","currentNode","nestedIcusToCreate","lowerAttrName","COMMENT_NODE","NESTED_ICU","nestedIcuIndex","ngDevMode","nestedIcu","nestedIcuNodeIndex","nestTIcuIndex","TRANSLATIONS","LOCALIZE_PH_REGEXP","ɵɵi18nLocalize","setLocaleId","localeId","assertSameOrNotExisting","incoming","registerNgModuleType","COMPONENT_FACTORY_RESOLVER","NgModuleRef$1","getNgLocaleIdDef","_r3Injector","NgModuleFactory$1","ɵɵpureFunction0","slotOffset","pureFn","thisArg","ɵɵpureFunction1","exp","ɵɵpureFunction2","ɵɵpureFunction3","ɵɵpureFunction4","ɵɵpureFunction5","exp5","ɵɵpureFunction6","exp6","ɵɵpureFunction7","exp7","ɵɵpureFunction8","exp8","ɵɵpureFunctionV","exps","ɵɵpipe","pipeName","getPipeDef$1","pipeInstance","ɵɵpipeBind1","unwrapValue$1","isPure","transform","ɵɵpipeBind2","ɵɵpipeBind3","ɵɵpipeBind4","ɵɵpipeBindV","EventEmitter","isAsync","__isAsync","emit","generatorOrNext","complete","schedulerFn","errorFn","completeFn","sink","Subscription","Subject","symbolIterator","_results","QueryList","symbol","proto","filter","reduce","init","toArray","reset","resultsTree","last","notifyOnChanges","LQuery","predicate","containerValues","LQueries_","shallow","deep","track","queryList","descend","read","createLQuery","shallowResults","copyQueriesToContainer","deepResults","copyQueriesToView","insertView$1","removeView$1","viewValuesIdx","getIdxOfMatchingSelector","queryByReadToken","matchingIdx","queryByTemplateRef","templateRefToken","templateRefResult","queryRead","queryByTNodeType","insertBeforeContainer","addMatch","matchingValue","insertBeforeViewMatches","createPredicate","_valuesTree","createQueryListInLView","isStatic","_static","storeCleanupWithContext","ɵɵqueryRefresh","queryListImpl","ɵɵstaticViewQuery","viewQueryInternal","ɵɵviewQuery","ɵɵloadViewQuery","ɵɵcontentQuery","contentQueryInternal","contentQuery","tViewContentQueries","ɵɵstaticContentQuery","ɵɵloadContentQuery","ɵɵtemplateRefExtractor","angularCoreEnv","ɵɵstyleSanitizer","EMPTY_ARRAY$3","moduleQueue","flushingModuleQueue","flushModuleScopingQueueAsMuchAsPossible","every","isResolvedDeclaration","setScopeOnDeclaredComponents","declaration","compileNgModule","compileNgModuleDefs","enqueueModuleForDelayedScoping","allowDuplicateDeclarationsInRoot","expandModuleWithProviders","emitInline","compileInjector","transitiveScopes","transitiveScopesFor","patchComponentDefWithScope","ngSelectorScope","compilation","dir","pipe","processNgModuleFn","isNgModule","scopes","exported","declared","importedType","importedScope","entry","exportedType","exportedScope","isModuleWithProviders","compileComponent","maybeQueueResolutionOfComponentResources","directiveMetadata","typeSourceSpan","createParseSourceSpan","preserveWhitespaces","interpolation","usesInheritance","addBaseDefToUndecoratedParents","hasSelectorScope","compileDirective","sourceMapUrl","facade","extendsDirectlyFromObject","extractQueriesMetadata","isContentQuery","lifecycle","usesOnChanges","part","viewQueries","objPrototype","extractBaseDefMetadata","compileBase","hasHostDecorators","field","ann","metadataName","bindingPropertyName","isQueryAnn","queriesMeta","_loop_2","annotations_1","isInputAnn","convertToR3QueryMetadata","splitByComma","piece","static","compilePipe","typeName","Directive","SWITCH_COMPILE_DIRECTIVE","Component","SWITCH_COMPILE_COMPONENT","Pipe","SWITCH_COMPILE_PIPE","Input","Output","HostBinding","hostPropertyName","HostListener","SWITCH_COMPILE_COMPONENT__POST_R3__","SWITCH_COMPILE_DIRECTIVE__POST_R3__","SWITCH_COMPILE_PIPE__POST_R3__","NgModule","SWITCH_COMPILE_NGMODULE","SWITCH_COMPILE_NGMODULE__POST_R3__","APP_INITIALIZER","ApplicationInitStatus","appInits","initialized","donePromise","rej","reject","runInitializers","asyncInitPromises","initResult","catch","ApplicationInitStatus_Factory","APP_ID","APP_ID_RANDOM_PROVIDER","_appIdRandomProviderFactory","_randomChar","fromCharCode","random","MissingTranslationStrategy","PLATFORM_INITIALIZER","PLATFORM_ID","APP_BOOTSTRAP_LISTENER","PACKAGE_ROOT_URL","Console","log","Console_Factory","LOCALE_ID$1","TRANSLATIONS$1","TRANSLATIONS_FORMAT","trace","events","ModuleWithComponentFactories","ngModuleFactory","componentFactories","Compiler_compileModuleSync__POST_R3__","Compiler_compileModuleSync","Compiler_compileModuleAsync__POST_R3__","Compiler_compileModuleAsync","Compiler_compileModuleAndAllComponentsSync__POST_R3__","Compiler_compileModuleAndAllComponentsSync","Compiler_compileModuleAndAllComponentsAsync__POST_R3__","Compiler_compileModuleAndAllComponentsAsync","Compiler","compileModuleSync","compileModuleAsync","compileModuleAndAllComponentsSync","compileModuleAndAllComponentsAsync","clearCache","clearCacheFor","getModuleId","Compiler_Factory","COMPILER_OPTIONS","CompilerFactory","wtfEnabled","detectWTF","wtf","noopScope","arg0","arg1","wtfCreateScope","createScope","wtfLeave","leave","leaveScope","wtfStartTimeRange","startTimeRange","rangeType","beginTimeRange","wtfEndTimeRange","endTimeRange","range","scheduleMicroTask","Zone","NgZone","enableLongStackTrace","hasPendingMicrotasks","hasPendingMacrotasks","isStable","onUnstable","onMicrotaskEmpty","onStable","onError","assertZonePatched","_nesting","_outer","_inner","fork","forkInnerZoneWithAngularBehavior","zone","properties","isAngularZone","onInvokeTask","task","applyThis","applyArgs","onEnter","invokeTask","onLeave","onInvoke","invoke","onHasTask","hasTaskState","hasTask","change","microTask","checkStable","macroTask","onHandleError","runOutsideAngular","isInAngularZone","assertInAngularZone","assertNotInAngularZone","run","runTask","scheduleEventTask","EMPTY_PAYLOAD","noop","cancelTask","runGuarded","_platform","NoopNgZone","Testability","_ngZone","_pendingCount","_isZoneStable","_didWork","_callbacks","taskTrackingZone","_watchAngularEvents","_runCallbacksIfReady","increasePendingRequestCount","decreasePendingRequestCount","cb","clearTimeout","timeoutId","doneCb","pending_1","getPendingTasks","updateCb","macroTasks","creationLocation","addCallback","timeout","whenStable","getPendingRequestCount","findProviders","using","exactMatch","Testability_Factory","TestabilityRegistry","_applications","_testabilityGetter","addToWindow","registerApplication","testability","unregisterApplication","unregisterAllApplications","getTestability","elem","getAllTestabilities","getAllRootElements","findTestabilityInTree","findInAncestors","TestabilityRegistry_Factory","_NoopGetTestability","compileNgModuleFactory","compileNgModuleFactory__POST_R3__","moduleFactory","isComponentResourceResolutionQueueEmpty","compilerProviders","_mergeArrays","resourceLoader","ResourceLoader","isBoundToModule__POST_R3__","cf","ALLOW_MULTIPLE_PLATFORMS","NgProbeToken","createPlatform","PlatformRef","inits","createPlatformFactory","parentPlatformFactory","desc","extraProviders","platform","getPlatform","injectedProviders","assertPlatform","requiredToken","_injector","_modules","bootstrapModuleFactory","ngZone","getNgZone","ngZoneOption","ngZoneInjector","moduleRef","exceptionHandler","_callAndReportToErrorHandler","initStatus","_moduleDoBootstrap","bootstrapModule","compilerOptions","optionsReducer","ApplicationRef","ngDoBootstrap","PlatformRef_Factory","_zone","_exceptionHandler","_componentFactoryResolver","_initStatus","_bootstrapListeners","_views","_runningTick","_enforceNoNewChanges","_stable","componentTypes","tick","isCurrentlyStable","Observable","observer","stableSub","unstableSub","share","componentOrFactory","compRef","_unloadComponent","_loadComponent","_tickScope","_d","_e","_f","attachView","ApplicationRef_Factory","NgModuleFactoryLoader","getModuleFactory__POST_R3__","getRegisteredNgModuleType","noModuleError","getModuleFactory","SystemJsNgModuleLoaderConfig","DEFAULT_CONFIG","factoryPathPrefix","factoryPathSuffix","SystemJsNgModuleLoader","_compiler","_config","load","path","loadAndCompile","exportName","System","import","checkNotEmpty","loadFactory","factoryClassSuffix","SystemJsNgModuleLoader_Factory","modulePath","ViewRef$1","EmbeddedViewRef","DebugEventListener","DebugNode__PRE_R3__","_debugContext","DebugElement__PRE_R3__","addChild","providerTokens","childNodes","childIndex","insertChildrenAfter","newChildren","siblingIndex","refChild","newChild","refIndex","queryAll","_queryElementChildren","queryAllNodes","_queryNodeChildren","triggerEventHandler","eventObj","DebugNode__POST_R3__","DebugElement__POST_R3__","getLocalRefs","discoverLocalRefs","getInjectionTokens","collectPropertyBindings","getFirstBindingIndex","metadataIndex","currentBindingIndex","metadataParts","hostProperties","collectHostPropertyBindings","hostPropIndex","collectClassNames","debugElement","tNodeAttrs","lowercaseTNodeAttrs","eAttrs","lContext","eClasses","eStyles","getPropertyValue","children","getDebugNode__POST_R3__","_queryAllR3","elementsOnly","_queryNodeChildrenR3","rootNativeNode","_addQueryMatchR3","_queryNodeChildrenInContainerR3","nextLView","childView","debugNode","getDebugNode","_nativeNodeToDebugNode","NG_DEBUG_PROPERTY","indexDebugNode","ViewAction","DebugNode","DebugElement","platformCore","APPLICATION_MODULE_PROVIDERS","zoneSchedulerFactory","queue","_iterableDiffersFactory","_keyValueDiffersFactory","_localeFactory","ApplicationModule","ApplicationModule_Factory","parentEl","listenToElementOutputs","handleEventClosure","renderEventHandlerClosure","listenTarget","listenerView","disposable","checkAndUpdateElementValue","securityContext","renderValue","unit","queryIds","nodeMatchedQueries","tplDef","filterId","checkAndUpdateQuery","elementDef","calcQueryValues","notify","boundValue","bindingType","queryDef","getQueryValue","dvc","queryValueType","appendNgContent","_pureExpressionDef","propertyNames","_addInterpolationPart","isNgContainer","validateNode","nodeCount","parentEnd","anchorDef","initView","createViewNodes","compRenderer","outputCount","bindingCount","nodeData","compViewDef","execComponentViewsAction","CreateViewNodes","execQueriesAction","markProjectedViewsForCheck","execEmbeddedViewsAction","CheckNoChanges","CheckAndUpdate","callInit","checkAndUpdateNode","argStyle","v8","v9","checkAndUpdateNodeInline","checkAndUpdateElementInline","bindLen","checkAndUpdateTextInline","checkAndUpdateDirectiveInline","checkAndUpdatePureExpressionInline","checkAndUpdateNodeDynamic","checkAndUpdateElementDynamic","checkAndUpdateTextDynamic","checkAndUpdateDirectiveDynamic","checkAndUpdatePureExpressionDynamic","checkNoChangesNode","checkNoChangesNodeInline","checkNoChangesNodeDynamic","checkNoChangesQuery","Destroy","detachProjectedView","destroyViewNodes","callViewAction","viewState","execProjectedViewsAction","CheckNoChangesProjectedViews","CheckAndUpdateProjectedViews","queryFlags","staticDynamicQueryFlag","checkType","initServicesIfNeeded","services","createDebugServices","debugSetCurrentNode","debugCreateRootView","debugCreateEmbeddedView","debugCreateComponentView","debugCreateNgModuleRef","debugOverrideProvider","debugOverrideComponentView","debugClearOverrides","debugCheckAndUpdateView","debugCheckNoChangesView","debugDestroyView","DebugContext_","debugHandleEvent","debugUpdateDirectives","debugUpdateRenderer","createProdServices","createProdRootView","prodCheckAndUpdateNode","prodCheckNoChangesNode","elInjector","createRootData","DebugRendererFactory2","defWithOverride","applyProviderOverridesToView","callWithDebugContext","DebugAction","viewDefOverrides","applyProviderOverridesToNgModule","calcHasOverrides","hasOverrides","hasDeprecatedOverrides","providerOverrides","override","deprecatedBehavior","providerOverridesWithScope","applyProviderOverrides","moduleSet_1","_currentAction","_currentView","_currentNodeIndex","comp","compFactory","hostViewDef","elementIndicesWithOverwrittenProviders","findElementIndicesWithOverwrittenProviders","elIndicesWithOverwrittenProviders","lastElementDef","applyProviderOverridesToElement","elIndex","nextDirectiveWithBinding","debugCheckDirectivesFn","debugCheckAndUpdateNode","debugCheckNoChangesNode","nextRenderNodeWithBinding","debugCheckRenderNodeFn","givenValues","bindingValues","camelCaseToDashCase","elView","elOrCompView","childDef","collectReferences","findHostElement","logViewDef","logNodeIndex","renderNodeIndex","getRenderNodeIndex","currRenderNodeIndex","refName","oldAction","oldNodeIndex","isViewDebugError","viewWrappedDebugError","getCurrentDebugContext","renderData","DebugRenderer2","whenRenderingDone","debugContextFactory","removeDebugNodeFromIndex","debugCtx","debugEl","debugChildEl","debugRefEl","oldChild","preserveContent","NgModuleFactory_","_ngModuleDefFactory","cloneNgModuleDefinition","destroyPlatform","enableProdMode","asNativeElements","debugEls","setTestabilityGetter","CUSTOM_ELEMENTS_SCHEMA","NO_ERRORS_SCHEMA","ɵNoopNgZone","ɵComponentFactory","ɵALLOW_MULTIPLE_PLATFORMS","ɵAPP_ID_RANDOM_PROVIDER","ɵdefaultIterableDiffers","ɵdefaultKeyValueDiffers","ɵdevModeEqual","ɵisListLikeIterable","ɵisDefaultChangeDetectionStrategy","isDefaultChangeDetectionStrategy","changeDetectionStrategy","ɵConsole","ɵsetCurrentInjector","ɵgetInjectableDef","ɵAPP_ROOT","ɵivyEnabled","ɵCodegenComponentFactoryResolver","ɵclearResolutionOfComponentResourcesQueue","ɵresolveComponentResources","ɵReflectionCapabilities","ɵRenderDebugInfo","ɵ_sanitizeHtml","ɵ_sanitizeStyle","ɵ_sanitizeUrl","ɵglobal","ɵlooseIdentical","ɵstringify","ɵmakeDecorator","ɵisObservable","ɵisPromise","ɵclearOverrides","ɵinitServicesIfNeeded","ɵoverrideComponentView","ɵoverrideProvider","ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR","ɵgetLocalePluralCase","ɵfindLocaleData","ɵLOCALE_DATA","ɵdetectChanges","ɵrenderComponent","renderComponent","ɵRender3ComponentFactory","ɵRender3ComponentRef","ɵLifecycleHooksFeature","ɵRender3NgModuleRef","ɵmarkDirty","ɵNgModuleFactory","ɵNO_CHANGE","ɵgetDirectives","ɵgetHostElement","ɵstore","ɵwhenRendered","whenRendered","ɵi18nConfigureLocalize","i18nConfigureLocalize","translations","ɵsetLocaleId","ɵDEFAULT_LOCALE_ID","ɵsetClassMetadata","setClassMetadata","clazz","parentPrototype","parentConstructor","ɵcompileComponent","ɵcompileDirective","ɵcompileNgModule","ɵcompileNgModuleDefs","ɵpatchComponentDefWithScope","ɵresetCompiledComponents","resetCompiledComponents","ɵflushModuleScopingQueueAsMuchAsPossible","ɵtransitiveScopesFor","ɵcompilePipe","ɵbypassSanitizationTrustHtml","bypassSanitizationTrustHtml","trustedHtml","ɵbypassSanitizationTrustStyle","bypassSanitizationTrustStyle","trustedStyle","ɵbypassSanitizationTrustScript","bypassSanitizationTrustScript","trustedScript","ɵbypassSanitizationTrustUrl","bypassSanitizationTrustUrl","trustedUrl","ɵbypassSanitizationTrustResourceUrl","bypassSanitizationTrustResourceUrl","trustedResourceUrl","ɵgetLContext","ɵNG_ELEMENT_ID","ɵNG_COMPONENT_DEF","ɵNG_DIRECTIVE_DEF","ɵNG_PIPE_DEF","ɵNG_MODULE_DEF","ɵNG_BASE_DEF","ɵNG_INJECTABLE_DEF","ɵNG_INJECTOR_DEF","ɵbindPlayerFactory","bindPlayerFactory","ɵaddPlayer","addPlayer","getOrCreatePlayerContext","ɵgetPlayers","ɵcompileNgModuleFactory__POST_R3__","ɵisBoundToModule__POST_R3__","ɵSWITCH_COMPILE_COMPONENT__POST_R3__","ɵSWITCH_COMPILE_DIRECTIVE__POST_R3__","ɵSWITCH_COMPILE_PIPE__POST_R3__","ɵSWITCH_COMPILE_NGMODULE__POST_R3__","ɵgetDebugNode__POST_R3__","ɵSWITCH_COMPILE_INJECTABLE__POST_R3__","ɵSWITCH_IVY_ENABLED__POST_R3__","ɵSWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__","ɵCompiler_compileModuleSync__POST_R3__","ɵCompiler_compileModuleAsync__POST_R3__","ɵCompiler_compileModuleAndAllComponentsSync__POST_R3__","ɵCompiler_compileModuleAndAllComponentsAsync__POST_R3__","ɵSWITCH_ELEMENT_REF_FACTORY__POST_R3__","ɵSWITCH_TEMPLATE_REF_FACTORY__POST_R3__","ɵSWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__","ɵSWITCH_RENDERER2_FACTORY__POST_R3__","ɵgetModuleFactory__POST_R3__","ɵregisterNgModuleType","ɵpublishGlobalUtil","ɵpublishDefaultGlobalUtils","publishDefaultGlobalUtils","ɵcreateInjector","ɵINJECTOR_IMPL__POST_R3__","ɵregisterModuleFactory","registerModuleFactory","ɵEMPTY_ARRAY","ɵEMPTY_MAP","ɵand","templateFactory","ɵccf","createComponentFactory","ɵcmf","createNgModuleFactory","defFactory","ɵcrt","createRendererType2","ɵdid","outputDefs","ɵeld","fixedAttrs","bindingDefs","suffixOrSecurityContext","ns_1","resolveRendererType2","isFilled","None","ɵgetComponentViewDefinitionFactory","ɵinlineInterpolate","inlineInterpolate","valueCount","c0","a1","c1","a2","c2","a3","c3","a4","c4","a5","c5","a6","c6","a7","c7","a8","c8","a9","c9","ɵinterpolate","interpolate","constAndInterp","ɵmod","moduleDef","ɵmpd","moduleProvideDef","ɵncd","ngContentDef","ɵnov","ɵpid","ɵprd","ɵpad","pureArrayDef","argCount","ɵpod","pureObjectDef","propToIndex","nbKeys","ɵppd","purePipeDef","ɵqud","ɵted","textDef","staticText","ɵunv","unwrapValue","nodeIdx","globalBindingIdx","ɵvid","viewBindingCount","viewDisposableCount","viewNodeFlags","viewRootNodeFlags","viewMatchedQueries","currentParent","currentRenderParent","currentElementHasPublicProviders","currentElementHasPrivateProviders","newParent","rootNodeFlags"],"mappings":"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","sourcesContent":["/**\n * @license Angular v8.1.0-next.3+29.sha-6a381d9.with-local-changes\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs'), require('rxjs/operators')) :\n    typeof define === 'function' && define.amd ? define('@angular/core', ['exports', 'rxjs', 'rxjs/operators'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.core = {}), global.rxjs, global.rxjs.operators));\n}(this, function (exports, rxjs, operators) { 'use strict';\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\r\n\r\n    function __values(o) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n        if (m) return m.call(o);\r\n        return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n    }\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\r\n\r\n    function __spread() {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var ANNOTATIONS = '__annotations__';\n    var PARAMETERS = '__parameters__';\n    var PROP_METADATA = '__prop__metadata__';\n    /**\n     * @suppress {globalThis}\n     */\n    function makeDecorator(name, props, parentClass, additionalProcessing, typeFn) {\n        var metaCtor = makeMetadataCtor(props);\n        function DecoratorFactory() {\n            var _a;\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            if (this instanceof DecoratorFactory) {\n                metaCtor.call.apply(metaCtor, __spread([this], args));\n                return this;\n            }\n            var annotationInstance = new ((_a = DecoratorFactory).bind.apply(_a, __spread([void 0], args)))();\n            return function TypeDecorator(cls) {\n                if (typeFn)\n                    typeFn.apply(void 0, __spread([cls], args));\n                // Use of Object.defineProperty is important since it creates non-enumerable property which\n                // prevents the property is copied during subclassing.\n                var annotations = cls.hasOwnProperty(ANNOTATIONS) ?\n                    cls[ANNOTATIONS] :\n                    Object.defineProperty(cls, ANNOTATIONS, { value: [] })[ANNOTATIONS];\n                annotations.push(annotationInstance);\n                if (additionalProcessing)\n                    additionalProcessing(cls);\n                return cls;\n            };\n        }\n        if (parentClass) {\n            DecoratorFactory.prototype = Object.create(parentClass.prototype);\n        }\n        DecoratorFactory.prototype.ngMetadataName = name;\n        DecoratorFactory.annotationCls = DecoratorFactory;\n        return DecoratorFactory;\n    }\n    function makeMetadataCtor(props) {\n        return function ctor() {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            if (props) {\n                var values = props.apply(void 0, __spread(args));\n                for (var propName in values) {\n                    this[propName] = values[propName];\n                }\n            }\n        };\n    }\n    function makeParamDecorator(name, props, parentClass) {\n        var metaCtor = makeMetadataCtor(props);\n        function ParamDecoratorFactory() {\n            var _a;\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            if (this instanceof ParamDecoratorFactory) {\n                metaCtor.apply(this, args);\n                return this;\n            }\n            var annotationInstance = new ((_a = ParamDecoratorFactory).bind.apply(_a, __spread([void 0], args)))();\n            ParamDecorator.annotation = annotationInstance;\n            return ParamDecorator;\n            function ParamDecorator(cls, unusedKey, index) {\n                // Use of Object.defineProperty is important since it creates non-enumerable property which\n                // prevents the property is copied during subclassing.\n                var parameters = cls.hasOwnProperty(PARAMETERS) ?\n                    cls[PARAMETERS] :\n                    Object.defineProperty(cls, PARAMETERS, { value: [] })[PARAMETERS];\n                // there might be gaps if some in between parameters do not have annotations.\n                // we pad with nulls.\n                while (parameters.length <= index) {\n                    parameters.push(null);\n                }\n                (parameters[index] = parameters[index] || []).push(annotationInstance);\n                return cls;\n            }\n        }\n        if (parentClass) {\n            ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);\n        }\n        ParamDecoratorFactory.prototype.ngMetadataName = name;\n        ParamDecoratorFactory.annotationCls = ParamDecoratorFactory;\n        return ParamDecoratorFactory;\n    }\n    function makePropDecorator(name, props, parentClass, additionalProcessing) {\n        var metaCtor = makeMetadataCtor(props);\n        function PropDecoratorFactory() {\n            var _a;\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            if (this instanceof PropDecoratorFactory) {\n                metaCtor.apply(this, args);\n                return this;\n            }\n            var decoratorInstance = new ((_a = PropDecoratorFactory).bind.apply(_a, __spread([void 0], args)))();\n            function PropDecorator(target, name) {\n                var constructor = target.constructor;\n                // Use of Object.defineProperty is important since it creates non-enumerable property which\n                // prevents the property is copied during subclassing.\n                var meta = constructor.hasOwnProperty(PROP_METADATA) ?\n                    constructor[PROP_METADATA] :\n                    Object.defineProperty(constructor, PROP_METADATA, { value: {} })[PROP_METADATA];\n                meta[name] = meta.hasOwnProperty(name) && meta[name] || [];\n                meta[name].unshift(decoratorInstance);\n                if (additionalProcessing)\n                    additionalProcessing.apply(void 0, __spread([target, name], args));\n            }\n            return PropDecorator;\n        }\n        if (parentClass) {\n            PropDecoratorFactory.prototype = Object.create(parentClass.prototype);\n        }\n        PropDecoratorFactory.prototype.ngMetadataName = name;\n        PropDecoratorFactory.annotationCls = PropDecoratorFactory;\n        return PropDecoratorFactory;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Inject decorator and metadata.\n     *\n     * @Annotation\n     * @publicApi\n     */\n    var Inject = makeParamDecorator('Inject', function (token) { return ({ token: token }); });\n    /**\n     * Optional decorator and metadata.\n     *\n     * @Annotation\n     * @publicApi\n     */\n    var Optional = makeParamDecorator('Optional');\n    /**\n     * Self decorator and metadata.\n     *\n     * @Annotation\n     * @publicApi\n     */\n    var Self = makeParamDecorator('Self');\n    /**\n     * SkipSelf decorator and metadata.\n     *\n     * @Annotation\n     * @publicApi\n     */\n    var SkipSelf = makeParamDecorator('SkipSelf');\n    /**\n     * Host decorator and metadata.\n     *\n     * @Annotation\n     * @publicApi\n     */\n    var Host = makeParamDecorator('Host');\n    /**\n     * Attribute decorator and metadata.\n     *\n     * @Annotation\n     * @publicApi\n     */\n    var Attribute = makeParamDecorator('Attribute', function (attributeName) { return ({ attributeName: attributeName }); });\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    (function (InjectFlags) {\n        // TODO(alxhub): make this 'const' when ngc no longer writes exports of it into ngfactory files.\n        /** Check self and check parent injector if needed */\n        InjectFlags[InjectFlags[\"Default\"] = 0] = \"Default\";\n        /**\n         * Specifies that an injector should retrieve a dependency from any injector until reaching the\n         * host element of the current component. (Only used with Element Injector)\n         */\n        InjectFlags[InjectFlags[\"Host\"] = 1] = \"Host\";\n        /** Don't ascend to ancestors of the node requesting injection. */\n        InjectFlags[InjectFlags[\"Self\"] = 2] = \"Self\";\n        /** Skip the node that is requesting injection. */\n        InjectFlags[InjectFlags[\"SkipSelf\"] = 4] = \"SkipSelf\";\n        /** Inject `defaultValue` instead if token not found. */\n        InjectFlags[InjectFlags[\"Optional\"] = 8] = \"Optional\";\n    })(exports.InjectFlags || (exports.InjectFlags = {}));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function getClosureSafeProperty(objWithPropertyToExtract) {\n        for (var key in objWithPropertyToExtract) {\n            if (objWithPropertyToExtract[key] === getClosureSafeProperty) {\n                return key;\n            }\n        }\n        throw Error('Could not find renamed property on target object.');\n    }\n    /**\n     * Sets properties on a target object from a source object, but only if\n     * the property doesn't already exist on the target object.\n     * @param target The target to set properties on\n     * @param source The source of the property keys and values to set\n     */\n    function fillProperties(target, source) {\n        for (var key in source) {\n            if (source.hasOwnProperty(key) && !target.hasOwnProperty(key)) {\n                target[key] = source[key];\n            }\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Construct an `InjectableDef` which defines how a token will be constructed by the DI system, and\n     * in which injectors (if any) it will be available.\n     *\n     * This should be assigned to a static `ngInjectableDef` field on a type, which will then be an\n     * `InjectableType`.\n     *\n     * Options:\n     * * `providedIn` determines which injectors will include the injectable, by either associating it\n     *   with an `@NgModule` or other `InjectorType`, or by specifying that this injectable should be\n     *   provided in the `'root'` injector, which will be the application-level injector in most apps.\n     * * `factory` gives the zero argument function which will create an instance of the injectable.\n     *   The factory can call `inject` to access the `Injector` and request injection of dependencies.\n     *\n     * @codeGenApi\n     */\n    function ɵɵdefineInjectable(opts) {\n        return {\n            token: opts.token, providedIn: opts.providedIn || null, factory: opts.factory,\n            value: undefined,\n        };\n    }\n    /**\n     * @deprecated in v8, delete after v10. This API should be used only be generated code, and that\n     * code should now use ɵɵdefineInjectable instead.\n     * @publicApi\n     */\n    var defineInjectable = ɵɵdefineInjectable;\n    /**\n     * Construct an `InjectorDef` which configures an injector.\n     *\n     * This should be assigned to a static `ngInjectorDef` field on a type, which will then be an\n     * `InjectorType`.\n     *\n     * Options:\n     *\n     * * `factory`: an `InjectorType` is an instantiable type, so a zero argument `factory` function to\n     *   create the type must be provided. If that factory function needs to inject arguments, it can\n     *   use the `inject` function.\n     * * `providers`: an optional array of providers to add to the injector. Each provider must\n     *   either have a factory or point to a type which has an `ngInjectableDef` static property (the\n     *   type must be an `InjectableType`).\n     * * `imports`: an optional array of imports of other `InjectorType`s or `InjectorTypeWithModule`s\n     *   whose providers will also be added to the injector. Locally provided types will override\n     *   providers from imports.\n     *\n     * @publicApi\n     */\n    function ɵɵdefineInjector(options) {\n        return {\n            factory: options.factory, providers: options.providers || [], imports: options.imports || [],\n        };\n    }\n    /**\n     * Read the `ngInjectableDef` for `type` in a way which is immune to accidentally reading inherited\n     * value.\n     *\n     * @param type A type which may have its own (non-inherited) `ngInjectableDef`.\n     */\n    function getInjectableDef(type) {\n        var def = type[NG_INJECTABLE_DEF];\n        // The definition read above may come from a base class. `hasOwnProperty` is not sufficient to\n        // distinguish this case, as in older browsers (e.g. IE10) static property inheritance is\n        // implemented by copying the properties.\n        //\n        // Instead, the ngInjectableDef's token is compared to the type, and if they don't match then the\n        // property was not defined directly on the type itself, and was likely inherited. The definition\n        // is only returned if the type matches the def.token.\n        return def && def.token === type ? def : null;\n    }\n    /**\n     * Read the `ngInjectableDef` for `type` or read the `ngInjectableDef` from one of its ancestors.\n     *\n     * @param type A type which may have `ngInjectableDef`, via inheritance.\n     *\n     * @deprecated Will be removed in v10, where an error will occur in the scenario if we find the\n     * `ngInjectableDef` on an ancestor only.\n     */\n    function getInheritedInjectableDef(type) {\n        if (type && type[NG_INJECTABLE_DEF]) {\n            // TODO(FW-1307): Re-add ngDevMode when closure can handle it\n            // ngDevMode &&\n            console.warn(\"DEPRECATED: DI is instantiating a token \\\"\" + type.name + \"\\\" that inherits its @Injectable decorator but does not provide one itself.\\n\" +\n                (\"This will become an error in v10. Please add @Injectable() to the \\\"\" + type.name + \"\\\" class.\"));\n            return type[NG_INJECTABLE_DEF];\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Read the `ngInjectorDef` type in a way which is immune to accidentally reading inherited value.\n     *\n     * @param type type which may have `ngInjectorDef`\n     */\n    function getInjectorDef(type) {\n        return type && type.hasOwnProperty(NG_INJECTOR_DEF) ? type[NG_INJECTOR_DEF] : null;\n    }\n    var NG_INJECTABLE_DEF = getClosureSafeProperty({ ngInjectableDef: getClosureSafeProperty });\n    var NG_INJECTOR_DEF = getClosureSafeProperty({ ngInjectorDef: getClosureSafeProperty });\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function stringify(token) {\n        if (typeof token === 'string') {\n            return token;\n        }\n        if (token instanceof Array) {\n            return '[' + token.map(stringify).join(', ') + ']';\n        }\n        if (token == null) {\n            return '' + token;\n        }\n        if (token.overriddenName) {\n            return \"\" + token.overriddenName;\n        }\n        if (token.name) {\n            return \"\" + token.name;\n        }\n        var res = token.toString();\n        if (res == null) {\n            return '' + res;\n        }\n        var newLineIndex = res.indexOf('\\n');\n        return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __forward_ref__ = getClosureSafeProperty({ __forward_ref__: getClosureSafeProperty });\n    /**\n     * Allows to refer to references which are not yet defined.\n     *\n     * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\n     * DI is declared, but not yet defined. It is also used when the `token` which we use when creating\n     * a query is not yet defined.\n     *\n     * @usageNotes\n     * ### Example\n     * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\n     * @publicApi\n     */\n    function forwardRef(forwardRefFn) {\n        forwardRefFn.__forward_ref__ = forwardRef;\n        forwardRefFn.toString = function () { return stringify(this()); };\n        return forwardRefFn;\n    }\n    /**\n     * Lazily retrieves the reference value from a forwardRef.\n     *\n     * Acts as the identity function when given a non-forward-ref value.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\n     *\n     * @see `forwardRef`\n     * @publicApi\n     */\n    function resolveForwardRef(type) {\n        var fn = type;\n        if (typeof fn === 'function' && fn.hasOwnProperty(__forward_ref__) &&\n            fn.__forward_ref__ === forwardRef) {\n            return fn();\n        }\n        else {\n            return type;\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __globalThis = typeof globalThis !== 'undefined' && globalThis;\n    var __window = typeof window !== 'undefined' && window;\n    var __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n        self instanceof WorkerGlobalScope && self;\n    var __global = typeof global !== 'undefined' && global;\n    // Always use __globalThis if available, which is the spec-defined global variable across all\n    // environments, then fallback to __global first, because in Node tests both __global and\n    // __window may be defined and _global should be __global in that case.\n    var _global = __globalThis || __global || __window || __self;\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var R3ResolvedDependencyType;\n    (function (R3ResolvedDependencyType) {\n        R3ResolvedDependencyType[R3ResolvedDependencyType[\"Token\"] = 0] = \"Token\";\n        R3ResolvedDependencyType[R3ResolvedDependencyType[\"Attribute\"] = 1] = \"Attribute\";\n    })(R3ResolvedDependencyType || (R3ResolvedDependencyType = {}));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function getCompilerFacade() {\n        var globalNg = _global['ng'];\n        if (!globalNg || !globalNg.ɵcompilerFacade) {\n            throw new Error(\"Angular JIT compilation failed: '@angular/compiler' not loaded!\\n\" +\n                \"  - JIT compilation is discouraged for production use-cases! Consider AOT mode instead.\\n\" +\n                \"  - Did you bootstrap using '@angular/platform-browser-dynamic' or '@angular/platform-server'?\\n\" +\n                \"  - Alternatively provide the compiler with 'import \\\"@angular/compiler\\\";' before bootstrapping.\");\n        }\n        return globalNg.ɵcompilerFacade;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Creates a token that can be used in a DI Provider.\n     *\n     * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a\n     * runtime representation) such as when injecting an interface, callable type, array or\n     * parameterized type.\n     *\n     * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by\n     * the `Injector`. This provides additional level of type safety.\n     *\n     * ```\n     * interface MyInterface {...}\n     * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));\n     * // myInterface is inferred to be MyInterface.\n     * ```\n     *\n     * When creating an `InjectionToken`, you can optionally specify a factory function which returns\n     * (possibly by creating) a default value of the parameterized type `T`. This sets up the\n     * `InjectionToken` using this factory as a provider as if it was defined explicitly in the\n     * application's root injector. If the factory function, which takes zero arguments, needs to inject\n     * dependencies, it can do so using the `inject` function. See below for an example.\n     *\n     * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which\n     * overrides the above behavior and marks the token as belonging to a particular `@NgModule`. As\n     * mentioned above, `'root'` is the default value for `providedIn`.\n     *\n     * @usageNotes\n     * ### Basic Example\n     *\n     * ### Plain InjectionToken\n     *\n     * {@example core/di/ts/injector_spec.ts region='InjectionToken'}\n     *\n     * ### Tree-shakable InjectionToken\n     *\n     * {@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}\n     *\n     *\n     * @publicApi\n     */\n    var InjectionToken = /** @class */ (function () {\n        function InjectionToken(_desc, options) {\n            this._desc = _desc;\n            /** @internal */\n            this.ngMetadataName = 'InjectionToken';\n            this.ngInjectableDef = undefined;\n            if (typeof options == 'number') {\n                // This is a special hack to assign __NG_ELEMENT_ID__ to this instance.\n                // __NG_ELEMENT_ID__ is Used by Ivy to determine bloom filter id.\n                // We are using it to assign `-1` which is used to identify `Injector`.\n                this.__NG_ELEMENT_ID__ = options;\n            }\n            else if (options !== undefined) {\n                this.ngInjectableDef = ɵɵdefineInjectable({\n                    token: this,\n                    providedIn: options.providedIn || 'root',\n                    factory: options.factory,\n                });\n            }\n        }\n        InjectionToken.prototype.toString = function () { return \"InjectionToken \" + this._desc; };\n        return InjectionToken;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * An InjectionToken that gets the current `Injector` for `createInjector()`-style injectors.\n     *\n     * Requesting this token instead of `Injector` allows `StaticInjector` to be tree-shaken from a\n     * project.\n     *\n     * @publicApi\n     */\n    var INJECTOR = new InjectionToken('INJECTOR', -1 // `-1` is used by Ivy DI system as special value to recognize it as `Injector`.\n    );\n    var _THROW_IF_NOT_FOUND = new Object();\n    var THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n    var NG_TEMP_TOKEN_PATH = 'ngTempTokenPath';\n    var NG_TOKEN_PATH = 'ngTokenPath';\n    var NEW_LINE = /\\n/gm;\n    var NO_NEW_LINE = 'ɵ';\n    var SOURCE = '__source';\n    var USE_VALUE = getClosureSafeProperty({ provide: String, useValue: getClosureSafeProperty });\n    /**\n     * Current injector value used by `inject`.\n     * - `undefined`: it is an error to call `inject`\n     * - `null`: `inject` can be called but there is no injector (limp-mode).\n     * - Injector instance: Use the injector for resolution.\n     */\n    var _currentInjector = undefined;\n    function setCurrentInjector(injector) {\n        var former = _currentInjector;\n        _currentInjector = injector;\n        return former;\n    }\n    /**\n     * Current implementation of inject.\n     *\n     * By default, it is `injectInjectorOnly`, which makes it `Injector`-only aware. It can be changed\n     * to `directiveInject`, which brings in the `NodeInjector` system of ivy. It is designed this\n     * way for two reasons:\n     *  1. `Injector` should not depend on ivy logic.\n     *  2. To maintain tree shake-ability we don't want to bring in unnecessary code.\n     */\n    var _injectImplementation;\n    /**\n     * Sets the current inject implementation.\n     */\n    function setInjectImplementation(impl) {\n        var previous = _injectImplementation;\n        _injectImplementation = impl;\n        return previous;\n    }\n    function injectInjectorOnly(token, flags) {\n        if (flags === void 0) { flags = exports.InjectFlags.Default; }\n        if (_currentInjector === undefined) {\n            throw new Error(\"inject() must be called from an injection context\");\n        }\n        else if (_currentInjector === null) {\n            return injectRootLimpMode(token, undefined, flags);\n        }\n        else {\n            return _currentInjector.get(token, flags & exports.InjectFlags.Optional ? null : undefined, flags);\n        }\n    }\n    function ɵɵinject(token, flags) {\n        if (flags === void 0) { flags = exports.InjectFlags.Default; }\n        return (_injectImplementation || injectInjectorOnly)(token, flags);\n    }\n    /**\n     * Injects a token from the currently active injector.\n     *\n     * Must be used in the context of a factory function such as one defined for an\n     * `InjectionToken`. Throws an error if not called from such a context.\n     *\n     * Within such a factory function, using this function to request injection of a dependency\n     * is faster and more type-safe than providing an additional array of dependencies\n     * (as has been common with `useFactory` providers).\n     *\n     * @param token The injection token for the dependency to be injected.\n     * @param flags Optional flags that control how injection is executed.\n     * The flags correspond to injection strategies that can be specified with\n     * parameter decorators `@Host`, `@Self`, `@SkipSef`, and `@Optional`.\n     * @returns True if injection is successful, null otherwise.\n     *\n     * @usageNotes\n     *\n     * ### Example\n     *\n     * {@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}\n     *\n     * @publicApi\n     */\n    var inject = ɵɵinject;\n    /**\n     * Injects `root` tokens in limp mode.\n     *\n     * If no injector exists, we can still inject tree-shakable providers which have `providedIn` set to\n     * `\"root\"`. This is known as the limp mode injection. In such case the value is stored in the\n     * `InjectableDef`.\n     */\n    function injectRootLimpMode(token, notFoundValue, flags) {\n        var injectableDef = getInjectableDef(token);\n        if (injectableDef && injectableDef.providedIn == 'root') {\n            return injectableDef.value === undefined ? injectableDef.value = injectableDef.factory() :\n                injectableDef.value;\n        }\n        if (flags & exports.InjectFlags.Optional)\n            return null;\n        if (notFoundValue !== undefined)\n            return notFoundValue;\n        throw new Error(\"Injector: NOT_FOUND [\" + stringify(token) + \"]\");\n    }\n    function injectArgs(types) {\n        var args = [];\n        for (var i = 0; i < types.length; i++) {\n            var arg = resolveForwardRef(types[i]);\n            if (Array.isArray(arg)) {\n                if (arg.length === 0) {\n                    throw new Error('Arguments array must have arguments.');\n                }\n                var type = undefined;\n                var flags = exports.InjectFlags.Default;\n                for (var j = 0; j < arg.length; j++) {\n                    var meta = arg[j];\n                    if (meta instanceof Optional || meta.ngMetadataName === 'Optional' || meta === Optional) {\n                        flags |= exports.InjectFlags.Optional;\n                    }\n                    else if (meta instanceof SkipSelf || meta.ngMetadataName === 'SkipSelf' || meta === SkipSelf) {\n                        flags |= exports.InjectFlags.SkipSelf;\n                    }\n                    else if (meta instanceof Self || meta.ngMetadataName === 'Self' || meta === Self) {\n                        flags |= exports.InjectFlags.Self;\n                    }\n                    else if (meta instanceof Inject || meta === Inject) {\n                        type = meta.token;\n                    }\n                    else {\n                        type = meta;\n                    }\n                }\n                args.push(ɵɵinject(type, flags));\n            }\n            else {\n                args.push(ɵɵinject(arg));\n            }\n        }\n        return args;\n    }\n    var NullInjector = /** @class */ (function () {\n        function NullInjector() {\n        }\n        NullInjector.prototype.get = function (token, notFoundValue) {\n            if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }\n            if (notFoundValue === THROW_IF_NOT_FOUND) {\n                // Intentionally left behind: With dev tools open the debugger will stop here. There is no\n                // reason why correctly written application should cause this exception.\n                // TODO(misko): uncomment the next line once `ngDevMode` works with closure.\n                // if(ngDevMode) debugger;\n                var error = new Error(\"NullInjectorError: No provider for \" + stringify(token) + \"!\");\n                error.name = 'NullInjectorError';\n                throw error;\n            }\n            return notFoundValue;\n        };\n        return NullInjector;\n    }());\n    function catchInjectorError(e, token, injectorErrorName, source) {\n        var tokenPath = e[NG_TEMP_TOKEN_PATH];\n        if (token[SOURCE]) {\n            tokenPath.unshift(token[SOURCE]);\n        }\n        e.message = formatError('\\n' + e.message, tokenPath, injectorErrorName, source);\n        e[NG_TOKEN_PATH] = tokenPath;\n        e[NG_TEMP_TOKEN_PATH] = null;\n        throw e;\n    }\n    function formatError(text, obj, injectorErrorName, source) {\n        if (source === void 0) { source = null; }\n        text = text && text.charAt(0) === '\\n' && text.charAt(1) == NO_NEW_LINE ? text.substr(2) : text;\n        var context = stringify(obj);\n        if (obj instanceof Array) {\n            context = obj.map(stringify).join(' -> ');\n        }\n        else if (typeof obj === 'object') {\n            var parts = [];\n            for (var key in obj) {\n                if (obj.hasOwnProperty(key)) {\n                    var value = obj[key];\n                    parts.push(key + ':' + (typeof value === 'string' ? JSON.stringify(value) : stringify(value)));\n                }\n            }\n            context = \"{\" + parts.join(', ') + \"}\";\n        }\n        return \"\" + injectorErrorName + (source ? '(' + source + ')' : '') + \"[\" + context + \"]: \" + text.replace(NEW_LINE, '\\n  ');\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A mapping of the @angular/core API surface used in generated expressions to the actual symbols.\n     *\n     * This should be kept up to date with the public exports of @angular/core.\n     */\n    var angularCoreDiEnv = {\n        'ɵɵdefineInjectable': ɵɵdefineInjectable,\n        'ɵɵdefineInjector': ɵɵdefineInjector,\n        'ɵɵinject': ɵɵinject,\n        'ɵɵgetFactoryOf': getFactoryOf,\n    };\n    function getFactoryOf(type) {\n        var typeAny = type;\n        var def = getInjectableDef(typeAny) || getInjectorDef(typeAny);\n        if (!def || def.factory === undefined) {\n            return null;\n        }\n        return def.factory;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * @description\n     *\n     * Represents a type that a Component or other object is instances of.\n     *\n     * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by\n     * the `MyCustomComponent` constructor function.\n     *\n     * @publicApi\n     */\n    var Type = Function;\n    function isType(v) {\n        return typeof v === 'function';\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Attention: These regex has to hold even if the code is minified!\n     */\n    var DELEGATE_CTOR = /^function\\s+\\S+\\(\\)\\s*{[\\s\\S]+\\.apply\\(this,\\s*arguments\\)/;\n    var INHERITED_CLASS = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{/;\n    var INHERITED_CLASS_WITH_CTOR = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{[\\s\\S]*constructor\\s*\\(/;\n    var INHERITED_CLASS_WITH_DELEGATE_CTOR = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{[\\s\\S]*constructor\\s*\\(\\)\\s*{\\s+super\\(\\.\\.\\.arguments\\)/;\n    /**\n     * Determine whether a stringified type is a class which delegates its constructor\n     * to its parent.\n     *\n     * This is not trivial since compiled code can actually contain a constructor function\n     * even if the original source code did not. For instance, when the child class contains\n     * an initialized instance property.\n     */\n    function isDelegateCtor(typeStr) {\n        return DELEGATE_CTOR.test(typeStr) || INHERITED_CLASS_WITH_DELEGATE_CTOR.test(typeStr) ||\n            (INHERITED_CLASS.test(typeStr) && !INHERITED_CLASS_WITH_CTOR.test(typeStr));\n    }\n    var ReflectionCapabilities = /** @class */ (function () {\n        function ReflectionCapabilities(reflect) {\n            this._reflect = reflect || _global['Reflect'];\n        }\n        ReflectionCapabilities.prototype.isReflectionEnabled = function () { return true; };\n        ReflectionCapabilities.prototype.factory = function (t) { return function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            return new (t.bind.apply(t, __spread([void 0], args)))();\n        }; };\n        /** @internal */\n        ReflectionCapabilities.prototype._zipTypesAndAnnotations = function (paramTypes, paramAnnotations) {\n            var result;\n            if (typeof paramTypes === 'undefined') {\n                result = new Array(paramAnnotations.length);\n            }\n            else {\n                result = new Array(paramTypes.length);\n            }\n            for (var i = 0; i < result.length; i++) {\n                // TS outputs Object for parameters without types, while Traceur omits\n                // the annotations. For now we preserve the Traceur behavior to aid\n                // migration, but this can be revisited.\n                if (typeof paramTypes === 'undefined') {\n                    result[i] = [];\n                }\n                else if (paramTypes[i] != Object) {\n                    result[i] = [paramTypes[i]];\n                }\n                else {\n                    result[i] = [];\n                }\n                if (paramAnnotations && paramAnnotations[i] != null) {\n                    result[i] = result[i].concat(paramAnnotations[i]);\n                }\n            }\n            return result;\n        };\n        ReflectionCapabilities.prototype._ownParameters = function (type, parentCtor) {\n            var typeStr = type.toString();\n            // If we have no decorators, we only have function.length as metadata.\n            // In that case, to detect whether a child class declared an own constructor or not,\n            // we need to look inside of that constructor to check whether it is\n            // just calling the parent.\n            // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439\n            // that sets 'design:paramtypes' to []\n            // if a class inherits from another class but has no ctor declared itself.\n            if (isDelegateCtor(typeStr)) {\n                return null;\n            }\n            // Prefer the direct API.\n            if (type.parameters && type.parameters !== parentCtor.parameters) {\n                return type.parameters;\n            }\n            // API of tsickle for lowering decorators to properties on the class.\n            var tsickleCtorParams = type.ctorParameters;\n            if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {\n                // Newer tsickle uses a function closure\n                // Retain the non-function case for compatibility with older tsickle\n                var ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;\n                var paramTypes_1 = ctorParameters.map(function (ctorParam) { return ctorParam && ctorParam.type; });\n                var paramAnnotations_1 = ctorParameters.map(function (ctorParam) {\n                    return ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators);\n                });\n                return this._zipTypesAndAnnotations(paramTypes_1, paramAnnotations_1);\n            }\n            // API for metadata created by invoking the decorators.\n            var paramAnnotations = type.hasOwnProperty(PARAMETERS) && type[PARAMETERS];\n            var paramTypes = this._reflect && this._reflect.getOwnMetadata &&\n                this._reflect.getOwnMetadata('design:paramtypes', type);\n            if (paramTypes || paramAnnotations) {\n                return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n            }\n            // If a class has no decorators, at least create metadata\n            // based on function.length.\n            // Note: We know that this is a real constructor as we checked\n            // the content of the constructor above.\n            return new Array(type.length).fill(undefined);\n        };\n        ReflectionCapabilities.prototype.parameters = function (type) {\n            // Note: only report metadata if we have at least one class decorator\n            // to stay in sync with the static reflector.\n            if (!isType(type)) {\n                return [];\n            }\n            var parentCtor = getParentCtor(type);\n            var parameters = this._ownParameters(type, parentCtor);\n            if (!parameters && parentCtor !== Object) {\n                parameters = this.parameters(parentCtor);\n            }\n            return parameters || [];\n        };\n        ReflectionCapabilities.prototype._ownAnnotations = function (typeOrFunc, parentCtor) {\n            // Prefer the direct API.\n            if (typeOrFunc.annotations && typeOrFunc.annotations !== parentCtor.annotations) {\n                var annotations = typeOrFunc.annotations;\n                if (typeof annotations === 'function' && annotations.annotations) {\n                    annotations = annotations.annotations;\n                }\n                return annotations;\n            }\n            // API of tsickle for lowering decorators to properties on the class.\n            if (typeOrFunc.decorators && typeOrFunc.decorators !== parentCtor.decorators) {\n                return convertTsickleDecoratorIntoMetadata(typeOrFunc.decorators);\n            }\n            // API for metadata created by invoking the decorators.\n            if (typeOrFunc.hasOwnProperty(ANNOTATIONS)) {\n                return typeOrFunc[ANNOTATIONS];\n            }\n            return null;\n        };\n        ReflectionCapabilities.prototype.annotations = function (typeOrFunc) {\n            if (!isType(typeOrFunc)) {\n                return [];\n            }\n            var parentCtor = getParentCtor(typeOrFunc);\n            var ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];\n            var parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];\n            return parentAnnotations.concat(ownAnnotations);\n        };\n        ReflectionCapabilities.prototype._ownPropMetadata = function (typeOrFunc, parentCtor) {\n            // Prefer the direct API.\n            if (typeOrFunc.propMetadata &&\n                typeOrFunc.propMetadata !== parentCtor.propMetadata) {\n                var propMetadata = typeOrFunc.propMetadata;\n                if (typeof propMetadata === 'function' && propMetadata.propMetadata) {\n                    propMetadata = propMetadata.propMetadata;\n                }\n                return propMetadata;\n            }\n            // API of tsickle for lowering decorators to properties on the class.\n            if (typeOrFunc.propDecorators &&\n                typeOrFunc.propDecorators !== parentCtor.propDecorators) {\n                var propDecorators_1 = typeOrFunc.propDecorators;\n                var propMetadata_1 = {};\n                Object.keys(propDecorators_1).forEach(function (prop) {\n                    propMetadata_1[prop] = convertTsickleDecoratorIntoMetadata(propDecorators_1[prop]);\n                });\n                return propMetadata_1;\n            }\n            // API for metadata created by invoking the decorators.\n            if (typeOrFunc.hasOwnProperty(PROP_METADATA)) {\n                return typeOrFunc[PROP_METADATA];\n            }\n            return null;\n        };\n        ReflectionCapabilities.prototype.propMetadata = function (typeOrFunc) {\n            if (!isType(typeOrFunc)) {\n                return {};\n            }\n            var parentCtor = getParentCtor(typeOrFunc);\n            var propMetadata = {};\n            if (parentCtor !== Object) {\n                var parentPropMetadata_1 = this.propMetadata(parentCtor);\n                Object.keys(parentPropMetadata_1).forEach(function (propName) {\n                    propMetadata[propName] = parentPropMetadata_1[propName];\n                });\n            }\n            var ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);\n            if (ownPropMetadata) {\n                Object.keys(ownPropMetadata).forEach(function (propName) {\n                    var decorators = [];\n                    if (propMetadata.hasOwnProperty(propName)) {\n                        decorators.push.apply(decorators, __spread(propMetadata[propName]));\n                    }\n                    decorators.push.apply(decorators, __spread(ownPropMetadata[propName]));\n                    propMetadata[propName] = decorators;\n                });\n            }\n            return propMetadata;\n        };\n        ReflectionCapabilities.prototype.ownPropMetadata = function (typeOrFunc) {\n            if (!isType(typeOrFunc)) {\n                return {};\n            }\n            return this._ownPropMetadata(typeOrFunc, getParentCtor(typeOrFunc)) || {};\n        };\n        ReflectionCapabilities.prototype.hasLifecycleHook = function (type, lcProperty) {\n            return type instanceof Type && lcProperty in type.prototype;\n        };\n        ReflectionCapabilities.prototype.guards = function (type) { return {}; };\n        ReflectionCapabilities.prototype.getter = function (name) { return new Function('o', 'return o.' + name + ';'); };\n        ReflectionCapabilities.prototype.setter = function (name) {\n            return new Function('o', 'v', 'return o.' + name + ' = v;');\n        };\n        ReflectionCapabilities.prototype.method = function (name) {\n            var functionBody = \"if (!o.\" + name + \") throw new Error('\\\"\" + name + \"\\\" is undefined');\\n        return o.\" + name + \".apply(o, args);\";\n            return new Function('o', 'args', functionBody);\n        };\n        // There is not a concept of import uri in Js, but this is useful in developing Dart applications.\n        ReflectionCapabilities.prototype.importUri = function (type) {\n            // StaticSymbol\n            if (typeof type === 'object' && type['filePath']) {\n                return type['filePath'];\n            }\n            // Runtime type\n            return \"./\" + stringify(type);\n        };\n        ReflectionCapabilities.prototype.resourceUri = function (type) { return \"./\" + stringify(type); };\n        ReflectionCapabilities.prototype.resolveIdentifier = function (name, moduleUrl, members, runtime) {\n            return runtime;\n        };\n        ReflectionCapabilities.prototype.resolveEnum = function (enumIdentifier, name) { return enumIdentifier[name]; };\n        return ReflectionCapabilities;\n    }());\n    function convertTsickleDecoratorIntoMetadata(decoratorInvocations) {\n        if (!decoratorInvocations) {\n            return [];\n        }\n        return decoratorInvocations.map(function (decoratorInvocation) {\n            var decoratorType = decoratorInvocation.type;\n            var annotationCls = decoratorType.annotationCls;\n            var annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];\n            return new (annotationCls.bind.apply(annotationCls, __spread([void 0], annotationArgs)))();\n        });\n    }\n    function getParentCtor(ctor) {\n        var parentProto = ctor.prototype ? Object.getPrototypeOf(ctor.prototype) : null;\n        var parentCtor = parentProto ? parentProto.constructor : null;\n        // Note: We always use `Object` as the null value\n        // to simplify checking later on.\n        return parentCtor || Object;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var _reflect = null;\n    function getReflect() {\n        return (_reflect = _reflect || new ReflectionCapabilities());\n    }\n    function reflectDependencies(type) {\n        return convertDependencies(getReflect().parameters(type));\n    }\n    function convertDependencies(deps) {\n        var compiler = getCompilerFacade();\n        return deps.map(function (dep) { return reflectDependency(compiler, dep); });\n    }\n    function reflectDependency(compiler, dep) {\n        var meta = {\n            token: null,\n            host: false,\n            optional: false,\n            resolved: compiler.R3ResolvedDependencyType.Token,\n            self: false,\n            skipSelf: false,\n        };\n        function setTokenAndResolvedType(token) {\n            meta.resolved = compiler.R3ResolvedDependencyType.Token;\n            meta.token = token;\n        }\n        if (Array.isArray(dep)) {\n            if (dep.length === 0) {\n                throw new Error('Dependency array must have arguments.');\n            }\n            for (var j = 0; j < dep.length; j++) {\n                var param = dep[j];\n                if (param === undefined) {\n                    // param may be undefined if type of dep is not set by ngtsc\n                    continue;\n                }\n                else if (param instanceof Optional || param.__proto__.ngMetadataName === 'Optional') {\n                    meta.optional = true;\n                }\n                else if (param instanceof SkipSelf || param.__proto__.ngMetadataName === 'SkipSelf') {\n                    meta.skipSelf = true;\n                }\n                else if (param instanceof Self || param.__proto__.ngMetadataName === 'Self') {\n                    meta.self = true;\n                }\n                else if (param instanceof Host || param.__proto__.ngMetadataName === 'Host') {\n                    meta.host = true;\n                }\n                else if (param instanceof Inject) {\n                    meta.token = param.token;\n                }\n                else if (param instanceof Attribute) {\n                    if (param.attributeName === undefined) {\n                        throw new Error(\"Attribute name must be defined.\");\n                    }\n                    meta.token = param.attributeName;\n                    meta.resolved = compiler.R3ResolvedDependencyType.Attribute;\n                }\n                else {\n                    setTokenAndResolvedType(param);\n                }\n            }\n        }\n        else {\n            setTokenAndResolvedType(dep);\n        }\n        return meta;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Compile an Angular injectable according to its `Injectable` metadata, and patch the resulting\n     * `ngInjectableDef` onto the injectable type.\n     */\n    function compileInjectable(type, srcMeta) {\n        var def = null;\n        // if NG_INJECTABLE_DEF is already defined on this class then don't overwrite it\n        if (type.hasOwnProperty(NG_INJECTABLE_DEF))\n            return;\n        Object.defineProperty(type, NG_INJECTABLE_DEF, {\n            get: function () {\n                if (def === null) {\n                    // Allow the compilation of a class with a `@Injectable()` decorator without parameters\n                    var meta = srcMeta || { providedIn: null };\n                    var hasAProvider = isUseClassProvider(meta) || isUseFactoryProvider(meta) ||\n                        isUseValueProvider(meta) || isUseExistingProvider(meta);\n                    var compilerMeta = {\n                        name: type.name,\n                        type: type,\n                        typeArgumentCount: 0,\n                        providedIn: meta.providedIn,\n                        ctorDeps: reflectDependencies(type),\n                        userDeps: undefined,\n                    };\n                    if ((isUseClassProvider(meta) || isUseFactoryProvider(meta)) && meta.deps !== undefined) {\n                        compilerMeta.userDeps = convertDependencies(meta.deps);\n                    }\n                    if (!hasAProvider) {\n                        // In the case the user specifies a type provider, treat it as {provide: X, useClass: X}.\n                        // The deps will have been reflected above, causing the factory to create the class by\n                        // calling\n                        // its constructor with injected deps.\n                        compilerMeta.useClass = type;\n                    }\n                    else if (isUseClassProvider(meta)) {\n                        // The user explicitly specified useClass, and may or may not have provided deps.\n                        compilerMeta.useClass = meta.useClass;\n                    }\n                    else if (isUseValueProvider(meta)) {\n                        // The user explicitly specified useValue.\n                        compilerMeta.useValue = meta.useValue;\n                    }\n                    else if (isUseFactoryProvider(meta)) {\n                        // The user explicitly specified useFactory.\n                        compilerMeta.useFactory = meta.useFactory;\n                    }\n                    else if (isUseExistingProvider(meta)) {\n                        // The user explicitly specified useExisting.\n                        compilerMeta.useExisting = meta.useExisting;\n                    }\n                    else {\n                        // Can't happen - either hasAProvider will be false, or one of the providers will be set.\n                        throw new Error(\"Unreachable state.\");\n                    }\n                    def = getCompilerFacade().compileInjectable(angularCoreDiEnv, \"ng:///\" + type.name + \"/ngInjectableDef.js\", compilerMeta);\n                }\n                return def;\n            },\n        });\n    }\n    var USE_VALUE$1 = getClosureSafeProperty({ provide: String, useValue: getClosureSafeProperty });\n    function isUseClassProvider(meta) {\n        return meta.useClass !== undefined;\n    }\n    function isUseValueProvider(meta) {\n        return USE_VALUE$1 in meta;\n    }\n    function isUseFactoryProvider(meta) {\n        return meta.useFactory !== undefined;\n    }\n    function isUseExistingProvider(meta) {\n        return meta.useExisting !== undefined;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var USE_VALUE$2 = getClosureSafeProperty({ provide: String, useValue: getClosureSafeProperty });\n\n    /**\n     * Injectable decorator and metadata.\n     *\n     * @Annotation\n     * @publicApi\n     */\n    var Injectable = makeDecorator('Injectable', undefined, undefined, undefined, function (type, meta) { return SWITCH_COMPILE_INJECTABLE(type, meta); });\n    var SWITCH_COMPILE_INJECTABLE__POST_R3__ = compileInjectable;\n    var SWITCH_COMPILE_INJECTABLE = SWITCH_COMPILE_INJECTABLE__POST_R3__;\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function ngDevModeResetPerfCounters() {\n        var locationString = typeof location !== 'undefined' ? location.toString() : '';\n        var newCounters = {\n            namedConstructors: locationString.indexOf('ngDevMode=namedConstructors') != -1,\n            firstTemplatePass: 0,\n            tNode: 0,\n            tView: 0,\n            rendererCreateTextNode: 0,\n            rendererSetText: 0,\n            rendererCreateElement: 0,\n            rendererAddEventListener: 0,\n            rendererSetAttribute: 0,\n            rendererRemoveAttribute: 0,\n            rendererSetProperty: 0,\n            rendererSetClassName: 0,\n            rendererAddClass: 0,\n            rendererRemoveClass: 0,\n            rendererSetStyle: 0,\n            rendererRemoveStyle: 0,\n            rendererDestroy: 0,\n            rendererDestroyNode: 0,\n            rendererMoveNode: 0,\n            rendererRemoveNode: 0,\n            rendererAppendChild: 0,\n            rendererInsertBefore: 0,\n            rendererCreateComment: 0,\n            styleMap: 0,\n            styleMapCacheMiss: 0,\n            classMap: 0,\n            classMapCacheMiss: 0,\n            stylingProp: 0,\n            stylingPropCacheMiss: 0,\n            stylingApply: 0,\n            stylingApplyCacheMiss: 0,\n        };\n        // Make sure to refer to ngDevMode as ['ngDevMode'] for closure.\n        var allowNgDevModeTrue = locationString.indexOf('ngDevMode=false') === -1;\n        _global['ngDevMode'] = allowNgDevModeTrue && newCounters;\n        return newCounters;\n    }\n    /**\n     * This checks to see if the `ngDevMode` has been set. If yes,\n     * then we honor it, otherwise we default to dev mode with additional checks.\n     *\n     * The idea is that unless we are doing production build where we explicitly\n     * set `ngDevMode == false` we should be helping the developer by providing\n     * as much early warning and errors as possible.\n     *\n     * NOTE: changes to the `ngDevMode` name must be synced with `compiler-cli/src/tooling.ts`.\n     */\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        ngDevModeResetPerfCounters();\n    }\n\n    /** Called when directives inject each other (creating a circular dependency) */\n    function throwCyclicDependencyError(token) {\n        throw new Error(\"Cannot instantiate cyclic dependency! \" + token);\n    }\n    /** Called when there are multiple component selectors that match a given node */\n    function throwMultipleComponentError(tNode) {\n        throw new Error(\"Multiple components match node with tagname \" + tNode.tagName);\n    }\n    /** Throws an ExpressionChangedAfterChecked error if checkNoChanges mode is on. */\n    function throwErrorIfNoChangesMode(creationMode, oldValue, currValue) {\n        var msg = \"ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '\" + oldValue + \"'. Current value: '\" + currValue + \"'.\";\n        if (creationMode) {\n            msg +=\n                \" It seems like the view has been created after its parent and its children have been dirty checked.\" +\n                    \" Has it been created in a change detection hook ?\";\n        }\n        // TODO: include debug context\n        throw new Error(msg);\n    }\n    function throwMixedMultiProviderError() {\n        throw new Error(\"Cannot mix multi providers and regular providers\");\n    }\n    function throwInvalidProviderError(ngModuleType, providers, provider) {\n        var ngModuleDetail = '';\n        if (ngModuleType && providers) {\n            var providerDetail = providers.map(function (v) { return v == provider ? '?' + provider + '?' : '...'; });\n            ngModuleDetail =\n                \" - only instances of Provider and Type are allowed, got: [\" + providerDetail.join(', ') + \"]\";\n        }\n        throw new Error(\"Invalid provider for the NgModule '\" + stringify(ngModuleType) + \"'\" + ngModuleDetail);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * An internal token whose presence in an injector indicates that the injector should treat itself\n     * as a root scoped injector when processing requests for unknown tokens which may indicate\n     * they are provided in the root scope.\n     */\n    var APP_ROOT = new InjectionToken('The presence of this token marks an injector as being the root injector.');\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Marker which indicates that a value has not yet been created from the factory function.\n     */\n    var NOT_YET = {};\n    /**\n     * Marker which indicates that the factory function for a token is in the process of being called.\n     *\n     * If the injector is asked to inject a token with its value set to CIRCULAR, that indicates\n     * injection of a dependency has recursively attempted to inject the original token, and there is\n     * a circular dependency among the providers.\n     */\n    var CIRCULAR = {};\n    var EMPTY_ARRAY = [];\n    /**\n     * A lazily initialized NullInjector.\n     */\n    var NULL_INJECTOR = undefined;\n    function getNullInjector() {\n        if (NULL_INJECTOR === undefined) {\n            NULL_INJECTOR = new NullInjector();\n        }\n        return NULL_INJECTOR;\n    }\n    /**\n     * Create a new `Injector` which is configured using a `defType` of `InjectorType<any>`s.\n     *\n     * @publicApi\n     */\n    function createInjector(defType, parent, additionalProviders, name) {\n        if (parent === void 0) { parent = null; }\n        if (additionalProviders === void 0) { additionalProviders = null; }\n        parent = parent || getNullInjector();\n        return new R3Injector(defType, additionalProviders, parent, name);\n    }\n    var R3Injector = /** @class */ (function () {\n        function R3Injector(def, additionalProviders, parent, source) {\n            var _this = this;\n            if (source === void 0) { source = null; }\n            this.parent = parent;\n            /**\n             * Map of tokens to records which contain the instances of those tokens.\n             */\n            this.records = new Map();\n            /**\n             * The transitive set of `InjectorType`s which define this injector.\n             */\n            this.injectorDefTypes = new Set();\n            /**\n             * Set of values instantiated by this injector which contain `ngOnDestroy` lifecycle hooks.\n             */\n            this.onDestroy = new Set();\n            this._destroyed = false;\n            // Start off by creating Records for every provider declared in every InjectorType\n            // included transitively in `def`.\n            var dedupStack = [];\n            deepForEach([def], function (injectorDef) { return _this.processInjectorType(injectorDef, [], dedupStack); });\n            additionalProviders && deepForEach(additionalProviders, function (provider) { return _this.processProvider(provider, def, additionalProviders); });\n            // Make sure the INJECTOR token provides this injector.\n            this.records.set(INJECTOR, makeRecord(undefined, this));\n            // Detect whether this injector has the APP_ROOT_SCOPE token and thus should provide\n            // any injectable scoped to APP_ROOT_SCOPE.\n            this.isRootInjector = this.records.has(APP_ROOT);\n            // Eagerly instantiate the InjectorType classes themselves.\n            this.injectorDefTypes.forEach(function (defType) { return _this.get(defType); });\n            // Source name, used for debugging\n            this.source = source || (typeof def === 'object' ? null : stringify(def));\n        }\n        Object.defineProperty(R3Injector.prototype, \"destroyed\", {\n            /**\n             * Flag indicating that this injector was previously destroyed.\n             */\n            get: function () { return this._destroyed; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Destroy the injector and release references to every instance or provider associated with it.\n         *\n         * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a\n         * hook was found.\n         */\n        R3Injector.prototype.destroy = function () {\n            this.assertNotDestroyed();\n            // Set destroyed = true first, in case lifecycle hooks re-enter destroy().\n            this._destroyed = true;\n            try {\n                // Call all the lifecycle hooks.\n                this.onDestroy.forEach(function (service) { return service.ngOnDestroy(); });\n            }\n            finally {\n                // Release all references.\n                this.records.clear();\n                this.onDestroy.clear();\n                this.injectorDefTypes.clear();\n            }\n        };\n        R3Injector.prototype.get = function (token, notFoundValue, flags) {\n            if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }\n            if (flags === void 0) { flags = exports.InjectFlags.Default; }\n            this.assertNotDestroyed();\n            // Set the injection context.\n            var previousInjector = setCurrentInjector(this);\n            try {\n                // Check for the SkipSelf flag.\n                if (!(flags & exports.InjectFlags.SkipSelf)) {\n                    // SkipSelf isn't set, check if the record belongs to this injector.\n                    var record = this.records.get(token);\n                    if (record === undefined) {\n                        // No record, but maybe the token is scoped to this injector. Look for an ngInjectableDef\n                        // with a scope matching this injector.\n                        var def = couldBeInjectableType(token) && getInjectableDef(token);\n                        if (def && this.injectableDefInScope(def)) {\n                            // Found an ngInjectableDef and it's scoped to this injector. Pretend as if it was here\n                            // all along.\n                            record = makeRecord(injectableDefOrInjectorDefFactory(token), NOT_YET);\n                            this.records.set(token, record);\n                        }\n                    }\n                    // If a record was found, get the instance for it and return it.\n                    if (record !== undefined) {\n                        return this.hydrate(token, record);\n                    }\n                }\n                // Select the next injector based on the Self flag - if self is set, the next injector is\n                // the NullInjector, otherwise it's the parent.\n                var nextInjector = !(flags & exports.InjectFlags.Self) ? this.parent : getNullInjector();\n                return nextInjector.get(token, flags & exports.InjectFlags.Optional ? null : notFoundValue);\n            }\n            catch (e) {\n                if (e.name === 'NullInjectorError') {\n                    var path = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];\n                    path.unshift(stringify(token));\n                    if (previousInjector) {\n                        // We still have a parent injector, keep throwing\n                        throw e;\n                    }\n                    else {\n                        // Format & throw the final error message when we don't have any previous injector\n                        return catchInjectorError(e, token, 'R3InjectorError', this.source);\n                    }\n                }\n                else {\n                    throw e;\n                }\n            }\n            finally {\n                // Lastly, clean up the state by restoring the previous injector.\n                setCurrentInjector(previousInjector);\n            }\n        };\n        R3Injector.prototype.toString = function () {\n            var tokens = [], records = this.records;\n            records.forEach(function (v, token) { return tokens.push(stringify(token)); });\n            return \"R3Injector[\" + tokens.join(', ') + \"]\";\n        };\n        R3Injector.prototype.assertNotDestroyed = function () {\n            if (this._destroyed) {\n                throw new Error('Injector has already been destroyed.');\n            }\n        };\n        /**\n         * Add an `InjectorType` or `InjectorTypeWithProviders` and all of its transitive providers\n         * to this injector.\n         *\n         * If an `InjectorTypeWithProviders` that declares providers besides the type is specified,\n         * the function will return \"true\" to indicate that the providers of the type definition need\n         * to be processed. This allows us to process providers of injector types after all imports of\n         * an injector definition are processed. (following View Engine semantics: see FW-1349)\n         */\n        R3Injector.prototype.processInjectorType = function (defOrWrappedDef, parents, dedupStack) {\n            var _this = this;\n            defOrWrappedDef = resolveForwardRef(defOrWrappedDef);\n            if (!defOrWrappedDef)\n                return false;\n            // Either the defOrWrappedDef is an InjectorType (with ngInjectorDef) or an\n            // InjectorDefTypeWithProviders (aka ModuleWithProviders). Detecting either is a megamorphic\n            // read, so care is taken to only do the read once.\n            // First attempt to read the ngInjectorDef.\n            var def = getInjectorDef(defOrWrappedDef);\n            // If that's not present, then attempt to read ngModule from the InjectorDefTypeWithProviders.\n            var ngModule = (def == null) && defOrWrappedDef.ngModule || undefined;\n            // Determine the InjectorType. In the case where `defOrWrappedDef` is an `InjectorType`,\n            // then this is easy. In the case of an InjectorDefTypeWithProviders, then the definition type\n            // is the `ngModule`.\n            var defType = (ngModule === undefined) ? defOrWrappedDef : ngModule;\n            // Check for circular dependencies.\n            if (ngDevMode && parents.indexOf(defType) !== -1) {\n                var defName = stringify(defType);\n                throw new Error(\"Circular dependency in DI detected for type \" + defName + \". Dependency path: \" + parents.map(function (defType) { return stringify(defType); }).join(' > ') + \" > \" + defName + \".\");\n            }\n            // Check for multiple imports of the same module\n            var isDuplicate = dedupStack.indexOf(defType) !== -1;\n            // Finally, if defOrWrappedType was an `InjectorDefTypeWithProviders`, then the actual\n            // `InjectorDef` is on its `ngModule`.\n            if (ngModule !== undefined) {\n                def = getInjectorDef(ngModule);\n            }\n            // If no definition was found, it might be from exports. Remove it.\n            if (def == null) {\n                return false;\n            }\n            // Track the InjectorType and add a provider for it.\n            this.injectorDefTypes.add(defType);\n            this.records.set(defType, makeRecord(def.factory, NOT_YET));\n            // Add providers in the same way that @NgModule resolution did:\n            // First, include providers from any imports.\n            if (def.imports != null && !isDuplicate) {\n                // Before processing defType's imports, add it to the set of parents. This way, if it ends\n                // up deeply importing itself, this can be detected.\n                ngDevMode && parents.push(defType);\n                // Add it to the set of dedups. This way we can detect multiple imports of the same module\n                dedupStack.push(defType);\n                var importTypesWithProviders_1;\n                try {\n                    deepForEach(def.imports, function (imported) {\n                        if (_this.processInjectorType(imported, parents, dedupStack)) {\n                            if (importTypesWithProviders_1 === undefined)\n                                importTypesWithProviders_1 = [];\n                            // If the processed import is an injector type with providers, we store it in the\n                            // list of import types with providers, so that we can process those afterwards.\n                            importTypesWithProviders_1.push(imported);\n                        }\n                    });\n                }\n                finally {\n                    // Remove it from the parents set when finished.\n                    ngDevMode && parents.pop();\n                }\n                // Imports which are declared with providers (TypeWithProviders) need to be processed\n                // after all imported modules are processed. This is similar to how View Engine\n                // processes/merges module imports in the metadata resolver. See: FW-1349.\n                if (importTypesWithProviders_1 !== undefined) {\n                    var _loop_1 = function (i) {\n                        var _a = importTypesWithProviders_1[i], ngModule_1 = _a.ngModule, providers = _a.providers;\n                        deepForEach(providers, function (provider) { return _this.processProvider(provider, ngModule_1, providers || EMPTY_ARRAY); });\n                    };\n                    for (var i = 0; i < importTypesWithProviders_1.length; i++) {\n                        _loop_1(i);\n                    }\n                }\n            }\n            // Next, include providers listed on the definition itself.\n            var defProviders = def.providers;\n            if (defProviders != null && !isDuplicate) {\n                var injectorType_1 = defOrWrappedDef;\n                deepForEach(defProviders, function (provider) { return _this.processProvider(provider, injectorType_1, defProviders); });\n            }\n            return (ngModule !== undefined &&\n                defOrWrappedDef.providers !== undefined);\n        };\n        /**\n         * Process a `SingleProvider` and add it.\n         */\n        R3Injector.prototype.processProvider = function (provider, ngModuleType, providers) {\n            // Determine the token from the provider. Either it's its own token, or has a {provide: ...}\n            // property.\n            provider = resolveForwardRef(provider);\n            var token = isTypeProvider(provider) ? provider : resolveForwardRef(provider && provider.provide);\n            // Construct a `Record` for the provider.\n            var record = providerToRecord(provider, ngModuleType, providers);\n            if (!isTypeProvider(provider) && provider.multi === true) {\n                // If the provider indicates that it's a multi-provider, process it specially.\n                // First check whether it's been defined already.\n                var multiRecord_1 = this.records.get(token);\n                if (multiRecord_1) {\n                    // It has. Throw a nice error if\n                    if (multiRecord_1.multi === undefined) {\n                        throwMixedMultiProviderError();\n                    }\n                }\n                else {\n                    multiRecord_1 = makeRecord(undefined, NOT_YET, true);\n                    multiRecord_1.factory = function () { return injectArgs(multiRecord_1.multi); };\n                    this.records.set(token, multiRecord_1);\n                }\n                token = provider;\n                multiRecord_1.multi.push(provider);\n            }\n            else {\n                var existing = this.records.get(token);\n                if (existing && existing.multi !== undefined) {\n                    throwMixedMultiProviderError();\n                }\n            }\n            this.records.set(token, record);\n        };\n        R3Injector.prototype.hydrate = function (token, record) {\n            if (record.value === CIRCULAR) {\n                throwCyclicDependencyError(stringify(token));\n            }\n            else if (record.value === NOT_YET) {\n                record.value = CIRCULAR;\n                record.value = record.factory();\n            }\n            if (typeof record.value === 'object' && record.value && hasOnDestroy(record.value)) {\n                this.onDestroy.add(record.value);\n            }\n            return record.value;\n        };\n        R3Injector.prototype.injectableDefInScope = function (def) {\n            if (!def.providedIn) {\n                return false;\n            }\n            else if (typeof def.providedIn === 'string') {\n                return def.providedIn === 'any' || (def.providedIn === 'root' && this.isRootInjector);\n            }\n            else {\n                return this.injectorDefTypes.has(def.providedIn);\n            }\n        };\n        return R3Injector;\n    }());\n    function injectableDefOrInjectorDefFactory(token) {\n        // Most tokens will have an ngInjectableDef directly on them, which specifies a factory directly.\n        var injectableDef = getInjectableDef(token);\n        if (injectableDef !== null) {\n            return injectableDef.factory;\n        }\n        // If the token is an NgModule, it's also injectable but the factory is on its ngInjectorDef.\n        var injectorDef = getInjectorDef(token);\n        if (injectorDef !== null) {\n            return injectorDef.factory;\n        }\n        // InjectionTokens should have an ngInjectableDef and thus should be handled above.\n        // If it's missing that, it's an error.\n        if (token instanceof InjectionToken) {\n            throw new Error(\"Token \" + stringify(token) + \" is missing an ngInjectableDef definition.\");\n        }\n        // Undecorated types can sometimes be created if they have no constructor arguments.\n        if (token instanceof Function) {\n            return getUndecoratedInjectableFactory(token);\n        }\n        // There was no way to resolve a factory for this token.\n        throw new Error('unreachable');\n    }\n    function getUndecoratedInjectableFactory(token) {\n        // If the token has parameters then it has dependencies that we cannot resolve implicitly.\n        var paramLength = token.length;\n        if (paramLength > 0) {\n            var args = new Array(paramLength).fill('?');\n            throw new Error(\"Can't resolve all parameters for \" + stringify(token) + \": (\" + args.join(', ') + \").\");\n        }\n        // The constructor function appears to have no parameters.\n        // This might be because it inherits from a super-class. In which case, use an ngInjectableDef\n        // from an ancestor if there is one.\n        // Otherwise this really is a simple class with no dependencies, so return a factory that\n        // just instantiates the zero-arg constructor.\n        var inheritedInjectableDef = getInheritedInjectableDef(token);\n        if (inheritedInjectableDef !== null) {\n            return function () { return inheritedInjectableDef.factory(token); };\n        }\n        else {\n            return function () { return new token(); };\n        }\n    }\n    function providerToRecord(provider, ngModuleType, providers) {\n        var factory = providerToFactory(provider, ngModuleType, providers);\n        if (isValueProvider(provider)) {\n            return makeRecord(undefined, provider.useValue);\n        }\n        else {\n            return makeRecord(factory, NOT_YET);\n        }\n    }\n    /**\n     * Converts a `SingleProvider` into a factory function.\n     *\n     * @param provider provider to convert to factory\n     */\n    function providerToFactory(provider, ngModuleType, providers) {\n        var factory = undefined;\n        if (isTypeProvider(provider)) {\n            return injectableDefOrInjectorDefFactory(resolveForwardRef(provider));\n        }\n        else {\n            if (isValueProvider(provider)) {\n                factory = function () { return resolveForwardRef(provider.useValue); };\n            }\n            else if (isExistingProvider(provider)) {\n                factory = function () { return ɵɵinject(resolveForwardRef(provider.useExisting)); };\n            }\n            else if (isFactoryProvider(provider)) {\n                factory = function () { return provider.useFactory.apply(provider, __spread(injectArgs(provider.deps || []))); };\n            }\n            else {\n                var classRef_1 = resolveForwardRef(provider &&\n                    (provider.useClass || provider.provide));\n                if (!classRef_1) {\n                    throwInvalidProviderError(ngModuleType, providers, provider);\n                }\n                if (hasDeps(provider)) {\n                    factory = function () { return new ((classRef_1).bind.apply((classRef_1), __spread([void 0], injectArgs(provider.deps))))(); };\n                }\n                else {\n                    return injectableDefOrInjectorDefFactory(classRef_1);\n                }\n            }\n        }\n        return factory;\n    }\n    function makeRecord(factory, value, multi) {\n        if (multi === void 0) { multi = false; }\n        return {\n            factory: factory,\n            value: value,\n            multi: multi ? [] : undefined,\n        };\n    }\n    function deepForEach(input, fn) {\n        input.forEach(function (value) { return Array.isArray(value) ? deepForEach(value, fn) : fn(value); });\n    }\n    function isValueProvider(value) {\n        return value !== null && typeof value == 'object' && USE_VALUE in value;\n    }\n    function isExistingProvider(value) {\n        return !!(value && value.useExisting);\n    }\n    function isFactoryProvider(value) {\n        return !!(value && value.useFactory);\n    }\n    function isTypeProvider(value) {\n        return typeof value === 'function';\n    }\n    function isClassProvider(value) {\n        return !!value.useClass;\n    }\n    function hasDeps(value) {\n        return !!value.deps;\n    }\n    function hasOnDestroy(value) {\n        return value !== null && typeof value === 'object' &&\n            typeof value.ngOnDestroy === 'function';\n    }\n    function couldBeInjectableType(value) {\n        return (typeof value === 'function') ||\n            (typeof value === 'object' && value instanceof InjectionToken);\n    }\n\n    function INJECTOR_IMPL__POST_R3__(providers, parent, name) {\n        return createInjector({ name: name }, parent, providers, name);\n    }\n    var INJECTOR_IMPL = INJECTOR_IMPL__POST_R3__;\n    /**\n     * Concrete injectors implement this interface.\n     *\n     * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example core/di/ts/injector_spec.ts region='Injector'}\n     *\n     * `Injector` returns itself when given `Injector` as a token:\n     *\n     * {@example core/di/ts/injector_spec.ts region='injectInjector'}\n     *\n     * @publicApi\n     */\n    var Injector = /** @class */ (function () {\n        function Injector() {\n        }\n        /**\n         * Create a new Injector which is configure using `StaticProvider`s.\n         *\n         * @usageNotes\n         * ### Example\n         *\n         * {@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n         */\n        Injector.create = function (options, parent) {\n            if (Array.isArray(options)) {\n                return INJECTOR_IMPL(options, parent, '');\n            }\n            else {\n                return INJECTOR_IMPL(options.providers, options.parent, options.name || '');\n            }\n        };\n        Injector.THROW_IF_NOT_FOUND = THROW_IF_NOT_FOUND;\n        Injector.NULL = new NullInjector();\n        /** @nocollapse */\n        Injector.ngInjectableDef = ɵɵdefineInjectable({\n            token: Injector,\n            providedIn: 'any',\n            factory: function () { return ɵɵinject(INJECTOR); },\n        });\n        /**\n         * @internal\n         * @nocollapse\n         */\n        Injector.__NG_ELEMENT_ID__ = -1;\n        return Injector;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var ERROR_DEBUG_CONTEXT = 'ngDebugContext';\n    var ERROR_ORIGINAL_ERROR = 'ngOriginalError';\n    var ERROR_LOGGER = 'ngErrorLogger';\n    function wrappedError(message, originalError) {\n        var msg = message + \" caused by: \" + (originalError instanceof Error ? originalError.message : originalError);\n        var error = Error(msg);\n        error[ERROR_ORIGINAL_ERROR] = originalError;\n        return error;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function findFirstClosedCycle(keys) {\n        var res = [];\n        for (var i = 0; i < keys.length; ++i) {\n            if (res.indexOf(keys[i]) > -1) {\n                res.push(keys[i]);\n                return res;\n            }\n            res.push(keys[i]);\n        }\n        return res;\n    }\n    function constructResolvingPath(keys) {\n        if (keys.length > 1) {\n            var reversed = findFirstClosedCycle(keys.slice().reverse());\n            var tokenStrs = reversed.map(function (k) { return stringify(k.token); });\n            return ' (' + tokenStrs.join(' -> ') + ')';\n        }\n        return '';\n    }\n    function injectionError(injector, key, constructResolvingMessage, originalError) {\n        var keys = [key];\n        var errMsg = constructResolvingMessage(keys);\n        var error = (originalError ? wrappedError(errMsg, originalError) : Error(errMsg));\n        error.addKey = addKey;\n        error.keys = keys;\n        error.injectors = [injector];\n        error.constructResolvingMessage = constructResolvingMessage;\n        error[ERROR_ORIGINAL_ERROR] = originalError;\n        return error;\n    }\n    function addKey(injector, key) {\n        this.injectors.push(injector);\n        this.keys.push(key);\n        // Note: This updated message won't be reflected in the `.stack` property\n        this.message = this.constructResolvingMessage(this.keys);\n    }\n    /**\n     * Thrown when trying to retrieve a dependency by key from {@link Injector}, but the\n     * {@link Injector} does not have a {@link Provider} for the given key.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * class A {\n     *   constructor(b:B) {}\n     * }\n     *\n     * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n     * ```\n     */\n    function noProviderError(injector, key) {\n        return injectionError(injector, key, function (keys) {\n            var first = stringify(keys[0].token);\n            return \"No provider for \" + first + \"!\" + constructResolvingPath(keys);\n        });\n    }\n    /**\n     * Thrown when dependencies form a cycle.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * var injector = Injector.resolveAndCreate([\n     *   {provide: \"one\", useFactory: (two) => \"two\", deps: [[new Inject(\"two\")]]},\n     *   {provide: \"two\", useFactory: (one) => \"one\", deps: [[new Inject(\"one\")]]}\n     * ]);\n     *\n     * expect(() => injector.get(\"one\")).toThrowError();\n     * ```\n     *\n     * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.\n     */\n    function cyclicDependencyError(injector, key) {\n        return injectionError(injector, key, function (keys) {\n            return \"Cannot instantiate cyclic dependency!\" + constructResolvingPath(keys);\n        });\n    }\n    /**\n     * Thrown when a constructing type returns with an Error.\n     *\n     * The `InstantiationError` class contains the original error plus the dependency graph which caused\n     * this object to be instantiated.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * class A {\n     *   constructor() {\n     *     throw new Error('message');\n     *   }\n     * }\n     *\n     * var injector = Injector.resolveAndCreate([A]);\n\n     * try {\n     *   injector.get(A);\n     * } catch (e) {\n     *   expect(e instanceof InstantiationError).toBe(true);\n     *   expect(e.originalException.message).toEqual(\"message\");\n     *   expect(e.originalStack).toBeDefined();\n     * }\n     * ```\n     */\n    function instantiationError(injector, originalException, originalStack, key) {\n        return injectionError(injector, key, function (keys) {\n            var first = stringify(keys[0].token);\n            return originalException.message + \": Error during instantiation of \" + first + \"!\" + constructResolvingPath(keys) + \".\";\n        }, originalException);\n    }\n    /**\n     * Thrown when an object other then {@link Provider} (or `Type`) is passed to {@link Injector}\n     * creation.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * expect(() => Injector.resolveAndCreate([\"not a type\"])).toThrowError();\n     * ```\n     */\n    function invalidProviderError(provider) {\n        return Error(\"Invalid provider - only instances of Provider and Type are allowed, got: \" + provider);\n    }\n    /**\n     * Thrown when the class has no annotation information.\n     *\n     * Lack of annotation information prevents the {@link Injector} from determining which dependencies\n     * need to be injected into the constructor.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * class A {\n     *   constructor(b) {}\n     * }\n     *\n     * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n     * ```\n     *\n     * This error is also thrown when the class not marked with {@link Injectable} has parameter types.\n     *\n     * ```typescript\n     * class B {}\n     *\n     * class A {\n     *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.\n     * }\n     *\n     * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();\n     * ```\n     *\n     */\n    function noAnnotationError(typeOrFunc, params) {\n        var signature = [];\n        for (var i = 0, ii = params.length; i < ii; i++) {\n            var parameter = params[i];\n            if (!parameter || parameter.length == 0) {\n                signature.push('?');\n            }\n            else {\n                signature.push(parameter.map(stringify).join(' '));\n            }\n        }\n        return Error('Cannot resolve all parameters for \\'' + stringify(typeOrFunc) + '\\'(' +\n            signature.join(', ') + '). ' +\n            'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \\'' +\n            stringify(typeOrFunc) + '\\' is decorated with Injectable.');\n    }\n    /**\n     * Thrown when getting an object by index.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * class A {}\n     *\n     * var injector = Injector.resolveAndCreate([A]);\n     *\n     * expect(() => injector.getAt(100)).toThrowError();\n     * ```\n     *\n     */\n    function outOfBoundsError(index) {\n        return Error(\"Index \" + index + \" is out-of-bounds.\");\n    }\n    // TODO: add a working example after alpha38 is released\n    /**\n     * Thrown when a multi provider and a regular provider are bound to the same token.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * expect(() => Injector.resolveAndCreate([\n     *   { provide: \"Strings\", useValue: \"string1\", multi: true},\n     *   { provide: \"Strings\", useValue: \"string2\", multi: false}\n     * ])).toThrowError();\n     * ```\n     */\n    function mixingMultiProvidersWithRegularProvidersError(provider1, provider2) {\n        return Error(\"Cannot mix multi providers and regular providers, got: \" + provider1 + \" \" + provider2);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A unique object used for retrieving items from the {@link ReflectiveInjector}.\n     *\n     * Keys have:\n     * - a system-wide unique `id`.\n     * - a `token`.\n     *\n     * `Key` is used internally by {@link ReflectiveInjector} because its system-wide unique `id` allows\n     * the\n     * injector to store created objects in a more efficient way.\n     *\n     * `Key` should not be created directly. {@link ReflectiveInjector} creates keys automatically when\n     * resolving\n     * providers.\n     *\n     * @deprecated No replacement\n     * @publicApi\n     */\n    var ReflectiveKey = /** @class */ (function () {\n        /**\n         * Private\n         */\n        function ReflectiveKey(token, id) {\n            this.token = token;\n            this.id = id;\n            if (!token) {\n                throw new Error('Token must be defined!');\n            }\n            this.displayName = stringify(this.token);\n        }\n        /**\n         * Retrieves a `Key` for a token.\n         */\n        ReflectiveKey.get = function (token) {\n            return _globalKeyRegistry.get(resolveForwardRef(token));\n        };\n        Object.defineProperty(ReflectiveKey, \"numberOfKeys\", {\n            /**\n             * @returns the number of keys registered in the system.\n             */\n            get: function () { return _globalKeyRegistry.numberOfKeys; },\n            enumerable: true,\n            configurable: true\n        });\n        return ReflectiveKey;\n    }());\n    var KeyRegistry = /** @class */ (function () {\n        function KeyRegistry() {\n            this._allKeys = new Map();\n        }\n        KeyRegistry.prototype.get = function (token) {\n            if (token instanceof ReflectiveKey)\n                return token;\n            if (this._allKeys.has(token)) {\n                return this._allKeys.get(token);\n            }\n            var newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);\n            this._allKeys.set(token, newKey);\n            return newKey;\n        };\n        Object.defineProperty(KeyRegistry.prototype, \"numberOfKeys\", {\n            get: function () { return this._allKeys.size; },\n            enumerable: true,\n            configurable: true\n        });\n        return KeyRegistry;\n    }());\n    var _globalKeyRegistry = new KeyRegistry();\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Provides access to reflection data about symbols. Used internally by Angular\n     * to power dependency injection and compilation.\n     */\n    var Reflector = /** @class */ (function () {\n        function Reflector(reflectionCapabilities) {\n            this.reflectionCapabilities = reflectionCapabilities;\n        }\n        Reflector.prototype.updateCapabilities = function (caps) { this.reflectionCapabilities = caps; };\n        Reflector.prototype.factory = function (type) { return this.reflectionCapabilities.factory(type); };\n        Reflector.prototype.parameters = function (typeOrFunc) {\n            return this.reflectionCapabilities.parameters(typeOrFunc);\n        };\n        Reflector.prototype.annotations = function (typeOrFunc) {\n            return this.reflectionCapabilities.annotations(typeOrFunc);\n        };\n        Reflector.prototype.propMetadata = function (typeOrFunc) {\n            return this.reflectionCapabilities.propMetadata(typeOrFunc);\n        };\n        Reflector.prototype.hasLifecycleHook = function (type, lcProperty) {\n            return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);\n        };\n        Reflector.prototype.getter = function (name) { return this.reflectionCapabilities.getter(name); };\n        Reflector.prototype.setter = function (name) { return this.reflectionCapabilities.setter(name); };\n        Reflector.prototype.method = function (name) { return this.reflectionCapabilities.method(name); };\n        Reflector.prototype.importUri = function (type) { return this.reflectionCapabilities.importUri(type); };\n        Reflector.prototype.resourceUri = function (type) { return this.reflectionCapabilities.resourceUri(type); };\n        Reflector.prototype.resolveIdentifier = function (name, moduleUrl, members, runtime) {\n            return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, members, runtime);\n        };\n        Reflector.prototype.resolveEnum = function (identifier, name) {\n            return this.reflectionCapabilities.resolveEnum(identifier, name);\n        };\n        return Reflector;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * The {@link Reflector} used internally in Angular to access metadata\n     * about symbols.\n     */\n    var reflector = new Reflector(new ReflectionCapabilities());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * `Dependency` is used by the framework to extend DI.\n     * This is internal to Angular and should not be used directly.\n     */\n    var ReflectiveDependency = /** @class */ (function () {\n        function ReflectiveDependency(key, optional, visibility) {\n            this.key = key;\n            this.optional = optional;\n            this.visibility = visibility;\n        }\n        ReflectiveDependency.fromKey = function (key) {\n            return new ReflectiveDependency(key, false, null);\n        };\n        return ReflectiveDependency;\n    }());\n    var _EMPTY_LIST = [];\n    var ResolvedReflectiveProvider_ = /** @class */ (function () {\n        function ResolvedReflectiveProvider_(key, resolvedFactories, multiProvider) {\n            this.key = key;\n            this.resolvedFactories = resolvedFactories;\n            this.multiProvider = multiProvider;\n            this.resolvedFactory = this.resolvedFactories[0];\n        }\n        return ResolvedReflectiveProvider_;\n    }());\n    /**\n     * An internal resolved representation of a factory function created by resolving `Provider`.\n     * @publicApi\n     */\n    var ResolvedReflectiveFactory = /** @class */ (function () {\n        function ResolvedReflectiveFactory(\n        /**\n         * Factory function which can return an instance of an object represented by a key.\n         */\n        factory, \n        /**\n         * Arguments (dependencies) to the `factory` function.\n         */\n        dependencies) {\n            this.factory = factory;\n            this.dependencies = dependencies;\n        }\n        return ResolvedReflectiveFactory;\n    }());\n    /**\n     * Resolve a single provider.\n     */\n    function resolveReflectiveFactory(provider) {\n        var factoryFn;\n        var resolvedDeps;\n        if (provider.useClass) {\n            var useClass = resolveForwardRef(provider.useClass);\n            factoryFn = reflector.factory(useClass);\n            resolvedDeps = _dependenciesFor(useClass);\n        }\n        else if (provider.useExisting) {\n            factoryFn = function (aliasInstance) { return aliasInstance; };\n            resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];\n        }\n        else if (provider.useFactory) {\n            factoryFn = provider.useFactory;\n            resolvedDeps = constructDependencies(provider.useFactory, provider.deps);\n        }\n        else {\n            factoryFn = function () { return provider.useValue; };\n            resolvedDeps = _EMPTY_LIST;\n        }\n        return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);\n    }\n    /**\n     * Converts the `Provider` into `ResolvedProvider`.\n     *\n     * `Injector` internally only uses `ResolvedProvider`, `Provider` contains convenience provider\n     * syntax.\n     */\n    function resolveReflectiveProvider(provider) {\n        return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi || false);\n    }\n    /**\n     * Resolve a list of Providers.\n     */\n    function resolveReflectiveProviders(providers) {\n        var normalized = _normalizeProviders(providers, []);\n        var resolved = normalized.map(resolveReflectiveProvider);\n        var resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());\n        return Array.from(resolvedProviderMap.values());\n    }\n    /**\n     * Merges a list of ResolvedProviders into a list where each key is contained exactly once and\n     * multi providers have been merged.\n     */\n    function mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {\n        for (var i = 0; i < providers.length; i++) {\n            var provider = providers[i];\n            var existing = normalizedProvidersMap.get(provider.key.id);\n            if (existing) {\n                if (provider.multiProvider !== existing.multiProvider) {\n                    throw mixingMultiProvidersWithRegularProvidersError(existing, provider);\n                }\n                if (provider.multiProvider) {\n                    for (var j = 0; j < provider.resolvedFactories.length; j++) {\n                        existing.resolvedFactories.push(provider.resolvedFactories[j]);\n                    }\n                }\n                else {\n                    normalizedProvidersMap.set(provider.key.id, provider);\n                }\n            }\n            else {\n                var resolvedProvider = void 0;\n                if (provider.multiProvider) {\n                    resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);\n                }\n                else {\n                    resolvedProvider = provider;\n                }\n                normalizedProvidersMap.set(provider.key.id, resolvedProvider);\n            }\n        }\n        return normalizedProvidersMap;\n    }\n    function _normalizeProviders(providers, res) {\n        providers.forEach(function (b) {\n            if (b instanceof Type) {\n                res.push({ provide: b, useClass: b });\n            }\n            else if (b && typeof b == 'object' && b.provide !== undefined) {\n                res.push(b);\n            }\n            else if (b instanceof Array) {\n                _normalizeProviders(b, res);\n            }\n            else {\n                throw invalidProviderError(b);\n            }\n        });\n        return res;\n    }\n    function constructDependencies(typeOrFunc, dependencies) {\n        if (!dependencies) {\n            return _dependenciesFor(typeOrFunc);\n        }\n        else {\n            var params_1 = dependencies.map(function (t) { return [t]; });\n            return dependencies.map(function (t) { return _extractToken(typeOrFunc, t, params_1); });\n        }\n    }\n    function _dependenciesFor(typeOrFunc) {\n        var params = reflector.parameters(typeOrFunc);\n        if (!params)\n            return [];\n        if (params.some(function (p) { return p == null; })) {\n            throw noAnnotationError(typeOrFunc, params);\n        }\n        return params.map(function (p) { return _extractToken(typeOrFunc, p, params); });\n    }\n    function _extractToken(typeOrFunc, metadata, params) {\n        var token = null;\n        var optional = false;\n        if (!Array.isArray(metadata)) {\n            if (metadata instanceof Inject) {\n                return _createDependency(metadata.token, optional, null);\n            }\n            else {\n                return _createDependency(metadata, optional, null);\n            }\n        }\n        var visibility = null;\n        for (var i = 0; i < metadata.length; ++i) {\n            var paramMetadata = metadata[i];\n            if (paramMetadata instanceof Type) {\n                token = paramMetadata;\n            }\n            else if (paramMetadata instanceof Inject) {\n                token = paramMetadata.token;\n            }\n            else if (paramMetadata instanceof Optional) {\n                optional = true;\n            }\n            else if (paramMetadata instanceof Self || paramMetadata instanceof SkipSelf) {\n                visibility = paramMetadata;\n            }\n            else if (paramMetadata instanceof InjectionToken) {\n                token = paramMetadata;\n            }\n        }\n        token = resolveForwardRef(token);\n        if (token != null) {\n            return _createDependency(token, optional, visibility);\n        }\n        else {\n            throw noAnnotationError(typeOrFunc, params);\n        }\n    }\n    function _createDependency(token, optional, visibility) {\n        return new ReflectiveDependency(ReflectiveKey.get(token), optional, visibility);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // Threshold for the dynamic version\n    var UNDEFINED = new Object();\n    /**\n     * A ReflectiveDependency injection container used for instantiating objects and resolving\n     * dependencies.\n     *\n     * An `Injector` is a replacement for a `new` operator, which can automatically resolve the\n     * constructor dependencies.\n     *\n     * In typical use, application code asks for the dependencies in the constructor and they are\n     * resolved by the `Injector`.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example creates an `Injector` configured to create `Engine` and `Car`.\n     *\n     * ```typescript\n     * @Injectable()\n     * class Engine {\n     * }\n     *\n     * @Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n     * var car = injector.get(Car);\n     * expect(car instanceof Car).toBe(true);\n     * expect(car.engine instanceof Engine).toBe(true);\n     * ```\n     *\n     * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`\n     * resolve all of the object's dependencies automatically.\n     *\n     * @deprecated from v5 - slow and brings in a lot of code, Use `Injector.create` instead.\n     * @publicApi\n     */\n    var ReflectiveInjector = /** @class */ (function () {\n        function ReflectiveInjector() {\n        }\n        /**\n         * Turns an array of provider definitions into an array of resolved providers.\n         *\n         * A resolution is a process of flattening multiple nested arrays and converting individual\n         * providers into an array of `ResolvedReflectiveProvider`s.\n         *\n         * @usageNotes\n         * ### Example\n         *\n         * ```typescript\n         * @Injectable()\n         * class Engine {\n         * }\n         *\n         * @Injectable()\n         * class Car {\n         *   constructor(public engine:Engine) {}\n         * }\n         *\n         * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\n         *\n         * expect(providers.length).toEqual(2);\n         *\n         * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);\n         * expect(providers[0].key.displayName).toBe(\"Car\");\n         * expect(providers[0].dependencies.length).toEqual(1);\n         * expect(providers[0].factory).toBeDefined();\n         *\n         * expect(providers[1].key.displayName).toBe(\"Engine\");\n         * });\n         * ```\n         *\n         */\n        ReflectiveInjector.resolve = function (providers) {\n            return resolveReflectiveProviders(providers);\n        };\n        /**\n         * Resolves an array of providers and creates an injector from those providers.\n         *\n         * The passed-in providers can be an array of `Type`, `Provider`,\n         * or a recursive array of more providers.\n         *\n         * @usageNotes\n         * ### Example\n         *\n         * ```typescript\n         * @Injectable()\n         * class Engine {\n         * }\n         *\n         * @Injectable()\n         * class Car {\n         *   constructor(public engine:Engine) {}\n         * }\n         *\n         * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n         * expect(injector.get(Car) instanceof Car).toBe(true);\n         * ```\n         */\n        ReflectiveInjector.resolveAndCreate = function (providers, parent) {\n            var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n            return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);\n        };\n        /**\n         * Creates an injector from previously resolved providers.\n         *\n         * This API is the recommended way to construct injectors in performance-sensitive parts.\n         *\n         * @usageNotes\n         * ### Example\n         *\n         * ```typescript\n         * @Injectable()\n         * class Engine {\n         * }\n         *\n         * @Injectable()\n         * class Car {\n         *   constructor(public engine:Engine) {}\n         * }\n         *\n         * var providers = ReflectiveInjector.resolve([Car, Engine]);\n         * var injector = ReflectiveInjector.fromResolvedProviders(providers);\n         * expect(injector.get(Car) instanceof Car).toBe(true);\n         * ```\n         */\n        ReflectiveInjector.fromResolvedProviders = function (providers, parent) {\n            return new ReflectiveInjector_(providers, parent);\n        };\n        return ReflectiveInjector;\n    }());\n    var ReflectiveInjector_ = /** @class */ (function () {\n        /**\n         * Private\n         */\n        function ReflectiveInjector_(_providers, _parent) {\n            /** @internal */\n            this._constructionCounter = 0;\n            this._providers = _providers;\n            this.parent = _parent || null;\n            var len = _providers.length;\n            this.keyIds = new Array(len);\n            this.objs = new Array(len);\n            for (var i = 0; i < len; i++) {\n                this.keyIds[i] = _providers[i].key.id;\n                this.objs[i] = UNDEFINED;\n            }\n        }\n        ReflectiveInjector_.prototype.get = function (token, notFoundValue) {\n            if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }\n            return this._getByKey(ReflectiveKey.get(token), null, notFoundValue);\n        };\n        ReflectiveInjector_.prototype.resolveAndCreateChild = function (providers) {\n            var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n            return this.createChildFromResolved(ResolvedReflectiveProviders);\n        };\n        ReflectiveInjector_.prototype.createChildFromResolved = function (providers) {\n            var inj = new ReflectiveInjector_(providers);\n            inj.parent = this;\n            return inj;\n        };\n        ReflectiveInjector_.prototype.resolveAndInstantiate = function (provider) {\n            return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);\n        };\n        ReflectiveInjector_.prototype.instantiateResolved = function (provider) {\n            return this._instantiateProvider(provider);\n        };\n        ReflectiveInjector_.prototype.getProviderAtIndex = function (index) {\n            if (index < 0 || index >= this._providers.length) {\n                throw outOfBoundsError(index);\n            }\n            return this._providers[index];\n        };\n        /** @internal */\n        ReflectiveInjector_.prototype._new = function (provider) {\n            if (this._constructionCounter++ > this._getMaxNumberOfObjects()) {\n                throw cyclicDependencyError(this, provider.key);\n            }\n            return this._instantiateProvider(provider);\n        };\n        ReflectiveInjector_.prototype._getMaxNumberOfObjects = function () { return this.objs.length; };\n        ReflectiveInjector_.prototype._instantiateProvider = function (provider) {\n            if (provider.multiProvider) {\n                var res = new Array(provider.resolvedFactories.length);\n                for (var i = 0; i < provider.resolvedFactories.length; ++i) {\n                    res[i] = this._instantiate(provider, provider.resolvedFactories[i]);\n                }\n                return res;\n            }\n            else {\n                return this._instantiate(provider, provider.resolvedFactories[0]);\n            }\n        };\n        ReflectiveInjector_.prototype._instantiate = function (provider, ResolvedReflectiveFactory) {\n            var _this = this;\n            var factory = ResolvedReflectiveFactory.factory;\n            var deps;\n            try {\n                deps =\n                    ResolvedReflectiveFactory.dependencies.map(function (dep) { return _this._getByReflectiveDependency(dep); });\n            }\n            catch (e) {\n                if (e.addKey) {\n                    e.addKey(this, provider.key);\n                }\n                throw e;\n            }\n            var obj;\n            try {\n                obj = factory.apply(void 0, __spread(deps));\n            }\n            catch (e) {\n                throw instantiationError(this, e, e.stack, provider.key);\n            }\n            return obj;\n        };\n        ReflectiveInjector_.prototype._getByReflectiveDependency = function (dep) {\n            return this._getByKey(dep.key, dep.visibility, dep.optional ? null : THROW_IF_NOT_FOUND);\n        };\n        ReflectiveInjector_.prototype._getByKey = function (key, visibility, notFoundValue) {\n            if (key === ReflectiveInjector_.INJECTOR_KEY) {\n                return this;\n            }\n            if (visibility instanceof Self) {\n                return this._getByKeySelf(key, notFoundValue);\n            }\n            else {\n                return this._getByKeyDefault(key, notFoundValue, visibility);\n            }\n        };\n        ReflectiveInjector_.prototype._getObjByKeyId = function (keyId) {\n            for (var i = 0; i < this.keyIds.length; i++) {\n                if (this.keyIds[i] === keyId) {\n                    if (this.objs[i] === UNDEFINED) {\n                        this.objs[i] = this._new(this._providers[i]);\n                    }\n                    return this.objs[i];\n                }\n            }\n            return UNDEFINED;\n        };\n        /** @internal */\n        ReflectiveInjector_.prototype._throwOrNull = function (key, notFoundValue) {\n            if (notFoundValue !== THROW_IF_NOT_FOUND) {\n                return notFoundValue;\n            }\n            else {\n                throw noProviderError(this, key);\n            }\n        };\n        /** @internal */\n        ReflectiveInjector_.prototype._getByKeySelf = function (key, notFoundValue) {\n            var obj = this._getObjByKeyId(key.id);\n            return (obj !== UNDEFINED) ? obj : this._throwOrNull(key, notFoundValue);\n        };\n        /** @internal */\n        ReflectiveInjector_.prototype._getByKeyDefault = function (key, notFoundValue, visibility) {\n            var inj;\n            if (visibility instanceof SkipSelf) {\n                inj = this.parent;\n            }\n            else {\n                inj = this;\n            }\n            while (inj instanceof ReflectiveInjector_) {\n                var inj_ = inj;\n                var obj = inj_._getObjByKeyId(key.id);\n                if (obj !== UNDEFINED)\n                    return obj;\n                inj = inj_.parent;\n            }\n            if (inj !== null) {\n                return inj.get(key.token, notFoundValue);\n            }\n            else {\n                return this._throwOrNull(key, notFoundValue);\n            }\n        };\n        Object.defineProperty(ReflectiveInjector_.prototype, \"displayName\", {\n            get: function () {\n                var providers = _mapProviders(this, function (b) { return ' \"' + b.key.displayName + '\" '; })\n                    .join(', ');\n                return \"ReflectiveInjector(providers: [\" + providers + \"])\";\n            },\n            enumerable: true,\n            configurable: true\n        });\n        ReflectiveInjector_.prototype.toString = function () { return this.displayName; };\n        ReflectiveInjector_.INJECTOR_KEY = ReflectiveKey.get(Injector);\n        return ReflectiveInjector_;\n    }());\n    function _mapProviders(injector, fn) {\n        var res = new Array(injector._providers.length);\n        for (var i = 0; i < injector._providers.length; ++i) {\n            res[i] = fn(injector.getProviderAtIndex(i));\n        }\n        return res;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A DI token that you can use to create a virtual [provider](guide/glossary#provider)\n     * that will populate the `entryComponents` field of components and NgModules\n     * based on its `useValue` property value.\n     * All components that are referenced in the `useValue` value (either directly\n     * or in a nested array or map) are added to the `entryComponents` property.\n     *\n     * @usageNotes\n     *\n     * The following example shows how the router can populate the `entryComponents`\n     * field of an NgModule based on a router configuration that refers\n     * to components.\n     *\n     * ```typescript\n     * // helper function inside the router\n     * function provideRoutes(routes) {\n     *   return [\n     *     {provide: ROUTES, useValue: routes},\n     *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}\n     *   ];\n     * }\n     *\n     * // user code\n     * let routes = [\n     *   {path: '/root', component: RootComp},\n     *   {path: '/teams', component: TeamsComp}\n     * ];\n     *\n     * @NgModule({\n     *   providers: [provideRoutes(routes)]\n     * })\n     * class ModuleWithRoutes {}\n     * ```\n     *\n     * @publicApi\n     */\n    var ANALYZE_FOR_ENTRY_COMPONENTS = new InjectionToken('AnalyzeForEntryComponents');\n    /**\n     * Base class for query metadata.\n     *\n     * @see `ContentChildren`.\n     * @see `ContentChild`.\n     * @see `ViewChildren`.\n     * @see `ViewChild`.\n     *\n     * @publicApi\n     */\n    var Query = /** @class */ (function () {\n        function Query() {\n        }\n        return Query;\n    }());\n    /**\n     * ContentChildren decorator and metadata.\n     *\n     *\n     * @Annotation\n     * @publicApi\n     */\n    var ContentChildren = makePropDecorator('ContentChildren', function (selector, data) {\n        if (data === void 0) { data = {}; }\n        return (__assign({ selector: selector, first: false, isViewQuery: false, descendants: false }, data));\n    }, Query);\n    /**\n     * ContentChild decorator and metadata.\n     *\n     *\n     * @Annotation\n     *\n     * @publicApi\n     */\n    var ContentChild = makePropDecorator('ContentChild', function (selector, data) {\n        if (data === void 0) { data = {}; }\n        return (__assign({ selector: selector, first: true, isViewQuery: false, descendants: true }, data));\n    }, Query);\n    /**\n     * ViewChildren decorator and metadata.\n     *\n     * @Annotation\n     * @publicApi\n     */\n    var ViewChildren = makePropDecorator('ViewChildren', function (selector, data) {\n        if (data === void 0) { data = {}; }\n        return (__assign({ selector: selector, first: false, isViewQuery: true, descendants: true }, data));\n    }, Query);\n    /**\n     * ViewChild decorator and metadata.\n     *\n     * @Annotation\n     * @publicApi\n     */\n    var ViewChild = makePropDecorator('ViewChild', function (selector, data) {\n        return (__assign({ selector: selector, first: true, isViewQuery: true, descendants: true }, data));\n    }, Query);\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    (function (ChangeDetectionStrategy) {\n        /**\n         * Use the `CheckOnce` strategy, meaning that automatic change detection is deactivated\n         * until reactivated by setting the strategy to `Default` (`CheckAlways`).\n         * Change detection can still be explicitly invoked.\n         * This strategy applies to all child directives and cannot be overridden.\n         */\n        ChangeDetectionStrategy[ChangeDetectionStrategy[\"OnPush\"] = 0] = \"OnPush\";\n        /**\n         * Use the default `CheckAlways` strategy, in which change detection is automatic until\n         * explicitly deactivated.\n         */\n        ChangeDetectionStrategy[ChangeDetectionStrategy[\"Default\"] = 1] = \"Default\";\n    })(exports.ChangeDetectionStrategy || (exports.ChangeDetectionStrategy = {}));\n    (function (ChangeDetectorStatus) {\n        /**\n         * A state in which, after calling `detectChanges()`, the change detector\n         * state becomes `Checked`, and must be explicitly invoked or reactivated.\n         */\n        ChangeDetectorStatus[ChangeDetectorStatus[\"CheckOnce\"] = 0] = \"CheckOnce\";\n        /**\n         * A state in which change detection is skipped until the change detector mode\n         * becomes `CheckOnce`.\n         */\n        ChangeDetectorStatus[ChangeDetectorStatus[\"Checked\"] = 1] = \"Checked\";\n        /**\n         * A state in which change detection continues automatically until explicitly\n         * deactivated.\n         */\n        ChangeDetectorStatus[ChangeDetectorStatus[\"CheckAlways\"] = 2] = \"CheckAlways\";\n        /**\n         * A state in which a change detector sub tree is not a part of the main tree and\n         * should be skipped.\n         */\n        ChangeDetectorStatus[ChangeDetectorStatus[\"Detached\"] = 3] = \"Detached\";\n        /**\n         * Indicates that the change detector encountered an error checking a binding\n         * or calling a directive lifecycle method and is now in an inconsistent state. Change\n         * detectors in this state do not detect changes.\n         */\n        ChangeDetectorStatus[ChangeDetectorStatus[\"Errored\"] = 4] = \"Errored\";\n        /**\n         * Indicates that the change detector has been destroyed.\n         */\n        ChangeDetectorStatus[ChangeDetectorStatus[\"Destroyed\"] = 5] = \"Destroyed\";\n    })(exports.ɵChangeDetectorStatus || (exports.ɵChangeDetectorStatus = {}));\n    /**\n     * Reports whether a given strategy is currently the default for change detection.\n     * @param changeDetectionStrategy The strategy to check.\n     * @returns True if the given strategy is the current default, false otherwise.\n     * @see `ChangeDetectorStatus`\n     * @see `ChangeDetectorRef`\n     */\n    function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {\n        return changeDetectionStrategy == null ||\n            changeDetectionStrategy === exports.ChangeDetectionStrategy.Default;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Used to resolve resource URLs on `@Component` when used with JIT compilation.\n     *\n     * Example:\n     * ```\n     * @Component({\n     *   selector: 'my-comp',\n     *   templateUrl: 'my-comp.html', // This requires asynchronous resolution\n     * })\n     * class MyComponent{\n     * }\n     *\n     * // Calling `renderComponent` will fail because `renderComponent` is a synchronous process\n     * // and `MyComponent`'s `@Component.templateUrl` needs to be resolved asynchronously.\n     *\n     * // Calling `resolveComponentResources()` will resolve `@Component.templateUrl` into\n     * // `@Component.template`, which allows `renderComponent` to proceed in a synchronous manner.\n     *\n     * // Use browser's `fetch()` function as the default resource resolution strategy.\n     * resolveComponentResources(fetch).then(() => {\n     *   // After resolution all URLs have been converted into `template` strings.\n     *   renderComponent(MyComponent);\n     * });\n     *\n     * ```\n     *\n     * NOTE: In AOT the resolution happens during compilation, and so there should be no need\n     * to call this method outside JIT mode.\n     *\n     * @param resourceResolver a function which is responsible for returning a `Promise` to the\n     * contents of the resolved URL. Browser's `fetch()` method is a good default implementation.\n     */\n    function resolveComponentResources(resourceResolver) {\n        // Store all promises which are fetching the resources.\n        var componentResolved = [];\n        // Cache so that we don't fetch the same resource more than once.\n        var urlMap = new Map();\n        function cachedResourceResolve(url) {\n            var promise = urlMap.get(url);\n            if (!promise) {\n                var resp = resourceResolver(url);\n                urlMap.set(url, promise = resp.then(unwrapResponse));\n            }\n            return promise;\n        }\n        componentResourceResolutionQueue.forEach(function (component, type) {\n            var promises = [];\n            if (component.templateUrl) {\n                promises.push(cachedResourceResolve(component.templateUrl).then(function (template) {\n                    component.template = template;\n                }));\n            }\n            var styleUrls = component.styleUrls;\n            var styles = component.styles || (component.styles = []);\n            var styleOffset = component.styles.length;\n            styleUrls && styleUrls.forEach(function (styleUrl, index) {\n                styles.push(''); // pre-allocate array.\n                promises.push(cachedResourceResolve(styleUrl).then(function (style) {\n                    styles[styleOffset + index] = style;\n                    styleUrls.splice(styleUrls.indexOf(styleUrl), 1);\n                    if (styleUrls.length == 0) {\n                        component.styleUrls = undefined;\n                    }\n                }));\n            });\n            var fullyResolved = Promise.all(promises).then(function () { return componentDefResolved(type); });\n            componentResolved.push(fullyResolved);\n        });\n        clearResolutionOfComponentResourcesQueue();\n        return Promise.all(componentResolved).then(function () { return undefined; });\n    }\n    var componentResourceResolutionQueue = new Map();\n    // Track when existing ngComponentDef for a Type is waiting on resources.\n    var componentDefPendingResolution = new Set();\n    function maybeQueueResolutionOfComponentResources(type, metadata) {\n        if (componentNeedsResolution(metadata)) {\n            componentResourceResolutionQueue.set(type, metadata);\n            componentDefPendingResolution.add(type);\n        }\n    }\n    function componentNeedsResolution(component) {\n        return !!((component.templateUrl && !component.hasOwnProperty('template')) ||\n            component.styleUrls && component.styleUrls.length);\n    }\n    function clearResolutionOfComponentResourcesQueue() {\n        var old = componentResourceResolutionQueue;\n        componentResourceResolutionQueue = new Map();\n        return old;\n    }\n    function isComponentResourceResolutionQueueEmpty() {\n        return componentResourceResolutionQueue.size === 0;\n    }\n    function unwrapResponse(response) {\n        return typeof response == 'string' ? response : response.text();\n    }\n    function componentDefResolved(type) {\n        componentDefPendingResolution.delete(type);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    (function (ViewEncapsulation) {\n        /**\n         * Emulate `Native` scoping of styles by adding an attribute containing surrogate id to the Host\n         * Element and pre-processing the style rules provided via {@link Component#styles styles} or\n         * {@link Component#styleUrls styleUrls}, and adding the new Host Element attribute to all\n         * selectors.\n         *\n         * This is the default option.\n         */\n        ViewEncapsulation[ViewEncapsulation[\"Emulated\"] = 0] = \"Emulated\";\n        /**\n         * @deprecated v6.1.0 - use {ViewEncapsulation.ShadowDom} instead.\n         * Use the native encapsulation mechanism of the renderer.\n         *\n         * For the DOM this means using the deprecated [Shadow DOM\n         * v0](https://w3c.github.io/webcomponents/spec/shadow/) and\n         * creating a ShadowRoot for Component's Host Element.\n         */\n        ViewEncapsulation[ViewEncapsulation[\"Native\"] = 1] = \"Native\";\n        /**\n         * Don't provide any template or style encapsulation.\n         */\n        ViewEncapsulation[ViewEncapsulation[\"None\"] = 2] = \"None\";\n        /**\n         * Use Shadow DOM to encapsulate styles.\n         *\n         * For the DOM this means using modern [Shadow\n         * DOM](https://w3c.github.io/webcomponents/spec/shadow/) and\n         * creating a ShadowRoot for Component's Host Element.\n         */\n        ViewEncapsulation[ViewEncapsulation[\"ShadowDom\"] = 3] = \"ShadowDom\";\n    })(exports.ViewEncapsulation || (exports.ViewEncapsulation = {}));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Convince closure compiler that the wrapped function has no side-effects.\n     *\n     * Closure compiler always assumes that `toString` has no side-effects. We use this quirk to\n     * allow us to execute a function but have closure compiler mark the call as no-side-effects.\n     * It is important that the return value for the `noSideEffects` function be assigned\n     * to something which is retained otherwise the call to `noSideEffects` will be removed by closure\n     * compiler.\n     */\n    function noSideEffects(fn) {\n        return '' + { toString: fn };\n    }\n\n    /**\n    * @license\n    * Copyright Google Inc. All Rights Reserved.\n    *\n    * Use of this source code is governed by an MIT-style license that can be\n    * found in the LICENSE file at https://angular.io/license\n    */\n    /**\n     * This file contains reuseable \"empty\" symbols that can be used as default return values\n     * in different parts of the rendering code. Because the same symbols are returned, this\n     * allows for identity checks against these values to be consistently used by the framework\n     * code.\n     */\n    var EMPTY_OBJ = {};\n    var EMPTY_ARRAY$1 = [];\n    // freezing the values prevents any code from accidentally inserting new values in\n    if (typeof ngDevMode !== 'undefined' && ngDevMode) {\n        // These property accesses can be ignored because ngDevMode will be set to false\n        // when optimizing code and the whole if statement will be dropped.\n        // tslint:disable-next-line:no-toplevel-property-access\n        Object.freeze(EMPTY_OBJ);\n        // tslint:disable-next-line:no-toplevel-property-access\n        Object.freeze(EMPTY_ARRAY$1);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var NG_COMPONENT_DEF = getClosureSafeProperty({ ngComponentDef: getClosureSafeProperty });\n    var NG_DIRECTIVE_DEF = getClosureSafeProperty({ ngDirectiveDef: getClosureSafeProperty });\n    var NG_PIPE_DEF = getClosureSafeProperty({ ngPipeDef: getClosureSafeProperty });\n    var NG_MODULE_DEF = getClosureSafeProperty({ ngModuleDef: getClosureSafeProperty });\n    var NG_LOCALE_ID_DEF = getClosureSafeProperty({ ngLocaleIdDef: getClosureSafeProperty });\n    var NG_BASE_DEF = getClosureSafeProperty({ ngBaseDef: getClosureSafeProperty });\n    /**\n     * If a directive is diPublic, bloomAdd sets a property on the type with this constant as\n     * the key and the directive's unique ID as the value. This allows us to map directives to their\n     * bloom filter bit for DI.\n     */\n    // TODO(misko): This is wrong. The NG_ELEMENT_ID should never be minified.\n    var NG_ELEMENT_ID = getClosureSafeProperty({ __NG_ELEMENT_ID__: getClosureSafeProperty });\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var _renderCompCount = 0;\n    /**\n     * Create a component definition object.\n     *\n     *\n     * # Example\n     * ```\n     * class MyDirective {\n     *   // Generated by Angular Template Compiler\n     *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n     *   static ngComponentDef = defineComponent({\n     *     ...\n     *   });\n     * }\n     * ```\n     * @codeGenApi\n     */\n    function ɵɵdefineComponent(componentDefinition) {\n        var type = componentDefinition.type;\n        var typePrototype = type.prototype;\n        var declaredInputs = {};\n        var def = {\n            type: type,\n            providersResolver: null,\n            consts: componentDefinition.consts,\n            vars: componentDefinition.vars,\n            factory: componentDefinition.factory,\n            template: componentDefinition.template || null,\n            ngContentSelectors: componentDefinition.ngContentSelectors,\n            hostBindings: componentDefinition.hostBindings || null,\n            contentQueries: componentDefinition.contentQueries || null,\n            declaredInputs: declaredInputs,\n            inputs: null,\n            outputs: null,\n            exportAs: componentDefinition.exportAs || null,\n            onChanges: null,\n            onInit: typePrototype.ngOnInit || null,\n            doCheck: typePrototype.ngDoCheck || null,\n            afterContentInit: typePrototype.ngAfterContentInit || null,\n            afterContentChecked: typePrototype.ngAfterContentChecked || null,\n            afterViewInit: typePrototype.ngAfterViewInit || null,\n            afterViewChecked: typePrototype.ngAfterViewChecked || null,\n            onDestroy: typePrototype.ngOnDestroy || null,\n            onPush: componentDefinition.changeDetection === exports.ChangeDetectionStrategy.OnPush,\n            directiveDefs: null,\n            pipeDefs: null,\n            selectors: componentDefinition.selectors,\n            viewQuery: componentDefinition.viewQuery || null,\n            features: componentDefinition.features || null,\n            data: componentDefinition.data || {},\n            // TODO(misko): convert ViewEncapsulation into const enum so that it can be used directly in the\n            // next line. Also `None` should be 0 not 2.\n            encapsulation: componentDefinition.encapsulation || exports.ViewEncapsulation.Emulated,\n            id: 'c',\n            styles: componentDefinition.styles || EMPTY_ARRAY$1,\n            _: null,\n            setInput: null,\n            schemas: componentDefinition.schemas || null,\n            tView: null,\n        };\n        def._ = noSideEffects(function () {\n            var directiveTypes = componentDefinition.directives;\n            var feature = componentDefinition.features;\n            var pipeTypes = componentDefinition.pipes;\n            def.id += _renderCompCount++;\n            def.inputs = invertObject(componentDefinition.inputs, declaredInputs),\n                def.outputs = invertObject(componentDefinition.outputs),\n                feature && feature.forEach(function (fn) { return fn(def); });\n            def.directiveDefs = directiveTypes ?\n                function () { return (typeof directiveTypes === 'function' ? directiveTypes() : directiveTypes)\n                    .map(extractDirectiveDef); } :\n                null;\n            def.pipeDefs = pipeTypes ?\n                function () { return (typeof pipeTypes === 'function' ? pipeTypes() : pipeTypes).map(extractPipeDef); } :\n                null;\n            // Add ngInjectableDef so components are reachable through the module injector by default\n            // (unless it has already been set by the @Injectable decorator). This is mostly to\n            // support injecting components in tests. In real application code, components should\n            // be retrieved through the node injector, so this isn't a problem.\n            if (!type.hasOwnProperty(NG_INJECTABLE_DEF)) {\n                type[NG_INJECTABLE_DEF] =\n                    ɵɵdefineInjectable({ token: type, factory: componentDefinition.factory });\n            }\n        });\n        return def;\n    }\n    /**\n     * @codeGenApi\n     */\n    function ɵɵsetComponentScope(type, directives, pipes) {\n        var def = type.ngComponentDef;\n        def.directiveDefs = function () { return directives.map(extractDirectiveDef); };\n        def.pipeDefs = function () { return pipes.map(extractPipeDef); };\n    }\n    function extractDirectiveDef(type) {\n        var def = getComponentDef(type) || getDirectiveDef(type);\n        if (ngDevMode && !def) {\n            throw new Error(\"'\" + type.name + \"' is neither 'ComponentType' or 'DirectiveType'.\");\n        }\n        return def;\n    }\n    function extractPipeDef(type) {\n        var def = getPipeDef(type);\n        if (ngDevMode && !def) {\n            throw new Error(\"'\" + type.name + \"' is not a 'PipeType'.\");\n        }\n        return def;\n    }\n    /**\n     * @codeGenApi\n     */\n    function ɵɵdefineNgModule(def) {\n        var res = {\n            type: def.type,\n            bootstrap: def.bootstrap || EMPTY_ARRAY$1,\n            declarations: def.declarations || EMPTY_ARRAY$1,\n            imports: def.imports || EMPTY_ARRAY$1,\n            exports: def.exports || EMPTY_ARRAY$1,\n            transitiveCompileScopes: null,\n            schemas: def.schemas || null,\n            id: def.id || null,\n        };\n        return res;\n    }\n    /**\n     * Adds the module metadata that is necessary to compute the module's transitive scope to an\n     * existing module definition.\n     *\n     * Scope metadata of modules is not used in production builds, so calls to this function can be\n     * marked pure to tree-shake it from the bundle, allowing for all referenced declarations\n     * to become eligible for tree-shaking as well.\n     *\n     * @codeGenApi\n     */\n    function ɵɵsetNgModuleScope(type, scope) {\n        return noSideEffects(function () {\n            var ngModuleDef = getNgModuleDef(type, true);\n            ngModuleDef.declarations = scope.declarations || EMPTY_ARRAY$1;\n            ngModuleDef.imports = scope.imports || EMPTY_ARRAY$1;\n            ngModuleDef.exports = scope.exports || EMPTY_ARRAY$1;\n        });\n    }\n    /**\n     * Inverts an inputs or outputs lookup such that the keys, which were the\n     * minified keys, are part of the values, and the values are parsed so that\n     * the publicName of the property is the new key\n     *\n     * e.g. for\n     *\n     * ```\n     * class Comp {\n     *   @Input()\n     *   propName1: string;\n     *\n     *   @Input('publicName2')\n     *   declaredPropName2: number;\n     * }\n     * ```\n     *\n     * will be serialized as\n     *\n     * ```\n     * {\n     *   propName1: 'propName1',\n     *   declaredPropName2: ['publicName2', 'declaredPropName2'],\n     * }\n     * ```\n     *\n     * which is than translated by the minifier as:\n     *\n     * ```\n     * {\n     *   minifiedPropName1: 'propName1',\n     *   minifiedPropName2: ['publicName2', 'declaredPropName2'],\n     * }\n     * ```\n     *\n     * becomes: (public name => minifiedName)\n     *\n     * ```\n     * {\n     *  'propName1': 'minifiedPropName1',\n     *  'publicName2': 'minifiedPropName2',\n     * }\n     * ```\n     *\n     * Optionally the function can take `secondary` which will result in: (public name => declared name)\n     *\n     * ```\n     * {\n     *  'propName1': 'propName1',\n     *  'publicName2': 'declaredPropName2',\n     * }\n     * ```\n     *\n\n     */\n    function invertObject(obj, secondary) {\n        if (obj == null)\n            return EMPTY_OBJ;\n        var newLookup = {};\n        for (var minifiedKey in obj) {\n            if (obj.hasOwnProperty(minifiedKey)) {\n                var publicName = obj[minifiedKey];\n                var declaredName = publicName;\n                if (Array.isArray(publicName)) {\n                    declaredName = publicName[1];\n                    publicName = publicName[0];\n                }\n                newLookup[publicName] = minifiedKey;\n                if (secondary) {\n                    (secondary[publicName] = declaredName);\n                }\n            }\n        }\n        return newLookup;\n    }\n    /**\n     * Create a base definition\n     *\n     * # Example\n     * ```ts\n     * class ShouldBeInherited {\n     *   static ngBaseDef = ɵɵdefineBase({\n     *      ...\n     *   })\n     * }\n     * ```\n     *\n     * @param baseDefinition The base definition parameters\n     *\n     * @codeGenApi\n     */\n    function ɵɵdefineBase(baseDefinition) {\n        var declaredInputs = {};\n        return {\n            inputs: invertObject(baseDefinition.inputs, declaredInputs),\n            declaredInputs: declaredInputs,\n            outputs: invertObject(baseDefinition.outputs),\n            viewQuery: baseDefinition.viewQuery || null,\n            contentQueries: baseDefinition.contentQueries || null,\n            hostBindings: baseDefinition.hostBindings || null\n        };\n    }\n    /**\n     * Create a directive definition object.\n     *\n     * # Example\n     * ```ts\n     * class MyDirective {\n     *   // Generated by Angular Template Compiler\n     *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n     *   static ngDirectiveDef = ɵɵdefineDirective({\n     *     ...\n     *   });\n     * }\n     * ```\n     *\n     * @codeGenApi\n     */\n    var ɵɵdefineDirective = ɵɵdefineComponent;\n    /**\n     * Create a pipe definition object.\n     *\n     * # Example\n     * ```\n     * class MyPipe implements PipeTransform {\n     *   // Generated by Angular Template Compiler\n     *   static ngPipeDef = definePipe({\n     *     ...\n     *   });\n     * }\n     * ```\n     * @param pipeDef Pipe definition generated by the compiler\n     *\n     * @codeGenApi\n     */\n    function ɵɵdefinePipe(pipeDef) {\n        return {\n            name: pipeDef.name,\n            factory: pipeDef.factory,\n            pure: pipeDef.pure !== false,\n            onDestroy: pipeDef.type.prototype.ngOnDestroy || null\n        };\n    }\n    /**\n     * The following getter methods retrieve the definition form the type. Currently the retrieval\n     * honors inheritance, but in the future we may change the rule to require that definitions are\n     * explicit. This would require some sort of migration strategy.\n     */\n    function getComponentDef(type) {\n        return type[NG_COMPONENT_DEF] || null;\n    }\n    function getDirectiveDef(type) {\n        return type[NG_DIRECTIVE_DEF] || null;\n    }\n    function getPipeDef(type) {\n        return type[NG_PIPE_DEF] || null;\n    }\n    function getBaseDef(type) {\n        return type[NG_BASE_DEF] || null;\n    }\n    function getNgModuleDef(type, throwNotFound) {\n        var ngModuleDef = type[NG_MODULE_DEF] || null;\n        if (!ngModuleDef && throwNotFound === true) {\n            throw new Error(\"Type \" + stringify(type) + \" does not have 'ngModuleDef' property.\");\n        }\n        return ngModuleDef;\n    }\n    function getNgLocaleIdDef(type) {\n        return type[NG_LOCALE_ID_DEF] || null;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Returns whether the values are different from a change detection stand point.\n     *\n     * Constraints are relaxed in checkNoChanges mode. See `devModeEqual` for details.\n     */\n    function isDifferent(a, b) {\n        // NaN is the only value that is not equal to itself so the first\n        // test checks if both a and b are not NaN\n        return !(a !== a && b !== b) && a !== b;\n    }\n    /**\n     * Used for stringify render output in Ivy.\n     * Important! This function is very performance-sensitive and we should\n     * be extra careful not to introduce megamorphic reads in it.\n     */\n    function renderStringify(value) {\n        if (typeof value === 'string')\n            return value;\n        if (value == null)\n            return '';\n        return '' + value;\n    }\n    /**\n     * Used to stringify a value so that it can be displayed in an error message.\n     * Important! This function contains a megamorphic read and should only be\n     * used for error messages.\n     */\n    function stringifyForError(value) {\n        if (typeof value === 'function')\n            return value.name || value.toString();\n        if (typeof value === 'object' && value != null && typeof value.type === 'function') {\n            return value.type.name || value.type.toString();\n        }\n        return renderStringify(value);\n    }\n    var defaultScheduler = (function () {\n        return (typeof requestAnimationFrame !== 'undefined' && requestAnimationFrame || // browser only\n            setTimeout // everything else\n        ).bind(_global);\n    })();\n    /**\n     *\n     * @codeGenApi\n     */\n    function ɵɵresolveWindow(element) {\n        return { name: 'window', target: element.ownerDocument.defaultView };\n    }\n    /**\n     *\n     * @codeGenApi\n     */\n    function ɵɵresolveDocument(element) {\n        return { name: 'document', target: element.ownerDocument };\n    }\n    /**\n     *\n     * @codeGenApi\n     */\n    function ɵɵresolveBody(element) {\n        return { name: 'body', target: element.ownerDocument.body };\n    }\n    /**\n     * The special delimiter we use to separate property names, prefixes, and suffixes\n     * in property binding metadata. See storeBindingMetadata().\n     *\n     * We intentionally use the Unicode \"REPLACEMENT CHARACTER\" (U+FFFD) as a delimiter\n     * because it is a very uncommon character that is unlikely to be part of a user's\n     * property names or interpolation strings. If it is in fact used in a property\n     * binding, DebugElement.properties will not return the correct value for that\n     * binding. However, there should be no runtime effect for real applications.\n     *\n     * This character is typically rendered as a question mark inside of a diamond.\n     * See https://en.wikipedia.org/wiki/Specials_(Unicode_block)\n     *\n     */\n    var INTERPOLATION_DELIMITER = \"\\uFFFD\";\n    /**\n     * Determines whether or not the given string is a property metadata string.\n     * See storeBindingMetadata().\n     */\n    function isPropMetadataString(str) {\n        return str.indexOf(INTERPOLATION_DELIMITER) >= 0;\n    }\n    /**\n     * Unwrap a value which might be behind a closure (for forward declaration reasons).\n     */\n    function maybeUnwrapFn(value) {\n        if (value instanceof Function) {\n            return value();\n        }\n        else {\n            return value;\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // Below are constants for LView indices to help us look up LView members\n    // without having to remember the specific indices.\n    // Uglify will inline these when minifying so there shouldn't be a cost.\n    var HOST = 0;\n    var TVIEW = 1;\n    var FLAGS = 2;\n    var PARENT = 3;\n    var NEXT = 4;\n    var QUERIES = 5;\n    var T_HOST = 6;\n    var BINDING_INDEX = 7;\n    var CLEANUP = 8;\n    var CONTEXT = 9;\n    var INJECTOR$1 = 10;\n    var RENDERER_FACTORY = 11;\n    var RENDERER = 12;\n    var SANITIZER = 13;\n    var CHILD_HEAD = 14;\n    var CHILD_TAIL = 15;\n    var CONTENT_QUERIES = 16;\n    var DECLARATION_VIEW = 17;\n    var PREORDER_HOOK_FLAGS = 18;\n    /** Size of LView's header. Necessary to adjust for it when setting slots.  */\n    var HEADER_OFFSET = 20;\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function assertEqual(actual, expected, msg) {\n        if (actual != expected) {\n            throwError(msg);\n        }\n    }\n    function assertNotEqual(actual, expected, msg) {\n        if (actual == expected) {\n            throwError(msg);\n        }\n    }\n    function assertNotSame(actual, expected, msg) {\n        if (actual === expected) {\n            throwError(msg);\n        }\n    }\n    function assertLessThan(actual, expected, msg) {\n        if (actual >= expected) {\n            throwError(msg);\n        }\n    }\n    function assertGreaterThan(actual, expected, msg) {\n        if (actual <= expected) {\n            throwError(msg);\n        }\n    }\n    function assertDefined(actual, msg) {\n        if (actual == null) {\n            throwError(msg);\n        }\n    }\n    function throwError(msg) {\n        // tslint:disable-next-line\n        debugger; // Left intentionally for better debugger experience.\n        throw new Error(\"ASSERTION ERROR: \" + msg);\n    }\n    function assertDomNode(node) {\n        // If we're in a worker, `Node` will not be defined.\n        assertEqual((typeof Node !== 'undefined' && node instanceof Node) ||\n            (typeof node === 'object' && node.constructor.name === 'WebWorkerRenderNode'), true, 'The provided value must be an instance of a DOM Node');\n    }\n    function assertDataInRange(arr, index) {\n        var maxLen = arr ? arr.length : 0;\n        assertLessThan(index, maxLen, \"Index expected to be less than \" + maxLen + \" but got \" + index);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Special location which allows easy identification of type. If we have an array which was\n     * retrieved from the `LView` and that array has `true` at `TYPE` location, we know it is\n     * `LContainer`.\n     */\n    var TYPE = 1;\n    /**\n     * Below are constants for LContainer indices to help us look up LContainer members\n     * without having to remember the specific indices.\n     * Uglify will inline these when minifying so there shouldn't be a cost.\n     */\n    var ACTIVE_INDEX = 2;\n    // PARENT, NEXT, QUERIES and T_HOST are indices 3, 4, 5 and 6.\n    // As we already have these constants in LView, we don't need to re-create them.\n    var NATIVE = 7;\n    /**\n     * Size of LContainer's header. Represents the index after which all views in the\n     * container will be inserted. We need to keep a record of current views so we know\n     * which views are already in the DOM (and don't need to be re-added) and so we can\n     * remove views from the DOM when they are no longer required.\n     */\n    var CONTAINER_HEADER_OFFSET = 8;\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * This property will be monkey-patched on elements, components and directives\n     */\n    var MONKEY_PATCH_KEY_NAME = '__ngContext__';\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * For efficiency reasons we often put several different data types (`RNode`, `LView`, `LContainer`,\n     * `StylingContext`) in same location in `LView`. This is because we don't want to pre-allocate\n     * space for it because the storage is sparse. This file contains utilities for dealing with such\n     * data types.\n     *\n     * How do we know what is stored at a given location in `LView`.\n     * - `Array.isArray(value) === false` => `RNode` (The normal storage value)\n     * - `Array.isArray(value) === true` => then the `value[0]` represents the wrapped value.\n     *   - `typeof value[TYPE] === 'object'` => `LView`\n     *      - This happens when we have a component at a given location\n     *   - `typeof value[TYPE] === 'number'` => `StylingContext`\n     *      - This happens when we have style/class binding at a given location.\n     *   - `typeof value[TYPE] === true` => `LContainer`\n     *      - This happens when we have `LContainer` binding at a given location.\n     *\n     *\n     * NOTE: it is assumed that `Array.isArray` and `typeof` operations are very efficient.\n     */\n    /**\n     * Returns `RNode`.\n     * @param value wrapped value of `RNode`, `LView`, `LContainer`, `StylingContext`\n     */\n    function unwrapRNode(value) {\n        while (Array.isArray(value)) {\n            value = value[HOST];\n        }\n        return value;\n    }\n    /**\n     * True if `value` is `LView`.\n     * @param value wrapped value of `RNode`, `LView`, `LContainer`, `StylingContext`\n     */\n    function isLView(value) {\n        return Array.isArray(value) && typeof value[TYPE] === 'object';\n    }\n    /**\n     * True if `value` is `LContainer`.\n     * @param value wrapped value of `RNode`, `LView`, `LContainer`, `StylingContext`\n     */\n    function isLContainer(value) {\n        return Array.isArray(value) && value[TYPE] === true;\n    }\n    /**\n     * True if `value` is `StylingContext`.\n     * @param value wrapped value of `RNode`, `LView`, `LContainer`, `StylingContext`\n     */\n    function isStylingContext(value) {\n        return Array.isArray(value) && typeof value[TYPE] === 'number';\n    }\n    /**\n     * Retrieves an element value from the provided `viewData`, by unwrapping\n     * from any containers, component views, or style contexts.\n     */\n    function getNativeByIndex(index, lView) {\n        return unwrapRNode(lView[index + HEADER_OFFSET]);\n    }\n    function getNativeByTNode(tNode, hostView) {\n        return unwrapRNode(hostView[tNode.index]);\n    }\n    /**\n     * A helper function that returns `true` if a given `TNode` has any matching directives.\n     */\n    function hasDirectives(tNode) {\n        return tNode.directiveEnd > tNode.directiveStart;\n    }\n    function getTNode(index, view) {\n        ngDevMode && assertGreaterThan(index, -1, 'wrong index for TNode');\n        ngDevMode && assertLessThan(index, view[TVIEW].data.length, 'wrong index for TNode');\n        return view[TVIEW].data[index + HEADER_OFFSET];\n    }\n    /** Retrieves a value from any `LView` or `TData`. */\n    function loadInternal(view, index) {\n        ngDevMode && assertDataInRange(view, index + HEADER_OFFSET);\n        return view[index + HEADER_OFFSET];\n    }\n    function getComponentViewByIndex(nodeIndex, hostView) {\n        // Could be an LView or an LContainer. If LContainer, unwrap to find LView.\n        var slotValue = hostView[nodeIndex];\n        var lView = isLView(slotValue) ? slotValue : slotValue[HOST];\n        return lView;\n    }\n    function isContentQueryHost(tNode) {\n        return (tNode.flags & 4 /* hasContentQuery */) !== 0;\n    }\n    function isComponent(tNode) {\n        return (tNode.flags & 1 /* isComponent */) === 1 /* isComponent */;\n    }\n    function isComponentDef(def) {\n        return def.template !== null;\n    }\n    function isRootView(target) {\n        return (target[FLAGS] & 512 /* IsRoot */) !== 0;\n    }\n    /**\n     * Returns the monkey-patch value data present on the target (which could be\n     * a component, directive or a DOM node).\n     */\n    function readPatchedData(target) {\n        ngDevMode && assertDefined(target, 'Target expected');\n        return target[MONKEY_PATCH_KEY_NAME];\n    }\n    function readPatchedLView(target) {\n        var value = readPatchedData(target);\n        if (value) {\n            return Array.isArray(value) ? value : value.lView;\n        }\n        return null;\n    }\n    /**\n     * Returns a boolean for whether the view is attached to the change detection tree.\n     *\n     * Note: This determines whether a view should be checked, not whether it's inserted\n     * into a container. For that, you'll want `viewAttachedToContainer` below.\n     */\n    function viewAttachedToChangeDetector(view) {\n        return (view[FLAGS] & 128 /* Attached */) === 128 /* Attached */;\n    }\n    /** Returns a boolean for whether the view is attached to a container. */\n    function viewAttachedToContainer(view) {\n        return isLContainer(view[PARENT]);\n    }\n    /**\n     * Resets the pre-order hook flags of the view.\n     * @param lView the LView on which the flags are reset\n     */\n    function resetPreOrderHookFlags(lView) {\n        lView[PREORDER_HOOK_FLAGS] = 0;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function assertComponentType(actual, msg) {\n        if (msg === void 0) { msg = 'Type passed in is not ComponentType, it does not have \\'ngComponentDef\\' property.'; }\n        if (!getComponentDef(actual)) {\n            throwError(msg);\n        }\n    }\n    function assertNgModuleType(actual, msg) {\n        if (msg === void 0) { msg = 'Type passed in is not NgModuleType, it does not have \\'ngModuleDef\\' property.'; }\n        if (!getNgModuleDef(actual)) {\n            throwError(msg);\n        }\n    }\n    function assertPreviousIsParent(isParent) {\n        assertEqual(isParent, true, 'previousOrParentTNode should be a parent');\n    }\n    function assertHasParent(tNode) {\n        assertDefined(tNode, 'previousOrParentTNode should exist!');\n        assertDefined(tNode.parent, 'previousOrParentTNode should have a parent');\n    }\n    function assertLContainerOrUndefined(value) {\n        value && assertEqual(isLContainer(value), true, 'Expecting LContainer or undefined or null');\n    }\n    function assertLContainer(value) {\n        assertDefined(value, 'LContainer must be defined');\n        assertEqual(isLContainer(value), true, 'Expecting LContainer');\n    }\n    function assertLViewOrUndefined(value) {\n        value && assertEqual(isLView(value), true, 'Expecting LView or undefined or null');\n    }\n    function assertLView(value) {\n        assertDefined(value, 'LView must be defined');\n        assertEqual(isLView(value), true, 'Expecting LView');\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Adds all directive lifecycle hooks from the given `DirectiveDef` to the given `TView`.\n     *\n     * Must be run *only* on the first template pass.\n     *\n     * Sets up the pre-order hooks on the provided `tView`,\n     * see {@link HookData} for details about the data structure.\n     *\n     * @param directiveIndex The index of the directive in LView\n     * @param directiveDef The definition containing the hooks to setup in tView\n     * @param tView The current TView\n     * @param nodeIndex The index of the node to which the directive is attached\n     * @param initialPreOrderHooksLength the number of pre-order hooks already registered before the\n     * current process, used to know if the node index has to be added to the array. If it is -1,\n     * the node index is never added.\n     * @param initialPreOrderCheckHooksLength same as previous for pre-order check hooks\n     */\n    function registerPreOrderHooks(directiveIndex, directiveDef, tView, nodeIndex, initialPreOrderHooksLength, initialPreOrderCheckHooksLength) {\n        ngDevMode &&\n            assertEqual(tView.firstTemplatePass, true, 'Should only be called on first template pass');\n        var onChanges = directiveDef.onChanges, onInit = directiveDef.onInit, doCheck = directiveDef.doCheck;\n        if (initialPreOrderHooksLength >= 0 &&\n            (!tView.preOrderHooks || initialPreOrderHooksLength === tView.preOrderHooks.length) &&\n            (onChanges || onInit || doCheck)) {\n            (tView.preOrderHooks || (tView.preOrderHooks = [])).push(nodeIndex);\n        }\n        if (initialPreOrderCheckHooksLength >= 0 &&\n            (!tView.preOrderCheckHooks ||\n                initialPreOrderCheckHooksLength === tView.preOrderCheckHooks.length) &&\n            (onChanges || doCheck)) {\n            (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = [])).push(nodeIndex);\n        }\n        if (onChanges) {\n            (tView.preOrderHooks || (tView.preOrderHooks = [])).push(directiveIndex, onChanges);\n            (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = [])).push(directiveIndex, onChanges);\n        }\n        if (onInit) {\n            (tView.preOrderHooks || (tView.preOrderHooks = [])).push(-directiveIndex, onInit);\n        }\n        if (doCheck) {\n            (tView.preOrderHooks || (tView.preOrderHooks = [])).push(directiveIndex, doCheck);\n            (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = [])).push(directiveIndex, doCheck);\n        }\n    }\n    /**\n     *\n     * Loops through the directives on the provided `tNode` and queues hooks to be\n     * run that are not initialization hooks.\n     *\n     * Should be executed during `elementEnd()` and similar to\n     * preserve hook execution order. Content, view, and destroy hooks for projected\n     * components and directives must be called *before* their hosts.\n     *\n     * Sets up the content, view, and destroy hooks on the provided `tView`,\n     * see {@link HookData} for details about the data structure.\n     *\n     * NOTE: This does not set up `onChanges`, `onInit` or `doCheck`, those are set up\n     * separately at `elementStart`.\n     *\n     * @param tView The current TView\n     * @param tNode The TNode whose directives are to be searched for hooks to queue\n     */\n    function registerPostOrderHooks(tView, tNode) {\n        if (tView.firstTemplatePass) {\n            // It's necessary to loop through the directives at elementEnd() (rather than processing in\n            // directiveCreate) so we can preserve the current hook order. Content, view, and destroy\n            // hooks for projected components and directives must be called *before* their hosts.\n            for (var i = tNode.directiveStart, end = tNode.directiveEnd; i < end; i++) {\n                var directiveDef = tView.data[i];\n                if (directiveDef.afterContentInit) {\n                    (tView.contentHooks || (tView.contentHooks = [])).push(-i, directiveDef.afterContentInit);\n                }\n                if (directiveDef.afterContentChecked) {\n                    (tView.contentHooks || (tView.contentHooks = [])).push(i, directiveDef.afterContentChecked);\n                    (tView.contentCheckHooks || (tView.contentCheckHooks = [])).push(i, directiveDef.afterContentChecked);\n                }\n                if (directiveDef.afterViewInit) {\n                    (tView.viewHooks || (tView.viewHooks = [])).push(-i, directiveDef.afterViewInit);\n                }\n                if (directiveDef.afterViewChecked) {\n                    (tView.viewHooks || (tView.viewHooks = [])).push(i, directiveDef.afterViewChecked);\n                    (tView.viewCheckHooks || (tView.viewCheckHooks = [])).push(i, directiveDef.afterViewChecked);\n                }\n                if (directiveDef.onDestroy != null) {\n                    (tView.destroyHooks || (tView.destroyHooks = [])).push(i, directiveDef.onDestroy);\n                }\n            }\n        }\n    }\n    /**\n     * Executing hooks requires complex logic as we need to deal with 2 constraints.\n     *\n     * 1. Init hooks (ngOnInit, ngAfterContentInit, ngAfterViewInit) must all be executed once and only\n     * once, across many change detection cycles. This must be true even if some hooks throw, or if\n     * some recursively trigger a change detection cycle.\n     * To solve that, it is required to track the state of the execution of these init hooks.\n     * This is done by storing and maintaining flags in the view: the {@link InitPhaseState},\n     * and the index within that phase. They can be seen as a cursor in the following structure:\n     * [[onInit1, onInit2], [afterContentInit1], [afterViewInit1, afterViewInit2, afterViewInit3]]\n     * They are are stored as flags in LView[FLAGS].\n     *\n     * 2. Pre-order hooks can be executed in batches, because of the select instruction.\n     * To be able to pause and resume their execution, we also need some state about the hook's array\n     * that is being processed:\n     * - the index of the next hook to be executed\n     * - the number of init hooks already found in the processed part of the  array\n     * They are are stored as flags in LView[PREORDER_HOOK_FLAGS].\n     */\n    /**\n     * Executes necessary hooks at the start of executing a template.\n     *\n     * Executes hooks that are to be run during the initialization of a directive such\n     * as `onChanges`, `onInit`, and `doCheck`.\n     *\n     * @param lView The current view\n     * @param tView Static data for the view containing the hooks to be executed\n     * @param checkNoChangesMode Whether or not we're in checkNoChanges mode.\n     * @param @param currentNodeIndex 2 cases depending the the value:\n     * - undefined: execute hooks only from the saved index until the end of the array (pre-order case,\n     * when flushing the remaining hooks)\n     * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n     * case, when executing select(number))\n     */\n    function executePreOrderHooks(currentView, tView, checkNoChangesMode, currentNodeIndex) {\n        if (!checkNoChangesMode) {\n            executeHooks(currentView, tView.preOrderHooks, tView.preOrderCheckHooks, checkNoChangesMode, 0 /* OnInitHooksToBeRun */, currentNodeIndex !== undefined ? currentNodeIndex : null);\n        }\n    }\n    /**\n     * Executes hooks against the given `LView` based off of whether or not\n     * This is the first pass.\n     *\n     * @param currentView The view instance data to run the hooks against\n     * @param firstPassHooks An array of hooks to run if we're in the first view pass\n     * @param checkHooks An Array of hooks to run if we're not in the first view pass.\n     * @param checkNoChangesMode Whether or not we're in no changes mode.\n     * @param initPhaseState the current state of the init phase\n     * @param currentNodeIndex 3 cases depending the the value:\n     * - undefined: all hooks from the array should be executed (post-order case)\n     * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\n     * flushing the remaining hooks)\n     * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n     * case, when executing select(number))\n     */\n    function executeHooks(currentView, firstPassHooks, checkHooks, checkNoChangesMode, initPhaseState, currentNodeIndex) {\n        if (checkNoChangesMode)\n            return;\n        var hooksToCall = (currentView[FLAGS] & 3 /* InitPhaseStateMask */) === initPhaseState ?\n            firstPassHooks :\n            checkHooks;\n        if (hooksToCall) {\n            callHooks(currentView, hooksToCall, initPhaseState, currentNodeIndex);\n        }\n        // The init phase state must be always checked here as it may have been recursively updated\n        if (currentNodeIndex == null &&\n            (currentView[FLAGS] & 3 /* InitPhaseStateMask */) === initPhaseState &&\n            initPhaseState !== 3 /* InitPhaseCompleted */) {\n            currentView[FLAGS] &= 1023 /* IndexWithinInitPhaseReset */;\n            currentView[FLAGS] += 1 /* InitPhaseStateIncrementer */;\n        }\n    }\n    /**\n     * Calls lifecycle hooks with their contexts, skipping init hooks if it's not\n     * the first LView pass\n     *\n     * @param currentView The current view\n     * @param arr The array in which the hooks are found\n     * @param initPhaseState the current state of the init phase\n     * @param currentNodeIndex 3 cases depending the the value:\n     * - undefined: all hooks from the array should be executed (post-order case)\n     * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\n     * flushing the remaining hooks)\n     * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n     * case, when executing select(number))\n     */\n    function callHooks(currentView, arr, initPhase, currentNodeIndex) {\n        var startIndex = currentNodeIndex !== undefined ?\n            (currentView[PREORDER_HOOK_FLAGS] & 65535 /* IndexOfTheNextPreOrderHookMaskMask */) :\n            0;\n        var nodeIndexLimit = currentNodeIndex != null ? currentNodeIndex : -1;\n        var lastNodeIndexFound = 0;\n        for (var i = startIndex; i < arr.length; i++) {\n            var hook = arr[i + 1];\n            if (typeof hook === 'number') {\n                lastNodeIndexFound = arr[i];\n                if (currentNodeIndex != null && lastNodeIndexFound >= currentNodeIndex) {\n                    break;\n                }\n            }\n            else {\n                var isInitHook = arr[i] < 0;\n                if (isInitHook)\n                    currentView[PREORDER_HOOK_FLAGS] += 65536 /* NumberOfInitHooksCalledIncrementer */;\n                if (lastNodeIndexFound < nodeIndexLimit || nodeIndexLimit == -1) {\n                    callHook(currentView, initPhase, arr, i);\n                    currentView[PREORDER_HOOK_FLAGS] =\n                        (currentView[PREORDER_HOOK_FLAGS] & 4294901760 /* NumberOfInitHooksCalledMask */) + i +\n                            2;\n                }\n                i++;\n            }\n        }\n    }\n    /**\n     * Execute one hook against the current `LView`.\n     *\n     * @param currentView The current view\n     * @param initPhaseState the current state of the init phase\n     * @param arr The array in which the hooks are found\n     * @param i The current index within the hook data array\n     */\n    function callHook(currentView, initPhase, arr, i) {\n        var isInitHook = arr[i] < 0;\n        var hook = arr[i + 1];\n        var directiveIndex = isInitHook ? -arr[i] : arr[i];\n        var directive = currentView[directiveIndex];\n        if (isInitHook) {\n            var indexWithintInitPhase = currentView[FLAGS] >> 10 /* IndexWithinInitPhaseShift */;\n            // The init phase state must be always checked here as it may have been recursively\n            // updated\n            if (indexWithintInitPhase <\n                (currentView[PREORDER_HOOK_FLAGS] >> 16 /* NumberOfInitHooksCalledShift */) &&\n                (currentView[FLAGS] & 3 /* InitPhaseStateMask */) === initPhase) {\n                currentView[FLAGS] += 1024 /* IndexWithinInitPhaseIncrementer */;\n                hook.call(directive);\n            }\n        }\n        else {\n            hook.call(directive);\n        }\n    }\n\n    var stylingContext = null;\n    /**\n     * Gets the most recent styling context value.\n     *\n     * Note that only one styling context is stored at a given time.\n     */\n    function getCachedStylingContext() {\n        return stylingContext;\n    }\n    /**\n     * Sets the most recent styling context value.\n     *\n     * Note that only one styling context is stored at a given time.\n     *\n     * @param context The styling context value that will be stored\n     */\n    function setCachedStylingContext(context) {\n        stylingContext = context;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Store the element depth count. This is used to identify the root elements of the template\n     * so that we can than attach `LView` to only those elements.\n     */\n    var elementDepthCount;\n    function getElementDepthCount() {\n        // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n        return elementDepthCount;\n    }\n    function increaseElementDepthCount() {\n        elementDepthCount++;\n    }\n    function decreaseElementDepthCount() {\n        elementDepthCount--;\n    }\n    var currentDirectiveDef = null;\n    function getCurrentDirectiveDef() {\n        // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n        return currentDirectiveDef;\n    }\n    function setCurrentDirectiveDef(def) {\n        currentDirectiveDef = def;\n    }\n    /**\n     * Stores whether directives should be matched to elements.\n     *\n     * When template contains `ngNonBindable` than we need to prevent the runtime form matching\n     * directives on children of that element.\n     *\n     * Example:\n     * ```\n     * <my-comp my-directive>\n     *   Should match component / directive.\n     * </my-comp>\n     * <div ngNonBindable>\n     *   <my-comp my-directive>\n     *     Should not match component / directive because we are in ngNonBindable.\n     *   </my-comp>\n     * </div>\n     * ```\n     */\n    var bindingsEnabled;\n    function getBindingsEnabled() {\n        // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n        return bindingsEnabled;\n    }\n    /**\n     * Enables directive matching on elements.\n     *\n     *  * Example:\n     * ```\n     * <my-comp my-directive>\n     *   Should match component / directive.\n     * </my-comp>\n     * <div ngNonBindable>\n     *   <!-- ɵɵdisableBindings() -->\n     *   <my-comp my-directive>\n     *     Should not match component / directive because we are in ngNonBindable.\n     *   </my-comp>\n     *   <!-- ɵɵenableBindings() -->\n     * </div>\n     * ```\n     *\n     * @codeGenApi\n     */\n    function ɵɵenableBindings() {\n        bindingsEnabled = true;\n    }\n    /**\n     * Disables directive matching on element.\n     *\n     *  * Example:\n     * ```\n     * <my-comp my-directive>\n     *   Should match component / directive.\n     * </my-comp>\n     * <div ngNonBindable>\n     *   <!-- ɵɵdisableBindings() -->\n     *   <my-comp my-directive>\n     *     Should not match component / directive because we are in ngNonBindable.\n     *   </my-comp>\n     *   <!-- ɵɵenableBindings() -->\n     * </div>\n     * ```\n     *\n     * @codeGenApi\n     */\n    function ɵɵdisableBindings() {\n        bindingsEnabled = false;\n    }\n    function getLView() {\n        return lView;\n    }\n    /**\n     * Used as the starting directive id value.\n     *\n     * All subsequent directives are incremented from this value onwards.\n     * The reason why this value is `1` instead of `0` is because the `0`\n     * value is reserved for the template.\n     */\n    var MIN_DIRECTIVE_ID = 1;\n    var activeDirectiveId = MIN_DIRECTIVE_ID;\n    /**\n     * Position depth (with respect from leaf to root) in a directive sub-class inheritance chain.\n     */\n    var activeDirectiveSuperClassDepthPosition = 0;\n    /**\n     * Total count of how many directives are a part of an inheritance chain.\n     *\n     * When directives are sub-classed (extended) from one to another, Angular\n     * needs to keep track of exactly how many were encountered so it can accurately\n     * generate the next directive id (once the next directive id is visited).\n     * Normally the next directive id just a single incremented value from the\n     * previous one, however, if the previous directive is a part of an inheritance\n     * chain (a series of sub-classed directives) then the incremented value must\n     * also take into account the total amount of sub-classed values.\n     *\n     * Note that this value resets back to zero once the next directive is\n     * visited (when `incrementActiveDirectiveId` or `setActiveHostElement`\n     * is called).\n     */\n    var activeDirectiveSuperClassHeight = 0;\n    /**\n     * Sets the active directive host element and resets the directive id value\n     * (when the provided elementIndex value has changed).\n     *\n     * @param elementIndex the element index value for the host element where\n     *                     the directive/component instance lives\n     */\n    function setActiveHostElement(elementIndex) {\n        if (elementIndex === void 0) { elementIndex = null; }\n        if (_selectedIndex !== elementIndex) {\n            setSelectedIndex(elementIndex == null ? -1 : elementIndex);\n            activeDirectiveId = elementIndex == null ? 0 : MIN_DIRECTIVE_ID;\n            activeDirectiveSuperClassDepthPosition = 0;\n            activeDirectiveSuperClassHeight = 0;\n        }\n    }\n    /**\n     * Returns the current id value of the current directive.\n     *\n     * For example we have an element that has two directives on it:\n     * <div dir-one dir-two></div>\n     *\n     * dirOne->hostBindings() (id == 1)\n     * dirTwo->hostBindings() (id == 2)\n     *\n     * Note that this is only active when `hostBinding` functions are being processed.\n     *\n     * Note that directive id values are specific to an element (this means that\n     * the same id value could be present on another element with a completely\n     * different set of directives).\n     */\n    function getActiveDirectiveId() {\n        return activeDirectiveId;\n    }\n    /**\n     * Increments the current directive id value.\n     *\n     * For example we have an element that has two directives on it:\n     * <div dir-one dir-two></div>\n     *\n     * dirOne->hostBindings() (index = 1)\n     * // increment\n     * dirTwo->hostBindings() (index = 2)\n     *\n     * Depending on whether or not a previous directive had any inherited\n     * directives present, that value will be incremented in addition\n     * to the id jumping up by one.\n     *\n     * Note that this is only active when `hostBinding` functions are being processed.\n     *\n     * Note that directive id values are specific to an element (this means that\n     * the same id value could be present on another element with a completely\n     * different set of directives).\n     */\n    function incrementActiveDirectiveId() {\n        activeDirectiveId += 1 + activeDirectiveSuperClassHeight;\n        // because we are dealing with a new directive this\n        // means we have exited out of the inheritance chain\n        activeDirectiveSuperClassDepthPosition = 0;\n        activeDirectiveSuperClassHeight = 0;\n    }\n    /**\n     * Set the current super class (reverse inheritance) position depth for a directive.\n     *\n     * For example we have two directives: Child and Other (but Child is a sub-class of Parent)\n     * <div child-dir other-dir></div>\n     *\n     * // increment\n     * parentInstance->hostBindings() (depth = 1)\n     * // decrement\n     * childInstance->hostBindings() (depth = 0)\n     * otherInstance->hostBindings() (depth = 0 b/c it's a different directive)\n     *\n     * Note that this is only active when `hostBinding` functions are being processed.\n     */\n    function adjustActiveDirectiveSuperClassDepthPosition(delta) {\n        activeDirectiveSuperClassDepthPosition += delta;\n        // we keep track of the height value so that when the next directive is visited\n        // then Angular knows to generate a new directive id value which has taken into\n        // account how many sub-class directives were a part of the previous directive.\n        activeDirectiveSuperClassHeight =\n            Math.max(activeDirectiveSuperClassHeight, activeDirectiveSuperClassDepthPosition);\n    }\n    /**\n     * Returns he current depth of the super/sub class inheritance chain.\n     *\n     * This will return how many inherited directive/component classes\n     * exist in the current chain.\n     *\n     * ```typescript\n     * @Directive({ selector: '[super-dir]' })\n     * class SuperDir {}\n     *\n     * @Directive({ selector: '[sub-dir]' })\n     * class SubDir extends SuperDir {}\n     *\n     * // if `<div sub-dir>` is used then the super class height is `1`\n     * // if `<div super-dir>` is used then the super class height is `0`\n     * ```\n     */\n    function getActiveDirectiveSuperClassHeight() {\n        return activeDirectiveSuperClassHeight;\n    }\n    /**\n     * Returns the current super class (reverse inheritance) depth for a directive.\n     *\n     * This is designed to help instruction code distinguish different hostBindings\n     * calls from each other when a directive has extended from another directive.\n     * Normally using the directive id value is enough, but with the case\n     * of parent/sub-class directive inheritance more information is required.\n     *\n     * Note that this is only active when `hostBinding` functions are being processed.\n     */\n    function getActiveDirectiveSuperClassDepth() {\n        return activeDirectiveSuperClassDepthPosition;\n    }\n    /**\n     * Restores `contextViewData` to the given OpaqueViewState instance.\n     *\n     * Used in conjunction with the getCurrentView() instruction to save a snapshot\n     * of the current view and restore it when listeners are invoked. This allows\n     * walking the declaration view tree in listeners to get vars from parent views.\n     *\n     * @param viewToRestore The OpaqueViewState instance to restore.\n     *\n     * @codeGenApi\n     */\n    function ɵɵrestoreView(viewToRestore) {\n        contextLView = viewToRestore;\n    }\n    /** Used to set the parent property when nodes are created and track query results. */\n    var previousOrParentTNode;\n    function getPreviousOrParentTNode() {\n        // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n        return previousOrParentTNode;\n    }\n    function setPreviousOrParentTNode(tNode, _isParent) {\n        previousOrParentTNode = tNode;\n        isParent = _isParent;\n    }\n    function setTNodeAndViewData(tNode, view) {\n        ngDevMode && assertLViewOrUndefined(view);\n        previousOrParentTNode = tNode;\n        lView = view;\n    }\n    /**\n     * If `isParent` is:\n     *  - `true`: then `previousOrParentTNode` points to a parent node.\n     *  - `false`: then `previousOrParentTNode` points to previous node (sibling).\n     */\n    var isParent;\n    function getIsParent() {\n        // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n        return isParent;\n    }\n    function setIsNotParent() {\n        isParent = false;\n    }\n    function setIsParent() {\n        isParent = true;\n    }\n    /** Checks whether a given view is in creation mode */\n    function isCreationMode(view) {\n        if (view === void 0) { view = lView; }\n        return (view[FLAGS] & 4 /* CreationMode */) === 4 /* CreationMode */;\n    }\n    /**\n     * State of the current view being processed.\n     *\n     * An array of nodes (text, element, container, etc), pipes, their bindings, and\n     * any local variables that need to be stored between invocations.\n     */\n    var lView;\n    /**\n     * The last viewData retrieved by nextContext().\n     * Allows building nextContext() and reference() calls.\n     *\n     * e.g. const inner = x().$implicit; const outer = x().$implicit;\n     */\n    var contextLView = null;\n    function getContextLView() {\n        // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n        return contextLView;\n    }\n    /**\n     * In this mode, any changes in bindings will throw an ExpressionChangedAfterChecked error.\n     *\n     * Necessary to support ChangeDetectorRef.checkNoChanges().\n     */\n    var checkNoChangesMode = false;\n    function getCheckNoChangesMode() {\n        // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n        return checkNoChangesMode;\n    }\n    function setCheckNoChangesMode(mode) {\n        checkNoChangesMode = mode;\n    }\n    /**\n     * The root index from which pure function instructions should calculate their binding\n     * indices. In component views, this is TView.bindingStartIndex. In a host binding\n     * context, this is the TView.expandoStartIndex + any dirs/hostVars before the given dir.\n     */\n    var bindingRootIndex = -1;\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    function getBindingRoot() {\n        return bindingRootIndex;\n    }\n    function setBindingRoot(value) {\n        bindingRootIndex = value;\n    }\n    /**\n     * Current index of a View or Content Query which needs to be processed next.\n     * We iterate over the list of Queries and increment current query index at every step.\n     */\n    var currentQueryIndex = 0;\n    function getCurrentQueryIndex() {\n        // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n        return currentQueryIndex;\n    }\n    function setCurrentQueryIndex(value) {\n        currentQueryIndex = value;\n    }\n    /**\n     * Swap the current state with a new state.\n     *\n     * For performance reasons we store the state in the top level of the module.\n     * This way we minimize the number of properties to read. Whenever a new view\n     * is entered we have to store the state for later, and when the view is\n     * exited the state has to be restored\n     *\n     * @param newView New state to become active\n     * @param host Element to which the View is a child of\n     * @returns the previous state;\n     */\n    function enterView(newView, hostTNode) {\n        ngDevMode && assertLViewOrUndefined(newView);\n        var oldView = lView;\n        if (newView) {\n            var tView = newView[TVIEW];\n            bindingRootIndex = tView.bindingStartIndex;\n        }\n        previousOrParentTNode = hostTNode;\n        isParent = true;\n        lView = contextLView = newView;\n        return oldView;\n    }\n    function nextContextImpl(level) {\n        if (level === void 0) { level = 1; }\n        contextLView = walkUpViews(level, contextLView);\n        return contextLView[CONTEXT];\n    }\n    function walkUpViews(nestingLevel, currentView) {\n        while (nestingLevel > 0) {\n            ngDevMode && assertDefined(currentView[DECLARATION_VIEW], 'Declaration view should be defined if nesting level is greater than 0.');\n            currentView = currentView[DECLARATION_VIEW];\n            nestingLevel--;\n        }\n        return currentView;\n    }\n    /**\n     * Resets the application state.\n     */\n    function resetComponentState() {\n        isParent = false;\n        previousOrParentTNode = null;\n        elementDepthCount = 0;\n        bindingsEnabled = true;\n    }\n    /**\n     * Used in lieu of enterView to make it clear when we are exiting a child view. This makes\n     * the direction of traversal (up or down the view tree) a bit clearer.\n     *\n     * @param newView New state to become active\n     */\n    function leaveView(newView) {\n        var tView = lView[TVIEW];\n        if (isCreationMode(lView)) {\n            lView[FLAGS] &= ~4 /* CreationMode */;\n        }\n        else {\n            try {\n                resetPreOrderHookFlags(lView);\n                executeHooks(lView, tView.viewHooks, tView.viewCheckHooks, checkNoChangesMode, 2 /* AfterViewInitHooksToBeRun */, undefined);\n            }\n            finally {\n                // Views are clean and in update mode after being checked, so these bits are cleared\n                lView[FLAGS] &= ~(64 /* Dirty */ | 8 /* FirstLViewPass */);\n                lView[BINDING_INDEX] = tView.bindingStartIndex;\n            }\n        }\n        setCachedStylingContext(null);\n        enterView(newView, null);\n    }\n    var _selectedIndex = -1;\n    /**\n     * Gets the most recent index passed to {@link select}\n     *\n     * Used with {@link property} instruction (and more in the future) to identify the index in the\n     * current `LView` to act on.\n     */\n    function getSelectedIndex() {\n        return _selectedIndex;\n    }\n    /**\n     * Sets the most recent index passed to {@link select}\n     *\n     * Used with {@link property} instruction (and more in the future) to identify the index in the\n     * current `LView` to act on.\n     */\n    function setSelectedIndex(index) {\n        _selectedIndex = index;\n        // remove the styling context from the cache\n        // because we are now on a different element\n        setCachedStylingContext(null);\n    }\n    var _currentNamespace = null;\n    /**\n     * Sets the namespace used to create elements to `'http://www.w3.org/2000/svg'` in global state.\n     *\n     * @codeGenApi\n     */\n    function ɵɵnamespaceSVG() {\n        _currentNamespace = 'http://www.w3.org/2000/svg';\n    }\n    /**\n     * Sets the namespace used to create elements to `'http://www.w3.org/1998/MathML/'` in global state.\n     *\n     * @codeGenApi\n     */\n    function ɵɵnamespaceMathML() {\n        _currentNamespace = 'http://www.w3.org/1998/MathML/';\n    }\n    /**\n     * Sets the namespace used to create elements no `null`, which forces element creation to use\n     * `createElement` rather than `createElementNS`.\n     *\n     * @codeGenApi\n     */\n    function ɵɵnamespaceHTML() {\n        _currentNamespace = null;\n    }\n    function getNamespace() {\n        return _currentNamespace;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var BRAND = '__SANITIZER_TRUSTED_BRAND__';\n    function allowSanitizationBypass(value, type) {\n        return (value instanceof String && value[BRAND] === type);\n    }\n    /**\n     * Mark `html` string as trusted.\n     *\n     * This function wraps the trusted string in `String` and brands it in a way which makes it\n     * recognizable to {@link htmlSanitizer} to be trusted implicitly.\n     *\n     * @param trustedHtml `html` string which needs to be implicitly trusted.\n     * @returns a `html` `String` which has been branded to be implicitly trusted.\n     */\n    function bypassSanitizationTrustHtml(trustedHtml) {\n        return bypassSanitizationTrustString(trustedHtml, \"Html\" /* Html */);\n    }\n    /**\n     * Mark `style` string as trusted.\n     *\n     * This function wraps the trusted string in `String` and brands it in a way which makes it\n     * recognizable to {@link styleSanitizer} to be trusted implicitly.\n     *\n     * @param trustedStyle `style` string which needs to be implicitly trusted.\n     * @returns a `style` `String` which has been branded to be implicitly trusted.\n     */\n    function bypassSanitizationTrustStyle(trustedStyle) {\n        return bypassSanitizationTrustString(trustedStyle, \"Style\" /* Style */);\n    }\n    /**\n     * Mark `script` string as trusted.\n     *\n     * This function wraps the trusted string in `String` and brands it in a way which makes it\n     * recognizable to {@link scriptSanitizer} to be trusted implicitly.\n     *\n     * @param trustedScript `script` string which needs to be implicitly trusted.\n     * @returns a `script` `String` which has been branded to be implicitly trusted.\n     */\n    function bypassSanitizationTrustScript(trustedScript) {\n        return bypassSanitizationTrustString(trustedScript, \"Script\" /* Script */);\n    }\n    /**\n     * Mark `url` string as trusted.\n     *\n     * This function wraps the trusted string in `String` and brands it in a way which makes it\n     * recognizable to {@link urlSanitizer} to be trusted implicitly.\n     *\n     * @param trustedUrl `url` string which needs to be implicitly trusted.\n     * @returns a `url` `String` which has been branded to be implicitly trusted.\n     */\n    function bypassSanitizationTrustUrl(trustedUrl) {\n        return bypassSanitizationTrustString(trustedUrl, \"Url\" /* Url */);\n    }\n    /**\n     * Mark `url` string as trusted.\n     *\n     * This function wraps the trusted string in `String` and brands it in a way which makes it\n     * recognizable to {@link resourceUrlSanitizer} to be trusted implicitly.\n     *\n     * @param trustedResourceUrl `url` string which needs to be implicitly trusted.\n     * @returns a `url` `String` which has been branded to be implicitly trusted.\n     */\n    function bypassSanitizationTrustResourceUrl(trustedResourceUrl) {\n        return bypassSanitizationTrustString(trustedResourceUrl, \"ResourceUrl\" /* ResourceUrl */);\n    }\n    function bypassSanitizationTrustString(trustedString, mode) {\n        var trusted = new String(trustedString);\n        trusted[BRAND] = mode;\n        return trusted;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * This file is used to control if the default rendering pipeline should be `ViewEngine` or `Ivy`.\n     *\n     * For more information on how to run and debug tests with either Ivy or View Engine (legacy),\n     * please see [BAZEL.md](./docs/BAZEL.md).\n     */\n    var _devMode = true;\n    var _runModeLocked = false;\n    /**\n     * Returns whether Angular is in development mode. After called once,\n     * the value is locked and won't change any more.\n     *\n     * By default, this is true, unless a user calls `enableProdMode` before calling this.\n     *\n     * @publicApi\n     */\n    function isDevMode() {\n        _runModeLocked = true;\n        return _devMode;\n    }\n    /**\n     * Disable Angular's development mode, which turns off assertions and other\n     * checks within the framework.\n     *\n     * One important assertion this disables verifies that a change detection pass\n     * does not result in additional changes to any bindings (also known as\n     * unidirectional data flow).\n     *\n     * @publicApi\n     */\n    function enableProdMode() {\n        if (_runModeLocked) {\n            throw new Error('Cannot enable prod mode after platform setup.');\n        }\n        _devMode = false;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * This helper class is used to get hold of an inert tree of DOM elements containing dirty HTML\n     * that needs sanitizing.\n     * Depending upon browser support we must use one of three strategies for doing this.\n     * Support: Safari 10.x -> XHR strategy\n     * Support: Firefox -> DomParser strategy\n     * Default: InertDocument strategy\n     */\n    var InertBodyHelper = /** @class */ (function () {\n        function InertBodyHelper(defaultDoc) {\n            this.defaultDoc = defaultDoc;\n            this.inertDocument = this.defaultDoc.implementation.createHTMLDocument('sanitization-inert');\n            this.inertBodyElement = this.inertDocument.body;\n            if (this.inertBodyElement == null) {\n                // usually there should be only one body element in the document, but IE doesn't have any, so\n                // we need to create one.\n                var inertHtml = this.inertDocument.createElement('html');\n                this.inertDocument.appendChild(inertHtml);\n                this.inertBodyElement = this.inertDocument.createElement('body');\n                inertHtml.appendChild(this.inertBodyElement);\n            }\n            this.inertBodyElement.innerHTML = '<svg><g onload=\"this.parentNode.remove()\"></g></svg>';\n            if (this.inertBodyElement.querySelector && !this.inertBodyElement.querySelector('svg')) {\n                // We just hit the Safari 10.1 bug - which allows JS to run inside the SVG G element\n                // so use the XHR strategy.\n                this.getInertBodyElement = this.getInertBodyElement_XHR;\n                return;\n            }\n            this.inertBodyElement.innerHTML =\n                '<svg><p><style><img src=\"</style><img src=x onerror=alert(1)//\">';\n            if (this.inertBodyElement.querySelector && this.inertBodyElement.querySelector('svg img')) {\n                // We just hit the Firefox bug - which prevents the inner img JS from being sanitized\n                // so use the DOMParser strategy, if it is available.\n                // If the DOMParser is not available then we are not in Firefox (Server/WebWorker?) so we\n                // fall through to the default strategy below.\n                if (isDOMParserAvailable()) {\n                    this.getInertBodyElement = this.getInertBodyElement_DOMParser;\n                    return;\n                }\n            }\n            // None of the bugs were hit so it is safe for us to use the default InertDocument strategy\n            this.getInertBodyElement = this.getInertBodyElement_InertDocument;\n        }\n        /**\n         * Use XHR to create and fill an inert body element (on Safari 10.1)\n         * See\n         * https://github.com/cure53/DOMPurify/blob/a992d3a75031cb8bb032e5ea8399ba972bdf9a65/src/purify.js#L439-L449\n         */\n        InertBodyHelper.prototype.getInertBodyElement_XHR = function (html) {\n            // We add these extra elements to ensure that the rest of the content is parsed as expected\n            // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\n            // `<head>` tag.\n            html = '<body><remove></remove>' + html + '</body>';\n            try {\n                html = encodeURI(html);\n            }\n            catch (_a) {\n                return null;\n            }\n            var xhr = new XMLHttpRequest();\n            xhr.responseType = 'document';\n            xhr.open('GET', 'data:text/html;charset=utf-8,' + html, false);\n            xhr.send(undefined);\n            var body = xhr.response.body;\n            body.removeChild(body.firstChild);\n            return body;\n        };\n        /**\n         * Use DOMParser to create and fill an inert body element (on Firefox)\n         * See https://github.com/cure53/DOMPurify/releases/tag/0.6.7\n         *\n         */\n        InertBodyHelper.prototype.getInertBodyElement_DOMParser = function (html) {\n            // We add these extra elements to ensure that the rest of the content is parsed as expected\n            // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\n            // `<head>` tag.\n            html = '<body><remove></remove>' + html + '</body>';\n            try {\n                var body = new window\n                    .DOMParser()\n                    .parseFromString(html, 'text/html')\n                    .body;\n                body.removeChild(body.firstChild);\n                return body;\n            }\n            catch (_a) {\n                return null;\n            }\n        };\n        /**\n         * Use an HTML5 `template` element, if supported, or an inert body element created via\n         * `createHtmlDocument` to create and fill an inert DOM element.\n         * This is the default sane strategy to use if the browser does not require one of the specialised\n         * strategies above.\n         */\n        InertBodyHelper.prototype.getInertBodyElement_InertDocument = function (html) {\n            // Prefer using <template> element if supported.\n            var templateEl = this.inertDocument.createElement('template');\n            if ('content' in templateEl) {\n                templateEl.innerHTML = html;\n                return templateEl;\n            }\n            this.inertBodyElement.innerHTML = html;\n            // Support: IE 9-11 only\n            // strip custom-namespaced attributes on IE<=11\n            if (this.defaultDoc.documentMode) {\n                this.stripCustomNsAttrs(this.inertBodyElement);\n            }\n            return this.inertBodyElement;\n        };\n        /**\n         * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'\n         * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g.\n         * 'ns1:xlink:foo').\n         *\n         * This is undesirable since we don't want to allow any of these custom attributes. This method\n         * strips them all.\n         */\n        InertBodyHelper.prototype.stripCustomNsAttrs = function (el) {\n            var elAttrs = el.attributes;\n            // loop backwards so that we can support removals.\n            for (var i = elAttrs.length - 1; 0 < i; i--) {\n                var attrib = elAttrs.item(i);\n                var attrName = attrib.name;\n                if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {\n                    el.removeAttribute(attrName);\n                }\n            }\n            var childNode = el.firstChild;\n            while (childNode) {\n                if (childNode.nodeType === Node.ELEMENT_NODE)\n                    this.stripCustomNsAttrs(childNode);\n                childNode = childNode.nextSibling;\n            }\n        };\n        return InertBodyHelper;\n    }());\n    /**\n     * We need to determine whether the DOMParser exists in the global context.\n     * The try-catch is because, on some browsers, trying to access this property\n     * on window can actually throw an error.\n     *\n     * @suppress {uselessCode}\n     */\n    function isDOMParserAvailable() {\n        try {\n            return !!window.DOMParser;\n        }\n        catch (_a) {\n            return false;\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A pattern that recognizes a commonly useful subset of URLs that are safe.\n     *\n     * This regular expression matches a subset of URLs that will not cause script\n     * execution if used in URL context within a HTML document. Specifically, this\n     * regular expression matches if (comment from here on and regex copied from\n     * Soy's EscapingConventions):\n     * (1) Either an allowed protocol (http, https, mailto or ftp).\n     * (2) or no protocol.  A protocol must be followed by a colon. The below\n     *     allows that by allowing colons only after one of the characters [/?#].\n     *     A colon after a hash (#) must be in the fragment.\n     *     Otherwise, a colon after a (?) must be in a query.\n     *     Otherwise, a colon after a single solidus (/) must be in a path.\n     *     Otherwise, a colon after a double solidus (//) must be in the authority\n     *     (before port).\n     *\n     * The pattern disallows &, used in HTML entity declarations before\n     * one of the characters in [/?#]. This disallows HTML entities used in the\n     * protocol name, which should never happen, e.g. \"h&#116;tp\" for \"http\".\n     * It also disallows HTML entities in the first path part of a relative path,\n     * e.g. \"foo&lt;bar/baz\".  Our existing escaping functions should not produce\n     * that. More importantly, it disallows masking of a colon,\n     * e.g. \"javascript&#58;...\".\n     *\n     * This regular expression was taken from the Closure sanitization library.\n     */\n    var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;\n    /** A pattern that matches safe data URLs. Only matches image, video and audio types. */\n    var DATA_URL_PATTERN = /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\\/]+=*$/i;\n    function _sanitizeUrl(url) {\n        url = String(url);\n        if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN))\n            return url;\n        if (isDevMode()) {\n            console.warn(\"WARNING: sanitizing unsafe URL value \" + url + \" (see http://g.co/ng/security#xss)\");\n        }\n        return 'unsafe:' + url;\n    }\n    function sanitizeSrcset(srcset) {\n        srcset = String(srcset);\n        return srcset.split(',').map(function (srcset) { return _sanitizeUrl(srcset.trim()); }).join(', ');\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function tagSet(tags) {\n        var e_1, _a;\n        var res = {};\n        try {\n            for (var _b = __values(tags.split(',')), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var t = _c.value;\n                res[t] = true;\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return res;\n    }\n    function merge() {\n        var e_2, _a;\n        var sets = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            sets[_i] = arguments[_i];\n        }\n        var res = {};\n        try {\n            for (var sets_1 = __values(sets), sets_1_1 = sets_1.next(); !sets_1_1.done; sets_1_1 = sets_1.next()) {\n                var s = sets_1_1.value;\n                for (var v in s) {\n                    if (s.hasOwnProperty(v))\n                        res[v] = true;\n                }\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (sets_1_1 && !sets_1_1.done && (_a = sets_1.return)) _a.call(sets_1);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n        return res;\n    }\n    // Good source of info about elements and attributes\n    // http://dev.w3.org/html5/spec/Overview.html#semantics\n    // http://simon.html5.org/html-elements\n    // Safe Void Elements - HTML5\n    // http://dev.w3.org/html5/spec/Overview.html#void-elements\n    var VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');\n    // Elements that you can, intentionally, leave open (and which close themselves)\n    // http://dev.w3.org/html5/spec/Overview.html#optional-tags\n    var OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');\n    var OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');\n    var OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);\n    // Safe Block Elements - HTML5\n    var BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' +\n        'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +\n        'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));\n    // Inline Elements - HTML5\n    var INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' +\n        'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' +\n        'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));\n    var VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);\n    // Attributes that have href and hence need to be sanitized\n    var URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');\n    // Attributes that have special href set hence need to be sanitized\n    var SRCSET_ATTRS = tagSet('srcset');\n    var HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' +\n        'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' +\n        'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' +\n        'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' +\n        'valign,value,vspace,width');\n    // Accessibility attributes as per WAI-ARIA 1.1 (W3C Working Draft 14 December 2018)\n    var ARIA_ATTRS = tagSet('aria-activedescendant,aria-atomic,aria-autocomplete,aria-busy,aria-checked,aria-colcount,aria-colindex,' +\n        'aria-colspan,aria-controls,aria-current,aria-describedby,aria-details,aria-disabled,aria-dropeffect,' +\n        'aria-errormessage,aria-expanded,aria-flowto,aria-grabbed,aria-haspopup,aria-hidden,aria-invalid,' +\n        'aria-keyshortcuts,aria-label,aria-labelledby,aria-level,aria-live,aria-modal,aria-multiline,' +\n        'aria-multiselectable,aria-orientation,aria-owns,aria-placeholder,aria-posinset,aria-pressed,aria-readonly,' +\n        'aria-relevant,aria-required,aria-roledescription,aria-rowcount,aria-rowindex,aria-rowspan,aria-selected,' +\n        'aria-setsize,aria-sort,aria-valuemax,aria-valuemin,aria-valuenow,aria-valuetext');\n    // NB: This currently consciously doesn't support SVG. SVG sanitization has had several security\n    // issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via\n    // innerHTML is required, SVG attributes should be added here.\n    // NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those\n    // can be sanitized, but they increase security surface area without a legitimate use case, so they\n    // are left out here.\n    var VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS, ARIA_ATTRS);\n    // Elements whose content should not be traversed/preserved, if the elements themselves are invalid.\n    //\n    // Typically, `<invalid>Some content</invalid>` would traverse (and in this case preserve)\n    // `Some content`, but strip `invalid-element` opening/closing tags. For some elements, though, we\n    // don't want to preserve the content, if the elements themselves are going to be removed.\n    var SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS = tagSet('script,style,template');\n    /**\n     * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe\n     * attributes.\n     */\n    var SanitizingHtmlSerializer = /** @class */ (function () {\n        function SanitizingHtmlSerializer() {\n            // Explicitly track if something was stripped, to avoid accidentally warning of sanitization just\n            // because characters were re-encoded.\n            this.sanitizedSomething = false;\n            this.buf = [];\n        }\n        SanitizingHtmlSerializer.prototype.sanitizeChildren = function (el) {\n            // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.\n            // However this code never accesses properties off of `document` before deleting its contents\n            // again, so it shouldn't be vulnerable to DOM clobbering.\n            var current = el.firstChild;\n            var traverseContent = true;\n            while (current) {\n                if (current.nodeType === Node.ELEMENT_NODE) {\n                    traverseContent = this.startElement(current);\n                }\n                else if (current.nodeType === Node.TEXT_NODE) {\n                    this.chars(current.nodeValue);\n                }\n                else {\n                    // Strip non-element, non-text nodes.\n                    this.sanitizedSomething = true;\n                }\n                if (traverseContent && current.firstChild) {\n                    current = current.firstChild;\n                    continue;\n                }\n                while (current) {\n                    // Leaving the element. Walk up and to the right, closing tags as we go.\n                    if (current.nodeType === Node.ELEMENT_NODE) {\n                        this.endElement(current);\n                    }\n                    var next = this.checkClobberedElement(current, current.nextSibling);\n                    if (next) {\n                        current = next;\n                        break;\n                    }\n                    current = this.checkClobberedElement(current, current.parentNode);\n                }\n            }\n            return this.buf.join('');\n        };\n        /**\n         * Sanitizes an opening element tag (if valid) and returns whether the element's contents should\n         * be traversed. Element content must always be traversed (even if the element itself is not\n         * valid/safe), unless the element is one of `SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS`.\n         *\n         * @param element The element to sanitize.\n         * @return True if the element's contents should be traversed.\n         */\n        SanitizingHtmlSerializer.prototype.startElement = function (element) {\n            var tagName = element.nodeName.toLowerCase();\n            if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\n                this.sanitizedSomething = true;\n                return !SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS.hasOwnProperty(tagName);\n            }\n            this.buf.push('<');\n            this.buf.push(tagName);\n            var elAttrs = element.attributes;\n            for (var i = 0; i < elAttrs.length; i++) {\n                var elAttr = elAttrs.item(i);\n                var attrName = elAttr.name;\n                var lower = attrName.toLowerCase();\n                if (!VALID_ATTRS.hasOwnProperty(lower)) {\n                    this.sanitizedSomething = true;\n                    continue;\n                }\n                var value = elAttr.value;\n                // TODO(martinprobst): Special case image URIs for data:image/...\n                if (URI_ATTRS[lower])\n                    value = _sanitizeUrl(value);\n                if (SRCSET_ATTRS[lower])\n                    value = sanitizeSrcset(value);\n                this.buf.push(' ', attrName, '=\"', encodeEntities(value), '\"');\n            }\n            this.buf.push('>');\n            return true;\n        };\n        SanitizingHtmlSerializer.prototype.endElement = function (current) {\n            var tagName = current.nodeName.toLowerCase();\n            if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {\n                this.buf.push('</');\n                this.buf.push(tagName);\n                this.buf.push('>');\n            }\n        };\n        SanitizingHtmlSerializer.prototype.chars = function (chars) { this.buf.push(encodeEntities(chars)); };\n        SanitizingHtmlSerializer.prototype.checkClobberedElement = function (node, nextNode) {\n            if (nextNode &&\n                (node.compareDocumentPosition(nextNode) &\n                    Node.DOCUMENT_POSITION_CONTAINED_BY) === Node.DOCUMENT_POSITION_CONTAINED_BY) {\n                throw new Error(\"Failed to sanitize html because the element is clobbered: \" + node.outerHTML);\n            }\n            return nextNode;\n        };\n        return SanitizingHtmlSerializer;\n    }());\n    // Regular Expressions for parsing tags and attributes\n    var SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n    // ! to ~ is the ASCII range.\n    var NON_ALPHANUMERIC_REGEXP = /([^\\#-~ |!])/g;\n    /**\n     * Escapes all potentially dangerous characters, so that the\n     * resulting string can be safely inserted into attribute or\n     * element text.\n     * @param value\n     */\n    function encodeEntities(value) {\n        return value.replace(/&/g, '&amp;')\n            .replace(SURROGATE_PAIR_REGEXP, function (match) {\n            var hi = match.charCodeAt(0);\n            var low = match.charCodeAt(1);\n            return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';\n        })\n            .replace(NON_ALPHANUMERIC_REGEXP, function (match) { return '&#' + match.charCodeAt(0) + ';'; })\n            .replace(/</g, '&lt;')\n            .replace(/>/g, '&gt;');\n    }\n    var inertBodyHelper;\n    /**\n     * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to\n     * the DOM in a browser environment.\n     */\n    function _sanitizeHtml(defaultDoc, unsafeHtmlInput) {\n        var inertBodyElement = null;\n        try {\n            inertBodyHelper = inertBodyHelper || new InertBodyHelper(defaultDoc);\n            // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).\n            var unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';\n            inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n            // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser\n            // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.\n            var mXSSAttempts = 5;\n            var parsedHtml = unsafeHtml;\n            do {\n                if (mXSSAttempts === 0) {\n                    throw new Error('Failed to sanitize html because the input is unstable');\n                }\n                mXSSAttempts--;\n                unsafeHtml = parsedHtml;\n                parsedHtml = inertBodyElement.innerHTML;\n                inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n            } while (unsafeHtml !== parsedHtml);\n            var sanitizer = new SanitizingHtmlSerializer();\n            var safeHtml = sanitizer.sanitizeChildren(getTemplateContent(inertBodyElement) || inertBodyElement);\n            if (isDevMode() && sanitizer.sanitizedSomething) {\n                console.warn('WARNING: sanitizing HTML stripped some content, see http://g.co/ng/security#xss');\n            }\n            return safeHtml;\n        }\n        finally {\n            // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.\n            if (inertBodyElement) {\n                var parent_1 = getTemplateContent(inertBodyElement) || inertBodyElement;\n                while (parent_1.firstChild) {\n                    parent_1.removeChild(parent_1.firstChild);\n                }\n            }\n        }\n    }\n    function getTemplateContent(el) {\n        return 'content' in el /** Microsoft/TypeScript#21517 */ && isTemplateElement(el) ?\n            el.content :\n            null;\n    }\n    function isTemplateElement(el) {\n        return el.nodeType === Node.ELEMENT_NODE && el.nodeName === 'TEMPLATE';\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    (function (SecurityContext) {\n        SecurityContext[SecurityContext[\"NONE\"] = 0] = \"NONE\";\n        SecurityContext[SecurityContext[\"HTML\"] = 1] = \"HTML\";\n        SecurityContext[SecurityContext[\"STYLE\"] = 2] = \"STYLE\";\n        SecurityContext[SecurityContext[\"SCRIPT\"] = 3] = \"SCRIPT\";\n        SecurityContext[SecurityContext[\"URL\"] = 4] = \"URL\";\n        SecurityContext[SecurityContext[\"RESOURCE_URL\"] = 5] = \"RESOURCE_URL\";\n    })(exports.SecurityContext || (exports.SecurityContext = {}));\n    /**\n     * Sanitizer is used by the views to sanitize potentially dangerous values.\n     *\n     * @publicApi\n     */\n    var Sanitizer = /** @class */ (function () {\n        function Sanitizer() {\n        }\n        return Sanitizer;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Regular expression for safe style values.\n     *\n     * Quotes (\" and ') are allowed, but a check must be done elsewhere to ensure they're balanced.\n     *\n     * ',' allows multiple values to be assigned to the same property (e.g. background-attachment or\n     * font-family) and hence could allow multiple values to get injected, but that should pose no risk\n     * of XSS.\n     *\n     * The function expression checks only for XSS safety, not for CSS validity.\n     *\n     * This regular expression was taken from the Closure sanitization library, and augmented for\n     * transformation values.\n     */\n    var VALUES = '[-,.\"\\'%_!# a-zA-Z0-9]+';\n    var TRANSFORMATION_FNS = '(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?';\n    var COLOR_FNS = '(?:rgb|hsl)a?';\n    var GRADIENTS = '(?:repeating-)?(?:linear|radial)-gradient';\n    var CSS3_FNS = '(?:calc|attr)';\n    var FN_ARGS = '\\\\([-0-9.%, #a-zA-Z]+\\\\)';\n    var SAFE_STYLE_VALUE = new RegExp(\"^(\" + VALUES + \"|\" +\n        (\"(?:\" + TRANSFORMATION_FNS + \"|\" + COLOR_FNS + \"|\" + GRADIENTS + \"|\" + CSS3_FNS + \")\") +\n        (FN_ARGS + \")$\"), 'g');\n    /**\n     * Matches a `url(...)` value with an arbitrary argument as long as it does\n     * not contain parentheses.\n     *\n     * The URL value still needs to be sanitized separately.\n     *\n     * `url(...)` values are a very common use case, e.g. for `background-image`. With carefully crafted\n     * CSS style rules, it is possible to construct an information leak with `url` values in CSS, e.g.\n     * by observing whether scroll bars are displayed, or character ranges used by a font face\n     * definition.\n     *\n     * Angular only allows binding CSS values (as opposed to entire CSS rules), so it is unlikely that\n     * binding a URL value without further cooperation from the page will cause an information leak, and\n     * if so, it is just a leak, not a full blown XSS vulnerability.\n     *\n     * Given the common use case, low likelihood of attack vector, and low impact of an attack, this\n     * code is permissive and allows URLs that sanitize otherwise.\n     */\n    var URL_RE = /^url\\(([^)]+)\\)$/;\n    /**\n     * Checks that quotes (\" and ') are properly balanced inside a string. Assumes\n     * that neither escape (\\) nor any other character that could result in\n     * breaking out of a string parsing context are allowed;\n     * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.\n     *\n     * This code was taken from the Closure sanitization library.\n     */\n    function hasBalancedQuotes(value) {\n        var outsideSingle = true;\n        var outsideDouble = true;\n        for (var i = 0; i < value.length; i++) {\n            var c = value.charAt(i);\n            if (c === '\\'' && outsideDouble) {\n                outsideSingle = !outsideSingle;\n            }\n            else if (c === '\"' && outsideSingle) {\n                outsideDouble = !outsideDouble;\n            }\n        }\n        return outsideSingle && outsideDouble;\n    }\n    /**\n     * Sanitizes the given untrusted CSS style property value (i.e. not an entire object, just a single\n     * value) and returns a value that is safe to use in a browser environment.\n     */\n    function _sanitizeStyle(value) {\n        value = String(value).trim(); // Make sure it's actually a string.\n        if (!value)\n            return '';\n        // Single url(...) values are supported, but only for URLs that sanitize cleanly. See above for\n        // reasoning behind this.\n        var urlMatch = value.match(URL_RE);\n        if ((urlMatch && _sanitizeUrl(urlMatch[1]) === urlMatch[1]) ||\n            value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {\n            return value; // Safe style values.\n        }\n        if (isDevMode()) {\n            console.warn(\"WARNING: sanitizing unsafe style value \" + value + \" (see http://g.co/ng/security#xss).\");\n        }\n        return 'unsafe';\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * An `html` sanitizer which converts untrusted `html` **string** into trusted string by removing\n     * dangerous content.\n     *\n     * This method parses the `html` and locates potentially dangerous content (such as urls and\n     * javascript) and removes it.\n     *\n     * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustHtml}.\n     *\n     * @param unsafeHtml untrusted `html`, typically from the user.\n     * @returns `html` string which is safe to display to user, because all of the dangerous javascript\n     * and urls have been removed.\n     *\n     * @publicApi\n     */\n    function ɵɵsanitizeHtml(unsafeHtml) {\n        var sanitizer = getSanitizer();\n        if (sanitizer) {\n            return sanitizer.sanitize(exports.SecurityContext.HTML, unsafeHtml) || '';\n        }\n        if (allowSanitizationBypass(unsafeHtml, \"Html\" /* Html */)) {\n            return unsafeHtml.toString();\n        }\n        return _sanitizeHtml(document, renderStringify(unsafeHtml));\n    }\n    /**\n     * A `style` sanitizer which converts untrusted `style` **string** into trusted string by removing\n     * dangerous content.\n     *\n     * This method parses the `style` and locates potentially dangerous content (such as urls and\n     * javascript) and removes it.\n     *\n     * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustStyle}.\n     *\n     * @param unsafeStyle untrusted `style`, typically from the user.\n     * @returns `style` string which is safe to bind to the `style` properties, because all of the\n     * dangerous javascript and urls have been removed.\n     *\n     * @publicApi\n     */\n    function ɵɵsanitizeStyle(unsafeStyle) {\n        var sanitizer = getSanitizer();\n        if (sanitizer) {\n            return sanitizer.sanitize(exports.SecurityContext.STYLE, unsafeStyle) || '';\n        }\n        if (allowSanitizationBypass(unsafeStyle, \"Style\" /* Style */)) {\n            return unsafeStyle.toString();\n        }\n        return _sanitizeStyle(renderStringify(unsafeStyle));\n    }\n    /**\n     * A `url` sanitizer which converts untrusted `url` **string** into trusted string by removing\n     * dangerous\n     * content.\n     *\n     * This method parses the `url` and locates potentially dangerous content (such as javascript) and\n     * removes it.\n     *\n     * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustUrl}.\n     *\n     * @param unsafeUrl untrusted `url`, typically from the user.\n     * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n     * all of the dangerous javascript has been removed.\n     *\n     * @publicApi\n     */\n    function ɵɵsanitizeUrl(unsafeUrl) {\n        var sanitizer = getSanitizer();\n        if (sanitizer) {\n            return sanitizer.sanitize(exports.SecurityContext.URL, unsafeUrl) || '';\n        }\n        if (allowSanitizationBypass(unsafeUrl, \"Url\" /* Url */)) {\n            return unsafeUrl.toString();\n        }\n        return _sanitizeUrl(renderStringify(unsafeUrl));\n    }\n    /**\n     * A `url` sanitizer which only lets trusted `url`s through.\n     *\n     * This passes only `url`s marked trusted by calling {@link bypassSanitizationTrustResourceUrl}.\n     *\n     * @param unsafeResourceUrl untrusted `url`, typically from the user.\n     * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n     * only trusted `url`s have been allowed to pass.\n     *\n     * @publicApi\n     */\n    function ɵɵsanitizeResourceUrl(unsafeResourceUrl) {\n        var sanitizer = getSanitizer();\n        if (sanitizer) {\n            return sanitizer.sanitize(exports.SecurityContext.RESOURCE_URL, unsafeResourceUrl) || '';\n        }\n        if (allowSanitizationBypass(unsafeResourceUrl, \"ResourceUrl\" /* ResourceUrl */)) {\n            return unsafeResourceUrl.toString();\n        }\n        throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');\n    }\n    /**\n     * A `script` sanitizer which only lets trusted javascript through.\n     *\n     * This passes only `script`s marked trusted by calling {@link\n     * bypassSanitizationTrustScript}.\n     *\n     * @param unsafeScript untrusted `script`, typically from the user.\n     * @returns `url` string which is safe to bind to the `<script>` element such as `<img src>`,\n     * because only trusted `scripts` have been allowed to pass.\n     *\n     * @publicApi\n     */\n    function ɵɵsanitizeScript(unsafeScript) {\n        var sanitizer = getSanitizer();\n        if (sanitizer) {\n            return sanitizer.sanitize(exports.SecurityContext.SCRIPT, unsafeScript) || '';\n        }\n        if (allowSanitizationBypass(unsafeScript, \"Script\" /* Script */)) {\n            return unsafeScript.toString();\n        }\n        throw new Error('unsafe value used in a script context');\n    }\n    /**\n     * Detects which sanitizer to use for URL property, based on tag name and prop name.\n     *\n     * The rules are based on the RESOURCE_URL context config from\n     * `packages/compiler/src/schema/dom_security_schema.ts`.\n     * If tag and prop names don't match Resource URL schema, use URL sanitizer.\n     */\n    function getUrlSanitizer(tag, prop) {\n        if ((prop === 'src' && (tag === 'embed' || tag === 'frame' || tag === 'iframe' ||\n            tag === 'media' || tag === 'script')) ||\n            (prop === 'href' && (tag === 'base' || tag === 'link'))) {\n            return ɵɵsanitizeResourceUrl;\n        }\n        return ɵɵsanitizeUrl;\n    }\n    /**\n     * Sanitizes URL, selecting sanitizer function based on tag and property names.\n     *\n     * This function is used in case we can't define security context at compile time, when only prop\n     * name is available. This happens when we generate host bindings for Directives/Components. The\n     * host element is unknown at compile time, so we defer calculation of specific sanitizer to\n     * runtime.\n     *\n     * @param unsafeUrl untrusted `url`, typically from the user.\n     * @param tag target element tag name.\n     * @param prop name of the property that contains the value.\n     * @returns `url` string which is safe to bind.\n     *\n     * @publicApi\n     */\n    function ɵɵsanitizeUrlOrResourceUrl(unsafeUrl, tag, prop) {\n        return getUrlSanitizer(tag, prop)(unsafeUrl);\n    }\n    /**\n     * The default style sanitizer will handle sanitization for style properties by\n     * sanitizing any CSS property that can include a `url` value (usually image-based properties)\n     *\n     * @publicApi\n     */\n    var ɵɵdefaultStyleSanitizer = function (prop, value, mode) {\n        mode = mode || 3 /* ValidateAndSanitize */;\n        var doSanitizeValue = true;\n        if (mode & 1 /* ValidateProperty */) {\n            doSanitizeValue = prop === 'background-image' || prop === 'background' ||\n                prop === 'border-image' || prop === 'filter' || prop === 'list-style' ||\n                prop === 'list-style-image' || prop === 'clip-path';\n        }\n        if (mode & 2 /* SanitizeOnly */) {\n            return doSanitizeValue ? ɵɵsanitizeStyle(value) : value;\n        }\n        else {\n            return doSanitizeValue;\n        }\n    };\n    function validateAgainstEventProperties(name) {\n        if (name.toLowerCase().startsWith('on')) {\n            var msg = \"Binding to event property '\" + name + \"' is disallowed for security reasons, \" +\n                (\"please use (\" + name.slice(2) + \")=...\") +\n                (\"\\nIf '\" + name + \"' is a directive input, make sure the directive is imported by the\") +\n                \" current module.\";\n            throw new Error(msg);\n        }\n    }\n    function validateAgainstEventAttributes(name) {\n        if (name.toLowerCase().startsWith('on')) {\n            var msg = \"Binding to event attribute '\" + name + \"' is disallowed for security reasons, \" +\n                (\"please use (\" + name.slice(2) + \")=...\");\n            throw new Error(msg);\n        }\n    }\n    function getSanitizer() {\n        var lView = getLView();\n        return lView && lView[SANITIZER];\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var TNODE = 8;\n    var PARENT_INJECTOR = 8;\n    var INJECTOR_BLOOM_PARENT_SIZE = 9;\n    var NO_PARENT_INJECTOR = -1;\n    /**\n     * Each injector is saved in 9 contiguous slots in `LView` and 9 contiguous slots in\n     * `TView.data`. This allows us to store information about the current node's tokens (which\n     * can be shared in `TView`) as well as the tokens of its ancestor nodes (which cannot be\n     * shared, so they live in `LView`).\n     *\n     * Each of these slots (aside from the last slot) contains a bloom filter. This bloom filter\n     * determines whether a directive is available on the associated node or not. This prevents us\n     * from searching the directives array at this level unless it's probable the directive is in it.\n     *\n     * See: https://en.wikipedia.org/wiki/Bloom_filter for more about bloom filters.\n     *\n     * Because all injectors have been flattened into `LView` and `TViewData`, they cannot typed\n     * using interfaces as they were previously. The start index of each `LInjector` and `TInjector`\n     * will differ based on where it is flattened into the main array, so it's not possible to know\n     * the indices ahead of time and save their types here. The interfaces are still included here\n     * for documentation purposes.\n     *\n     * export interface LInjector extends Array<any> {\n     *\n     *    // Cumulative bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)\n     *    [0]: number;\n     *\n     *    // Cumulative bloom for directive IDs 32-63\n     *    [1]: number;\n     *\n     *    // Cumulative bloom for directive IDs 64-95\n     *    [2]: number;\n     *\n     *    // Cumulative bloom for directive IDs 96-127\n     *    [3]: number;\n     *\n     *    // Cumulative bloom for directive IDs 128-159\n     *    [4]: number;\n     *\n     *    // Cumulative bloom for directive IDs 160 - 191\n     *    [5]: number;\n     *\n     *    // Cumulative bloom for directive IDs 192 - 223\n     *    [6]: number;\n     *\n     *    // Cumulative bloom for directive IDs 224 - 255\n     *    [7]: number;\n     *\n     *    // We need to store a reference to the injector's parent so DI can keep looking up\n     *    // the injector tree until it finds the dependency it's looking for.\n     *    [PARENT_INJECTOR]: number;\n     * }\n     *\n     * export interface TInjector extends Array<any> {\n     *\n     *    // Shared node bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)\n     *    [0]: number;\n     *\n     *    // Shared node bloom for directive IDs 32-63\n     *    [1]: number;\n     *\n     *    // Shared node bloom for directive IDs 64-95\n     *    [2]: number;\n     *\n     *    // Shared node bloom for directive IDs 96-127\n     *    [3]: number;\n     *\n     *    // Shared node bloom for directive IDs 128-159\n     *    [4]: number;\n     *\n     *    // Shared node bloom for directive IDs 160 - 191\n     *    [5]: number;\n     *\n     *    // Shared node bloom for directive IDs 192 - 223\n     *    [6]: number;\n     *\n     *    // Shared node bloom for directive IDs 224 - 255\n     *    [7]: number;\n     *\n     *    // Necessary to find directive indices for a particular node.\n     *    [TNODE]: TElementNode|TElementContainerNode|TContainerNode;\n     *  }\n     */\n    /**\n    * Factory for creating instances of injectors in the NodeInjector.\n    *\n    * This factory is complicated by the fact that it can resolve `multi` factories as well.\n    *\n    * NOTE: Some of the fields are optional which means that this class has two hidden classes.\n    * - One without `multi` support (most common)\n    * - One with `multi` values, (rare).\n    *\n    * Since VMs can cache up to 4 inline hidden classes this is OK.\n    *\n    * - Single factory: Only `resolving` and `factory` is defined.\n    * - `providers` factory: `componentProviders` is a number and `index = -1`.\n    * - `viewProviders` factory: `componentProviders` is a number and `index` points to `providers`.\n    */\n    var NodeInjectorFactory = /** @class */ (function () {\n        function NodeInjectorFactory(\n        /**\n         * Factory to invoke in order to create a new instance.\n         */\n        factory, \n        /**\n         * Set to `true` if the token is declared in `viewProviders` (or if it is component).\n         */\n        isViewProvider, injectImplementation) {\n            this.factory = factory;\n            /**\n             * Marker set to true during factory invocation to see if we get into recursive loop.\n             * Recursive loop causes an error to be displayed.\n             */\n            this.resolving = false;\n            this.canSeeViewProviders = isViewProvider;\n            this.injectImpl = injectImplementation;\n        }\n        return NodeInjectorFactory;\n    }());\n    function isFactory(obj) {\n        // See: https://jsperf.com/instanceof-vs-getprototypeof\n        return obj !== null && typeof obj == 'object' &&\n            Object.getPrototypeOf(obj) == NodeInjectorFactory.prototype;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function assertNodeType(tNode, type) {\n        assertDefined(tNode, 'should be called with a TNode');\n        assertEqual(tNode.type, type, \"should be a \" + typeName(type));\n    }\n    function assertNodeOfPossibleTypes(tNode) {\n        var types = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            types[_i - 1] = arguments[_i];\n        }\n        assertDefined(tNode, 'should be called with a TNode');\n        var found = types.some(function (type) { return tNode.type === type; });\n        assertEqual(found, true, \"Should be one of \" + types.map(typeName).join(', ') + \" but got \" + typeName(tNode.type));\n    }\n    function typeName(type) {\n        if (type == 1 /* Projection */)\n            return 'Projection';\n        if (type == 0 /* Container */)\n            return 'Container';\n        if (type == 2 /* View */)\n            return 'View';\n        if (type == 3 /* Element */)\n            return 'Element';\n        if (type == 4 /* ElementContainer */)\n            return 'ElementContainer';\n        return '<unknown>';\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // TODO: cleanup once the code is merged in angular/angular\n    var RendererStyleFlags3;\n    (function (RendererStyleFlags3) {\n        RendererStyleFlags3[RendererStyleFlags3[\"Important\"] = 1] = \"Important\";\n        RendererStyleFlags3[RendererStyleFlags3[\"DashCase\"] = 2] = \"DashCase\";\n    })(RendererStyleFlags3 || (RendererStyleFlags3 = {}));\n    /** Returns whether the `renderer` is a `ProceduralRenderer3` */\n    function isProceduralRenderer(renderer) {\n        return !!(renderer.listen);\n    }\n    var domRendererFactory3 = {\n        createRenderer: function (hostElement, rendererType) { return document; }\n    };\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Returns the matching `LContext` data for a given DOM node, directive or component instance.\n     *\n     * This function will examine the provided DOM element, component, or directive instance\\'s\n     * monkey-patched property to derive the `LContext` data. Once called then the monkey-patched\n     * value will be that of the newly created `LContext`.\n     *\n     * If the monkey-patched value is the `LView` instance then the context value for that\n     * target will be created and the monkey-patch reference will be updated. Therefore when this\n     * function is called it may mutate the provided element\\'s, component\\'s or any of the associated\n     * directive\\'s monkey-patch values.\n     *\n     * If the monkey-patch value is not detected then the code will walk up the DOM until an element\n     * is found which contains a monkey-patch reference. When that occurs then the provided element\n     * will be updated with a new context (which is then returned). If the monkey-patch value is not\n     * detected for a component/directive instance then it will throw an error (all components and\n     * directives should be automatically monkey-patched by ivy).\n     *\n     * @param target Component, Directive or DOM Node.\n     */\n    function getLContext(target) {\n        var mpValue = readPatchedData(target);\n        if (mpValue) {\n            // only when it's an array is it considered an LView instance\n            // ... otherwise it's an already constructed LContext instance\n            if (Array.isArray(mpValue)) {\n                var lView = mpValue;\n                var nodeIndex = void 0;\n                var component = undefined;\n                var directives = undefined;\n                if (isComponentInstance(target)) {\n                    nodeIndex = findViaComponent(lView, target);\n                    if (nodeIndex == -1) {\n                        throw new Error('The provided component was not found in the application');\n                    }\n                    component = target;\n                }\n                else if (isDirectiveInstance(target)) {\n                    nodeIndex = findViaDirective(lView, target);\n                    if (nodeIndex == -1) {\n                        throw new Error('The provided directive was not found in the application');\n                    }\n                    directives = getDirectivesAtNodeIndex(nodeIndex, lView, false);\n                }\n                else {\n                    nodeIndex = findViaNativeElement(lView, target);\n                    if (nodeIndex == -1) {\n                        return null;\n                    }\n                }\n                // the goal is not to fill the entire context full of data because the lookups\n                // are expensive. Instead, only the target data (the element, component, container, ICU\n                // expression or directive details) are filled into the context. If called multiple times\n                // with different target values then the missing target data will be filled in.\n                var native = unwrapRNode(lView[nodeIndex]);\n                var existingCtx = readPatchedData(native);\n                var context = (existingCtx && !Array.isArray(existingCtx)) ?\n                    existingCtx :\n                    createLContext(lView, nodeIndex, native);\n                // only when the component has been discovered then update the monkey-patch\n                if (component && context.component === undefined) {\n                    context.component = component;\n                    attachPatchData(context.component, context);\n                }\n                // only when the directives have been discovered then update the monkey-patch\n                if (directives && context.directives === undefined) {\n                    context.directives = directives;\n                    for (var i = 0; i < directives.length; i++) {\n                        attachPatchData(directives[i], context);\n                    }\n                }\n                attachPatchData(context.native, context);\n                mpValue = context;\n            }\n        }\n        else {\n            var rElement = target;\n            ngDevMode && assertDomNode(rElement);\n            // if the context is not found then we need to traverse upwards up the DOM\n            // to find the nearest element that has already been monkey patched with data\n            var parent_1 = rElement;\n            while (parent_1 = parent_1.parentNode) {\n                var parentContext = readPatchedData(parent_1);\n                if (parentContext) {\n                    var lView = void 0;\n                    if (Array.isArray(parentContext)) {\n                        lView = parentContext;\n                    }\n                    else {\n                        lView = parentContext.lView;\n                    }\n                    // the edge of the app was also reached here through another means\n                    // (maybe because the DOM was changed manually).\n                    if (!lView) {\n                        return null;\n                    }\n                    var index = findViaNativeElement(lView, rElement);\n                    if (index >= 0) {\n                        var native = unwrapRNode(lView[index]);\n                        var context = createLContext(lView, index, native);\n                        attachPatchData(native, context);\n                        mpValue = context;\n                        break;\n                    }\n                }\n            }\n        }\n        return mpValue || null;\n    }\n    /**\n     * Creates an empty instance of a `LContext` context\n     */\n    function createLContext(lView, nodeIndex, native) {\n        return {\n            lView: lView,\n            nodeIndex: nodeIndex,\n            native: native,\n            component: undefined,\n            directives: undefined,\n            localRefs: undefined,\n        };\n    }\n    /**\n     * Takes a component instance and returns the view for that component.\n     *\n     * @param componentInstance\n     * @returns The component's view\n     */\n    function getComponentViewByInstance(componentInstance) {\n        var lView = readPatchedData(componentInstance);\n        var view;\n        if (Array.isArray(lView)) {\n            var nodeIndex = findViaComponent(lView, componentInstance);\n            view = getComponentViewByIndex(nodeIndex, lView);\n            var context = createLContext(lView, nodeIndex, view[HOST]);\n            context.component = componentInstance;\n            attachPatchData(componentInstance, context);\n            attachPatchData(context.native, context);\n        }\n        else {\n            var context = lView;\n            view = getComponentViewByIndex(context.nodeIndex, context.lView);\n        }\n        return view;\n    }\n    /**\n     * Assigns the given data to the given target (which could be a component,\n     * directive or DOM node instance) using monkey-patching.\n     */\n    function attachPatchData(target, data) {\n        target[MONKEY_PATCH_KEY_NAME] = data;\n    }\n    function isComponentInstance(instance) {\n        return instance && instance.constructor && instance.constructor.ngComponentDef;\n    }\n    function isDirectiveInstance(instance) {\n        return instance && instance.constructor && instance.constructor.ngDirectiveDef;\n    }\n    /**\n     * Locates the element within the given LView and returns the matching index\n     */\n    function findViaNativeElement(lView, target) {\n        var tNode = lView[TVIEW].firstChild;\n        while (tNode) {\n            var native = getNativeByTNode(tNode, lView);\n            if (native === target) {\n                return tNode.index;\n            }\n            tNode = traverseNextElement(tNode);\n        }\n        return -1;\n    }\n    /**\n     * Locates the next tNode (child, sibling or parent).\n     */\n    function traverseNextElement(tNode) {\n        if (tNode.child) {\n            return tNode.child;\n        }\n        else if (tNode.next) {\n            return tNode.next;\n        }\n        else {\n            // Let's take the following template: <div><span>text</span></div><component/>\n            // After checking the text node, we need to find the next parent that has a \"next\" TNode,\n            // in this case the parent `div`, so that we can find the component.\n            while (tNode.parent && !tNode.parent.next) {\n                tNode = tNode.parent;\n            }\n            return tNode.parent && tNode.parent.next;\n        }\n    }\n    /**\n     * Locates the component within the given LView and returns the matching index\n     */\n    function findViaComponent(lView, componentInstance) {\n        var componentIndices = lView[TVIEW].components;\n        if (componentIndices) {\n            for (var i = 0; i < componentIndices.length; i++) {\n                var elementComponentIndex = componentIndices[i];\n                var componentView = getComponentViewByIndex(elementComponentIndex, lView);\n                if (componentView[CONTEXT] === componentInstance) {\n                    return elementComponentIndex;\n                }\n            }\n        }\n        else {\n            var rootComponentView = getComponentViewByIndex(HEADER_OFFSET, lView);\n            var rootComponent = rootComponentView[CONTEXT];\n            if (rootComponent === componentInstance) {\n                // we are dealing with the root element here therefore we know that the\n                // element is the very first element after the HEADER data in the lView\n                return HEADER_OFFSET;\n            }\n        }\n        return -1;\n    }\n    /**\n     * Locates the directive within the given LView and returns the matching index\n     */\n    function findViaDirective(lView, directiveInstance) {\n        // if a directive is monkey patched then it will (by default)\n        // have a reference to the LView of the current view. The\n        // element bound to the directive being search lives somewhere\n        // in the view data. We loop through the nodes and check their\n        // list of directives for the instance.\n        var tNode = lView[TVIEW].firstChild;\n        while (tNode) {\n            var directiveIndexStart = tNode.directiveStart;\n            var directiveIndexEnd = tNode.directiveEnd;\n            for (var i = directiveIndexStart; i < directiveIndexEnd; i++) {\n                if (lView[i] === directiveInstance) {\n                    return tNode.index;\n                }\n            }\n            tNode = traverseNextElement(tNode);\n        }\n        return -1;\n    }\n    /**\n     * Returns a list of directives extracted from the given view based on the\n     * provided list of directive index values.\n     *\n     * @param nodeIndex The node index\n     * @param lView The target view data\n     * @param includeComponents Whether or not to include components in returned directives\n     */\n    function getDirectivesAtNodeIndex(nodeIndex, lView, includeComponents) {\n        var tNode = lView[TVIEW].data[nodeIndex];\n        var directiveStartIndex = tNode.directiveStart;\n        if (directiveStartIndex == 0)\n            return EMPTY_ARRAY$1;\n        var directiveEndIndex = tNode.directiveEnd;\n        if (!includeComponents && tNode.flags & 1 /* isComponent */)\n            directiveStartIndex++;\n        return lView.slice(directiveStartIndex, directiveEndIndex);\n    }\n    function getComponentAtNodeIndex(nodeIndex, lView) {\n        var tNode = lView[TVIEW].data[nodeIndex];\n        var directiveStartIndex = tNode.directiveStart;\n        return tNode.flags & 1 /* isComponent */ ? lView[directiveStartIndex] : null;\n    }\n    /**\n     * Returns a map of local references (local reference name => element or directive instance) that\n     * exist on a given element.\n     */\n    function discoverLocalRefs(lView, nodeIndex) {\n        var tNode = lView[TVIEW].data[nodeIndex];\n        if (tNode && tNode.localNames) {\n            var result = {};\n            var localIndex = tNode.index + 1;\n            for (var i = 0; i < tNode.localNames.length; i += 2) {\n                result[tNode.localNames[i]] = lView[localIndex];\n                localIndex++;\n            }\n            return result;\n        }\n        return null;\n    }\n\n    var CorePlayerHandler = /** @class */ (function () {\n        function CorePlayerHandler() {\n            this._players = [];\n        }\n        CorePlayerHandler.prototype.flushPlayers = function () {\n            for (var i = 0; i < this._players.length; i++) {\n                var player = this._players[i];\n                if (!player.parent && player.state === 0 /* Pending */) {\n                    player.play();\n                }\n            }\n            this._players.length = 0;\n        };\n        CorePlayerHandler.prototype.queuePlayer = function (player) { this._players.push(player); };\n        return CorePlayerHandler;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * The default directive styling index value for template-based bindings.\n     *\n     * All host-level bindings (e.g. `hostStyleProp` and `hostStyleMap`) are\n     * assigned a directive styling index value based on the current directive\n     * uniqueId and the directive super-class inheritance depth. But for template\n     * bindings they always have the same directive styling index value.\n     */\n    var DEFAULT_TEMPLATE_DIRECTIVE_INDEX = 0;\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var ANIMATION_PROP_PREFIX = '@';\n    function createEmptyStylingContext(wrappedElement, sanitizer, initialStyles, initialClasses) {\n        var context = [\n            wrappedElement || null,\n            0,\n            [],\n            initialStyles || [null, null],\n            initialClasses || [null, null],\n            [0, 0],\n            [0],\n            [0],\n            null,\n            null,\n        ];\n        // whenever a context is created there is always a `null` directive\n        // that is registered (which is a placeholder for the \"template\").\n        allocateOrUpdateDirectiveIntoContext(context, DEFAULT_TEMPLATE_DIRECTIVE_INDEX);\n        return context;\n    }\n    /**\n     * Allocates (registers) a directive into the directive registry within the provided styling\n     * context.\n     *\n     * For each and every `[style]`, `[style.prop]`, `[class]`, `[class.name]` binding\n     * (as well as static style and class attributes) a directive, component or template\n     * is marked as the owner. When an owner is determined (this happens when the template\n     * is first passed over) the directive owner is allocated into the styling context. When\n     * this happens, each owner gets its own index value. This then ensures that once any\n     * style and/or class binding are assigned into the context then they are marked to\n     * that directive's index value.\n     *\n     * @param context the target StylingContext\n     * @param directiveRef the directive that will be allocated into the context\n     * @returns the index where the directive was inserted into\n     */\n    function allocateOrUpdateDirectiveIntoContext(context, directiveIndex, singlePropValuesIndex, styleSanitizer) {\n        if (singlePropValuesIndex === void 0) { singlePropValuesIndex = -1; }\n        var directiveRegistry = context[2 /* DirectiveRegistryPosition */];\n        var index = directiveIndex * 2 /* Size */;\n        // we preemptively make space into the directives array and then\n        // assign values slot-by-slot to ensure that if the directive ordering\n        // changes then it will still function\n        var limit = index + 2 /* Size */;\n        for (var i = directiveRegistry.length; i < limit; i += 2 /* Size */) {\n            // -1 is used to signal that the directive has been allocated, but\n            // no actual style or class bindings have been registered yet...\n            directiveRegistry.push(-1, null);\n        }\n        var propValuesStartPosition = index + 0 /* SinglePropValuesIndexOffset */;\n        if (singlePropValuesIndex >= 0 && directiveRegistry[propValuesStartPosition] === -1) {\n            directiveRegistry[propValuesStartPosition] = singlePropValuesIndex;\n            directiveRegistry[index + 1 /* StyleSanitizerOffset */] =\n                styleSanitizer || null;\n        }\n    }\n    /**\n     * Used clone a copy of a pre-computed template of a styling context.\n     *\n     * A pre-computed template is designed to be computed once for a given element\n     * (instructions.ts has logic for caching this).\n     */\n    function allocStylingContext(element, templateStyleContext) {\n        // each instance gets a copy\n        var context = templateStyleContext.slice();\n        // the HEADER values contain arrays which also need\n        // to be copied over into the new context\n        for (var i = 0; i < 10 /* SingleStylesStartPosition */; i++) {\n            var value = templateStyleContext[i];\n            if (Array.isArray(value)) {\n                context[i] = value.slice();\n            }\n        }\n        context[0 /* ElementPosition */] = element;\n        // this will prevent any other directives from extending the context\n        context[1 /* MasterFlagPosition */] |= 16 /* BindingAllocationLocked */;\n        return context;\n    }\n    /**\n     * Retrieve the `StylingContext` at a given index.\n     *\n     * This method lazily creates the `StylingContext`. This is because in most cases\n     * we have styling without any bindings. Creating `StylingContext` eagerly would mean that\n     * every style declaration such as `<div style=\"color: red\">` would result `StyleContext`\n     * which would create unnecessary memory pressure.\n     *\n     * @param index Index of the style allocation. See: `styling`.\n     * @param viewData The view to search for the styling context\n     */\n    function getStylingContextFromLView(index, viewData) {\n        var storageIndex = index;\n        var slotValue = viewData[storageIndex];\n        var wrapper = viewData;\n        while (Array.isArray(slotValue)) {\n            wrapper = slotValue;\n            slotValue = slotValue[HOST];\n        }\n        if (isStylingContext(wrapper)) {\n            return wrapper;\n        }\n        else {\n            // This is an LView or an LContainer\n            var stylingTemplate = getTNode(index - HEADER_OFFSET, viewData).stylingTemplate;\n            if (wrapper !== viewData) {\n                storageIndex = HOST;\n            }\n            return wrapper[storageIndex] = stylingTemplate ?\n                allocStylingContext(slotValue, stylingTemplate) :\n                createEmptyStylingContext(slotValue);\n        }\n    }\n    function isAnimationProp(name) {\n        return name[0] === ANIMATION_PROP_PREFIX;\n    }\n    function hasClassInput(tNode) {\n        return (tNode.flags & 8 /* hasClassInput */) !== 0;\n    }\n    function hasStyleInput(tNode) {\n        return (tNode.flags & 16 /* hasStyleInput */) !== 0;\n    }\n    function forceClassesAsString(classes) {\n        if (classes && typeof classes !== 'string') {\n            classes = Object.keys(classes).join(' ');\n        }\n        return classes || '';\n    }\n    function forceStylesAsString(styles) {\n        var str = '';\n        if (styles) {\n            var props = Object.keys(styles);\n            for (var i = 0; i < props.length; i++) {\n                var prop = props[i];\n                str += (i ? ';' : '') + (prop + \":\" + styles[prop]);\n            }\n        }\n        return str;\n    }\n    function addPlayerInternal(playerContext, rootContext, element, player, playerContextIndex, ref) {\n        ref = ref || element;\n        if (playerContextIndex) {\n            playerContext[playerContextIndex] = player;\n        }\n        else {\n            playerContext.push(player);\n        }\n        if (player) {\n            player.addEventListener(200 /* Destroyed */, function () {\n                var index = playerContext.indexOf(player);\n                var nonFactoryPlayerIndex = playerContext[0 /* NonBuilderPlayersStart */];\n                // if the player is being removed from the factory side of the context\n                // (which is where the [style] and [class] bindings do their thing) then\n                // that side of the array cannot be resized since the respective bindings\n                // have pointer index values that point to the associated factory instance\n                if (index) {\n                    if (index < nonFactoryPlayerIndex) {\n                        playerContext[index] = null;\n                    }\n                    else {\n                        playerContext.splice(index, 1);\n                    }\n                }\n                player.destroy();\n            });\n            var playerHandler = rootContext.playerHandler || (rootContext.playerHandler = new CorePlayerHandler());\n            playerHandler.queuePlayer(player, ref);\n            return true;\n        }\n        return false;\n    }\n    function getPlayersInternal(playerContext) {\n        var players = [];\n        var nonFactoryPlayersStart = playerContext[0 /* NonBuilderPlayersStart */];\n        // add all factory-based players (which are apart of [style] and [class] bindings)\n        for (var i = 1 /* PlayerBuildersStartPosition */ + 1 /* PlayerOffsetPosition */; i < nonFactoryPlayersStart; i += 2 /* PlayerAndPlayerBuildersTupleSize */) {\n            var player = playerContext[i];\n            if (player) {\n                players.push(player);\n            }\n        }\n        // add all custom players (not apart of [style] and [class] bindings)\n        for (var i = nonFactoryPlayersStart; i < playerContext.length; i++) {\n            players.push(playerContext[i]);\n        }\n        return players;\n    }\n    function getOrCreatePlayerContext(target, context) {\n        context = context || getLContext(target);\n        if (!context) {\n            ngDevMode && throwInvalidRefError();\n            return null;\n        }\n        var lView = context.lView, nodeIndex = context.nodeIndex;\n        var stylingContext = getStylingContextFromLView(nodeIndex, lView);\n        return getPlayerContext(stylingContext) || allocPlayerContext(stylingContext);\n    }\n    function getPlayerContext(stylingContext) {\n        return stylingContext[9 /* PlayerContext */];\n    }\n    function allocPlayerContext(data) {\n        return data[9 /* PlayerContext */] =\n            [5 /* SinglePlayerBuildersStartPosition */, null, null, null, null];\n    }\n    function throwInvalidRefError() {\n        throw new Error('Only elements that exist in an Angular application can be used for animations');\n    }\n\n    /**\n     * Assigns all attribute values to the provided element via the inferred renderer.\n     *\n     * This function accepts two forms of attribute entries:\n     *\n     * default: (key, value):\n     *  attrs = [key1, value1, key2, value2]\n     *\n     * namespaced: (NAMESPACE_MARKER, uri, name, value)\n     *  attrs = [NAMESPACE_MARKER, uri, name, value, NAMESPACE_MARKER, uri, name, value]\n     *\n     * The `attrs` array can contain a mix of both the default and namespaced entries.\n     * The \"default\" values are set without a marker, but if the function comes across\n     * a marker value then it will attempt to set a namespaced value. If the marker is\n     * not of a namespaced value then the function will quit and return the index value\n     * where it stopped during the iteration of the attrs array.\n     *\n     * See [AttributeMarker] to understand what the namespace marker value is.\n     *\n     * Note that this instruction does not support assigning style and class values to\n     * an element. See `elementStart` and `elementHostAttrs` to learn how styling values\n     * are applied to an element.\n     *\n     * @param native The element that the attributes will be assigned to\n     * @param attrs The attribute array of values that will be assigned to the element\n     * @returns the index value that was last accessed in the attributes array\n     */\n    function setUpAttributes(native, attrs) {\n        var renderer = getLView()[RENDERER];\n        var isProc = isProceduralRenderer(renderer);\n        var i = 0;\n        while (i < attrs.length) {\n            var value = attrs[i];\n            if (typeof value === 'number') {\n                // only namespaces are supported. Other value types (such as style/class\n                // entries) are not supported in this function.\n                if (value !== 0 /* NamespaceURI */) {\n                    break;\n                }\n                // we just landed on the marker value ... therefore\n                // we should skip to the next entry\n                i++;\n                var namespaceURI = attrs[i++];\n                var attrName = attrs[i++];\n                var attrVal = attrs[i++];\n                ngDevMode && ngDevMode.rendererSetAttribute++;\n                isProc ?\n                    renderer.setAttribute(native, attrName, attrVal, namespaceURI) :\n                    native.setAttributeNS(namespaceURI, attrName, attrVal);\n            }\n            else {\n                // attrName is string;\n                var attrName = value;\n                var attrVal = attrs[++i];\n                // Standard attributes\n                ngDevMode && ngDevMode.rendererSetAttribute++;\n                if (isAnimationProp(attrName)) {\n                    if (isProc) {\n                        renderer.setProperty(native, attrName, attrVal);\n                    }\n                }\n                else {\n                    isProc ?\n                        renderer\n                            .setAttribute(native, attrName, attrVal) :\n                        native.setAttribute(attrName, attrVal);\n                }\n                i++;\n            }\n        }\n        // another piece of code may iterate over the same attributes array. Therefore\n        // it may be helpful to return the exact spot where the attributes array exited\n        // whether by running into an unsupported marker or if all the static values were\n        // iterated over.\n        return i;\n    }\n    function attrsStylingIndexOf(attrs, startIndex) {\n        for (var i = startIndex; i < attrs.length; i++) {\n            var val = attrs[i];\n            if (val === 1 /* Classes */ || val === 2 /* Styles */) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    /**\n     * Test whether the given value is a marker that indicates that the following\n     * attribute values in a `TAttributes` array are only the names of attributes,\n     * and not name-value pairs.\n     * @param marker The attribute marker to test.\n     * @returns true if the marker is a \"name-only\" marker (e.g. `Bindings`, `Template` or `I18n`).\n     */\n    function isNameOnlyAttributeMarker(marker) {\n        return marker === 3 /* Bindings */ || marker === 4 /* Template */ ||\n            marker === 6 /* I18n */;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /// Parent Injector Utils ///////////////////////////////////////////////////////////////\n    function hasParentInjector(parentLocation) {\n        return parentLocation !== NO_PARENT_INJECTOR;\n    }\n    function getParentInjectorIndex(parentLocation) {\n        return parentLocation & 32767 /* InjectorIndexMask */;\n    }\n    function getParentInjectorViewOffset(parentLocation) {\n        return parentLocation >> 16 /* ViewOffsetShift */;\n    }\n    /**\n     * Unwraps a parent injector location number to find the view offset from the current injector,\n     * then walks up the declaration view tree until the view is found that contains the parent\n     * injector.\n     *\n     * @param location The location of the parent injector, which contains the view offset\n     * @param startView The LView instance from which to start walking up the view tree\n     * @returns The LView instance that contains the parent injector\n     */\n    function getParentInjectorView(location, startView) {\n        var viewOffset = getParentInjectorViewOffset(location);\n        var parentView = startView;\n        // For most cases, the parent injector can be found on the host node (e.g. for component\n        // or container), but we must keep the loop here to support the rarer case of deeply nested\n        // <ng-template> tags or inline views, where the parent injector might live many views\n        // above the child injector.\n        while (viewOffset > 0) {\n            parentView = parentView[DECLARATION_VIEW];\n            viewOffset--;\n        }\n        return parentView;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Gets the parent LView of the passed LView, if the PARENT is an LContainer, will get the parent of\n     * that LContainer, which is an LView\n     * @param lView the lView whose parent to get\n     */\n    function getLViewParent(lView) {\n        ngDevMode && assertLView(lView);\n        var parent = lView[PARENT];\n        return isLContainer(parent) ? parent[PARENT] : parent;\n    }\n    /**\n     * Retrieve the root view from any component or `LView` by walking the parent `LView` until\n     * reaching the root `LView`.\n     *\n     * @param componentOrLView any component or `LView`\n     */\n    function getRootView(componentOrLView) {\n        ngDevMode && assertDefined(componentOrLView, 'component');\n        var lView = isLView(componentOrLView) ? componentOrLView : readPatchedLView(componentOrLView);\n        while (lView && !(lView[FLAGS] & 512 /* IsRoot */)) {\n            lView = getLViewParent(lView);\n        }\n        ngDevMode && assertLView(lView);\n        return lView;\n    }\n    /**\n     * Given a current view, finds the nearest component's host (LElement).\n     *\n     * @param lView LView for which we want a host element node\n     * @returns The host node\n     */\n    function findComponentView(lView) {\n        var rootTNode = lView[T_HOST];\n        while (rootTNode !== null && rootTNode.type === 2 /* View */) {\n            ngDevMode && assertDefined(lView[DECLARATION_VIEW], 'lView[DECLARATION_VIEW]');\n            lView = lView[DECLARATION_VIEW];\n            rootTNode = lView[T_HOST];\n        }\n        ngDevMode && assertLView(lView);\n        return lView;\n    }\n    /**\n     * Returns the `RootContext` instance that is associated with\n     * the application where the target is situated. It does this by walking the parent views until it\n     * gets to the root view, then getting the context off of that.\n     *\n     * @param viewOrComponent the `LView` or component to get the root context for.\n     */\n    function getRootContext(viewOrComponent) {\n        var rootView = getRootView(viewOrComponent);\n        ngDevMode &&\n            assertDefined(rootView[CONTEXT], 'RootView has no context. Perhaps it is disconnected?');\n        return rootView[CONTEXT];\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Defines if the call to `inject` should include `viewProviders` in its resolution.\n     *\n     * This is set to true when we try to instantiate a component. This value is reset in\n     * `getNodeInjectable` to a value which matches the declaration location of the token about to be\n     * instantiated. This is done so that if we are injecting a token which was declared outside of\n     * `viewProviders` we don't accidentally pull `viewProviders` in.\n     *\n     * Example:\n     *\n     * ```\n     * @Injectable()\n     * class MyService {\n     *   constructor(public value: String) {}\n     * }\n     *\n     * @Component({\n     *   providers: [\n     *     MyService,\n     *     {provide: String, value: 'providers' }\n     *   ]\n     *   viewProviders: [\n     *     {provide: String, value: 'viewProviders'}\n     *   ]\n     * })\n     * class MyComponent {\n     *   constructor(myService: MyService, value: String) {\n     *     // We expect that Component can see into `viewProviders`.\n     *     expect(value).toEqual('viewProviders');\n     *     // `MyService` was not declared in `viewProviders` hence it can't see it.\n     *     expect(myService.value).toEqual('providers');\n     *   }\n     * }\n     *\n     * ```\n     */\n    var includeViewProviders = true;\n    function setIncludeViewProviders(v) {\n        var oldValue = includeViewProviders;\n        includeViewProviders = v;\n        return oldValue;\n    }\n    /**\n     * The number of slots in each bloom filter (used by DI). The larger this number, the fewer\n     * directives that will share slots, and thus, the fewer false positives when checking for\n     * the existence of a directive.\n     */\n    var BLOOM_SIZE = 256;\n    var BLOOM_MASK = BLOOM_SIZE - 1;\n    /** Counter used to generate unique IDs for directives. */\n    var nextNgElementId = 0;\n    /**\n     * Registers this directive as present in its node's injector by flipping the directive's\n     * corresponding bit in the injector's bloom filter.\n     *\n     * @param injectorIndex The index of the node injector where this token should be registered\n     * @param tView The TView for the injector's bloom filters\n     * @param type The directive token to register\n     */\n    function bloomAdd(injectorIndex, tView, type) {\n        ngDevMode && assertEqual(tView.firstTemplatePass, true, 'expected firstTemplatePass to be true');\n        var id = typeof type !== 'string' ? type[NG_ELEMENT_ID] : type.charCodeAt(0) || 0;\n        // Set a unique ID on the directive type, so if something tries to inject the directive,\n        // we can easily retrieve the ID and hash it into the bloom bit that should be checked.\n        if (id == null) {\n            id = type[NG_ELEMENT_ID] = nextNgElementId++;\n        }\n        // We only have BLOOM_SIZE (256) slots in our bloom filter (8 buckets * 32 bits each),\n        // so all unique IDs must be modulo-ed into a number from 0 - 255 to fit into the filter.\n        var bloomBit = id & BLOOM_MASK;\n        // Create a mask that targets the specific bit associated with the directive.\n        // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\n        // to bit positions 0 - 31 in a 32 bit integer.\n        var mask = 1 << bloomBit;\n        // Use the raw bloomBit number to determine which bloom filter bucket we should check\n        // e.g: bf0 = [0 - 31], bf1 = [32 - 63], bf2 = [64 - 95], bf3 = [96 - 127], etc\n        var b7 = bloomBit & 0x80;\n        var b6 = bloomBit & 0x40;\n        var b5 = bloomBit & 0x20;\n        var tData = tView.data;\n        if (b7) {\n            b6 ? (b5 ? (tData[injectorIndex + 7] |= mask) : (tData[injectorIndex + 6] |= mask)) :\n                (b5 ? (tData[injectorIndex + 5] |= mask) : (tData[injectorIndex + 4] |= mask));\n        }\n        else {\n            b6 ? (b5 ? (tData[injectorIndex + 3] |= mask) : (tData[injectorIndex + 2] |= mask)) :\n                (b5 ? (tData[injectorIndex + 1] |= mask) : (tData[injectorIndex] |= mask));\n        }\n    }\n    /**\n     * Creates (or gets an existing) injector for a given element or container.\n     *\n     * @param tNode for which an injector should be retrieved / created.\n     * @param hostView View where the node is stored\n     * @returns Node injector\n     */\n    function getOrCreateNodeInjectorForNode(tNode, hostView) {\n        var existingInjectorIndex = getInjectorIndex(tNode, hostView);\n        if (existingInjectorIndex !== -1) {\n            return existingInjectorIndex;\n        }\n        var tView = hostView[TVIEW];\n        if (tView.firstTemplatePass) {\n            tNode.injectorIndex = hostView.length;\n            insertBloom(tView.data, tNode); // foundation for node bloom\n            insertBloom(hostView, null); // foundation for cumulative bloom\n            insertBloom(tView.blueprint, null);\n            ngDevMode && assertEqual(tNode.flags === 0 || tNode.flags === 1 /* isComponent */, true, 'expected tNode.flags to not be initialized');\n        }\n        var parentLoc = getParentInjectorLocation(tNode, hostView);\n        var parentIndex = getParentInjectorIndex(parentLoc);\n        var parentLView = getParentInjectorView(parentLoc, hostView);\n        var injectorIndex = tNode.injectorIndex;\n        // If a parent injector can't be found, its location is set to -1.\n        // In that case, we don't need to set up a cumulative bloom\n        if (hasParentInjector(parentLoc)) {\n            var parentData = parentLView[TVIEW].data;\n            // Creates a cumulative bloom filter that merges the parent's bloom filter\n            // and its own cumulative bloom (which contains tokens for all ancestors)\n            for (var i = 0; i < 8; i++) {\n                hostView[injectorIndex + i] = parentLView[parentIndex + i] | parentData[parentIndex + i];\n            }\n        }\n        hostView[injectorIndex + PARENT_INJECTOR] = parentLoc;\n        return injectorIndex;\n    }\n    function insertBloom(arr, footer) {\n        arr.push(0, 0, 0, 0, 0, 0, 0, 0, footer);\n    }\n    function getInjectorIndex(tNode, hostView) {\n        if (tNode.injectorIndex === -1 ||\n            // If the injector index is the same as its parent's injector index, then the index has been\n            // copied down from the parent node. No injector has been created yet on this node.\n            (tNode.parent && tNode.parent.injectorIndex === tNode.injectorIndex) ||\n            // After the first template pass, the injector index might exist but the parent values\n            // might not have been calculated yet for this instance\n            hostView[tNode.injectorIndex + PARENT_INJECTOR] == null) {\n            return -1;\n        }\n        else {\n            return tNode.injectorIndex;\n        }\n    }\n    /**\n     * Finds the index of the parent injector, with a view offset if applicable. Used to set the\n     * parent injector initially.\n     *\n     * Returns a combination of number of `ViewData` we have to go up and index in that `Viewdata`\n     */\n    function getParentInjectorLocation(tNode, view) {\n        if (tNode.parent && tNode.parent.injectorIndex !== -1) {\n            return tNode.parent.injectorIndex; // ViewOffset is 0\n        }\n        // For most cases, the parent injector index can be found on the host node (e.g. for component\n        // or container), so this loop will be skipped, but we must keep the loop here to support\n        // the rarer case of deeply nested <ng-template> tags or inline views.\n        var hostTNode = view[T_HOST];\n        var viewOffset = 1;\n        while (hostTNode && hostTNode.injectorIndex === -1) {\n            view = view[DECLARATION_VIEW];\n            hostTNode = view ? view[T_HOST] : null;\n            viewOffset++;\n        }\n        return hostTNode ?\n            hostTNode.injectorIndex | (viewOffset << 16 /* ViewOffsetShift */) :\n            -1;\n    }\n    /**\n     * Makes a type or an injection token public to the DI system by adding it to an\n     * injector's bloom filter.\n     *\n     * @param di The node injector in which a directive will be added\n     * @param token The type or the injection token to be made public\n     */\n    function diPublicInInjector(injectorIndex, view, token) {\n        bloomAdd(injectorIndex, view[TVIEW], token);\n    }\n    /**\n     * Inject static attribute value into directive constructor.\n     *\n     * This method is used with `factory` functions which are generated as part of\n     * `defineDirective` or `defineComponent`. The method retrieves the static value\n     * of an attribute. (Dynamic attributes are not supported since they are not resolved\n     *  at the time of injection and can change over time.)\n     *\n     * # Example\n     * Given:\n     * ```\n     * @Component(...)\n     * class MyComponent {\n     *   constructor(@Attribute('title') title: string) { ... }\n     * }\n     * ```\n     * When instantiated with\n     * ```\n     * <my-component title=\"Hello\"></my-component>\n     * ```\n     *\n     * Then factory method generated is:\n     * ```\n     * MyComponent.ngComponentDef = defineComponent({\n     *   factory: () => new MyComponent(injectAttribute('title'))\n     *   ...\n     * })\n     * ```\n     *\n     * @publicApi\n     */\n    function injectAttributeImpl(tNode, attrNameToInject) {\n        ngDevMode && assertNodeOfPossibleTypes(tNode, 0 /* Container */, 3 /* Element */, 4 /* ElementContainer */);\n        ngDevMode && assertDefined(tNode, 'expecting tNode');\n        var attrs = tNode.attrs;\n        if (attrs) {\n            var attrsLength = attrs.length;\n            var i = 0;\n            while (i < attrsLength) {\n                var value = attrs[i];\n                // If we hit a `Bindings` or `Template` marker then we are done.\n                if (isNameOnlyAttributeMarker(value))\n                    break;\n                // Skip namespaced attributes\n                if (value === 0 /* NamespaceURI */) {\n                    // we skip the next two values\n                    // as namespaced attributes looks like\n                    // [..., AttributeMarker.NamespaceURI, 'http://someuri.com/test', 'test:exist',\n                    // 'existValue', ...]\n                    i = i + 2;\n                }\n                else if (typeof value === 'number') {\n                    // Skip to the first value of the marked attribute.\n                    i++;\n                    if (value === 1 /* Classes */ && attrNameToInject === 'class') {\n                        var accumulatedClasses = '';\n                        while (i < attrsLength && typeof attrs[i] === 'string') {\n                            accumulatedClasses += ' ' + attrs[i++];\n                        }\n                        return accumulatedClasses.trim();\n                    }\n                    else if (value === 2 /* Styles */ && attrNameToInject === 'style') {\n                        var accumulatedStyles = '';\n                        while (i < attrsLength && typeof attrs[i] === 'string') {\n                            accumulatedStyles += attrs[i++] + \": \" + attrs[i++] + \"; \";\n                        }\n                        return accumulatedStyles.trim();\n                    }\n                    else {\n                        while (i < attrsLength && typeof attrs[i] === 'string') {\n                            i++;\n                        }\n                    }\n                }\n                else if (value === attrNameToInject) {\n                    return attrs[i + 1];\n                }\n                else {\n                    i = i + 2;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Returns the value associated to the given token from the NodeInjectors => ModuleInjector.\n     *\n     * Look for the injector providing the token by walking up the node injector tree and then\n     * the module injector tree.\n     *\n     * This function patches `token` with `__NG_ELEMENT_ID__` which contains the id for the bloom\n     * filter. Negative values are reserved for special objects.\n     *   - `-1` is reserved for injecting `Injector` (implemented by `NodeInjector`)\n     *\n     * @param tNode The Node where the search for the injector should start\n     * @param lView The `LView` that contains the `tNode`\n     * @param token The token to look for\n     * @param flags Injection flags\n     * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`\n     * @returns the value from the injector, `null` when not found, or `notFoundValue` if provided\n     */\n    function getOrCreateInjectable(tNode, lView, token, flags, notFoundValue) {\n        if (flags === void 0) { flags = exports.InjectFlags.Default; }\n        if (tNode) {\n            var bloomHash = bloomHashBitOrFactory(token);\n            // If the ID stored here is a function, this is a special object like ElementRef or TemplateRef\n            // so just call the factory function to create it.\n            if (typeof bloomHash === 'function') {\n                var savePreviousOrParentTNode = getPreviousOrParentTNode();\n                var saveLView = getLView();\n                setTNodeAndViewData(tNode, lView);\n                try {\n                    var value = bloomHash();\n                    if (value == null && !(flags & exports.InjectFlags.Optional)) {\n                        throw new Error(\"No provider for \" + stringifyForError(token) + \"!\");\n                    }\n                    else {\n                        return value;\n                    }\n                }\n                finally {\n                    setTNodeAndViewData(savePreviousOrParentTNode, saveLView);\n                }\n            }\n            else if (typeof bloomHash == 'number') {\n                if (bloomHash === -1) {\n                    // `-1` is a special value used to identify `Injector` types.\n                    return new NodeInjector(tNode, lView);\n                }\n                // If the token has a bloom hash, then it is a token which could be in NodeInjector.\n                // A reference to the previous injector TView that was found while climbing the element\n                // injector tree. This is used to know if viewProviders can be accessed on the current\n                // injector.\n                var previousTView = null;\n                var injectorIndex = getInjectorIndex(tNode, lView);\n                var parentLocation = NO_PARENT_INJECTOR;\n                var hostTElementNode = flags & exports.InjectFlags.Host ? findComponentView(lView)[T_HOST] : null;\n                // If we should skip this injector, or if there is no injector on this node, start by\n                // searching\n                // the parent injector.\n                if (injectorIndex === -1 || flags & exports.InjectFlags.SkipSelf) {\n                    parentLocation = injectorIndex === -1 ? getParentInjectorLocation(tNode, lView) :\n                        lView[injectorIndex + PARENT_INJECTOR];\n                    if (!shouldSearchParent(flags, false)) {\n                        injectorIndex = -1;\n                    }\n                    else {\n                        previousTView = lView[TVIEW];\n                        injectorIndex = getParentInjectorIndex(parentLocation);\n                        lView = getParentInjectorView(parentLocation, lView);\n                    }\n                }\n                // Traverse up the injector tree until we find a potential match or until we know there\n                // *isn't* a match.\n                while (injectorIndex !== -1) {\n                    parentLocation = lView[injectorIndex + PARENT_INJECTOR];\n                    // Check the current injector. If it matches, see if it contains token.\n                    var tView = lView[TVIEW];\n                    if (bloomHasToken(bloomHash, injectorIndex, tView.data)) {\n                        // At this point, we have an injector which *may* contain the token, so we step through\n                        // the providers and directives associated with the injector's corresponding node to get\n                        // the instance.\n                        var instance = searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode);\n                        if (instance !== NOT_FOUND) {\n                            return instance;\n                        }\n                    }\n                    if (shouldSearchParent(flags, lView[TVIEW].data[injectorIndex + TNODE] === hostTElementNode) &&\n                        bloomHasToken(bloomHash, injectorIndex, lView)) {\n                        // The def wasn't found anywhere on this node, so it was a false positive.\n                        // Traverse up the tree and continue searching.\n                        previousTView = tView;\n                        injectorIndex = getParentInjectorIndex(parentLocation);\n                        lView = getParentInjectorView(parentLocation, lView);\n                    }\n                    else {\n                        // If we should not search parent OR If the ancestor bloom filter value does not have the\n                        // bit corresponding to the directive we can give up on traversing up to find the specific\n                        // injector.\n                        injectorIndex = -1;\n                    }\n                }\n            }\n        }\n        if (flags & exports.InjectFlags.Optional && notFoundValue === undefined) {\n            // This must be set or the NullInjector will throw for optional deps\n            notFoundValue = null;\n        }\n        if ((flags & (exports.InjectFlags.Self | exports.InjectFlags.Host)) === 0) {\n            var moduleInjector = lView[INJECTOR$1];\n            // switch to `injectInjectorOnly` implementation for module injector, since module injector\n            // should not have access to Component/Directive DI scope (that may happen through\n            // `directiveInject` implementation)\n            var previousInjectImplementation = setInjectImplementation(undefined);\n            try {\n                if (moduleInjector) {\n                    return moduleInjector.get(token, notFoundValue, flags & exports.InjectFlags.Optional);\n                }\n                else {\n                    return injectRootLimpMode(token, notFoundValue, flags & exports.InjectFlags.Optional);\n                }\n            }\n            finally {\n                setInjectImplementation(previousInjectImplementation);\n            }\n        }\n        if (flags & exports.InjectFlags.Optional) {\n            return notFoundValue;\n        }\n        else {\n            throw new Error(\"NodeInjector: NOT_FOUND [\" + stringifyForError(token) + \"]\");\n        }\n    }\n    var NOT_FOUND = {};\n    function searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode) {\n        var currentTView = lView[TVIEW];\n        var tNode = currentTView.data[injectorIndex + TNODE];\n        // First, we need to determine if view providers can be accessed by the starting element.\n        // There are two possibities\n        var canAccessViewProviders = previousTView == null ?\n            // 1) This is the first invocation `previousTView == null` which means that we are at the\n            // `TNode` of where injector is starting to look. In such a case the only time we are allowed\n            // to look into the ViewProviders is if:\n            // - we are on a component\n            // - AND the injector set `includeViewProviders` to true (implying that the token can see\n            // ViewProviders because it is the Component or a Service which itself was declared in\n            // ViewProviders)\n            (isComponent(tNode) && includeViewProviders) :\n            // 2) `previousTView != null` which means that we are now walking across the parent nodes.\n            // In such a case we are only allowed to look into the ViewProviders if:\n            // - We just crossed from child View to Parent View `previousTView != currentTView`\n            // - AND the parent TNode is an Element.\n            // This means that we just came from the Component's View and therefore are allowed to see\n            // into the ViewProviders.\n            (previousTView != currentTView && (tNode.type === 3 /* Element */));\n        // This special case happens when there is a @host on the inject and when we are searching\n        // on the host element node.\n        var isHostSpecialCase = (flags & exports.InjectFlags.Host) && hostTElementNode === tNode;\n        var injectableIdx = locateDirectiveOrProvider(tNode, currentTView, token, canAccessViewProviders, isHostSpecialCase);\n        if (injectableIdx !== null) {\n            return getNodeInjectable(currentTView.data, lView, injectableIdx, tNode);\n        }\n        else {\n            return NOT_FOUND;\n        }\n    }\n    /**\n     * Searches for the given token among the node's directives and providers.\n     *\n     * @param tNode TNode on which directives are present.\n     * @param tView The tView we are currently processing\n     * @param token Provider token or type of a directive to look for.\n     * @param canAccessViewProviders Whether view providers should be considered.\n     * @param isHostSpecialCase Whether the host special case applies.\n     * @returns Index of a found directive or provider, or null when none found.\n     */\n    function locateDirectiveOrProvider(tNode, tView, token, canAccessViewProviders, isHostSpecialCase) {\n        var nodeProviderIndexes = tNode.providerIndexes;\n        var tInjectables = tView.data;\n        var injectablesStart = nodeProviderIndexes & 65535 /* ProvidersStartIndexMask */;\n        var directivesStart = tNode.directiveStart;\n        var directiveEnd = tNode.directiveEnd;\n        var cptViewProvidersCount = nodeProviderIndexes >> 16 /* CptViewProvidersCountShift */;\n        var startingIndex = canAccessViewProviders ? injectablesStart : injectablesStart + cptViewProvidersCount;\n        // When the host special case applies, only the viewProviders and the component are visible\n        var endIndex = isHostSpecialCase ? injectablesStart + cptViewProvidersCount : directiveEnd;\n        for (var i = startingIndex; i < endIndex; i++) {\n            var providerTokenOrDef = tInjectables[i];\n            if (i < directivesStart && token === providerTokenOrDef ||\n                i >= directivesStart && providerTokenOrDef.type === token) {\n                return i;\n            }\n        }\n        if (isHostSpecialCase) {\n            var dirDef = tInjectables[directivesStart];\n            if (dirDef && isComponentDef(dirDef) && dirDef.type === token) {\n                return directivesStart;\n            }\n        }\n        return null;\n    }\n    /**\n    * Retrieve or instantiate the injectable from the `lData` at particular `index`.\n    *\n    * This function checks to see if the value has already been instantiated and if so returns the\n    * cached `injectable`. Otherwise if it detects that the value is still a factory it\n    * instantiates the `injectable` and caches the value.\n    */\n    function getNodeInjectable(tData, lData, index, tNode) {\n        var value = lData[index];\n        if (isFactory(value)) {\n            var factory = value;\n            if (factory.resolving) {\n                throw new Error(\"Circular dep for \" + stringifyForError(tData[index]));\n            }\n            var previousIncludeViewProviders = setIncludeViewProviders(factory.canSeeViewProviders);\n            factory.resolving = true;\n            var previousInjectImplementation = void 0;\n            if (factory.injectImpl) {\n                previousInjectImplementation = setInjectImplementation(factory.injectImpl);\n            }\n            var savePreviousOrParentTNode = getPreviousOrParentTNode();\n            var saveLView = getLView();\n            setTNodeAndViewData(tNode, lData);\n            try {\n                value = lData[index] = factory.factory(null, tData, lData, tNode);\n            }\n            finally {\n                if (factory.injectImpl)\n                    setInjectImplementation(previousInjectImplementation);\n                setIncludeViewProviders(previousIncludeViewProviders);\n                factory.resolving = false;\n                setTNodeAndViewData(savePreviousOrParentTNode, saveLView);\n            }\n        }\n        return value;\n    }\n    /**\n     * Returns the bit in an injector's bloom filter that should be used to determine whether or not\n     * the directive might be provided by the injector.\n     *\n     * When a directive is public, it is added to the bloom filter and given a unique ID that can be\n     * retrieved on the Type. When the directive isn't public or the token is not a directive `null`\n     * is returned as the node injector can not possibly provide that token.\n     *\n     * @param token the injection token\n     * @returns the matching bit to check in the bloom filter or `null` if the token is not known.\n     *   When the returned value is negative then it represents special values such as `Injector`.\n     */\n    function bloomHashBitOrFactory(token) {\n        ngDevMode && assertDefined(token, 'token must be defined');\n        if (typeof token === 'string') {\n            return token.charCodeAt(0) || 0;\n        }\n        var tokenId = token[NG_ELEMENT_ID];\n        // Negative token IDs are used for special objects such as `Injector`\n        return (typeof tokenId === 'number' && tokenId > 0) ? tokenId & BLOOM_MASK : tokenId;\n    }\n    function bloomHasToken(bloomHash, injectorIndex, injectorView) {\n        // Create a mask that targets the specific bit associated with the directive we're looking for.\n        // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\n        // to bit positions 0 - 31 in a 32 bit integer.\n        var mask = 1 << bloomHash;\n        var b7 = bloomHash & 0x80;\n        var b6 = bloomHash & 0x40;\n        var b5 = bloomHash & 0x20;\n        // Our bloom filter size is 256 bits, which is eight 32-bit bloom filter buckets:\n        // bf0 = [0 - 31], bf1 = [32 - 63], bf2 = [64 - 95], bf3 = [96 - 127], etc.\n        // Get the bloom filter value from the appropriate bucket based on the directive's bloomBit.\n        var value;\n        if (b7) {\n            value = b6 ? (b5 ? injectorView[injectorIndex + 7] : injectorView[injectorIndex + 6]) :\n                (b5 ? injectorView[injectorIndex + 5] : injectorView[injectorIndex + 4]);\n        }\n        else {\n            value = b6 ? (b5 ? injectorView[injectorIndex + 3] : injectorView[injectorIndex + 2]) :\n                (b5 ? injectorView[injectorIndex + 1] : injectorView[injectorIndex]);\n        }\n        // If the bloom filter value has the bit corresponding to the directive's bloomBit flipped on,\n        // this injector is a potential match.\n        return !!(value & mask);\n    }\n    /** Returns true if flags prevent parent injector from being searched for tokens */\n    function shouldSearchParent(flags, isFirstHostTNode) {\n        return !(flags & exports.InjectFlags.Self) && !(flags & exports.InjectFlags.Host && isFirstHostTNode);\n    }\n    var NodeInjector = /** @class */ (function () {\n        function NodeInjector(_tNode, _lView) {\n            this._tNode = _tNode;\n            this._lView = _lView;\n        }\n        NodeInjector.prototype.get = function (token, notFoundValue) {\n            return getOrCreateInjectable(this._tNode, this._lView, token, undefined, notFoundValue);\n        };\n        return NodeInjector;\n    }());\n    /**\n     * @codeGenApi\n     */\n    function ɵɵgetFactoryOf(type) {\n        var typeAny = type;\n        var def = getComponentDef(typeAny) || getDirectiveDef(typeAny) ||\n            getPipeDef(typeAny) || getInjectableDef(typeAny) || getInjectorDef(typeAny);\n        if (!def || def.factory === undefined) {\n            return null;\n        }\n        return def.factory;\n    }\n    /**\n     * @codeGenApi\n     */\n    function ɵɵgetInheritedFactory(type) {\n        var proto = Object.getPrototypeOf(type.prototype).constructor;\n        var factory = ɵɵgetFactoryOf(proto);\n        if (factory !== null) {\n            return factory;\n        }\n        else {\n            // There is no factory defined. Either this was improper usage of inheritance\n            // (no Angular decorator on the superclass) or there is no constructor at all\n            // in the inheritance chain. Since the two cases cannot be distinguished, the\n            // latter has to be assumed.\n            return function (t) { return new t(); };\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function getDebugContext(error) {\n        return error[ERROR_DEBUG_CONTEXT];\n    }\n    function getOriginalError(error) {\n        return error[ERROR_ORIGINAL_ERROR];\n    }\n    function getErrorLogger(error) {\n        return error[ERROR_LOGGER] || defaultErrorLogger;\n    }\n    function defaultErrorLogger(console) {\n        var values = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            values[_i - 1] = arguments[_i];\n        }\n        console.error.apply(console, __spread(values));\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Provides a hook for centralized exception handling.\n     *\n     * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n     * intercept error handling, write a custom exception handler that replaces this default as\n     * appropriate for your app.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```\n     * class MyErrorHandler implements ErrorHandler {\n     *   handleError(error) {\n     *     // do something with the exception\n     *   }\n     * }\n     *\n     * @NgModule({\n     *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n     * })\n     * class MyModule {}\n     * ```\n     *\n     * @publicApi\n     */\n    var ErrorHandler = /** @class */ (function () {\n        function ErrorHandler() {\n            /**\n             * @internal\n             */\n            this._console = console;\n        }\n        ErrorHandler.prototype.handleError = function (error) {\n            var originalError = this._findOriginalError(error);\n            var context = this._findContext(error);\n            // Note: Browser consoles show the place from where console.error was called.\n            // We can use this to give users additional information about the error.\n            var errorLogger = getErrorLogger(error);\n            errorLogger(this._console, \"ERROR\", error);\n            if (originalError) {\n                errorLogger(this._console, \"ORIGINAL ERROR\", originalError);\n            }\n            if (context) {\n                errorLogger(this._console, 'ERROR CONTEXT', context);\n            }\n        };\n        /** @internal */\n        ErrorHandler.prototype._findContext = function (error) {\n            if (error) {\n                return getDebugContext(error) ? getDebugContext(error) :\n                    this._findContext(getOriginalError(error));\n            }\n            return null;\n        };\n        /** @internal */\n        ErrorHandler.prototype._findOriginalError = function (error) {\n            var e = getOriginalError(error);\n            while (e && getOriginalError(e)) {\n                e = getOriginalError(e);\n            }\n            return e;\n        };\n        return ErrorHandler;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Defines a schema that allows an NgModule to contain the following:\n     * - Non-Angular elements named with dash case (`-`).\n     * - Element properties named with dash case (`-`).\n     * Dash case is the naming convention for custom elements.\n     *\n     * @publicApi\n     */\n    var CUSTOM_ELEMENTS_SCHEMA = {\n        name: 'custom-elements'\n    };\n    /**\n     * Defines a schema that allows any property on any element.\n     *\n     * @publicApi\n     */\n    var NO_ERRORS_SCHEMA = {\n        name: 'no-errors-schema'\n    };\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * THIS FILE CONTAINS CODE WHICH SHOULD BE TREE SHAKEN AND NEVER CALLED FROM PRODUCTION CODE!!!\n     */\n    /**\n     * Creates an `Array` construction with a given name. This is useful when\n     * looking for memory consumption to see what time of array it is.\n     *\n     *\n     * @param name Name to give to the constructor\n     * @returns A subclass of `Array` if possible. This can only be done in\n     *          environments which support `class` construct.\n     */\n    function createNamedArrayType(name) {\n        // This should never be called in prod mode, so let's verify that is the case.\n        if (ngDevMode) {\n            try {\n                // We need to do it this way so that TypeScript does not down-level the below code.\n                var FunctionConstructor = createNamedArrayType.constructor;\n                return (new FunctionConstructor('Array', \"return class ABC extends Array{}\"))(Array);\n            }\n            catch (e) {\n                // If it does not work just give up and fall back to regular Array.\n                return Array;\n            }\n        }\n        else {\n            throw new Error('Looks like we are in \\'prod mode\\', but we are creating a named Array type, which is wrong! Check your code');\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function normalizeDebugBindingName(name) {\n        // Attribute names with `$` (eg `x-y$`) are valid per spec, but unsupported by some browsers\n        name = camelCaseToDashCase(name.replace(/[$@]/g, '_'));\n        return \"ng-reflect-\" + name;\n    }\n    var CAMEL_CASE_REGEXP = /([A-Z])/g;\n    function camelCaseToDashCase(input) {\n        return input.replace(CAMEL_CASE_REGEXP, function () {\n            var m = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                m[_i] = arguments[_i];\n            }\n            return '-' + m[1].toLowerCase();\n        });\n    }\n    function normalizeDebugBindingValue(value) {\n        try {\n            // Limit the size of the value as otherwise the DOM just gets polluted.\n            return value != null ? value.toString().slice(0, 30) : value;\n        }\n        catch (e) {\n            return '[ERROR] Exception while trying to serialize the value';\n        }\n    }\n\n    // Note: This hack is necessary so we don't erroneously get a circular dependency\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** A special value which designates that a value has not changed. */\n    var NO_CHANGE = {};\n\n    /*\n     * This file contains the logic to defer all hostBindings-related styling code to run\n     * at a later point, instead of immediately (as is the case with how template-level\n     * styling instructions are run).\n     *\n     * Certain styling instructions, present within directives, components and sub-classed\n     * directives, are evaluated at different points (depending on priority) and will therefore\n     * not be applied to the styling context of an element immediately. They are instead\n     * designed to be applied just before styling is applied to an element.\n     *\n     * (The priority for when certain host-related styling operations are executed is discussed\n     * more within `interfaces/styling.ts`.)\n     */\n    function registerHostDirective(context, directiveIndex) {\n        var buffer = context[8 /* HostInstructionsQueue */];\n        if (!buffer) {\n            buffer = context[8 /* HostInstructionsQueue */] = [DEFAULT_TEMPLATE_DIRECTIVE_INDEX];\n        }\n        buffer[0 /* LastRegisteredDirectiveIndexPosition */] = directiveIndex;\n    }\n    /**\n     * Queues a styling instruction to be run just before `renderStyling()` is executed.\n     */\n    function enqueueHostInstruction(context, priority, instructionFn, instructionFnArgs) {\n        var buffer = context[8 /* HostInstructionsQueue */];\n        // Buffer may be null if host element is a template node. In this case, just ignore the style.\n        if (buffer != null) {\n            var index = findNextInsertionIndex(buffer, priority);\n            buffer.splice(index, 0, priority, instructionFn, instructionFnArgs);\n        }\n    }\n    /**\n     * Figures out where exactly to to insert the next host instruction queue entry.\n     */\n    function findNextInsertionIndex(buffer, priority) {\n        for (var i = 1 /* ValuesStartPosition */; i < buffer.length; i += 3 /* Size */) {\n            var p = buffer[i + 0 /* DirectiveIndexOffset */];\n            if (p > priority) {\n                return i;\n            }\n        }\n        return buffer.length;\n    }\n    /**\n     * Iterates through the host instructions queue (if present within the provided\n     * context) and executes each queued instruction entry.\n     */\n    function flushQueue(context) {\n        var buffer = context[8 /* HostInstructionsQueue */];\n        if (buffer) {\n            for (var i = 1 /* ValuesStartPosition */; i < buffer.length; i += 3 /* Size */) {\n                var fn = buffer[i + 1 /* InstructionFnOffset */];\n                var args = buffer[i + 2 /* ParamsOffset */];\n                fn.apply(this, args);\n            }\n            buffer.length = 1 /* ValuesStartPosition */;\n        }\n    }\n    /**\n     * Determines whether or not to allow the host instructions queue to be flushed or not.\n     *\n     * Because the hostBindings function code is unaware of the presence of other host bindings\n     * (as well as the template function) then styling is evaluated multiple times per element.\n     * To prevent style and class values from being applied to the element multiple times, a\n     * flush is only allowed when the last directive (the directive that was registered into\n     * the styling context) attempts to render its styling.\n     */\n    function allowFlush(context, directiveIndex) {\n        var buffer = context[8 /* HostInstructionsQueue */];\n        if (buffer) {\n            return buffer[0 /* LastRegisteredDirectiveIndexPosition */] ===\n                directiveIndex;\n        }\n        return true;\n    }\n\n    /**\n     * Combines the binding value and a factory for an animation player.\n     *\n     * Used to bind a player to an element template binding (currently only\n     * `[style]`, `[style.prop]`, `[class]` and `[class.name]` bindings\n     * supported). The provided `factoryFn` function will be run once all\n     * the associated bindings have been evaluated on the element and is\n     * designed to return a player which will then be placed on the element.\n     *\n     * @param factoryFn The function that is used to create a player\n     *   once all the rendering-related (styling values) have been\n     *   processed for the element binding.\n     * @param value The raw value that will be exposed to the binding\n     *   so that the binding can update its internal values when\n     *   any changes are evaluated.\n     */\n    function bindPlayerFactory(factoryFn, value) {\n        return new BoundPlayerFactory(factoryFn, value);\n    }\n    var BoundPlayerFactory = /** @class */ (function () {\n        function BoundPlayerFactory(fn, value) {\n            this.fn = fn;\n            this.value = value;\n        }\n        return BoundPlayerFactory;\n    }());\n\n    /**\n     * This file includes the code to power all styling-binding operations in Angular.\n     *\n     * These include:\n     * [style]=\"myStyleObj\"\n     * [class]=\"myClassObj\"\n     * [style.prop]=\"myPropValue\"\n     * [class.name]=\"myClassValue\"\n     *\n     * It also includes code that will allow style binding code to operate within host\n     * bindings for components/directives.\n     *\n     * There are many different ways in which these functions below are called. Please see\n     * `render3/interfaces/styling.ts` to get a better idea of how the styling algorithm works.\n     */\n    /**\n     * Creates a new StylingContext an fills it with the provided static styling attribute values.\n     */\n    function initializeStaticContext(attrs, stylingStartIndex, directiveIndex) {\n        if (directiveIndex === void 0) { directiveIndex = 0; }\n        var context = createEmptyStylingContext();\n        patchContextWithStaticAttrs(context, attrs, stylingStartIndex, directiveIndex);\n        return context;\n    }\n    /**\n     * Designed to update an existing styling context with new static styling\n     * data (classes and styles).\n     *\n     * @param context the existing styling context\n     * @param attrs an array of new static styling attributes that will be\n     *              assigned to the context\n     * @param attrsStylingStartIndex what index to start iterating within the\n     *              provided `attrs` array to start reading style and class values\n     */\n    function patchContextWithStaticAttrs(context, attrs, attrsStylingStartIndex, directiveIndex) {\n        // this means the context has already been set and instantiated\n        if (context[1 /* MasterFlagPosition */] & 16 /* BindingAllocationLocked */)\n            return;\n        allocateOrUpdateDirectiveIntoContext(context, directiveIndex);\n        var initialClasses = null;\n        var initialStyles = null;\n        var mode = -1;\n        for (var i = attrsStylingStartIndex; i < attrs.length; i++) {\n            var attr = attrs[i];\n            if (typeof attr == 'number') {\n                mode = attr;\n            }\n            else if (mode == 1 /* Classes */) {\n                initialClasses = initialClasses || context[4 /* InitialClassValuesPosition */];\n                patchInitialStylingValue(initialClasses, attr, true, directiveIndex);\n            }\n            else if (mode == 2 /* Styles */) {\n                initialStyles = initialStyles || context[3 /* InitialStyleValuesPosition */];\n                patchInitialStylingValue(initialStyles, attr, attrs[++i], directiveIndex);\n            }\n        }\n    }\n    /**\n     * Designed to add a style or class value into the existing set of initial styles.\n     *\n     * The function will search and figure out if a style/class value is already present\n     * within the provided initial styling array. If and when a style/class value is\n     * present (allocated) then the code below will set the new value depending on the\n     * following cases:\n     *\n     *  1) if the existing value is falsy (this happens because a `[class.prop]` or\n     *     `[style.prop]` binding was set, but there wasn't a matching static style\n     *     or class present on the context)\n     *  2) if the value was set already by the template, component or directive, but the\n     *     new value is set on a higher level (i.e. a sub component which extends a parent\n     *     component sets its value after the parent has already set the same one)\n     *  3) if the same directive provides a new set of styling values to set\n     *\n     * @param initialStyling the initial styling array where the new styling entry will be added to\n     * @param prop the property value of the new entry (e.g. `width` (styles) or `foo` (classes))\n     * @param value the styling value of the new entry (e.g. `absolute` (styles) or `true` (classes))\n     * @param directiveOwnerIndex the directive owner index value of the styling source responsible\n     *        for these styles (see `interfaces/styling.ts#directives` for more info)\n     */\n    function patchInitialStylingValue(initialStyling, prop, value, directiveOwnerIndex) {\n        for (var i = 2 /* KeyValueStartPosition */; i < initialStyling.length; i += 3 /* Size */) {\n            var key = initialStyling[i + 0 /* PropOffset */];\n            if (key === prop) {\n                var existingValue = initialStyling[i + 1 /* ValueOffset */];\n                var existingOwner = initialStyling[i + 2 /* DirectiveOwnerOffset */];\n                if (allowValueChange(existingValue, value, existingOwner, directiveOwnerIndex)) {\n                    addOrUpdateStaticStyle(i, initialStyling, prop, value, directiveOwnerIndex);\n                }\n                return;\n            }\n        }\n        // We did not find existing key, add a new one.\n        addOrUpdateStaticStyle(null, initialStyling, prop, value, directiveOwnerIndex);\n    }\n    /**\n     * Runs through the initial class values present in the provided\n     * context and renders them via the provided renderer on the element.\n     *\n     * @param element the element the styling will be applied to\n     * @param context the source styling context which contains the initial class values\n     * @param renderer the renderer instance that will be used to apply the class\n     * @returns the index that the classes were applied up until\n     */\n    function renderInitialClasses(element, context, renderer, startIndex) {\n        var initialClasses = context[4 /* InitialClassValuesPosition */];\n        var i = startIndex || 2 /* KeyValueStartPosition */;\n        while (i < initialClasses.length) {\n            var value = initialClasses[i + 1 /* ValueOffset */];\n            if (value) {\n                setClass(element, initialClasses[i + 0 /* PropOffset */], true, renderer, null);\n            }\n            i += 3 /* Size */;\n        }\n        return i;\n    }\n    /**\n     * Runs through the initial styles values present in the provided\n     * context and renders them via the provided renderer on the element.\n     *\n     * @param element the element the styling will be applied to\n     * @param context the source styling context which contains the initial class values\n     * @param renderer the renderer instance that will be used to apply the class\n     * @returns the index that the styles were applied up until\n     */\n    function renderInitialStyles(element, context, renderer, startIndex) {\n        var initialStyles = context[3 /* InitialStyleValuesPosition */];\n        var i = startIndex || 2 /* KeyValueStartPosition */;\n        while (i < initialStyles.length) {\n            var value = initialStyles[i + 1 /* ValueOffset */];\n            if (value) {\n                setStyle(element, initialStyles[i + 0 /* PropOffset */], value, renderer, null);\n            }\n            i += 3 /* Size */;\n        }\n        return i;\n    }\n    /**\n     * Adds in new binding values to a styling context.\n     *\n     * If a directive value is provided then all provided class/style binding names will\n     * reference the provided directive.\n     *\n     * @param context the existing styling context\n     * @param classBindingNames an array of class binding names that will be added to the context\n     * @param styleBindingNames an array of style binding names that will be added to the context\n     * @param styleSanitizer an optional sanitizer that handle all sanitization on for each of\n     *    the bindings added to the context. Note that if a directive is provided then the sanitizer\n     *    instance will only be active if and when the directive updates the bindings that it owns.\n     */\n    function updateContextWithBindings(context, directiveIndex, classBindingNames, styleBindingNames, styleSanitizer) {\n        if (context[1 /* MasterFlagPosition */] & 16 /* BindingAllocationLocked */)\n            return;\n        // this means the context has already been patched with the directive's bindings\n        var isNewDirective = findOrPatchDirectiveIntoRegistry(context, directiveIndex, false, styleSanitizer);\n        if (!isNewDirective) {\n            // this means the directive has already been patched in ... No point in doing anything\n            return;\n        }\n        if (styleBindingNames) {\n            styleBindingNames = hyphenateEntries(styleBindingNames);\n        }\n        // there are alot of variables being used below to track where in the context the new\n        // binding values will be placed. Because the context consists of multiple types of\n        // entries (single classes/styles and multi classes/styles) alot of the index positions\n        // need to be computed ahead of time and the context needs to be extended before the values\n        // are inserted in.\n        var singlePropOffsetValues = context[5 /* SinglePropOffsetPositions */];\n        var totalCurrentClassBindings = singlePropOffsetValues[1 /* ClassesCountPosition */];\n        var totalCurrentStyleBindings = singlePropOffsetValues[0 /* StylesCountPosition */];\n        var cachedClassMapValues = context[6 /* CachedMultiClasses */];\n        var cachedStyleMapValues = context[7 /* CachedMultiStyles */];\n        var classesOffset = totalCurrentClassBindings * 4 /* Size */;\n        var stylesOffset = totalCurrentStyleBindings * 4 /* Size */;\n        var singleStylesStartIndex = 10 /* SingleStylesStartPosition */;\n        var singleClassesStartIndex = singleStylesStartIndex + stylesOffset;\n        var multiStylesStartIndex = singleClassesStartIndex + classesOffset;\n        var multiClassesStartIndex = multiStylesStartIndex + stylesOffset;\n        // because we're inserting more bindings into the context, this means that the\n        // binding values need to be referenced the singlePropOffsetValues array so that\n        // the template/directive can easily find them inside of the `styleProp`\n        // and the `classProp` functions without iterating through the entire context.\n        // The first step to setting up these reference points is to mark how many bindings\n        // are being added. Even if these bindings already exist in the context, the directive\n        // or template code will still call them unknowingly. Therefore the total values need\n        // to be registered so that we know how many bindings are assigned to each directive.\n        var currentSinglePropsLength = singlePropOffsetValues.length;\n        singlePropOffsetValues.push(styleBindingNames ? styleBindingNames.length : 0, classBindingNames ? classBindingNames.length : 0);\n        // the code below will check to see if a new style binding already exists in the context\n        // if so then there is no point in inserting it into the context again. Whether or not it\n        // exists the styling offset code will now know exactly where it is\n        var insertionOffset = 0;\n        var filteredStyleBindingNames = [];\n        if (styleBindingNames && styleBindingNames.length) {\n            for (var i_1 = 0; i_1 < styleBindingNames.length; i_1++) {\n                var name_1 = styleBindingNames[i_1];\n                var singlePropIndex = getMatchingBindingIndex(context, name_1, singleStylesStartIndex, singleClassesStartIndex);\n                if (singlePropIndex == -1) {\n                    singlePropIndex = singleClassesStartIndex + insertionOffset;\n                    insertionOffset += 4 /* Size */;\n                    filteredStyleBindingNames.push(name_1);\n                }\n                singlePropOffsetValues.push(singlePropIndex);\n            }\n        }\n        // just like with the style binding loop above, the new class bindings get the same treatment...\n        var filteredClassBindingNames = [];\n        if (classBindingNames && classBindingNames.length) {\n            for (var i_2 = 0; i_2 < classBindingNames.length; i_2++) {\n                var name_2 = classBindingNames[i_2];\n                var singlePropIndex = getMatchingBindingIndex(context, name_2, singleClassesStartIndex, multiStylesStartIndex);\n                if (singlePropIndex == -1) {\n                    singlePropIndex = multiStylesStartIndex + insertionOffset;\n                    insertionOffset += 4 /* Size */;\n                    filteredClassBindingNames.push(name_2);\n                }\n                else {\n                    singlePropIndex += filteredStyleBindingNames.length * 4 /* Size */;\n                }\n                singlePropOffsetValues.push(singlePropIndex);\n            }\n        }\n        // because new styles are being inserted, this means the existing collection of style offset\n        // index values are incorrect (they point to the wrong values). The code below will run through\n        // the entire offset array and update the existing set of index values to point to their new\n        // locations while taking the new binding values into consideration.\n        var i = 2 /* ValueStartPosition */;\n        if (filteredStyleBindingNames.length) {\n            while (i < currentSinglePropsLength) {\n                var totalStyles = singlePropOffsetValues[i + 0 /* StylesCountPosition */];\n                var totalClasses = singlePropOffsetValues[i + 1 /* ClassesCountPosition */];\n                if (totalClasses) {\n                    var start = i + 2 /* ValueStartPosition */ + totalStyles;\n                    for (var j = start; j < start + totalClasses; j++) {\n                        singlePropOffsetValues[j] += filteredStyleBindingNames.length * 4 /* Size */;\n                    }\n                }\n                var total = totalStyles + totalClasses;\n                i += 2 /* ValueStartPosition */ + total;\n            }\n        }\n        var totalNewEntries = filteredClassBindingNames.length + filteredStyleBindingNames.length;\n        // in the event that there are new style values being inserted, all existing class and style\n        // bindings need to have their pointer values offsetted with the new amount of space that is\n        // used for the new style/class bindings.\n        for (var i_3 = singleStylesStartIndex; i_3 < context.length; i_3 += 4 /* Size */) {\n            var isMultiBased = i_3 >= multiStylesStartIndex;\n            var isClassBased = i_3 >= (isMultiBased ? multiClassesStartIndex : singleClassesStartIndex);\n            var flag = getPointers(context, i_3);\n            var staticIndex = getInitialIndex(flag);\n            var singleOrMultiIndex = getMultiOrSingleIndex(flag);\n            if (isMultiBased) {\n                singleOrMultiIndex +=\n                    isClassBased ? (filteredStyleBindingNames.length * 4 /* Size */) : 0;\n            }\n            else {\n                singleOrMultiIndex += (totalNewEntries * 4 /* Size */) +\n                    ((isClassBased ? filteredStyleBindingNames.length : 0) * 4 /* Size */);\n            }\n            setFlag(context, i_3, pointers(flag, staticIndex, singleOrMultiIndex));\n        }\n        // this is where we make space in the context for the new style bindings\n        for (var i_4 = 0; i_4 < filteredStyleBindingNames.length * 4 /* Size */; i_4++) {\n            context.splice(multiClassesStartIndex, 0, null);\n            context.splice(singleClassesStartIndex, 0, null);\n            singleClassesStartIndex++;\n            multiStylesStartIndex++;\n            multiClassesStartIndex += 2; // both single + multi slots were inserted\n        }\n        // this is where we make space in the context for the new class bindings\n        for (var i_5 = 0; i_5 < filteredClassBindingNames.length * 4 /* Size */; i_5++) {\n            context.splice(multiStylesStartIndex, 0, null);\n            context.push(null);\n            multiStylesStartIndex++;\n            multiClassesStartIndex++;\n        }\n        var initialClasses = context[4 /* InitialClassValuesPosition */];\n        var initialStyles = context[3 /* InitialStyleValuesPosition */];\n        // the code below will insert each new entry into the context and assign the appropriate\n        // flags and index values to them. It's important this runs at the end of this function\n        // because the context, property offset and index values have all been computed just before.\n        for (var i_6 = 0; i_6 < totalNewEntries; i_6++) {\n            var entryIsClassBased = i_6 >= filteredStyleBindingNames.length;\n            var adjustedIndex = entryIsClassBased ? (i_6 - filteredStyleBindingNames.length) : i_6;\n            var propName = entryIsClassBased ? filteredClassBindingNames[adjustedIndex] :\n                filteredStyleBindingNames[adjustedIndex];\n            var multiIndex = void 0, singleIndex = void 0;\n            if (entryIsClassBased) {\n                multiIndex = multiClassesStartIndex +\n                    ((totalCurrentClassBindings + adjustedIndex) * 4 /* Size */);\n                singleIndex = singleClassesStartIndex +\n                    ((totalCurrentClassBindings + adjustedIndex) * 4 /* Size */);\n            }\n            else {\n                multiIndex =\n                    multiStylesStartIndex + ((totalCurrentStyleBindings + adjustedIndex) * 4 /* Size */);\n                singleIndex = singleStylesStartIndex +\n                    ((totalCurrentStyleBindings + adjustedIndex) * 4 /* Size */);\n            }\n            // if a property is not found in the initial style values list then it\n            // is ALWAYS added in case a follow-up directive introduces the same initial\n            // style/class value later on.\n            var initialValuesToLookup = entryIsClassBased ? initialClasses : initialStyles;\n            var indexForInitial = getInitialStylingValuesIndexOf(initialValuesToLookup, propName);\n            if (indexForInitial === -1) {\n                indexForInitial = addOrUpdateStaticStyle(null, initialValuesToLookup, propName, entryIsClassBased ? false : null, directiveIndex) +\n                    1 /* ValueOffset */;\n            }\n            else {\n                indexForInitial += 1 /* ValueOffset */;\n            }\n            var initialFlag = prepareInitialFlag(context, propName, entryIsClassBased, styleSanitizer || null);\n            setFlag(context, singleIndex, pointers(initialFlag, indexForInitial, multiIndex));\n            setProp(context, singleIndex, propName);\n            setValue(context, singleIndex, null);\n            setPlayerBuilderIndex(context, singleIndex, 0, directiveIndex);\n            setFlag(context, multiIndex, pointers(initialFlag, indexForInitial, singleIndex));\n            setProp(context, multiIndex, propName);\n            setValue(context, multiIndex, null);\n            setPlayerBuilderIndex(context, multiIndex, 0, directiveIndex);\n        }\n        // the total classes/style values are updated so the next time the context is patched\n        // additional style/class bindings from another directive then it knows exactly where\n        // to insert them in the context\n        singlePropOffsetValues[1 /* ClassesCountPosition */] =\n            totalCurrentClassBindings + filteredClassBindingNames.length;\n        singlePropOffsetValues[0 /* StylesCountPosition */] =\n            totalCurrentStyleBindings + filteredStyleBindingNames.length;\n        // the map-based values also need to know how many entries got inserted\n        cachedClassMapValues[0 /* EntriesCountPosition */] +=\n            filteredClassBindingNames.length;\n        cachedStyleMapValues[0 /* EntriesCountPosition */] +=\n            filteredStyleBindingNames.length;\n        var newStylesSpaceAllocationSize = filteredStyleBindingNames.length * 4 /* Size */;\n        var newClassesSpaceAllocationSize = filteredClassBindingNames.length * 4 /* Size */;\n        // update the multi styles cache with a reference for the directive that was just inserted\n        var directiveMultiStylesStartIndex = multiStylesStartIndex + totalCurrentStyleBindings * 4 /* Size */;\n        var cachedStyleMapIndex = cachedStyleMapValues.length;\n        registerMultiMapEntry(context, directiveIndex, false, directiveMultiStylesStartIndex, filteredStyleBindingNames.length);\n        for (var i_7 = 1 /* ValuesStartPosition */; i_7 < cachedStyleMapIndex; i_7 += 4 /* Size */) {\n            // multi values start after all the single values (which is also where classes are) in the\n            // context therefore the new class allocation size should be taken into account\n            cachedStyleMapValues[i_7 + 1 /* PositionStartOffset */] +=\n                newClassesSpaceAllocationSize + newStylesSpaceAllocationSize;\n        }\n        // update the multi classes cache with a reference for the directive that was just inserted\n        var directiveMultiClassesStartIndex = multiClassesStartIndex + totalCurrentClassBindings * 4 /* Size */;\n        var cachedClassMapIndex = cachedClassMapValues.length;\n        registerMultiMapEntry(context, directiveIndex, true, directiveMultiClassesStartIndex, filteredClassBindingNames.length);\n        for (var i_8 = 1 /* ValuesStartPosition */; i_8 < cachedClassMapIndex; i_8 += 4 /* Size */) {\n            // the reason why both the styles + classes space is allocated to the existing offsets is\n            // because the styles show up before the classes in the context and any new inserted\n            // styles will offset any existing class entries in the context (even if there are no\n            // new class entries added) also the reason why it's *2 is because both single + multi\n            // entries for each new style have been added in the context before the multi class values\n            // actually start\n            cachedClassMapValues[i_8 + 1 /* PositionStartOffset */] +=\n                (newStylesSpaceAllocationSize * 2) + newClassesSpaceAllocationSize;\n        }\n        // there is no initial value flag for the master index since it doesn't\n        // reference an initial style value\n        var masterFlag = pointers(0, 0, multiStylesStartIndex);\n        setFlag(context, 1 /* MasterFlagPosition */, masterFlag);\n    }\n    /**\n     * Searches through the existing registry of directives\n     */\n    function findOrPatchDirectiveIntoRegistry(context, directiveIndex, staticModeOnly, styleSanitizer) {\n        var directiveRegistry = context[2 /* DirectiveRegistryPosition */];\n        var index = directiveIndex * 2 /* Size */;\n        var singlePropStartPosition = index + 0 /* SinglePropValuesIndexOffset */;\n        // this means that the directive has already been registered into the registry\n        if (index < directiveRegistry.length &&\n            directiveRegistry[singlePropStartPosition] >= 0)\n            return false;\n        var singlePropsStartIndex = staticModeOnly ? -1 : context[5 /* SinglePropOffsetPositions */].length;\n        allocateOrUpdateDirectiveIntoContext(context, directiveIndex, singlePropsStartIndex, styleSanitizer);\n        return true;\n    }\n    function getMatchingBindingIndex(context, bindingName, start, end) {\n        for (var j = start; j < end; j += 4 /* Size */) {\n            if (getProp(context, j) === bindingName)\n                return j;\n        }\n        return -1;\n    }\n    /**\n     * Registers the provided multi class values to the context.\n     *\n     * This function will iterate over the provided `classesInput` values and\n     * insert/update or remove them from the context at exactly the right spot.\n     *\n     * This function also takes in a directive which implies that the styling values will\n     * be evaluated for that directive with respect to any other styling that already exists\n     * on the context. When there are styles that conflict (e.g. say `ngClass` and `[class]`\n     * both update the `foo` className value at the same time) then the styling algorithm code below\n     * will decide which one wins based on the directive styling prioritization mechanism. (This\n     * mechanism is better explained in render3/interfaces/styling.ts#directives).\n     *\n     * This function will not render any styling values on screen, but is rather designed to\n     * prepare the context for that. `renderStyling` must be called afterwards to render any\n     * styling data that was set in this function (note that `updateClassProp` and\n     * `updateStyleProp` are designed to be run after this function is run).\n     *\n     * @param context The styling context that will be updated with the\n     *    newly provided style values.\n     * @param classesInput The key/value map of CSS class names that will be used for the update.\n     * @param stylesInput The key/value map of CSS styles that will be used for the update.\n     */\n    function updateClassMap(context, classesInput, directiveIndex) {\n        if (directiveIndex === void 0) { directiveIndex = 0; }\n        updateStylingMap(context, classesInput, true, directiveIndex);\n    }\n    /**\n     * Registers the provided multi style values to the context.\n     *\n     * This function will iterate over the provided `stylesInput` values and\n     * insert/update or remove them from the context at exactly the right spot.\n     *\n     * This function also takes in a directive which implies that the styling values will\n     * be evaluated for that directive with respect to any other styling that already exists\n     * on the context. When there are styles that conflict (e.g. say `ngStyle` and `[style]`\n     * both update the `width` property at the same time) then the styling algorithm code below\n     * will decide which one wins based on the directive styling prioritization mechanism. (This\n     * mechanism is better explained in render3/interfaces/styling.ts#directives).\n     *\n     * This function will not render any styling values on screen, but is rather designed to\n     * prepare the context for that. `renderStyling` must be called afterwards to render any\n     * styling data that was set in this function (note that `updateClassProp` and\n     * `updateStyleProp` are designed to be run after this function is run).\n     *\n     * @param context The styling context that will be updated with the\n     *    newly provided style values.\n     * @param stylesInput The key/value map of CSS styles that will be used for the update.\n     */\n    function updateStyleMap(context, stylesInput, directiveIndex) {\n        if (directiveIndex === void 0) { directiveIndex = 0; }\n        updateStylingMap(context, stylesInput, false, directiveIndex);\n    }\n    function updateStylingMap(context, input, entryIsClassBased, directiveIndex) {\n        if (directiveIndex === void 0) { directiveIndex = 0; }\n        ngDevMode && (entryIsClassBased ? ngDevMode.classMap++ : ngDevMode.styleMap++);\n        ngDevMode && assertValidDirectiveIndex(context, directiveIndex);\n        // early exit (this is what's done to avoid using ctx.bind() to cache the value)\n        if (isMultiValueCacheHit(context, entryIsClassBased, directiveIndex, input))\n            return;\n        input =\n            input === NO_CHANGE ? readCachedMapValue(context, entryIsClassBased, directiveIndex) : input;\n        var element = context[0 /* ElementPosition */];\n        var playerBuilder = input instanceof BoundPlayerFactory ?\n            new ClassAndStylePlayerBuilder(input, element, entryIsClassBased ? 1 /* Class */ : 2 /* Style */) :\n            null;\n        var rawValue = playerBuilder ? input.value : input;\n        // the position is always the same, but whether the player builder gets set\n        // at all (depending if its set) will be reflected in the index value below...\n        var playerBuilderPosition = entryIsClassBased ? 1 /* ClassMapPlayerBuilderPosition */ :\n            3 /* StyleMapPlayerBuilderPosition */;\n        var playerBuilderIndex = playerBuilder ? playerBuilderPosition : 0;\n        var playerBuildersAreDirty = false;\n        if (hasPlayerBuilderChanged(context, playerBuilder, playerBuilderPosition)) {\n            setPlayerBuilder(context, playerBuilder, playerBuilderPosition);\n            playerBuildersAreDirty = true;\n        }\n        // each time a string-based value pops up then it shouldn't require a deep\n        // check of what's changed.\n        var startIndex;\n        var endIndex;\n        var propNames;\n        var applyAll = false;\n        if (entryIsClassBased) {\n            if (typeof rawValue == 'string') {\n                propNames = rawValue.split(/\\s+/);\n                // this boolean is used to avoid having to create a key/value map of `true` values\n                // since a className string implies that all those classes are added\n                applyAll = true;\n            }\n            else {\n                propNames = rawValue ? Object.keys(rawValue) : EMPTY_ARRAY$1;\n            }\n            startIndex = getMultiClassesStartIndex(context);\n            endIndex = context.length;\n        }\n        else {\n            startIndex = getMultiStylesStartIndex(context);\n            endIndex = getMultiClassesStartIndex(context);\n            propNames = rawValue ? Object.keys(rawValue) : EMPTY_ARRAY$1;\n        }\n        var values = (rawValue || EMPTY_OBJ);\n        patchStylingMapIntoContext(context, directiveIndex, playerBuilderIndex, startIndex, endIndex, propNames, applyAll || values, input, entryIsClassBased);\n        if (playerBuildersAreDirty) {\n            setContextPlayersDirty(context, true);\n        }\n        ngDevMode && (entryIsClassBased ? ngDevMode.classMapCacheMiss++ : ngDevMode.styleMapCacheMiss++);\n    }\n    /**\n     * Applies the given multi styling (styles or classes) values to the context.\n     *\n     * The styling algorithm code that applies multi-level styling (things like `[style]` and `[class]`\n     * values) resides here.\n     *\n     * Because this function understands that multiple directives may all write to the `[style]` and\n     * `[class]` bindings (through host bindings), it relies of each directive applying its binding\n     * value in order. This means that a directive like `classADirective` will always fire before\n     * `classBDirective` and therefore its styling values (classes and styles) will always be evaluated\n     * in the same order. Because of this consistent ordering, the first directive has a higher priority\n     * than the second one. It is with this prioritzation mechanism that the styling algorithm knows how\n     * to merge and apply redudant styling properties.\n     *\n     * The function itself applies the key/value entries (or an array of keys) to\n     * the context in the following steps.\n     *\n     * STEP 1:\n     *    First check to see what properties are already set and in use by another directive in the\n     *    context (e.g. `ngClass` set the `width` value and `[style.width]=\"w\"` in a directive is\n     *    attempting to set it as well).\n     *\n     * STEP 2:\n     *    All remaining properties (that were not set prior to this directive) are now updated in\n     *    the context. Any new properties are inserted exactly at their spot in the context and any\n     *    previously set properties are shifted to exactly where the cursor sits while iterating over\n     *    the context. The end result is a balanced context that includes the exact ordering of the\n     *    styling properties/values for the provided input from the directive.\n     *\n     * STEP 3:\n     *    Any unmatched properties in the context that belong to the directive are set to null\n     *\n     * Once the updating phase is done, then the algorithm will decide whether or not to flag the\n     * follow-up directives (the directives that will pass in their styling values) depending on if\n     * the \"shape\" of the multi-value map has changed (either if any keys are removed or added or\n     * if there are any new `null` values). If any follow-up directives are flagged as dirty then the\n     * algorithm will run again for them. Otherwise if the shape did not change then any follow-up\n     * directives will not run (so long as their binding values stay the same).\n     *\n     * @returns the total amount of new slots that were allocated into the context due to new styling\n     *          properties that were detected.\n     */\n    function patchStylingMapIntoContext(context, directiveIndex, playerBuilderIndex, ctxStart, ctxEnd, props, values, cacheValue, entryIsClassBased) {\n        var dirty = false;\n        var cacheIndex = 1 /* ValuesStartPosition */ +\n            directiveIndex * 4 /* Size */;\n        // the cachedValues array is the registry of all multi style values (map values). Each\n        // value is stored (cached) each time is updated.\n        var cachedValues = context[entryIsClassBased ? 6 /* CachedMultiClasses */ : 7 /* CachedMultiStyles */];\n        // this is the index in which this directive has ownership access to write to this\n        // value (anything before is owned by a previous directive that is more important)\n        var ownershipValuesStartIndex = cachedValues[cacheIndex + 1 /* PositionStartOffset */];\n        var existingCachedValue = cachedValues[cacheIndex + 2 /* ValueOffset */];\n        var existingCachedValueCount = cachedValues[cacheIndex + 3 /* ValueCountOffset */];\n        var existingCachedValueIsDirty = cachedValues[cacheIndex + 0 /* DirtyFlagOffset */] === 1;\n        // A shape change means the provided map value has either removed or added new properties\n        // compared to what were in the last time. If a shape change occurs then it means that all\n        // follow-up multi-styling entries are obsolete and will be examined again when CD runs\n        // them. If a shape change has not occurred then there is no reason to check any other\n        // directive values if their identity has not changed. If a previous directive set this\n        // value as dirty (because its own shape changed) then this means that the object has been\n        // offset to a different area in the context. Because its value has been offset then it\n        // can't write to a region that it wrote to before (which may have been apart of another\n        // directive) and therefore its shape changes too.\n        var valuesEntryShapeChange = existingCachedValueIsDirty || ((!existingCachedValue && cacheValue) ? true : false);\n        var totalUniqueValues = 0;\n        var totalNewAllocatedSlots = 0;\n        // this is a trick to avoid building {key:value} map where all the values\n        // are `true` (this happens when a className string is provided instead of a\n        // map as an input value to this styling algorithm)\n        var applyAllProps = values === true;\n        // STEP 1:\n        // loop through the earlier directives and figure out if any properties here will be placed\n        // in their area (this happens when the value is null because the earlier directive erased it).\n        var ctxIndex = ctxStart;\n        var totalRemainingProperties = props.length;\n        while (ctxIndex < ownershipValuesStartIndex) {\n            var currentProp = getProp(context, ctxIndex);\n            if (totalRemainingProperties) {\n                for (var i = 0; i < props.length; i++) {\n                    var mapProp = props[i];\n                    var normalizedProp = mapProp ? (entryIsClassBased ? mapProp : hyphenate(mapProp)) : null;\n                    if (normalizedProp && currentProp === normalizedProp) {\n                        var currentValue = getValue(context, ctxIndex);\n                        var currentDirectiveIndex = getDirectiveIndexFromEntry(context, ctxIndex);\n                        var value = applyAllProps ? true : values[normalizedProp];\n                        var currentFlag = getPointers(context, ctxIndex);\n                        if (hasValueChanged(currentFlag, currentValue, value) &&\n                            allowValueChange(currentValue, value, currentDirectiveIndex, directiveIndex)) {\n                            setValue(context, ctxIndex, value);\n                            setPlayerBuilderIndex(context, ctxIndex, playerBuilderIndex, directiveIndex);\n                            if (hasInitialValueChanged(context, currentFlag, value)) {\n                                setDirty(context, ctxIndex, true);\n                                dirty = true;\n                            }\n                        }\n                        props[i] = null;\n                        totalRemainingProperties--;\n                        break;\n                    }\n                }\n            }\n            ctxIndex += 4 /* Size */;\n        }\n        // STEP 2:\n        // apply the left over properties to the context in the correct order.\n        if (totalRemainingProperties) {\n            var sanitizer = entryIsClassBased ? null : getStyleSanitizer(context, directiveIndex);\n            propertiesLoop: for (var i = 0; i < props.length; i++) {\n                var mapProp = props[i];\n                if (!mapProp) {\n                    // this is an early exit in case a value was already encountered above in the\n                    // previous loop (which means that the property was applied or rejected)\n                    continue;\n                }\n                var value = applyAllProps ? true : values[mapProp];\n                var normalizedProp = entryIsClassBased ? mapProp : hyphenate(mapProp);\n                var isInsideOwnershipArea = ctxIndex >= ownershipValuesStartIndex;\n                for (var j = ctxIndex; j < ctxEnd; j += 4 /* Size */) {\n                    var distantCtxProp = getProp(context, j);\n                    if (distantCtxProp === normalizedProp) {\n                        var distantCtxDirectiveIndex = getDirectiveIndexFromEntry(context, j);\n                        var distantCtxPlayerBuilderIndex = getPlayerBuilderIndex(context, j);\n                        var distantCtxValue = getValue(context, j);\n                        var distantCtxFlag = getPointers(context, j);\n                        if (allowValueChange(distantCtxValue, value, distantCtxDirectiveIndex, directiveIndex)) {\n                            // even if the entry isn't updated (by value or directiveIndex) then\n                            // it should still be moved over to the correct spot in the array so\n                            // the iteration loop is tighter.\n                            if (isInsideOwnershipArea) {\n                                swapMultiContextEntries(context, ctxIndex, j);\n                                totalUniqueValues++;\n                            }\n                            if (hasValueChanged(distantCtxFlag, distantCtxValue, value)) {\n                                if (value === null || value === undefined && value !== distantCtxValue) {\n                                    valuesEntryShapeChange = true;\n                                }\n                                setValue(context, ctxIndex, value);\n                                // SKIP IF INITIAL CHECK\n                                // If the former `value` is `null` then it means that an initial value\n                                // could be being rendered on screen. If that is the case then there is\n                                // no point in updating the value in case it matches. In other words if the\n                                // new value is the exact same as the previously rendered value (which\n                                // happens to be the initial value) then do nothing.\n                                if (distantCtxValue !== null ||\n                                    hasInitialValueChanged(context, distantCtxFlag, value)) {\n                                    setDirty(context, ctxIndex, true);\n                                    dirty = true;\n                                }\n                            }\n                            if (distantCtxDirectiveIndex !== directiveIndex ||\n                                playerBuilderIndex !== distantCtxPlayerBuilderIndex) {\n                                setPlayerBuilderIndex(context, ctxIndex, playerBuilderIndex, directiveIndex);\n                            }\n                        }\n                        ctxIndex += 4 /* Size */;\n                        continue propertiesLoop;\n                    }\n                }\n                // fallback case ... value not found at all in the context\n                if (value != null) {\n                    valuesEntryShapeChange = true;\n                    totalUniqueValues++;\n                    var flag = prepareInitialFlag(context, normalizedProp, entryIsClassBased, sanitizer) |\n                        1 /* Dirty */;\n                    var insertionIndex = isInsideOwnershipArea ?\n                        ctxIndex :\n                        (ownershipValuesStartIndex + totalNewAllocatedSlots * 4 /* Size */);\n                    insertNewMultiProperty(context, insertionIndex, entryIsClassBased, normalizedProp, flag, value, directiveIndex, playerBuilderIndex);\n                    totalNewAllocatedSlots++;\n                    ctxEnd += 4 /* Size */;\n                    ctxIndex += 4 /* Size */;\n                    dirty = true;\n                }\n            }\n        }\n        // STEP 3:\n        // Remove (nullify) any existing entries in the context that were not apart of the\n        // map input value that was passed into this algorithm for this directive.\n        while (ctxIndex < ctxEnd) {\n            valuesEntryShapeChange = true; // some values are missing\n            var ctxValue = getValue(context, ctxIndex);\n            var ctxFlag = getPointers(context, ctxIndex);\n            var ctxDirective = getDirectiveIndexFromEntry(context, ctxIndex);\n            if (ctxValue != null) {\n                valuesEntryShapeChange = true;\n            }\n            if (hasValueChanged(ctxFlag, ctxValue, null)) {\n                setValue(context, ctxIndex, null);\n                // only if the initial value is falsy then\n                if (hasInitialValueChanged(context, ctxFlag, ctxValue)) {\n                    setDirty(context, ctxIndex, true);\n                    dirty = true;\n                }\n                setPlayerBuilderIndex(context, ctxIndex, playerBuilderIndex, directiveIndex);\n            }\n            ctxIndex += 4 /* Size */;\n        }\n        // Because the object shape has changed, this means that all follow-up directives will need to\n        // reapply their values into the object. For this to happen, the cached array needs to be updated\n        // with dirty flags so that follow-up calls to `updateStylingMap` will reapply their styling code.\n        // the reapplication of styling code within the context will reshape it and update the offset\n        // values (also follow-up directives can write new values in case earlier directives set anything\n        // to null due to removals or falsy values).\n        valuesEntryShapeChange = valuesEntryShapeChange || existingCachedValueCount !== totalUniqueValues;\n        updateCachedMapValue(context, directiveIndex, entryIsClassBased, cacheValue, ownershipValuesStartIndex, ctxEnd, totalUniqueValues, valuesEntryShapeChange);\n        if (dirty) {\n            setContextDirty(context, true);\n        }\n        return totalNewAllocatedSlots;\n    }\n    /**\n     * Sets and resolves a single class value on the provided `StylingContext` so\n     * that they can be applied to the element once `renderStyling` is called.\n     *\n     * @param context The styling context that will be updated with the\n     *    newly provided class value.\n     * @param offset The index of the CSS class which is being updated.\n     * @param addOrRemove Whether or not to add or remove the CSS class\n     * @param forceOverride whether or not to skip all directive prioritization\n     *    and just apply the value regardless.\n     */\n    function updateClassProp(context, offset, input, directiveIndex, forceOverride) {\n        if (directiveIndex === void 0) { directiveIndex = 0; }\n        updateSingleStylingValue(context, offset, input, true, directiveIndex, forceOverride);\n    }\n    /**\n     * Sets and resolves a single style value on the provided `StylingContext` so\n     * that they can be applied to the element once `renderStyling` is called.\n     *\n     * Note that prop-level styling values are considered higher priority than any styling that\n     * has been applied using `updateStylingMap`, therefore, when styling values are rendered\n     * then any styles/classes that have been applied using this function will be considered first\n     * (then multi values second and then initial values as a backup).\n     *\n     * @param context The styling context that will be updated with the\n     *    newly provided style value.\n     * @param offset The index of the property which is being updated.\n     * @param value The CSS style value that will be assigned\n     * @param forceOverride whether or not to skip all directive prioritization\n     *    and just apply the value regardless.\n     */\n    function updateStyleProp(context, offset, input, directiveIndex, forceOverride) {\n        if (directiveIndex === void 0) { directiveIndex = 0; }\n        updateSingleStylingValue(context, offset, input, false, directiveIndex, forceOverride);\n    }\n    function updateSingleStylingValue(context, offset, input, isClassBased, directiveIndex, forceOverride) {\n        ngDevMode && assertValidDirectiveIndex(context, directiveIndex);\n        var singleIndex = getSinglePropIndexValue(context, directiveIndex, offset, isClassBased);\n        var currValue = getValue(context, singleIndex);\n        var currFlag = getPointers(context, singleIndex);\n        var currDirective = getDirectiveIndexFromEntry(context, singleIndex);\n        var value = (input instanceof BoundPlayerFactory) ? input.value : input;\n        ngDevMode && ngDevMode.stylingProp++;\n        if (hasValueChanged(currFlag, currValue, value) &&\n            (forceOverride || allowValueChange(currValue, value, currDirective, directiveIndex))) {\n            var isClassBased_1 = (currFlag & 2 /* Class */) === 2 /* Class */;\n            var element = context[0 /* ElementPosition */];\n            var playerBuilder = input instanceof BoundPlayerFactory ?\n                new ClassAndStylePlayerBuilder(input, element, isClassBased_1 ? 1 /* Class */ : 2 /* Style */) :\n                null;\n            var value_1 = (playerBuilder ? input.value : input);\n            var currPlayerIndex = getPlayerBuilderIndex(context, singleIndex);\n            var playerBuildersAreDirty = false;\n            var playerBuilderIndex = playerBuilder ? currPlayerIndex : 0;\n            if (hasPlayerBuilderChanged(context, playerBuilder, currPlayerIndex)) {\n                var newIndex = setPlayerBuilder(context, playerBuilder, currPlayerIndex);\n                playerBuilderIndex = playerBuilder ? newIndex : 0;\n                playerBuildersAreDirty = true;\n            }\n            if (playerBuildersAreDirty || currDirective !== directiveIndex) {\n                setPlayerBuilderIndex(context, singleIndex, playerBuilderIndex, directiveIndex);\n            }\n            if (currDirective !== directiveIndex) {\n                var prop = getProp(context, singleIndex);\n                var sanitizer = getStyleSanitizer(context, directiveIndex);\n                setSanitizeFlag(context, singleIndex, (sanitizer && sanitizer(prop, null, 1 /* ValidateProperty */)) ? true : false);\n            }\n            // the value will always get updated (even if the dirty flag is skipped)\n            setValue(context, singleIndex, value_1);\n            var indexForMulti = getMultiOrSingleIndex(currFlag);\n            // if the value is the same in the multi-area then there's no point in re-assembling\n            var valueForMulti = getValue(context, indexForMulti);\n            if (!valueForMulti || hasValueChanged(currFlag, valueForMulti, value_1)) {\n                var multiDirty = false;\n                var singleDirty = true;\n                // only when the value is set to `null` should the multi-value get flagged\n                if (!valueExists(value_1, isClassBased_1) && valueExists(valueForMulti, isClassBased_1)) {\n                    multiDirty = true;\n                    singleDirty = false;\n                }\n                setDirty(context, indexForMulti, multiDirty);\n                setDirty(context, singleIndex, singleDirty);\n                setContextDirty(context, true);\n            }\n            if (playerBuildersAreDirty) {\n                setContextPlayersDirty(context, true);\n            }\n            ngDevMode && ngDevMode.stylingPropCacheMiss++;\n        }\n    }\n    /**\n     * Renders all queued styling using a renderer onto the given element.\n     *\n     * This function works by rendering any styles (that have been applied\n     * using `updateStylingMap`) and any classes (that have been applied using\n     * `updateStyleProp`) onto the provided element using the provided renderer.\n     * Just before the styles/classes are rendered a final key/value style map\n     * will be assembled (if `styleStore` or `classStore` are provided).\n     *\n     * @param lElement the element that the styles will be rendered on\n     * @param context The styling context that will be used to determine\n     *      what styles will be rendered\n     * @param renderer the renderer that will be used to apply the styling\n     * @param classesStore if provided, the updated class values will be applied\n     *    to this key/value map instead of being renderered via the renderer.\n     * @param stylesStore if provided, the updated style values will be applied\n     *    to this key/value map instead of being renderered via the renderer.\n     * @returns number the total amount of players that got queued for animation (if any)\n     */\n    function renderStyling(context, renderer, rootOrView, isFirstRender, classesStore, stylesStore, directiveIndex) {\n        if (directiveIndex === void 0) { directiveIndex = 0; }\n        var totalPlayersQueued = 0;\n        ngDevMode && ngDevMode.stylingApply++;\n        // this prevents multiple attempts to render style/class values on\n        // the same element...\n        if (allowFlush(context, directiveIndex)) {\n            // all styling instructions present within any hostBindings functions\n            // do not update the context immediately when called. They are instead\n            // queued up and applied to the context right at this point. Why? This\n            // is because Angular evaluates component/directive and directive\n            // sub-class code at different points and it's important that the\n            // styling values are applied to the context in the right order\n            // (see `interfaces/styling.ts` for more information).\n            flushQueue(context);\n            if (isContextDirty(context)) {\n                ngDevMode && ngDevMode.stylingApplyCacheMiss++;\n                // this is here to prevent things like <ng-container [style] [class]>...</ng-container>\n                // or if there are any host style or class bindings present in a directive set on\n                // a container node\n                var native = context[0 /* ElementPosition */];\n                var flushPlayerBuilders = context[1 /* MasterFlagPosition */] & 8 /* PlayerBuildersDirty */;\n                var multiStartIndex = getMultiStylesStartIndex(context);\n                for (var i = 10 /* SingleStylesStartPosition */; i < context.length; i += 4 /* Size */) {\n                    // there is no point in rendering styles that have not changed on screen\n                    if (isDirty(context, i)) {\n                        var flag = getPointers(context, i);\n                        var directiveIndex_1 = getDirectiveIndexFromEntry(context, i);\n                        var prop = getProp(context, i);\n                        var value = getValue(context, i);\n                        var styleSanitizer = (flag & 4 /* Sanitize */) ? getStyleSanitizer(context, directiveIndex_1) : null;\n                        var playerBuilder = getPlayerBuilder(context, i);\n                        var isClassBased = flag & 2 /* Class */ ? true : false;\n                        var isInSingleRegion = i < multiStartIndex;\n                        var valueToApply = value;\n                        // VALUE DEFER CASE 1: Use a multi value instead of a null single value\n                        // this check implies that a single value was removed and we\n                        // should now defer to a multi value and use that (if set).\n                        if (isInSingleRegion && !valueExists(valueToApply, isClassBased)) {\n                            // single values ALWAYS have a reference to a multi index\n                            var multiIndex = getMultiOrSingleIndex(flag);\n                            valueToApply = getValue(context, multiIndex);\n                        }\n                        // VALUE DEFER CASE 2: Use the initial value if all else fails (is falsy)\n                        // the initial value will always be a string or null,\n                        // therefore we can safely adopt it in case there's nothing else\n                        // note that this should always be a falsy check since `false` is used\n                        // for both class and style comparisons (styles can't be false and false\n                        // classes are turned off and should therefore defer to their initial values)\n                        // Note that we ignore class-based deferals because otherwise a class can never\n                        // be removed in the case that it exists as true in the initial classes list...\n                        if (!valueExists(valueToApply, isClassBased)) {\n                            valueToApply = getInitialValue(context, flag);\n                        }\n                        // if the first render is true then we do not want to start applying falsy\n                        // values to the DOM element's styling. Otherwise then we know there has\n                        // been a change and even if it's falsy then it's removing something that\n                        // was truthy before.\n                        var doApplyValue = renderer && (isFirstRender ? valueToApply : true);\n                        if (doApplyValue) {\n                            if (isClassBased) {\n                                setClass(native, prop, valueToApply ? true : false, renderer, classesStore, playerBuilder);\n                            }\n                            else {\n                                setStyle(native, prop, valueToApply, renderer, styleSanitizer, stylesStore, playerBuilder);\n                            }\n                        }\n                        setDirty(context, i, false);\n                    }\n                }\n                if (flushPlayerBuilders) {\n                    var rootContext = Array.isArray(rootOrView) ? getRootContext(rootOrView) : rootOrView;\n                    var playerContext = getPlayerContext(context);\n                    var playersStartIndex = playerContext[0 /* NonBuilderPlayersStart */];\n                    for (var i = 1 /* PlayerBuildersStartPosition */; i < playersStartIndex; i += 2 /* PlayerAndPlayerBuildersTupleSize */) {\n                        var builder = playerContext[i];\n                        var playerInsertionIndex = i + 1 /* PlayerOffsetPosition */;\n                        var oldPlayer = playerContext[playerInsertionIndex];\n                        if (builder) {\n                            var player = builder.buildPlayer(oldPlayer, isFirstRender);\n                            if (player !== undefined) {\n                                if (player != null) {\n                                    var wasQueued = addPlayerInternal(playerContext, rootContext, native, player, playerInsertionIndex);\n                                    wasQueued && totalPlayersQueued++;\n                                }\n                                if (oldPlayer) {\n                                    oldPlayer.destroy();\n                                }\n                            }\n                        }\n                        else if (oldPlayer) {\n                            // the player builder has been removed ... therefore we should delete the associated\n                            // player\n                            oldPlayer.destroy();\n                        }\n                    }\n                    setContextPlayersDirty(context, false);\n                }\n                setContextDirty(context, false);\n            }\n        }\n        return totalPlayersQueued;\n    }\n    /**\n     * Assigns a style value to a style property for the given element.\n     *\n     * This function renders a given CSS prop/value entry using the\n     * provided renderer. If a `store` value is provided then\n     * that will be used a render context instead of the provided\n     * renderer.\n     *\n     * @param native the DOM Element\n     * @param prop the CSS style property that will be rendered\n     * @param value the CSS style value that will be rendered\n     * @param renderer\n     * @param store an optional key/value map that will be used as a context to render styles on\n     */\n    function setStyle(native, prop, value, renderer, sanitizer, store, playerBuilder) {\n        value =\n            sanitizer && value ? sanitizer(prop, value, 3 /* ValidateAndSanitize */) : value;\n        if (store || playerBuilder) {\n            if (store) {\n                store.setValue(prop, value);\n            }\n            if (playerBuilder) {\n                playerBuilder.setValue(prop, value);\n            }\n        }\n        else if (value) {\n            value = value.toString(); // opacity, z-index and flexbox all have number values which may not\n            // assign as numbers\n            ngDevMode && ngDevMode.rendererSetStyle++;\n            isProceduralRenderer(renderer) ?\n                renderer.setStyle(native, prop, value, RendererStyleFlags3.DashCase) :\n                native.style.setProperty(prop, value);\n        }\n        else {\n            ngDevMode && ngDevMode.rendererRemoveStyle++;\n            isProceduralRenderer(renderer) ?\n                renderer.removeStyle(native, prop, RendererStyleFlags3.DashCase) :\n                native.style.removeProperty(prop);\n        }\n    }\n    /**\n     * Adds/removes the provided className value to the provided element.\n     *\n     * This function renders a given CSS class value using the provided\n     * renderer (by adding or removing it from the provided element).\n     * If a `store` value is provided then that will be used a render\n     * context instead of the provided renderer.\n     *\n     * @param native the DOM Element\n     * @param prop the CSS style property that will be rendered\n     * @param value the CSS style value that will be rendered\n     * @param renderer\n     * @param store an optional key/value map that will be used as a context to render styles on\n     */\n    function setClass(native, className, add, renderer, store, playerBuilder) {\n        if (store || playerBuilder) {\n            if (store) {\n                store.setValue(className, add);\n            }\n            if (playerBuilder) {\n                playerBuilder.setValue(className, add);\n            }\n            // DOMTokenList will throw if we try to add or remove an empty string.\n        }\n        else if (className !== '') {\n            if (add) {\n                ngDevMode && ngDevMode.rendererAddClass++;\n                isProceduralRenderer(renderer) ? renderer.addClass(native, className) :\n                    native['classList'].add(className);\n            }\n            else {\n                ngDevMode && ngDevMode.rendererRemoveClass++;\n                isProceduralRenderer(renderer) ? renderer.removeClass(native, className) :\n                    native['classList'].remove(className);\n            }\n        }\n    }\n    function setSanitizeFlag(context, index, sanitizeYes) {\n        if (sanitizeYes) {\n            context[index] |= 4 /* Sanitize */;\n        }\n        else {\n            context[index] &= ~4 /* Sanitize */;\n        }\n    }\n    function setDirty(context, index, isDirtyYes) {\n        var adjustedIndex = index >= 10 /* SingleStylesStartPosition */ ? (index + 0 /* FlagsOffset */) : index;\n        if (isDirtyYes) {\n            context[adjustedIndex] |= 1 /* Dirty */;\n        }\n        else {\n            context[adjustedIndex] &= ~1 /* Dirty */;\n        }\n    }\n    function isDirty(context, index) {\n        var adjustedIndex = index >= 10 /* SingleStylesStartPosition */ ? (index + 0 /* FlagsOffset */) : index;\n        return (context[adjustedIndex] & 1 /* Dirty */) == 1 /* Dirty */;\n    }\n    function isClassBasedValue(context, index) {\n        var adjustedIndex = index >= 10 /* SingleStylesStartPosition */ ? (index + 0 /* FlagsOffset */) : index;\n        return (context[adjustedIndex] & 2 /* Class */) == 2 /* Class */;\n    }\n    function isSanitizable(context, index) {\n        var adjustedIndex = index >= 10 /* SingleStylesStartPosition */ ? (index + 0 /* FlagsOffset */) : index;\n        return (context[adjustedIndex] & 4 /* Sanitize */) == 4 /* Sanitize */;\n    }\n    function pointers(configFlag, staticIndex, dynamicIndex) {\n        return (configFlag & 31 /* BitMask */) | (staticIndex << 5 /* BitCountSize */) |\n            (dynamicIndex << (14 /* BitCountSize */ + 5 /* BitCountSize */));\n    }\n    function getInitialValue(context, flag) {\n        var index = getInitialIndex(flag);\n        var entryIsClassBased = flag & 2 /* Class */;\n        var initialValues = entryIsClassBased ? context[4 /* InitialClassValuesPosition */] :\n            context[3 /* InitialStyleValuesPosition */];\n        return initialValues[index];\n    }\n    function getInitialIndex(flag) {\n        return (flag >> 5 /* BitCountSize */) & 16383 /* BitMask */;\n    }\n    function getMultiOrSingleIndex(flag) {\n        var index = (flag >> (14 /* BitCountSize */ + 5 /* BitCountSize */)) & 16383 /* BitMask */;\n        return index >= 10 /* SingleStylesStartPosition */ ? index : -1;\n    }\n    function getMultiClassesStartIndex(context) {\n        var classCache = context[6 /* CachedMultiClasses */];\n        return classCache[1 /* ValuesStartPosition */ +\n            1 /* PositionStartOffset */];\n    }\n    function getMultiStylesStartIndex(context) {\n        var stylesCache = context[7 /* CachedMultiStyles */];\n        return stylesCache[1 /* ValuesStartPosition */ +\n            1 /* PositionStartOffset */];\n    }\n    function setProp(context, index, prop) {\n        context[index + 1 /* PropertyOffset */] = prop;\n    }\n    function setValue(context, index, value) {\n        context[index + 2 /* ValueOffset */] = value;\n    }\n    function hasPlayerBuilderChanged(context, builder, index) {\n        var playerContext = context[9 /* PlayerContext */];\n        if (builder) {\n            if (!playerContext || index === 0) {\n                return true;\n            }\n        }\n        else if (!playerContext) {\n            return false;\n        }\n        return playerContext[index] !== builder;\n    }\n    function setPlayerBuilder(context, builder, insertionIndex) {\n        var playerContext = context[9 /* PlayerContext */] || allocPlayerContext(context);\n        if (insertionIndex > 0) {\n            playerContext[insertionIndex] = builder;\n        }\n        else {\n            insertionIndex = playerContext[0 /* NonBuilderPlayersStart */];\n            playerContext.splice(insertionIndex, 0, builder, null);\n            playerContext[0 /* NonBuilderPlayersStart */] +=\n                2 /* PlayerAndPlayerBuildersTupleSize */;\n        }\n        return insertionIndex;\n    }\n    function directiveOwnerPointers(directiveIndex, playerIndex) {\n        return (playerIndex << 16 /* BitCountSize */) | directiveIndex;\n    }\n    function setPlayerBuilderIndex(context, index, playerBuilderIndex, directiveIndex) {\n        var value = directiveOwnerPointers(directiveIndex, playerBuilderIndex);\n        context[index + 3 /* PlayerBuilderIndexOffset */] = value;\n    }\n    function getPlayerBuilderIndex(context, index) {\n        var flag = context[index + 3 /* PlayerBuilderIndexOffset */];\n        var playerBuilderIndex = (flag >> 16 /* BitCountSize */) &\n            65535 /* BitMask */;\n        return playerBuilderIndex;\n    }\n    function getPlayerBuilder(context, index) {\n        var playerBuilderIndex = getPlayerBuilderIndex(context, index);\n        if (playerBuilderIndex) {\n            var playerContext = context[9 /* PlayerContext */];\n            if (playerContext) {\n                return playerContext[playerBuilderIndex];\n            }\n        }\n        return null;\n    }\n    function setFlag(context, index, flag) {\n        var adjustedIndex = index === 1 /* MasterFlagPosition */ ? index : (index + 0 /* FlagsOffset */);\n        context[adjustedIndex] = flag;\n    }\n    function getPointers(context, index) {\n        var adjustedIndex = index === 1 /* MasterFlagPosition */ ? index : (index + 0 /* FlagsOffset */);\n        return context[adjustedIndex];\n    }\n    function getValue(context, index) {\n        return context[index + 2 /* ValueOffset */];\n    }\n    function getProp(context, index) {\n        return context[index + 1 /* PropertyOffset */];\n    }\n    function isContextDirty(context) {\n        return isDirty(context, 1 /* MasterFlagPosition */);\n    }\n    function setContextDirty(context, isDirtyYes) {\n        setDirty(context, 1 /* MasterFlagPosition */, isDirtyYes);\n    }\n    function setContextPlayersDirty(context, isDirtyYes) {\n        if (isDirtyYes) {\n            context[1 /* MasterFlagPosition */] |= 8 /* PlayerBuildersDirty */;\n        }\n        else {\n            context[1 /* MasterFlagPosition */] &= ~8 /* PlayerBuildersDirty */;\n        }\n    }\n    function swapMultiContextEntries(context, indexA, indexB) {\n        if (indexA === indexB)\n            return;\n        var tmpValue = getValue(context, indexA);\n        var tmpProp = getProp(context, indexA);\n        var tmpFlag = getPointers(context, indexA);\n        var tmpPlayerBuilderIndex = getPlayerBuilderIndex(context, indexA);\n        var tmpDirectiveIndex = getDirectiveIndexFromEntry(context, indexA);\n        var flagA = tmpFlag;\n        var flagB = getPointers(context, indexB);\n        var singleIndexA = getMultiOrSingleIndex(flagA);\n        if (singleIndexA >= 0) {\n            var _flag = getPointers(context, singleIndexA);\n            var _initial = getInitialIndex(_flag);\n            setFlag(context, singleIndexA, pointers(_flag, _initial, indexB));\n        }\n        var singleIndexB = getMultiOrSingleIndex(flagB);\n        if (singleIndexB >= 0) {\n            var _flag = getPointers(context, singleIndexB);\n            var _initial = getInitialIndex(_flag);\n            setFlag(context, singleIndexB, pointers(_flag, _initial, indexA));\n        }\n        setValue(context, indexA, getValue(context, indexB));\n        setProp(context, indexA, getProp(context, indexB));\n        setFlag(context, indexA, getPointers(context, indexB));\n        var playerIndexA = getPlayerBuilderIndex(context, indexB);\n        var directiveIndexA = getDirectiveIndexFromEntry(context, indexB);\n        setPlayerBuilderIndex(context, indexA, playerIndexA, directiveIndexA);\n        setValue(context, indexB, tmpValue);\n        setProp(context, indexB, tmpProp);\n        setFlag(context, indexB, tmpFlag);\n        setPlayerBuilderIndex(context, indexB, tmpPlayerBuilderIndex, tmpDirectiveIndex);\n    }\n    function updateSinglePointerValues(context, indexStartPosition) {\n        for (var i = indexStartPosition; i < context.length; i += 4 /* Size */) {\n            var multiFlag = getPointers(context, i);\n            var singleIndex = getMultiOrSingleIndex(multiFlag);\n            if (singleIndex > 0) {\n                var singleFlag = getPointers(context, singleIndex);\n                var initialIndexForSingle = getInitialIndex(singleFlag);\n                var flagValue = (isDirty(context, singleIndex) ? 1 /* Dirty */ : 0 /* None */) |\n                    (isClassBasedValue(context, singleIndex) ? 2 /* Class */ : 0 /* None */) |\n                    (isSanitizable(context, singleIndex) ? 4 /* Sanitize */ : 0 /* None */);\n                var updatedFlag = pointers(flagValue, initialIndexForSingle, i);\n                setFlag(context, singleIndex, updatedFlag);\n            }\n        }\n    }\n    function insertNewMultiProperty(context, index, classBased, name, flag, value, directiveIndex, playerIndex) {\n        var doShift = index < context.length;\n        // prop does not exist in the list, add it in\n        context.splice(index, 0, flag | 1 /* Dirty */ | (classBased ? 2 /* Class */ : 0 /* None */), name, value, 0);\n        setPlayerBuilderIndex(context, index, playerIndex, directiveIndex);\n        if (doShift) {\n            // because the value was inserted midway into the array then we\n            // need to update all the shifted multi values' single value\n            // pointers to point to the newly shifted location\n            updateSinglePointerValues(context, index + 4 /* Size */);\n        }\n    }\n    function valueExists(value, isClassBased) {\n        return value !== null;\n    }\n    function prepareInitialFlag(context, prop, entryIsClassBased, sanitizer) {\n        var flag = (sanitizer && sanitizer(prop, null, 1 /* ValidateProperty */)) ?\n            4 /* Sanitize */ :\n            0 /* None */;\n        var initialIndex;\n        if (entryIsClassBased) {\n            flag |= 2 /* Class */;\n            initialIndex =\n                getInitialStylingValuesIndexOf(context[4 /* InitialClassValuesPosition */], prop);\n        }\n        else {\n            initialIndex =\n                getInitialStylingValuesIndexOf(context[3 /* InitialStyleValuesPosition */], prop);\n        }\n        initialIndex = initialIndex > 0 ? (initialIndex + 1 /* ValueOffset */) : 0;\n        return pointers(flag, initialIndex, 0);\n    }\n    function hasInitialValueChanged(context, flag, newValue) {\n        var initialValue = getInitialValue(context, flag);\n        return !initialValue || hasValueChanged(flag, initialValue, newValue);\n    }\n    function hasValueChanged(flag, a, b) {\n        var isClassBased = flag & 2 /* Class */;\n        var hasValues = a && b;\n        var usesSanitizer = flag & 4 /* Sanitize */;\n        // the toString() comparison ensures that a value is checked\n        // ... otherwise (during sanitization bypassing) the === comparsion\n        // would fail since a new String() instance is created\n        if (!isClassBased && hasValues && usesSanitizer) {\n            // we know for sure we're dealing with strings at this point\n            return a.toString() !== b.toString();\n        }\n        // everything else is safe to check with a normal equality check\n        return a !== b;\n    }\n    var ClassAndStylePlayerBuilder = /** @class */ (function () {\n        function ClassAndStylePlayerBuilder(factory, _element, _type) {\n            this._element = _element;\n            this._type = _type;\n            this._values = {};\n            this._dirty = false;\n            this._factory = factory;\n        }\n        ClassAndStylePlayerBuilder.prototype.setValue = function (prop, value) {\n            if (this._values[prop] !== value) {\n                this._values[prop] = value;\n                this._dirty = true;\n            }\n        };\n        ClassAndStylePlayerBuilder.prototype.buildPlayer = function (currentPlayer, isFirstRender) {\n            // if no values have been set here then this means the binding didn't\n            // change and therefore the binding values were not updated through\n            // `setValue` which means no new player will be provided.\n            if (this._dirty) {\n                var player = this._factory.fn(this._element, this._type, this._values, isFirstRender, currentPlayer || null);\n                this._values = {};\n                this._dirty = false;\n                return player;\n            }\n            return undefined;\n        };\n        return ClassAndStylePlayerBuilder;\n    }());\n    function getDirectiveIndexFromEntry(context, index) {\n        var value = context[index + 3 /* PlayerBuilderIndexOffset */];\n        return value & 65535 /* BitMask */;\n    }\n    function getInitialStylingValuesIndexOf(keyValues, key) {\n        for (var i = 2 /* KeyValueStartPosition */; i < keyValues.length; i += 3 /* Size */) {\n            if (keyValues[i] === key)\n                return i;\n        }\n        return -1;\n    }\n    function getSinglePropIndexValue(context, directiveIndex, offset, isClassBased) {\n        var singlePropOffsetRegistryIndex = context[2 /* DirectiveRegistryPosition */][(directiveIndex * 2 /* Size */) +\n            0 /* SinglePropValuesIndexOffset */];\n        var offsets = context[5 /* SinglePropOffsetPositions */];\n        var indexForOffset = singlePropOffsetRegistryIndex +\n            2 /* ValueStartPosition */ +\n            (isClassBased ?\n                offsets[singlePropOffsetRegistryIndex + 0 /* StylesCountPosition */] :\n                0) +\n            offset;\n        return offsets[indexForOffset];\n    }\n    function getStyleSanitizer(context, directiveIndex) {\n        var dirs = context[2 /* DirectiveRegistryPosition */];\n        var value = dirs[directiveIndex * 2 /* Size */ +\n            1 /* StyleSanitizerOffset */] ||\n            dirs[1 /* StyleSanitizerOffset */] || null;\n        return value;\n    }\n    function allowValueChange(currentValue, newValue, currentDirectiveOwner, newDirectiveOwner) {\n        // the code below relies the importance of directive's being tied to their\n        // index value. The index values for each directive are derived from being\n        // registered into the styling context directive registry. The most important\n        // directive is the parent component directive (the template) and each directive\n        // that is added after is considered less important than the previous entry. This\n        // prioritization of directives enables the styling algorithm to decide if a style\n        // or class should be allowed to be updated/replaced in case an earlier directive\n        // already wrote to the exact same style-property or className value. In other words\n        // this decides what to do if and when there is a collision.\n        if (currentValue != null) {\n            if (newValue != null) {\n                // if a directive index is lower than it always has priority over the\n                // previous directive's value...\n                return newDirectiveOwner <= currentDirectiveOwner;\n            }\n            else {\n                // only write a null value in case it's the same owner writing it.\n                // this avoids having a higher-priority directive write to null\n                // only to have a lesser-priority directive change right to a\n                // non-null value immediately afterwards.\n                return currentDirectiveOwner === newDirectiveOwner;\n            }\n        }\n        return true;\n    }\n    /**\n     * Returns the className string of all the initial classes for the element.\n     *\n     * This function is designed to populate and cache all the static class\n     * values into a className string. The caching mechanism works by placing\n     * the completed className string into the initial values array into a\n     * dedicated slot. This will prevent the function from having to populate\n     * the string each time an element is created or matched.\n     *\n     * @returns the className string (e.g. `on active red`)\n     */\n    function getInitialClassNameValue(context) {\n        var initialClassValues = context[4 /* InitialClassValuesPosition */];\n        var className = initialClassValues[1 /* CachedStringValuePosition */];\n        if (className === null) {\n            className = '';\n            for (var i = 2 /* KeyValueStartPosition */; i < initialClassValues.length; i += 3 /* Size */) {\n                var isPresent = initialClassValues[i + 1];\n                if (isPresent) {\n                    className += (className.length ? ' ' : '') + initialClassValues[i];\n                }\n            }\n            initialClassValues[1 /* CachedStringValuePosition */] = className;\n        }\n        return className;\n    }\n    /**\n     * Returns the style string of all the initial styles for the element.\n     *\n     * This function is designed to populate and cache all the static style\n     * values into a style string. The caching mechanism works by placing\n     * the completed style string into the initial values array into a\n     * dedicated slot. This will prevent the function from having to populate\n     * the string each time an element is created or matched.\n     *\n     * @returns the style string (e.g. `width:100px;height:200px`)\n     */\n    function getInitialStyleStringValue(context) {\n        var initialStyleValues = context[3 /* InitialStyleValuesPosition */];\n        var styleString = initialStyleValues[1 /* CachedStringValuePosition */];\n        if (styleString === null) {\n            styleString = '';\n            for (var i = 2 /* KeyValueStartPosition */; i < initialStyleValues.length; i += 3 /* Size */) {\n                var value = initialStyleValues[i + 1];\n                if (value !== null) {\n                    styleString += (styleString.length ? ';' : '') + (initialStyleValues[i] + \":\" + value);\n                }\n            }\n            initialStyleValues[1 /* CachedStringValuePosition */] = styleString;\n        }\n        return styleString;\n    }\n    /**\n     * Returns the current cached multi-value for a given directiveIndex within the provided context.\n     */\n    function readCachedMapValue(context, entryIsClassBased, directiveIndex) {\n        var values = context[entryIsClassBased ? 6 /* CachedMultiClasses */ : 7 /* CachedMultiStyles */];\n        var index = 1 /* ValuesStartPosition */ +\n            directiveIndex * 4 /* Size */;\n        return values[index + 2 /* ValueOffset */] || null;\n    }\n    /**\n     * Determines whether the provided multi styling value should be updated or not.\n     *\n     * Because `[style]` and `[class]` bindings rely on an identity change to occur before\n     * applying new values, the styling algorithm may not update an existing entry into\n     * the context if a previous directive's entry changed shape.\n     *\n     * This function will decide whether or not a value should be applied (if there is a\n     * cache miss) to the context based on the following rules:\n     *\n     * - If there is an identity change between the existing value and new value\n     * - If there is no existing value cached (first write)\n     * - If a previous directive flagged the existing cached value as dirty\n     */\n    function isMultiValueCacheHit(context, entryIsClassBased, directiveIndex, newValue) {\n        var indexOfCachedValues = entryIsClassBased ? 6 /* CachedMultiClasses */ : 7 /* CachedMultiStyles */;\n        var cachedValues = context[indexOfCachedValues];\n        var index = 1 /* ValuesStartPosition */ +\n            directiveIndex * 4 /* Size */;\n        if (cachedValues[index + 0 /* DirtyFlagOffset */])\n            return false;\n        return newValue === NO_CHANGE ||\n            readCachedMapValue(context, entryIsClassBased, directiveIndex) === newValue;\n    }\n    /**\n     * Updates the cached status of a multi-styling value in the context.\n     *\n     * The cached map array (which exists in the context) contains a manifest of\n     * each multi-styling entry (`[style]` and `[class]` entries) for the template\n     * as well as all directives.\n     *\n     * This function will update the cached status of the provided multi-style\n     * entry within the cache.\n     *\n     * When called, this function will update the following information:\n     * - The actual cached value (the raw value that was passed into `[style]` or `[class]`)\n     * - The total amount of unique styling entries that this value has written into the context\n     * - The exact position of where the multi styling entries start in the context for this binding\n     * - The dirty flag will be set to true\n     *\n     * If the `dirtyFutureValues` param is provided then it will update all future entries (binding\n     * entries that exist as apart of other directives) to be dirty as well. This will force the\n     * styling algorithm to reapply those values once change detection checks them (which will in\n     * turn cause the styling context to update itself and the correct styling values will be\n     * rendered on screen).\n     */\n    function updateCachedMapValue(context, directiveIndex, entryIsClassBased, cacheValue, startPosition, endPosition, totalValues, dirtyFutureValues) {\n        var values = context[entryIsClassBased ? 6 /* CachedMultiClasses */ : 7 /* CachedMultiStyles */];\n        var index = 1 /* ValuesStartPosition */ +\n            directiveIndex * 4 /* Size */;\n        // in the event that this is true we assume that future values are dirty and therefore\n        // will be checked again in the next CD cycle\n        if (dirtyFutureValues) {\n            var nextStartPosition = startPosition + totalValues * 4 /* Size */;\n            for (var i = index + 4 /* Size */; i < values.length; i += 4 /* Size */) {\n                values[i + 1 /* PositionStartOffset */] = nextStartPosition;\n                values[i + 0 /* DirtyFlagOffset */] = 1;\n            }\n        }\n        values[index + 0 /* DirtyFlagOffset */] = 0;\n        values[index + 1 /* PositionStartOffset */] = startPosition;\n        values[index + 2 /* ValueOffset */] = cacheValue;\n        values[index + 3 /* ValueCountOffset */] = totalValues;\n        // the code below counts the total amount of styling values that exist in\n        // the context up until this directive. This value will be later used to\n        // update the cached value map's total counter value.\n        var totalStylingEntries = totalValues;\n        for (var i = 1 /* ValuesStartPosition */; i < index; i += 4 /* Size */) {\n            totalStylingEntries += values[i + 3 /* ValueCountOffset */];\n        }\n        // because style values come before class values in the context this means\n        // that if any new values were inserted then the cache values array for\n        // classes is out of sync. The code below will update the offsets to point\n        // to their new values.\n        if (!entryIsClassBased) {\n            var classCache = context[6 /* CachedMultiClasses */];\n            var classesStartPosition = classCache[1 /* ValuesStartPosition */ +\n                1 /* PositionStartOffset */];\n            var diffInStartPosition = endPosition - classesStartPosition;\n            for (var i = 1 /* ValuesStartPosition */; i < classCache.length; i += 4 /* Size */) {\n                classCache[i + 1 /* PositionStartOffset */] += diffInStartPosition;\n            }\n        }\n        values[0 /* EntriesCountPosition */] = totalStylingEntries;\n    }\n    function hyphenateEntries(entries) {\n        var newEntries = [];\n        for (var i = 0; i < entries.length; i++) {\n            newEntries.push(hyphenate(entries[i]));\n        }\n        return newEntries;\n    }\n    function hyphenate(value) {\n        return value.replace(/[a-z][A-Z]/g, function (match) { return match.charAt(0) + \"-\" + match.charAt(1).toLowerCase(); });\n    }\n    function registerMultiMapEntry(context, directiveIndex, entryIsClassBased, startPosition, count) {\n        if (count === void 0) { count = 0; }\n        var cachedValues = context[entryIsClassBased ? 6 /* CachedMultiClasses */ : 7 /* CachedMultiStyles */];\n        if (directiveIndex > 0) {\n            var limit = 1 /* ValuesStartPosition */ +\n                (directiveIndex * 4 /* Size */);\n            while (cachedValues.length < limit) {\n                // this means that ONLY directive class styling (like ngClass) was used\n                // therefore the root directive will still need to be filled in as well\n                // as any other directive spaces in case they only used static values\n                cachedValues.push(0, startPosition, null, 0);\n            }\n        }\n        cachedValues.push(0, startPosition, null, count);\n    }\n    /**\n     * Inserts or updates an existing entry in the provided `staticStyles` collection.\n     *\n     * @param index the index representing an existing styling entry in the collection:\n     *  if provided (numeric): then it will update the existing entry at the given position\n     *  if null: then it will insert a new entry within the collection\n     * @param staticStyles a collection of style or class entries where the value will\n     *  be inserted or patched\n     * @param prop the property value of the entry (e.g. `width` (styles) or `foo` (classes))\n     * @param value the styling value of the entry (e.g. `absolute` (styles) or `true` (classes))\n     * @param directiveOwnerIndex the directive owner index value of the styling source responsible\n     *        for these styles (see `interfaces/styling.ts#directives` for more info)\n     * @returns the index of the updated or new entry within the collection\n     */\n    function addOrUpdateStaticStyle(index, staticStyles, prop, value, directiveOwnerIndex) {\n        if (index === null) {\n            index = staticStyles.length;\n            staticStyles.push(null, null, null);\n            staticStyles[index + 0 /* PropOffset */] = prop;\n        }\n        staticStyles[index + 1 /* ValueOffset */] = value;\n        staticStyles[index + 2 /* DirectiveOwnerOffset */] = directiveOwnerIndex;\n        return index;\n    }\n    function assertValidDirectiveIndex(context, directiveIndex) {\n        var dirs = context[2 /* DirectiveRegistryPosition */];\n        var index = directiveIndex * 2 /* Size */;\n        if (index >= dirs.length ||\n            dirs[index + 0 /* SinglePropValuesIndexOffset */] === -1) {\n            throw new Error('The provided directive is not registered with the styling context');\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var NG_TEMPLATE_SELECTOR = 'ng-template';\n    function isCssClassMatching(nodeClassAttrVal, cssClassToMatch) {\n        var nodeClassesLen = nodeClassAttrVal.length;\n        var matchIndex = nodeClassAttrVal.indexOf(cssClassToMatch);\n        var matchEndIdx = matchIndex + cssClassToMatch.length;\n        if (matchIndex === -1 // no match\n            || (matchIndex > 0 && nodeClassAttrVal[matchIndex - 1] !== ' ') // no space before\n            ||\n                (matchEndIdx < nodeClassesLen && nodeClassAttrVal[matchEndIdx] !== ' ')) // no space after\n         {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Function that checks whether a given tNode matches tag-based selector and has a valid type.\n     *\n     * Matching can be performed in 2 modes: projection mode (when we project nodes) and regular\n     * directive matching mode:\n     * - in the \"directive matching\" mode we do _not_ take TContainer's tagName into account if it is\n     * different from NG_TEMPLATE_SELECTOR (value different from NG_TEMPLATE_SELECTOR indicates that a\n     * tag name was extracted from * syntax so we would match the same directive twice);\n     * - in the \"projection\" mode, we use a tag name potentially extracted from the * syntax processing\n     * (applicable to TNodeType.Container only).\n     */\n    function hasTagAndTypeMatch(tNode, currentSelector, isProjectionMode) {\n        var tagNameToCompare = tNode.type === 0 /* Container */ && !isProjectionMode ?\n            NG_TEMPLATE_SELECTOR :\n            tNode.tagName;\n        return currentSelector === tagNameToCompare;\n    }\n    /**\n     * A utility function to match an Ivy node static data against a simple CSS selector\n     *\n     * @param node static data of the node to match\n     * @param selector The selector to try matching against the node.\n     * @param isProjectionMode if `true` we are matching for content projection, otherwise we are doing\n     * directive matching.\n     * @returns true if node matches the selector.\n     */\n    function isNodeMatchingSelector(tNode, selector, isProjectionMode) {\n        ngDevMode && assertDefined(selector[0], 'Selector should have a tag name');\n        var mode = 4 /* ELEMENT */;\n        var nodeAttrs = tNode.attrs || [];\n        // Find the index of first attribute that has no value, only a name.\n        var nameOnlyMarkerIdx = getNameOnlyMarkerIndex(nodeAttrs);\n        // When processing \":not\" selectors, we skip to the next \":not\" if the\n        // current one doesn't match\n        var skipToNextSelector = false;\n        for (var i = 0; i < selector.length; i++) {\n            var current = selector[i];\n            if (typeof current === 'number') {\n                // If we finish processing a :not selector and it hasn't failed, return false\n                if (!skipToNextSelector && !isPositive(mode) && !isPositive(current)) {\n                    return false;\n                }\n                // If we are skipping to the next :not() and this mode flag is positive,\n                // it's a part of the current :not() selector, and we should keep skipping\n                if (skipToNextSelector && isPositive(current))\n                    continue;\n                skipToNextSelector = false;\n                mode = current | (mode & 1 /* NOT */);\n                continue;\n            }\n            if (skipToNextSelector)\n                continue;\n            if (mode & 4 /* ELEMENT */) {\n                mode = 2 /* ATTRIBUTE */ | mode & 1 /* NOT */;\n                if (current !== '' && !hasTagAndTypeMatch(tNode, current, isProjectionMode) ||\n                    current === '' && selector.length === 1) {\n                    if (isPositive(mode))\n                        return false;\n                    skipToNextSelector = true;\n                }\n            }\n            else {\n                var selectorAttrValue = mode & 8 /* CLASS */ ? current : selector[++i];\n                // special case for matching against classes when a tNode has been instantiated with\n                // class and style values as separate attribute values (e.g. ['title', CLASS, 'foo'])\n                if ((mode & 8 /* CLASS */) && tNode.stylingTemplate) {\n                    if (!isCssClassMatching(readClassValueFromTNode(tNode), selectorAttrValue)) {\n                        if (isPositive(mode))\n                            return false;\n                        skipToNextSelector = true;\n                    }\n                    continue;\n                }\n                var isInlineTemplate = tNode.type == 0 /* Container */ && tNode.tagName !== NG_TEMPLATE_SELECTOR;\n                var attrName = (mode & 8 /* CLASS */) ? 'class' : current;\n                var attrIndexInNode = findAttrIndexInNode(attrName, nodeAttrs, isInlineTemplate, isProjectionMode);\n                if (attrIndexInNode === -1) {\n                    if (isPositive(mode))\n                        return false;\n                    skipToNextSelector = true;\n                    continue;\n                }\n                if (selectorAttrValue !== '') {\n                    var nodeAttrValue = void 0;\n                    if (attrIndexInNode > nameOnlyMarkerIdx) {\n                        nodeAttrValue = '';\n                    }\n                    else {\n                        ngDevMode && assertNotEqual(nodeAttrs[attrIndexInNode], 0 /* NamespaceURI */, 'We do not match directives on namespaced attributes');\n                        nodeAttrValue = nodeAttrs[attrIndexInNode + 1];\n                    }\n                    var compareAgainstClassName = mode & 8 /* CLASS */ ? nodeAttrValue : null;\n                    if (compareAgainstClassName &&\n                        !isCssClassMatching(compareAgainstClassName, selectorAttrValue) ||\n                        mode & 2 /* ATTRIBUTE */ && selectorAttrValue !== nodeAttrValue) {\n                        if (isPositive(mode))\n                            return false;\n                        skipToNextSelector = true;\n                    }\n                }\n            }\n        }\n        return isPositive(mode) || skipToNextSelector;\n    }\n    function isPositive(mode) {\n        return (mode & 1 /* NOT */) === 0;\n    }\n    function readClassValueFromTNode(tNode) {\n        // comparing against CSS class values is complex because the compiler doesn't place them as\n        // regular attributes when an element is created. Instead, the classes (and styles for\n        // that matter) are placed in a special styling context that is used for resolving all\n        // class/style values across static attributes, [style]/[class] and [style.prop]/[class.name]\n        // bindings. Therefore if and when the styling context exists then the class values are to be\n        // extracted by the context helper code below...\n        return tNode.stylingTemplate ? getInitialClassNameValue(tNode.stylingTemplate) : '';\n    }\n    /**\n     * Examines the attribute's definition array for a node to find the index of the\n     * attribute that matches the given `name`.\n     *\n     * NOTE: This will not match namespaced attributes.\n     *\n     * Attribute matching depends upon `isInlineTemplate` and `isProjectionMode`.\n     * The following table summarizes which types of attributes we attempt to match:\n     *\n     * ===========================================================================================================\n     * Modes                   | Normal Attributes | Bindings Attributes | Template Attributes | I18n\n     * Attributes\n     * ===========================================================================================================\n     * Inline + Projection     | YES               | YES                 | NO                  | YES\n     * -----------------------------------------------------------------------------------------------------------\n     * Inline + Directive      | NO                | NO                  | YES                 | NO\n     * -----------------------------------------------------------------------------------------------------------\n     * Non-inline + Projection | YES               | YES                 | NO                  | YES\n     * -----------------------------------------------------------------------------------------------------------\n     * Non-inline + Directive  | YES               | YES                 | NO                  | YES\n     * ===========================================================================================================\n     *\n     * @param name the name of the attribute to find\n     * @param attrs the attribute array to examine\n     * @param isInlineTemplate true if the node being matched is an inline template (e.g. `*ngFor`)\n     * rather than a manually expanded template node (e.g `<ng-template>`).\n     * @param isProjectionMode true if we are matching against content projection otherwise we are\n     * matching against directives.\n     */\n    function findAttrIndexInNode(name, attrs, isInlineTemplate, isProjectionMode) {\n        if (attrs === null)\n            return -1;\n        var i = 0;\n        if (isProjectionMode || !isInlineTemplate) {\n            var bindingsMode = false;\n            while (i < attrs.length) {\n                var maybeAttrName = attrs[i];\n                if (maybeAttrName === name) {\n                    return i;\n                }\n                else if (maybeAttrName === 3 /* Bindings */ || maybeAttrName === 6 /* I18n */) {\n                    bindingsMode = true;\n                }\n                else if (maybeAttrName === 1 /* Classes */) {\n                    var value = attrs[++i];\n                    // We should skip classes here because we have a separate mechanism for\n                    // matching classes in projection mode.\n                    while (typeof value === 'string') {\n                        value = attrs[++i];\n                    }\n                    continue;\n                }\n                else if (maybeAttrName === 4 /* Template */) {\n                    // We do not care about Template attributes in this scenario.\n                    break;\n                }\n                else if (maybeAttrName === 0 /* NamespaceURI */) {\n                    // Skip the whole namespaced attribute and value. This is by design.\n                    i += 4;\n                    continue;\n                }\n                // In binding mode there are only names, rather than name-value pairs.\n                i += bindingsMode ? 1 : 2;\n            }\n            // We did not match the attribute\n            return -1;\n        }\n        else {\n            return matchTemplateAttribute(attrs, name);\n        }\n    }\n    function isNodeMatchingSelectorList(tNode, selector, isProjectionMode) {\n        if (isProjectionMode === void 0) { isProjectionMode = false; }\n        for (var i = 0; i < selector.length; i++) {\n            if (isNodeMatchingSelector(tNode, selector[i], isProjectionMode)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    function getProjectAsAttrValue(tNode) {\n        var nodeAttrs = tNode.attrs;\n        if (nodeAttrs != null) {\n            var ngProjectAsAttrIdx = nodeAttrs.indexOf(5 /* ProjectAs */);\n            // only check for ngProjectAs in attribute names, don't accidentally match attribute's value\n            // (attribute names are stored at even indexes)\n            if ((ngProjectAsAttrIdx & 1) === 0) {\n                return nodeAttrs[ngProjectAsAttrIdx + 1];\n            }\n        }\n        return null;\n    }\n    function getNameOnlyMarkerIndex(nodeAttrs) {\n        for (var i = 0; i < nodeAttrs.length; i++) {\n            var nodeAttr = nodeAttrs[i];\n            if (isNameOnlyAttributeMarker(nodeAttr)) {\n                return i;\n            }\n        }\n        return nodeAttrs.length;\n    }\n    function matchTemplateAttribute(attrs, name) {\n        var i = attrs.indexOf(4 /* Template */);\n        if (i > -1) {\n            i++;\n            while (i < attrs.length) {\n                if (attrs[i] === name)\n                    return i;\n                i++;\n            }\n        }\n        return -1;\n    }\n    /**\n     * Checks whether a selector is inside a CssSelectorList\n     * @param selector Selector to be checked.\n     * @param list List in which to look for the selector.\n     */\n    function isSelectorInSelectorList(selector, list) {\n        selectorListLoop: for (var i = 0; i < list.length; i++) {\n            var currentSelectorInList = list[i];\n            if (selector.length !== currentSelectorInList.length) {\n                continue;\n            }\n            for (var j = 0; j < selector.length; j++) {\n                if (selector[j] !== currentSelectorInList[j]) {\n                    continue selectorListLoop;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Marks that the next string is for element.\n     *\n     * See `I18nMutateOpCodes` documentation.\n     */\n    var ELEMENT_MARKER = {\n        marker: 'element'\n    };\n    /**\n     * Marks that the next string is for comment.\n     *\n     * See `I18nMutateOpCodes` documentation.\n     */\n    var COMMENT_MARKER = {\n        marker: 'comment'\n    };\n\n    var _stylingMode = 0;\n    function runtimeIsNewStylingInUse() {\n        return _stylingMode > 0 /* UseOld */;\n    }\n    function runtimeAllowOldStyling() {\n        return _stylingMode < 2 /* UseNew */;\n    }\n    var _currentSanitizer;\n    function setCurrentStyleSanitizer(sanitizer) {\n        _currentSanitizer = sanitizer;\n    }\n    function getCurrentStyleSanitizer() {\n        return _currentSanitizer;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function attachDebugObject(obj, debug) {\n        Object.defineProperty(obj, 'debug', { value: debug, enumerable: false });\n    }\n\n    /**\n    * @license\n    * Copyright Google Inc. All Rights Reserved.\n    *\n    * Use of this source code is governed by an MIT-style license that can be\n    * found in the LICENSE file at https://angular.io/license\n    */\n    var MAP_BASED_ENTRY_PROP_NAME = '--MAP--';\n    /**\n     * Creates a new instance of the `TStylingContext`.\n     *\n     * This function will also pre-fill the context with data\n     * for map-based bindings.\n     */\n    function allocTStylingContext() {\n        // because map-based bindings deal with a dynamic set of values, there\n        // is no way to know ahead of time whether or not sanitization is required.\n        // For this reason the configuration will always mark sanitization as active\n        // (this means that when map-based values are applied then sanitization will\n        // be checked against each property).\n        var mapBasedConfig = 1 /* SanitizationRequired */;\n        return [0 /* Initial */, 0, mapBasedConfig, 0, MAP_BASED_ENTRY_PROP_NAME];\n    }\n    /**\n     * Temporary function that allows for a string-based property name to be\n     * obtained from an index-based property identifier.\n     *\n     * This function will be removed once the new styling refactor code (which\n     * lives inside of `render3/styling_next/`) replaces the existing styling\n     * implementation.\n     */\n    function getBindingNameFromIndex(stylingContext, offset, directiveIndex, isClassBased) {\n        var singleIndex = getSinglePropIndexValue(stylingContext, directiveIndex, offset, isClassBased);\n        return getProp(stylingContext, singleIndex);\n    }\n    function updateContextDirectiveIndex(context, index) {\n        context[1 /* MaxDirectiveIndexPosition */] = index;\n    }\n    function getConfig(context) {\n        return context[0 /* ConfigPosition */];\n    }\n    function setConfig(context, value) {\n        context[0 /* ConfigPosition */] = value;\n    }\n    function getProp$1(context, index) {\n        return context[index + 2 /* PropOffset */];\n    }\n    function getPropConfig(context, index) {\n        return context[index + 0 /* ConfigAndGuardOffset */] &\n            1 /* Mask */;\n    }\n    function isSanitizationRequired(context, index) {\n        return (getPropConfig(context, index) & 1 /* SanitizationRequired */) > 0;\n    }\n    function getGuardMask(context, index) {\n        var configGuardValue = context[index + 0 /* ConfigAndGuardOffset */];\n        return configGuardValue >> 1 /* TotalBits */;\n    }\n    function setGuardMask(context, index, maskValue) {\n        var config = getPropConfig(context, index);\n        var guardMask = maskValue << 1 /* TotalBits */;\n        context[index + 0 /* ConfigAndGuardOffset */] = config | guardMask;\n    }\n    function getValuesCount(context, index) {\n        return context[index + 1 /* ValuesCountOffset */];\n    }\n    function getBindingValue(context, index, offset) {\n        return context[index + 3 /* BindingsStartOffset */ + offset];\n    }\n    function getDefaultValue(context, index) {\n        var valuesCount = getValuesCount(context, index);\n        return context[index + 3 /* BindingsStartOffset */ + valuesCount - 1];\n    }\n    /**\n     * Temporary function which determines whether or not a context is\n     * allowed to be flushed based on the provided directive index.\n     */\n    function allowStylingFlush(context, index) {\n        return index === context[1 /* MaxDirectiveIndexPosition */];\n    }\n    function lockContext(context) {\n        setConfig(context, getConfig(context) | 1 /* Locked */);\n    }\n    function isContextLocked(context) {\n        return (getConfig(context) & 1 /* Locked */) > 0;\n    }\n    function getPropValuesStartPosition(context) {\n        return 5 /* MapBindingsBindingsStartPosition */ +\n            context[3 /* MapBindingsValuesCountPosition */];\n    }\n    function hasValueChanged$1(a, b) {\n        var compareValueA = Array.isArray(a) ? a[0 /* RawValuePosition */] : a;\n        var compareValueB = Array.isArray(b) ? b[0 /* RawValuePosition */] : b;\n        return compareValueA !== compareValueB;\n    }\n    /**\n     * Determines whether the provided styling value is truthy or falsy.\n     */\n    function isStylingValueDefined(value) {\n        // the reason why null is compared against is because\n        // a CSS class value that is set to `false` must be\n        // respected (otherwise it would be treated as falsy).\n        // Empty string values are because developers usually\n        // set a value to an empty string to remove it.\n        return value != null && value !== '';\n    }\n    /**\n     * Returns the current style sanitizer function for the given view.\n     *\n     * The default style sanitizer (which lives inside of `LView`) will\n     * be returned depending on whether the `styleSanitizer` instruction\n     * was called or not prior to any styling instructions running.\n     */\n    function getCurrentOrLViewSanitizer(lView) {\n        var sanitizer = (getCurrentStyleSanitizer() || lView[SANITIZER]);\n        if (sanitizer && typeof sanitizer !== 'function') {\n            setCurrentStyleSanitizer(sanitizer);\n            return sanitizeUsingSanitizerObject;\n        }\n        return sanitizer;\n    }\n    /**\n     * Style sanitization function that internally uses a `Sanitizer` instance to handle style\n     * sanitization.\n     */\n    var sanitizeUsingSanitizerObject = function (prop, value, mode) {\n        var sanitizer = getCurrentStyleSanitizer();\n        if (sanitizer) {\n            if (mode & 2 /* SanitizeOnly */) {\n                return sanitizer.sanitize(exports.SecurityContext.STYLE, value);\n            }\n            else {\n                return true;\n            }\n        }\n        return value;\n    };\n\n    /**\n     * --------\n     *\n     * This file contains the core logic for styling in Angular.\n     *\n     * All styling bindings (i.e. `[style]`, `[style.prop]`, `[class]` and `[class.name]`)\n     * will have their values be applied through the logic in this file.\n     *\n     * When a binding is encountered (e.g. `<div [style.width]=\"w\">`) then\n     * the binding data will be populated into a `TStylingContext` data-structure.\n     * There is only one `TStylingContext` per `TNode` and each element instance\n     * will update its style/class binding values in concert with the styling\n     * context.\n     *\n     * To learn more about the algorithm see `TStylingContext`.\n     *\n     * --------\n     */\n    var DEFAULT_BINDING_VALUE = null;\n    var DEFAULT_SIZE_VALUE = 1;\n    // The first bit value reflects a map-based binding value's bit.\n    // The reason why it's always activated for every entry in the map\n    // is so that if any map-binding values update then all other prop\n    // based bindings will pass the guard check automatically without\n    // any extra code or flags.\n    var DEFAULT_GUARD_MASK_VALUE = 1;\n    var STYLING_INDEX_FOR_MAP_BINDING = 0;\n    var STYLING_INDEX_START_VALUE = 1;\n    // the values below are global to all styling code below. Each value\n    // will either increment or mutate each time a styling instruction is\n    // executed. Do not modify the values below.\n    var currentStyleIndex = STYLING_INDEX_START_VALUE;\n    var currentClassIndex = STYLING_INDEX_START_VALUE;\n    var stylesBitMask = 0;\n    var classesBitMask = 0;\n    var deferredBindingQueue = [];\n    /**\n     * Visits a class-based binding and updates the new value (if changed).\n     *\n     * This function is called each time a class-based styling instruction\n     * is executed. It's important that it's always called (even if the value\n     * has not changed) so that the inner counter index value is incremented.\n     * This way, each instruction is always guaranteed to get the same counter\n     * state each time it's called (which then allows the `TStylingContext`\n     * and the bit mask values to be in sync).\n     */\n    function updateClassBinding(context, data, prop, bindingIndex, value, deferRegistration, forceUpdate) {\n        var isMapBased = !prop;\n        var index = isMapBased ? STYLING_INDEX_FOR_MAP_BINDING : currentClassIndex++;\n        var updated = updateBindingData(context, data, index, prop, bindingIndex, value, deferRegistration, forceUpdate, false);\n        if (updated || forceUpdate) {\n            classesBitMask |= 1 << index;\n        }\n    }\n    /**\n     * Visits a style-based binding and updates the new value (if changed).\n     *\n     * This function is called each time a style-based styling instruction\n     * is executed. It's important that it's always called (even if the value\n     * has not changed) so that the inner counter index value is incremented.\n     * This way, each instruction is always guaranteed to get the same counter\n     * state each time it's called (which then allows the `TStylingContext`\n     * and the bit mask values to be in sync).\n     */\n    function updateStyleBinding(context, data, prop, bindingIndex, value, sanitizer, deferRegistration, forceUpdate) {\n        var isMapBased = !prop;\n        var index = isMapBased ? STYLING_INDEX_FOR_MAP_BINDING : currentStyleIndex++;\n        var sanitizationRequired = isMapBased ?\n            true :\n            (sanitizer ? sanitizer(prop, null, 1 /* ValidateProperty */) : false);\n        var updated = updateBindingData(context, data, index, prop, bindingIndex, value, deferRegistration, forceUpdate, sanitizationRequired);\n        if (updated || forceUpdate) {\n            stylesBitMask |= 1 << index;\n        }\n    }\n    /**\n     * Called each time a binding value has changed within the provided `TStylingContext`.\n     *\n     * This function is designed to be called from `updateStyleBinding` and `updateClassBinding`.\n     * If called during the first update pass, the binding will be registered in the context.\n     * If the binding does get registered and the `deferRegistration` flag is true then the\n     * binding data will be queued up until the context is later flushed in `applyStyling`.\n     *\n     * This function will also update binding slot in the provided `LStylingData` with the\n     * new binding entry (if it has changed).\n     *\n     * @returns whether or not the binding value was updated in the `LStylingData`.\n     */\n    function updateBindingData(context, data, counterIndex, prop, bindingIndex, value, deferRegistration, forceUpdate, sanitizationRequired) {\n        if (!isContextLocked(context)) {\n            if (deferRegistration) {\n                deferBindingRegistration(context, counterIndex, prop, bindingIndex, sanitizationRequired);\n            }\n            else {\n                deferredBindingQueue.length && flushDeferredBindings();\n                // this will only happen during the first update pass of the\n                // context. The reason why we can't use `tNode.firstTemplatePass`\n                // here is because its not guaranteed to be true when the first\n                // update pass is executed (remember that all styling instructions\n                // are run in the update phase, and, as a result, are no more\n                // styling instructions that are run in the creation phase).\n                registerBinding(context, counterIndex, prop, bindingIndex, sanitizationRequired);\n            }\n        }\n        var changed = forceUpdate || hasValueChanged$1(data[bindingIndex], value);\n        if (changed) {\n            data[bindingIndex] = value;\n        }\n        return changed;\n    }\n    /**\n     * Schedules a binding registration to be run at a later point.\n     *\n     * The reasoning for this feature is to ensure that styling\n     * bindings are registered in the correct order for when\n     * directives/components have a super/sub class inheritance\n     * chains. Each directive's styling bindings must be\n     * registered into the context in reverse order. Therefore all\n     * bindings will be buffered in reverse order and then applied\n     * after the inheritance chain exits.\n     */\n    function deferBindingRegistration(context, counterIndex, prop, bindingIndex, sanitizationRequired) {\n        deferredBindingQueue.unshift(context, counterIndex, prop, bindingIndex, sanitizationRequired);\n    }\n    /**\n     * Flushes the collection of deferred bindings and causes each entry\n     * to be registered into the context.\n     */\n    function flushDeferredBindings() {\n        var i = 0;\n        while (i < deferredBindingQueue.length) {\n            var context = deferredBindingQueue[i++];\n            var count = deferredBindingQueue[i++];\n            var prop = deferredBindingQueue[i++];\n            var bindingIndex = deferredBindingQueue[i++];\n            var sanitizationRequired = deferredBindingQueue[i++];\n            registerBinding(context, count, prop, bindingIndex, sanitizationRequired);\n        }\n        deferredBindingQueue.length = 0;\n    }\n    /**\n     * Registers the provided binding (prop + bindingIndex) into the context.\n     *\n     * This function is shared between bindings that are assigned immediately\n     * (via `updateBindingData`) and at a deferred stage. When called, it will\n     * figure out exactly where to place the binding data in the context.\n     *\n     * It is needed because it will either update or insert a styling property\n     * into the context at the correct spot.\n     *\n     * When called, one of two things will happen:\n     *\n     * 1) If the property already exists in the context then it will just add\n     *    the provided `bindingValue` to the end of the binding sources region\n     *    for that particular property.\n     *\n     *    - If the binding value is a number then it will be added as a new\n     *      binding index source next to the other binding sources for the property.\n     *\n     *    - Otherwise, if the binding value is a string/boolean/null type then it will\n     *      replace the default value for the property if the default value is `null`.\n     *\n     * 2) If the property does not exist then it will be inserted into the context.\n     *    The styling context relies on all properties being stored in alphabetical\n     *    order, so it knows exactly where to store it.\n     *\n     *    When inserted, a default `null` value is created for the property which exists\n     *    as the default value for the binding. If the bindingValue property is inserted\n     *    and it is either a string, number or null value then that will replace the default\n     *    value.\n     *\n     * Note that this function is also used for map-based styling bindings. They are treated\n     * much the same as prop-based bindings, but, because they do not have a property value\n     * (since it's a map), all map-based entries are stored in an already populated area of\n     * the context at the top (which is reserved for map-based entries).\n     */\n    function registerBinding(context, countId, prop, bindingValue, sanitizationRequired) {\n        // prop-based bindings (e.g `<div [style.width]=\"w\" [class.foo]=\"f\">`)\n        if (prop) {\n            var found = false;\n            var i = getPropValuesStartPosition(context);\n            while (i < context.length) {\n                var valuesCount = getValuesCount(context, i);\n                var p = getProp$1(context, i);\n                found = prop <= p;\n                if (found) {\n                    // all style/class bindings are sorted by property name\n                    if (prop < p) {\n                        allocateNewContextEntry(context, i, prop, sanitizationRequired);\n                    }\n                    addBindingIntoContext(context, false, i, bindingValue, countId);\n                    break;\n                }\n                i += 3 /* BindingsStartOffset */ + valuesCount;\n            }\n            if (!found) {\n                allocateNewContextEntry(context, context.length, prop, sanitizationRequired);\n                addBindingIntoContext(context, false, i, bindingValue, countId);\n            }\n        }\n        else {\n            // map-based bindings (e.g `<div [style]=\"s\" [class]=\"{className:true}\">`)\n            // there is no need to allocate the map-based binding region into the context\n            // since it is already there when the context is first created.\n            addBindingIntoContext(context, true, 2 /* MapBindingsPosition */, bindingValue, countId);\n        }\n    }\n    function allocateNewContextEntry(context, index, prop, sanitizationRequired) {\n        // 1,2: splice index locations\n        // 3: each entry gets a config value (guard mask + flags)\n        // 4. each entry gets a size value (which is always one because there is always a default binding\n        // value)\n        // 5. the property that is getting allocated into the context\n        // 6. the default binding value (usually `null`)\n        var config = sanitizationRequired ? 1 /* SanitizationRequired */ :\n            0 /* Default */;\n        context.splice(index, 0, config, DEFAULT_SIZE_VALUE, prop, DEFAULT_BINDING_VALUE);\n        setGuardMask(context, index, DEFAULT_GUARD_MASK_VALUE);\n    }\n    /**\n     * Inserts a new binding value into a styling property tuple in the `TStylingContext`.\n     *\n     * A bindingValue is inserted into a context during the first update pass\n     * of a template or host bindings function. When this occurs, two things\n     * happen:\n     *\n     * - If the bindingValue value is a number then it is treated as a bindingIndex\n     *   value (a index in the `LView`) and it will be inserted next to the other\n     *   binding index entries.\n     *\n     * - Otherwise the binding value will update the default value for the property\n     *   and this will only happen if the default value is `null`.\n     *\n     * Note that this function also handles map-based bindings and will insert them\n     * at the top of the context.\n     */\n    function addBindingIntoContext(context, isMapBased, index, bindingValue, countId) {\n        var valuesCount = getValuesCount(context, index);\n        var lastValueIndex = index + 3 /* BindingsStartOffset */ + valuesCount;\n        if (!isMapBased) {\n            // prop-based values all have default values, but map-based entries do not.\n            // we want to access the index for the default value in this case and not just\n            // the bindings...\n            lastValueIndex--;\n        }\n        if (typeof bindingValue === 'number') {\n            context.splice(lastValueIndex, 0, bindingValue);\n            context[index + 1 /* ValuesCountOffset */]++;\n            // now that a new binding index has been added to the property\n            // the guard mask bit value (at the `countId` position) needs\n            // to be included into the existing mask value.\n            var guardMask = getGuardMask(context, index) | (1 << countId);\n            setGuardMask(context, index, guardMask);\n        }\n        else if (typeof bindingValue === 'string' && context[lastValueIndex] == null) {\n            context[lastValueIndex] = bindingValue;\n        }\n    }\n    /**\n     * Applies all class entries in the provided context to the provided element and resets\n     * any counter and/or bitMask values associated with class bindings.\n     *\n     * @returns whether or not the classes were flushed to the element.\n     */\n    function applyClasses(renderer, data, context, element, directiveIndex) {\n        var classesFlushed = false;\n        if (allowStylingFlush(context, directiveIndex)) {\n            var isFirstPass = !isContextLocked(context);\n            isFirstPass && lockContext(context);\n            if (classesBitMask) {\n                // there is no way to sanitize a class value therefore `sanitizer=null`\n                applyStyling(context, renderer, element, data, classesBitMask, setClass$1, null);\n                classesBitMask = 0;\n                classesFlushed = true;\n            }\n            currentClassIndex = STYLING_INDEX_START_VALUE;\n        }\n        return classesFlushed;\n    }\n    /**\n     * Applies all style entries in the provided context to the provided element and resets\n     * any counter and/or bitMask values associated with style bindings.\n     *\n     * @returns whether or not the styles were flushed to the element.\n     */\n    function applyStyles(renderer, data, context, element, directiveIndex, sanitizer) {\n        var stylesFlushed = false;\n        if (allowStylingFlush(context, directiveIndex)) {\n            var isFirstPass = !isContextLocked(context);\n            isFirstPass && lockContext(context);\n            if (stylesBitMask) {\n                applyStyling(context, renderer, element, data, stylesBitMask, setStyle$1, sanitizer);\n                stylesBitMask = 0;\n                stylesFlushed = true;\n            }\n            currentStyleIndex = STYLING_INDEX_START_VALUE;\n            return true;\n        }\n        return stylesFlushed;\n    }\n    /**\n     * Runs through the provided styling context and applies each value to\n     * the provided element (via the renderer) if one or more values are present.\n     *\n     * This function will iterate over all entries present in the provided\n     * `TStylingContext` array (both prop-based and map-based bindings).-\n     *\n     * Each entry, within the `TStylingContext` array, is stored alphabetically\n     * and this means that each prop/value entry will be applied in order\n     * (so long as it is marked dirty in the provided `bitMask` value).\n     *\n     * If there are any map-based entries present (which are applied to the\n     * element via the `[style]` and `[class]` bindings) then those entries\n     * will be applied as well. However, the code for that is not apart of\n     * this function. Instead, each time a property is visited, then the\n     * code below will call an external function called `stylingMapsSyncFn`\n     * and, if present, it will keep the application of styling values in\n     * map-based bindings up to sync with the application of prop-based\n     * bindings.\n     *\n     * Visit `styling_next/map_based_bindings.ts` to learn more about how the\n     * algorithm works for map-based styling bindings.\n     *\n     * Note that this function is not designed to be called in isolation (use\n     * `applyClasses` and `applyStyles` to actually apply styling values).\n     */\n    function applyStyling(context, renderer, element, bindingData, bitMaskValue, applyStylingFn, sanitizer) {\n        deferredBindingQueue.length && flushDeferredBindings();\n        var bitMask = normalizeBitMaskValue(bitMaskValue);\n        var stylingMapsSyncFn = getStylingMapsSyncFn();\n        var mapsGuardMask = getGuardMask(context, 2 /* MapBindingsPosition */);\n        var applyAllValues = (bitMask & mapsGuardMask) > 0;\n        var mapsMode = applyAllValues ? 1 /* ApplyAllValues */ : 0 /* TraverseValues */;\n        var i = getPropValuesStartPosition(context);\n        while (i < context.length) {\n            var valuesCount = getValuesCount(context, i);\n            var guardMask = getGuardMask(context, i);\n            if (bitMask & guardMask) {\n                var valueApplied = false;\n                var prop = getProp$1(context, i);\n                var valuesCountUpToDefault = valuesCount - 1;\n                var defaultValue = getBindingValue(context, i, valuesCountUpToDefault);\n                // case 1: apply prop-based values\n                // try to apply the binding values and see if a non-null\n                // value gets set for the styling binding\n                for (var j = 0; j < valuesCountUpToDefault; j++) {\n                    var bindingIndex = getBindingValue(context, i, j);\n                    var value = bindingData[bindingIndex];\n                    if (isStylingValueDefined(value)) {\n                        var finalValue = sanitizer && isSanitizationRequired(context, i) ?\n                            sanitizer(prop, value, 2 /* SanitizeOnly */) :\n                            value;\n                        applyStylingFn(renderer, element, prop, finalValue, bindingIndex);\n                        valueApplied = true;\n                        break;\n                    }\n                }\n                // case 2: apply map-based values\n                // traverse through each map-based styling binding and update all values up to\n                // the provided `prop` value. If the property was not applied in the loop above\n                // then it will be attempted to be applied in the maps sync code below.\n                if (stylingMapsSyncFn) {\n                    // determine whether or not to apply the target property or to skip it\n                    var mode = mapsMode | (valueApplied ? 4 /* SkipTargetProp */ :\n                        2 /* ApplyTargetProp */);\n                    var valueAppliedWithinMap = stylingMapsSyncFn(context, renderer, element, bindingData, applyStylingFn, sanitizer, mode, prop, defaultValue);\n                    valueApplied = valueApplied || valueAppliedWithinMap;\n                }\n                // case 3: apply the default value\n                // if the value has not yet been applied then a truthy value does not exist in the\n                // prop-based or map-based bindings code. If and when this happens, just apply the\n                // default value (even if the default value is `null`).\n                if (!valueApplied) {\n                    applyStylingFn(renderer, element, prop, defaultValue);\n                }\n            }\n            i += 3 /* BindingsStartOffset */ + valuesCount;\n        }\n        // the map-based styling entries may have not applied all their\n        // values. For this reason, one more call to the sync function\n        // needs to be issued at the end.\n        if (stylingMapsSyncFn) {\n            stylingMapsSyncFn(context, renderer, element, bindingData, applyStylingFn, sanitizer, mapsMode);\n        }\n    }\n    function normalizeBitMaskValue(value) {\n        // if pass => apply all values (-1 implies that all bits are flipped to true)\n        if (value === true)\n            return -1;\n        // if pass => skip all values\n        if (value === false)\n            return 0;\n        // return the bit mask value as is\n        return value;\n    }\n    var _activeStylingMapApplyFn = null;\n    function getStylingMapsSyncFn() {\n        return _activeStylingMapApplyFn;\n    }\n    function setStylingMapsSyncFn(fn) {\n        _activeStylingMapApplyFn = fn;\n    }\n    /**\n     * Assigns a style value to a style property for the given element.\n     */\n    var setStyle$1 = function (renderer, native, prop, value) {\n        if (value) {\n            // opacity, z-index and flexbox all have number values\n            // and these need to be converted into strings so that\n            // they can be assigned properly.\n            value = value.toString();\n            ngDevMode && ngDevMode.rendererSetStyle++;\n            renderer && isProceduralRenderer(renderer) ?\n                renderer.setStyle(native, prop, value, RendererStyleFlags3.DashCase) :\n                native.style.setProperty(prop, value);\n        }\n        else {\n            ngDevMode && ngDevMode.rendererRemoveStyle++;\n            renderer && isProceduralRenderer(renderer) ?\n                renderer.removeStyle(native, prop, RendererStyleFlags3.DashCase) :\n                native.style.removeProperty(prop);\n        }\n    };\n    /**\n     * Adds/removes the provided className value to the provided element.\n     */\n    var setClass$1 = function (renderer, native, className, value) {\n        if (className !== '') {\n            if (value) {\n                ngDevMode && ngDevMode.rendererAddClass++;\n                renderer && isProceduralRenderer(renderer) ? renderer.addClass(native, className) :\n                    native.classList.add(className);\n            }\n            else {\n                ngDevMode && ngDevMode.rendererRemoveClass++;\n                renderer && isProceduralRenderer(renderer) ? renderer.removeClass(native, className) :\n                    native.classList.remove(className);\n            }\n        }\n    };\n\n    /**\n     * --------\n     *\n     * This file contains the algorithm logic for applying map-based bindings\n     * such as `[style]` and `[class]`.\n     *\n     * --------\n     */\n    /**\n     * Used to apply styling values presently within any map-based bindings on an element.\n     *\n     * Angular supports map-based styling bindings which can be applied via the\n     * `[style]` and `[class]` bindings which can be placed on any HTML element.\n     * These bindings can work independently, together or alongside prop-based\n     * styling bindings (e.g. `<div [style]=\"x\" [style.width]=\"w\">`).\n     *\n     * If a map-based styling binding is detected by the compiler, the following\n     * AOT code is produced:\n     *\n     * ```typescript\n     * styleMap(ctx.styles); // styles = {key:value}\n     * classMap(ctx.classes); // classes = {key:value}|string\n     * ```\n     *\n     * If and when either of the instructions above are evaluated, then the code\n     * present in this file is included into the bundle. The mechanism used, to\n     * activate support for map-based bindings at runtime is possible via the\n     * `activeStylingMapFeature` function (which is also present in this file).\n     *\n     * # The Algorithm\n     * Whenever a map-based binding updates (which is when the identity of the\n     * map-value changes) then the map is iterated over and a `LStylingMap` array\n     * is produced. The `LStylingMap` instance is stored in the binding location\n     * where the `BINDING_INDEX` is situated when the `styleMap()` or `classMap()`\n     * instruction were called. Once the binding changes, then the internal `bitMask`\n     * value is marked as dirty.\n     *\n     * Styling values are applied once CD exits the element (which happens when\n     * the `select(n)` instruction is called or the template function exits). When\n     * this occurs, all prop-based bindings are applied. If a map-based binding is\n     * present then a special flushing function (called a sync function) is made\n     * available and it will be called each time a styling property is flushed.\n     *\n     * The flushing algorithm is designed to apply styling for a property (which is\n     * a CSS property or a className value) one by one. If map-based bindings\n     * are present, then the flushing algorithm will keep calling the maps styling\n     * sync function each time a property is visited. This way, the flushing\n     * behavior of map-based bindings will always be at the same property level\n     * as the current prop-based property being iterated over (because everything\n     * is alphabetically sorted).\n     *\n     * Let's imagine we have the following HTML template code:\n     *\n     * ```html\n     * <div [style]=\"{width:'100px', height:'200px', 'z-index':'10'}\"\n     *      [style.width.px]=\"200\">...</div>\n     * ```\n     *\n     * When CD occurs, both the `[style]` and `[style.width]` bindings\n     * are evaluated. Then when the styles are flushed on screen, the\n     * following operations happen:\n     *\n     * 1. `[style.width]` is attempted to be written to the element.\n     *\n     * 2.  Once that happens, the algorithm instructs the map-based\n     *     entries (`[style]` in this case) to \"catch up\" and apply\n     *     all values up to the `width` value. When this happens the\n     *     `height` value is applied to the element (since it is\n     *     alphabetically situated before the `width` property).\n     *\n     * 3. Since there are no more prop-based entries anymore, the\n     *    loop exits and then, just before the flushing ends, it\n     *    instructs all map-based bindings to \"finish up\" applying\n     *    their values.\n     *\n     * 4. The only remaining value within the map-based entries is\n     *    the `z-index` value (`width` got skipped because it was\n     *    successfully applied via the prop-based `[style.width]`\n     *    binding). Since all map-based entries are told to \"finish up\",\n     *    the `z-index` value is iterated over and it is then applied\n     *    to the element.\n     *\n     * The most important thing to take note of here is that prop-based\n     * bindings are evaluated in order alongside map-based bindings.\n     * This allows all styling across an element to be applied in O(n)\n     * time (a similar algorithm is that of the array merge algorithm\n     * in merge sort).\n     */\n    var syncStylingMap = function (context, renderer, element, data, applyStylingFn, sanitizer, mode, targetProp, defaultValue) {\n        var targetPropValueWasApplied = false;\n        // once the map-based styling code is activate it is never deactivated. For this reason a\n        // check to see if the current styling context has any map based bindings is required.\n        var totalMaps = getValuesCount(context, 2 /* MapBindingsPosition */);\n        if (totalMaps) {\n            var runTheSyncAlgorithm = true;\n            var loopUntilEnd = !targetProp;\n            // If the code is told to finish up (run until the end), but the mode\n            // hasn't been flagged to apply values (it only traverses values) then\n            // there is no point in iterating over the array because nothing will\n            // be applied to the element.\n            if (loopUntilEnd && (mode & ~1 /* ApplyAllValues */)) {\n                runTheSyncAlgorithm = false;\n                targetPropValueWasApplied = true;\n            }\n            if (runTheSyncAlgorithm) {\n                targetPropValueWasApplied = innerSyncStylingMap(context, renderer, element, data, applyStylingFn, sanitizer, mode, targetProp || null, 0, defaultValue || null);\n            }\n            if (loopUntilEnd) {\n                resetSyncCursors();\n            }\n        }\n        return targetPropValueWasApplied;\n    };\n    /**\n     * Recursive function designed to apply map-based styling to an element one map at a time.\n     *\n     * This function is designed to be called from the `syncStylingMap` function and will\n     * apply map-based styling data one map at a time to the provided `element`.\n     *\n     * This function is recursive and it will call itself if a follow-up map value is to be\n     * processed. To learn more about how the algorithm works, see `syncStylingMap`.\n     */\n    function innerSyncStylingMap(context, renderer, element, data, applyStylingFn, sanitizer, mode, targetProp, currentMapIndex, defaultValue) {\n        var targetPropValueWasApplied = false;\n        var totalMaps = getValuesCount(context, 2 /* MapBindingsPosition */);\n        if (currentMapIndex < totalMaps) {\n            var bindingIndex = getBindingValue(context, 2 /* MapBindingsPosition */, currentMapIndex);\n            var lStylingMap = data[bindingIndex];\n            var cursor = getCurrentSyncCursor(currentMapIndex);\n            while (cursor < lStylingMap.length) {\n                var prop = getMapProp(lStylingMap, cursor);\n                var iteratedTooFar = targetProp && prop > targetProp;\n                var isTargetPropMatched = !iteratedTooFar && prop === targetProp;\n                var value = getMapValue(lStylingMap, cursor);\n                var valueIsDefined = isStylingValueDefined(value);\n                // the recursive code is designed to keep applying until\n                // it reaches or goes past the target prop. If and when\n                // this happens then it will stop processing values, but\n                // all other map values must also catch up to the same\n                // point. This is why a recursive call is still issued\n                // even if the code has iterated too far.\n                var innerMode = iteratedTooFar ? mode : resolveInnerMapMode(mode, valueIsDefined, isTargetPropMatched);\n                var innerProp = iteratedTooFar ? targetProp : prop;\n                var valueApplied = innerSyncStylingMap(context, renderer, element, data, applyStylingFn, sanitizer, innerMode, innerProp, currentMapIndex + 1, defaultValue);\n                if (iteratedTooFar) {\n                    break;\n                }\n                if (!valueApplied && isValueAllowedToBeApplied(mode, isTargetPropMatched)) {\n                    var useDefault = isTargetPropMatched && !valueIsDefined;\n                    var valueToApply = useDefault ? defaultValue : value;\n                    var bindingIndexToApply = useDefault ? bindingIndex : null;\n                    var finalValue = sanitizer ?\n                        sanitizer(prop, valueToApply, 3 /* ValidateAndSanitize */) :\n                        valueToApply;\n                    applyStylingFn(renderer, element, prop, finalValue, bindingIndexToApply);\n                    valueApplied = true;\n                }\n                targetPropValueWasApplied = valueApplied && isTargetPropMatched;\n                cursor += 2 /* TupleSize */;\n            }\n            setCurrentSyncCursor(currentMapIndex, cursor);\n        }\n        return targetPropValueWasApplied;\n    }\n    /**\n     * Enables support for map-based styling bindings (e.g. `[style]` and `[class]` bindings).\n     */\n    function activeStylingMapFeature() {\n        setStylingMapsSyncFn(syncStylingMap);\n    }\n    /**\n     * Used to determine the mode for the inner recursive call.\n     *\n     * If an inner map is iterated on then this is done so for one\n     * of two reasons:\n     *\n     * - The target property was detected and the inner map\n     *   must now \"catch up\" (pointer-wise) up to where the current\n     *   map's cursor is situated.\n     *\n     * - The target property was not detected in the current map\n     *   and must be found in an inner map. This can only be allowed\n     *   if the current map iteration is not set to skip the target\n     *   property.\n     */\n    function resolveInnerMapMode(currentMode, valueIsDefined, isExactMatch) {\n        var innerMode = currentMode;\n        if (!valueIsDefined && isExactMatch && !(currentMode & 4 /* SkipTargetProp */)) {\n            // case 1: set the mode to apply the targeted prop value if it\n            // ends up being encountered in another map value\n            innerMode |= 2 /* ApplyTargetProp */;\n            innerMode &= ~4 /* SkipTargetProp */;\n        }\n        else {\n            // case 2: set the mode to skip the targeted prop value if it\n            // ends up being encountered in another map value\n            innerMode |= 4 /* SkipTargetProp */;\n            innerMode &= ~2 /* ApplyTargetProp */;\n        }\n        return innerMode;\n    }\n    /**\n     * Decides whether or not a prop/value entry will be applied to an element.\n     *\n     * To determine whether or not a value is to be applied,\n     * the following procedure is evaluated:\n     *\n     * First check to see the current `mode` status:\n     *  1. If the mode value permits all props to be applied then allow.\n     *    - But do not allow if the current prop is set to be skipped.\n     *  2. Otherwise if the current prop is permitted then allow.\n     */\n    function isValueAllowedToBeApplied(mode, isTargetPropMatched) {\n        var doApplyValue = (mode & 1 /* ApplyAllValues */) > 0;\n        if (!doApplyValue) {\n            if (mode & 2 /* ApplyTargetProp */) {\n                doApplyValue = isTargetPropMatched;\n            }\n        }\n        else if ((mode & 4 /* SkipTargetProp */) && isTargetPropMatched) {\n            doApplyValue = false;\n        }\n        return doApplyValue;\n    }\n    /**\n     * Used to keep track of concurrent cursor values for multiple map-based styling bindings present on\n     * an element.\n     */\n    var MAP_CURSORS = [];\n    /**\n     * Used to reset the state of each cursor value being used to iterate over map-based styling\n     * bindings.\n     */\n    function resetSyncCursors() {\n        for (var i = 0; i < MAP_CURSORS.length; i++) {\n            MAP_CURSORS[i] = 1 /* ValuesStartPosition */;\n        }\n    }\n    /**\n     * Returns an active cursor value at a given mapIndex location.\n     */\n    function getCurrentSyncCursor(mapIndex) {\n        if (mapIndex >= MAP_CURSORS.length) {\n            MAP_CURSORS.push(1 /* ValuesStartPosition */);\n        }\n        return MAP_CURSORS[mapIndex];\n    }\n    /**\n     * Sets a cursor value at a given mapIndex location.\n     */\n    function setCurrentSyncCursor(mapIndex, indexValue) {\n        MAP_CURSORS[mapIndex] = indexValue;\n    }\n    /**\n     * Used to convert a {key:value} map into a `LStylingMap` array.\n     *\n     * This function will either generate a new `LStylingMap` instance\n     * or it will patch the provided `newValues` map value into an\n     * existing `LStylingMap` value (this only happens if `bindingValue`\n     * is an instance of `LStylingMap`).\n     *\n     * If a new key/value map is provided with an old `LStylingMap`\n     * value then all properties will be overwritten with their new\n     * values or with `null`. This means that the array will never\n     * shrink in size (but it will also not be created and thrown\n     * away whenever the {key:value} map entries change).\n     */\n    function normalizeIntoStylingMap(bindingValue, newValues) {\n        var lStylingMap = Array.isArray(bindingValue) ? bindingValue : [null];\n        lStylingMap[0 /* RawValuePosition */] = newValues || null;\n        // because the new values may not include all the properties\n        // that the old ones had, all values are set to `null` before\n        // the new values are applied. This way, when flushed, the\n        // styling algorithm knows exactly what style/class values\n        // to remove from the element (since they are `null`).\n        for (var j = 1 /* ValuesStartPosition */; j < lStylingMap.length; j += 2 /* TupleSize */) {\n            setMapValue(lStylingMap, j, null);\n        }\n        var props = null;\n        var map;\n        var allValuesTrue = false;\n        if (typeof newValues === 'string') { // [class] bindings allow string values\n            if (newValues.length) {\n                props = newValues.split(/\\s+/);\n                allValuesTrue = true;\n            }\n        }\n        else {\n            props = newValues ? Object.keys(newValues) : null;\n            map = newValues;\n        }\n        if (props) {\n            outer: for (var i = 0; i < props.length; i++) {\n                var prop = props[i];\n                var value = allValuesTrue ? true : map[prop];\n                for (var j = 1 /* ValuesStartPosition */; j < lStylingMap.length; j += 2 /* TupleSize */) {\n                    var propAtIndex = getMapProp(lStylingMap, j);\n                    if (prop <= propAtIndex) {\n                        if (propAtIndex === prop) {\n                            setMapValue(lStylingMap, j, value);\n                        }\n                        else {\n                            lStylingMap.splice(j, 0, prop, value);\n                        }\n                        continue outer;\n                    }\n                }\n                lStylingMap.push(prop, value);\n            }\n        }\n        return lStylingMap;\n    }\n    function getMapProp(map, index) {\n        return map[index + 0 /* PropOffset */];\n    }\n    function setMapValue(map, index, value) {\n        map[index + 1 /* ValueOffset */] = value;\n    }\n    function getMapValue(map, index) {\n        return map[index + 1 /* ValueOffset */];\n    }\n\n    /**\n     * Instantiates and attaches an instance of `TStylingContextDebug` to the provided context.\n     */\n    function attachStylingDebugObject(context) {\n        var debug = new TStylingContextDebug(context);\n        attachDebugObject(context, debug);\n        return debug;\n    }\n    /**\n     * A human-readable debug summary of the styling data present within `TStylingContext`.\n     *\n     * This class is designed to be used within testing code or when an\n     * application has `ngDevMode` activated.\n     */\n    var TStylingContextDebug = /** @class */ (function () {\n        function TStylingContextDebug(context) {\n            this.context = context;\n        }\n        Object.defineProperty(TStylingContextDebug.prototype, \"isLocked\", {\n            get: function () { return isContextLocked(this.context); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(TStylingContextDebug.prototype, \"entries\", {\n            /**\n             * Returns a detailed summary of each styling entry in the context.\n             *\n             * See `TStylingTupleSummary`.\n             */\n            get: function () {\n                var context = this.context;\n                var entries = {};\n                var start = 2 /* MapBindingsPosition */;\n                var i = start;\n                while (i < context.length) {\n                    var valuesCount = getValuesCount(context, i);\n                    // the context may contain placeholder values which are populated ahead of time,\n                    // but contain no actual binding values. In this situation there is no point in\n                    // classifying this as an \"entry\" since no real data is stored here yet.\n                    if (valuesCount) {\n                        var prop = getProp$1(context, i);\n                        var guardMask = getGuardMask(context, i);\n                        var defaultValue = getDefaultValue(context, i);\n                        var sanitizationRequired = isSanitizationRequired(context, i);\n                        var bindingsStartPosition = i + 3 /* BindingsStartOffset */;\n                        var sources = [];\n                        for (var j = 0; j < valuesCount; j++) {\n                            sources.push(context[bindingsStartPosition + j]);\n                        }\n                        entries[prop] = { prop: prop, guardMask: guardMask, sanitizationRequired: sanitizationRequired, valuesCount: valuesCount, defaultValue: defaultValue, sources: sources };\n                    }\n                    i += 3 /* BindingsStartOffset */ + valuesCount;\n                }\n                return entries;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return TStylingContextDebug;\n    }());\n    /**\n     * A human-readable debug summary of the styling data present for a `DebugNode` instance.\n     *\n     * This class is designed to be used within testing code or when an\n     * application has `ngDevMode` activated.\n     */\n    var NodeStylingDebug = /** @class */ (function () {\n        function NodeStylingDebug(context, _data, _isClassBased) {\n            this.context = context;\n            this._data = _data;\n            this._isClassBased = _isClassBased;\n            this._sanitizer = null;\n        }\n        /**\n         * Overrides the sanitizer used to process styles.\n         */\n        NodeStylingDebug.prototype.overrideSanitizer = function (sanitizer) { this._sanitizer = sanitizer; };\n        Object.defineProperty(NodeStylingDebug.prototype, \"summary\", {\n            /**\n             * Returns a detailed summary of each styling entry in the context and\n             * what their runtime representation is.\n             *\n             * See `LStylingSummary`.\n             */\n            get: function () {\n                var entries = {};\n                this._mapValues(function (prop, value, bindingIndex) {\n                    entries[prop] = { prop: prop, value: value, bindingIndex: bindingIndex };\n                });\n                return entries;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NodeStylingDebug.prototype, \"values\", {\n            /**\n             * Returns a key/value map of all the styles/classes that were last applied to the element.\n             */\n            get: function () {\n                var entries = {};\n                this._mapValues(function (prop, value) { entries[prop] = value; });\n                return entries;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        NodeStylingDebug.prototype._mapValues = function (fn) {\n            // there is no need to store/track an element instance. The\n            // element is only used when the styling algorithm attempts to\n            // style the value (and we mock out the stylingApplyFn anyway).\n            var mockElement = {};\n            var hasMaps = getValuesCount(this.context, 2 /* MapBindingsPosition */) > 0;\n            if (hasMaps) {\n                activeStylingMapFeature();\n            }\n            var mapFn = function (renderer, element, prop, value, bindingIndex) {\n                fn(prop, value, bindingIndex || null);\n            };\n            var sanitizer = this._isClassBased ? null : (this._sanitizer ||\n                getCurrentOrLViewSanitizer(this._data));\n            applyStyling(this.context, null, mockElement, this._data, true, mapFn, sanitizer);\n        };\n        return NodeStylingDebug;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /*\n     * This file contains conditionally attached classes which provide human readable (debug) level\n     * information for `LView`, `LContainer` and other internal data structures. These data structures\n     * are stored internally as array which makes it very difficult during debugging to reason about the\n     * current state of the system.\n     *\n     * Patching the array with extra property does change the array's hidden class' but it does not\n     * change the cost of access, therefore this patching should not have significant if any impact in\n     * `ngDevMode` mode. (see: https://jsperf.com/array-vs-monkey-patch-array)\n     *\n     * So instead of seeing:\n     * ```\n     * Array(30) [Object, 659, null, …]\n     * ```\n     *\n     * You get to see:\n     * ```\n     * LViewDebug {\n     *   views: [...],\n     *   flags: {attached: true, ...}\n     *   nodes: [\n     *     {html: '<div id=\"123\">', ..., nodes: [\n     *       {html: '<span>', ..., nodes: null}\n     *     ]}\n     *   ]\n     * }\n     * ```\n     */\n    var LViewArray = ngDevMode && createNamedArrayType('LView');\n    var LVIEW_EMPTY; // can't initialize here or it will not be tree shaken, because `LView`\n    // constructor could have side-effects.\n    /**\n     * This function clones a blueprint and creates LView.\n     *\n     * Simple slice will keep the same type, and we need it to be LView\n     */\n    function cloneToLView(list) {\n        if (LVIEW_EMPTY === undefined)\n            LVIEW_EMPTY = new LViewArray();\n        return LVIEW_EMPTY.concat(list);\n    }\n    /**\n     * This class is a debug version of Object literal so that we can have constructor name show up in\n     * debug tools in ngDevMode.\n     */\n    var TViewConstructor = /** @class */ (function () {\n        function TView(id, //\n        blueprint, //\n        template, //\n        viewQuery, //\n        node, //\n        data, //\n        bindingStartIndex, //\n        viewQueryStartIndex, //\n        expandoStartIndex, //\n        expandoInstructions, //\n        firstTemplatePass, //\n        staticViewQueries, //\n        staticContentQueries, //\n        preOrderHooks, //\n        preOrderCheckHooks, //\n        contentHooks, //\n        contentCheckHooks, //\n        viewHooks, //\n        viewCheckHooks, //\n        destroyHooks, //\n        cleanup, //\n        contentQueries, //\n        components, //\n        directiveRegistry, //\n        pipeRegistry, //\n        firstChild, //\n        schemas) {\n            this.id = id;\n            this.blueprint = blueprint;\n            this.template = template;\n            this.viewQuery = viewQuery;\n            this.node = node;\n            this.data = data;\n            this.bindingStartIndex = bindingStartIndex;\n            this.viewQueryStartIndex = viewQueryStartIndex;\n            this.expandoStartIndex = expandoStartIndex;\n            this.expandoInstructions = expandoInstructions;\n            this.firstTemplatePass = firstTemplatePass;\n            this.staticViewQueries = staticViewQueries;\n            this.staticContentQueries = staticContentQueries;\n            this.preOrderHooks = preOrderHooks;\n            this.preOrderCheckHooks = preOrderCheckHooks;\n            this.contentHooks = contentHooks;\n            this.contentCheckHooks = contentCheckHooks;\n            this.viewHooks = viewHooks;\n            this.viewCheckHooks = viewCheckHooks;\n            this.destroyHooks = destroyHooks;\n            this.cleanup = cleanup;\n            this.contentQueries = contentQueries;\n            this.components = components;\n            this.directiveRegistry = directiveRegistry;\n            this.pipeRegistry = pipeRegistry;\n            this.firstChild = firstChild;\n            this.schemas = schemas;\n        }\n        return TView;\n    }());\n    var TViewData = ngDevMode && createNamedArrayType('TViewData');\n    var TVIEWDATA_EMPTY; // can't initialize here or it will not be tree shaken, because `LView`\n    // constructor could have side-effects.\n    /**\n     * This function clones a blueprint and creates TData.\n     *\n     * Simple slice will keep the same type, and we need it to be TData\n     */\n    function cloneToTViewData(list) {\n        if (TVIEWDATA_EMPTY === undefined)\n            TVIEWDATA_EMPTY = new TViewData();\n        return TVIEWDATA_EMPTY.concat(list);\n    }\n    var LViewBlueprint = ngDevMode && createNamedArrayType('LViewBlueprint');\n    var MatchesArray = ngDevMode && createNamedArrayType('MatchesArray');\n    var TViewComponents = ngDevMode && createNamedArrayType('TViewComponents');\n    var TNodeLocalNames = ngDevMode && createNamedArrayType('TNodeLocalNames');\n    var TNodeInitialInputs = ngDevMode && createNamedArrayType('TNodeInitialInputs');\n    var TNodeInitialData = ngDevMode && createNamedArrayType('TNodeInitialData');\n    var LCleanup = ngDevMode && createNamedArrayType('LCleanup');\n    var TCleanup = ngDevMode && createNamedArrayType('TCleanup');\n    function attachLViewDebug(lView) {\n        attachDebugObject(lView, new LViewDebug(lView));\n    }\n    function attachLContainerDebug(lContainer) {\n        attachDebugObject(lContainer, new LContainerDebug(lContainer));\n    }\n    function toDebug(obj) {\n        if (obj) {\n            var debug = obj.debug;\n            assertDefined(debug, 'Object does not have a debug representation.');\n            return debug;\n        }\n        else {\n            return obj;\n        }\n    }\n    /**\n     * Use this method to unwrap a native element in `LView` and convert it into HTML for easier\n     * reading.\n     *\n     * @param value possibly wrapped native DOM node.\n     * @param includeChildren If `true` then the serialized HTML form will include child elements (same\n     * as `outerHTML`). If `false` then the serialized HTML form will only contain the element itself\n     * (will not serialize child elements).\n     */\n    function toHtml(value, includeChildren) {\n        if (includeChildren === void 0) { includeChildren = false; }\n        var node = unwrapRNode(value);\n        if (node) {\n            var isTextNode = node.nodeType === Node.TEXT_NODE;\n            var outerHTML = (isTextNode ? node.textContent : node.outerHTML) || '';\n            if (includeChildren || isTextNode) {\n                return outerHTML;\n            }\n            else {\n                var innerHTML = node.innerHTML;\n                return outerHTML.split(innerHTML)[0] || null;\n            }\n        }\n        else {\n            return null;\n        }\n    }\n    var LViewDebug = /** @class */ (function () {\n        function LViewDebug(_raw_lView) {\n            this._raw_lView = _raw_lView;\n        }\n        Object.defineProperty(LViewDebug.prototype, \"flags\", {\n            /**\n             * Flags associated with the `LView` unpacked into a more readable state.\n             */\n            get: function () {\n                var flags = this._raw_lView[FLAGS];\n                return {\n                    __raw__flags__: flags,\n                    initPhaseState: flags & 3 /* InitPhaseStateMask */,\n                    creationMode: !!(flags & 4 /* CreationMode */),\n                    firstViewPass: !!(flags & 8 /* FirstLViewPass */),\n                    checkAlways: !!(flags & 16 /* CheckAlways */),\n                    dirty: !!(flags & 64 /* Dirty */),\n                    attached: !!(flags & 128 /* Attached */),\n                    destroyed: !!(flags & 256 /* Destroyed */),\n                    isRoot: !!(flags & 512 /* IsRoot */),\n                    indexWithinInitPhase: flags >> 10 /* IndexWithinInitPhaseShift */,\n                };\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LViewDebug.prototype, \"parent\", {\n            get: function () { return toDebug(this._raw_lView[PARENT]); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LViewDebug.prototype, \"host\", {\n            get: function () { return toHtml(this._raw_lView[HOST], true); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LViewDebug.prototype, \"context\", {\n            get: function () { return this._raw_lView[CONTEXT]; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LViewDebug.prototype, \"nodes\", {\n            /**\n             * The tree of nodes associated with the current `LView`. The nodes have been normalized into a\n             * tree structure with relevant details pulled out for readability.\n             */\n            get: function () {\n                var lView = this._raw_lView;\n                var tNode = lView[TVIEW].firstChild;\n                return toDebugNodes(tNode, lView);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LViewDebug.prototype, \"__other__\", {\n            /**\n             * Additional information which is hidden behind a property. The extra level of indirection is\n             * done so that the debug view would not be cluttered with properties which are only rarely\n             * relevant to the developer.\n             */\n            get: function () {\n                return {\n                    tView: this._raw_lView[TVIEW],\n                    cleanup: this._raw_lView[CLEANUP],\n                    injector: this._raw_lView[INJECTOR$1],\n                    rendererFactory: this._raw_lView[RENDERER_FACTORY],\n                    renderer: this._raw_lView[RENDERER],\n                    sanitizer: this._raw_lView[SANITIZER],\n                    childHead: toDebug(this._raw_lView[CHILD_HEAD]),\n                    next: toDebug(this._raw_lView[NEXT]),\n                    childTail: toDebug(this._raw_lView[CHILD_TAIL]),\n                    declarationView: toDebug(this._raw_lView[DECLARATION_VIEW]),\n                    contentQueries: this._raw_lView[CONTENT_QUERIES],\n                    queries: this._raw_lView[QUERIES],\n                    tHost: this._raw_lView[T_HOST],\n                    bindingIndex: this._raw_lView[BINDING_INDEX],\n                };\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LViewDebug.prototype, \"childViews\", {\n            /**\n             * Normalized view of child views (and containers) attached at this location.\n             */\n            get: function () {\n                var childViews = [];\n                var child = this.__other__.childHead;\n                while (child) {\n                    childViews.push(child);\n                    child = child.__other__.next;\n                }\n                return childViews;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return LViewDebug;\n    }());\n    /**\n     * Turns a flat list of nodes into a tree by walking the associated `TNode` tree.\n     *\n     * @param tNode\n     * @param lView\n     */\n    function toDebugNodes(tNode, lView) {\n        if (tNode) {\n            var debugNodes = [];\n            var tNodeCursor = tNode;\n            while (tNodeCursor) {\n                var rawValue = lView[tNode.index];\n                var native = unwrapRNode(rawValue);\n                var componentLViewDebug = isStylingContext(rawValue) ? null : toDebug(readLViewValue(rawValue));\n                var styles = null;\n                var classes = null;\n                if (runtimeIsNewStylingInUse()) {\n                    styles = tNode.newStyles ? new NodeStylingDebug(tNode.newStyles, lView, false) : null;\n                    classes = tNode.newClasses ? new NodeStylingDebug(tNode.newClasses, lView, true) : null;\n                }\n                debugNodes.push({\n                    html: toHtml(native),\n                    native: native, styles: styles, classes: classes,\n                    nodes: toDebugNodes(tNode.child, lView),\n                    component: componentLViewDebug,\n                });\n                tNodeCursor = tNodeCursor.next;\n            }\n            return debugNodes;\n        }\n        else {\n            return null;\n        }\n    }\n    var LContainerDebug = /** @class */ (function () {\n        function LContainerDebug(_raw_lContainer) {\n            this._raw_lContainer = _raw_lContainer;\n        }\n        Object.defineProperty(LContainerDebug.prototype, \"activeIndex\", {\n            get: function () { return this._raw_lContainer[ACTIVE_INDEX]; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LContainerDebug.prototype, \"views\", {\n            get: function () {\n                return this._raw_lContainer.slice(CONTAINER_HEADER_OFFSET)\n                    .map(toDebug);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LContainerDebug.prototype, \"parent\", {\n            get: function () { return toDebug(this._raw_lContainer[PARENT]); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LContainerDebug.prototype, \"queries\", {\n            get: function () { return this._raw_lContainer[QUERIES]; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LContainerDebug.prototype, \"host\", {\n            get: function () { return this._raw_lContainer[HOST]; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LContainerDebug.prototype, \"native\", {\n            get: function () { return this._raw_lContainer[NATIVE]; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LContainerDebug.prototype, \"__other__\", {\n            get: function () {\n                return {\n                    next: toDebug(this._raw_lContainer[NEXT]),\n                };\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return LContainerDebug;\n    }());\n    /**\n     * Return an `LView` value if found.\n     *\n     * @param value `LView` if any\n     */\n    function readLViewValue(value) {\n        while (Array.isArray(value)) {\n            // This check is not quite right, as it does not take into account `StylingContext`\n            // This is why it is in debug, not in util.ts\n            if (value.length >= HEADER_OFFSET - 1)\n                return value;\n            value = value[HOST];\n        }\n        return null;\n    }\n    var I18NDebugItem = /** @class */ (function () {\n        function I18NDebugItem(__raw_opCode, _lView, nodeIndex, type) {\n            this.__raw_opCode = __raw_opCode;\n            this._lView = _lView;\n            this.nodeIndex = nodeIndex;\n            this.type = type;\n        }\n        Object.defineProperty(I18NDebugItem.prototype, \"tNode\", {\n            get: function () { return getTNode(this.nodeIndex, this._lView); },\n            enumerable: true,\n            configurable: true\n        });\n        return I18NDebugItem;\n    }());\n    /**\n     * Turns a list of \"Create\" & \"Update\" OpCodes into a human-readable list of operations for\n     * debugging purposes.\n     * @param mutateOpCodes mutation opCodes to read\n     * @param updateOpCodes update opCodes to read\n     * @param icus list of ICU expressions\n     * @param lView The view the opCodes are acting on\n     */\n    function attachI18nOpCodesDebug(mutateOpCodes, updateOpCodes, icus, lView) {\n        attachDebugObject(mutateOpCodes, new I18nMutateOpCodesDebug(mutateOpCodes, lView));\n        attachDebugObject(updateOpCodes, new I18nUpdateOpCodesDebug(updateOpCodes, icus, lView));\n        if (icus) {\n            icus.forEach(function (icu) {\n                icu.create.forEach(function (icuCase) { attachDebugObject(icuCase, new I18nMutateOpCodesDebug(icuCase, lView)); });\n                icu.update.forEach(function (icuCase) {\n                    attachDebugObject(icuCase, new I18nUpdateOpCodesDebug(icuCase, icus, lView));\n                });\n            });\n        }\n    }\n    var I18nMutateOpCodesDebug = /** @class */ (function () {\n        function I18nMutateOpCodesDebug(__raw_opCodes, __lView) {\n            this.__raw_opCodes = __raw_opCodes;\n            this.__lView = __lView;\n        }\n        Object.defineProperty(I18nMutateOpCodesDebug.prototype, \"operations\", {\n            /**\n             * A list of operation information about how the OpCodes will act on the view.\n             */\n            get: function () {\n                var _a = this, __lView = _a.__lView, __raw_opCodes = _a.__raw_opCodes;\n                var results = [];\n                for (var i = 0; i < __raw_opCodes.length; i++) {\n                    var opCode = __raw_opCodes[i];\n                    var result = void 0;\n                    if (typeof opCode === 'string') {\n                        result = {\n                            __raw_opCode: opCode,\n                            type: 'Create Text Node',\n                            nodeIndex: __raw_opCodes[++i],\n                            text: opCode,\n                        };\n                    }\n                    if (typeof opCode === 'number') {\n                        switch (opCode & 7 /* MASK_OPCODE */) {\n                            case 1 /* AppendChild */:\n                                var destinationNodeIndex = opCode >>> 17 /* SHIFT_PARENT */;\n                                result = new I18NDebugItem(opCode, __lView, destinationNodeIndex, 'AppendChild');\n                                break;\n                            case 0 /* Select */:\n                                var nodeIndex = opCode >>> 3 /* SHIFT_REF */;\n                                result = new I18NDebugItem(opCode, __lView, nodeIndex, 'Select');\n                                break;\n                            case 5 /* ElementEnd */:\n                                var elementIndex = opCode >>> 3 /* SHIFT_REF */;\n                                result = new I18NDebugItem(opCode, __lView, elementIndex, 'ElementEnd');\n                                break;\n                            case 4 /* Attr */:\n                                elementIndex = opCode >>> 3 /* SHIFT_REF */;\n                                result = new I18NDebugItem(opCode, __lView, elementIndex, 'Attr');\n                                result['attrName'] = __raw_opCodes[++i];\n                                result['attrValue'] = __raw_opCodes[++i];\n                                break;\n                        }\n                    }\n                    if (!result) {\n                        switch (opCode) {\n                            case COMMENT_MARKER:\n                                result = {\n                                    __raw_opCode: opCode,\n                                    type: 'COMMENT_MARKER',\n                                    commentValue: __raw_opCodes[++i],\n                                    nodeIndex: __raw_opCodes[++i],\n                                };\n                                break;\n                            case ELEMENT_MARKER:\n                                result = {\n                                    __raw_opCode: opCode,\n                                    type: 'ELEMENT_MARKER',\n                                };\n                                break;\n                        }\n                    }\n                    if (!result) {\n                        result = {\n                            __raw_opCode: opCode,\n                            type: 'Unknown Op Code',\n                            code: opCode,\n                        };\n                    }\n                    results.push(result);\n                }\n                return results;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return I18nMutateOpCodesDebug;\n    }());\n    var I18nUpdateOpCodesDebug = /** @class */ (function () {\n        function I18nUpdateOpCodesDebug(__raw_opCodes, icus, __lView) {\n            this.__raw_opCodes = __raw_opCodes;\n            this.icus = icus;\n            this.__lView = __lView;\n        }\n        Object.defineProperty(I18nUpdateOpCodesDebug.prototype, \"operations\", {\n            /**\n             * A list of operation information about how the OpCodes will act on the view.\n             */\n            get: function () {\n                var _a = this, __lView = _a.__lView, __raw_opCodes = _a.__raw_opCodes, icus = _a.icus;\n                var results = [];\n                for (var i = 0; i < __raw_opCodes.length; i++) {\n                    // bit code to check if we should apply the next update\n                    var checkBit = __raw_opCodes[i];\n                    // Number of opCodes to skip until next set of update codes\n                    var skipCodes = __raw_opCodes[++i];\n                    var value = '';\n                    for (var j = i + 1; j <= (i + skipCodes); j++) {\n                        var opCode = __raw_opCodes[j];\n                        if (typeof opCode === 'string') {\n                            value += opCode;\n                        }\n                        else if (typeof opCode == 'number') {\n                            if (opCode < 0) {\n                                // It's a binding index whose value is negative\n                                // We cannot know the value of the binding so we only show the index\n                                value += \"\\uFFFD\" + (-opCode - 1) + \"\\uFFFD\";\n                            }\n                            else {\n                                var nodeIndex = opCode >>> 2 /* SHIFT_REF */;\n                                var tIcuIndex = void 0;\n                                var tIcu = void 0;\n                                switch (opCode & 3 /* MASK_OPCODE */) {\n                                    case 1 /* Attr */:\n                                        var attrName = __raw_opCodes[++j];\n                                        var sanitizeFn = __raw_opCodes[++j];\n                                        results.push({\n                                            __raw_opCode: opCode,\n                                            checkBit: checkBit,\n                                            type: 'Attr',\n                                            attrValue: value, attrName: attrName, sanitizeFn: sanitizeFn,\n                                        });\n                                        break;\n                                    case 0 /* Text */:\n                                        results.push({\n                                            __raw_opCode: opCode,\n                                            checkBit: checkBit,\n                                            type: 'Text', nodeIndex: nodeIndex,\n                                            text: value,\n                                        });\n                                        break;\n                                    case 2 /* IcuSwitch */:\n                                        tIcuIndex = __raw_opCodes[++j];\n                                        tIcu = icus[tIcuIndex];\n                                        var result = new I18NDebugItem(opCode, __lView, nodeIndex, 'IcuSwitch');\n                                        result['tIcuIndex'] = tIcuIndex;\n                                        result['checkBit'] = checkBit;\n                                        result['mainBinding'] = value;\n                                        result['tIcu'] = tIcu;\n                                        results.push(result);\n                                        break;\n                                    case 3 /* IcuUpdate */:\n                                        tIcuIndex = __raw_opCodes[++j];\n                                        tIcu = icus[tIcuIndex];\n                                        result = new I18NDebugItem(opCode, __lView, nodeIndex, 'IcuUpdate');\n                                        result['tIcuIndex'] = tIcuIndex;\n                                        result['checkBit'] = checkBit;\n                                        result['tIcu'] = tIcu;\n                                        results.push(result);\n                                        break;\n                                }\n                            }\n                        }\n                    }\n                    i += skipCodes;\n                }\n                return results;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return I18nUpdateOpCodesDebug;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Selects an element for later binding instructions.\n     *\n     * Used in conjunction with instructions like {@link property} to act on elements with specified\n     * indices, for example those created with {@link element} or {@link elementStart}.\n     *\n     * ```ts\n     * (rf: RenderFlags, ctx: any) => {\n     *   if (rf & 1) {\n     *     element(0, 'div');\n     *   }\n     *   if (rf & 2) {\n     *     select(0); // Select the <div/> created above.\n     *     property('title', 'test');\n     *   }\n     *  }\n     * ```\n     * @param index the index of the item to act on with the following instructions\n     *\n     * @codeGenApi\n     */\n    function ɵɵselect(index) {\n        ngDevMode && assertGreaterThan(index, -1, 'Invalid index');\n        ngDevMode &&\n            assertLessThan(index, getLView().length - HEADER_OFFSET, 'Should be within range for the view data');\n        var lView = getLView();\n        selectInternal(lView, index);\n    }\n    function selectInternal(lView, index) {\n        // Flush the initial hooks for elements in the view that have been added up to this point.\n        executePreOrderHooks(lView, lView[TVIEW], getCheckNoChangesMode(), index);\n        // We must set the selected index *after* running the hooks, because hooks may have side-effects\n        // that cause other template functions to run, thus updating the selected index, which is global\n        // state. If we run `setSelectedIndex` *before* we run the hooks, in some cases the selected index\n        // will be altered by the time we leave the `ɵɵselect` instruction.\n        setSelectedIndex(index);\n    }\n\n    /**\n     * A permanent marker promise which signifies that the current CD tree is\n     * clean.\n     */\n    var _CLEAN_PROMISE = (function () { return Promise.resolve(null); })();\n    /**\n     * Refreshes the view, executing the following steps in that order:\n     * triggers init hooks, refreshes dynamic embedded views, triggers content hooks, sets host\n     * bindings, refreshes child components.\n     * Note: view hooks are triggered later when leaving the view.\n     */\n    function refreshDescendantViews(lView) {\n        var tView = lView[TVIEW];\n        var creationMode = isCreationMode(lView);\n        // This needs to be set before children are processed to support recursive components\n        tView.firstTemplatePass = false;\n        // Resetting the bindingIndex of the current LView as the next steps may trigger change detection.\n        lView[BINDING_INDEX] = tView.bindingStartIndex;\n        // If this is a creation pass, we should not call lifecycle hooks or evaluate bindings.\n        // This will be done in the update pass.\n        if (!creationMode) {\n            var checkNoChangesMode = getCheckNoChangesMode();\n            executePreOrderHooks(lView, tView, checkNoChangesMode, undefined);\n            refreshDynamicEmbeddedViews(lView);\n            // Content query results must be refreshed before content hooks are called.\n            refreshContentQueries(tView, lView);\n            resetPreOrderHookFlags(lView);\n            executeHooks(lView, tView.contentHooks, tView.contentCheckHooks, checkNoChangesMode, 1 /* AfterContentInitHooksToBeRun */, undefined);\n            setHostBindings(tView, lView);\n        }\n        // We resolve content queries specifically marked as `static` in creation mode. Dynamic\n        // content queries are resolved during change detection (i.e. update mode), after embedded\n        // views are refreshed (see block above).\n        if (creationMode && tView.staticContentQueries) {\n            refreshContentQueries(tView, lView);\n        }\n        refreshChildComponents(tView.components);\n    }\n    /** Sets the host bindings for the current view. */\n    function setHostBindings(tView, viewData) {\n        var selectedIndex = getSelectedIndex();\n        try {\n            if (tView.expandoInstructions) {\n                var bindingRootIndex = viewData[BINDING_INDEX] = tView.expandoStartIndex;\n                setBindingRoot(bindingRootIndex);\n                var currentDirectiveIndex = -1;\n                var currentElementIndex = -1;\n                for (var i = 0; i < tView.expandoInstructions.length; i++) {\n                    var instruction = tView.expandoInstructions[i];\n                    if (typeof instruction === 'number') {\n                        if (instruction <= 0) {\n                            // Negative numbers mean that we are starting new EXPANDO block and need to update\n                            // the current element and directive index.\n                            currentElementIndex = -instruction;\n                            setActiveHostElement(currentElementIndex);\n                            // Injector block and providers are taken into account.\n                            var providerCount = tView.expandoInstructions[++i];\n                            bindingRootIndex += INJECTOR_BLOOM_PARENT_SIZE + providerCount;\n                            currentDirectiveIndex = bindingRootIndex;\n                        }\n                        else {\n                            // This is either the injector size (so the binding root can skip over directives\n                            // and get to the first set of host bindings on this node) or the host var count\n                            // (to get to the next set of host bindings on this node).\n                            bindingRootIndex += instruction;\n                        }\n                        setBindingRoot(bindingRootIndex);\n                    }\n                    else {\n                        // If it's not a number, it's a host binding function that needs to be executed.\n                        if (instruction !== null) {\n                            viewData[BINDING_INDEX] = bindingRootIndex;\n                            var hostCtx = unwrapRNode(viewData[currentDirectiveIndex]);\n                            instruction(2 /* Update */, hostCtx, currentElementIndex);\n                            // Each directive gets a uniqueId value that is the same for both\n                            // create and update calls when the hostBindings function is called. The\n                            // directive uniqueId is not set anywhere--it is just incremented between\n                            // each hostBindings call and is useful for helping instruction code\n                            // uniquely determine which directive is currently active when executed.\n                            incrementActiveDirectiveId();\n                        }\n                        currentDirectiveIndex++;\n                    }\n                }\n            }\n        }\n        finally {\n            setActiveHostElement(selectedIndex);\n        }\n    }\n    /** Refreshes content queries for all directives in the given view. */\n    function refreshContentQueries(tView, lView) {\n        if (tView.contentQueries != null) {\n            setCurrentQueryIndex(0);\n            for (var i = 0; i < tView.contentQueries.length; i++) {\n                var directiveDefIdx = tView.contentQueries[i];\n                var directiveDef = tView.data[directiveDefIdx];\n                ngDevMode &&\n                    assertDefined(directiveDef.contentQueries, 'contentQueries function should be defined');\n                directiveDef.contentQueries(2 /* Update */, lView[directiveDefIdx], directiveDefIdx);\n            }\n        }\n    }\n    /** Refreshes child components in the current view. */\n    function refreshChildComponents(components) {\n        if (components != null) {\n            for (var i = 0; i < components.length; i++) {\n                componentRefresh(components[i]);\n            }\n        }\n    }\n    /**\n     * Creates a native element from a tag name, using a renderer.\n     * @param name the tag name\n     * @param overriddenRenderer Optional A renderer to override the default one\n     * @returns the element created\n     */\n    function elementCreate(name, overriddenRenderer) {\n        var native;\n        var rendererToUse = overriddenRenderer || getLView()[RENDERER];\n        var namespace = getNamespace();\n        if (isProceduralRenderer(rendererToUse)) {\n            native = rendererToUse.createElement(name, namespace);\n        }\n        else {\n            if (namespace === null) {\n                native = rendererToUse.createElement(name);\n            }\n            else {\n                native = rendererToUse.createElementNS(namespace, name);\n            }\n        }\n        return native;\n    }\n    function createLView(parentLView, tView, context, flags, host, tHostNode, rendererFactory, renderer, sanitizer, injector) {\n        var lView = ngDevMode ? cloneToLView(tView.blueprint) : tView.blueprint.slice();\n        lView[HOST] = host;\n        lView[FLAGS] = flags | 4 /* CreationMode */ | 128 /* Attached */ | 8 /* FirstLViewPass */;\n        resetPreOrderHookFlags(lView);\n        lView[PARENT] = lView[DECLARATION_VIEW] = parentLView;\n        lView[CONTEXT] = context;\n        lView[RENDERER_FACTORY] = (rendererFactory || parentLView && parentLView[RENDERER_FACTORY]);\n        ngDevMode && assertDefined(lView[RENDERER_FACTORY], 'RendererFactory is required');\n        lView[RENDERER] = (renderer || parentLView && parentLView[RENDERER]);\n        ngDevMode && assertDefined(lView[RENDERER], 'Renderer is required');\n        lView[SANITIZER] = sanitizer || parentLView && parentLView[SANITIZER] || null;\n        lView[INJECTOR$1] = injector || parentLView && parentLView[INJECTOR$1] || null;\n        lView[T_HOST] = tHostNode;\n        ngDevMode && attachLViewDebug(lView);\n        return lView;\n    }\n    function getOrCreateTNode(tView, tHostNode, index, type, name, attrs) {\n        // Keep this function short, so that the VM will inline it.\n        var adjustedIndex = index + HEADER_OFFSET;\n        var tNode = tView.data[adjustedIndex] ||\n            createTNodeAtIndex(tView, tHostNode, adjustedIndex, type, name, attrs, index);\n        setPreviousOrParentTNode(tNode, true);\n        return tNode;\n    }\n    function createTNodeAtIndex(tView, tHostNode, adjustedIndex, type, name, attrs, index) {\n        var previousOrParentTNode = getPreviousOrParentTNode();\n        var isParent = getIsParent();\n        var parent = isParent ? previousOrParentTNode : previousOrParentTNode && previousOrParentTNode.parent;\n        // Parents cannot cross component boundaries because components will be used in multiple places,\n        // so it's only set if the view is the same.\n        var parentInSameView = parent && parent !== tHostNode;\n        var tParentNode = parentInSameView ? parent : null;\n        var tNode = tView.data[adjustedIndex] =\n            createTNode(tParentNode, type, adjustedIndex, name, attrs);\n        // The first node is not always the one at index 0, in case of i18n, index 0 can be the\n        // instruction `i18nStart` and the first node has the index 1 or more\n        if (index === 0 || !tView.firstChild) {\n            tView.firstChild = tNode;\n        }\n        // Now link ourselves into the tree.\n        if (previousOrParentTNode) {\n            if (isParent && previousOrParentTNode.child == null &&\n                (tNode.parent !== null || previousOrParentTNode.type === 2 /* View */)) {\n                // We are in the same view, which means we are adding content node to the parent view.\n                previousOrParentTNode.child = tNode;\n            }\n            else if (!isParent) {\n                previousOrParentTNode.next = tNode;\n            }\n        }\n        return tNode;\n    }\n    function assignTViewNodeToLView(tView, tParentNode, index, lView) {\n        // View nodes are not stored in data because they can be added / removed at runtime (which\n        // would cause indices to change). Their TNodes are instead stored in tView.node.\n        var tNode = tView.node;\n        if (tNode == null) {\n            ngDevMode && tParentNode &&\n                assertNodeOfPossibleTypes(tParentNode, 3 /* Element */, 0 /* Container */);\n            tView.node = tNode = createTNode(tParentNode, //\n            2 /* View */, index, null, null);\n        }\n        return lView[T_HOST] = tNode;\n    }\n    /**\n     * When elements are created dynamically after a view blueprint is created (e.g. through\n     * i18nApply() or ComponentFactory.create), we need to adjust the blueprint for future\n     * template passes.\n     */\n    function allocExpando(view, numSlotsToAlloc) {\n        var tView = view[TVIEW];\n        if (tView.firstTemplatePass) {\n            for (var i = 0; i < numSlotsToAlloc; i++) {\n                tView.blueprint.push(null);\n                tView.data.push(null);\n                view.push(null);\n            }\n            // We should only increment the expando start index if there aren't already directives\n            // and injectors saved in the \"expando\" section\n            if (!tView.expandoInstructions) {\n                tView.expandoStartIndex += numSlotsToAlloc;\n            }\n            else {\n                // Since we're adding the dynamic nodes into the expando section, we need to let the host\n                // bindings know that they should skip x slots\n                tView.expandoInstructions.push(numSlotsToAlloc);\n            }\n        }\n    }\n    //////////////////////////\n    //// Render\n    //////////////////////////\n    /**\n     * Used for creating the LViewNode of a dynamic embedded view,\n     * either through ViewContainerRef.createEmbeddedView() or TemplateRef.createEmbeddedView().\n     * Such lViewNode will then be renderer with renderEmbeddedTemplate() (see below).\n     */\n    function createEmbeddedViewAndNode(tView, context, declarationView, queries, injectorIndex) {\n        var _isParent = getIsParent();\n        var _previousOrParentTNode = getPreviousOrParentTNode();\n        setPreviousOrParentTNode(null, true);\n        var lView = createLView(declarationView, tView, context, 16 /* CheckAlways */, null, null);\n        lView[DECLARATION_VIEW] = declarationView;\n        if (queries) {\n            lView[QUERIES] = queries.createView();\n        }\n        assignTViewNodeToLView(tView, null, -1, lView);\n        if (tView.firstTemplatePass) {\n            tView.node.injectorIndex = injectorIndex;\n        }\n        setPreviousOrParentTNode(_previousOrParentTNode, _isParent);\n        return lView;\n    }\n    /**\n     * Used for rendering embedded views (e.g. dynamically created views)\n     *\n     * Dynamically created views must store/retrieve their TViews differently from component views\n     * because their template functions are nested in the template functions of their hosts, creating\n     * closures. If their host template happens to be an embedded template in a loop (e.g. ngFor\n     * inside\n     * an ngFor), the nesting would mean we'd have multiple instances of the template function, so we\n     * can't store TViews in the template function itself (as we do for comps). Instead, we store the\n     * TView for dynamically created views on their host TNode, which only has one instance.\n     */\n    function renderEmbeddedTemplate(viewToRender, tView, context) {\n        var _isParent = getIsParent();\n        var _previousOrParentTNode = getPreviousOrParentTNode();\n        var oldView;\n        if (viewToRender[FLAGS] & 512 /* IsRoot */) {\n            // This is a root view inside the view tree\n            tickRootContext(getRootContext(viewToRender));\n        }\n        else {\n            try {\n                setPreviousOrParentTNode(null, true);\n                oldView = enterView(viewToRender, viewToRender[T_HOST]);\n                resetPreOrderHookFlags(viewToRender);\n                executeTemplate(viewToRender, tView.template, getRenderFlags(viewToRender), context);\n                // This must be set to false immediately after the first creation run because in an\n                // ngFor loop, all the views will be created together before update mode runs and turns\n                // off firstTemplatePass. If we don't set it here, instances will perform directive\n                // matching, etc again and again.\n                viewToRender[TVIEW].firstTemplatePass = false;\n                refreshDescendantViews(viewToRender);\n            }\n            finally {\n                leaveView(oldView);\n                setPreviousOrParentTNode(_previousOrParentTNode, _isParent);\n            }\n        }\n    }\n    function renderComponentOrTemplate(hostView, context, templateFn) {\n        var rendererFactory = hostView[RENDERER_FACTORY];\n        var oldView = enterView(hostView, hostView[T_HOST]);\n        var normalExecutionPath = !getCheckNoChangesMode();\n        var creationModeIsActive = isCreationMode(hostView);\n        try {\n            if (normalExecutionPath && !creationModeIsActive && rendererFactory.begin) {\n                rendererFactory.begin();\n            }\n            if (creationModeIsActive) {\n                // creation mode pass\n                templateFn && executeTemplate(hostView, templateFn, 1 /* Create */, context);\n                refreshDescendantViews(hostView);\n                hostView[FLAGS] &= ~4 /* CreationMode */;\n            }\n            // update mode pass\n            resetPreOrderHookFlags(hostView);\n            templateFn && executeTemplate(hostView, templateFn, 2 /* Update */, context);\n            refreshDescendantViews(hostView);\n        }\n        finally {\n            if (normalExecutionPath && !creationModeIsActive && rendererFactory.end) {\n                rendererFactory.end();\n            }\n            leaveView(oldView);\n        }\n    }\n    function executeTemplate(lView, templateFn, rf, context) {\n        ɵɵnamespaceHTML();\n        var prevSelectedIndex = getSelectedIndex();\n        try {\n            setActiveHostElement(null);\n            if (rf & 2 /* Update */) {\n                // When we're updating, have an inherent ɵɵselect(0) so we don't have to generate that\n                // instruction for most update blocks\n                selectInternal(lView, 0);\n            }\n            templateFn(rf, context);\n        }\n        finally {\n            setSelectedIndex(prevSelectedIndex);\n        }\n    }\n    /**\n     * This function returns the default configuration of rendering flags depending on when the\n     * template is in creation mode or update mode. Update block and create block are\n     * always run separately.\n     */\n    function getRenderFlags(view) {\n        return isCreationMode(view) ? 1 /* Create */ : 2 /* Update */;\n    }\n    //////////////////////////\n    //// Element\n    //////////////////////////\n    /**\n     * Appropriately sets `stylingTemplate` on a TNode\n     *\n     * Does not apply styles to DOM nodes\n     *\n     * @param tNode The node whose `stylingTemplate` to set\n     * @param attrs The attribute array source to set the attributes from\n     * @param attrsStartIndex Optional start index to start processing the `attrs` from\n     */\n    function setNodeStylingTemplate(tView, tNode, attrs, attrsStartIndex) {\n        if (tView.firstTemplatePass && !tNode.stylingTemplate) {\n            var stylingAttrsStartIndex = attrsStylingIndexOf(attrs, attrsStartIndex);\n            if (stylingAttrsStartIndex >= 0) {\n                tNode.stylingTemplate = initializeStaticContext(attrs, stylingAttrsStartIndex);\n            }\n        }\n    }\n    function executeContentQueries(tView, tNode, lView) {\n        if (isContentQueryHost(tNode)) {\n            var start = tNode.directiveStart;\n            var end = tNode.directiveEnd;\n            for (var directiveIndex = start; directiveIndex < end; directiveIndex++) {\n                var def = tView.data[directiveIndex];\n                if (def.contentQueries) {\n                    def.contentQueries(1 /* Create */, lView[directiveIndex], directiveIndex);\n                }\n            }\n        }\n    }\n    /**\n     * Creates directive instances and populates local refs.\n     *\n     * @param localRefs Local refs of the node in question\n     * @param localRefExtractor mapping function that extracts local ref value from TNode\n     */\n    function createDirectivesAndLocals(tView, lView, localRefs, localRefExtractor) {\n        if (localRefExtractor === void 0) { localRefExtractor = getNativeByTNode; }\n        if (!getBindingsEnabled())\n            return;\n        var previousOrParentTNode = getPreviousOrParentTNode();\n        if (tView.firstTemplatePass) {\n            ngDevMode && ngDevMode.firstTemplatePass++;\n            resolveDirectives(tView, lView, findDirectiveMatches(tView, lView, previousOrParentTNode), previousOrParentTNode, localRefs || null);\n        }\n        instantiateAllDirectives(tView, lView, previousOrParentTNode);\n        invokeDirectivesHostBindings(tView, lView, previousOrParentTNode);\n        saveResolvedLocalsInData(lView, previousOrParentTNode, localRefExtractor);\n        setActiveHostElement(null);\n    }\n    /**\n     * Takes a list of local names and indices and pushes the resolved local variable values\n     * to LView in the same order as they are loaded in the template with load().\n     */\n    function saveResolvedLocalsInData(viewData, tNode, localRefExtractor) {\n        var localNames = tNode.localNames;\n        if (localNames) {\n            var localIndex = tNode.index + 1;\n            for (var i = 0; i < localNames.length; i += 2) {\n                var index = localNames[i + 1];\n                var value = index === -1 ?\n                    localRefExtractor(tNode, viewData) :\n                    viewData[index];\n                viewData[localIndex++] = value;\n            }\n        }\n    }\n    /**\n     * Gets TView from a template function or creates a new TView\n     * if it doesn't already exist.\n     *\n     * @param def ComponentDef\n     * @returns TView\n     */\n    function getOrCreateTView(def) {\n        return def.tView || (def.tView = createTView(-1, def.template, def.consts, def.vars, def.directiveDefs, def.pipeDefs, def.viewQuery, def.schemas));\n    }\n    /**\n     * Creates a TView instance\n     *\n     * @param viewIndex The viewBlockId for inline views, or -1 if it's a component/dynamic\n     * @param templateFn Template function\n     * @param consts The number of nodes, local refs, and pipes in this template\n     * @param directives Registry of directives for this view\n     * @param pipes Registry of pipes for this view\n     * @param viewQuery View queries for this view\n     * @param schemas Schemas for this view\n     */\n    function createTView(viewIndex, templateFn, consts, vars, directives, pipes, viewQuery, schemas) {\n        ngDevMode && ngDevMode.tView++;\n        var bindingStartIndex = HEADER_OFFSET + consts;\n        // This length does not yet contain host bindings from child directives because at this point,\n        // we don't know which directives are active on this template. As soon as a directive is matched\n        // that has a host binding, we will update the blueprint with that def's hostVars count.\n        var initialViewLength = bindingStartIndex + vars;\n        var blueprint = createViewBlueprint(bindingStartIndex, initialViewLength);\n        return blueprint[TVIEW] = ngDevMode ?\n            new TViewConstructor(viewIndex, // id: number,\n            blueprint, // blueprint: LView,\n            templateFn, // template: ComponentTemplate<{}>|null,\n            viewQuery, // viewQuery: ViewQueriesFunction<{}>|null,\n            null, // node: TViewNode|TElementNode|null,\n            cloneToTViewData(blueprint).fill(null, bindingStartIndex), // data: TData,\n            bindingStartIndex, // bindingStartIndex: number,\n            initialViewLength, // viewQueryStartIndex: number,\n            initialViewLength, // expandoStartIndex: number,\n            null, // expandoInstructions: ExpandoInstructions|null,\n            true, // firstTemplatePass: boolean,\n            false, // staticViewQueries: boolean,\n            false, // staticContentQueries: boolean,\n            null, // preOrderHooks: HookData|null,\n            null, // preOrderCheckHooks: HookData|null,\n            null, // contentHooks: HookData|null,\n            null, // contentCheckHooks: HookData|null,\n            null, // viewHooks: HookData|null,\n            null, // viewCheckHooks: HookData|null,\n            null, // destroyHooks: HookData|null,\n            null, // cleanup: any[]|null,\n            null, // contentQueries: number[]|null,\n            null, // components: number[]|null,\n            typeof directives === 'function' ?\n                directives() :\n                directives, // directiveRegistry: DirectiveDefList|null,\n            typeof pipes === 'function' ? pipes() : pipes, // pipeRegistry: PipeDefList|null,\n            null, // firstChild: TNode|null,\n            schemas) :\n            {\n                id: viewIndex,\n                blueprint: blueprint,\n                template: templateFn,\n                viewQuery: viewQuery,\n                node: null,\n                data: blueprint.slice().fill(null, bindingStartIndex),\n                bindingStartIndex: bindingStartIndex,\n                viewQueryStartIndex: initialViewLength,\n                expandoStartIndex: initialViewLength,\n                expandoInstructions: null,\n                firstTemplatePass: true,\n                staticViewQueries: false,\n                staticContentQueries: false,\n                preOrderHooks: null,\n                preOrderCheckHooks: null,\n                contentHooks: null,\n                contentCheckHooks: null,\n                viewHooks: null,\n                viewCheckHooks: null,\n                destroyHooks: null,\n                cleanup: null,\n                contentQueries: null,\n                components: null,\n                directiveRegistry: typeof directives === 'function' ? directives() : directives,\n                pipeRegistry: typeof pipes === 'function' ? pipes() : pipes,\n                firstChild: null,\n                schemas: schemas,\n            };\n    }\n    function createViewBlueprint(bindingStartIndex, initialViewLength) {\n        var blueprint = new (ngDevMode ? LViewBlueprint : Array)(initialViewLength)\n            .fill(null, 0, bindingStartIndex)\n            .fill(NO_CHANGE, bindingStartIndex);\n        blueprint[BINDING_INDEX] = bindingStartIndex;\n        return blueprint;\n    }\n    function createError(text, token) {\n        return new Error(\"Renderer: \" + text + \" [\" + stringifyForError(token) + \"]\");\n    }\n    /**\n     * Locates the host native element, used for bootstrapping existing nodes into rendering pipeline.\n     *\n     * @param elementOrSelector Render element or CSS selector to locate the element.\n     */\n    function locateHostElement(factory, elementOrSelector) {\n        var defaultRenderer = factory.createRenderer(null, null);\n        var rNode = typeof elementOrSelector === 'string' ?\n            (isProceduralRenderer(defaultRenderer) ?\n                defaultRenderer.selectRootElement(elementOrSelector) :\n                defaultRenderer.querySelector(elementOrSelector)) :\n            elementOrSelector;\n        if (ngDevMode && !rNode) {\n            if (typeof elementOrSelector === 'string') {\n                throw createError('Host node with selector not found:', elementOrSelector);\n            }\n            else {\n                throw createError('Host node is required:', elementOrSelector);\n            }\n        }\n        return rNode;\n    }\n    /**\n     * Saves context for this cleanup function in LView.cleanupInstances.\n     *\n     * On the first template pass, saves in TView:\n     * - Cleanup function\n     * - Index of context we just saved in LView.cleanupInstances\n     */\n    function storeCleanupWithContext(lView, context, cleanupFn) {\n        var lCleanup = getCleanup(lView);\n        lCleanup.push(context);\n        if (lView[TVIEW].firstTemplatePass) {\n            getTViewCleanup(lView).push(cleanupFn, lCleanup.length - 1);\n        }\n    }\n    /**\n     * Saves the cleanup function itself in LView.cleanupInstances.\n     *\n     * This is necessary for functions that are wrapped with their contexts, like in renderer2\n     * listeners.\n     *\n     * On the first template pass, the index of the cleanup function is saved in TView.\n     */\n    function storeCleanupFn(view, cleanupFn) {\n        getCleanup(view).push(cleanupFn);\n        if (view[TVIEW].firstTemplatePass) {\n            getTViewCleanup(view).push(view[CLEANUP].length - 1, null);\n        }\n    }\n    /**\n     * Constructs a TNode object from the arguments.\n     *\n     * @param type The type of the node\n     * @param adjustedIndex The index of the TNode in TView.data, adjusted for HEADER_OFFSET\n     * @param tagName The tag name of the node\n     * @param attrs The attributes defined on this node\n     * @param tViews Any TViews attached to this node\n     * @returns the TNode object\n     */\n    function createTNode(tParent, type, adjustedIndex, tagName, attrs) {\n        ngDevMode && ngDevMode.tNode++;\n        return {\n            type: type,\n            index: adjustedIndex,\n            injectorIndex: tParent ? tParent.injectorIndex : -1,\n            directiveStart: -1,\n            directiveEnd: -1,\n            propertyMetadataStartIndex: -1,\n            propertyMetadataEndIndex: -1,\n            flags: 0,\n            providerIndexes: 0,\n            tagName: tagName,\n            attrs: attrs,\n            localNames: null,\n            initialInputs: undefined,\n            inputs: undefined,\n            outputs: undefined,\n            tViews: null,\n            next: null,\n            projectionNext: null,\n            child: null,\n            parent: tParent,\n            stylingTemplate: null,\n            projection: null,\n            onElementCreationFns: null,\n            // TODO (matsko): rename this to `styles` once the old styling impl is gone\n            newStyles: null,\n            // TODO (matsko): rename this to `classes` once the old styling impl is gone\n            newClasses: null,\n        };\n    }\n    /**\n     * Consolidates all inputs or outputs of all directives on this logical node.\n     *\n     * @param tNode\n     * @param direction whether to consider inputs or outputs\n     * @returns PropertyAliases|null aggregate of all properties if any, `null` otherwise\n     */\n    function generatePropertyAliases(tNode, direction) {\n        var tView = getLView()[TVIEW];\n        var propStore = null;\n        var start = tNode.directiveStart;\n        var end = tNode.directiveEnd;\n        if (end > start) {\n            var isInput = direction === 0 /* Input */;\n            var defs = tView.data;\n            for (var i = start; i < end; i++) {\n                var directiveDef = defs[i];\n                var propertyAliasMap = isInput ? directiveDef.inputs : directiveDef.outputs;\n                for (var publicName in propertyAliasMap) {\n                    if (propertyAliasMap.hasOwnProperty(publicName)) {\n                        propStore = propStore || {};\n                        var internalName = propertyAliasMap[publicName];\n                        var hasProperty = propStore.hasOwnProperty(publicName);\n                        hasProperty ? propStore[publicName].push(i, publicName, internalName) :\n                            (propStore[publicName] = [i, publicName, internalName]);\n                    }\n                }\n            }\n        }\n        return propStore;\n    }\n    /**\n     * Mapping between attributes names that don't correspond to their element property names.\n     * Note: this mapping has to be kept in sync with the equally named mapping in the template\n     * type-checking machinery of ngtsc.\n     */\n    var ATTR_TO_PROP = {\n        'class': 'className',\n        'for': 'htmlFor',\n        'formaction': 'formAction',\n        'innerHtml': 'innerHTML',\n        'readonly': 'readOnly',\n        'tabindex': 'tabIndex',\n    };\n    function elementPropertyInternal(index, propName, value, sanitizer, nativeOnly, loadRendererFn) {\n        ngDevMode && assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');\n        var lView = getLView();\n        var element = getNativeByIndex(index, lView);\n        var tNode = getTNode(index, lView);\n        var inputData;\n        var dataValue;\n        if (!nativeOnly && (inputData = initializeTNodeInputs(tNode)) &&\n            (dataValue = inputData[propName])) {\n            setInputsForProperty(lView, dataValue, value);\n            if (isComponent(tNode))\n                markDirtyIfOnPush(lView, index + HEADER_OFFSET);\n            if (ngDevMode) {\n                if (tNode.type === 3 /* Element */ || tNode.type === 0 /* Container */) {\n                    /**\n                     * dataValue is an array containing runtime input or output names for the directives:\n                     * i+0: directive instance index\n                     * i+1: publicName\n                     * i+2: privateName\n                     *\n                     * e.g. [0, 'change', 'change-minified']\n                     * we want to set the reflected property with the privateName: dataValue[i+2]\n                     */\n                    for (var i = 0; i < dataValue.length; i += 3) {\n                        setNgReflectProperty(lView, element, tNode.type, dataValue[i + 2], value);\n                    }\n                }\n            }\n        }\n        else if (tNode.type === 3 /* Element */) {\n            propName = ATTR_TO_PROP[propName] || propName;\n            if (ngDevMode) {\n                validateAgainstEventProperties(propName);\n                validateAgainstUnknownProperties(lView, element, propName, tNode);\n                ngDevMode.rendererSetProperty++;\n            }\n            savePropertyDebugData(tNode, lView, propName, lView[TVIEW].data, nativeOnly);\n            var renderer = loadRendererFn ? loadRendererFn(tNode, lView) : lView[RENDERER];\n            // It is assumed that the sanitizer is only added when the compiler determines that the\n            // property\n            // is risky, so sanitization can be done without further checks.\n            value = sanitizer != null ? sanitizer(value, tNode.tagName || '', propName) : value;\n            if (isProceduralRenderer(renderer)) {\n                renderer.setProperty(element, propName, value);\n            }\n            else if (!isAnimationProp(propName)) {\n                element.setProperty ? element.setProperty(propName, value) :\n                    element[propName] = value;\n            }\n        }\n        else if (tNode.type === 0 /* Container */) {\n            // If the node is a container and the property didn't\n            // match any of the inputs or schemas we should throw.\n            if (ngDevMode && !matchingSchemas(lView, tNode.tagName)) {\n                throw createUnknownPropertyError(propName, tNode);\n            }\n        }\n    }\n    /** If node is an OnPush component, marks its LView dirty. */\n    function markDirtyIfOnPush(lView, viewIndex) {\n        ngDevMode && assertLView(lView);\n        var childComponentLView = getComponentViewByIndex(viewIndex, lView);\n        if (!(childComponentLView[FLAGS] & 16 /* CheckAlways */)) {\n            childComponentLView[FLAGS] |= 64 /* Dirty */;\n        }\n    }\n    function setNgReflectProperty(lView, element, type, attrName, value) {\n        var _a;\n        var renderer = lView[RENDERER];\n        attrName = normalizeDebugBindingName(attrName);\n        var debugValue = normalizeDebugBindingValue(value);\n        if (type === 3 /* Element */) {\n            if (value == null) {\n                isProceduralRenderer(renderer) ? renderer.removeAttribute(element, attrName) :\n                    element.removeAttribute(attrName);\n            }\n            else {\n                isProceduralRenderer(renderer) ?\n                    renderer.setAttribute(element, attrName, debugValue) :\n                    element.setAttribute(attrName, debugValue);\n            }\n        }\n        else {\n            var textContent = \"bindings=\" + JSON.stringify((_a = {}, _a[attrName] = debugValue, _a), null, 2);\n            if (isProceduralRenderer(renderer)) {\n                renderer.setValue(element, textContent);\n            }\n            else {\n                element.textContent = textContent;\n            }\n        }\n    }\n    function validateAgainstUnknownProperties(hostView, element, propName, tNode) {\n        // If the tag matches any of the schemas we shouldn't throw.\n        if (matchingSchemas(hostView, tNode.tagName)) {\n            return;\n        }\n        // If prop is not a known property of the HTML element...\n        if (!(propName in element) &&\n            // and we are in a browser context... (web worker nodes should be skipped)\n            typeof Node === 'function' && element instanceof Node &&\n            // and isn't a synthetic animation property...\n            propName[0] !== ANIMATION_PROP_PREFIX) {\n            // ... it is probably a user error and we should throw.\n            throw createUnknownPropertyError(propName, tNode);\n        }\n    }\n    function matchingSchemas(hostView, tagName) {\n        var schemas = hostView[TVIEW].schemas;\n        if (schemas !== null) {\n            for (var i = 0; i < schemas.length; i++) {\n                var schema = schemas[i];\n                if (schema === NO_ERRORS_SCHEMA ||\n                    schema === CUSTOM_ELEMENTS_SCHEMA && tagName && tagName.indexOf('-') > -1) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    /**\n    * Stores debugging data for this property binding on first template pass.\n    * This enables features like DebugElement.properties.\n    */\n    function savePropertyDebugData(tNode, lView, propName, tData, nativeOnly) {\n        var lastBindingIndex = lView[BINDING_INDEX] - 1;\n        // Bind/interpolation functions save binding metadata in the last binding index,\n        // but leave the property name blank. If the interpolation delimiter is at the 0\n        // index, we know that this is our first pass and the property name still needs to\n        // be set.\n        var bindingMetadata = tData[lastBindingIndex];\n        if (bindingMetadata[0] == INTERPOLATION_DELIMITER) {\n            tData[lastBindingIndex] = propName + bindingMetadata;\n            // We don't want to store indices for host bindings because they are stored in a\n            // different part of LView (the expando section).\n            if (!nativeOnly) {\n                if (tNode.propertyMetadataStartIndex == -1) {\n                    tNode.propertyMetadataStartIndex = lastBindingIndex;\n                }\n                tNode.propertyMetadataEndIndex = lastBindingIndex + 1;\n            }\n        }\n    }\n    /**\n    * Creates an error that should be thrown when encountering an unknown property on an element.\n    * @param propName Name of the invalid property.\n    * @param tNode Node on which we encountered the error.\n    */\n    function createUnknownPropertyError(propName, tNode) {\n        return new Error(\"Template error: Can't bind to '\" + propName + \"' since it isn't a known property of '\" + tNode.tagName + \"'.\");\n    }\n    /**\n     * Instantiate a root component.\n     */\n    function instantiateRootComponent(tView, viewData, def) {\n        var rootTNode = getPreviousOrParentTNode();\n        if (tView.firstTemplatePass) {\n            if (def.providersResolver)\n                def.providersResolver(def);\n            generateExpandoInstructionBlock(tView, rootTNode, 1);\n            baseResolveDirective(tView, viewData, def, def.factory);\n        }\n        var directive = getNodeInjectable(tView.data, viewData, viewData.length - 1, rootTNode);\n        postProcessBaseDirective(viewData, rootTNode, directive);\n        return directive;\n    }\n    /**\n     * Resolve the matched directives on a node.\n     */\n    function resolveDirectives(tView, viewData, directives, tNode, localRefs) {\n        // Please make sure to have explicit type for `exportsMap`. Inferred type triggers bug in\n        // tsickle.\n        ngDevMode && assertEqual(tView.firstTemplatePass, true, 'should run on first template pass only');\n        var exportsMap = localRefs ? { '': -1 } : null;\n        if (directives) {\n            initNodeFlags(tNode, tView.data.length, directives.length);\n            // When the same token is provided by several directives on the same node, some rules apply in\n            // the viewEngine:\n            // - viewProviders have priority over providers\n            // - the last directive in NgModule.declarations has priority over the previous one\n            // So to match these rules, the order in which providers are added in the arrays is very\n            // important.\n            for (var i = 0; i < directives.length; i++) {\n                var def = directives[i];\n                if (def.providersResolver)\n                    def.providersResolver(def);\n            }\n            generateExpandoInstructionBlock(tView, tNode, directives.length);\n            var initialPreOrderHooksLength = (tView.preOrderHooks && tView.preOrderHooks.length) || 0;\n            var initialPreOrderCheckHooksLength = (tView.preOrderCheckHooks && tView.preOrderCheckHooks.length) || 0;\n            var nodeIndex = tNode.index - HEADER_OFFSET;\n            for (var i = 0; i < directives.length; i++) {\n                var def = directives[i];\n                var directiveDefIdx = tView.data.length;\n                baseResolveDirective(tView, viewData, def, def.factory);\n                saveNameToExportMap(tView.data.length - 1, def, exportsMap);\n                // Init hooks are queued now so ngOnInit is called in host components before\n                // any projected components.\n                registerPreOrderHooks(directiveDefIdx, def, tView, nodeIndex, initialPreOrderHooksLength, initialPreOrderCheckHooksLength);\n            }\n        }\n        if (exportsMap)\n            cacheMatchingLocalNames(tNode, localRefs, exportsMap);\n    }\n    /**\n     * Instantiate all the directives that were previously resolved on the current node.\n     */\n    function instantiateAllDirectives(tView, lView, tNode) {\n        var start = tNode.directiveStart;\n        var end = tNode.directiveEnd;\n        if (!tView.firstTemplatePass && start < end) {\n            getOrCreateNodeInjectorForNode(tNode, lView);\n        }\n        for (var i = start; i < end; i++) {\n            var def = tView.data[i];\n            if (isComponentDef(def)) {\n                addComponentLogic(lView, tNode, def);\n            }\n            var directive = getNodeInjectable(tView.data, lView, i, tNode);\n            postProcessDirective(lView, directive, def, i);\n        }\n    }\n    function invokeDirectivesHostBindings(tView, viewData, tNode) {\n        var start = tNode.directiveStart;\n        var end = tNode.directiveEnd;\n        var expando = tView.expandoInstructions;\n        var firstTemplatePass = tView.firstTemplatePass;\n        var elementIndex = tNode.index - HEADER_OFFSET;\n        var selectedIndex = getSelectedIndex();\n        try {\n            setActiveHostElement(elementIndex);\n            for (var i = start; i < end; i++) {\n                var def = tView.data[i];\n                var directive = viewData[i];\n                if (def.hostBindings) {\n                    invokeHostBindingsInCreationMode(def, expando, directive, tNode, firstTemplatePass);\n                    // Each directive gets a uniqueId value that is the same for both\n                    // create and update calls when the hostBindings function is called. The\n                    // directive uniqueId is not set anywhere--it is just incremented between\n                    // each hostBindings call and is useful for helping instruction code\n                    // uniquely determine which directive is currently active when executed.\n                    incrementActiveDirectiveId();\n                }\n                else if (firstTemplatePass) {\n                    expando.push(null);\n                }\n            }\n        }\n        finally {\n            setActiveHostElement(selectedIndex);\n        }\n    }\n    function invokeHostBindingsInCreationMode(def, expando, directive, tNode, firstTemplatePass) {\n        var previousExpandoLength = expando.length;\n        setCurrentDirectiveDef(def);\n        var elementIndex = tNode.index - HEADER_OFFSET;\n        def.hostBindings(1 /* Create */, directive, elementIndex);\n        setCurrentDirectiveDef(null);\n        // `hostBindings` function may or may not contain `allocHostVars` call\n        // (e.g. it may not if it only contains host listeners), so we need to check whether\n        // `expandoInstructions` has changed and if not - we still push `hostBindings` to\n        // expando block, to make sure we execute it for DI cycle\n        if (previousExpandoLength === expando.length && firstTemplatePass) {\n            expando.push(def.hostBindings);\n        }\n    }\n    /**\n    * Generates a new block in TView.expandoInstructions for this node.\n    *\n    * Each expando block starts with the element index (turned negative so we can distinguish\n    * it from the hostVar count) and the directive count. See more in VIEW_DATA.md.\n    */\n    function generateExpandoInstructionBlock(tView, tNode, directiveCount) {\n        ngDevMode && assertEqual(tView.firstTemplatePass, true, 'Expando block should only be generated on first template pass.');\n        var elementIndex = -(tNode.index - HEADER_OFFSET);\n        var providerStartIndex = tNode.providerIndexes & 65535 /* ProvidersStartIndexMask */;\n        var providerCount = tView.data.length - providerStartIndex;\n        (tView.expandoInstructions || (tView.expandoInstructions = [])).push(elementIndex, providerCount, directiveCount);\n    }\n    /**\n     * Process a directive on the current node after its creation.\n     */\n    function postProcessDirective(viewData, directive, def, directiveDefIdx) {\n        var previousOrParentTNode = getPreviousOrParentTNode();\n        postProcessBaseDirective(viewData, previousOrParentTNode, directive);\n        ngDevMode && assertDefined(previousOrParentTNode, 'previousOrParentTNode');\n        if (previousOrParentTNode && previousOrParentTNode.attrs) {\n            setInputsFromAttrs(directiveDefIdx, directive, def, previousOrParentTNode);\n        }\n        if (viewData[TVIEW].firstTemplatePass && def.contentQueries) {\n            previousOrParentTNode.flags |= 4 /* hasContentQuery */;\n        }\n        if (isComponentDef(def)) {\n            var componentView = getComponentViewByIndex(previousOrParentTNode.index, viewData);\n            componentView[CONTEXT] = directive;\n        }\n    }\n    /**\n     * A lighter version of postProcessDirective() that is used for the root component.\n     */\n    function postProcessBaseDirective(lView, previousOrParentTNode, directive) {\n        var native = getNativeByTNode(previousOrParentTNode, lView);\n        ngDevMode && assertEqual(lView[BINDING_INDEX], lView[TVIEW].bindingStartIndex, 'directives should be created before any bindings');\n        ngDevMode && assertPreviousIsParent(getIsParent());\n        attachPatchData(directive, lView);\n        if (native) {\n            attachPatchData(native, lView);\n        }\n    }\n    /**\n    * Matches the current node against all available selectors.\n    * If a component is matched (at most one), it is returned in first position in the array.\n    */\n    function findDirectiveMatches(tView, viewData, tNode) {\n        ngDevMode && assertEqual(tView.firstTemplatePass, true, 'should run on first template pass only');\n        var registry = tView.directiveRegistry;\n        var matches = null;\n        if (registry) {\n            for (var i = 0; i < registry.length; i++) {\n                var def = registry[i];\n                if (isNodeMatchingSelectorList(tNode, def.selectors, /* isProjectionMode */ false)) {\n                    matches || (matches = ngDevMode ? new MatchesArray() : []);\n                    diPublicInInjector(getOrCreateNodeInjectorForNode(getPreviousOrParentTNode(), viewData), viewData, def.type);\n                    if (isComponentDef(def)) {\n                        if (tNode.flags & 1 /* isComponent */)\n                            throwMultipleComponentError(tNode);\n                        tNode.flags = 1 /* isComponent */;\n                        // The component is always stored first with directives after.\n                        matches.unshift(def);\n                    }\n                    else {\n                        matches.push(def);\n                    }\n                }\n            }\n        }\n        return matches;\n    }\n    /** Stores index of component's host element so it will be queued for view refresh during CD. */\n    function queueComponentIndexForCheck(previousOrParentTNode) {\n        var tView = getLView()[TVIEW];\n        ngDevMode &&\n            assertEqual(tView.firstTemplatePass, true, 'Should only be called in first template pass.');\n        (tView.components || (tView.components = ngDevMode ? new TViewComponents() : [])).push(previousOrParentTNode.index);\n    }\n    /** Caches local names and their matching directive indices for query and template lookups. */\n    function cacheMatchingLocalNames(tNode, localRefs, exportsMap) {\n        if (localRefs) {\n            var localNames = tNode.localNames =\n                ngDevMode ? new TNodeLocalNames() : [];\n            // Local names must be stored in tNode in the same order that localRefs are defined\n            // in the template to ensure the data is loaded in the same slots as their refs\n            // in the template (for template queries).\n            for (var i = 0; i < localRefs.length; i += 2) {\n                var index = exportsMap[localRefs[i + 1]];\n                if (index == null)\n                    throw new Error(\"Export of name '\" + localRefs[i + 1] + \"' not found!\");\n                localNames.push(localRefs[i], index);\n            }\n        }\n    }\n    /**\n    * Builds up an export map as directives are created, so local refs can be quickly mapped\n    * to their directive instances.\n    */\n    function saveNameToExportMap(index, def, exportsMap) {\n        if (exportsMap) {\n            if (def.exportAs) {\n                for (var i = 0; i < def.exportAs.length; i++) {\n                    exportsMap[def.exportAs[i]] = index;\n                }\n            }\n            if (def.template)\n                exportsMap[''] = index;\n        }\n    }\n    /**\n     * Initializes the flags on the current node, setting all indices to the initial index,\n     * the directive count to 0, and adding the isComponent flag.\n     * @param index the initial index\n     */\n    function initNodeFlags(tNode, index, numberOfDirectives) {\n        var flags = tNode.flags;\n        ngDevMode && assertEqual(flags === 0 || flags === 1 /* isComponent */, true, 'expected node flags to not be initialized');\n        ngDevMode && assertNotEqual(numberOfDirectives, tNode.directiveEnd - tNode.directiveStart, 'Reached the max number of directives');\n        // When the first directive is created on a node, save the index\n        tNode.flags = flags & 1 /* isComponent */;\n        tNode.directiveStart = index;\n        tNode.directiveEnd = index + numberOfDirectives;\n        tNode.providerIndexes = index;\n    }\n    function baseResolveDirective(tView, viewData, def, directiveFactory) {\n        tView.data.push(def);\n        var nodeInjectorFactory = new NodeInjectorFactory(directiveFactory, isComponentDef(def), null);\n        tView.blueprint.push(nodeInjectorFactory);\n        viewData.push(nodeInjectorFactory);\n    }\n    function addComponentLogic(lView, previousOrParentTNode, def) {\n        var native = getNativeByTNode(previousOrParentTNode, lView);\n        var tView = getOrCreateTView(def);\n        // Only component views should be added to the view tree directly. Embedded views are\n        // accessed through their containers because they may be removed / re-added later.\n        var rendererFactory = lView[RENDERER_FACTORY];\n        var componentView = addToViewTree(lView, createLView(lView, tView, null, def.onPush ? 64 /* Dirty */ : 16 /* CheckAlways */, lView[previousOrParentTNode.index], previousOrParentTNode, rendererFactory, rendererFactory.createRenderer(native, def)));\n        componentView[T_HOST] = previousOrParentTNode;\n        // Component view will always be created before any injected LContainers,\n        // so this is a regular element, wrap it with the component view\n        lView[previousOrParentTNode.index] = componentView;\n        if (lView[TVIEW].firstTemplatePass) {\n            queueComponentIndexForCheck(previousOrParentTNode);\n        }\n    }\n    function elementAttributeInternal(index, name, value, lView, sanitizer, namespace) {\n        ngDevMode && assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');\n        ngDevMode && validateAgainstEventAttributes(name);\n        var element = getNativeByIndex(index, lView);\n        var renderer = lView[RENDERER];\n        if (value == null) {\n            ngDevMode && ngDevMode.rendererRemoveAttribute++;\n            isProceduralRenderer(renderer) ? renderer.removeAttribute(element, name, namespace) :\n                element.removeAttribute(name);\n        }\n        else {\n            ngDevMode && ngDevMode.rendererSetAttribute++;\n            var tNode = getTNode(index, lView);\n            var strValue = sanitizer == null ? renderStringify(value) : sanitizer(value, tNode.tagName || '', name);\n            if (isProceduralRenderer(renderer)) {\n                renderer.setAttribute(element, name, strValue, namespace);\n            }\n            else {\n                namespace ? element.setAttributeNS(namespace, name, strValue) :\n                    element.setAttribute(name, strValue);\n            }\n        }\n    }\n    /**\n     * Sets initial input properties on directive instances from attribute data\n     *\n     * @param directiveIndex Index of the directive in directives array\n     * @param instance Instance of the directive on which to set the initial inputs\n     * @param def The directive def that contains the list of inputs\n     * @param tNode The static data for this node\n     */\n    function setInputsFromAttrs(directiveIndex, instance, def, tNode) {\n        var initialInputData = tNode.initialInputs;\n        if (initialInputData === undefined || directiveIndex >= initialInputData.length) {\n            initialInputData = generateInitialInputs(directiveIndex, def.inputs, tNode);\n        }\n        var initialInputs = initialInputData[directiveIndex];\n        if (initialInputs) {\n            var setInput = def.setInput;\n            for (var i = 0; i < initialInputs.length;) {\n                var publicName = initialInputs[i++];\n                var privateName = initialInputs[i++];\n                var value = initialInputs[i++];\n                if (setInput) {\n                    def.setInput(instance, value, publicName, privateName);\n                }\n                else {\n                    instance[privateName] = value;\n                }\n                if (ngDevMode) {\n                    var lView = getLView();\n                    var nativeElement = getNativeByTNode(tNode, lView);\n                    setNgReflectProperty(lView, nativeElement, tNode.type, privateName, value);\n                }\n            }\n        }\n    }\n    /**\n     * Generates initialInputData for a node and stores it in the template's static storage\n     * so subsequent template invocations don't have to recalculate it.\n     *\n     * initialInputData is an array containing values that need to be set as input properties\n     * for directives on this node, but only once on creation. We need this array to support\n     * the case where you set an @Input property of a directive using attribute-like syntax.\n     * e.g. if you have a `name` @Input, you can set it once like this:\n     *\n     * <my-component name=\"Bess\"></my-component>\n     *\n     * @param directiveIndex Index to store the initial input data\n     * @param inputs The list of inputs from the directive def\n     * @param tNode The static data on this node\n     */\n    function generateInitialInputs(directiveIndex, inputs, tNode) {\n        var initialInputData = tNode.initialInputs || (tNode.initialInputs = ngDevMode ? new TNodeInitialInputs() : []);\n        // Ensure that we don't create sparse arrays\n        for (var i_1 = initialInputData.length; i_1 <= directiveIndex; i_1++) {\n            initialInputData.push(null);\n        }\n        var attrs = tNode.attrs;\n        var i = 0;\n        while (i < attrs.length) {\n            var attrName = attrs[i];\n            if (attrName === 0 /* NamespaceURI */) {\n                // We do not allow inputs on namespaced attributes.\n                i += 4;\n                continue;\n            }\n            else if (attrName === 5 /* ProjectAs */) {\n                // Skip over the `ngProjectAs` value.\n                i += 2;\n                continue;\n            }\n            // If we hit any other attribute markers, we're done anyway. None of those are valid inputs.\n            if (typeof attrName === 'number')\n                break;\n            var minifiedInputName = inputs[attrName];\n            var attrValue = attrs[i + 1];\n            if (minifiedInputName !== undefined) {\n                var inputsToStore = initialInputData[directiveIndex] ||\n                    (initialInputData[directiveIndex] = ngDevMode ? new TNodeInitialData() : []);\n                inputsToStore.push(attrName, minifiedInputName, attrValue);\n            }\n            i += 2;\n        }\n        return initialInputData;\n    }\n    //////////////////////////\n    //// ViewContainer & View\n    //////////////////////////\n    // Not sure why I need to do `any` here but TS complains later.\n    var LContainerArray = ngDevMode && createNamedArrayType('LContainer');\n    /**\n     * Creates a LContainer, either from a container instruction, or for a ViewContainerRef.\n     *\n     * @param hostNative The host element for the LContainer\n     * @param hostTNode The host TNode for the LContainer\n     * @param currentView The parent view of the LContainer\n     * @param native The native comment element\n     * @param isForViewContainerRef Optional a flag indicating the ViewContainerRef case\n     * @returns LContainer\n     */\n    function createLContainer(hostNative, currentView, native, tNode, isForViewContainerRef) {\n        ngDevMode && assertDomNode(native);\n        ngDevMode && assertLView(currentView);\n        // https://jsperf.com/array-literal-vs-new-array-really\n        var lContainer = new (ngDevMode ? LContainerArray : Array)(hostNative, // host native\n        true, // Boolean `true` in this position signifies that this is an `LContainer`\n        isForViewContainerRef ? -1 : 0, // active index\n        currentView, // parent\n        null, // next\n        null, // queries\n        tNode, // t_host\n        native);\n        ngDevMode && attachLContainerDebug(lContainer);\n        return lContainer;\n    }\n    /**\n     * Goes over dynamic embedded views (ones created through ViewContainerRef APIs) and refreshes\n     * them\n     * by executing an associated template function.\n     */\n    function refreshDynamicEmbeddedViews(lView) {\n        for (var current = lView[CHILD_HEAD]; current !== null; current = current[NEXT]) {\n            // Note: current can be an LView or an LContainer instance, but here we are only interested\n            // in LContainer. We can tell it's an LContainer because its length is less than the LView\n            // header.\n            if (current[ACTIVE_INDEX] === -1 && isLContainer(current)) {\n                for (var i = CONTAINER_HEADER_OFFSET; i < current.length; i++) {\n                    var dynamicViewData = current[i];\n                    // The directives and pipes are not needed here as an existing view is only being\n                    // refreshed.\n                    ngDevMode && assertDefined(dynamicViewData[TVIEW], 'TView must be allocated');\n                    renderEmbeddedTemplate(dynamicViewData, dynamicViewData[TVIEW], dynamicViewData[CONTEXT]);\n                }\n            }\n        }\n    }\n    /////////////\n    /**\n     * Refreshes components by entering the component view and processing its bindings, queries, etc.\n     *\n     * @param adjustedElementIndex  Element index in LView[] (adjusted for HEADER_OFFSET)\n     */\n    function componentRefresh(adjustedElementIndex) {\n        var lView = getLView();\n        ngDevMode && assertDataInRange(lView, adjustedElementIndex);\n        var hostView = getComponentViewByIndex(adjustedElementIndex, lView);\n        ngDevMode && assertNodeType(lView[TVIEW].data[adjustedElementIndex], 3 /* Element */);\n        // Only components in creation mode, attached CheckAlways\n        // components or attached, dirty OnPush components should be checked\n        if ((viewAttachedToChangeDetector(hostView) || isCreationMode(lView)) &&\n            hostView[FLAGS] & (16 /* CheckAlways */ | 64 /* Dirty */)) {\n            syncViewWithBlueprint(hostView);\n            checkView(hostView, hostView[CONTEXT]);\n        }\n    }\n    /**\n     * Syncs an LView instance with its blueprint if they have gotten out of sync.\n     *\n     * Typically, blueprints and their view instances should always be in sync, so the loop here\n     * will be skipped. However, consider this case of two components side-by-side:\n     *\n     * App template:\n     * ```\n     * <comp></comp>\n     * <comp></comp>\n     * ```\n     *\n     * The following will happen:\n     * 1. App template begins processing.\n     * 2. First <comp> is matched as a component and its LView is created.\n     * 3. Second <comp> is matched as a component and its LView is created.\n     * 4. App template completes processing, so it's time to check child templates.\n     * 5. First <comp> template is checked. It has a directive, so its def is pushed to blueprint.\n     * 6. Second <comp> template is checked. Its blueprint has been updated by the first\n     * <comp> template, but its LView was created before this update, so it is out of sync.\n     *\n     * Note that embedded views inside ngFor loops will never be out of sync because these views\n     * are processed as soon as they are created.\n     *\n     * @param componentView The view to sync\n     */\n    function syncViewWithBlueprint(componentView) {\n        var componentTView = componentView[TVIEW];\n        for (var i = componentView.length; i < componentTView.blueprint.length; i++) {\n            componentView[i] = componentTView.blueprint[i];\n        }\n    }\n    /**\n     * Adds LView or LContainer to the end of the current view tree.\n     *\n     * This structure will be used to traverse through nested views to remove listeners\n     * and call onDestroy callbacks.\n     *\n     * @param lView The view where LView or LContainer should be added\n     * @param adjustedHostIndex Index of the view's host node in LView[], adjusted for header\n     * @param lViewOrLContainer The LView or LContainer to add to the view tree\n     * @returns The state passed in\n     */\n    function addToViewTree(lView, lViewOrLContainer) {\n        // TODO(benlesh/misko): This implementation is incorrect, because it always adds the LContainer\n        // to\n        // the end of the queue, which means if the developer retrieves the LContainers from RNodes out\n        // of\n        // order, the change detection will run out of order, as the act of retrieving the the\n        // LContainer\n        // from the RNode is what adds it to the queue.\n        if (lView[CHILD_HEAD]) {\n            lView[CHILD_TAIL][NEXT] = lViewOrLContainer;\n        }\n        else {\n            lView[CHILD_HEAD] = lViewOrLContainer;\n        }\n        lView[CHILD_TAIL] = lViewOrLContainer;\n        return lViewOrLContainer;\n    }\n    ///////////////////////////////\n    //// Change detection\n    ///////////////////////////////\n    /**\n     * Marks current view and all ancestors dirty.\n     *\n     * Returns the root view because it is found as a byproduct of marking the view tree\n     * dirty, and can be used by methods that consume markViewDirty() to easily schedule\n     * change detection. Otherwise, such methods would need to traverse up the view tree\n     * an additional time to get the root view and schedule a tick on it.\n     *\n     * @param lView The starting LView to mark dirty\n     * @returns the root LView\n     */\n    function markViewDirty(lView) {\n        while (lView) {\n            lView[FLAGS] |= 64 /* Dirty */;\n            var parent_1 = getLViewParent(lView);\n            // Stop traversing up as soon as you find a root view that wasn't attached to any container\n            if (isRootView(lView) && !parent_1) {\n                return lView;\n            }\n            // continue otherwise\n            lView = parent_1;\n        }\n        return null;\n    }\n    /**\n     * Used to schedule change detection on the whole application.\n     *\n     * Unlike `tick`, `scheduleTick` coalesces multiple calls into one change detection run.\n     * It is usually called indirectly by calling `markDirty` when the view needs to be\n     * re-rendered.\n     *\n     * Typically `scheduleTick` uses `requestAnimationFrame` to coalesce multiple\n     * `scheduleTick` requests. The scheduling function can be overridden in\n     * `renderComponent`'s `scheduler` option.\n     */\n    function scheduleTick(rootContext, flags) {\n        var nothingScheduled = rootContext.flags === 0 /* Empty */;\n        rootContext.flags |= flags;\n        if (nothingScheduled && rootContext.clean == _CLEAN_PROMISE) {\n            var res_1;\n            rootContext.clean = new Promise(function (r) { return res_1 = r; });\n            rootContext.scheduler(function () {\n                if (rootContext.flags & 1 /* DetectChanges */) {\n                    rootContext.flags &= ~1 /* DetectChanges */;\n                    tickRootContext(rootContext);\n                }\n                if (rootContext.flags & 2 /* FlushPlayers */) {\n                    rootContext.flags &= ~2 /* FlushPlayers */;\n                    var playerHandler = rootContext.playerHandler;\n                    if (playerHandler) {\n                        playerHandler.flushPlayers();\n                    }\n                }\n                rootContext.clean = _CLEAN_PROMISE;\n                res_1(null);\n            });\n        }\n    }\n    function tickRootContext(rootContext) {\n        for (var i = 0; i < rootContext.components.length; i++) {\n            var rootComponent = rootContext.components[i];\n            renderComponentOrTemplate(readPatchedLView(rootComponent), rootComponent);\n        }\n    }\n    function detectChangesInternal(view, context) {\n        var rendererFactory = view[RENDERER_FACTORY];\n        if (rendererFactory.begin)\n            rendererFactory.begin();\n        try {\n            if (isCreationMode(view)) {\n                checkView(view, context); // creation mode pass\n            }\n            checkView(view, context); // update mode pass\n        }\n        catch (error) {\n            handleError(view, error);\n            throw error;\n        }\n        finally {\n            if (rendererFactory.end)\n                rendererFactory.end();\n        }\n    }\n    /**\n     * Synchronously perform change detection on a root view and its components.\n     *\n     * @param lView The view which the change detection should be performed on.\n     */\n    function detectChangesInRootView(lView) {\n        tickRootContext(lView[CONTEXT]);\n    }\n    function checkNoChangesInternal(view, context) {\n        setCheckNoChangesMode(true);\n        try {\n            detectChangesInternal(view, context);\n        }\n        finally {\n            setCheckNoChangesMode(false);\n        }\n    }\n    /**\n     * Checks the change detector on a root view and its components, and throws if any changes are\n     * detected.\n     *\n     * This is used in development mode to verify that running change detection doesn't\n     * introduce other changes.\n     *\n     * @param lView The view which the change detection should be checked on.\n     */\n    function checkNoChangesInRootView(lView) {\n        setCheckNoChangesMode(true);\n        try {\n            detectChangesInRootView(lView);\n        }\n        finally {\n            setCheckNoChangesMode(false);\n        }\n    }\n    /** Checks the view of the component provided. Does not gate on dirty checks or execute doCheck.\n     */\n    function checkView(hostView, component) {\n        var hostTView = hostView[TVIEW];\n        var oldView = enterView(hostView, hostView[T_HOST]);\n        var templateFn = hostTView.template;\n        var creationMode = isCreationMode(hostView);\n        try {\n            resetPreOrderHookFlags(hostView);\n            creationMode && executeViewQueryFn(1 /* Create */, hostTView, component);\n            executeTemplate(hostView, templateFn, getRenderFlags(hostView), component);\n            refreshDescendantViews(hostView);\n            // Only check view queries again in creation mode if there are static view queries\n            if (!creationMode || hostTView.staticViewQueries) {\n                executeViewQueryFn(2 /* Update */, hostTView, component);\n            }\n        }\n        finally {\n            leaveView(oldView);\n        }\n    }\n    function executeViewQueryFn(flags, tView, component) {\n        var viewQuery = tView.viewQuery;\n        if (viewQuery) {\n            setCurrentQueryIndex(tView.viewQueryStartIndex);\n            viewQuery(flags, component);\n        }\n    }\n    ///////////////////////////////\n    //// Bindings & interpolations\n    ///////////////////////////////\n    /**\n     * Creates binding metadata for a particular binding and stores it in\n     * TView.data. These are generated in order to support DebugElement.properties.\n     *\n     * Each binding / interpolation will have one (including attribute bindings)\n     * because at the time of binding, we don't know to which instruction the binding\n     * belongs. It is always stored in TView.data at the index of the last binding\n     * value in LView (e.g. for interpolation8, it would be stored at the index of\n     * the 8th value).\n     *\n     * @param lView The LView that contains the current binding index.\n     * @param prefix The static prefix string\n     * @param suffix The static suffix string\n     *\n     * @returns Newly created binding metadata string for this binding or null\n     */\n    function storeBindingMetadata(lView, prefix, suffix) {\n        if (prefix === void 0) { prefix = ''; }\n        if (suffix === void 0) { suffix = ''; }\n        var tData = lView[TVIEW].data;\n        var lastBindingIndex = lView[BINDING_INDEX] - 1;\n        var value = INTERPOLATION_DELIMITER + prefix + INTERPOLATION_DELIMITER + suffix;\n        return tData[lastBindingIndex] == null ? (tData[lastBindingIndex] = value) : null;\n    }\n    var CLEAN_PROMISE = _CLEAN_PROMISE;\n    function initializeTNodeInputs(tNode) {\n        // If tNode.inputs is undefined, a listener has created outputs, but inputs haven't\n        // yet been checked.\n        if (tNode.inputs === undefined) {\n            // mark inputs as checked\n            tNode.inputs = generatePropertyAliases(tNode, 0 /* Input */);\n        }\n        return tNode.inputs;\n    }\n    function getCleanup(view) {\n        // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n        return view[CLEANUP] || (view[CLEANUP] = ngDevMode ? new LCleanup() : []);\n    }\n    function getTViewCleanup(view) {\n        return view[TVIEW].cleanup || (view[TVIEW].cleanup = ngDevMode ? new TCleanup() : []);\n    }\n    /**\n     * There are cases where the sub component's renderer needs to be included\n     * instead of the current renderer (see the componentSyntheticHost* instructions).\n     */\n    function loadComponentRenderer(tNode, lView) {\n        var componentLView = lView[tNode.index];\n        return componentLView[RENDERER];\n    }\n    /** Handles an error thrown in an LView. */\n    function handleError(lView, error) {\n        var injector = lView[INJECTOR$1];\n        var errorHandler = injector ? injector.get(ErrorHandler, null) : null;\n        errorHandler && errorHandler.handleError(error);\n    }\n    /**\n     * Set the inputs of directives at the current node to corresponding value.\n     *\n     * @param lView the `LView` which contains the directives.\n     * @param inputs mapping between the public \"input\" name and privately-known,\n     * possibly minified, property names to write to.\n     * @param value Value to set.\n     */\n    function setInputsForProperty(lView, inputs, value) {\n        var tView = lView[TVIEW];\n        for (var i = 0; i < inputs.length;) {\n            var index = inputs[i++];\n            var publicName = inputs[i++];\n            var privateName = inputs[i++];\n            var instance = lView[index];\n            ngDevMode && assertDataInRange(lView, index);\n            var def = tView.data[index];\n            var setInput = def.setInput;\n            if (setInput) {\n                def.setInput(instance, value, publicName, privateName);\n            }\n            else {\n                instance[privateName] = value;\n            }\n        }\n    }\n    /**\n     * Updates a text binding at a given index in a given LView.\n     */\n    function textBindingInternal(lView, index, value) {\n        ngDevMode && assertNotSame(value, NO_CHANGE, 'value should not be NO_CHANGE');\n        ngDevMode && assertDataInRange(lView, index + HEADER_OFFSET);\n        var element = getNativeByIndex(index, lView);\n        ngDevMode && assertDefined(element, 'native element should exist');\n        ngDevMode && ngDevMode.rendererSetText++;\n        var renderer = lView[RENDERER];\n        isProceduralRenderer(renderer) ? renderer.setValue(element, value) : element.textContent = value;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function applyOnCreateInstructions(tNode) {\n        // there may be some instructions that need to run in a specific\n        // order because the CREATE block in a directive runs before the\n        // CREATE block in a template. To work around this instructions\n        // can get access to the function array below and defer any code\n        // to run after the element is created.\n        var fns;\n        if (fns = tNode.onElementCreationFns) {\n            for (var i = 0; i < fns.length; i++) {\n                fns[i]();\n            }\n            tNode.onElementCreationFns = null;\n        }\n    }\n    /**\n     * Unwraps a parent injector location number to find the view offset from the current injector,\n     * then walks up the declaration view tree until the TNode of the parent injector is found.\n     *\n     * @param location The location of the parent injector, which contains the view offset\n     * @param startView The LView instance from which to start walking up the view tree\n     * @param startTNode The TNode instance of the starting element\n     * @returns The TNode of the parent injector\n     */\n    function getParentInjectorTNode(location, startView, startTNode) {\n        if (startTNode.parent && startTNode.parent.injectorIndex !== -1) {\n            // view offset is 0\n            var injectorIndex = startTNode.parent.injectorIndex;\n            var parentTNode_1 = startTNode.parent;\n            while (parentTNode_1.parent != null && injectorIndex == parentTNode_1.injectorIndex) {\n                parentTNode_1 = parentTNode_1.parent;\n            }\n            return parentTNode_1;\n        }\n        var viewOffset = getParentInjectorViewOffset(location);\n        // view offset is 1\n        var parentView = startView;\n        var parentTNode = startView[T_HOST];\n        // view offset is superior to 1\n        while (viewOffset > 1) {\n            parentView = parentView[DECLARATION_VIEW];\n            parentTNode = parentView[T_HOST];\n            viewOffset--;\n        }\n        return parentTNode;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Allocates the necessary amount of slots for host vars.\n     *\n     * @param count Amount of vars to be allocated\n     *\n     * @codeGenApi\n     */\n    function ɵɵallocHostVars(count) {\n        var lView = getLView();\n        var tView = lView[TVIEW];\n        if (!tView.firstTemplatePass)\n            return;\n        queueHostBindingForCheck(tView, getCurrentDirectiveDef(), count);\n        prefillHostVars(tView, lView, count);\n    }\n    /**\n     * Stores host binding fn and number of host vars so it will be queued for binding refresh during\n     * CD.\n     */\n    function queueHostBindingForCheck(tView, def, hostVars) {\n        ngDevMode &&\n            assertEqual(tView.firstTemplatePass, true, 'Should only be called in first template pass.');\n        var expando = tView.expandoInstructions;\n        var length = expando.length;\n        // Check whether a given `hostBindings` function already exists in expandoInstructions,\n        // which can happen in case directive definition was extended from base definition (as a part of\n        // the `InheritDefinitionFeature` logic). If we found the same `hostBindings` function in the\n        // list, we just increase the number of host vars associated with that function, but do not add it\n        // into the list again.\n        if (length >= 2 && expando[length - 2] === def.hostBindings) {\n            expando[length - 1] = expando[length - 1] + hostVars;\n        }\n        else {\n            expando.push(def.hostBindings, hostVars);\n        }\n    }\n    /**\n     * On the first template pass, we need to reserve space for host binding values\n     * after directives are matched (so all directives are saved, then bindings).\n     * Because we are updating the blueprint, we only need to do this once.\n     */\n    function prefillHostVars(tView, lView, totalHostVars) {\n        ngDevMode &&\n            assertEqual(tView.firstTemplatePass, true, 'Should only be called in first template pass.');\n        for (var i = 0; i < totalHostVars; i++) {\n            lView.push(NO_CHANGE);\n            tView.blueprint.push(NO_CHANGE);\n            tView.data.push(null);\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var _symbolIterator = null;\n    function getSymbolIterator() {\n        if (!_symbolIterator) {\n            var Symbol_1 = _global['Symbol'];\n            if (Symbol_1 && Symbol_1.iterator) {\n                _symbolIterator = Symbol_1.iterator;\n            }\n            else {\n                // es6-shim specific logic\n                var keys = Object.getOwnPropertyNames(Map.prototype);\n                for (var i = 0; i < keys.length; ++i) {\n                    var key = keys[i];\n                    if (key !== 'entries' && key !== 'size' &&\n                        Map.prototype[key] === Map.prototype['entries']) {\n                        _symbolIterator = key;\n                    }\n                }\n            }\n        }\n        return _symbolIterator;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // JS has NaN !== NaN\n    function looseIdentical(a, b) {\n        return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function devModeEqual(a, b) {\n        var isListLikeIterableA = isListLikeIterable(a);\n        var isListLikeIterableB = isListLikeIterable(b);\n        if (isListLikeIterableA && isListLikeIterableB) {\n            return areIterablesEqual(a, b, devModeEqual);\n        }\n        else {\n            var isAObject = a && (typeof a === 'object' || typeof a === 'function');\n            var isBObject = b && (typeof b === 'object' || typeof b === 'function');\n            if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {\n                return true;\n            }\n            else {\n                return looseIdentical(a, b);\n            }\n        }\n    }\n    /**\n     * Indicates that the result of a {@link Pipe} transformation has changed even though the\n     * reference has not changed.\n     *\n     * Wrapped values are unwrapped automatically during the change detection, and the unwrapped value\n     * is stored.\n     *\n     * Example:\n     *\n     * ```\n     * if (this._latestValue === this._latestReturnedValue) {\n     *    return this._latestReturnedValue;\n     *  } else {\n     *    this._latestReturnedValue = this._latestValue;\n     *    return WrappedValue.wrap(this._latestValue); // this will force update\n     *  }\n     * ```\n     *\n     * @publicApi\n     */\n    var WrappedValue = /** @class */ (function () {\n        function WrappedValue(value) {\n            this.wrapped = value;\n        }\n        /** Creates a wrapped value. */\n        WrappedValue.wrap = function (value) { return new WrappedValue(value); };\n        /**\n         * Returns the underlying value of a wrapped value.\n         * Returns the given `value` when it is not wrapped.\n         **/\n        WrappedValue.unwrap = function (value) { return WrappedValue.isWrapped(value) ? value.wrapped : value; };\n        /** Returns true if `value` is a wrapped value. */\n        WrappedValue.isWrapped = function (value) { return value instanceof WrappedValue; };\n        return WrappedValue;\n    }());\n    function isListLikeIterable(obj) {\n        if (!isJsObject(obj))\n            return false;\n        return Array.isArray(obj) ||\n            (!(obj instanceof Map) && // JS Map are iterables but return entries as [k, v]\n                getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop\n    }\n    function areIterablesEqual(a, b, comparator) {\n        var iterator1 = a[getSymbolIterator()]();\n        var iterator2 = b[getSymbolIterator()]();\n        while (true) {\n            var item1 = iterator1.next();\n            var item2 = iterator2.next();\n            if (item1.done && item2.done)\n                return true;\n            if (item1.done || item2.done)\n                return false;\n            if (!comparator(item1.value, item2.value))\n                return false;\n        }\n    }\n    function iterateListLike(obj, fn) {\n        if (Array.isArray(obj)) {\n            for (var i = 0; i < obj.length; i++) {\n                fn(obj[i]);\n            }\n        }\n        else {\n            var iterator = obj[getSymbolIterator()]();\n            var item = void 0;\n            while (!((item = iterator.next()).done)) {\n                fn(item.value);\n            }\n        }\n    }\n    function isJsObject(o) {\n        return o !== null && (typeof o === 'function' || typeof o === 'object');\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // TODO(misko): consider inlining\n    /** Updates binding and returns the value. */\n    function updateBinding(lView, bindingIndex, value) {\n        return lView[bindingIndex] = value;\n    }\n    /** Gets the current binding value. */\n    function getBinding(lView, bindingIndex) {\n        ngDevMode && assertDataInRange(lView, bindingIndex);\n        ngDevMode &&\n            assertNotSame(lView[bindingIndex], NO_CHANGE, 'Stored value should never be NO_CHANGE.');\n        return lView[bindingIndex];\n    }\n    /** Updates binding if changed, then returns whether it was updated. */\n    function bindingUpdated(lView, bindingIndex, value) {\n        ngDevMode && assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');\n        ngDevMode &&\n            assertLessThan(bindingIndex, lView.length, \"Slot should have been initialized to NO_CHANGE\");\n        var oldValue = lView[bindingIndex];\n        if (isDifferent(oldValue, value)) {\n            if (ngDevMode && getCheckNoChangesMode()) {\n                // View engine didn't report undefined values as changed on the first checkNoChanges pass\n                // (before the change detection was run).\n                var oldValueToCompare = oldValue !== NO_CHANGE ? oldValue : undefined;\n                if (!devModeEqual(oldValueToCompare, value)) {\n                    throwErrorIfNoChangesMode(oldValue === NO_CHANGE, oldValueToCompare, value);\n                }\n            }\n            lView[bindingIndex] = value;\n            return true;\n        }\n        return false;\n    }\n    /** Updates 2 bindings if changed, then returns whether either was updated. */\n    function bindingUpdated2(lView, bindingIndex, exp1, exp2) {\n        var different = bindingUpdated(lView, bindingIndex, exp1);\n        return bindingUpdated(lView, bindingIndex + 1, exp2) || different;\n    }\n    /** Updates 3 bindings if changed, then returns whether any was updated. */\n    function bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) {\n        var different = bindingUpdated2(lView, bindingIndex, exp1, exp2);\n        return bindingUpdated(lView, bindingIndex + 2, exp3) || different;\n    }\n    /** Updates 4 bindings if changed, then returns whether any was updated. */\n    function bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) {\n        var different = bindingUpdated2(lView, bindingIndex, exp1, exp2);\n        return bindingUpdated2(lView, bindingIndex + 2, exp3, exp4) || different;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Update a property on a selected element.\n     *\n     * Operates on the element selected by index via the {@link select} instruction.\n     *\n     * If the property name also exists as an input property on one of the element's directives,\n     * the component property will be set instead of the element property. This check must\n     * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled\n     *\n     * @param propName Name of property. Because it is going to DOM, this is not subject to\n     *        renaming as part of minification.\n     * @param value New value to write.\n     * @param sanitizer An optional function used to sanitize the value.\n     * @param nativeOnly Whether or not we should only set native properties and skip input check\n     * (this is necessary for host property bindings)\n     * @returns This function returns itself so that it may be chained\n     * (e.g. `property('name', ctx.name)('title', ctx.title)`)\n     *\n     * @codeGenApi\n     */\n    function ɵɵproperty(propName, value, sanitizer, nativeOnly) {\n        var index = getSelectedIndex();\n        ngDevMode && assertNotEqual(index, -1, 'selected index cannot be -1');\n        var lView = getLView();\n        var bindReconciledValue = bind(lView, value);\n        if (bindReconciledValue !== NO_CHANGE) {\n            elementPropertyInternal(index, propName, bindReconciledValue, sanitizer, nativeOnly);\n        }\n        return ɵɵproperty;\n    }\n    /**\n     * Creates a single value binding.\n     *\n     * @param lView Current view\n     * @param value Value to diff\n     */\n    function bind(lView, value) {\n        var bindingIndex = lView[BINDING_INDEX]++;\n        storeBindingMetadata(lView);\n        return bindingUpdated(lView, bindingIndex, value) ? value : NO_CHANGE;\n    }\n    /**\n     * Updates a synthetic host binding (e.g. `[@foo]`) on a component.\n     *\n     * This instruction is for compatibility purposes and is designed to ensure that a\n     * synthetic host binding (e.g. `@HostBinding('@foo')`) properly gets rendered in\n     * the component's renderer. Normally all host bindings are evaluated with the parent\n     * component's renderer, but, in the case of animation @triggers, they need to be\n     * evaluated with the sub component's renderer (because that's where the animation\n     * triggers are defined).\n     *\n     * Do not use this instruction as a replacement for `elementProperty`. This instruction\n     * only exists to ensure compatibility with the ViewEngine's host binding behavior.\n     *\n     * @param index The index of the element to update in the data array\n     * @param propName Name of property. Because it is going to DOM, this is not subject to\n     *        renaming as part of minification.\n     * @param value New value to write.\n     * @param sanitizer An optional function used to sanitize the value.\n     * @param nativeOnly Whether or not we should only set native properties and skip input check\n     * (this is necessary for host property bindings)\n     *\n     * @codeGenApi\n     */\n    function ɵɵupdateSyntheticHostBinding(propName, value, sanitizer, nativeOnly) {\n        var index = getSelectedIndex();\n        var lView = getLView();\n        // TODO(benlesh): remove bind call here.\n        var bound = bind(lView, value);\n        if (bound !== NO_CHANGE) {\n            elementPropertyInternal(index, propName, bound, sanitizer, nativeOnly, loadComponentRenderer);\n        }\n    }\n\n    /**\n     * Updates the value of or removes a bound attribute on an Element.\n     *\n     * Used in the case of `[attr.title]=\"value\"`\n     *\n     * @param name name The name of the attribute.\n     * @param value value The attribute is removed when value is `null` or `undefined`.\n     *                  Otherwise the attribute value is set to the stringified value.\n     * @param sanitizer An optional function used to sanitize the value.\n     * @param namespace Optional namespace to use when setting the attribute.\n     *\n     * @codeGenApi\n     */\n    function ɵɵattribute(name, value, sanitizer, namespace) {\n        var index = getSelectedIndex();\n        var lView = getLView();\n        // TODO(FW-1340): Refactor to remove the use of other instructions here.\n        var bound = bind(lView, value);\n        if (bound !== NO_CHANGE) {\n            return elementAttributeInternal(index, name, bound, lView, sanitizer, namespace);\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Create interpolation bindings with a variable number of expressions.\n     *\n     * If there are 1 to 8 expressions `interpolation1()` to `interpolation8()` should be used instead.\n     * Those are faster because there is no need to create an array of expressions and iterate over it.\n     *\n     * `values`:\n     * - has static text at even indexes,\n     * - has evaluated expressions at odd indexes.\n     *\n     * Returns the concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n     *\n     * @codeGenApi\n     */\n    function ɵɵinterpolationV(values) {\n        ngDevMode && assertLessThan(2, values.length, 'should have at least 3 values');\n        ngDevMode && assertEqual(values.length % 2, 1, 'should have an odd number of values');\n        var isBindingUpdated = false;\n        var lView = getLView();\n        var tData = lView[TVIEW].data;\n        var bindingIndex = lView[BINDING_INDEX];\n        if (tData[bindingIndex] == null) {\n            // 2 is the index of the first static interstitial value (ie. not prefix)\n            for (var i = 2; i < values.length; i += 2) {\n                tData[bindingIndex++] = values[i];\n            }\n            bindingIndex = lView[BINDING_INDEX];\n        }\n        for (var i = 1; i < values.length; i += 2) {\n            // Check if bindings (odd indexes) have changed\n            isBindingUpdated = bindingUpdated(lView, bindingIndex++, values[i]) || isBindingUpdated;\n        }\n        lView[BINDING_INDEX] = bindingIndex;\n        storeBindingMetadata(lView, values[0], values[values.length - 1]);\n        if (!isBindingUpdated) {\n            return NO_CHANGE;\n        }\n        // Build the updated content\n        var content = values[0];\n        for (var i = 1; i < values.length; i += 2) {\n            content += renderStringify(values[i]) + values[i + 1];\n        }\n        return content;\n    }\n    /**\n     * Creates an interpolation binding with 1 expression.\n     *\n     * @param prefix static value used for concatenation only.\n     * @param v0 value checked for change.\n     * @param suffix static value used for concatenation only.\n     *\n     * @codeGenApi\n     */\n    function ɵɵinterpolation1(prefix, v0, suffix) {\n        var lView = getLView();\n        var different = bindingUpdated(lView, lView[BINDING_INDEX]++, v0);\n        storeBindingMetadata(lView, prefix, suffix);\n        return different ? prefix + renderStringify(v0) + suffix : NO_CHANGE;\n    }\n    /**\n     * Creates an interpolation binding with 2 expressions.\n     *\n     * @codeGenApi\n     */\n    function ɵɵinterpolation2(prefix, v0, i0, v1, suffix) {\n        var lView = getLView();\n        var bindingIndex = lView[BINDING_INDEX];\n        var different = bindingUpdated2(lView, bindingIndex, v0, v1);\n        lView[BINDING_INDEX] += 2;\n        // Only set static strings the first time (data will be null subsequent runs).\n        var data = storeBindingMetadata(lView, prefix, suffix);\n        if (data) {\n            lView[TVIEW].data[bindingIndex] = i0;\n        }\n        return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + suffix : NO_CHANGE;\n    }\n    /**\n     * Creates an interpolation binding with 3 expressions.\n     *\n     * @codeGenApi\n     */\n    function ɵɵinterpolation3(prefix, v0, i0, v1, i1, v2, suffix) {\n        var lView = getLView();\n        var bindingIndex = lView[BINDING_INDEX];\n        var different = bindingUpdated3(lView, bindingIndex, v0, v1, v2);\n        lView[BINDING_INDEX] += 3;\n        // Only set static strings the first time (data will be null subsequent runs).\n        var data = storeBindingMetadata(lView, prefix, suffix);\n        if (data) {\n            var tData = lView[TVIEW].data;\n            tData[bindingIndex] = i0;\n            tData[bindingIndex + 1] = i1;\n        }\n        return different ?\n            prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + suffix :\n            NO_CHANGE;\n    }\n    /**\n     * Create an interpolation binding with 4 expressions.\n     *\n     * @codeGenApi\n     */\n    function ɵɵinterpolation4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\n        var lView = getLView();\n        var bindingIndex = lView[BINDING_INDEX];\n        var different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n        lView[BINDING_INDEX] += 4;\n        // Only set static strings the first time (data will be null subsequent runs).\n        var data = storeBindingMetadata(lView, prefix, suffix);\n        if (data) {\n            var tData = lView[TVIEW].data;\n            tData[bindingIndex] = i0;\n            tData[bindingIndex + 1] = i1;\n            tData[bindingIndex + 2] = i2;\n        }\n        return different ?\n            prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 +\n                renderStringify(v3) + suffix :\n            NO_CHANGE;\n    }\n    /**\n     * Creates an interpolation binding with 5 expressions.\n     *\n     * @codeGenApi\n     */\n    function ɵɵinterpolation5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\n        var lView = getLView();\n        var bindingIndex = lView[BINDING_INDEX];\n        var different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n        different = bindingUpdated(lView, bindingIndex + 4, v4) || different;\n        lView[BINDING_INDEX] += 5;\n        // Only set static strings the first time (data will be null subsequent runs).\n        var data = storeBindingMetadata(lView, prefix, suffix);\n        if (data) {\n            var tData = lView[TVIEW].data;\n            tData[bindingIndex] = i0;\n            tData[bindingIndex + 1] = i1;\n            tData[bindingIndex + 2] = i2;\n            tData[bindingIndex + 3] = i3;\n        }\n        return different ?\n            prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 +\n                renderStringify(v3) + i3 + renderStringify(v4) + suffix :\n            NO_CHANGE;\n    }\n    /**\n     * Creates an interpolation binding with 6 expressions.\n     *\n     * @codeGenApi\n     */\n    function ɵɵinterpolation6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\n        var lView = getLView();\n        var bindingIndex = lView[BINDING_INDEX];\n        var different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n        different = bindingUpdated2(lView, bindingIndex + 4, v4, v5) || different;\n        lView[BINDING_INDEX] += 6;\n        // Only set static strings the first time (data will be null subsequent runs).\n        var data = storeBindingMetadata(lView, prefix, suffix);\n        if (data) {\n            var tData = lView[TVIEW].data;\n            tData[bindingIndex] = i0;\n            tData[bindingIndex + 1] = i1;\n            tData[bindingIndex + 2] = i2;\n            tData[bindingIndex + 3] = i3;\n            tData[bindingIndex + 4] = i4;\n        }\n        return different ?\n            prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 +\n                renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + suffix :\n            NO_CHANGE;\n    }\n    /**\n     * Creates an interpolation binding with 7 expressions.\n     *\n     * @codeGenApi\n     */\n    function ɵɵinterpolation7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\n        var lView = getLView();\n        var bindingIndex = lView[BINDING_INDEX];\n        var different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n        different = bindingUpdated3(lView, bindingIndex + 4, v4, v5, v6) || different;\n        lView[BINDING_INDEX] += 7;\n        // Only set static strings the first time (data will be null subsequent runs).\n        var data = storeBindingMetadata(lView, prefix, suffix);\n        if (data) {\n            var tData = lView[TVIEW].data;\n            tData[bindingIndex] = i0;\n            tData[bindingIndex + 1] = i1;\n            tData[bindingIndex + 2] = i2;\n            tData[bindingIndex + 3] = i3;\n            tData[bindingIndex + 4] = i4;\n            tData[bindingIndex + 5] = i5;\n        }\n        return different ?\n            prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 +\n                renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + i5 +\n                renderStringify(v6) + suffix :\n            NO_CHANGE;\n    }\n    /**\n     * Creates an interpolation binding with 8 expressions.\n     *\n     * @codeGenApi\n     */\n    function ɵɵinterpolation8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\n        var lView = getLView();\n        var bindingIndex = lView[BINDING_INDEX];\n        var different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n        different = bindingUpdated4(lView, bindingIndex + 4, v4, v5, v6, v7) || different;\n        lView[BINDING_INDEX] += 8;\n        // Only set static strings the first time (data will be null subsequent runs).\n        var data = storeBindingMetadata(lView, prefix, suffix);\n        if (data) {\n            var tData = lView[TVIEW].data;\n            tData[bindingIndex] = i0;\n            tData[bindingIndex + 1] = i1;\n            tData[bindingIndex + 2] = i2;\n            tData[bindingIndex + 3] = i3;\n            tData[bindingIndex + 4] = i4;\n            tData[bindingIndex + 5] = i5;\n            tData[bindingIndex + 6] = i6;\n        }\n        return different ?\n            prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 +\n                renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + i5 +\n                renderStringify(v6) + i6 + renderStringify(v7) + suffix :\n            NO_CHANGE;\n    }\n\n    /**\n     *\n     * Update an interpolated attribute on an element with single bound value surrounded by text.\n     *\n     * Used when the value passed to a property has 1 interpolated value in it:\n     *\n     * ```html\n     * <div attr.title=\"prefix{{v0}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵattributeInterpolate1('title', 'prefix', v0, 'suffix');\n     * ```\n     *\n     * @param attrName The name of the attribute to update\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵattributeInterpolate1(attrName, prefix, v0, suffix, sanitizer, namespace) {\n        var index = getSelectedIndex();\n        var lView = getLView();\n        // TODO(FW-1340): Refactor to remove the use of other instructions here.\n        var interpolatedValue = ɵɵinterpolation1(prefix, v0, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            elementAttributeInternal(index, attrName, interpolatedValue, lView, sanitizer, namespace);\n        }\n        return ɵɵattributeInterpolate1;\n    }\n    /**\n     *\n     * Update an interpolated attribute on an element with 2 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 2 interpolated values in it:\n     *\n     * ```html\n     * <div attr.title=\"prefix{{v0}}-{{v1}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵattributeInterpolate2('title', 'prefix', v0, '-', v1, 'suffix');\n     * ```\n     *\n     * @param attrName The name of the attribute to update\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵattributeInterpolate2(attrName, prefix, v0, i0, v1, suffix, sanitizer, namespace) {\n        var index = getSelectedIndex();\n        var lView = getLView();\n        // TODO(FW-1340): Refactor to remove the use of other instructions here.\n        var interpolatedValue = ɵɵinterpolation2(prefix, v0, i0, v1, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            elementAttributeInternal(index, attrName, interpolatedValue, lView, sanitizer, namespace);\n        }\n        return ɵɵattributeInterpolate2;\n    }\n    /**\n     *\n     * Update an interpolated attribute on an element with 3 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 3 interpolated values in it:\n     *\n     * ```html\n     * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵattributeInterpolate3(\n     * 'title', 'prefix', v0, '-', v1, '-', v2, 'suffix');\n     * ```\n     *\n     * @param attrName The name of the attribute to update\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵattributeInterpolate3(attrName, prefix, v0, i0, v1, i1, v2, suffix, sanitizer, namespace) {\n        var index = getSelectedIndex();\n        var lView = getLView();\n        // TODO(FW-1340): Refactor to remove the use of other instructions here.\n        var interpolatedValue = ɵɵinterpolation3(prefix, v0, i0, v1, i1, v2, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            elementAttributeInternal(index, attrName, interpolatedValue, lView, sanitizer, namespace);\n        }\n        return ɵɵattributeInterpolate3;\n    }\n    /**\n     *\n     * Update an interpolated attribute on an element with 4 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 4 interpolated values in it:\n     *\n     * ```html\n     * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵattributeInterpolate4(\n     * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n     * ```\n     *\n     * @param attrName The name of the attribute to update\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param i2 Static value used for concatenation only.\n     * @param v3 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵattributeInterpolate4(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, sanitizer, namespace) {\n        var index = getSelectedIndex();\n        var lView = getLView();\n        // TODO(FW-1340): Refactor to remove the use of other instructions here.\n        var interpolatedValue = ɵɵinterpolation4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            elementAttributeInternal(index, attrName, interpolatedValue, lView, sanitizer, namespace);\n        }\n        return ɵɵattributeInterpolate4;\n    }\n    /**\n     *\n     * Update an interpolated attribute on an element with 5 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 5 interpolated values in it:\n     *\n     * ```html\n     * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵattributeInterpolate5(\n     * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n     * ```\n     *\n     * @param attrName The name of the attribute to update\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param i2 Static value used for concatenation only.\n     * @param v3 Value checked for change.\n     * @param i3 Static value used for concatenation only.\n     * @param v4 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵattributeInterpolate5(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, sanitizer, namespace) {\n        var index = getSelectedIndex();\n        var lView = getLView();\n        // TODO(FW-1340): Refactor to remove the use of other instructions here.\n        var interpolatedValue = ɵɵinterpolation5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            elementAttributeInternal(index, attrName, interpolatedValue, lView, sanitizer, namespace);\n        }\n        return ɵɵattributeInterpolate5;\n    }\n    /**\n     *\n     * Update an interpolated attribute on an element with 6 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 6 interpolated values in it:\n     *\n     * ```html\n     * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵattributeInterpolate6(\n     *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n     * ```\n     *\n     * @param attrName The name of the attribute to update\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param i2 Static value used for concatenation only.\n     * @param v3 Value checked for change.\n     * @param i3 Static value used for concatenation only.\n     * @param v4 Value checked for change.\n     * @param i4 Static value used for concatenation only.\n     * @param v5 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵattributeInterpolate6(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, sanitizer, namespace) {\n        var index = getSelectedIndex();\n        var lView = getLView();\n        // TODO(FW-1340): Refactor to remove the use of other instructions here.\n        var interpolatedValue = ɵɵinterpolation6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            elementAttributeInternal(index, attrName, interpolatedValue, lView, sanitizer, namespace);\n        }\n        return ɵɵattributeInterpolate6;\n    }\n    /**\n     *\n     * Update an interpolated attribute on an element with 7 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 7 interpolated values in it:\n     *\n     * ```html\n     * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵattributeInterpolate7(\n     *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n     * ```\n     *\n     * @param attrName The name of the attribute to update\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param i2 Static value used for concatenation only.\n     * @param v3 Value checked for change.\n     * @param i3 Static value used for concatenation only.\n     * @param v4 Value checked for change.\n     * @param i4 Static value used for concatenation only.\n     * @param v5 Value checked for change.\n     * @param i5 Static value used for concatenation only.\n     * @param v6 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵattributeInterpolate7(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, sanitizer, namespace) {\n        var index = getSelectedIndex();\n        var lView = getLView();\n        // TODO(FW-1340): Refactor to remove the use of other instructions here.\n        var interpolatedValue = ɵɵinterpolation7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            elementAttributeInternal(index, attrName, interpolatedValue, lView, sanitizer, namespace);\n        }\n        return ɵɵattributeInterpolate7;\n    }\n    /**\n     *\n     * Update an interpolated attribute on an element with 8 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 8 interpolated values in it:\n     *\n     * ```html\n     * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵattributeInterpolate8(\n     *  'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n     * ```\n     *\n     * @param attrName The name of the attribute to update\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param i2 Static value used for concatenation only.\n     * @param v3 Value checked for change.\n     * @param i3 Static value used for concatenation only.\n     * @param v4 Value checked for change.\n     * @param i4 Static value used for concatenation only.\n     * @param v5 Value checked for change.\n     * @param i5 Static value used for concatenation only.\n     * @param v6 Value checked for change.\n     * @param i6 Static value used for concatenation only.\n     * @param v7 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵattributeInterpolate8(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, sanitizer, namespace) {\n        var index = getSelectedIndex();\n        var lView = getLView();\n        // TODO(FW-1340): Refactor to remove the use of other instructions here.\n        var interpolatedValue = ɵɵinterpolation8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            elementAttributeInternal(index, attrName, interpolatedValue, lView, sanitizer, namespace);\n        }\n        return ɵɵattributeInterpolate8;\n    }\n    /**\n     * Update an interpolated attribute on an element with 8 or more bound values surrounded by text.\n     *\n     * Used when the number of interpolated values exceeds 7.\n     *\n     * ```html\n     * <div\n     *  title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵattributeInterpolateV(\n     *  'title', ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n     *  'suffix']);\n     * ```\n     *\n     * @param attrName The name of the attribute to update.\n     * @param values The a collection of values and the strings in-between those values, beginning with\n     * a string prefix and ending with a string suffix.\n     * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵattributeInterpolateV(attrName, values, sanitizer, namespace) {\n        var index = getSelectedIndex();\n        var lView = getLView();\n        // TODO(FW-1340): Refactor to remove the use of other instructions here.\n        var interpolated = ɵɵinterpolationV(values);\n        if (interpolated !== NO_CHANGE) {\n            elementAttributeInternal(index, attrName, interpolated, lView, sanitizer, namespace);\n        }\n        return ɵɵattributeInterpolateV;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Synchronously perform change detection on a component (and possibly its sub-components).\n     *\n     * This function triggers change detection in a synchronous way on a component. There should\n     * be very little reason to call this function directly since a preferred way to do change\n     * detection is to {@link markDirty} the component and wait for the scheduler to call this method\n     * at some future point in time. This is because a single user action often results in many\n     * components being invalidated and calling change detection on each component synchronously\n     * would be inefficient. It is better to wait until all components are marked as dirty and\n     * then perform single change detection across all of the components\n     *\n     * @param component The component which the change detection should be performed on.\n     */\n    function detectChanges(component) {\n        var view = getComponentViewByInstance(component);\n        detectChangesInternal(view, component);\n    }\n    /**\n     * Mark the component as dirty (needing change detection).\n     *\n     * Marking a component dirty will schedule a change detection on this\n     * component at some point in the future. Marking an already dirty\n     * component as dirty is a noop. Only one outstanding change detection\n     * can be scheduled per component tree. (Two components bootstrapped with\n     * separate `renderComponent` will have separate schedulers)\n     *\n     * When the root component is bootstrapped with `renderComponent`, a scheduler\n     * can be provided.\n     *\n     * @param component Component to mark as dirty.\n     *\n     * @publicApi\n     */\n    function markDirty(component) {\n        ngDevMode && assertDefined(component, 'component');\n        var rootView = markViewDirty(getComponentViewByInstance(component));\n        ngDevMode && assertDefined(rootView[CONTEXT], 'rootContext should be defined');\n        scheduleTick(rootView[CONTEXT], 1 /* DetectChanges */);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function getLContainer(tNode, embeddedView) {\n        ngDevMode && assertLView(embeddedView);\n        var container = embeddedView[PARENT];\n        if (tNode.index === -1) {\n            // This is a dynamically created view inside a dynamic container.\n            // The parent isn't an LContainer if the embedded view hasn't been attached yet.\n            return isLContainer(container) ? container : null;\n        }\n        else {\n            ngDevMode && assertLContainer(container);\n            // This is a inline view node (e.g. embeddedViewStart)\n            return container;\n        }\n    }\n    /**\n     * Retrieves render parent for a given view.\n     * Might be null if a view is not yet attached to any container.\n     */\n    function getContainerRenderParent(tViewNode, view) {\n        var container = getLContainer(tViewNode, view);\n        return container ? nativeParentNode(view[RENDERER], container[NATIVE]) : null;\n    }\n    /**\n     * Stack used to keep track of projection nodes in walkTNodeTree.\n     *\n     * This is deliberately created outside of walkTNodeTree to avoid allocating\n     * a new array each time the function is called. Instead the array will be\n     * re-used by each invocation. This works because the function is not reentrant.\n     */\n    var projectionNodeStack = [];\n    /**\n     * Walks a tree of TNodes, applying a transformation on the element nodes, either only on the first\n     * one found, or on all of them.\n     *\n     * @param viewToWalk the view to walk\n     * @param action identifies the action to be performed on the elements\n     * @param renderer the current renderer.\n     * @param renderParent Optional the render parent node to be set in all LContainers found,\n     * required for action modes Insert and Destroy.\n     * @param beforeNode Optional the node before which elements should be added, required for action\n     * Insert.\n     */\n    function walkTNodeTree(viewToWalk, action, renderer, renderParent, beforeNode) {\n        var e_1, _a;\n        var rootTNode = viewToWalk[TVIEW].node;\n        var projectionNodeIndex = -1;\n        var currentView = viewToWalk;\n        var tNode = rootTNode.child;\n        while (tNode) {\n            var nextTNode = null;\n            if (tNode.type === 3 /* Element */ || tNode.type === 4 /* ElementContainer */) {\n                executeNodeAction(action, renderer, renderParent, getNativeByTNode(tNode, currentView), tNode, beforeNode);\n                var nodeOrContainer = currentView[tNode.index];\n                if (isLContainer(nodeOrContainer)) {\n                    // This element has an LContainer, and its comment needs to be handled\n                    executeNodeAction(action, renderer, renderParent, nodeOrContainer[NATIVE], tNode, beforeNode);\n                    var firstView = nodeOrContainer[CONTAINER_HEADER_OFFSET];\n                    if (firstView) {\n                        currentView = firstView;\n                        nextTNode = currentView[TVIEW].node;\n                        // When the walker enters a container, then the beforeNode has to become the local native\n                        // comment node.\n                        beforeNode = nodeOrContainer[NATIVE];\n                    }\n                }\n            }\n            else if (tNode.type === 0 /* Container */) {\n                var lContainer = currentView[tNode.index];\n                executeNodeAction(action, renderer, renderParent, lContainer[NATIVE], tNode, beforeNode);\n                var firstView = lContainer[CONTAINER_HEADER_OFFSET];\n                if (firstView) {\n                    currentView = firstView;\n                    nextTNode = currentView[TVIEW].node;\n                    // When the walker enters a container, then the beforeNode has to become the local native\n                    // comment node.\n                    beforeNode = lContainer[NATIVE];\n                }\n            }\n            else if (tNode.type === 1 /* Projection */) {\n                var componentView = findComponentView(currentView);\n                var componentHost = componentView[T_HOST];\n                var head = componentHost.projection[tNode.projection];\n                if (Array.isArray(head)) {\n                    try {\n                        for (var head_1 = __values(head), head_1_1 = head_1.next(); !head_1_1.done; head_1_1 = head_1.next()) {\n                            var nativeNode = head_1_1.value;\n                            executeNodeAction(action, renderer, renderParent, nativeNode, tNode, beforeNode);\n                        }\n                    }\n                    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                    finally {\n                        try {\n                            if (head_1_1 && !head_1_1.done && (_a = head_1.return)) _a.call(head_1);\n                        }\n                        finally { if (e_1) throw e_1.error; }\n                    }\n                }\n                else {\n                    // Must store both the TNode and the view because this projection node could be nested\n                    // deeply inside embedded views, and we need to get back down to this particular nested\n                    // view.\n                    projectionNodeStack[++projectionNodeIndex] = tNode;\n                    projectionNodeStack[++projectionNodeIndex] = currentView;\n                    if (head) {\n                        currentView = componentView[PARENT];\n                        nextTNode = currentView[TVIEW].data[head.index];\n                    }\n                }\n            }\n            else {\n                // Otherwise, this is a View\n                nextTNode = tNode.child;\n            }\n            if (nextTNode === null) {\n                // this last node was projected, we need to get back down to its projection node\n                if (tNode.projectionNext === null && (tNode.flags & 2 /* isProjected */)) {\n                    currentView = projectionNodeStack[projectionNodeIndex--];\n                    tNode = projectionNodeStack[projectionNodeIndex--];\n                }\n                if (tNode.flags & 2 /* isProjected */) {\n                    nextTNode = tNode.projectionNext;\n                }\n                else if (tNode.type === 4 /* ElementContainer */) {\n                    nextTNode = tNode.child || tNode.next;\n                }\n                else {\n                    nextTNode = tNode.next;\n                }\n                /**\n                 * Find the next node in the TNode tree, taking into account the place where a node is\n                 * projected (in the shadow DOM) rather than where it comes from (in the light DOM).\n                 *\n                 * If there is no sibling node, then it goes to the next sibling of the parent node...\n                 * until it reaches rootNode (at which point null is returned).\n                 */\n                while (!nextTNode) {\n                    // If parent is null, we're crossing the view boundary, so we should get the host TNode.\n                    tNode = tNode.parent || currentView[T_HOST];\n                    if (tNode === null || tNode === rootTNode)\n                        return;\n                    // When exiting a container, the beforeNode must be restored to the previous value\n                    if (tNode.type === 0 /* Container */) {\n                        currentView = getLViewParent(currentView);\n                        beforeNode = currentView[tNode.index][NATIVE];\n                    }\n                    if (tNode.type === 2 /* View */) {\n                        /**\n                         * If current lView doesn't have next pointer, we try to find it by going up parents\n                         * chain until:\n                         * - we find an lView with a next pointer\n                         * - or find a tNode with a parent that has a next pointer\n                         * - or find a lContainer\n                         * - or reach root TNode (in which case we exit, since we traversed all nodes)\n                         */\n                        while (!currentView[NEXT] && currentView[PARENT] &&\n                            !(tNode.parent && tNode.parent.next)) {\n                            if (tNode === rootTNode)\n                                return;\n                            currentView = currentView[PARENT];\n                            if (isLContainer(currentView)) {\n                                tNode = currentView[T_HOST];\n                                currentView = currentView[PARENT];\n                                beforeNode = currentView[tNode.index][NATIVE];\n                                break;\n                            }\n                            tNode = currentView[T_HOST];\n                        }\n                        if (currentView[NEXT]) {\n                            currentView = currentView[NEXT];\n                            nextTNode = currentView[T_HOST];\n                        }\n                        else {\n                            nextTNode = tNode.type === 4 /* ElementContainer */ && tNode.child || tNode.next;\n                        }\n                    }\n                    else {\n                        nextTNode = tNode.next;\n                    }\n                }\n            }\n            tNode = nextTNode;\n        }\n    }\n    /**\n     * NOTE: for performance reasons, the possible actions are inlined within the function instead of\n     * being passed as an argument.\n     */\n    function executeNodeAction(action, renderer, parent, node, tNode, beforeNode) {\n        if (action === 0 /* Insert */) {\n            nativeInsertBefore(renderer, parent, node, beforeNode || null);\n        }\n        else if (action === 1 /* Detach */) {\n            nativeRemoveNode(renderer, node, isComponent(tNode));\n        }\n        else if (action === 2 /* Destroy */) {\n            ngDevMode && ngDevMode.rendererDestroyNode++;\n            renderer.destroyNode(node);\n        }\n    }\n    function createTextNode(value, renderer) {\n        return isProceduralRenderer(renderer) ? renderer.createText(renderStringify(value)) :\n            renderer.createTextNode(renderStringify(value));\n    }\n    function addRemoveViewFromContainer(viewToWalk, insertMode, beforeNode) {\n        var renderParent = getContainerRenderParent(viewToWalk[TVIEW].node, viewToWalk);\n        ngDevMode && assertNodeType(viewToWalk[TVIEW].node, 2 /* View */);\n        if (renderParent) {\n            var renderer = viewToWalk[RENDERER];\n            walkTNodeTree(viewToWalk, insertMode ? 0 /* Insert */ : 1 /* Detach */, renderer, renderParent, beforeNode);\n        }\n    }\n    /**\n     * Detach a `LView` from the DOM by detaching its nodes.\n     *\n     * @param lView the `LView` to be detached.\n     */\n    function renderDetachView(lView) {\n        walkTNodeTree(lView, 1 /* Detach */, lView[RENDERER], null);\n    }\n    /**\n     * Traverses down and up the tree of views and containers to remove listeners and\n     * call onDestroy callbacks.\n     *\n     * Notes:\n     *  - Because it's used for onDestroy calls, it needs to be bottom-up.\n     *  - Must process containers instead of their views to avoid splicing\n     *  when views are destroyed and re-added.\n     *  - Using a while loop because it's faster than recursion\n     *  - Destroy only called on movement to sibling or movement to parent (laterally or up)\n     *\n     *  @param rootView The view to destroy\n     */\n    function destroyViewTree(rootView) {\n        // If the view has no children, we can clean it up and return early.\n        var lViewOrLContainer = rootView[CHILD_HEAD];\n        if (!lViewOrLContainer) {\n            return cleanUpView(rootView);\n        }\n        while (lViewOrLContainer) {\n            var next = null;\n            if (isLView(lViewOrLContainer)) {\n                // If LView, traverse down to child.\n                next = lViewOrLContainer[CHILD_HEAD];\n            }\n            else {\n                ngDevMode && assertLContainer(lViewOrLContainer);\n                // If container, traverse down to its first LView.\n                var firstView = lViewOrLContainer[CONTAINER_HEADER_OFFSET];\n                if (firstView)\n                    next = firstView;\n            }\n            if (!next) {\n                // Only clean up view when moving to the side or up, as destroy hooks\n                // should be called in order from the bottom up.\n                while (lViewOrLContainer && !lViewOrLContainer[NEXT] && lViewOrLContainer !== rootView) {\n                    cleanUpView(lViewOrLContainer);\n                    lViewOrLContainer = getParentState(lViewOrLContainer, rootView);\n                }\n                cleanUpView(lViewOrLContainer || rootView);\n                next = lViewOrLContainer && lViewOrLContainer[NEXT];\n            }\n            lViewOrLContainer = next;\n        }\n    }\n    /**\n     * Inserts a view into a container.\n     *\n     * This adds the view to the container's array of active views in the correct\n     * position. It also adds the view's elements to the DOM if the container isn't a\n     * root node of another view (in that case, the view's elements will be added when\n     * the container's parent view is added later).\n     *\n     * @param lView The view to insert\n     * @param lContainer The container into which the view should be inserted\n     * @param index Which index in the container to insert the child view into\n     */\n    function insertView(lView, lContainer, index) {\n        ngDevMode && assertLView(lView);\n        ngDevMode && assertLContainer(lContainer);\n        var indexInContainer = CONTAINER_HEADER_OFFSET + index;\n        var containerLength = lContainer.length;\n        if (index > 0) {\n            // This is a new view, we need to add it to the children.\n            lContainer[indexInContainer - 1][NEXT] = lView;\n        }\n        if (index < containerLength - CONTAINER_HEADER_OFFSET) {\n            lView[NEXT] = lContainer[indexInContainer];\n            lContainer.splice(CONTAINER_HEADER_OFFSET + index, 0, lView);\n        }\n        else {\n            lContainer.push(lView);\n            lView[NEXT] = null;\n        }\n        lView[PARENT] = lContainer;\n        // Notify query that a new view has been added\n        if (lView[QUERIES]) {\n            lView[QUERIES].insertView(index);\n        }\n        // Sets the attached flag\n        lView[FLAGS] |= 128 /* Attached */;\n    }\n    /**\n     * Detaches a view from a container.\n     *\n     * This method splices the view from the container's array of active views. It also\n     * removes the view's elements from the DOM.\n     *\n     * @param lContainer The container from which to detach a view\n     * @param removeIndex The index of the view to detach\n     * @returns Detached LView instance.\n     */\n    function detachView(lContainer, removeIndex) {\n        if (lContainer.length <= CONTAINER_HEADER_OFFSET)\n            return;\n        var indexInContainer = CONTAINER_HEADER_OFFSET + removeIndex;\n        var viewToDetach = lContainer[indexInContainer];\n        if (viewToDetach) {\n            if (removeIndex > 0) {\n                lContainer[indexInContainer - 1][NEXT] = viewToDetach[NEXT];\n            }\n            lContainer.splice(CONTAINER_HEADER_OFFSET + removeIndex, 1);\n            addRemoveViewFromContainer(viewToDetach, false);\n            if ((viewToDetach[FLAGS] & 128 /* Attached */) &&\n                !(viewToDetach[FLAGS] & 256 /* Destroyed */) && viewToDetach[QUERIES]) {\n                viewToDetach[QUERIES].removeView();\n            }\n            viewToDetach[PARENT] = null;\n            viewToDetach[NEXT] = null;\n            // Unsets the attached flag\n            viewToDetach[FLAGS] &= ~128 /* Attached */;\n        }\n        return viewToDetach;\n    }\n    /**\n     * Removes a view from a container, i.e. detaches it and then destroys the underlying LView.\n     *\n     * @param lContainer The container from which to remove a view\n     * @param removeIndex The index of the view to remove\n     */\n    function removeView(lContainer, removeIndex) {\n        var detachedView = detachView(lContainer, removeIndex);\n        detachedView && destroyLView(detachedView);\n    }\n    /**\n     * A standalone function which destroys an LView,\n     * conducting cleanup (e.g. removing listeners, calling onDestroys).\n     *\n     * @param view The view to be destroyed.\n     */\n    function destroyLView(view) {\n        if (!(view[FLAGS] & 256 /* Destroyed */)) {\n            var renderer = view[RENDERER];\n            if (isProceduralRenderer(renderer) && renderer.destroyNode) {\n                walkTNodeTree(view, 2 /* Destroy */, renderer, null);\n            }\n            destroyViewTree(view);\n        }\n    }\n    /**\n     * Determines which LViewOrLContainer to jump to when traversing back up the\n     * tree in destroyViewTree.\n     *\n     * Normally, the view's parent LView should be checked, but in the case of\n     * embedded views, the container (which is the view node's parent, but not the\n     * LView's parent) needs to be checked for a possible next property.\n     *\n     * @param lViewOrLContainer The LViewOrLContainer for which we need a parent state\n     * @param rootView The rootView, so we don't propagate too far up the view tree\n     * @returns The correct parent LViewOrLContainer\n     */\n    function getParentState(lViewOrLContainer, rootView) {\n        var tNode;\n        if (isLView(lViewOrLContainer) && (tNode = lViewOrLContainer[T_HOST]) &&\n            tNode.type === 2 /* View */) {\n            // if it's an embedded view, the state needs to go up to the container, in case the\n            // container has a next\n            return getLContainer(tNode, lViewOrLContainer);\n        }\n        else {\n            // otherwise, use parent view for containers or component views\n            return lViewOrLContainer[PARENT] === rootView ? null : lViewOrLContainer[PARENT];\n        }\n    }\n    /**\n     * Calls onDestroys hooks for all directives and pipes in a given view and then removes all\n     * listeners. Listeners are removed as the last step so events delivered in the onDestroys hooks\n     * can be propagated to @Output listeners.\n     *\n     * @param view The LView to clean up\n     */\n    function cleanUpView(view) {\n        if (isLView(view) && !(view[FLAGS] & 256 /* Destroyed */)) {\n            // Usually the Attached flag is removed when the view is detached from its parent, however\n            // if it's a root view, the flag won't be unset hence why we're also removing on destroy.\n            view[FLAGS] &= ~128 /* Attached */;\n            // Mark the LView as destroyed *before* executing the onDestroy hooks. An onDestroy hook\n            // runs arbitrary user code, which could include its own `viewRef.destroy()` (or similar). If\n            // We don't flag the view as destroyed before the hooks, this could lead to an infinite loop.\n            // This also aligns with the ViewEngine behavior. It also means that the onDestroy hook is\n            // really more of an \"afterDestroy\" hook if you think about it.\n            view[FLAGS] |= 256 /* Destroyed */;\n            executeOnDestroys(view);\n            removeListeners(view);\n            var hostTNode = view[T_HOST];\n            // For component views only, the local renderer is destroyed as clean up time.\n            if (hostTNode && hostTNode.type === 3 /* Element */ && isProceduralRenderer(view[RENDERER])) {\n                ngDevMode && ngDevMode.rendererDestroy++;\n                view[RENDERER].destroy();\n            }\n            // For embedded views still attached to a container: remove query result from this view.\n            if (viewAttachedToContainer(view) && view[QUERIES]) {\n                view[QUERIES].removeView();\n            }\n        }\n    }\n    /** Removes listeners and unsubscribes from output subscriptions */\n    function removeListeners(lView) {\n        var tCleanup = lView[TVIEW].cleanup;\n        if (tCleanup != null) {\n            var lCleanup = lView[CLEANUP];\n            for (var i = 0; i < tCleanup.length - 1; i += 2) {\n                if (typeof tCleanup[i] === 'string') {\n                    // This is a native DOM listener\n                    var idxOrTargetGetter = tCleanup[i + 1];\n                    var target = typeof idxOrTargetGetter === 'function' ?\n                        idxOrTargetGetter(lView) :\n                        unwrapRNode(lView[idxOrTargetGetter]);\n                    var listener = lCleanup[tCleanup[i + 2]];\n                    var useCaptureOrSubIdx = tCleanup[i + 3];\n                    if (typeof useCaptureOrSubIdx === 'boolean') {\n                        // native DOM listener registered with Renderer3\n                        target.removeEventListener(tCleanup[i], listener, useCaptureOrSubIdx);\n                    }\n                    else {\n                        if (useCaptureOrSubIdx >= 0) {\n                            // unregister\n                            lCleanup[useCaptureOrSubIdx]();\n                        }\n                        else {\n                            // Subscription\n                            lCleanup[-useCaptureOrSubIdx].unsubscribe();\n                        }\n                    }\n                    i += 2;\n                }\n                else {\n                    // This is a cleanup function that is grouped with the index of its context\n                    var context = lCleanup[tCleanup[i + 1]];\n                    tCleanup[i].call(context);\n                }\n            }\n            lView[CLEANUP] = null;\n        }\n    }\n    /** Calls onDestroy hooks for this view */\n    function executeOnDestroys(view) {\n        var tView = view[TVIEW];\n        var destroyHooks;\n        if (tView != null && (destroyHooks = tView.destroyHooks) != null) {\n            for (var i = 0; i < destroyHooks.length; i += 2) {\n                var context = view[destroyHooks[i]];\n                // Only call the destroy hook if the context has been requested.\n                if (!(context instanceof NodeInjectorFactory)) {\n                    destroyHooks[i + 1].call(context);\n                }\n            }\n        }\n    }\n    /**\n     * Returns a native element if a node can be inserted into the given parent.\n     *\n     * There are two reasons why we may not be able to insert a element immediately.\n     * - Projection: When creating a child content element of a component, we have to skip the\n     *   insertion because the content of a component will be projected.\n     *   `<component><content>delayed due to projection</content></component>`\n     * - Parent container is disconnected: This can happen when we are inserting a view into\n     *   parent container, which itself is disconnected. For example the parent container is part\n     *   of a View which has not be inserted or is made for projection but has not been inserted\n     *   into destination.\n     */\n    function getRenderParent(tNode, currentView) {\n        // Nodes of the top-most view can be inserted eagerly.\n        if (isRootView(currentView)) {\n            return nativeParentNode(currentView[RENDERER], getNativeByTNode(tNode, currentView));\n        }\n        // Skip over element and ICU containers as those are represented by a comment node and\n        // can't be used as a render parent.\n        var parent = getHighestElementOrICUContainer(tNode);\n        var renderParent = parent.parent;\n        // If the parent is null, then we are inserting across views: either into an embedded view or a\n        // component view.\n        if (renderParent == null) {\n            var hostTNode = currentView[T_HOST];\n            if (hostTNode.type === 2 /* View */) {\n                // We are inserting a root element of an embedded view We might delay insertion of children\n                // for a given view if it is disconnected. This might happen for 2 main reasons:\n                // - view is not inserted into any container(view was created but not inserted yet)\n                // - view is inserted into a container but the container itself is not inserted into the DOM\n                // (container might be part of projection or child of a view that is not inserted yet).\n                // In other words we can insert children of a given view if this view was inserted into a\n                // container and the container itself has its render parent determined.\n                return getContainerRenderParent(hostTNode, currentView);\n            }\n            else {\n                // We are inserting a root element of the component view into the component host element and\n                // it should always be eager.\n                return getHostNative(currentView);\n            }\n        }\n        else {\n            var isIcuCase = parent && parent.type === 5 /* IcuContainer */;\n            // If the parent of this node is an ICU container, then it is represented by comment node and we\n            // need to use it as an anchor. If it is projected then its direct parent node is the renderer.\n            if (isIcuCase && parent.flags & 2 /* isProjected */) {\n                return getNativeByTNode(parent, currentView).parentNode;\n            }\n            ngDevMode && assertNodeType(renderParent, 3 /* Element */);\n            if (renderParent.flags & 1 /* isComponent */ && !isIcuCase) {\n                var tData = currentView[TVIEW].data;\n                var tNode_1 = tData[renderParent.index];\n                var encapsulation = tData[tNode_1.directiveStart].encapsulation;\n                // We've got a parent which is an element in the current view. We just need to verify if the\n                // parent element is not a component. Component's content nodes are not inserted immediately\n                // because they will be projected, and so doing insert at this point would be wasteful.\n                // Since the projection would then move it to its final destination. Note that we can't\n                // make this assumption when using the Shadow DOM, because the native projection placeholders\n                // (<content> or <slot>) have to be in place as elements are being inserted.\n                if (encapsulation !== exports.ViewEncapsulation.ShadowDom &&\n                    encapsulation !== exports.ViewEncapsulation.Native) {\n                    return null;\n                }\n            }\n            return getNativeByTNode(renderParent, currentView);\n        }\n    }\n    /**\n     * Gets the native host element for a given view. Will return null if the current view does not have\n     * a host element.\n     */\n    function getHostNative(currentView) {\n        ngDevMode && assertLView(currentView);\n        var hostTNode = currentView[T_HOST];\n        return hostTNode && hostTNode.type === 3 /* Element */ ?\n            getNativeByTNode(hostTNode, getLViewParent(currentView)) :\n            null;\n    }\n    /**\n     * Inserts a native node before another native node for a given parent using {@link Renderer3}.\n     * This is a utility function that can be used when native nodes were determined - it abstracts an\n     * actual renderer being used.\n     */\n    function nativeInsertBefore(renderer, parent, child, beforeNode) {\n        ngDevMode && ngDevMode.rendererInsertBefore++;\n        if (isProceduralRenderer(renderer)) {\n            renderer.insertBefore(parent, child, beforeNode);\n        }\n        else {\n            parent.insertBefore(child, beforeNode, true);\n        }\n    }\n    function nativeAppendChild(renderer, parent, child) {\n        ngDevMode && ngDevMode.rendererAppendChild++;\n        if (isProceduralRenderer(renderer)) {\n            renderer.appendChild(parent, child);\n        }\n        else {\n            parent.appendChild(child);\n        }\n    }\n    function nativeAppendOrInsertBefore(renderer, parent, child, beforeNode) {\n        if (beforeNode) {\n            nativeInsertBefore(renderer, parent, child, beforeNode);\n        }\n        else {\n            nativeAppendChild(renderer, parent, child);\n        }\n    }\n    /** Removes a node from the DOM given its native parent. */\n    function nativeRemoveChild(renderer, parent, child, isHostElement) {\n        if (isProceduralRenderer(renderer)) {\n            renderer.removeChild(parent, child, isHostElement);\n        }\n        else {\n            parent.removeChild(child);\n        }\n    }\n    /**\n     * Returns a native parent of a given native node.\n     */\n    function nativeParentNode(renderer, node) {\n        return (isProceduralRenderer(renderer) ? renderer.parentNode(node) : node.parentNode);\n    }\n    /**\n     * Returns a native sibling of a given native node.\n     */\n    function nativeNextSibling(renderer, node) {\n        return isProceduralRenderer(renderer) ? renderer.nextSibling(node) : node.nextSibling;\n    }\n    /**\n     * Finds a native \"anchor\" node for cases where we can't append a native child directly\n     * (`appendChild`) and need to use a reference (anchor) node for the `insertBefore` operation.\n     * @param parentTNode\n     * @param lView\n     */\n    function getNativeAnchorNode(parentTNode, lView) {\n        if (parentTNode.type === 2 /* View */) {\n            var lContainer = getLContainer(parentTNode, lView);\n            var index = lContainer.indexOf(lView, CONTAINER_HEADER_OFFSET) - CONTAINER_HEADER_OFFSET;\n            return getBeforeNodeForView(index, lContainer);\n        }\n        else if (parentTNode.type === 4 /* ElementContainer */ ||\n            parentTNode.type === 5 /* IcuContainer */) {\n            return getNativeByTNode(parentTNode, lView);\n        }\n        return null;\n    }\n    /**\n     * Appends the `child` native node (or a collection of nodes) to the `parent`.\n     *\n     * The element insertion might be delayed {@link canInsertNativeNode}.\n     *\n     * @param childEl The native child (or children) that should be appended\n     * @param childTNode The TNode of the child element\n     * @param currentView The current LView\n     * @returns Whether or not the child was appended\n     */\n    function appendChild(childEl, childTNode, currentView) {\n        var e_2, _a;\n        var renderParent = getRenderParent(childTNode, currentView);\n        if (renderParent != null) {\n            var renderer = currentView[RENDERER];\n            var parentTNode = childTNode.parent || currentView[T_HOST];\n            var anchorNode = getNativeAnchorNode(parentTNode, currentView);\n            if (Array.isArray(childEl)) {\n                try {\n                    for (var childEl_1 = __values(childEl), childEl_1_1 = childEl_1.next(); !childEl_1_1.done; childEl_1_1 = childEl_1.next()) {\n                        var nativeNode = childEl_1_1.value;\n                        nativeAppendOrInsertBefore(renderer, renderParent, nativeNode, anchorNode);\n                    }\n                }\n                catch (e_2_1) { e_2 = { error: e_2_1 }; }\n                finally {\n                    try {\n                        if (childEl_1_1 && !childEl_1_1.done && (_a = childEl_1.return)) _a.call(childEl_1);\n                    }\n                    finally { if (e_2) throw e_2.error; }\n                }\n            }\n            else {\n                nativeAppendOrInsertBefore(renderer, renderParent, childEl, anchorNode);\n            }\n        }\n    }\n    /**\n     * Gets the top-level element or an ICU container if those containers are nested.\n     *\n     * @param tNode The starting TNode for which we should skip element and ICU containers\n     * @returns The TNode of the highest level ICU container or element container\n     */\n    function getHighestElementOrICUContainer(tNode) {\n        while (tNode.parent != null && (tNode.parent.type === 4 /* ElementContainer */ ||\n            tNode.parent.type === 5 /* IcuContainer */)) {\n            tNode = tNode.parent;\n        }\n        return tNode;\n    }\n    function getBeforeNodeForView(viewIndexInContainer, lContainer) {\n        var nextViewIndex = CONTAINER_HEADER_OFFSET + viewIndexInContainer + 1;\n        if (nextViewIndex < lContainer.length) {\n            var lView = lContainer[nextViewIndex];\n            var tViewNodeChild = lView[T_HOST].child;\n            return tViewNodeChild !== null ? getNativeByTNode(tViewNodeChild, lView) : lContainer[NATIVE];\n        }\n        else {\n            return lContainer[NATIVE];\n        }\n    }\n    /**\n     * Removes a native node itself using a given renderer. To remove the node we are looking up its\n     * parent from the native tree as not all platforms / browsers support the equivalent of\n     * node.remove().\n     *\n     * @param renderer A renderer to be used\n     * @param rNode The native node that should be removed\n     * @param isHostElement A flag indicating if a node to be removed is a host of a component.\n     */\n    function nativeRemoveNode(renderer, rNode, isHostElement) {\n        var nativeParent = nativeParentNode(renderer, rNode);\n        if (nativeParent) {\n            nativeRemoveChild(renderer, nativeParent, rNode, isHostElement);\n        }\n    }\n    /**\n     * Appends nodes to a target projection place. Nodes to insert were previously re-distribution and\n     * stored on a component host level.\n     * @param lView A LView where nodes are inserted (target VLview)\n     * @param tProjectionNode A projection node where previously re-distribution should be appended\n     * (target insertion place)\n     * @param selectorIndex A bucket from where nodes to project should be taken\n     * @param componentView A where projectable nodes were initially created (source view)\n     */\n    function appendProjectedNodes(lView, tProjectionNode, selectorIndex, componentView) {\n        var projectedView = componentView[PARENT];\n        var componentNode = componentView[T_HOST];\n        var nodeToProject = componentNode.projection[selectorIndex];\n        if (Array.isArray(nodeToProject)) {\n            appendChild(nodeToProject, tProjectionNode, lView);\n        }\n        else {\n            while (nodeToProject) {\n                if (!(nodeToProject.flags & 32 /* isDetached */)) {\n                    if (nodeToProject.type === 1 /* Projection */) {\n                        appendProjectedNodes(lView, tProjectionNode, nodeToProject.projection, findComponentView(projectedView));\n                    }\n                    else {\n                        // This flag must be set now or we won't know that this node is projected\n                        // if the nodes are inserted into a container later.\n                        nodeToProject.flags |= 2 /* isProjected */;\n                        appendProjectedNode(nodeToProject, tProjectionNode, lView, projectedView);\n                    }\n                }\n                nodeToProject = nodeToProject.projectionNext;\n            }\n        }\n    }\n    /**\n     * Loops over all children of a TNode container and appends them to the DOM\n     *\n     * @param ngContainerChildTNode The first child of the TNode container\n     * @param tProjectionNode The projection (ng-content) TNode\n     * @param currentView Current LView\n     * @param projectionView Projection view (view above current)\n     */\n    function appendProjectedChildren(ngContainerChildTNode, tProjectionNode, currentView, projectionView) {\n        while (ngContainerChildTNode) {\n            appendProjectedNode(ngContainerChildTNode, tProjectionNode, currentView, projectionView);\n            ngContainerChildTNode = ngContainerChildTNode.next;\n        }\n    }\n    /**\n     * Appends a projected node to the DOM, or in the case of a projected container,\n     * appends the nodes from all of the container's active views to the DOM.\n     *\n     * @param projectedTNode The TNode to be projected\n     * @param tProjectionNode The projection (ng-content) TNode\n     * @param currentView Current LView\n     * @param projectionView Projection view (view above current)\n     */\n    function appendProjectedNode(projectedTNode, tProjectionNode, currentView, projectionView) {\n        var native = getNativeByTNode(projectedTNode, projectionView);\n        appendChild(native, tProjectionNode, currentView);\n        // the projected contents are processed while in the shadow view (which is the currentView)\n        // therefore we need to extract the view where the host element lives since it's the\n        // logical container of the content projected views\n        attachPatchData(native, projectionView);\n        var nodeOrContainer = projectionView[projectedTNode.index];\n        if (projectedTNode.type === 0 /* Container */) {\n            // The node we are adding is a container and we are adding it to an element which\n            // is not a component (no more re-projection).\n            // Alternatively a container is projected at the root of a component's template\n            // and can't be re-projected (as not content of any component).\n            // Assign the final projection location in those cases.\n            for (var i = CONTAINER_HEADER_OFFSET; i < nodeOrContainer.length; i++) {\n                addRemoveViewFromContainer(nodeOrContainer[i], true, nodeOrContainer[NATIVE]);\n            }\n        }\n        else if (projectedTNode.type === 5 /* IcuContainer */) {\n            // The node we are adding is an ICU container which is why we also need to project all the\n            // children nodes that might have been created previously and are linked to this anchor\n            var ngContainerChildTNode = projectedTNode.child;\n            appendProjectedChildren(ngContainerChildTNode, ngContainerChildTNode, projectionView, projectionView);\n        }\n        else {\n            if (projectedTNode.type === 4 /* ElementContainer */) {\n                appendProjectedChildren(projectedTNode.child, tProjectionNode, currentView, projectionView);\n            }\n            if (isLContainer(nodeOrContainer)) {\n                appendChild(nodeOrContainer[NATIVE], tProjectionNode, currentView);\n            }\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Creates an LContainer for inline views, e.g.\n     *\n     * % if (showing) {\n     *   <div></div>\n     * % }\n     *\n     * @param index The index of the container in the data array\n     *\n     * @codeGenApi\n     */\n    function ɵɵcontainer(index) {\n        var tNode = containerInternal(index, null, null);\n        var lView = getLView();\n        if (lView[TVIEW].firstTemplatePass) {\n            tNode.tViews = [];\n        }\n        addTContainerToQueries(lView, tNode);\n        setIsNotParent();\n    }\n    /**\n     * Creates an LContainer for an ng-template (dynamically-inserted view), e.g.\n     *\n     * <ng-template #foo>\n     *    <div></div>\n     * </ng-template>\n     *\n     * @param index The index of the container in the data array\n     * @param templateFn Inline template\n     * @param consts The number of nodes, local refs, and pipes for this template\n     * @param vars The number of bindings for this template\n     * @param tagName The name of the container element, if applicable\n     * @param attrs The attrs attached to the container, if applicable\n     * @param localRefs A set of local reference bindings on the element.\n     * @param localRefExtractor A function which extracts local-refs values from the template.\n     *        Defaults to the current element associated with the local-ref.\n     *\n     * @codeGenApi\n     */\n    function ɵɵtemplate(index, templateFn, consts, vars, tagName, attrs, localRefs, localRefExtractor) {\n        var lView = getLView();\n        var tView = lView[TVIEW];\n        // TODO: consider a separate node type for templates\n        var tContainerNode = containerInternal(index, tagName || null, attrs || null);\n        if (tView.firstTemplatePass) {\n            tContainerNode.tViews = createTView(-1, templateFn, consts, vars, tView.directiveRegistry, tView.pipeRegistry, null, null);\n        }\n        createDirectivesAndLocals(tView, lView, localRefs, localRefExtractor);\n        addTContainerToQueries(lView, tContainerNode);\n        attachPatchData(getNativeByTNode(tContainerNode, lView), lView);\n        registerPostOrderHooks(tView, tContainerNode);\n        setIsNotParent();\n    }\n    /**\n     * Sets a container up to receive views.\n     *\n     * @param index The index of the container in the data array\n     *\n     * @codeGenApi\n     */\n    function ɵɵcontainerRefreshStart(index) {\n        var lView = getLView();\n        var tView = lView[TVIEW];\n        var previousOrParentTNode = loadInternal(tView.data, index);\n        ngDevMode && assertNodeType(previousOrParentTNode, 0 /* Container */);\n        setPreviousOrParentTNode(previousOrParentTNode, true);\n        lView[index + HEADER_OFFSET][ACTIVE_INDEX] = 0;\n        // We need to execute init hooks here so ngOnInit hooks are called in top level views\n        // before they are called in embedded views (for backwards compatibility).\n        executePreOrderHooks(lView, tView, getCheckNoChangesMode(), undefined);\n    }\n    /**\n     * Marks the end of the LContainer.\n     *\n     * Marking the end of LContainer is the time when to child views get inserted or removed.\n     *\n     * @codeGenApi\n     */\n    function ɵɵcontainerRefreshEnd() {\n        var previousOrParentTNode = getPreviousOrParentTNode();\n        if (getIsParent()) {\n            setIsNotParent();\n        }\n        else {\n            ngDevMode && assertNodeType(previousOrParentTNode, 2 /* View */);\n            ngDevMode && assertHasParent(previousOrParentTNode);\n            previousOrParentTNode = previousOrParentTNode.parent;\n            setPreviousOrParentTNode(previousOrParentTNode, false);\n        }\n        ngDevMode && assertNodeType(previousOrParentTNode, 0 /* Container */);\n        var lContainer = getLView()[previousOrParentTNode.index];\n        var nextIndex = lContainer[ACTIVE_INDEX];\n        // remove extra views at the end of the container\n        while (nextIndex < lContainer.length - CONTAINER_HEADER_OFFSET) {\n            removeView(lContainer, nextIndex);\n        }\n    }\n    /**\n    * Reporting a TContainer node queries is a 2-step process as we need to:\n    * - check if the container node itself is matching (query might match a <ng-template> node);\n    * - prepare room for nodes from views that might be created based on the TemplateRef linked to this\n    * container.\n    *\n    * Those 2 operations need to happen in the specific order (match the container node itself, then\n    * prepare space for nodes from views).\n    */\n    function addTContainerToQueries(lView, tContainerNode) {\n        var queries = lView[QUERIES];\n        if (queries) {\n            var lContainer = lView[tContainerNode.index];\n            if (lContainer[QUERIES]) {\n                // Query container should only exist if it was created through a dynamic view\n                // in a directive constructor. In this case, we must splice the template\n                // matches in before the view matches to ensure query results in embedded views\n                // don't clobber query results on the template node itself.\n                queries.insertNodeBeforeViews(tContainerNode);\n            }\n            else {\n                queries.addNode(tContainerNode);\n                lContainer[QUERIES] = queries.container();\n            }\n        }\n    }\n    function containerInternal(index, tagName, attrs) {\n        var lView = getLView();\n        ngDevMode && assertEqual(lView[BINDING_INDEX], lView[TVIEW].bindingStartIndex, 'container nodes should be created before any bindings');\n        var adjustedIndex = index + HEADER_OFFSET;\n        ngDevMode && assertDataInRange(lView, index + HEADER_OFFSET);\n        ngDevMode && ngDevMode.rendererCreateComment++;\n        var comment = lView[index + HEADER_OFFSET] =\n            lView[RENDERER].createComment(ngDevMode ? 'container' : '');\n        var tNode = getOrCreateTNode(lView[TVIEW], lView[T_HOST], index, 0 /* Container */, tagName, attrs);\n        var lContainer = lView[adjustedIndex] =\n            createLContainer(lView[adjustedIndex], lView, comment, tNode);\n        appendChild(comment, tNode, lView);\n        // Containers are added to the current view tree instead of their embedded views\n        // because views can be removed and re-inserted.\n        addToViewTree(lView, lContainer);\n        ngDevMode && assertNodeType(getPreviousOrParentTNode(), 0 /* Container */);\n        return tNode;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Store a value in the `data` at a given `index`. */\n    function store(index, value) {\n        var lView = getLView();\n        var tView = lView[TVIEW];\n        // We don't store any static data for local variables, so the first time\n        // we see the template, we should store as null to avoid a sparse array\n        var adjustedIndex = index + HEADER_OFFSET;\n        if (adjustedIndex >= tView.data.length) {\n            tView.data[adjustedIndex] = null;\n            tView.blueprint[adjustedIndex] = null;\n        }\n        lView[adjustedIndex] = value;\n    }\n    /**\n     * Retrieves a local reference from the current contextViewData.\n     *\n     * If the reference to retrieve is in a parent view, this instruction is used in conjunction\n     * with a nextContext() call, which walks up the tree and updates the contextViewData instance.\n     *\n     * @param index The index of the local ref in contextViewData.\n     *\n     * @codeGenApi\n     */\n    function ɵɵreference(index) {\n        var contextLView = getContextLView();\n        return loadInternal(contextLView, index);\n    }\n    /**\n     * Retrieves a value from current `viewData`.\n     *\n     * @codeGenApi\n     */\n    function ɵɵload(index) {\n        return loadInternal(getLView(), index);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function ɵɵdirectiveInject(token, flags) {\n        if (flags === void 0) { flags = exports.InjectFlags.Default; }\n        token = resolveForwardRef(token);\n        var lView = getLView();\n        // Fall back to inject() if view hasn't been created. This situation can happen in tests\n        // if inject utilities are used before bootstrapping.\n        if (lView == null)\n            return ɵɵinject(token, flags);\n        return getOrCreateInjectable(getPreviousOrParentTNode(), lView, token, flags);\n    }\n    /**\n     * Facade for the attribute injection from DI.\n     *\n     * @codeGenApi\n     */\n    function ɵɵinjectAttribute(attrNameToInject) {\n        return injectAttributeImpl(getPreviousOrParentTNode(), attrNameToInject);\n    }\n\n    /**\n     * --------\n     *\n     * This file contains the core logic for how styling instructions are processed in Angular.\n     *\n     * To learn more about the algorithm see `TStylingContext`.\n     *\n     * --------\n     */\n    /**\n     * Temporary function to bridge styling functionality between this new\n     * refactor (which is here inside of `styling_next/`) and the old\n     * implementation (which lives inside of `styling/`).\n     *\n     * This function is executed during the creation block of an element.\n     * Because the existing styling implementation issues a call to the\n     * `styling()` instruction, this instruction will also get run. The\n     * central idea here is that the directive index values are bound\n     * into the context. The directive index is temporary and is only\n     * required until the `select(n)` instruction is fully functional.\n     */\n    function stylingInit() {\n        var lView = getLView();\n        var index = getSelectedIndex();\n        var tNode = getTNode(index, lView);\n        updateLastDirectiveIndex(tNode, getActiveDirectiveStylingIndex());\n    }\n    /**\n     * Sets the current style sanitizer function which will then be used\n     * within all follow-up prop and map-based style binding instructions\n     * for the given element.\n     *\n     * Note that once styling has been applied to the element (i.e. once\n     * `select(n)` is executed or the hostBindings/template function exits)\n     * then the active `sanitizerFn` will be set to `null`. This means that\n     * once styling is applied to another element then a another call to\n     * `styleSanitizer` will need to be made.\n     *\n     * @param sanitizerFn The sanitization function that will be used to\n     *       process style prop/value entries.\n     *\n     * @codeGenApi\n     */\n    function styleSanitizer(sanitizer) {\n        setCurrentStyleSanitizer(sanitizer);\n    }\n    /**\n     * Mirror implementation of the `styleProp()` instruction (found in `instructions/styling.ts`).\n     */\n    function styleProp(prop, value, suffix) {\n        _stylingProp(prop, resolveStylePropValue(value, suffix), false);\n    }\n    /**\n     * Mirror implementation of the `classProp()` instruction (found in `instructions/styling.ts`).\n     */\n    function classProp(className, value) {\n        _stylingProp(className, value, true);\n    }\n    /**\n     * Shared function used to update a prop-based styling binding for an element.\n     */\n    function _stylingProp(prop, value, isClassBased) {\n        var index = getSelectedIndex();\n        var lView = getLView();\n        var bindingIndex = lView[BINDING_INDEX]++;\n        var tNode = getTNode(index, lView);\n        var defer = getActiveDirectiveSuperClassHeight() > 0;\n        if (isClassBased) {\n            updateClassBinding(getClassesContext(tNode), lView, prop, bindingIndex, value, defer, false);\n        }\n        else {\n            var sanitizer = getCurrentOrLViewSanitizer(lView);\n            updateStyleBinding(getStylesContext(tNode), lView, prop, bindingIndex, value, sanitizer, defer, false);\n        }\n    }\n    /**\n     * Mirror implementation of the `styleMap()` instruction (found in `instructions/styling.ts`).\n     */\n    function styleMap(styles) {\n        _stylingMap(styles, false);\n    }\n    /**\n     * Mirror implementation of the `classMap()` instruction (found in `instructions/styling.ts`).\n     */\n    function classMap(classes) {\n        _stylingMap(classes, true);\n    }\n    /**\n     * Shared function used to update a map-based styling binding for an element.\n     *\n     * When this function is called it will activate support for `[style]` and\n     * `[class]` bindings in Angular.\n     */\n    function _stylingMap(value, isClassBased) {\n        activeStylingMapFeature();\n        var index = getSelectedIndex();\n        var lView = getLView();\n        var bindingIndex = lView[BINDING_INDEX]++;\n        if (value !== NO_CHANGE) {\n            var tNode = getTNode(index, lView);\n            var defer = getActiveDirectiveSuperClassHeight() > 0;\n            var oldValue = lView[bindingIndex];\n            var valueHasChanged = hasValueChanged$1(oldValue, value);\n            var lStylingMap = normalizeIntoStylingMap(oldValue, value);\n            if (isClassBased) {\n                updateClassBinding(getClassesContext(tNode), lView, null, bindingIndex, lStylingMap, defer, valueHasChanged);\n            }\n            else {\n                var sanitizer = getCurrentOrLViewSanitizer(lView);\n                updateStyleBinding(getStylesContext(tNode), lView, null, bindingIndex, lStylingMap, sanitizer, defer, valueHasChanged);\n            }\n        }\n    }\n    /**\n     * Temporary function to bridge styling functionality between this new\n     * refactor (which is here inside of `styling_next/`) and the old\n     * implementation (which lives inside of `styling/`).\n     *\n     * The new styling refactor ensures that styling flushing is called\n     * automatically when a template function exits or a follow-up element\n     * is visited (i.e. when `select(n)` is called). Because the `select(n)`\n     * instruction is not fully implemented yet (it doesn't actually execute\n     * host binding instruction code at the right time), this means that a\n     * styling apply function is still needed.\n     *\n     * This function is a mirror implementation of the `stylingApply()`\n     * instruction (found in `instructions/styling.ts`).\n     */\n    function stylingApply() {\n        var index = getSelectedIndex();\n        var lView = getLView();\n        var tNode = getTNode(index, lView);\n        var renderer = getRenderer(tNode, lView);\n        var native = getNativeFromLView(index, lView);\n        var directiveIndex = getActiveDirectiveStylingIndex();\n        applyClasses(renderer, lView, getClassesContext(tNode), native, directiveIndex);\n        var sanitizer = getCurrentOrLViewSanitizer(lView);\n        applyStyles(renderer, lView, getStylesContext(tNode), native, directiveIndex, sanitizer);\n        setCurrentStyleSanitizer(null);\n    }\n    /**\n     * Temporary function to bridge styling functionality between this new\n     * refactor (which is here inside of `styling_next/`) and the old\n     * implementation (which lives inside of `styling/`).\n     *\n     * The purpose of this function is to traverse through the LView data\n     * for a specific element index and return the native node. Because the\n     * current implementation relies on there being a styling context array,\n     * the code below will need to loop through these array values until it\n     * gets a native element node.\n     *\n     * Note that this code is temporary and will disappear once the new\n     * styling refactor lands in its entirety.\n     */\n    function getNativeFromLView(index, viewData) {\n        var storageIndex = index + HEADER_OFFSET;\n        var slotValue = viewData[storageIndex];\n        var wrapper = viewData;\n        while (Array.isArray(slotValue)) {\n            wrapper = slotValue;\n            slotValue = slotValue[HOST];\n        }\n        if (isStylingContext(wrapper)) {\n            return wrapper[0 /* ElementPosition */];\n        }\n        else {\n            return slotValue;\n        }\n    }\n    function getRenderer(tNode, lView) {\n        return tNode.type === 3 /* Element */ ? lView[RENDERER] : null;\n    }\n    /**\n     * Searches and assigns provided all static style/class entries (found in the `attrs` value)\n     * and registers them in their respective styling contexts.\n     */\n    function registerInitialStylingIntoContext(tNode, attrs, startIndex) {\n        var classesContext;\n        var stylesContext;\n        var mode = -1;\n        for (var i = startIndex; i < attrs.length; i++) {\n            var attr = attrs[i];\n            if (typeof attr == 'number') {\n                mode = attr;\n            }\n            else if (mode == 1 /* Classes */) {\n                classesContext = classesContext || getClassesContext(tNode);\n                registerBinding(classesContext, -1, attr, true, false);\n            }\n            else if (mode == 2 /* Styles */) {\n                stylesContext = stylesContext || getStylesContext(tNode);\n                registerBinding(stylesContext, -1, attr, attrs[++i], false);\n            }\n        }\n    }\n    /**\n     * Mirror implementation of the same function found in `instructions/styling.ts`.\n     */\n    function getActiveDirectiveStylingIndex() {\n        // whenever a directive's hostBindings function is called a uniqueId value\n        // is assigned. Normally this is enough to help distinguish one directive\n        // from another for the styling context, but there are situations where a\n        // sub-class directive could inherit and assign styling in concert with a\n        // parent directive. To help the styling code distinguish between a parent\n        // sub-classed directive the inheritance depth is taken into account as well.\n        return getActiveDirectiveId() + getActiveDirectiveSuperClassDepth();\n    }\n    /**\n     * Temporary function that will update the max directive index value in\n     * both the classes and styles contexts present on the provided `tNode`.\n     *\n     * This code is only used because the `select(n)` code functionality is not\n     * yet 100% functional. The `select(n)` instruction cannot yet evaluate host\n     * bindings function code in sync with the associated template function code.\n     * For this reason the styling algorithm needs to track the last directive index\n     * value so that it knows exactly when to render styling to the element since\n     * `stylingApply()` is called multiple times per CD (`stylingApply` will be\n     * removed once `select(n)` is fixed).\n     */\n    function updateLastDirectiveIndex(tNode, directiveIndex) {\n        updateContextDirectiveIndex(getClassesContext(tNode), directiveIndex);\n        updateContextDirectiveIndex(getStylesContext(tNode), directiveIndex);\n    }\n    function getStylesContext(tNode) {\n        return getContext(tNode, false);\n    }\n    function getClassesContext(tNode) {\n        return getContext(tNode, true);\n    }\n    /**\n     * Returns/instantiates a styling context from/to a `tNode` instance.\n     */\n    function getContext(tNode, isClassBased) {\n        var context = isClassBased ? tNode.newClasses : tNode.newStyles;\n        if (!context) {\n            context = allocTStylingContext();\n            if (ngDevMode) {\n                attachStylingDebugObject(context);\n            }\n            if (isClassBased) {\n                tNode.newClasses = context;\n            }\n            else {\n                tNode.newStyles = context;\n            }\n        }\n        return context;\n    }\n    function resolveStylePropValue(value, suffix) {\n        var resolvedValue = null;\n        if (value !== null) {\n            if (suffix) {\n                // when a suffix is applied then it will bypass\n                // sanitization entirely (b/c a new string is created)\n                resolvedValue = renderStringify(value) + suffix;\n            }\n            else {\n                // sanitization happens by dealing with a String value\n                // this means that the string value will be passed through\n                // into the style rendering later (which is where the value\n                // will be sanitized before it is applied)\n                resolvedValue = value;\n            }\n        }\n        return resolvedValue;\n    }\n\n    /*\n     * The contents of this file include the instructions for all styling-related\n     * operations in Angular.\n     *\n     * The instructions present in this file are:\n     *\n     * Template level styling instructions:\n     * - styling\n     * - styleMap\n     * - classMap\n     * - styleProp\n     * - classProp\n     * - stylingApply\n     */\n    /**\n     * Allocates style and class binding properties on the element during creation mode.\n     *\n     * This instruction is meant to be called during creation mode to register all\n     * dynamic style and class bindings on the element. Note that this is only used\n     * for binding values (see `elementStart` to learn how to assign static styling\n     * values to an element).\n     *\n     * @param classBindingNames An array containing bindable class names.\n     *        The `classProp` instruction refers to the class name by index in\n     *        this array (i.e. `['foo', 'bar']` means `foo=0` and `bar=1`).\n     * @param styleBindingNames An array containing bindable style properties.\n     *        The `styleProp` instruction refers to the class name by index in\n     *        this array (i.e. `['width', 'height']` means `width=0` and `height=1`).\n     * @param styleSanitizer An optional sanitizer function that will be used to sanitize any CSS\n     *        style values that are applied to the element (during rendering).\n     *\n     * Note that this will allocate the provided style/class bindings to the host element if\n     * this function is called within a host binding.\n     *\n     * @codeGenApi\n     */\n    function ɵɵstyling(classBindingNames, styleBindingNames, styleSanitizer) {\n        var tNode = getPreviousOrParentTNode();\n        if (!tNode.stylingTemplate) {\n            tNode.stylingTemplate = createEmptyStylingContext();\n        }\n        var directiveStylingIndex = getActiveDirectiveStylingIndex$1();\n        if (directiveStylingIndex) {\n            // this is temporary hack to get the existing styling instructions to\n            // play ball with the new refactored implementation.\n            // TODO (matsko): remove this once the old implementation is not needed.\n            if (runtimeIsNewStylingInUse()) {\n                stylingInit();\n            }\n            // despite the binding being applied in a queue (below), the allocation\n            // of the directive into the context happens right away. The reason for\n            // this is to retain the ordering of the directives (which is important\n            // for the prioritization of bindings).\n            allocateOrUpdateDirectiveIntoContext(tNode.stylingTemplate, directiveStylingIndex);\n            var fns = tNode.onElementCreationFns = tNode.onElementCreationFns || [];\n            fns.push(function () {\n                initStyling(tNode, classBindingNames, styleBindingNames, styleSanitizer, directiveStylingIndex);\n                registerHostDirective(tNode.stylingTemplate, directiveStylingIndex);\n            });\n        }\n        else {\n            // calling the function below ensures that the template's binding values\n            // are applied as the first set of bindings into the context. If any other\n            // styling bindings are set on the same element (by directives and/or\n            // components) then they will be applied at the end of the `elementEnd`\n            // instruction (because directives are created first before styling is\n            // executed for a new element).\n            initStyling(tNode, classBindingNames, styleBindingNames, styleSanitizer, DEFAULT_TEMPLATE_DIRECTIVE_INDEX);\n        }\n    }\n    function initStyling(tNode, classBindingNames, styleBindingNames, styleSanitizer, directiveStylingIndex) {\n        updateContextWithBindings(tNode.stylingTemplate, directiveStylingIndex, classBindingNames, styleBindingNames, styleSanitizer);\n    }\n    /**\n     * Update a style binding on an element with the provided value.\n     *\n     * If the style value is falsy then it will be removed from the element\n     * (or assigned a different value depending if there are any styles placed\n     * on the element with `styleMap` or any static styles that are\n     * present from when the element was created with `styling`).\n     *\n     * Note that the styling element is updated as part of `stylingApply`.\n     *\n     * @param styleIndex Index of style to update. This index value refers to the\n     *        index of the style in the style bindings array that was passed into\n     *        `styling`.\n     * @param value New value to write (falsy to remove).\n     * @param suffix Optional suffix. Used with scalar values to add unit such as `px`.\n     *        Note that when a suffix is provided then the underlying sanitizer will\n     *        be ignored.\n     * @param forceOverride Whether or not to update the styling value immediately\n     *        (despite the other bindings possibly having priority)\n     *\n     * Note that this will apply the provided style value to the host element if this function is called\n     * within a host binding.\n     *\n     * @codeGenApi\n     */\n    function ɵɵstyleProp(styleIndex, value, suffix, forceOverride) {\n        var index = getSelectedIndex();\n        var valueToAdd = resolveStylePropValue$1(value, suffix);\n        var stylingContext = getStylingContext(index, getLView());\n        var directiveStylingIndex = getActiveDirectiveStylingIndex$1();\n        if (directiveStylingIndex) {\n            var args = [stylingContext, styleIndex, valueToAdd, directiveStylingIndex, forceOverride];\n            enqueueHostInstruction(stylingContext, directiveStylingIndex, updateStyleProp, args);\n        }\n        else {\n            updateStyleProp(stylingContext, styleIndex, valueToAdd, DEFAULT_TEMPLATE_DIRECTIVE_INDEX, forceOverride);\n        }\n        if (runtimeIsNewStylingInUse()) {\n            var prop = getBindingNameFromIndex(stylingContext, styleIndex, directiveStylingIndex, false);\n            // the reason why we cast the value as `boolean` is\n            // because the new styling refactor does not yet support\n            // sanitization or animation players.\n            styleProp(prop, value, suffix);\n        }\n    }\n    function resolveStylePropValue$1(value, suffix) {\n        var valueToAdd = null;\n        if (value !== null) {\n            if (suffix) {\n                // when a suffix is applied then it will bypass\n                // sanitization entirely (b/c a new string is created)\n                valueToAdd = renderStringify(value) + suffix;\n            }\n            else {\n                // sanitization happens by dealing with a String value\n                // this means that the string value will be passed through\n                // into the style rendering later (which is where the value\n                // will be sanitized before it is applied)\n                valueToAdd = value;\n            }\n        }\n        return valueToAdd;\n    }\n    /**\n     * Update a class binding on an element with the provided value.\n     *\n     * This instruction is meant to handle the `[class.foo]=\"exp\"` case and,\n     * therefore, the class binding itself must already be allocated using\n     * `styling` within the creation block.\n     *\n     * @param classIndex Index of class to toggle. This index value refers to the\n     *        index of the class in the class bindings array that was passed into\n     *        `styling` (which is meant to be called before this\n     *        function is).\n     * @param value A true/false value which will turn the class on or off.\n     * @param forceOverride Whether or not this value will be applied regardless\n     *        of where it is being set within the styling priority structure.\n     *\n     * Note that this will apply the provided class value to the host element if this function\n     * is called within a host binding.\n     *\n     * @codeGenApi\n     */\n    function ɵɵclassProp(classIndex, value, forceOverride) {\n        var index = getSelectedIndex();\n        var input = (value instanceof BoundPlayerFactory) ?\n            value :\n            booleanOrNull(value);\n        var directiveStylingIndex = getActiveDirectiveStylingIndex$1();\n        var stylingContext = getStylingContext(index, getLView());\n        if (directiveStylingIndex) {\n            var args = [stylingContext, classIndex, input, directiveStylingIndex, forceOverride];\n            enqueueHostInstruction(stylingContext, directiveStylingIndex, updateClassProp, args);\n        }\n        else {\n            updateClassProp(stylingContext, classIndex, input, DEFAULT_TEMPLATE_DIRECTIVE_INDEX, forceOverride);\n        }\n        if (runtimeIsNewStylingInUse()) {\n            var prop = getBindingNameFromIndex(stylingContext, classIndex, directiveStylingIndex, true);\n            // the reason why we cast the value as `boolean` is\n            // because the new styling refactor does not yet support\n            // sanitization or animation players.\n            classProp(prop, input);\n        }\n    }\n    function booleanOrNull(value) {\n        if (typeof value === 'boolean')\n            return value;\n        return value ? true : null;\n    }\n    /**\n     * Update style bindings using an object literal on an element.\n     *\n     * This instruction is meant to apply styling via the `[style]=\"exp\"` template bindings.\n     * When styles are applied to the element they will then be updated with respect to\n     * any styles/classes set via `styleProp`. If any styles are set to falsy\n     * then they will be removed from the element.\n     *\n     * Note that the styling instruction will not be applied until `stylingApply` is called.\n     *\n     * @param styles A key/value style map of the styles that will be applied to the given element.\n     *        Any missing styles (that have already been applied to the element beforehand) will be\n     *        removed (unset) from the element's styling.\n     *\n     * Note that this will apply the provided styleMap value to the host element if this function\n     * is called within a host binding.\n     *\n     * @codeGenApi\n     */\n    function ɵɵstyleMap(styles) {\n        var index = getSelectedIndex();\n        var lView = getLView();\n        var stylingContext = getStylingContext(index, lView);\n        var directiveStylingIndex = getActiveDirectiveStylingIndex$1();\n        if (directiveStylingIndex) {\n            var args = [stylingContext, styles, directiveStylingIndex];\n            enqueueHostInstruction(stylingContext, directiveStylingIndex, updateStyleMap, args);\n        }\n        else {\n            var tNode = getTNode(index, lView);\n            // inputs are only evaluated from a template binding into a directive, therefore,\n            // there should not be a situation where a directive host bindings function\n            // evaluates the inputs (this should only happen in the template function)\n            if (hasStyleInput(tNode) && styles !== NO_CHANGE) {\n                var initialStyles = getInitialClassNameValue(stylingContext);\n                var styleInputVal = (initialStyles.length ? (initialStyles + ' ') : '') + forceStylesAsString(styles);\n                setInputsForProperty(lView, tNode.inputs['style'], styleInputVal);\n                styles = NO_CHANGE;\n            }\n            updateStyleMap(stylingContext, styles);\n        }\n        if (runtimeIsNewStylingInUse()) {\n            styleMap(styles);\n        }\n    }\n    /**\n     * Update class bindings using an object literal or class-string on an element.\n     *\n     * This instruction is meant to apply styling via the `[class]=\"exp\"` template bindings.\n     * When classes are applied to the element they will then be updated with\n     * respect to any styles/classes set via `classProp`. If any\n     * classes are set to falsy then they will be removed from the element.\n     *\n     * Note that the styling instruction will not be applied until `stylingApply` is called.\n     * Note that this will the provided classMap value to the host element if this function is called\n     * within a host binding.\n     *\n     * @param classes A key/value map or string of CSS classes that will be added to the\n     *        given element. Any missing classes (that have already been applied to the element\n     *        beforehand) will be removed (unset) from the element's list of CSS classes.\n     *\n     * @codeGenApi\n     */\n    function ɵɵclassMap(classes) {\n        var index = getSelectedIndex();\n        var lView = getLView();\n        var stylingContext = getStylingContext(index, lView);\n        var directiveStylingIndex = getActiveDirectiveStylingIndex$1();\n        if (directiveStylingIndex) {\n            var args = [stylingContext, classes, directiveStylingIndex];\n            enqueueHostInstruction(stylingContext, directiveStylingIndex, updateClassMap, args);\n        }\n        else {\n            var tNode = getTNode(index, lView);\n            // inputs are only evaluated from a template binding into a directive, therefore,\n            // there should not be a situation where a directive host bindings function\n            // evaluates the inputs (this should only happen in the template function)\n            if (hasClassInput(tNode) && classes !== NO_CHANGE) {\n                var initialClasses = getInitialClassNameValue(stylingContext);\n                var classInputVal = (initialClasses.length ? (initialClasses + ' ') : '') + forceClassesAsString(classes);\n                setInputsForProperty(lView, tNode.inputs['class'], classInputVal);\n                classes = NO_CHANGE;\n            }\n            updateClassMap(stylingContext, classes);\n        }\n        if (runtimeIsNewStylingInUse()) {\n            classMap(classes);\n        }\n    }\n    /**\n     * Apply all style and class binding values to the element.\n     *\n     * This instruction is meant to be run after `styleMap`, `classMap`,\n     * `styleProp` or `classProp` instructions have been run and will\n     * only apply styling to the element if any styling bindings have been updated.\n     *\n     * @codeGenApi\n     */\n    function ɵɵstylingApply() {\n        var index = getSelectedIndex();\n        var directiveStylingIndex = getActiveDirectiveStylingIndex$1() || DEFAULT_TEMPLATE_DIRECTIVE_INDEX;\n        var lView = getLView();\n        var tNode = getTNode(index, lView);\n        // if a non-element value is being processed then we can't render values\n        // on the element at all therefore by setting the renderer to null then\n        // the styling apply code knows not to actually apply the values...\n        var renderer = tNode.type === 3 /* Element */ ? lView[RENDERER] : null;\n        var isFirstRender = (lView[FLAGS] & 8 /* FirstLViewPass */) !== 0;\n        var stylingContext = getStylingContext(index, lView);\n        if (runtimeAllowOldStyling()) {\n            var totalPlayersQueued = renderStyling(stylingContext, renderer, lView, isFirstRender, null, null, directiveStylingIndex);\n            if (totalPlayersQueued > 0) {\n                var rootContext = getRootContext(lView);\n                scheduleTick(rootContext, 2 /* FlushPlayers */);\n            }\n        }\n        // because select(n) may not run between every instruction, the cached styling\n        // context may not get cleared between elements. The reason for this is because\n        // styling bindings (like `[style]` and `[class]`) are not recognized as property\n        // bindings by default so a select(n) instruction is not generated. To ensure the\n        // context is loaded correctly for the next element the cache below is pre-emptively\n        // cleared because there is no code in Angular that applies more styling code after a\n        // styling flush has occurred. Note that this will be fixed once FW-1254 lands.\n        setCachedStylingContext(null);\n        if (runtimeIsNewStylingInUse()) {\n            stylingApply();\n        }\n    }\n    function getActiveDirectiveStylingIndex$1() {\n        // whenever a directive's hostBindings function is called a uniqueId value\n        // is assigned. Normally this is enough to help distinguish one directive\n        // from another for the styling context, but there are situations where a\n        // sub-class directive could inherit and assign styling in concert with a\n        // parent directive. To help the styling code distinguish between a parent\n        // sub-classed directive the inheritance depth is taken into account as well.\n        return getActiveDirectiveId() + getActiveDirectiveSuperClassDepth();\n    }\n    function getStylingContext(index, lView) {\n        var context = getCachedStylingContext();\n        if (!context) {\n            context = getStylingContextFromLView(index + HEADER_OFFSET, lView);\n            setCachedStylingContext(context);\n        }\n        else if (ngDevMode) {\n            var actualContext = getStylingContextFromLView(index + HEADER_OFFSET, lView);\n            assertEqual(context, actualContext, 'The cached styling context is invalid');\n        }\n        return context;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Create DOM element. The instruction must later be followed by `elementEnd()` call.\n     *\n     * @param index Index of the element in the LView array\n     * @param name Name of the DOM Node\n     * @param attrs Statically bound set of attributes, classes, and styles to be written into the DOM\n     *              element on creation. Use [AttributeMarker] to denote the meaning of this array.\n     * @param localRefs A set of local reference bindings on the element.\n     *\n     * Attributes and localRefs are passed as an array of strings where elements with an even index\n     * hold an attribute name and elements with an odd index hold an attribute value, ex.:\n     * ['id', 'warning5', 'class', 'alert']\n     *\n     * @codeGenApi\n     */\n    function ɵɵelementStart(index, name, attrs, localRefs) {\n        var lView = getLView();\n        var tView = lView[TVIEW];\n        ngDevMode && assertEqual(lView[BINDING_INDEX], tView.bindingStartIndex, 'elements should be created before any bindings ');\n        ngDevMode && ngDevMode.rendererCreateElement++;\n        ngDevMode && assertDataInRange(lView, index + HEADER_OFFSET);\n        var native = lView[index + HEADER_OFFSET] = elementCreate(name);\n        var renderer = lView[RENDERER];\n        var tNode = getOrCreateTNode(tView, lView[T_HOST], index, 3 /* Element */, name, attrs || null);\n        var initialStylesIndex = 0;\n        var initialClassesIndex = 0;\n        var lastAttrIndex = -1;\n        if (attrs) {\n            lastAttrIndex = setUpAttributes(native, attrs);\n            // it's important to only prepare styling-related datastructures once for a given\n            // tNode and not each time an element is created. Also, the styling code is designed\n            // to be patched and constructed at various points, but only up until the styling\n            // template is first allocated (which happens when the very first style/class binding\n            // value is evaluated). When the template is allocated (when it turns into a context)\n            // then the styling template is locked and cannot be further extended (it can only be\n            // instantiated into a context per element)\n            setNodeStylingTemplate(tView, tNode, attrs, lastAttrIndex);\n            var stylingTemplate = tNode.stylingTemplate;\n            if (stylingTemplate) {\n                // the initial style/class values are rendered immediately after having been\n                // initialized into the context so the element styling is ready when directives\n                // are initialized (since they may read style/class values in their constructor)\n                initialStylesIndex = renderInitialStyles(native, stylingTemplate, renderer);\n                initialClassesIndex = renderInitialClasses(native, stylingTemplate, renderer);\n            }\n        }\n        appendChild(native, tNode, lView);\n        createDirectivesAndLocals(tView, lView, localRefs);\n        // any immediate children of a component or template container must be pre-emptively\n        // monkey-patched with the component view data so that the element can be inspected\n        // later on using any element discovery utility methods (see `element_discovery.ts`)\n        if (getElementDepthCount() === 0) {\n            attachPatchData(native, lView);\n        }\n        increaseElementDepthCount();\n        // if a directive contains a host binding for \"class\" then all class-based data will\n        // flow through that (except for `[class.prop]` bindings). This also includes initial\n        // static class values as well. (Note that this will be fixed once map-based `[style]`\n        // and `[class]` bindings work for multiple directives.)\n        if (tView.firstTemplatePass) {\n            var inputData = initializeTNodeInputs(tNode);\n            if (inputData && inputData.hasOwnProperty('class')) {\n                tNode.flags |= 8 /* hasClassInput */;\n            }\n            if (inputData && inputData.hasOwnProperty('style')) {\n                tNode.flags |= 16 /* hasStyleInput */;\n            }\n        }\n        // we render the styling again below in case any directives have set any `style` and/or\n        // `class` host attribute values...\n        if (tNode.stylingTemplate) {\n            renderInitialClasses(native, tNode.stylingTemplate, renderer, initialClassesIndex);\n            renderInitialStyles(native, tNode.stylingTemplate, renderer, initialStylesIndex);\n        }\n        if (runtimeIsNewStylingInUse() && lastAttrIndex >= 0) {\n            registerInitialStylingIntoContext(tNode, attrs, lastAttrIndex);\n        }\n        var currentQueries = lView[QUERIES];\n        if (currentQueries) {\n            currentQueries.addNode(tNode);\n            lView[QUERIES] = currentQueries.clone(tNode);\n        }\n        executeContentQueries(tView, tNode, lView);\n    }\n    /**\n     * Mark the end of the element.\n     *\n     * @codeGenApi\n     */\n    function ɵɵelementEnd() {\n        var previousOrParentTNode = getPreviousOrParentTNode();\n        ngDevMode && assertDefined(previousOrParentTNode, 'No parent node to close.');\n        if (getIsParent()) {\n            setIsNotParent();\n        }\n        else {\n            ngDevMode && assertHasParent(getPreviousOrParentTNode());\n            previousOrParentTNode = previousOrParentTNode.parent;\n            setPreviousOrParentTNode(previousOrParentTNode, false);\n        }\n        // this is required for all host-level styling-related instructions to run\n        // in the correct order\n        previousOrParentTNode.onElementCreationFns && applyOnCreateInstructions(previousOrParentTNode);\n        ngDevMode && assertNodeType(previousOrParentTNode, 3 /* Element */);\n        var lView = getLView();\n        var currentQueries = lView[QUERIES];\n        // Go back up to parent queries only if queries have been cloned on this element.\n        if (currentQueries && previousOrParentTNode.index === currentQueries.nodeIndex) {\n            lView[QUERIES] = currentQueries.parent;\n        }\n        registerPostOrderHooks(lView[TVIEW], previousOrParentTNode);\n        decreaseElementDepthCount();\n        // this is fired at the end of elementEnd because ALL of the stylingBindings code\n        // (for directives and the template) have now executed which means the styling\n        // context can be instantiated properly.\n        var stylingContext = null;\n        if (hasClassInput(previousOrParentTNode)) {\n            stylingContext = getStylingContextFromLView(previousOrParentTNode.index, lView);\n            setInputsForProperty(lView, previousOrParentTNode.inputs['class'], getInitialClassNameValue(stylingContext));\n        }\n        if (hasStyleInput(previousOrParentTNode)) {\n            stylingContext =\n                stylingContext || getStylingContextFromLView(previousOrParentTNode.index, lView);\n            setInputsForProperty(lView, previousOrParentTNode.inputs['style'], getInitialStyleStringValue(stylingContext));\n        }\n    }\n    /**\n     * Creates an empty element using {@link elementStart} and {@link elementEnd}\n     *\n     * @param index Index of the element in the data array\n     * @param name Name of the DOM Node\n     * @param attrs Statically bound set of attributes, classes, and styles to be written into the DOM\n     *              element on creation. Use [AttributeMarker] to denote the meaning of this array.\n     * @param localRefs A set of local reference bindings on the element.\n     *\n     * @codeGenApi\n     */\n    function ɵɵelement(index, name, attrs, localRefs) {\n        ɵɵelementStart(index, name, attrs, localRefs);\n        ɵɵelementEnd();\n    }\n    /**\n     * Assign static attribute values to a host element.\n     *\n     * This instruction will assign static attribute values as well as class and style\n     * values to an element within the host bindings function. Since attribute values\n     * can consist of different types of values, the `attrs` array must include the values in\n     * the following format:\n     *\n     * attrs = [\n     *   // static attributes (like `title`, `name`, `id`...)\n     *   attr1, value1, attr2, value,\n     *\n     *   // a single namespace value (like `x:id`)\n     *   NAMESPACE_MARKER, namespaceUri1, name1, value1,\n     *\n     *   // another single namespace value (like `x:name`)\n     *   NAMESPACE_MARKER, namespaceUri2, name2, value2,\n     *\n     *   // a series of CSS classes that will be applied to the element (no spaces)\n     *   CLASSES_MARKER, class1, class2, class3,\n     *\n     *   // a series of CSS styles (property + value) that will be applied to the element\n     *   STYLES_MARKER, prop1, value1, prop2, value2\n     * ]\n     *\n     * All non-class and non-style attributes must be defined at the start of the list\n     * first before all class and style values are set. When there is a change in value\n     * type (like when classes and styles are introduced) a marker must be used to separate\n     * the entries. The marker values themselves are set via entries found in the\n     * [AttributeMarker] enum.\n     *\n     * NOTE: This instruction is meant to used from `hostBindings` function only.\n     *\n     * @param directive A directive instance the styling is associated with.\n     * @param attrs An array of static values (attributes, classes and styles) with the correct marker\n     * values.\n     *\n     * @codeGenApi\n     */\n    function ɵɵelementHostAttrs(attrs) {\n        var hostElementIndex = getSelectedIndex();\n        var lView = getLView();\n        var tNode = getTNode(hostElementIndex, lView);\n        // non-element nodes (e.g. `<ng-container>`) are not rendered as actual\n        // element nodes and adding styles/classes on to them will cause runtime\n        // errors...\n        if (tNode.type === 3 /* Element */) {\n            var native = getNativeByTNode(tNode, lView);\n            var lastAttrIndex = setUpAttributes(native, attrs);\n            var stylingAttrsStartIndex = attrsStylingIndexOf(attrs, lastAttrIndex);\n            if (stylingAttrsStartIndex >= 0) {\n                var directiveStylingIndex = getActiveDirectiveStylingIndex$1();\n                if (tNode.stylingTemplate) {\n                    patchContextWithStaticAttrs(tNode.stylingTemplate, attrs, stylingAttrsStartIndex, directiveStylingIndex);\n                }\n                else {\n                    tNode.stylingTemplate =\n                        initializeStaticContext(attrs, stylingAttrsStartIndex, directiveStylingIndex);\n                }\n            }\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Creates a logical container for other nodes (<ng-container>) backed by a comment node in the DOM.\n     * The instruction must later be followed by `elementContainerEnd()` call.\n     *\n     * @param index Index of the element in the LView array\n     * @param attrs Set of attributes to be used when matching directives.\n     * @param localRefs A set of local reference bindings on the element.\n     *\n     * Even if this instruction accepts a set of attributes no actual attribute values are propagated to\n     * the DOM (as a comment node can't have attributes). Attributes are here only for directive\n     * matching purposes and setting initial inputs of directives.\n     *\n     * @codeGenApi\n     */\n    function ɵɵelementContainerStart(index, attrs, localRefs) {\n        var lView = getLView();\n        var tView = lView[TVIEW];\n        var renderer = lView[RENDERER];\n        var tagName = 'ng-container';\n        ngDevMode && assertEqual(lView[BINDING_INDEX], tView.bindingStartIndex, 'element containers should be created before any bindings');\n        ngDevMode && ngDevMode.rendererCreateComment++;\n        ngDevMode && assertDataInRange(lView, index + HEADER_OFFSET);\n        var native = lView[index + HEADER_OFFSET] = renderer.createComment(ngDevMode ? tagName : '');\n        ngDevMode && assertDataInRange(lView, index - 1);\n        var tNode = getOrCreateTNode(tView, lView[T_HOST], index, 4 /* ElementContainer */, tagName, attrs || null);\n        if (attrs) {\n            // While ng-container doesn't necessarily support styling, we use the style context to identify\n            // and execute directives on the ng-container.\n            setNodeStylingTemplate(tView, tNode, attrs, 0);\n        }\n        appendChild(native, tNode, lView);\n        createDirectivesAndLocals(tView, lView, localRefs);\n        attachPatchData(native, lView);\n        var currentQueries = lView[QUERIES];\n        if (currentQueries) {\n            currentQueries.addNode(tNode);\n            lView[QUERIES] = currentQueries.clone(tNode);\n        }\n        executeContentQueries(tView, tNode, lView);\n    }\n    /**\n     * Mark the end of the <ng-container>.\n     *\n     * @codeGenApi\n     */\n    function ɵɵelementContainerEnd() {\n        var previousOrParentTNode = getPreviousOrParentTNode();\n        var lView = getLView();\n        var tView = lView[TVIEW];\n        if (getIsParent()) {\n            setIsNotParent();\n        }\n        else {\n            ngDevMode && assertHasParent(previousOrParentTNode);\n            previousOrParentTNode = previousOrParentTNode.parent;\n            setPreviousOrParentTNode(previousOrParentTNode, false);\n        }\n        ngDevMode && assertNodeType(previousOrParentTNode, 4 /* ElementContainer */);\n        var currentQueries = lView[QUERIES];\n        // Go back up to parent queries only if queries have been cloned on this element.\n        if (currentQueries && previousOrParentTNode.index === currentQueries.nodeIndex) {\n            lView[QUERIES] = currentQueries.parent;\n        }\n        // this is required for all host-level styling-related instructions to run\n        // in the correct order\n        previousOrParentTNode.onElementCreationFns && applyOnCreateInstructions(previousOrParentTNode);\n        registerPostOrderHooks(tView, previousOrParentTNode);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Marks the start of an embedded view.\n     *\n     * @param viewBlockId The ID of this view\n     * @return boolean Whether or not this view is in creation mode\n     *\n     * @codeGenApi\n     */\n    function ɵɵembeddedViewStart(viewBlockId, consts, vars) {\n        var lView = getLView();\n        var previousOrParentTNode = getPreviousOrParentTNode();\n        // The previous node can be a view node if we are processing an inline for loop\n        var containerTNode = previousOrParentTNode.type === 2 /* View */ ?\n            previousOrParentTNode.parent :\n            previousOrParentTNode;\n        var lContainer = lView[containerTNode.index];\n        ngDevMode && assertNodeType(containerTNode, 0 /* Container */);\n        var viewToRender = scanForView(lContainer, lContainer[ACTIVE_INDEX], viewBlockId);\n        if (viewToRender) {\n            setIsParent();\n            enterView(viewToRender, viewToRender[TVIEW].node);\n        }\n        else {\n            // When we create a new LView, we always reset the state of the instructions.\n            viewToRender = createLView(lView, getOrCreateEmbeddedTView(viewBlockId, consts, vars, containerTNode), null, 16 /* CheckAlways */, null, null);\n            if (lContainer[QUERIES]) {\n                viewToRender[QUERIES] = lContainer[QUERIES].createView();\n            }\n            var tParentNode = getIsParent() ? previousOrParentTNode :\n                previousOrParentTNode && previousOrParentTNode.parent;\n            assignTViewNodeToLView(viewToRender[TVIEW], tParentNode, viewBlockId, viewToRender);\n            enterView(viewToRender, viewToRender[TVIEW].node);\n        }\n        if (lContainer) {\n            if (isCreationMode(viewToRender)) {\n                // it is a new view, insert it into collection of views for a given container\n                insertView(viewToRender, lContainer, lContainer[ACTIVE_INDEX]);\n            }\n            lContainer[ACTIVE_INDEX]++;\n        }\n        return isCreationMode(viewToRender) ? 1 /* Create */ | 2 /* Update */ :\n            2 /* Update */;\n    }\n    /**\n     * Initialize the TView (e.g. static data) for the active embedded view.\n     *\n     * Each embedded view block must create or retrieve its own TView. Otherwise, the embedded view's\n     * static data for a particular node would overwrite the static data for a node in the view above\n     * it with the same index (since it's in the same template).\n     *\n     * @param viewIndex The index of the TView in TNode.tViews\n     * @param consts The number of nodes, local refs, and pipes in this template\n     * @param vars The number of bindings and pure function bindings in this template\n     * @param container The parent container in which to look for the view's static data\n     * @returns TView\n     */\n    function getOrCreateEmbeddedTView(viewIndex, consts, vars, parent) {\n        var tView = getLView()[TVIEW];\n        ngDevMode && assertNodeType(parent, 0 /* Container */);\n        var containerTViews = parent.tViews;\n        ngDevMode && assertDefined(containerTViews, 'TView expected');\n        ngDevMode && assertEqual(Array.isArray(containerTViews), true, 'TViews should be in an array');\n        if (viewIndex >= containerTViews.length || containerTViews[viewIndex] == null) {\n            containerTViews[viewIndex] = createTView(viewIndex, null, consts, vars, tView.directiveRegistry, tView.pipeRegistry, null, null);\n        }\n        return containerTViews[viewIndex];\n    }\n    /**\n     * Looks for a view with a given view block id inside a provided LContainer.\n     * Removes views that need to be deleted in the process.\n     *\n     * @param lContainer to search for views\n     * @param startIdx starting index in the views array to search from\n     * @param viewBlockId exact view block id to look for\n     */\n    function scanForView(lContainer, startIdx, viewBlockId) {\n        for (var i = startIdx + CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n            var viewAtPositionId = lContainer[i][TVIEW].id;\n            if (viewAtPositionId === viewBlockId) {\n                return lContainer[i];\n            }\n            else if (viewAtPositionId < viewBlockId) {\n                // found a view that should not be at this position - remove\n                removeView(lContainer, i - CONTAINER_HEADER_OFFSET);\n            }\n            else {\n                // found a view with id greater than the one we are searching for\n                // which means that required view doesn't exist and can't be found at\n                // later positions in the views array - stop the searchdef.cont here\n                break;\n            }\n        }\n        return null;\n    }\n    /**\n     * Marks the end of an embedded view.\n     *\n     * @codeGenApi\n     */\n    function ɵɵembeddedViewEnd() {\n        var lView = getLView();\n        var viewHost = lView[T_HOST];\n        if (isCreationMode(lView)) {\n            refreshDescendantViews(lView); // creation mode pass\n            lView[FLAGS] &= ~4 /* CreationMode */;\n        }\n        resetPreOrderHookFlags(lView);\n        refreshDescendantViews(lView); // update mode pass\n        var lContainer = lView[PARENT];\n        ngDevMode && assertLContainerOrUndefined(lContainer);\n        leaveView(lContainer[PARENT]);\n        setPreviousOrParentTNode(viewHost, false);\n    }\n\n    /**\n     * Returns the current OpaqueViewState instance.\n     *\n     * Used in conjunction with the restoreView() instruction to save a snapshot\n     * of the current view and restore it when listeners are invoked. This allows\n     * walking the declaration view tree in listeners to get vars from parent views.\n     *\n     * @codeGenApi\n     */\n    function ɵɵgetCurrentView() {\n        return getLView();\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Determine if the argument is shaped like a Promise\n     */\n    function isPromise(obj) {\n        // allow any Promise/A+ compliant thenable.\n        // It's up to the caller to ensure that obj.then conforms to the spec\n        return !!obj && typeof obj.then === 'function';\n    }\n    /**\n     * Determine if the argument is an Observable\n     */\n    function isObservable(obj) {\n        // TODO: use isObservable once we update pass rxjs 6.1\n        // https://github.com/ReactiveX/rxjs/blob/master/CHANGELOG.md#610-2018-05-03\n        return !!obj && typeof obj.subscribe === 'function';\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Adds an event listener to the current node.\n     *\n     * If an output exists on one of the node's directives, it also subscribes to the output\n     * and saves the subscription for later cleanup.\n     *\n     * @param eventName Name of the event\n     * @param listenerFn The function to be called when event emits\n     * @param useCapture Whether or not to use capture in event listener\n     * @param eventTargetResolver Function that returns global target information in case this listener\n     * should be attached to a global object like window, document or body\n     *\n     * @codeGenApi\n     */\n    function ɵɵlistener(eventName, listenerFn, useCapture, eventTargetResolver) {\n        if (useCapture === void 0) { useCapture = false; }\n        listenerInternal(eventName, listenerFn, useCapture, eventTargetResolver);\n    }\n    /**\n    * Registers a synthetic host listener (e.g. `(@foo.start)`) on a component.\n    *\n    * This instruction is for compatibility purposes and is designed to ensure that a\n    * synthetic host listener (e.g. `@HostListener('@foo.start')`) properly gets rendered\n    * in the component's renderer. Normally all host listeners are evaluated with the\n    * parent component's renderer, but, in the case of animation @triggers, they need\n    * to be evaluated with the sub component's renderer (because that's where the\n    * animation triggers are defined).\n    *\n    * Do not use this instruction as a replacement for `listener`. This instruction\n    * only exists to ensure compatibility with the ViewEngine's host binding behavior.\n    *\n    * @param eventName Name of the event\n    * @param listenerFn The function to be called when event emits\n    * @param useCapture Whether or not to use capture in event listener\n    * @param eventTargetResolver Function that returns global target information in case this listener\n    * should be attached to a global object like window, document or body\n     *\n     * @codeGenApi\n    */\n    function ɵɵcomponentHostSyntheticListener(eventName, listenerFn, useCapture, eventTargetResolver) {\n        if (useCapture === void 0) { useCapture = false; }\n        listenerInternal(eventName, listenerFn, useCapture, eventTargetResolver, loadComponentRenderer);\n    }\n    /**\n     * A utility function that checks if a given element has already an event handler registered for an\n     * event with a specified name. The TView.cleanup data structure is used to find out which events\n     * are registered for a given element.\n     */\n    function findExistingListener(lView, eventName, tNodeIdx) {\n        var tView = lView[TVIEW];\n        var tCleanup = tView.cleanup;\n        if (tCleanup != null) {\n            for (var i = 0; i < tCleanup.length - 1; i += 2) {\n                var cleanupEventName = tCleanup[i];\n                if (cleanupEventName === eventName && tCleanup[i + 1] === tNodeIdx) {\n                    // We have found a matching event name on the same node but it might not have been\n                    // registered yet, so we must explicitly verify entries in the LView cleanup data\n                    // structures.\n                    var lCleanup = lView[CLEANUP];\n                    var listenerIdxInLCleanup = tCleanup[i + 2];\n                    return lCleanup.length > listenerIdxInLCleanup ? lCleanup[listenerIdxInLCleanup] : null;\n                }\n                // TView.cleanup can have a mix of 4-elements entries (for event handler cleanups) or\n                // 2-element entries (for directive and queries destroy hooks). As such we can encounter\n                // blocks of 4 or 2 items in the tView.cleanup and this is why we iterate over 2 elements\n                // first and jump another 2 elements if we detect listeners cleanup (4 elements). Also check\n                // documentation of TView.cleanup for more details of this data structure layout.\n                if (typeof cleanupEventName === 'string') {\n                    i += 2;\n                }\n            }\n        }\n        return null;\n    }\n    function listenerInternal(eventName, listenerFn, useCapture, eventTargetResolver, loadRendererFn) {\n        if (useCapture === void 0) { useCapture = false; }\n        var lView = getLView();\n        var tNode = getPreviousOrParentTNode();\n        var tView = lView[TVIEW];\n        var firstTemplatePass = tView.firstTemplatePass;\n        var tCleanup = firstTemplatePass && (tView.cleanup || (tView.cleanup = []));\n        ngDevMode && assertNodeOfPossibleTypes(tNode, 3 /* Element */, 0 /* Container */, 4 /* ElementContainer */);\n        var processOutputs = true;\n        // add native event listener - applicable to elements only\n        if (tNode.type === 3 /* Element */) {\n            var native = getNativeByTNode(tNode, lView);\n            var resolved = eventTargetResolver ? eventTargetResolver(native) : EMPTY_OBJ;\n            var target = resolved.target || native;\n            var renderer = loadRendererFn ? loadRendererFn(tNode, lView) : lView[RENDERER];\n            var lCleanup = getCleanup(lView);\n            var lCleanupIndex = lCleanup.length;\n            var idxOrTargetGetter = eventTargetResolver ?\n                function (_lView) { return eventTargetResolver(unwrapRNode(_lView[tNode.index])).target; } :\n                tNode.index;\n            // In order to match current behavior, native DOM event listeners must be added for all\n            // events (including outputs).\n            if (isProceduralRenderer(renderer)) {\n                // There might be cases where multiple directives on the same element try to register an event\n                // handler function for the same event. In this situation we want to avoid registration of\n                // several native listeners as each registration would be intercepted by NgZone and\n                // trigger change detection. This would mean that a single user action would result in several\n                // change detections being invoked. To avoid this situation we want to have only one call to\n                // native handler registration (for the same element and same type of event).\n                //\n                // In order to have just one native event handler in presence of multiple handler functions,\n                // we just register a first handler function as a native event listener and then chain\n                // (coalesce) other handler functions on top of the first native handler function.\n                var existingListener = null;\n                // Please note that the coalescing described here doesn't happen for events specifying an\n                // alternative target (ex. (document:click)) - this is to keep backward compatibility with the\n                // view engine.\n                // Also, we don't have to search for existing listeners is there are no directives\n                // matching on a given node as we can't register multiple event handlers for the same event in\n                // a template (this would mean having duplicate attributes).\n                if (!eventTargetResolver && hasDirectives(tNode)) {\n                    existingListener = findExistingListener(lView, eventName, tNode.index);\n                }\n                if (existingListener !== null) {\n                    // Attach a new listener at the head of the coalesced listeners list.\n                    listenerFn.__ngNextListenerFn__ = existingListener.__ngNextListenerFn__;\n                    existingListener.__ngNextListenerFn__ = listenerFn;\n                    processOutputs = false;\n                }\n                else {\n                    // The first argument of `listen` function in Procedural Renderer is:\n                    // - either a target name (as a string) in case of global target (window, document, body)\n                    // - or element reference (in all other cases)\n                    listenerFn = wrapListener(tNode, lView, listenerFn, false /** preventDefault */);\n                    var cleanupFn = renderer.listen(resolved.name || target, eventName, listenerFn);\n                    ngDevMode && ngDevMode.rendererAddEventListener++;\n                    lCleanup.push(listenerFn, cleanupFn);\n                    tCleanup && tCleanup.push(eventName, idxOrTargetGetter, lCleanupIndex, lCleanupIndex + 1);\n                }\n            }\n            else {\n                listenerFn = wrapListener(tNode, lView, listenerFn, true /** preventDefault */);\n                target.addEventListener(eventName, listenerFn, useCapture);\n                ngDevMode && ngDevMode.rendererAddEventListener++;\n                lCleanup.push(listenerFn);\n                tCleanup && tCleanup.push(eventName, idxOrTargetGetter, lCleanupIndex, useCapture);\n            }\n        }\n        // subscribe to directive outputs\n        if (tNode.outputs === undefined) {\n            // if we create TNode here, inputs must be undefined so we know they still need to be\n            // checked\n            tNode.outputs = generatePropertyAliases(tNode, 1 /* Output */);\n        }\n        var outputs = tNode.outputs;\n        var props;\n        if (processOutputs && outputs && (props = outputs[eventName])) {\n            var propsLength = props.length;\n            if (propsLength) {\n                var lCleanup = getCleanup(lView);\n                for (var i = 0; i < propsLength; i += 3) {\n                    var index = props[i];\n                    ngDevMode && assertDataInRange(lView, index);\n                    var minifiedName = props[i + 2];\n                    var directiveInstance = lView[index];\n                    var output = directiveInstance[minifiedName];\n                    if (ngDevMode && !isObservable(output)) {\n                        throw new Error(\"@Output \" + minifiedName + \" not initialized in '\" + directiveInstance.constructor.name + \"'.\");\n                    }\n                    var subscription = output.subscribe(listenerFn);\n                    var idx = lCleanup.length;\n                    lCleanup.push(listenerFn, subscription);\n                    tCleanup && tCleanup.push(eventName, tNode.index, idx, -(idx + 1));\n                }\n            }\n        }\n    }\n    function executeListenerWithErrorHandling(lView, listenerFn, e) {\n        try {\n            // Only explicitly returning false from a listener should preventDefault\n            return listenerFn(e) !== false;\n        }\n        catch (error) {\n            handleError(lView, error);\n            return false;\n        }\n    }\n    /**\n     * Wraps an event listener with a function that marks ancestors dirty and prevents default behavior,\n     * if applicable.\n     *\n     * @param tNode The TNode associated with this listener\n     * @param lView The LView that contains this listener\n     * @param listenerFn The listener function to call\n     * @param wrapWithPreventDefault Whether or not to prevent default behavior\n     * (the procedural renderer does this already, so in those cases, we should skip)\n     */\n    function wrapListener(tNode, lView, listenerFn, wrapWithPreventDefault) {\n        // Note: we are performing most of the work in the listener function itself\n        // to optimize listener registration.\n        return function wrapListenerIn_markDirtyAndPreventDefault(e) {\n            // In order to be backwards compatible with View Engine, events on component host nodes\n            // must also mark the component view itself dirty (i.e. the view that it owns).\n            var startView = tNode.flags & 1 /* isComponent */ ? getComponentViewByIndex(tNode.index, lView) : lView;\n            // See interfaces/view.ts for more on LViewFlags.ManualOnPush\n            if ((lView[FLAGS] & 32 /* ManualOnPush */) === 0) {\n                markViewDirty(startView);\n            }\n            var result = executeListenerWithErrorHandling(lView, listenerFn, e);\n            // A just-invoked listener function might have coalesced listeners so we need to check for\n            // their presence and invoke as needed.\n            var nextListenerFn = wrapListenerIn_markDirtyAndPreventDefault.__ngNextListenerFn__;\n            while (nextListenerFn) {\n                // We should prevent default if any of the listeners explicitly return false\n                result = executeListenerWithErrorHandling(lView, nextListenerFn, e) && result;\n                nextListenerFn = nextListenerFn.__ngNextListenerFn__;\n            }\n            if (wrapWithPreventDefault && result === false) {\n                e.preventDefault();\n                // Necessary for legacy browsers that don't support preventDefault (e.g. IE)\n                e.returnValue = false;\n            }\n            return result;\n        };\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Retrieves a context at the level specified and saves it as the global, contextViewData.\n     * Will get the next level up if level is not specified.\n     *\n     * This is used to save contexts of parent views so they can be bound in embedded views, or\n     * in conjunction with reference() to bind a ref from a parent view.\n     *\n     * @param level The relative level of the view from which to grab context compared to contextVewData\n     * @returns context\n     *\n     * @codeGenApi\n     */\n    function ɵɵnextContext(level) {\n        if (level === void 0) { level = 1; }\n        return nextContextImpl(level);\n    }\n\n    /**\n     * Checks a given node against matching projection slots and returns the\n     * determined slot index. Returns \"null\" if no slot matched the given node.\n     *\n     * This function takes into account the parsed ngProjectAs selector from the\n     * node's attributes. If present, it will check whether the ngProjectAs selector\n     * matches any of the projection slot selectors.\n     */\n    function matchingProjectionSlotIndex(tNode, projectionSlots) {\n        var wildcardNgContentIndex = null;\n        var ngProjectAsAttrVal = getProjectAsAttrValue(tNode);\n        for (var i = 0; i < projectionSlots.length; i++) {\n            var slotValue = projectionSlots[i];\n            // The last wildcard projection slot should match all nodes which aren't matching\n            // any selector. This is necessary to be backwards compatible with view engine.\n            if (slotValue === '*') {\n                wildcardNgContentIndex = i;\n                continue;\n            }\n            // If we ran into an `ngProjectAs` attribute, we should match its parsed selector\n            // to the list of selectors, otherwise we fall back to matching against the node.\n            if (ngProjectAsAttrVal === null ?\n                isNodeMatchingSelectorList(tNode, slotValue, /* isProjectionMode */ true) :\n                isSelectorInSelectorList(ngProjectAsAttrVal, slotValue)) {\n                return i; // first matching selector \"captures\" a given node\n            }\n        }\n        return wildcardNgContentIndex;\n    }\n    /**\n     * Instruction to distribute projectable nodes among <ng-content> occurrences in a given template.\n     * It takes all the selectors from the entire component's template and decides where\n     * each projected node belongs (it re-distributes nodes among \"buckets\" where each \"bucket\" is\n     * backed by a selector).\n     *\n     * This function requires CSS selectors to be provided in 2 forms: parsed (by a compiler) and text,\n     * un-parsed form.\n     *\n     * The parsed form is needed for efficient matching of a node against a given CSS selector.\n     * The un-parsed, textual form is needed for support of the ngProjectAs attribute.\n     *\n     * Having a CSS selector in 2 different formats is not ideal, but alternatives have even more\n     * drawbacks:\n     * - having only a textual form would require runtime parsing of CSS selectors;\n     * - we can't have only a parsed as we can't re-construct textual form from it (as entered by a\n     * template author).\n     *\n     * @param projectionSlots? A collection of projection slots. A projection slot can be based\n     *        on a parsed CSS selectors or set to the wildcard selector (\"*\") in order to match\n     *        all nodes which do not match any selector. If not specified, a single wildcard\n     *        selector projection slot will be defined.\n     *\n     * @codeGenApi\n     */\n    function ɵɵprojectionDef(projectionSlots) {\n        var componentNode = findComponentView(getLView())[T_HOST];\n        if (!componentNode.projection) {\n            // If no explicit projection slots are defined, fall back to a single\n            // projection slot with the wildcard selector.\n            var numProjectionSlots = projectionSlots ? projectionSlots.length : 1;\n            var projectionHeads = componentNode.projection =\n                new Array(numProjectionSlots).fill(null);\n            var tails = projectionHeads.slice();\n            var componentChild = componentNode.child;\n            while (componentChild !== null) {\n                var slotIndex = projectionSlots ? matchingProjectionSlotIndex(componentChild, projectionSlots) : 0;\n                if (slotIndex !== null) {\n                    if (tails[slotIndex]) {\n                        tails[slotIndex].projectionNext = componentChild;\n                    }\n                    else {\n                        projectionHeads[slotIndex] = componentChild;\n                    }\n                    tails[slotIndex] = componentChild;\n                }\n                componentChild = componentChild.next;\n            }\n        }\n    }\n    var delayProjection = false;\n    function setDelayProjection(value) {\n        delayProjection = value;\n    }\n    /**\n     * Inserts previously re-distributed projected nodes. This instruction must be preceded by a call\n     * to the projectionDef instruction.\n     *\n     * @param nodeIndex\n     * @param selectorIndex:\n     *        - 0 when the selector is `*` (or unspecified as this is the default value),\n     *        - 1 based index of the selector from the {@link projectionDef}\n     *\n     * @codeGenApi\n    */\n    function ɵɵprojection(nodeIndex, selectorIndex, attrs) {\n        if (selectorIndex === void 0) { selectorIndex = 0; }\n        var lView = getLView();\n        var tProjectionNode = getOrCreateTNode(lView[TVIEW], lView[T_HOST], nodeIndex, 1 /* Projection */, null, attrs || null);\n        // We can't use viewData[HOST_NODE] because projection nodes can be nested in embedded views.\n        if (tProjectionNode.projection === null)\n            tProjectionNode.projection = selectorIndex;\n        // `<ng-content>` has no content\n        setIsNotParent();\n        // We might need to delay the projection of nodes if they are in the middle of an i18n block\n        if (!delayProjection) {\n            // re-distribution of projectable nodes is stored on a component's view level\n            appendProjectedNodes(lView, tProjectionNode, selectorIndex, findComponentView(lView));\n        }\n    }\n\n    /**\n     *\n     * Update an interpolated property on an element with a lone bound value\n     *\n     * Used when the value passed to a property has 1 interpolated value in it, an no additional text\n     * surrounds that interpolated value:\n     *\n     * ```html\n     * <div title=\"{{v0}}\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵpropertyInterpolate('title', v0);\n     * ```\n     *\n     * If the property name also exists as an input property on one of the element's directives,\n     * the component property will be set instead of the element property. This check must\n     * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n     *\n     * @param propName The name of the property to update\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵpropertyInterpolate(propName, v0, sanitizer) {\n        ɵɵpropertyInterpolate1(propName, '', v0, '', sanitizer);\n        return ɵɵpropertyInterpolate;\n    }\n    /**\n     *\n     * Update an interpolated property on an element with single bound value surrounded by text.\n     *\n     * Used when the value passed to a property has 1 interpolated value in it:\n     *\n     * ```html\n     * <div title=\"prefix{{v0}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵpropertyInterpolate1('title', 'prefix', v0, 'suffix');\n     * ```\n     *\n     * If the property name also exists as an input property on one of the element's directives,\n     * the component property will be set instead of the element property. This check must\n     * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n     *\n     * @param propName The name of the property to update\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵpropertyInterpolate1(propName, prefix, v0, suffix, sanitizer) {\n        var index = getSelectedIndex();\n        var interpolatedValue = ɵɵinterpolation1(prefix, v0, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            elementPropertyInternal(index, propName, interpolatedValue, sanitizer);\n        }\n        return ɵɵpropertyInterpolate1;\n    }\n    /**\n     *\n     * Update an interpolated property on an element with 2 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 2 interpolated values in it:\n     *\n     * ```html\n     * <div title=\"prefix{{v0}}-{{v1}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵpropertyInterpolate2('title', 'prefix', v0, '-', v1, 'suffix');\n     * ```\n     *\n     * If the property name also exists as an input property on one of the element's directives,\n     * the component property will be set instead of the element property. This check must\n     * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n     *\n     * @param propName The name of the property to update\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵpropertyInterpolate2(propName, prefix, v0, i0, v1, suffix, sanitizer) {\n        var index = getSelectedIndex();\n        var interpolatedValue = ɵɵinterpolation2(prefix, v0, i0, v1, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            elementPropertyInternal(index, propName, interpolatedValue, sanitizer);\n        }\n        return ɵɵpropertyInterpolate2;\n    }\n    /**\n     *\n     * Update an interpolated property on an element with 3 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 3 interpolated values in it:\n     *\n     * ```html\n     * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵpropertyInterpolate3(\n     * 'title', 'prefix', v0, '-', v1, '-', v2, 'suffix');\n     * ```\n     *\n     * If the property name also exists as an input property on one of the element's directives,\n     * the component property will be set instead of the element property. This check must\n     * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n     *\n     * @param propName The name of the property to update\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵpropertyInterpolate3(propName, prefix, v0, i0, v1, i1, v2, suffix, sanitizer) {\n        var index = getSelectedIndex();\n        var interpolatedValue = ɵɵinterpolation3(prefix, v0, i0, v1, i1, v2, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            elementPropertyInternal(index, propName, interpolatedValue, sanitizer);\n        }\n        return ɵɵpropertyInterpolate3;\n    }\n    /**\n     *\n     * Update an interpolated property on an element with 4 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 4 interpolated values in it:\n     *\n     * ```html\n     * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵpropertyInterpolate4(\n     * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n     * ```\n     *\n     * If the property name also exists as an input property on one of the element's directives,\n     * the component property will be set instead of the element property. This check must\n     * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n     *\n     * @param propName The name of the property to update\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param i2 Static value used for concatenation only.\n     * @param v3 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵpropertyInterpolate4(propName, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, sanitizer) {\n        var index = getSelectedIndex();\n        var interpolatedValue = ɵɵinterpolation4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            elementPropertyInternal(index, propName, interpolatedValue, sanitizer);\n        }\n        return ɵɵpropertyInterpolate4;\n    }\n    /**\n     *\n     * Update an interpolated property on an element with 5 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 5 interpolated values in it:\n     *\n     * ```html\n     * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵpropertyInterpolate5(\n     * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n     * ```\n     *\n     * If the property name also exists as an input property on one of the element's directives,\n     * the component property will be set instead of the element property. This check must\n     * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n     *\n     * @param propName The name of the property to update\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param i2 Static value used for concatenation only.\n     * @param v3 Value checked for change.\n     * @param i3 Static value used for concatenation only.\n     * @param v4 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵpropertyInterpolate5(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, sanitizer) {\n        var index = getSelectedIndex();\n        var interpolatedValue = ɵɵinterpolation5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            elementPropertyInternal(index, propName, interpolatedValue, sanitizer);\n        }\n        return ɵɵpropertyInterpolate5;\n    }\n    /**\n     *\n     * Update an interpolated property on an element with 6 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 6 interpolated values in it:\n     *\n     * ```html\n     * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵpropertyInterpolate6(\n     *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n     * ```\n     *\n     * If the property name also exists as an input property on one of the element's directives,\n     * the component property will be set instead of the element property. This check must\n     * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n     *\n     * @param propName The name of the property to update\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param i2 Static value used for concatenation only.\n     * @param v3 Value checked for change.\n     * @param i3 Static value used for concatenation only.\n     * @param v4 Value checked for change.\n     * @param i4 Static value used for concatenation only.\n     * @param v5 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵpropertyInterpolate6(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, sanitizer) {\n        var index = getSelectedIndex();\n        var interpolatedValue = ɵɵinterpolation6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            elementPropertyInternal(index, propName, interpolatedValue, sanitizer);\n        }\n        return ɵɵpropertyInterpolate6;\n    }\n    /**\n     *\n     * Update an interpolated property on an element with 7 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 7 interpolated values in it:\n     *\n     * ```html\n     * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵpropertyInterpolate7(\n     *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n     * ```\n     *\n     * If the property name also exists as an input property on one of the element's directives,\n     * the component property will be set instead of the element property. This check must\n     * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n     *\n     * @param propName The name of the property to update\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param i2 Static value used for concatenation only.\n     * @param v3 Value checked for change.\n     * @param i3 Static value used for concatenation only.\n     * @param v4 Value checked for change.\n     * @param i4 Static value used for concatenation only.\n     * @param v5 Value checked for change.\n     * @param i5 Static value used for concatenation only.\n     * @param v6 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵpropertyInterpolate7(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, sanitizer) {\n        var index = getSelectedIndex();\n        var interpolatedValue = ɵɵinterpolation7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            elementPropertyInternal(index, propName, interpolatedValue, sanitizer);\n        }\n        return ɵɵpropertyInterpolate7;\n    }\n    /**\n     *\n     * Update an interpolated property on an element with 8 bound values surrounded by text.\n     *\n     * Used when the value passed to a property has 8 interpolated values in it:\n     *\n     * ```html\n     * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵpropertyInterpolate8(\n     *  'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n     * ```\n     *\n     * If the property name also exists as an input property on one of the element's directives,\n     * the component property will be set instead of the element property. This check must\n     * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n     *\n     * @param propName The name of the property to update\n     * @param prefix Static value used for concatenation only.\n     * @param v0 Value checked for change.\n     * @param i0 Static value used for concatenation only.\n     * @param v1 Value checked for change.\n     * @param i1 Static value used for concatenation only.\n     * @param v2 Value checked for change.\n     * @param i2 Static value used for concatenation only.\n     * @param v3 Value checked for change.\n     * @param i3 Static value used for concatenation only.\n     * @param v4 Value checked for change.\n     * @param i4 Static value used for concatenation only.\n     * @param v5 Value checked for change.\n     * @param i5 Static value used for concatenation only.\n     * @param v6 Value checked for change.\n     * @param i6 Static value used for concatenation only.\n     * @param v7 Value checked for change.\n     * @param suffix Static value used for concatenation only.\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵpropertyInterpolate8(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, sanitizer) {\n        var index = getSelectedIndex();\n        var interpolatedValue = ɵɵinterpolation8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n        if (interpolatedValue !== NO_CHANGE) {\n            elementPropertyInternal(index, propName, interpolatedValue, sanitizer);\n        }\n        return ɵɵpropertyInterpolate8;\n    }\n    /**\n     * Update an interpolated property on an element with 8 or more bound values surrounded by text.\n     *\n     * Used when the number of interpolated values exceeds 7.\n     *\n     * ```html\n     * <div\n     *  title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\"></div>\n     * ```\n     *\n     * Its compiled representation is::\n     *\n     * ```ts\n     * ɵɵpropertyInterpolateV(\n     *  'title', ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n     *  'suffix']);\n     * ```\n     *\n     * If the property name also exists as an input property on one of the element's directives,\n     * the component property will be set instead of the element property. This check must\n     * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n     *\n     * @param propName The name of the property to update.\n     * @param values The a collection of values and the strings inbetween those values, beginning with a\n     * string prefix and ending with a string suffix.\n     * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n     * @param sanitizer An optional sanitizer function\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵpropertyInterpolateV(propName, values, sanitizer) {\n        var index = getSelectedIndex();\n        var interpolatedValue = ɵɵinterpolationV(values);\n        if (interpolatedValue !== NO_CHANGE) {\n            elementPropertyInternal(index, propName, interpolatedValue, sanitizer);\n        }\n        return ɵɵpropertyInterpolateV;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Create static text node\n     *\n     * @param index Index of the node in the data array\n     * @param value Value to write. This value will be stringified.\n     *\n     * @codeGenApi\n     */\n    function ɵɵtext(index, value) {\n        var lView = getLView();\n        ngDevMode && assertEqual(lView[BINDING_INDEX], lView[TVIEW].bindingStartIndex, 'text nodes should be created before any bindings');\n        ngDevMode && ngDevMode.rendererCreateTextNode++;\n        ngDevMode && assertDataInRange(lView, index + HEADER_OFFSET);\n        var textNative = lView[index + HEADER_OFFSET] = createTextNode(value, lView[RENDERER]);\n        ngDevMode && ngDevMode.rendererSetText++;\n        var tNode = getOrCreateTNode(lView[TVIEW], lView[T_HOST], index, 3 /* Element */, null, null);\n        // Text nodes are self closing.\n        setIsNotParent();\n        appendChild(textNative, tNode, lView);\n    }\n    /**\n     * Create text node with binding\n     * Bindings should be handled externally with the proper interpolation(1-8) method\n     *\n     * @param value Stringified value to write.\n     *\n     * @codeGenApi\n     */\n    function ɵɵtextBinding(value) {\n        var lView = getLView();\n        var index = getSelectedIndex();\n        var bound = bind(lView, value);\n        if (bound !== NO_CHANGE) {\n            textBindingInternal(lView, index, renderStringify(bound));\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     *\n     * Update text content with a lone bound value\n     *\n     * Used when a text node has 1 interpolated value in it, an no additional text\n     * surrounds that interpolated value:\n     *\n     * ```html\n     * <div>{{v0}}</div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵtextInterpolate(v0);\n     * ```\n     * @returns itself, so that it may be chained.\n     * @see textInterpolateV\n     * @codeGenApi\n     */\n    function ɵɵtextInterpolate(v0) {\n        ɵɵtextInterpolate1('', v0, '');\n        return ɵɵtextInterpolate;\n    }\n    /**\n     *\n     * Update text content with single bound value surrounded by other text.\n     *\n     * Used when a text node has 1 interpolated value in it:\n     *\n     * ```html\n     * <div>prefix{{v0}}suffix</div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵtextInterpolate1('prefix', v0, 'suffix');\n     * ```\n     * @returns itself, so that it may be chained.\n     * @see textInterpolateV\n     * @codeGenApi\n     */\n    function ɵɵtextInterpolate1(prefix, v0, suffix) {\n        var index = getSelectedIndex();\n        var lView = getLView();\n        var interpolated = ɵɵinterpolation1(prefix, v0, suffix);\n        if (interpolated !== NO_CHANGE) {\n            textBindingInternal(lView, index, interpolated);\n        }\n        return ɵɵtextInterpolate1;\n    }\n    /**\n     *\n     * Update text content with 2 bound values surrounded by other text.\n     *\n     * Used when a text node has 2 interpolated values in it:\n     *\n     * ```html\n     * <div>prefix{{v0}}-{{v1}}suffix</div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵtextInterpolate2('prefix', v0, '-', v1, 'suffix');\n     * ```\n     * @returns itself, so that it may be chained.\n     * @see textInterpolateV\n     * @codeGenApi\n     */\n    function ɵɵtextInterpolate2(prefix, v0, i0, v1, suffix) {\n        var index = getSelectedIndex();\n        var lView = getLView();\n        var interpolated = ɵɵinterpolation2(prefix, v0, i0, v1, suffix);\n        if (interpolated !== NO_CHANGE) {\n            textBindingInternal(lView, index, interpolated);\n        }\n        return ɵɵtextInterpolate2;\n    }\n    /**\n     *\n     * Update text content with 3 bound values surrounded by other text.\n     *\n     * Used when a text node has 3 interpolated values in it:\n     *\n     * ```html\n     * <div>prefix{{v0}}-{{v1}}-{{v2}}suffix</div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵtextInterpolate3(\n     * 'prefix', v0, '-', v1, '-', v2, 'suffix');\n     * ```\n     * @returns itself, so that it may be chained.\n     * @see textInterpolateV\n     * @codeGenApi\n     */\n    function ɵɵtextInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {\n        var index = getSelectedIndex();\n        var lView = getLView();\n        var interpolated = ɵɵinterpolation3(prefix, v0, i0, v1, i1, v2, suffix);\n        if (interpolated !== NO_CHANGE) {\n            textBindingInternal(lView, index, interpolated);\n        }\n        return ɵɵtextInterpolate3;\n    }\n    /**\n     *\n     * Update text content with 4 bound values surrounded by other text.\n     *\n     * Used when a text node has 4 interpolated values in it:\n     *\n     * ```html\n     * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix</div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵtextInterpolate4(\n     * 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n     * ```\n     * @returns itself, so that it may be chained.\n     * @see ɵɵtextInterpolateV\n     * @codeGenApi\n     */\n    function ɵɵtextInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\n        var index = getSelectedIndex();\n        var lView = getLView();\n        var interpolated = ɵɵinterpolation4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n        if (interpolated !== NO_CHANGE) {\n            textBindingInternal(lView, index, interpolated);\n        }\n        return ɵɵtextInterpolate4;\n    }\n    /**\n     *\n     * Update text content with 5 bound values surrounded by other text.\n     *\n     * Used when a text node has 5 interpolated values in it:\n     *\n     * ```html\n     * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix</div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵtextInterpolate5(\n     * 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n     * ```\n     * @returns itself, so that it may be chained.\n     * @see textInterpolateV\n     * @codeGenApi\n     */\n    function ɵɵtextInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\n        var index = getSelectedIndex();\n        var lView = getLView();\n        var interpolated = ɵɵinterpolation5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n        if (interpolated !== NO_CHANGE) {\n            textBindingInternal(lView, index, interpolated);\n        }\n        return ɵɵtextInterpolate5;\n    }\n    /**\n     *\n     * Update text content with 6 bound values surrounded by other text.\n     *\n     * Used when a text node has 6 interpolated values in it:\n     *\n     * ```html\n     * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix</div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵtextInterpolate6(\n     *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n     * ```\n     *\n     * @param i4 Static value used for concatenation only.\n     * @param v5 Value checked for change. @returns itself, so that it may be chained.\n     * @see textInterpolateV\n     * @codeGenApi\n     */\n    function ɵɵtextInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\n        var index = getSelectedIndex();\n        var lView = getLView();\n        var interpolated = ɵɵinterpolation6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n        if (interpolated !== NO_CHANGE) {\n            textBindingInternal(lView, index, interpolated);\n        }\n        return ɵɵtextInterpolate6;\n    }\n    /**\n     *\n     * Update text content with 7 bound values surrounded by other text.\n     *\n     * Used when a text node has 7 interpolated values in it:\n     *\n     * ```html\n     * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix</div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵtextInterpolate7(\n     *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n     * ```\n     * @returns itself, so that it may be chained.\n     * @see textInterpolateV\n     * @codeGenApi\n     */\n    function ɵɵtextInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\n        var index = getSelectedIndex();\n        var lView = getLView();\n        var interpolated = ɵɵinterpolation7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n        if (interpolated !== NO_CHANGE) {\n            textBindingInternal(lView, index, interpolated);\n        }\n        return ɵɵtextInterpolate7;\n    }\n    /**\n     *\n     * Update text content with 8 bound values surrounded by other text.\n     *\n     * Used when a text node has 8 interpolated values in it:\n     *\n     * ```html\n     * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix</div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵtextInterpolate8(\n     *  'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n     * ```\n     * @returns itself, so that it may be chained.\n     * @see textInterpolateV\n     * @codeGenApi\n     */\n    function ɵɵtextInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\n        var index = getSelectedIndex();\n        var lView = getLView();\n        var interpolated = ɵɵinterpolation8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n        if (interpolated !== NO_CHANGE) {\n            textBindingInternal(lView, index, interpolated);\n        }\n        return ɵɵtextInterpolate8;\n    }\n    /**\n     * Update text content with 9 or more bound values other surrounded by text.\n     *\n     * Used when the number of interpolated values exceeds 8.\n     *\n     * ```html\n     * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix</div>\n     * ```\n     *\n     * Its compiled representation is:\n     *\n     * ```ts\n     * ɵɵtextInterpolateV(\n     *  ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n     *  'suffix']);\n     * ```\n     *.\n     * @param values The a collection of values and the strings in between those values, beginning with\n     * a string prefix and ending with a string suffix.\n     * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n     *\n     * @returns itself, so that it may be chained.\n     * @codeGenApi\n     */\n    function ɵɵtextInterpolateV(values) {\n        var index = getSelectedIndex();\n        var lView = getLView();\n        var interpolated = ɵɵinterpolationV(values);\n        if (interpolated !== NO_CHANGE) {\n            textBindingInternal(lView, index, interpolated);\n        }\n        return ɵɵtextInterpolateV;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Adds a player to an element, directive or component instance that will later be\n     * animated once change detection has passed.\n     *\n     * When a player is added to a reference it will stay active until `player.destroy()`\n     * is called. Once called then the player will be removed from the active players\n     * present on the associated ref instance.\n     *\n     * To get a list of all the active players on an element see [getPlayers].\n     *\n     * @param ref The element, directive or component that the player will be placed on.\n     * @param player The player that will be triggered to play once change detection has run.\n     */\n    function addPlayer(ref, player) {\n        var context = getLContext(ref);\n        if (!context) {\n            ngDevMode && throwInvalidRefError();\n            return;\n        }\n        var element = context.native;\n        var lView = context.lView;\n        var playerContext = getOrCreatePlayerContext(element, context);\n        var rootContext = getRootContext(lView);\n        addPlayerInternal(playerContext, rootContext, element, player, 0, ref);\n        scheduleTick(rootContext, 2 /* FlushPlayers */);\n    }\n    /**\n     * Returns a list of all the active players present on the provided ref instance (which can\n     * be an instance of a directive, component or element).\n     *\n     * This function will only return players that have been added to the ref instance using\n     * `addPlayer` or any players that are active through any template styling bindings\n     * (`[style]`, `[style.prop]`, `[class]` and `[class.name]`).\n     *\n     * @publicApi\n     */\n    function getPlayers(ref) {\n        var context = getLContext(ref);\n        if (!context) {\n            ngDevMode && throwInvalidRefError();\n            return [];\n        }\n        var stylingContext = getStylingContextFromLView(context.nodeIndex, context.lView);\n        var playerContext = stylingContext ? getPlayerContext(stylingContext) : null;\n        return playerContext ? getPlayersInternal(playerContext) : [];\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Returns the component instance associated with a given DOM host element.\n     * Elements which don't represent components return `null`.\n     *\n     * @param element Host DOM element from which the component should be retrieved.\n     *\n     * ```\n     * <my-app>\n     *   #VIEW\n     *     <div>\n     *       <child-comp></child-comp>\n     *     </div>\n     * </mp-app>\n     *\n     * expect(getComponent(<child-comp>) instanceof ChildComponent).toBeTruthy();\n     * expect(getComponent(<my-app>) instanceof MyApp).toBeTruthy();\n     * ```\n     *\n     * @publicApi\n     */\n    function getComponent(element) {\n        var context = loadLContextFromNode(element);\n        if (context.component === undefined) {\n            context.component = getComponentAtNodeIndex(context.nodeIndex, context.lView);\n        }\n        return context.component;\n    }\n    /**\n     * Returns the component instance associated with a given DOM host element.\n     * Elements which don't represent components return `null`.\n     *\n     * @param element Host DOM element from which the component should be retrieved.\n     *\n     * ```\n     * <my-app>\n     *   #VIEW\n     *     <div>\n     *       <child-comp></child-comp>\n     *     </div>\n     * </mp-app>\n     *\n     * expect(getComponent(<child-comp>) instanceof ChildComponent).toBeTruthy();\n     * expect(getComponent(<my-app>) instanceof MyApp).toBeTruthy();\n     * ```\n     *\n     * @publicApi\n     */\n    function getContext$1(element) {\n        var context = loadLContextFromNode(element);\n        return context.lView[CONTEXT];\n    }\n    /**\n     * Returns the component instance associated with view which owns the DOM element (`null`\n     * otherwise).\n     *\n     * @param element DOM element which is owned by an existing component's view.\n     *\n     * ```\n     * <my-app>\n     *   #VIEW\n     *     <div>\n     *       <child-comp></child-comp>\n     *     </div>\n     * </mp-app>\n     *\n     * expect(getViewComponent(<child-comp>) instanceof MyApp).toBeTruthy();\n     * expect(getViewComponent(<my-app>)).toEqual(null);\n     * ```\n     *\n     * @publicApi\n     */\n    function getViewComponent(element) {\n        var context = loadLContext(element);\n        var lView = context.lView;\n        var parent;\n        ngDevMode && assertLView(lView);\n        while (lView[HOST] === null && (parent = getLViewParent(lView))) {\n            // As long as lView[HOST] is null we know we are part of sub-template such as `*ngIf`\n            lView = parent;\n        }\n        return lView[FLAGS] & 512 /* IsRoot */ ? null : lView[CONTEXT];\n    }\n    /**\n     * Retrieve all root components.\n     *\n     * Root components are those which have been bootstrapped by Angular.\n     *\n     * @param target A DOM element, component or directive instance.\n     *\n     * @publicApi\n     */\n    function getRootComponents(target) {\n        return __spread(getRootContext(target).components);\n    }\n    /**\n     * Retrieves an `Injector` associated with the element, component or directive.\n     *\n     * @param target A DOM element, component or directive instance.\n     *\n     * @publicApi\n     */\n    function getInjector(target) {\n        var context = loadLContext(target);\n        var tNode = context.lView[TVIEW].data[context.nodeIndex];\n        return new NodeInjector(tNode, context.lView);\n    }\n    /**\n     * Retrieve a set of injection tokens at a given DOM node.\n     *\n     * @param element Element for which the injection tokens should be retrieved.\n     * @publicApi\n     */\n    function getInjectionTokens(element) {\n        var context = loadLContext(element, false);\n        if (!context)\n            return [];\n        var lView = context.lView;\n        var tView = lView[TVIEW];\n        var tNode = tView.data[context.nodeIndex];\n        var providerTokens = [];\n        var startIndex = tNode.providerIndexes & 65535 /* ProvidersStartIndexMask */;\n        var endIndex = tNode.directiveEnd;\n        for (var i = startIndex; i < endIndex; i++) {\n            var value = tView.data[i];\n            if (isDirectiveDefHack(value)) {\n                // The fact that we sometimes store Type and sometimes DirectiveDef in this location is a\n                // design flaw.  We should always store same type so that we can be monomorphic. The issue\n                // is that for Components/Directives we store the def instead the type. The correct behavior\n                // is that we should always be storing injectable type in this location.\n                value = value.type;\n            }\n            providerTokens.push(value);\n        }\n        return providerTokens;\n    }\n    /**\n     * Retrieves directives associated with a given DOM host element.\n     *\n     * @param target A DOM element, component or directive instance.\n     *\n     * @publicApi\n     */\n    function getDirectives(target) {\n        var context = loadLContext(target);\n        if (context.directives === undefined) {\n            context.directives = getDirectivesAtNodeIndex(context.nodeIndex, context.lView, false);\n        }\n        return context.directives || [];\n    }\n    function loadLContext(target, throwOnNotFound) {\n        if (throwOnNotFound === void 0) { throwOnNotFound = true; }\n        var context = getLContext(target);\n        if (!context && throwOnNotFound) {\n            throw new Error(ngDevMode ? \"Unable to find context associated with \" + stringifyForError(target) :\n                'Invalid ng target');\n        }\n        return context;\n    }\n    /**\n     * Retrieve map of local references.\n     *\n     * The references are retrieved as a map of local reference name to element or directive instance.\n     *\n     * @param target A DOM element, component or directive instance.\n     *\n     * @publicApi\n     */\n    function getLocalRefs(target) {\n        var context = loadLContext(target);\n        if (context.localRefs === undefined) {\n            context.localRefs = discoverLocalRefs(context.lView, context.nodeIndex);\n        }\n        return context.localRefs || {};\n    }\n    /**\n     * Retrieve the host element of the component.\n     *\n     * Use this function to retrieve the host element of the component. The host\n     * element is the element which the component is associated with.\n     *\n     * @param directive Component or Directive for which the host element should be retrieved.\n     *\n     * @publicApi\n     */\n    function getHostElement(directive) {\n        return getLContext(directive).native;\n    }\n    function loadLContextFromNode(node) {\n        if (!(node instanceof Node))\n            throw new Error('Expecting instance of DOM Node');\n        return loadLContext(node);\n    }\n    function isBrowserEvents(listener) {\n        // Browser events are those which don't have `useCapture` as boolean.\n        return typeof listener.useCapture === 'boolean';\n    }\n    /**\n     * Retrieves a list of DOM listeners.\n     *\n     * ```\n     * <my-app>\n     *   #VIEW\n     *     <div (click)=\"doSomething()\">\n     *     </div>\n     * </mp-app>\n     *\n     * expect(getListeners(<div>)).toEqual({\n     *   name: 'click',\n     *   element: <div>,\n     *   callback: () => doSomething(),\n     *   useCapture: false\n     * });\n     * ```\n     *\n     * @param element Element for which the DOM listeners should be retrieved.\n     * @publicApi\n     */\n    function getListeners(element) {\n        var lContext = loadLContextFromNode(element);\n        var lView = lContext.lView;\n        var tView = lView[TVIEW];\n        var lCleanup = lView[CLEANUP];\n        var tCleanup = tView.cleanup;\n        var listeners = [];\n        if (tCleanup && lCleanup) {\n            for (var i = 0; i < tCleanup.length;) {\n                var firstParam = tCleanup[i++];\n                var secondParam = tCleanup[i++];\n                if (typeof firstParam === 'string') {\n                    var name_1 = firstParam;\n                    var listenerElement = unwrapRNode(lView[secondParam]);\n                    var callback = lCleanup[tCleanup[i++]];\n                    var useCaptureOrIndx = tCleanup[i++];\n                    // if useCaptureOrIndx is boolean then report it as is.\n                    // if useCaptureOrIndx is positive number then it in unsubscribe method\n                    // if useCaptureOrIndx is negative number then it is a Subscription\n                    var useCapture = typeof useCaptureOrIndx === 'boolean' ?\n                        useCaptureOrIndx :\n                        (useCaptureOrIndx >= 0 ? false : null);\n                    if (element == listenerElement) {\n                        listeners.push({ element: element, name: name_1, callback: callback, useCapture: useCapture });\n                    }\n                }\n            }\n        }\n        listeners.sort(sortListeners);\n        return listeners;\n    }\n    function sortListeners(a, b) {\n        if (a.name == b.name)\n            return 0;\n        return a.name < b.name ? -1 : 1;\n    }\n    /**\n     * This function should not exist because it is megamorphic and only mostly correct.\n     *\n     * See call site for more info.\n     */\n    function isDirectiveDefHack(obj) {\n        return obj.type !== undefined && obj.template !== undefined && obj.declaredInputs !== undefined;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * This file introduces series of globally accessible debug tools\n     * to allow for the Angular debugging story to function.\n     *\n     * To see this in action run the following command:\n     *\n     *   bazel run --define=compile=aot\n     *   //packages/core/test/bundling/todo:devserver\n     *\n     *  Then load `localhost:5432` and start using the console tools.\n     */\n    /**\n     * This value reflects the property on the window where the dev\n     * tools are patched (window.ng).\n     * */\n    var GLOBAL_PUBLISH_EXPANDO_KEY = 'ng';\n    var _published = false;\n    /**\n     * Publishes a collection of default debug tools onto`window.ng`.\n     *\n     * These functions are available globally when Angular is in development\n     * mode and are automatically stripped away from prod mode is on.\n     */\n    function publishDefaultGlobalUtils() {\n        if (!_published) {\n            _published = true;\n            publishGlobalUtil('getComponent', getComponent);\n            publishGlobalUtil('getContext', getContext$1);\n            publishGlobalUtil('getListeners', getListeners);\n            publishGlobalUtil('getViewComponent', getViewComponent);\n            publishGlobalUtil('getHostElement', getHostElement);\n            publishGlobalUtil('getInjector', getInjector);\n            publishGlobalUtil('getRootComponents', getRootComponents);\n            publishGlobalUtil('getDirectives', getDirectives);\n            publishGlobalUtil('getPlayers', getPlayers);\n            publishGlobalUtil('markDirty', markDirty);\n        }\n    }\n    /**\n     * Publishes the given function to `window.ng` so that it can be\n     * used from the browser console when an application is not in production.\n     */\n    function publishGlobalUtil(name, fn) {\n        var w = _global;\n        ngDevMode && assertDefined(fn, 'function not defined');\n        if (w) {\n            var container = w[GLOBAL_PUBLISH_EXPANDO_KEY];\n            if (!container) {\n                container = w[GLOBAL_PUBLISH_EXPANDO_KEY] = {};\n            }\n            container[name] = fn;\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Bootstraps a Component into an existing host element and returns an instance\n     * of the component.\n     *\n     * Use this function to bootstrap a component into the DOM tree. Each invocation\n     * of this function will create a separate tree of components, injectors and\n     * change detection cycles and lifetimes. To dynamically insert a new component\n     * into an existing tree such that it shares the same injection, change detection\n     * and object lifetime, use {@link ViewContainer#createComponent}.\n     *\n     * @param componentType Component to bootstrap\n     * @param options Optional parameters which control bootstrapping\n     */\n    function renderComponent(componentType /* Type as workaround for: Microsoft/TypeScript/issues/4881 */, opts) {\n        if (opts === void 0) { opts = {}; }\n        ngDevMode && publishDefaultGlobalUtils();\n        ngDevMode && assertComponentType(componentType);\n        // this is preemptively set to avoid having test and debug code accidentally\n        // read data from a previous application state...\n        setActiveHostElement(null);\n        var rendererFactory = opts.rendererFactory || domRendererFactory3;\n        var sanitizer = opts.sanitizer || null;\n        var componentDef = getComponentDef(componentType);\n        if (componentDef.type != componentType)\n            componentDef.type = componentType;\n        // The first index of the first selector is the tag name.\n        var componentTag = componentDef.selectors[0][0];\n        var hostRNode = locateHostElement(rendererFactory, opts.host || componentTag);\n        var rootFlags = componentDef.onPush ? 64 /* Dirty */ | 512 /* IsRoot */ :\n            16 /* CheckAlways */ | 512 /* IsRoot */;\n        var rootContext = createRootContext(opts.scheduler, opts.playerHandler);\n        var renderer = rendererFactory.createRenderer(hostRNode, componentDef);\n        var rootView = createLView(null, createTView(-1, null, 1, 0, null, null, null, null), rootContext, rootFlags, null, null, rendererFactory, renderer, undefined, opts.injector || null);\n        var oldView = enterView(rootView, null);\n        var component;\n        try {\n            if (rendererFactory.begin)\n                rendererFactory.begin();\n            var componentView = createRootComponentView(hostRNode, componentDef, rootView, rendererFactory, renderer, sanitizer);\n            component = createRootComponent(componentView, componentDef, rootView, rootContext, opts.hostFeatures || null);\n            addToViewTree(rootView, componentView);\n            refreshDescendantViews(rootView); // creation mode pass\n            rootView[FLAGS] &= ~4 /* CreationMode */;\n            resetPreOrderHookFlags(rootView);\n            refreshDescendantViews(rootView); // update mode pass\n        }\n        finally {\n            leaveView(oldView);\n            if (rendererFactory.end)\n                rendererFactory.end();\n        }\n        return component;\n    }\n    /**\n     * Creates the root component view and the root component node.\n     *\n     * @param rNode Render host element.\n     * @param def ComponentDef\n     * @param rootView The parent view where the host node is stored\n     * @param renderer The current renderer\n     * @param sanitizer The sanitizer, if provided\n     *\n     * @returns Component view created\n     */\n    function createRootComponentView(rNode, def, rootView, rendererFactory, renderer, sanitizer) {\n        resetComponentState();\n        var tView = rootView[TVIEW];\n        ngDevMode && assertDataInRange(rootView, 0 + HEADER_OFFSET);\n        rootView[0 + HEADER_OFFSET] = rNode;\n        var tNode = getOrCreateTNode(tView, null, 0, 3 /* Element */, null, null);\n        var componentView = createLView(rootView, getOrCreateTView(def), null, def.onPush ? 64 /* Dirty */ : 16 /* CheckAlways */, rootView[HEADER_OFFSET], tNode, rendererFactory, renderer, sanitizer);\n        if (tView.firstTemplatePass) {\n            diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, rootView), rootView, def.type);\n            tNode.flags = 1 /* isComponent */;\n            initNodeFlags(tNode, rootView.length, 1);\n            queueComponentIndexForCheck(tNode);\n        }\n        // Store component view at node index, with node as the HOST\n        return rootView[HEADER_OFFSET] = componentView;\n    }\n    /**\n     * Creates a root component and sets it up with features and host bindings. Shared by\n     * renderComponent() and ViewContainerRef.createComponent().\n     */\n    function createRootComponent(componentView, componentDef, rootView, rootContext, hostFeatures) {\n        var tView = rootView[TVIEW];\n        // Create directive instance with factory() and store at next index in viewData\n        var component = instantiateRootComponent(tView, rootView, componentDef);\n        rootContext.components.push(component);\n        componentView[CONTEXT] = component;\n        hostFeatures && hostFeatures.forEach(function (feature) { return feature(component, componentDef); });\n        // We want to generate an empty QueryList for root content queries for backwards\n        // compatibility with ViewEngine.\n        if (componentDef.contentQueries) {\n            componentDef.contentQueries(1 /* Create */, component, rootView.length - 1);\n        }\n        var rootTNode = getPreviousOrParentTNode();\n        if (tView.firstTemplatePass && componentDef.hostBindings) {\n            var elementIndex = rootTNode.index - HEADER_OFFSET;\n            setActiveHostElement(elementIndex);\n            var expando = tView.expandoInstructions;\n            invokeHostBindingsInCreationMode(componentDef, expando, component, rootTNode, tView.firstTemplatePass);\n            rootTNode.onElementCreationFns && applyOnCreateInstructions(rootTNode);\n            setActiveHostElement(null);\n        }\n        if (rootTNode.stylingTemplate) {\n            var native = componentView[HOST];\n            renderInitialClasses(native, rootTNode.stylingTemplate, componentView[RENDERER]);\n            renderInitialStyles(native, rootTNode.stylingTemplate, componentView[RENDERER]);\n        }\n        return component;\n    }\n    function createRootContext(scheduler, playerHandler) {\n        return {\n            components: [],\n            scheduler: scheduler || defaultScheduler,\n            clean: CLEAN_PROMISE,\n            playerHandler: playerHandler || null,\n            flags: 0 /* Empty */\n        };\n    }\n    /**\n     * Used to enable lifecycle hooks on the root component.\n     *\n     * Include this feature when calling `renderComponent` if the root component\n     * you are rendering has lifecycle hooks defined. Otherwise, the hooks won't\n     * be called properly.\n     *\n     * Example:\n     *\n     * ```\n     * renderComponent(AppComponent, {features: [RootLifecycleHooks]});\n     * ```\n     */\n    function LifecycleHooksFeature(component, def) {\n        var rootTView = readPatchedLView(component)[TVIEW];\n        var dirIndex = rootTView.data.length - 1;\n        registerPreOrderHooks(dirIndex, def, rootTView, -1, -1, -1);\n        // TODO(misko): replace `as TNode` with createTNode call. (needs refactoring to lose dep on\n        // LNode).\n        registerPostOrderHooks(rootTView, { directiveStart: dirIndex, directiveEnd: dirIndex + 1 });\n    }\n    /**\n     * Wait on component until it is rendered.\n     *\n     * This function returns a `Promise` which is resolved when the component's\n     * change detection is executed. This is determined by finding the scheduler\n     * associated with the `component`'s render tree and waiting until the scheduler\n     * flushes. If nothing is scheduled, the function returns a resolved promise.\n     *\n     * Example:\n     * ```\n     * await whenRendered(myComponent);\n     * ```\n     *\n     * @param component Component to wait upon\n     * @returns Promise which resolves when the component is rendered.\n     */\n    function whenRendered(component) {\n        return getRootContext(component).clean;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Represents a basic change from a previous to a new value for a single\n     * property on a directive instance. Passed as a value in a\n     * {@link SimpleChanges} object to the `ngOnChanges` hook.\n     *\n     * @see `OnChanges`\n     *\n     * @publicApi\n     */\n    var SimpleChange = /** @class */ (function () {\n        function SimpleChange(previousValue, currentValue, firstChange) {\n            this.previousValue = previousValue;\n            this.currentValue = currentValue;\n            this.firstChange = firstChange;\n        }\n        /**\n         * Check whether the new value is the first value assigned.\n         */\n        SimpleChange.prototype.isFirstChange = function () { return this.firstChange; };\n        return SimpleChange;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * The NgOnChangesFeature decorates a component with support for the ngOnChanges\n     * lifecycle hook, so it should be included in any component that implements\n     * that hook.\n     *\n     * If the component or directive uses inheritance, the NgOnChangesFeature MUST\n     * be included as a feature AFTER {@link InheritDefinitionFeature}, otherwise\n     * inherited properties will not be propagated to the ngOnChanges lifecycle\n     * hook.\n     *\n     * Example usage:\n     *\n     * ```\n     * static ngComponentDef = defineComponent({\n     *   ...\n     *   inputs: {name: 'publicName'},\n     *   features: [NgOnChangesFeature()]\n     * });\n     * ```\n     *\n     * @codeGenApi\n     */\n    function ɵɵNgOnChangesFeature() {\n        // This option ensures that the ngOnChanges lifecycle hook will be inherited\n        // from superclasses (in InheritDefinitionFeature).\n        NgOnChangesFeatureImpl.ngInherit = true;\n        return NgOnChangesFeatureImpl;\n    }\n    function NgOnChangesFeatureImpl(definition) {\n        if (definition.type.prototype.ngOnChanges) {\n            definition.setInput = ngOnChangesSetInput;\n            definition.onChanges = wrapOnChanges();\n        }\n    }\n    function wrapOnChanges() {\n        return function wrapOnChangesHook_inPreviousChangesStorage() {\n            var simpleChangesStore = getSimpleChangesStore(this);\n            var current = simpleChangesStore && simpleChangesStore.current;\n            if (current) {\n                var previous = simpleChangesStore.previous;\n                if (previous === EMPTY_OBJ) {\n                    simpleChangesStore.previous = current;\n                }\n                else {\n                    // New changes are copied to the previous store, so that we don't lose history for inputs\n                    // which were not changed this time\n                    for (var key in current) {\n                        previous[key] = current[key];\n                    }\n                }\n                simpleChangesStore.current = null;\n                this.ngOnChanges(current);\n            }\n        };\n    }\n    function ngOnChangesSetInput(instance, value, publicName, privateName) {\n        var simpleChangesStore = getSimpleChangesStore(instance) ||\n            setSimpleChangesStore(instance, { previous: EMPTY_OBJ, current: null });\n        var current = simpleChangesStore.current || (simpleChangesStore.current = {});\n        var previous = simpleChangesStore.previous;\n        var declaredName = this.declaredInputs[publicName];\n        var previousChange = previous[declaredName];\n        current[declaredName] = new SimpleChange(previousChange && previousChange.currentValue, value, previous === EMPTY_OBJ);\n        instance[privateName] = value;\n    }\n    var SIMPLE_CHANGES_STORE = '__ngSimpleChanges__';\n    function getSimpleChangesStore(instance) {\n        return instance[SIMPLE_CHANGES_STORE] || null;\n    }\n    function setSimpleChangesStore(instance, store) {\n        return instance[SIMPLE_CHANGES_STORE] = store;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function getSuperType(type) {\n        return Object.getPrototypeOf(type.prototype).constructor;\n    }\n    /**\n     * Merges the definition from a super class to a sub class.\n     * @param definition The definition that is a SubClass of another directive of component\n     *\n     * @codeGenApi\n     */\n    function ɵɵInheritDefinitionFeature(definition) {\n        var e_1, _a;\n        var superType = getSuperType(definition.type);\n        while (superType) {\n            var superDef = undefined;\n            if (isComponentDef(definition)) {\n                // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n                superDef = superType.ngComponentDef || superType.ngDirectiveDef;\n            }\n            else {\n                if (superType.ngComponentDef) {\n                    throw new Error('Directives cannot inherit Components');\n                }\n                // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n                superDef = superType.ngDirectiveDef;\n            }\n            var baseDef = superType.ngBaseDef;\n            // Some fields in the definition may be empty, if there were no values to put in them that\n            // would've justified object creation. Unwrap them if necessary.\n            if (baseDef || superDef) {\n                var writeableDef = definition;\n                writeableDef.inputs = maybeUnwrapEmpty(definition.inputs);\n                writeableDef.declaredInputs = maybeUnwrapEmpty(definition.declaredInputs);\n                writeableDef.outputs = maybeUnwrapEmpty(definition.outputs);\n            }\n            if (baseDef) {\n                var baseViewQuery = baseDef.viewQuery;\n                var baseContentQueries = baseDef.contentQueries;\n                var baseHostBindings = baseDef.hostBindings;\n                baseHostBindings && inheritHostBindings(definition, baseHostBindings);\n                baseViewQuery && inheritViewQuery(definition, baseViewQuery);\n                baseContentQueries && inheritContentQueries(definition, baseContentQueries);\n                fillProperties(definition.inputs, baseDef.inputs);\n                fillProperties(definition.declaredInputs, baseDef.declaredInputs);\n                fillProperties(definition.outputs, baseDef.outputs);\n            }\n            if (superDef) {\n                // Merge hostBindings\n                var superHostBindings = superDef.hostBindings;\n                superHostBindings && inheritHostBindings(definition, superHostBindings);\n                // Merge queries\n                var superViewQuery = superDef.viewQuery;\n                var superContentQueries = superDef.contentQueries;\n                superViewQuery && inheritViewQuery(definition, superViewQuery);\n                superContentQueries && inheritContentQueries(definition, superContentQueries);\n                // Merge inputs and outputs\n                fillProperties(definition.inputs, superDef.inputs);\n                fillProperties(definition.declaredInputs, superDef.declaredInputs);\n                fillProperties(definition.outputs, superDef.outputs);\n                // Inherit hooks\n                // Assume super class inheritance feature has already run.\n                definition.afterContentChecked =\n                    definition.afterContentChecked || superDef.afterContentChecked;\n                definition.afterContentInit = definition.afterContentInit || superDef.afterContentInit;\n                definition.afterViewChecked = definition.afterViewChecked || superDef.afterViewChecked;\n                definition.afterViewInit = definition.afterViewInit || superDef.afterViewInit;\n                definition.doCheck = definition.doCheck || superDef.doCheck;\n                definition.onDestroy = definition.onDestroy || superDef.onDestroy;\n                definition.onInit = definition.onInit || superDef.onInit;\n                // Run parent features\n                var features = superDef.features;\n                if (features) {\n                    try {\n                        for (var features_1 = __values(features), features_1_1 = features_1.next(); !features_1_1.done; features_1_1 = features_1.next()) {\n                            var feature = features_1_1.value;\n                            if (feature && feature.ngInherit) {\n                                feature(definition);\n                            }\n                        }\n                    }\n                    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                    finally {\n                        try {\n                            if (features_1_1 && !features_1_1.done && (_a = features_1.return)) _a.call(features_1);\n                        }\n                        finally { if (e_1) throw e_1.error; }\n                    }\n                }\n            }\n            else {\n                // Even if we don't have a definition, check the type for the hooks and use those if need be\n                var superPrototype = superType.prototype;\n                if (superPrototype) {\n                    definition.afterContentChecked =\n                        definition.afterContentChecked || superPrototype.ngAfterContentChecked;\n                    definition.afterContentInit =\n                        definition.afterContentInit || superPrototype.ngAfterContentInit;\n                    definition.afterViewChecked =\n                        definition.afterViewChecked || superPrototype.ngAfterViewChecked;\n                    definition.afterViewInit = definition.afterViewInit || superPrototype.ngAfterViewInit;\n                    definition.doCheck = definition.doCheck || superPrototype.ngDoCheck;\n                    definition.onDestroy = definition.onDestroy || superPrototype.ngOnDestroy;\n                    definition.onInit = definition.onInit || superPrototype.ngOnInit;\n                    if (superPrototype.ngOnChanges) {\n                        ɵɵNgOnChangesFeature()(definition);\n                    }\n                }\n            }\n            superType = Object.getPrototypeOf(superType);\n        }\n    }\n    function maybeUnwrapEmpty(value) {\n        if (value === EMPTY_OBJ) {\n            return {};\n        }\n        else if (value === EMPTY_ARRAY$1) {\n            return [];\n        }\n        else {\n            return value;\n        }\n    }\n    function inheritViewQuery(definition, superViewQuery) {\n        var prevViewQuery = definition.viewQuery;\n        if (prevViewQuery) {\n            definition.viewQuery = function (rf, ctx) {\n                superViewQuery(rf, ctx);\n                prevViewQuery(rf, ctx);\n            };\n        }\n        else {\n            definition.viewQuery = superViewQuery;\n        }\n    }\n    function inheritContentQueries(definition, superContentQueries) {\n        var prevContentQueries = definition.contentQueries;\n        if (prevContentQueries) {\n            definition.contentQueries = function (rf, ctx, directiveIndex) {\n                superContentQueries(rf, ctx, directiveIndex);\n                prevContentQueries(rf, ctx, directiveIndex);\n            };\n        }\n        else {\n            definition.contentQueries = superContentQueries;\n        }\n    }\n    function inheritHostBindings(definition, superHostBindings) {\n        var prevHostBindings = definition.hostBindings;\n        // If the subclass does not have a host bindings function, we set the subclass host binding\n        // function to be the superclass's (in this feature). We should check if they're the same here\n        // to ensure we don't inherit it twice.\n        if (superHostBindings !== prevHostBindings) {\n            if (prevHostBindings) {\n                // because inheritance is unknown during compile time, the runtime code\n                // needs to be informed of the super-class depth so that instruction code\n                // can distinguish one host bindings function from another. The reason why\n                // relying on the directive uniqueId exclusively is not enough is because the\n                // uniqueId value and the directive instance stay the same between hostBindings\n                // calls throughout the directive inheritance chain. This means that without\n                // a super-class depth value, there is no way to know whether a parent or\n                // sub-class host bindings function is currently being executed.\n                definition.hostBindings = function (rf, ctx, elementIndex) {\n                    // The reason why we increment first and then decrement is so that parent\n                    // hostBindings calls have a higher id value compared to sub-class hostBindings\n                    // calls (this way the leaf directive is always at a super-class depth of 0).\n                    adjustActiveDirectiveSuperClassDepthPosition(1);\n                    try {\n                        superHostBindings(rf, ctx, elementIndex);\n                    }\n                    finally {\n                        adjustActiveDirectiveSuperClassDepthPosition(-1);\n                    }\n                    prevHostBindings(rf, ctx, elementIndex);\n                };\n            }\n            else {\n                definition.hostBindings = superHostBindings;\n            }\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Resolves the providers which are defined in the DirectiveDef.\n     *\n     * When inserting the tokens and the factories in their respective arrays, we can assume that\n     * this method is called first for the component (if any), and then for other directives on the same\n     * node.\n     * As a consequence,the providers are always processed in that order:\n     * 1) The view providers of the component\n     * 2) The providers of the component\n     * 3) The providers of the other directives\n     * This matches the structure of the injectables arrays of a view (for each node).\n     * So the tokens and the factories can be pushed at the end of the arrays, except\n     * in one case for multi providers.\n     *\n     * @param def the directive definition\n     * @param providers: Array of `providers`.\n     * @param viewProviders: Array of `viewProviders`.\n     */\n    function providersResolver(def, providers, viewProviders) {\n        var lView = getLView();\n        var tView = lView[TVIEW];\n        if (tView.firstTemplatePass) {\n            var isComponent = isComponentDef(def);\n            // The list of view providers is processed first, and the flags are updated\n            resolveProvider(viewProviders, tView.data, tView.blueprint, isComponent, true);\n            // Then, the list of providers is processed, and the flags are updated\n            resolveProvider(providers, tView.data, tView.blueprint, isComponent, false);\n        }\n    }\n    /**\n     * Resolves a provider and publishes it to the DI system.\n     */\n    function resolveProvider(provider, tInjectables, lInjectablesBlueprint, isComponent, isViewProvider) {\n        provider = resolveForwardRef(provider);\n        if (Array.isArray(provider)) {\n            // Recursively call `resolveProvider`\n            // Recursion is OK in this case because this code will not be in hot-path once we implement\n            // cloning of the initial state.\n            for (var i = 0; i < provider.length; i++) {\n                resolveProvider(provider[i], tInjectables, lInjectablesBlueprint, isComponent, isViewProvider);\n            }\n        }\n        else {\n            var lView = getLView();\n            var token = isTypeProvider(provider) ? provider : resolveForwardRef(provider.provide);\n            var providerFactory = providerToFactory(provider);\n            var tNode = getPreviousOrParentTNode();\n            var beginIndex = tNode.providerIndexes & 65535 /* ProvidersStartIndexMask */;\n            var endIndex = tNode.directiveStart;\n            var cptViewProvidersCount = tNode.providerIndexes >> 16 /* CptViewProvidersCountShift */;\n            if (isClassProvider(provider) || isTypeProvider(provider)) {\n                var prototype = (provider.useClass || provider).prototype;\n                var ngOnDestroy = prototype.ngOnDestroy;\n                if (ngOnDestroy) {\n                    var tView = lView[TVIEW];\n                    (tView.destroyHooks || (tView.destroyHooks = [])).push(tInjectables.length, ngOnDestroy);\n                }\n            }\n            if (isTypeProvider(provider) || !provider.multi) {\n                // Single provider case: the factory is created and pushed immediately\n                var factory = new NodeInjectorFactory(providerFactory, isViewProvider, ɵɵdirectiveInject);\n                var existingFactoryIndex = indexOf(token, tInjectables, isViewProvider ? beginIndex : beginIndex + cptViewProvidersCount, endIndex);\n                if (existingFactoryIndex == -1) {\n                    diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), lView, token);\n                    tInjectables.push(token);\n                    tNode.directiveStart++;\n                    tNode.directiveEnd++;\n                    if (isViewProvider) {\n                        tNode.providerIndexes += 65536 /* CptViewProvidersCountShifter */;\n                    }\n                    lInjectablesBlueprint.push(factory);\n                    lView.push(factory);\n                }\n                else {\n                    lInjectablesBlueprint[existingFactoryIndex] = factory;\n                    lView[existingFactoryIndex] = factory;\n                }\n            }\n            else {\n                // Multi provider case:\n                // We create a multi factory which is going to aggregate all the values.\n                // Since the output of such a factory depends on content or view injection,\n                // we create two of them, which are linked together.\n                //\n                // The first one (for view providers) is always in the first block of the injectables array,\n                // and the second one (for providers) is always in the second block.\n                // This is important because view providers have higher priority. When a multi token\n                // is being looked up, the view providers should be found first.\n                // Note that it is not possible to have a multi factory in the third block (directive block).\n                //\n                // The algorithm to process multi providers is as follows:\n                // 1) If the multi provider comes from the `viewProviders` of the component:\n                //   a) If the special view providers factory doesn't exist, it is created and pushed.\n                //   b) Else, the multi provider is added to the existing multi factory.\n                // 2) If the multi provider comes from the `providers` of the component or of another\n                // directive:\n                //   a) If the multi factory doesn't exist, it is created and provider pushed into it.\n                //      It is also linked to the multi factory for view providers, if it exists.\n                //   b) Else, the multi provider is added to the existing multi factory.\n                var existingProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex + cptViewProvidersCount, endIndex);\n                var existingViewProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex, beginIndex + cptViewProvidersCount);\n                var doesProvidersFactoryExist = existingProvidersFactoryIndex >= 0 &&\n                    lInjectablesBlueprint[existingProvidersFactoryIndex];\n                var doesViewProvidersFactoryExist = existingViewProvidersFactoryIndex >= 0 &&\n                    lInjectablesBlueprint[existingViewProvidersFactoryIndex];\n                if (isViewProvider && !doesViewProvidersFactoryExist ||\n                    !isViewProvider && !doesProvidersFactoryExist) {\n                    // Cases 1.a and 2.a\n                    diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), lView, token);\n                    var factory = multiFactory(isViewProvider ? multiViewProvidersFactoryResolver : multiProvidersFactoryResolver, lInjectablesBlueprint.length, isViewProvider, isComponent, providerFactory);\n                    if (!isViewProvider && doesViewProvidersFactoryExist) {\n                        lInjectablesBlueprint[existingViewProvidersFactoryIndex].providerFactory = factory;\n                    }\n                    tInjectables.push(token);\n                    tNode.directiveStart++;\n                    tNode.directiveEnd++;\n                    if (isViewProvider) {\n                        tNode.providerIndexes += 65536 /* CptViewProvidersCountShifter */;\n                    }\n                    lInjectablesBlueprint.push(factory);\n                    lView.push(factory);\n                }\n                else {\n                    // Cases 1.b and 2.b\n                    multiFactoryAdd(lInjectablesBlueprint[isViewProvider ? existingViewProvidersFactoryIndex : existingProvidersFactoryIndex], providerFactory, !isViewProvider && isComponent);\n                }\n                if (!isViewProvider && isComponent && doesViewProvidersFactoryExist) {\n                    lInjectablesBlueprint[existingViewProvidersFactoryIndex].componentProviders++;\n                }\n            }\n        }\n    }\n    /**\n     * Add a factory in a multi factory.\n     */\n    function multiFactoryAdd(multiFactory, factory, isComponentProvider) {\n        multiFactory.multi.push(factory);\n        if (isComponentProvider) {\n            multiFactory.componentProviders++;\n        }\n    }\n    /**\n     * Returns the index of item in the array, but only in the begin to end range.\n     */\n    function indexOf(item, arr, begin, end) {\n        for (var i = begin; i < end; i++) {\n            if (arr[i] === item)\n                return i;\n        }\n        return -1;\n    }\n    /**\n     * Use this with `multi` `providers`.\n     */\n    function multiProvidersFactoryResolver(_, tData, lData, tNode) {\n        return multiResolve(this.multi, []);\n    }\n    /**\n     * Use this with `multi` `viewProviders`.\n     *\n     * This factory knows how to concatenate itself with the existing `multi` `providers`.\n     */\n    function multiViewProvidersFactoryResolver(_, tData, lData, tNode) {\n        var factories = this.multi;\n        var result;\n        if (this.providerFactory) {\n            var componentCount = this.providerFactory.componentProviders;\n            var multiProviders = getNodeInjectable(tData, lData, this.providerFactory.index, tNode);\n            // Copy the section of the array which contains `multi` `providers` from the component\n            result = multiProviders.slice(0, componentCount);\n            // Insert the `viewProvider` instances.\n            multiResolve(factories, result);\n            // Copy the section of the array which contains `multi` `providers` from other directives\n            for (var i = componentCount; i < multiProviders.length; i++) {\n                result.push(multiProviders[i]);\n            }\n        }\n        else {\n            result = [];\n            // Insert the `viewProvider` instances.\n            multiResolve(factories, result);\n        }\n        return result;\n    }\n    /**\n     * Maps an array of factories into an array of values.\n     */\n    function multiResolve(factories, result) {\n        for (var i = 0; i < factories.length; i++) {\n            var factory = factories[i];\n            result.push(factory());\n        }\n        return result;\n    }\n    /**\n     * Creates a multi factory.\n     */\n    function multiFactory(factoryFn, index, isViewProvider, isComponent, f) {\n        var factory = new NodeInjectorFactory(factoryFn, isViewProvider, ɵɵdirectiveInject);\n        factory.multi = [];\n        factory.index = index;\n        factory.componentProviders = 0;\n        multiFactoryAdd(factory, f, isComponent && !isViewProvider);\n        return factory;\n    }\n\n    /**\n     * This feature resolves the providers of a directive (or component),\n     * and publish them into the DI system, making it visible to others for injection.\n     *\n     * For example:\n     * ```ts\n     * class ComponentWithProviders {\n     *   constructor(private greeter: GreeterDE) {}\n     *\n     *   static ngComponentDef = defineComponent({\n     *     type: ComponentWithProviders,\n     *     selectors: [['component-with-providers']],\n     *    factory: () => new ComponentWithProviders(directiveInject(GreeterDE as any)),\n     *    consts: 1,\n     *    vars: 1,\n     *    template: function(fs: RenderFlags, ctx: ComponentWithProviders) {\n     *      if (fs & RenderFlags.Create) {\n     *        ɵɵtext(0);\n     *      }\n     *      if (fs & RenderFlags.Update) {\n     *        ɵɵselect(0);\n     *        ɵɵtextBinding(ctx.greeter.greet());\n     *      }\n     *    },\n     *    features: [ProvidersFeature([GreeterDE])]\n     *  });\n     * }\n     * ```\n     *\n     * @param definition\n     *\n     * @codeGenApi\n     */\n    function ɵɵProvidersFeature(providers, viewProviders) {\n        if (viewProviders === void 0) { viewProviders = []; }\n        return function (definition) {\n            definition.providersResolver =\n                function (def, processProvidersFn) {\n                    return providersResolver(def, //\n                    processProvidersFn ? processProvidersFn(providers) : providers, //\n                    viewProviders);\n                };\n        };\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Represents a component created by a `ComponentFactory`.\n     * Provides access to the component instance and related objects,\n     * and provides the means of destroying the instance.\n     *\n     * @publicApi\n     */\n    var ComponentRef = /** @class */ (function () {\n        function ComponentRef() {\n        }\n        return ComponentRef;\n    }());\n    /**\n     * @publicApi\n     */\n    var ComponentFactory = /** @class */ (function () {\n        function ComponentFactory() {\n        }\n        return ComponentFactory;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function noComponentFactoryError(component) {\n        var error = Error(\"No component factory found for \" + stringify(component) + \". Did you add it to @NgModule.entryComponents?\");\n        error[ERROR_COMPONENT] = component;\n        return error;\n    }\n    var ERROR_COMPONENT = 'ngComponent';\n    var _NullComponentFactoryResolver = /** @class */ (function () {\n        function _NullComponentFactoryResolver() {\n        }\n        _NullComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {\n            throw noComponentFactoryError(component);\n        };\n        return _NullComponentFactoryResolver;\n    }());\n    /**\n     * @publicApi\n     */\n    var ComponentFactoryResolver = /** @class */ (function () {\n        function ComponentFactoryResolver() {\n        }\n        ComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();\n        return ComponentFactoryResolver;\n    }());\n    var CodegenComponentFactoryResolver = /** @class */ (function () {\n        function CodegenComponentFactoryResolver(factories, _parent, _ngModule) {\n            this._parent = _parent;\n            this._ngModule = _ngModule;\n            this._factories = new Map();\n            for (var i = 0; i < factories.length; i++) {\n                var factory = factories[i];\n                this._factories.set(factory.componentType, factory);\n            }\n        }\n        CodegenComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {\n            var factory = this._factories.get(component);\n            if (!factory && this._parent) {\n                factory = this._parent.resolveComponentFactory(component);\n            }\n            if (!factory) {\n                throw noComponentFactoryError(component);\n            }\n            return new ComponentFactoryBoundToModule(factory, this._ngModule);\n        };\n        return CodegenComponentFactoryResolver;\n    }());\n    var ComponentFactoryBoundToModule = /** @class */ (function (_super) {\n        __extends(ComponentFactoryBoundToModule, _super);\n        function ComponentFactoryBoundToModule(factory, ngModule) {\n            var _this = _super.call(this) || this;\n            _this.factory = factory;\n            _this.ngModule = ngModule;\n            _this.selector = factory.selector;\n            _this.componentType = factory.componentType;\n            _this.ngContentSelectors = factory.ngContentSelectors;\n            _this.inputs = factory.inputs;\n            _this.outputs = factory.outputs;\n            return _this;\n        }\n        ComponentFactoryBoundToModule.prototype.create = function (injector, projectableNodes, rootSelectorOrNode, ngModule) {\n            return this.factory.create(injector, projectableNodes, rootSelectorOrNode, ngModule || this.ngModule);\n        };\n        return ComponentFactoryBoundToModule;\n    }(ComponentFactory));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Represents an instance of an NgModule created via a {@link NgModuleFactory}.\n     *\n     * `NgModuleRef` provides access to the NgModule Instance as well other objects related to this\n     * NgModule Instance.\n     *\n     * @publicApi\n     */\n    var NgModuleRef = /** @class */ (function () {\n        function NgModuleRef() {\n        }\n        return NgModuleRef;\n    }());\n    /**\n     * @publicApi\n     */\n    var NgModuleFactory = /** @class */ (function () {\n        function NgModuleFactory() {\n        }\n        return NgModuleFactory;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var ViewRef = /** @class */ (function () {\n        function ViewRef(_lView, _context, _componentIndex) {\n            this._context = _context;\n            this._componentIndex = _componentIndex;\n            this._appRef = null;\n            this._viewContainerRef = null;\n            /**\n             * @internal\n             */\n            this._tViewNode = null;\n            this._lView = _lView;\n        }\n        Object.defineProperty(ViewRef.prototype, \"rootNodes\", {\n            get: function () {\n                if (this._lView[HOST] == null) {\n                    var tView = this._lView[T_HOST];\n                    return collectNativeNodes(this._lView, tView, []);\n                }\n                return [];\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ViewRef.prototype, \"context\", {\n            get: function () { return this._context ? this._context : this._lookUpContext(); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ViewRef.prototype, \"destroyed\", {\n            get: function () {\n                return (this._lView[FLAGS] & 256 /* Destroyed */) === 256 /* Destroyed */;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        ViewRef.prototype.destroy = function () {\n            if (this._appRef) {\n                this._appRef.detachView(this);\n            }\n            else if (this._viewContainerRef) {\n                var index = this._viewContainerRef.indexOf(this);\n                if (index > -1) {\n                    this._viewContainerRef.detach(index);\n                }\n                this._viewContainerRef = null;\n            }\n            destroyLView(this._lView);\n        };\n        ViewRef.prototype.onDestroy = function (callback) { storeCleanupFn(this._lView, callback); };\n        /**\n         * Marks a view and all of its ancestors dirty.\n         *\n         * It also triggers change detection by calling `scheduleTick` internally, which coalesces\n         * multiple `markForCheck` calls to into one change detection run.\n         *\n         * This can be used to ensure an {@link ChangeDetectionStrategy#OnPush OnPush} component is\n         * checked when it needs to be re-rendered but the two normal triggers haven't marked it\n         * dirty (i.e. inputs haven't changed and events haven't fired in the view).\n         *\n         * <!-- TODO: Add a link to a chapter on OnPush components -->\n         *\n         * @usageNotes\n         * ### Example\n         *\n         * ```typescript\n         * @Component({\n         *   selector: 'my-app',\n         *   template: `Number of ticks: {{numberOfTicks}}`\n         *   changeDetection: ChangeDetectionStrategy.OnPush,\n         * })\n         * class AppComponent {\n         *   numberOfTicks = 0;\n         *\n         *   constructor(private ref: ChangeDetectorRef) {\n         *     setInterval(() => {\n         *       this.numberOfTicks++;\n         *       // the following is required, otherwise the view will not be updated\n         *       this.ref.markForCheck();\n         *     }, 1000);\n         *   }\n         * }\n         * ```\n         */\n        ViewRef.prototype.markForCheck = function () { markViewDirty(this._lView); };\n        /**\n         * Detaches the view from the change detection tree.\n         *\n         * Detached views will not be checked during change detection runs until they are\n         * re-attached, even if they are dirty. `detach` can be used in combination with\n         * {@link ChangeDetectorRef#detectChanges detectChanges} to implement local change\n         * detection checks.\n         *\n         * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n         * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n         *\n         * @usageNotes\n         * ### Example\n         *\n         * The following example defines a component with a large list of readonly data.\n         * Imagine the data changes constantly, many times per second. For performance reasons,\n         * we want to check and update the list every five seconds. We can do that by detaching\n         * the component's change detector and doing a local check every five seconds.\n         *\n         * ```typescript\n         * class DataProvider {\n         *   // in a real application the returned data will be different every time\n         *   get data() {\n         *     return [1,2,3,4,5];\n         *   }\n         * }\n         *\n         * @Component({\n         *   selector: 'giant-list',\n         *   template: `\n         *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</li>\n         *   `,\n         * })\n         * class GiantList {\n         *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\n         *     ref.detach();\n         *     setInterval(() => {\n         *       this.ref.detectChanges();\n         *     }, 5000);\n         *   }\n         * }\n         *\n         * @Component({\n         *   selector: 'app',\n         *   providers: [DataProvider],\n         *   template: `\n         *     <giant-list><giant-list>\n         *   `,\n         * })\n         * class App {\n         * }\n         * ```\n         */\n        ViewRef.prototype.detach = function () { this._lView[FLAGS] &= ~128 /* Attached */; };\n        /**\n         * Re-attaches a view to the change detection tree.\n         *\n         * This can be used to re-attach views that were previously detached from the tree\n         * using {@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.\n         *\n         * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n         *\n         * @usageNotes\n         * ### Example\n         *\n         * The following example creates a component displaying `live` data. The component will detach\n         * its change detector from the main change detector tree when the component's live property\n         * is set to false.\n         *\n         * ```typescript\n         * class DataProvider {\n         *   data = 1;\n         *\n         *   constructor() {\n         *     setInterval(() => {\n         *       this.data = this.data * 2;\n         *     }, 500);\n         *   }\n         * }\n         *\n         * @Component({\n         *   selector: 'live-data',\n         *   inputs: ['live'],\n         *   template: 'Data: {{dataProvider.data}}'\n         * })\n         * class LiveData {\n         *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\n         *\n         *   set live(value) {\n         *     if (value) {\n         *       this.ref.reattach();\n         *     } else {\n         *       this.ref.detach();\n         *     }\n         *   }\n         * }\n         *\n         * @Component({\n         *   selector: 'my-app',\n         *   providers: [DataProvider],\n         *   template: `\n         *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\n         *     <live-data [live]=\"live\"><live-data>\n         *   `,\n         * })\n         * class AppComponent {\n         *   live = true;\n         * }\n         * ```\n         */\n        ViewRef.prototype.reattach = function () { this._lView[FLAGS] |= 128 /* Attached */; };\n        /**\n         * Checks the view and its children.\n         *\n         * This can also be used in combination with {@link ChangeDetectorRef#detach detach} to implement\n         * local change detection checks.\n         *\n         * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n         * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n         *\n         * @usageNotes\n         * ### Example\n         *\n         * The following example defines a component with a large list of readonly data.\n         * Imagine, the data changes constantly, many times per second. For performance reasons,\n         * we want to check and update the list every five seconds.\n         *\n         * We can do that by detaching the component's change detector and doing a local change detection\n         * check every five seconds.\n         *\n         * See {@link ChangeDetectorRef#detach detach} for more information.\n         */\n        ViewRef.prototype.detectChanges = function () { detectChangesInternal(this._lView, this.context); };\n        /**\n         * Checks the change detector and its children, and throws if any changes are detected.\n         *\n         * This is used in development mode to verify that running change detection doesn't\n         * introduce other changes.\n         */\n        ViewRef.prototype.checkNoChanges = function () { checkNoChangesInternal(this._lView, this.context); };\n        ViewRef.prototype.attachToViewContainerRef = function (vcRef) {\n            if (this._appRef) {\n                throw new Error('This view is already attached directly to the ApplicationRef!');\n            }\n            this._viewContainerRef = vcRef;\n        };\n        ViewRef.prototype.detachFromAppRef = function () {\n            this._appRef = null;\n            renderDetachView(this._lView);\n        };\n        ViewRef.prototype.attachToAppRef = function (appRef) {\n            if (this._viewContainerRef) {\n                throw new Error('This view is already attached to a ViewContainer!');\n            }\n            this._appRef = appRef;\n        };\n        ViewRef.prototype._lookUpContext = function () {\n            return this._context = getLViewParent(this._lView)[this._componentIndex];\n        };\n        return ViewRef;\n    }());\n    /** @internal */\n    var RootViewRef = /** @class */ (function (_super) {\n        __extends(RootViewRef, _super);\n        function RootViewRef(_view) {\n            var _this = _super.call(this, _view, null, -1) || this;\n            _this._view = _view;\n            return _this;\n        }\n        RootViewRef.prototype.detectChanges = function () { detectChangesInRootView(this._view); };\n        RootViewRef.prototype.checkNoChanges = function () { checkNoChangesInRootView(this._view); };\n        Object.defineProperty(RootViewRef.prototype, \"context\", {\n            get: function () { return null; },\n            enumerable: true,\n            configurable: true\n        });\n        return RootViewRef;\n    }(ViewRef));\n    function collectNativeNodes(lView, parentTNode, result) {\n        var tNodeChild = parentTNode.child;\n        while (tNodeChild) {\n            var nativeNode = getNativeByTNode(tNodeChild, lView);\n            nativeNode && result.push(nativeNode);\n            if (tNodeChild.type === 4 /* ElementContainer */) {\n                collectNativeNodes(lView, tNodeChild, result);\n            }\n            else if (tNodeChild.type === 1 /* Projection */) {\n                var componentView = findComponentView(lView);\n                var componentHost = componentView[T_HOST];\n                var parentView = getLViewParent(componentView);\n                var currentProjectedNode = componentHost.projection[tNodeChild.projection];\n                while (currentProjectedNode && parentView) {\n                    result.push(getNativeByTNode(currentProjectedNode, parentView));\n                    currentProjectedNode = currentProjectedNode.next;\n                }\n            }\n            tNodeChild = tNodeChild.next;\n        }\n        return result;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Creates an ElementRef from the most recent node.\n     *\n     * @returns The ElementRef instance to use\n     */\n    function injectElementRef(ElementRefToken) {\n        return createElementRef(ElementRefToken, getPreviousOrParentTNode(), getLView());\n    }\n    var R3ElementRef;\n    /**\n     * Creates an ElementRef given a node.\n     *\n     * @param ElementRefToken The ElementRef type\n     * @param tNode The node for which you'd like an ElementRef\n     * @param view The view to which the node belongs\n     * @returns The ElementRef instance to use\n     */\n    function createElementRef(ElementRefToken, tNode, view) {\n        if (!R3ElementRef) {\n            // TODO: Fix class name, should be ElementRef, but there appears to be a rollup bug\n            R3ElementRef = /** @class */ (function (_super) {\n                __extends(ElementRef_, _super);\n                function ElementRef_() {\n                    return _super !== null && _super.apply(this, arguments) || this;\n                }\n                return ElementRef_;\n            }(ElementRefToken));\n        }\n        return new R3ElementRef(getNativeByTNode(tNode, view));\n    }\n    var R3TemplateRef;\n    /**\n     * Creates a TemplateRef given a node.\n     *\n     * @returns The TemplateRef instance to use\n     */\n    function injectTemplateRef(TemplateRefToken, ElementRefToken) {\n        return createTemplateRef(TemplateRefToken, ElementRefToken, getPreviousOrParentTNode(), getLView());\n    }\n    /**\n     * Creates a TemplateRef and stores it on the injector.\n     *\n     * @param TemplateRefToken The TemplateRef type\n     * @param ElementRefToken The ElementRef type\n     * @param hostTNode The node that is requesting a TemplateRef\n     * @param hostView The view to which the node belongs\n     * @returns The TemplateRef instance to use\n     */\n    function createTemplateRef(TemplateRefToken, ElementRefToken, hostTNode, hostView) {\n        if (!R3TemplateRef) {\n            // TODO: Fix class name, should be TemplateRef, but there appears to be a rollup bug\n            R3TemplateRef = /** @class */ (function (_super) {\n                __extends(TemplateRef_, _super);\n                function TemplateRef_(_declarationParentView, elementRef, _tView, _hostLContainer, _injectorIndex) {\n                    var _this = _super.call(this) || this;\n                    _this._declarationParentView = _declarationParentView;\n                    _this.elementRef = elementRef;\n                    _this._tView = _tView;\n                    _this._hostLContainer = _hostLContainer;\n                    _this._injectorIndex = _injectorIndex;\n                    return _this;\n                }\n                TemplateRef_.prototype.createEmbeddedView = function (context, container, index) {\n                    var currentQueries = this._declarationParentView[QUERIES];\n                    // Query container may be missing if this view was created in a directive\n                    // constructor. Create it now to avoid losing results in embedded views.\n                    if (currentQueries && this._hostLContainer[QUERIES] == null) {\n                        this._hostLContainer[QUERIES] = currentQueries.container();\n                    }\n                    var lView = createEmbeddedViewAndNode(this._tView, context, this._declarationParentView, this._hostLContainer[QUERIES], this._injectorIndex);\n                    if (container) {\n                        insertView(lView, container, index);\n                    }\n                    renderEmbeddedTemplate(lView, this._tView, context);\n                    var viewRef = new ViewRef(lView, context, -1);\n                    viewRef._tViewNode = lView[T_HOST];\n                    return viewRef;\n                };\n                return TemplateRef_;\n            }(TemplateRefToken));\n        }\n        if (hostTNode.type === 0 /* Container */) {\n            var hostContainer = hostView[hostTNode.index];\n            ngDevMode && assertDefined(hostTNode.tViews, 'TView must be allocated');\n            return new R3TemplateRef(hostView, createElementRef(ElementRefToken, hostTNode, hostView), hostTNode.tViews, hostContainer, hostTNode.injectorIndex);\n        }\n        else {\n            return null;\n        }\n    }\n    var R3ViewContainerRef;\n    /**\n     * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef\n     * already exists, retrieves the existing ViewContainerRef.\n     *\n     * @returns The ViewContainerRef instance to use\n     */\n    function injectViewContainerRef(ViewContainerRefToken, ElementRefToken) {\n        var previousTNode = getPreviousOrParentTNode();\n        return createContainerRef(ViewContainerRefToken, ElementRefToken, previousTNode, getLView());\n    }\n    /**\n     * Creates a ViewContainerRef and stores it on the injector.\n     *\n     * @param ViewContainerRefToken The ViewContainerRef type\n     * @param ElementRefToken The ElementRef type\n     * @param hostTNode The node that is requesting a ViewContainerRef\n     * @param hostView The view to which the node belongs\n     * @returns The ViewContainerRef instance to use\n     */\n    function createContainerRef(ViewContainerRefToken, ElementRefToken, hostTNode, hostView) {\n        if (!R3ViewContainerRef) {\n            // TODO: Fix class name, should be ViewContainerRef, but there appears to be a rollup bug\n            R3ViewContainerRef = /** @class */ (function (_super) {\n                __extends(ViewContainerRef_, _super);\n                function ViewContainerRef_(_lContainer, _hostTNode, _hostView) {\n                    var _this = _super.call(this) || this;\n                    _this._lContainer = _lContainer;\n                    _this._hostTNode = _hostTNode;\n                    _this._hostView = _hostView;\n                    _this._viewRefs = [];\n                    return _this;\n                }\n                Object.defineProperty(ViewContainerRef_.prototype, \"element\", {\n                    get: function () {\n                        return createElementRef(ElementRefToken, this._hostTNode, this._hostView);\n                    },\n                    enumerable: true,\n                    configurable: true\n                });\n                Object.defineProperty(ViewContainerRef_.prototype, \"injector\", {\n                    get: function () { return new NodeInjector(this._hostTNode, this._hostView); },\n                    enumerable: true,\n                    configurable: true\n                });\n                Object.defineProperty(ViewContainerRef_.prototype, \"parentInjector\", {\n                    /** @deprecated No replacement */\n                    get: function () {\n                        var parentLocation = getParentInjectorLocation(this._hostTNode, this._hostView);\n                        var parentView = getParentInjectorView(parentLocation, this._hostView);\n                        var parentTNode = getParentInjectorTNode(parentLocation, this._hostView, this._hostTNode);\n                        return !hasParentInjector(parentLocation) || parentTNode == null ?\n                            new NodeInjector(null, this._hostView) :\n                            new NodeInjector(parentTNode, parentView);\n                    },\n                    enumerable: true,\n                    configurable: true\n                });\n                ViewContainerRef_.prototype.clear = function () {\n                    while (this.length) {\n                        this.remove(0);\n                    }\n                };\n                ViewContainerRef_.prototype.get = function (index) { return this._viewRefs[index] || null; };\n                Object.defineProperty(ViewContainerRef_.prototype, \"length\", {\n                    get: function () {\n                        // Note that if there are no views, the container\n                        // length will be smaller than the header offset.\n                        var viewAmount = this._lContainer.length - CONTAINER_HEADER_OFFSET;\n                        return viewAmount > 0 ? viewAmount : 0;\n                    },\n                    enumerable: true,\n                    configurable: true\n                });\n                ViewContainerRef_.prototype.createEmbeddedView = function (templateRef, context, index) {\n                    var adjustedIdx = this._adjustIndex(index);\n                    var viewRef = templateRef\n                        .createEmbeddedView(context || {}, this._lContainer, adjustedIdx);\n                    viewRef.attachToViewContainerRef(this);\n                    this._viewRefs.splice(adjustedIdx, 0, viewRef);\n                    return viewRef;\n                };\n                ViewContainerRef_.prototype.createComponent = function (componentFactory, index, injector, projectableNodes, ngModuleRef) {\n                    var contextInjector = injector || this.parentInjector;\n                    if (!ngModuleRef && componentFactory.ngModule == null && contextInjector) {\n                        ngModuleRef = contextInjector.get(NgModuleRef, null);\n                    }\n                    var componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);\n                    this.insert(componentRef.hostView, index);\n                    return componentRef;\n                };\n                ViewContainerRef_.prototype.insert = function (viewRef, index) {\n                    if (viewRef.destroyed) {\n                        throw new Error('Cannot insert a destroyed View in a ViewContainer!');\n                    }\n                    var lView = viewRef._lView;\n                    var adjustedIdx = this._adjustIndex(index);\n                    if (viewAttachedToContainer(lView)) {\n                        // If view is already attached, fall back to move() so we clean up\n                        // references appropriately.\n                        return this.move(viewRef, adjustedIdx);\n                    }\n                    insertView(lView, this._lContainer, adjustedIdx);\n                    var beforeNode = getBeforeNodeForView(adjustedIdx, this._lContainer);\n                    addRemoveViewFromContainer(lView, true, beforeNode);\n                    viewRef.attachToViewContainerRef(this);\n                    this._viewRefs.splice(adjustedIdx, 0, viewRef);\n                    return viewRef;\n                };\n                ViewContainerRef_.prototype.move = function (viewRef, newIndex) {\n                    if (viewRef.destroyed) {\n                        throw new Error('Cannot move a destroyed View in a ViewContainer!');\n                    }\n                    var index = this.indexOf(viewRef);\n                    if (index !== -1)\n                        this.detach(index);\n                    this.insert(viewRef, newIndex);\n                    return viewRef;\n                };\n                ViewContainerRef_.prototype.indexOf = function (viewRef) { return this._viewRefs.indexOf(viewRef); };\n                ViewContainerRef_.prototype.remove = function (index) {\n                    var adjustedIdx = this._adjustIndex(index, -1);\n                    removeView(this._lContainer, adjustedIdx);\n                    this._viewRefs.splice(adjustedIdx, 1);\n                };\n                ViewContainerRef_.prototype.detach = function (index) {\n                    var adjustedIdx = this._adjustIndex(index, -1);\n                    var view = detachView(this._lContainer, adjustedIdx);\n                    var wasDetached = view && this._viewRefs.splice(adjustedIdx, 1)[0] != null;\n                    return wasDetached ? new ViewRef(view, view[CONTEXT], -1) : null;\n                };\n                ViewContainerRef_.prototype._adjustIndex = function (index, shift) {\n                    if (shift === void 0) { shift = 0; }\n                    if (index == null) {\n                        return this.length + shift;\n                    }\n                    if (ngDevMode) {\n                        assertGreaterThan(index, -1, 'index must be positive');\n                        // +1 because it's legal to insert at the end.\n                        assertLessThan(index, this.length + 1 + shift, 'index');\n                    }\n                    return index;\n                };\n                return ViewContainerRef_;\n            }(ViewContainerRefToken));\n        }\n        ngDevMode && assertNodeOfPossibleTypes(hostTNode, 0 /* Container */, 3 /* Element */, 4 /* ElementContainer */);\n        var lContainer;\n        var slotValue = hostView[hostTNode.index];\n        if (isLContainer(slotValue)) {\n            // If the host is a container, we don't need to create a new LContainer\n            lContainer = slotValue;\n            lContainer[ACTIVE_INDEX] = -1;\n        }\n        else {\n            var commentNode = void 0;\n            // If the host is an element container, the native host element is guaranteed to be a\n            // comment and we can reuse that comment as anchor element for the new LContainer.\n            if (hostTNode.type === 4 /* ElementContainer */) {\n                commentNode = unwrapRNode(slotValue);\n            }\n            else {\n                ngDevMode && ngDevMode.rendererCreateComment++;\n                commentNode = hostView[RENDERER].createComment(ngDevMode ? 'container' : '');\n            }\n            // A container can be created on the root (topmost / bootstrapped) component and in this case we\n            // can't use LTree to insert container's marker node (both parent of a comment node and the\n            // commend node itself is located outside of elements hold by LTree). In this specific case we\n            // use low-level DOM manipulation to insert container's marker (comment) node.\n            if (isRootView(hostView)) {\n                var renderer = hostView[RENDERER];\n                var hostNative = getNativeByTNode(hostTNode, hostView);\n                var parentOfHostNative = nativeParentNode(renderer, hostNative);\n                nativeInsertBefore(renderer, parentOfHostNative, commentNode, nativeNextSibling(renderer, hostNative));\n            }\n            else {\n                appendChild(commentNode, hostTNode, hostView);\n            }\n            hostView[hostTNode.index] = lContainer =\n                createLContainer(slotValue, hostView, commentNode, hostTNode, true);\n            addToViewTree(hostView, lContainer);\n        }\n        return new R3ViewContainerRef(lContainer, hostTNode, hostView);\n    }\n    /** Returns a ChangeDetectorRef (a.k.a. a ViewRef) */\n    function injectChangeDetectorRef() {\n        return createViewRef(getPreviousOrParentTNode(), getLView(), null);\n    }\n    /**\n     * Creates a ViewRef and stores it on the injector as ChangeDetectorRef (public alias).\n     *\n     * @param hostTNode The node that is requesting a ChangeDetectorRef\n     * @param hostView The view to which the node belongs\n     * @param context The context for this change detector ref\n     * @returns The ChangeDetectorRef to use\n     */\n    function createViewRef(hostTNode, hostView, context) {\n        if (isComponent(hostTNode)) {\n            var componentIndex = hostTNode.directiveStart;\n            var componentView = getComponentViewByIndex(hostTNode.index, hostView);\n            return new ViewRef(componentView, context, componentIndex);\n        }\n        else if (hostTNode.type === 3 /* Element */ || hostTNode.type === 0 /* Container */ ||\n            hostTNode.type === 4 /* ElementContainer */) {\n            var hostComponentView = findComponentView(hostView);\n            return new ViewRef(hostComponentView, hostComponentView[CONTEXT], -1);\n        }\n        return null;\n    }\n    function getOrCreateRenderer2(view) {\n        var renderer = view[RENDERER];\n        if (isProceduralRenderer(renderer)) {\n            return renderer;\n        }\n        else {\n            throw new Error('Cannot inject Renderer2 when the application uses Renderer3!');\n        }\n    }\n    /** Returns a Renderer2 (or throws when application was bootstrapped with Renderer3) */\n    function injectRenderer2() {\n        return getOrCreateRenderer2(getLView());\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A wrapper around a native element inside of a View.\n     *\n     * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM\n     * element.\n     *\n     * @security Permitting direct access to the DOM can make your application more vulnerable to\n     * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the\n     * [Security Guide](http://g.co/ng/security).\n     *\n     * @publicApi\n     */\n    // Note: We don't expose things like `Injector`, `ViewContainer`, ... here,\n    // i.e. users have to ask for what they need. With that, we can build better analysis tools\n    // and could do better codegen in the future.\n    var ElementRef = /** @class */ (function () {\n        function ElementRef(nativeElement) {\n            this.nativeElement = nativeElement;\n        }\n        /**\n         * @internal\n         * @nocollapse\n         */\n        ElementRef.__NG_ELEMENT_ID__ = function () { return SWITCH_ELEMENT_REF_FACTORY(ElementRef); };\n        return ElementRef;\n    }());\n    var SWITCH_ELEMENT_REF_FACTORY__POST_R3__ = injectElementRef;\n    var SWITCH_ELEMENT_REF_FACTORY = SWITCH_ELEMENT_REF_FACTORY__POST_R3__;\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * @deprecated Use `RendererType2` (and `Renderer2`) instead.\n     * @publicApi\n     */\n    var RenderComponentType = /** @class */ (function () {\n        function RenderComponentType(id, templateUrl, slotCount, encapsulation, styles, animations) {\n            this.id = id;\n            this.templateUrl = templateUrl;\n            this.slotCount = slotCount;\n            this.encapsulation = encapsulation;\n            this.styles = styles;\n            this.animations = animations;\n        }\n        return RenderComponentType;\n    }());\n    /**\n     * @deprecated Debug info is handled internally in the view engine now.\n     */\n    var RenderDebugInfo = /** @class */ (function () {\n        function RenderDebugInfo() {\n        }\n        return RenderDebugInfo;\n    }());\n    /**\n     * @deprecated Use the `Renderer2` instead.\n     * @publicApi\n     */\n    var Renderer = /** @class */ (function () {\n        function Renderer() {\n        }\n        return Renderer;\n    }());\n    var Renderer2Interceptor = new InjectionToken('Renderer2Interceptor');\n    /**\n     * Injectable service that provides a low-level interface for modifying the UI.\n     *\n     * Use this service to bypass Angular's templating and make custom UI changes that can't be\n     * expressed declaratively. For example if you need to set a property or an attribute whose name is\n     * not statically known, use {@link Renderer#setElementProperty setElementProperty} or\n     * {@link Renderer#setElementAttribute setElementAttribute} respectively.\n     *\n     * If you are implementing a custom renderer, you must implement this interface.\n     *\n     * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.\n     *\n     * @deprecated Use `RendererFactory2` instead.\n     * @publicApi\n     */\n    var RootRenderer = /** @class */ (function () {\n        function RootRenderer() {\n        }\n        return RootRenderer;\n    }());\n    /**\n     * Creates and initializes a custom renderer that implements the `Renderer2` base class.\n     *\n     * @publicApi\n     */\n    var RendererFactory2 = /** @class */ (function () {\n        function RendererFactory2() {\n        }\n        return RendererFactory2;\n    }());\n    (function (RendererStyleFlags2) {\n        /**\n         * Marks a style as important.\n         */\n        RendererStyleFlags2[RendererStyleFlags2[\"Important\"] = 1] = \"Important\";\n        /**\n         * Marks a style as using dash case naming (this-is-dash-case).\n         */\n        RendererStyleFlags2[RendererStyleFlags2[\"DashCase\"] = 2] = \"DashCase\";\n    })(exports.RendererStyleFlags2 || (exports.RendererStyleFlags2 = {}));\n    /**\n     * Extend this base class to implement custom rendering. By default, Angular\n     * renders a template into DOM. You can use custom rendering to intercept\n     * rendering calls, or to render to something other than DOM.\n     *\n     * Create your custom renderer using `RendererFactory2`.\n     *\n     * Use a custom renderer to bypass Angular's templating and\n     * make custom UI changes that can't be expressed declaratively.\n     * For example if you need to set a property or an attribute whose name is\n     * not statically known, use the `setProperty()` or\n     * `setAttribute()` method.\n     *\n     * @publicApi\n     */\n    var Renderer2 = /** @class */ (function () {\n        function Renderer2() {\n        }\n        /**\n         * @internal\n         * @nocollapse\n         */\n        Renderer2.__NG_ELEMENT_ID__ = function () { return SWITCH_RENDERER2_FACTORY(); };\n        return Renderer2;\n    }());\n    var SWITCH_RENDERER2_FACTORY__POST_R3__ = injectRenderer2;\n    var SWITCH_RENDERER2_FACTORY = SWITCH_RENDERER2_FACTORY__POST_R3__;\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * @description Represents the version of Angular\n     *\n     * @publicApi\n     */\n    var Version = /** @class */ (function () {\n        function Version(full) {\n            this.full = full;\n            this.major = full.split('.')[0];\n            this.minor = full.split('.')[1];\n            this.patch = full.split('.').slice(2).join('.');\n        }\n        return Version;\n    }());\n    /**\n     * @publicApi\n     */\n    var VERSION = new Version('8.1.0-next.3+29.sha-6a381d9.with-local-changes');\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var DefaultIterableDifferFactory = /** @class */ (function () {\n        function DefaultIterableDifferFactory() {\n        }\n        DefaultIterableDifferFactory.prototype.supports = function (obj) { return isListLikeIterable(obj); };\n        DefaultIterableDifferFactory.prototype.create = function (trackByFn) {\n            return new DefaultIterableDiffer(trackByFn);\n        };\n        return DefaultIterableDifferFactory;\n    }());\n    var trackByIdentity = function (index, item) { return item; };\n    /**\n     * @deprecated v4.0.0 - Should not be part of public API.\n     * @publicApi\n     */\n    var DefaultIterableDiffer = /** @class */ (function () {\n        function DefaultIterableDiffer(trackByFn) {\n            this.length = 0;\n            // Keeps track of the used records at any point in time (during & across `_check()` calls)\n            this._linkedRecords = null;\n            // Keeps track of the removed records at any point in time during `_check()` calls.\n            this._unlinkedRecords = null;\n            this._previousItHead = null;\n            this._itHead = null;\n            this._itTail = null;\n            this._additionsHead = null;\n            this._additionsTail = null;\n            this._movesHead = null;\n            this._movesTail = null;\n            this._removalsHead = null;\n            this._removalsTail = null;\n            // Keeps track of records where custom track by is the same, but item identity has changed\n            this._identityChangesHead = null;\n            this._identityChangesTail = null;\n            this._trackByFn = trackByFn || trackByIdentity;\n        }\n        DefaultIterableDiffer.prototype.forEachItem = function (fn) {\n            var record;\n            for (record = this._itHead; record !== null; record = record._next) {\n                fn(record);\n            }\n        };\n        DefaultIterableDiffer.prototype.forEachOperation = function (fn) {\n            var nextIt = this._itHead;\n            var nextRemove = this._removalsHead;\n            var addRemoveOffset = 0;\n            var moveOffsets = null;\n            while (nextIt || nextRemove) {\n                // Figure out which is the next record to process\n                // Order: remove, add, move\n                var record = !nextRemove ||\n                    nextIt &&\n                        nextIt.currentIndex <\n                            getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ?\n                    nextIt :\n                    nextRemove;\n                var adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);\n                var currentIndex = record.currentIndex;\n                // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary\n                if (record === nextRemove) {\n                    addRemoveOffset--;\n                    nextRemove = nextRemove._nextRemoved;\n                }\n                else {\n                    nextIt = nextIt._next;\n                    if (record.previousIndex == null) {\n                        addRemoveOffset++;\n                    }\n                    else {\n                        // INVARIANT:  currentIndex < previousIndex\n                        if (!moveOffsets)\n                            moveOffsets = [];\n                        var localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;\n                        var localCurrentIndex = currentIndex - addRemoveOffset;\n                        if (localMovePreviousIndex != localCurrentIndex) {\n                            for (var i = 0; i < localMovePreviousIndex; i++) {\n                                var offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);\n                                var index = offset + i;\n                                if (localCurrentIndex <= index && index < localMovePreviousIndex) {\n                                    moveOffsets[i] = offset + 1;\n                                }\n                            }\n                            var previousIndex = record.previousIndex;\n                            moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;\n                        }\n                    }\n                }\n                if (adjPreviousIndex !== currentIndex) {\n                    fn(record, adjPreviousIndex, currentIndex);\n                }\n            }\n        };\n        DefaultIterableDiffer.prototype.forEachPreviousItem = function (fn) {\n            var record;\n            for (record = this._previousItHead; record !== null; record = record._nextPrevious) {\n                fn(record);\n            }\n        };\n        DefaultIterableDiffer.prototype.forEachAddedItem = function (fn) {\n            var record;\n            for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n                fn(record);\n            }\n        };\n        DefaultIterableDiffer.prototype.forEachMovedItem = function (fn) {\n            var record;\n            for (record = this._movesHead; record !== null; record = record._nextMoved) {\n                fn(record);\n            }\n        };\n        DefaultIterableDiffer.prototype.forEachRemovedItem = function (fn) {\n            var record;\n            for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n                fn(record);\n            }\n        };\n        DefaultIterableDiffer.prototype.forEachIdentityChange = function (fn) {\n            var record;\n            for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {\n                fn(record);\n            }\n        };\n        DefaultIterableDiffer.prototype.diff = function (collection) {\n            if (collection == null)\n                collection = [];\n            if (!isListLikeIterable(collection)) {\n                throw new Error(\"Error trying to diff '\" + stringify(collection) + \"'. Only arrays and iterables are allowed\");\n            }\n            if (this.check(collection)) {\n                return this;\n            }\n            else {\n                return null;\n            }\n        };\n        DefaultIterableDiffer.prototype.onDestroy = function () { };\n        DefaultIterableDiffer.prototype.check = function (collection) {\n            var _this = this;\n            this._reset();\n            var record = this._itHead;\n            var mayBeDirty = false;\n            var index;\n            var item;\n            var itemTrackBy;\n            if (Array.isArray(collection)) {\n                this.length = collection.length;\n                for (var index_1 = 0; index_1 < this.length; index_1++) {\n                    item = collection[index_1];\n                    itemTrackBy = this._trackByFn(index_1, item);\n                    if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n                        record = this._mismatch(record, item, itemTrackBy, index_1);\n                        mayBeDirty = true;\n                    }\n                    else {\n                        if (mayBeDirty) {\n                            // TODO(misko): can we limit this to duplicates only?\n                            record = this._verifyReinsertion(record, item, itemTrackBy, index_1);\n                        }\n                        if (!looseIdentical(record.item, item))\n                            this._addIdentityChange(record, item);\n                    }\n                    record = record._next;\n                }\n            }\n            else {\n                index = 0;\n                iterateListLike(collection, function (item) {\n                    itemTrackBy = _this._trackByFn(index, item);\n                    if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n                        record = _this._mismatch(record, item, itemTrackBy, index);\n                        mayBeDirty = true;\n                    }\n                    else {\n                        if (mayBeDirty) {\n                            // TODO(misko): can we limit this to duplicates only?\n                            record = _this._verifyReinsertion(record, item, itemTrackBy, index);\n                        }\n                        if (!looseIdentical(record.item, item))\n                            _this._addIdentityChange(record, item);\n                    }\n                    record = record._next;\n                    index++;\n                });\n                this.length = index;\n            }\n            this._truncate(record);\n            this.collection = collection;\n            return this.isDirty;\n        };\n        Object.defineProperty(DefaultIterableDiffer.prototype, \"isDirty\", {\n            /* CollectionChanges is considered dirty if it has any additions, moves, removals, or identity\n             * changes.\n             */\n            get: function () {\n                return this._additionsHead !== null || this._movesHead !== null ||\n                    this._removalsHead !== null || this._identityChangesHead !== null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Reset the state of the change objects to show no changes. This means set previousKey to\n         * currentKey, and clear all of the queues (additions, moves, removals).\n         * Set the previousIndexes of moved and added items to their currentIndexes\n         * Reset the list of additions, moves and removals\n         *\n         * @internal\n         */\n        DefaultIterableDiffer.prototype._reset = function () {\n            if (this.isDirty) {\n                var record = void 0;\n                var nextRecord = void 0;\n                for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {\n                    record._nextPrevious = record._next;\n                }\n                for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n                    record.previousIndex = record.currentIndex;\n                }\n                this._additionsHead = this._additionsTail = null;\n                for (record = this._movesHead; record !== null; record = nextRecord) {\n                    record.previousIndex = record.currentIndex;\n                    nextRecord = record._nextMoved;\n                }\n                this._movesHead = this._movesTail = null;\n                this._removalsHead = this._removalsTail = null;\n                this._identityChangesHead = this._identityChangesTail = null;\n                // TODO(vicb): when assert gets supported\n                // assert(!this.isDirty);\n            }\n        };\n        /**\n         * This is the core function which handles differences between collections.\n         *\n         * - `record` is the record which we saw at this position last time. If null then it is a new\n         *   item.\n         * - `item` is the current item in the collection\n         * - `index` is the position of the item in the collection\n         *\n         * @internal\n         */\n        DefaultIterableDiffer.prototype._mismatch = function (record, item, itemTrackBy, index) {\n            // The previous record after which we will append the current one.\n            var previousRecord;\n            if (record === null) {\n                previousRecord = this._itTail;\n            }\n            else {\n                previousRecord = record._prev;\n                // Remove the record from the collection since we know it does not match the item.\n                this._remove(record);\n            }\n            // Attempt to see if we have seen the item before.\n            record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);\n            if (record !== null) {\n                // We have seen this before, we need to move it forward in the collection.\n                // But first we need to check if identity changed, so we can update in view if necessary\n                if (!looseIdentical(record.item, item))\n                    this._addIdentityChange(record, item);\n                this._moveAfter(record, previousRecord, index);\n            }\n            else {\n                // Never seen it, check evicted list.\n                record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n                if (record !== null) {\n                    // It is an item which we have evicted earlier: reinsert it back into the list.\n                    // But first we need to check if identity changed, so we can update in view if necessary\n                    if (!looseIdentical(record.item, item))\n                        this._addIdentityChange(record, item);\n                    this._reinsertAfter(record, previousRecord, index);\n                }\n                else {\n                    // It is a new item: add it.\n                    record =\n                        this._addAfter(new IterableChangeRecord_(item, itemTrackBy), previousRecord, index);\n                }\n            }\n            return record;\n        };\n        /**\n         * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\n         *\n         * Use case: `[a, a]` => `[b, a, a]`\n         *\n         * If we did not have this check then the insertion of `b` would:\n         *   1) evict first `a`\n         *   2) insert `b` at `0` index.\n         *   3) leave `a` at index `1` as is. <-- this is wrong!\n         *   3) reinsert `a` at index 2. <-- this is wrong!\n         *\n         * The correct behavior is:\n         *   1) evict first `a`\n         *   2) insert `b` at `0` index.\n         *   3) reinsert `a` at index 1.\n         *   3) move `a` at from `1` to `2`.\n         *\n         *\n         * Double check that we have not evicted a duplicate item. We need to check if the item type may\n         * have already been removed:\n         * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\n         * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\n         * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\n         * at the end.\n         *\n         * @internal\n         */\n        DefaultIterableDiffer.prototype._verifyReinsertion = function (record, item, itemTrackBy, index) {\n            var reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n            if (reinsertRecord !== null) {\n                record = this._reinsertAfter(reinsertRecord, record._prev, index);\n            }\n            else if (record.currentIndex != index) {\n                record.currentIndex = index;\n                this._addToMoves(record, index);\n            }\n            return record;\n        };\n        /**\n         * Get rid of any excess {@link IterableChangeRecord_}s from the previous collection\n         *\n         * - `record` The first excess {@link IterableChangeRecord_}.\n         *\n         * @internal\n         */\n        DefaultIterableDiffer.prototype._truncate = function (record) {\n            // Anything after that needs to be removed;\n            while (record !== null) {\n                var nextRecord = record._next;\n                this._addToRemovals(this._unlink(record));\n                record = nextRecord;\n            }\n            if (this._unlinkedRecords !== null) {\n                this._unlinkedRecords.clear();\n            }\n            if (this._additionsTail !== null) {\n                this._additionsTail._nextAdded = null;\n            }\n            if (this._movesTail !== null) {\n                this._movesTail._nextMoved = null;\n            }\n            if (this._itTail !== null) {\n                this._itTail._next = null;\n            }\n            if (this._removalsTail !== null) {\n                this._removalsTail._nextRemoved = null;\n            }\n            if (this._identityChangesTail !== null) {\n                this._identityChangesTail._nextIdentityChange = null;\n            }\n        };\n        /** @internal */\n        DefaultIterableDiffer.prototype._reinsertAfter = function (record, prevRecord, index) {\n            if (this._unlinkedRecords !== null) {\n                this._unlinkedRecords.remove(record);\n            }\n            var prev = record._prevRemoved;\n            var next = record._nextRemoved;\n            if (prev === null) {\n                this._removalsHead = next;\n            }\n            else {\n                prev._nextRemoved = next;\n            }\n            if (next === null) {\n                this._removalsTail = prev;\n            }\n            else {\n                next._prevRemoved = prev;\n            }\n            this._insertAfter(record, prevRecord, index);\n            this._addToMoves(record, index);\n            return record;\n        };\n        /** @internal */\n        DefaultIterableDiffer.prototype._moveAfter = function (record, prevRecord, index) {\n            this._unlink(record);\n            this._insertAfter(record, prevRecord, index);\n            this._addToMoves(record, index);\n            return record;\n        };\n        /** @internal */\n        DefaultIterableDiffer.prototype._addAfter = function (record, prevRecord, index) {\n            this._insertAfter(record, prevRecord, index);\n            if (this._additionsTail === null) {\n                // TODO(vicb):\n                // assert(this._additionsHead === null);\n                this._additionsTail = this._additionsHead = record;\n            }\n            else {\n                // TODO(vicb):\n                // assert(_additionsTail._nextAdded === null);\n                // assert(record._nextAdded === null);\n                this._additionsTail = this._additionsTail._nextAdded = record;\n            }\n            return record;\n        };\n        /** @internal */\n        DefaultIterableDiffer.prototype._insertAfter = function (record, prevRecord, index) {\n            // TODO(vicb):\n            // assert(record != prevRecord);\n            // assert(record._next === null);\n            // assert(record._prev === null);\n            var next = prevRecord === null ? this._itHead : prevRecord._next;\n            // TODO(vicb):\n            // assert(next != record);\n            // assert(prevRecord != record);\n            record._next = next;\n            record._prev = prevRecord;\n            if (next === null) {\n                this._itTail = record;\n            }\n            else {\n                next._prev = record;\n            }\n            if (prevRecord === null) {\n                this._itHead = record;\n            }\n            else {\n                prevRecord._next = record;\n            }\n            if (this._linkedRecords === null) {\n                this._linkedRecords = new _DuplicateMap();\n            }\n            this._linkedRecords.put(record);\n            record.currentIndex = index;\n            return record;\n        };\n        /** @internal */\n        DefaultIterableDiffer.prototype._remove = function (record) {\n            return this._addToRemovals(this._unlink(record));\n        };\n        /** @internal */\n        DefaultIterableDiffer.prototype._unlink = function (record) {\n            if (this._linkedRecords !== null) {\n                this._linkedRecords.remove(record);\n            }\n            var prev = record._prev;\n            var next = record._next;\n            // TODO(vicb):\n            // assert((record._prev = null) === null);\n            // assert((record._next = null) === null);\n            if (prev === null) {\n                this._itHead = next;\n            }\n            else {\n                prev._next = next;\n            }\n            if (next === null) {\n                this._itTail = prev;\n            }\n            else {\n                next._prev = prev;\n            }\n            return record;\n        };\n        /** @internal */\n        DefaultIterableDiffer.prototype._addToMoves = function (record, toIndex) {\n            // TODO(vicb):\n            // assert(record._nextMoved === null);\n            if (record.previousIndex === toIndex) {\n                return record;\n            }\n            if (this._movesTail === null) {\n                // TODO(vicb):\n                // assert(_movesHead === null);\n                this._movesTail = this._movesHead = record;\n            }\n            else {\n                // TODO(vicb):\n                // assert(_movesTail._nextMoved === null);\n                this._movesTail = this._movesTail._nextMoved = record;\n            }\n            return record;\n        };\n        DefaultIterableDiffer.prototype._addToRemovals = function (record) {\n            if (this._unlinkedRecords === null) {\n                this._unlinkedRecords = new _DuplicateMap();\n            }\n            this._unlinkedRecords.put(record);\n            record.currentIndex = null;\n            record._nextRemoved = null;\n            if (this._removalsTail === null) {\n                // TODO(vicb):\n                // assert(_removalsHead === null);\n                this._removalsTail = this._removalsHead = record;\n                record._prevRemoved = null;\n            }\n            else {\n                // TODO(vicb):\n                // assert(_removalsTail._nextRemoved === null);\n                // assert(record._nextRemoved === null);\n                record._prevRemoved = this._removalsTail;\n                this._removalsTail = this._removalsTail._nextRemoved = record;\n            }\n            return record;\n        };\n        /** @internal */\n        DefaultIterableDiffer.prototype._addIdentityChange = function (record, item) {\n            record.item = item;\n            if (this._identityChangesTail === null) {\n                this._identityChangesTail = this._identityChangesHead = record;\n            }\n            else {\n                this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;\n            }\n            return record;\n        };\n        return DefaultIterableDiffer;\n    }());\n    var IterableChangeRecord_ = /** @class */ (function () {\n        function IterableChangeRecord_(item, trackById) {\n            this.item = item;\n            this.trackById = trackById;\n            this.currentIndex = null;\n            this.previousIndex = null;\n            /** @internal */\n            this._nextPrevious = null;\n            /** @internal */\n            this._prev = null;\n            /** @internal */\n            this._next = null;\n            /** @internal */\n            this._prevDup = null;\n            /** @internal */\n            this._nextDup = null;\n            /** @internal */\n            this._prevRemoved = null;\n            /** @internal */\n            this._nextRemoved = null;\n            /** @internal */\n            this._nextAdded = null;\n            /** @internal */\n            this._nextMoved = null;\n            /** @internal */\n            this._nextIdentityChange = null;\n        }\n        return IterableChangeRecord_;\n    }());\n    // A linked list of CollectionChangeRecords with the same IterableChangeRecord_.item\n    var _DuplicateItemRecordList = /** @class */ (function () {\n        function _DuplicateItemRecordList() {\n            /** @internal */\n            this._head = null;\n            /** @internal */\n            this._tail = null;\n        }\n        /**\n         * Append the record to the list of duplicates.\n         *\n         * Note: by design all records in the list of duplicates hold the same value in record.item.\n         */\n        _DuplicateItemRecordList.prototype.add = function (record) {\n            if (this._head === null) {\n                this._head = this._tail = record;\n                record._nextDup = null;\n                record._prevDup = null;\n            }\n            else {\n                // TODO(vicb):\n                // assert(record.item ==  _head.item ||\n                //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);\n                this._tail._nextDup = record;\n                record._prevDup = this._tail;\n                record._nextDup = null;\n                this._tail = record;\n            }\n        };\n        // Returns a IterableChangeRecord_ having IterableChangeRecord_.trackById == trackById and\n        // IterableChangeRecord_.currentIndex >= atOrAfterIndex\n        _DuplicateItemRecordList.prototype.get = function (trackById, atOrAfterIndex) {\n            var record;\n            for (record = this._head; record !== null; record = record._nextDup) {\n                if ((atOrAfterIndex === null || atOrAfterIndex <= record.currentIndex) &&\n                    looseIdentical(record.trackById, trackById)) {\n                    return record;\n                }\n            }\n            return null;\n        };\n        /**\n         * Remove one {@link IterableChangeRecord_} from the list of duplicates.\n         *\n         * Returns whether the list of duplicates is empty.\n         */\n        _DuplicateItemRecordList.prototype.remove = function (record) {\n            // TODO(vicb):\n            // assert(() {\n            //  // verify that the record being removed is in the list.\n            //  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {\n            //    if (identical(cursor, record)) return true;\n            //  }\n            //  return false;\n            //});\n            var prev = record._prevDup;\n            var next = record._nextDup;\n            if (prev === null) {\n                this._head = next;\n            }\n            else {\n                prev._nextDup = next;\n            }\n            if (next === null) {\n                this._tail = prev;\n            }\n            else {\n                next._prevDup = prev;\n            }\n            return this._head === null;\n        };\n        return _DuplicateItemRecordList;\n    }());\n    var _DuplicateMap = /** @class */ (function () {\n        function _DuplicateMap() {\n            this.map = new Map();\n        }\n        _DuplicateMap.prototype.put = function (record) {\n            var key = record.trackById;\n            var duplicates = this.map.get(key);\n            if (!duplicates) {\n                duplicates = new _DuplicateItemRecordList();\n                this.map.set(key, duplicates);\n            }\n            duplicates.add(record);\n        };\n        /**\n         * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we\n         * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.\n         *\n         * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\n         * have any more `a`s needs to return the second `a`.\n         */\n        _DuplicateMap.prototype.get = function (trackById, atOrAfterIndex) {\n            var key = trackById;\n            var recordList = this.map.get(key);\n            return recordList ? recordList.get(trackById, atOrAfterIndex) : null;\n        };\n        /**\n         * Removes a {@link IterableChangeRecord_} from the list of duplicates.\n         *\n         * The list of duplicates also is removed from the map if it gets empty.\n         */\n        _DuplicateMap.prototype.remove = function (record) {\n            var key = record.trackById;\n            var recordList = this.map.get(key);\n            // Remove the list of duplicates when it gets empty\n            if (recordList.remove(record)) {\n                this.map.delete(key);\n            }\n            return record;\n        };\n        Object.defineProperty(_DuplicateMap.prototype, \"isEmpty\", {\n            get: function () { return this.map.size === 0; },\n            enumerable: true,\n            configurable: true\n        });\n        _DuplicateMap.prototype.clear = function () { this.map.clear(); };\n        return _DuplicateMap;\n    }());\n    function getPreviousIndex(item, addRemoveOffset, moveOffsets) {\n        var previousIndex = item.previousIndex;\n        if (previousIndex === null)\n            return previousIndex;\n        var moveOffset = 0;\n        if (moveOffsets && previousIndex < moveOffsets.length) {\n            moveOffset = moveOffsets[previousIndex];\n        }\n        return previousIndex + addRemoveOffset + moveOffset;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var DefaultKeyValueDifferFactory = /** @class */ (function () {\n        function DefaultKeyValueDifferFactory() {\n        }\n        DefaultKeyValueDifferFactory.prototype.supports = function (obj) { return obj instanceof Map || isJsObject(obj); };\n        DefaultKeyValueDifferFactory.prototype.create = function () { return new DefaultKeyValueDiffer(); };\n        return DefaultKeyValueDifferFactory;\n    }());\n    var DefaultKeyValueDiffer = /** @class */ (function () {\n        function DefaultKeyValueDiffer() {\n            this._records = new Map();\n            this._mapHead = null;\n            // _appendAfter is used in the check loop\n            this._appendAfter = null;\n            this._previousMapHead = null;\n            this._changesHead = null;\n            this._changesTail = null;\n            this._additionsHead = null;\n            this._additionsTail = null;\n            this._removalsHead = null;\n            this._removalsTail = null;\n        }\n        Object.defineProperty(DefaultKeyValueDiffer.prototype, \"isDirty\", {\n            get: function () {\n                return this._additionsHead !== null || this._changesHead !== null ||\n                    this._removalsHead !== null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        DefaultKeyValueDiffer.prototype.forEachItem = function (fn) {\n            var record;\n            for (record = this._mapHead; record !== null; record = record._next) {\n                fn(record);\n            }\n        };\n        DefaultKeyValueDiffer.prototype.forEachPreviousItem = function (fn) {\n            var record;\n            for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {\n                fn(record);\n            }\n        };\n        DefaultKeyValueDiffer.prototype.forEachChangedItem = function (fn) {\n            var record;\n            for (record = this._changesHead; record !== null; record = record._nextChanged) {\n                fn(record);\n            }\n        };\n        DefaultKeyValueDiffer.prototype.forEachAddedItem = function (fn) {\n            var record;\n            for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n                fn(record);\n            }\n        };\n        DefaultKeyValueDiffer.prototype.forEachRemovedItem = function (fn) {\n            var record;\n            for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n                fn(record);\n            }\n        };\n        DefaultKeyValueDiffer.prototype.diff = function (map) {\n            if (!map) {\n                map = new Map();\n            }\n            else if (!(map instanceof Map || isJsObject(map))) {\n                throw new Error(\"Error trying to diff '\" + stringify(map) + \"'. Only maps and objects are allowed\");\n            }\n            return this.check(map) ? this : null;\n        };\n        DefaultKeyValueDiffer.prototype.onDestroy = function () { };\n        /**\n         * Check the current state of the map vs the previous.\n         * The algorithm is optimised for when the keys do no change.\n         */\n        DefaultKeyValueDiffer.prototype.check = function (map) {\n            var _this = this;\n            this._reset();\n            var insertBefore = this._mapHead;\n            this._appendAfter = null;\n            this._forEach(map, function (value, key) {\n                if (insertBefore && insertBefore.key === key) {\n                    _this._maybeAddToChanges(insertBefore, value);\n                    _this._appendAfter = insertBefore;\n                    insertBefore = insertBefore._next;\n                }\n                else {\n                    var record = _this._getOrCreateRecordForKey(key, value);\n                    insertBefore = _this._insertBeforeOrAppend(insertBefore, record);\n                }\n            });\n            // Items remaining at the end of the list have been deleted\n            if (insertBefore) {\n                if (insertBefore._prev) {\n                    insertBefore._prev._next = null;\n                }\n                this._removalsHead = insertBefore;\n                for (var record = insertBefore; record !== null; record = record._nextRemoved) {\n                    if (record === this._mapHead) {\n                        this._mapHead = null;\n                    }\n                    this._records.delete(record.key);\n                    record._nextRemoved = record._next;\n                    record.previousValue = record.currentValue;\n                    record.currentValue = null;\n                    record._prev = null;\n                    record._next = null;\n                }\n            }\n            // Make sure tails have no next records from previous runs\n            if (this._changesTail)\n                this._changesTail._nextChanged = null;\n            if (this._additionsTail)\n                this._additionsTail._nextAdded = null;\n            return this.isDirty;\n        };\n        /**\n         * Inserts a record before `before` or append at the end of the list when `before` is null.\n         *\n         * Notes:\n         * - This method appends at `this._appendAfter`,\n         * - This method updates `this._appendAfter`,\n         * - The return value is the new value for the insertion pointer.\n         */\n        DefaultKeyValueDiffer.prototype._insertBeforeOrAppend = function (before, record) {\n            if (before) {\n                var prev = before._prev;\n                record._next = before;\n                record._prev = prev;\n                before._prev = record;\n                if (prev) {\n                    prev._next = record;\n                }\n                if (before === this._mapHead) {\n                    this._mapHead = record;\n                }\n                this._appendAfter = before;\n                return before;\n            }\n            if (this._appendAfter) {\n                this._appendAfter._next = record;\n                record._prev = this._appendAfter;\n            }\n            else {\n                this._mapHead = record;\n            }\n            this._appendAfter = record;\n            return null;\n        };\n        DefaultKeyValueDiffer.prototype._getOrCreateRecordForKey = function (key, value) {\n            if (this._records.has(key)) {\n                var record_1 = this._records.get(key);\n                this._maybeAddToChanges(record_1, value);\n                var prev = record_1._prev;\n                var next = record_1._next;\n                if (prev) {\n                    prev._next = next;\n                }\n                if (next) {\n                    next._prev = prev;\n                }\n                record_1._next = null;\n                record_1._prev = null;\n                return record_1;\n            }\n            var record = new KeyValueChangeRecord_(key);\n            this._records.set(key, record);\n            record.currentValue = value;\n            this._addToAdditions(record);\n            return record;\n        };\n        /** @internal */\n        DefaultKeyValueDiffer.prototype._reset = function () {\n            if (this.isDirty) {\n                var record = void 0;\n                // let `_previousMapHead` contain the state of the map before the changes\n                this._previousMapHead = this._mapHead;\n                for (record = this._previousMapHead; record !== null; record = record._next) {\n                    record._nextPrevious = record._next;\n                }\n                // Update `record.previousValue` with the value of the item before the changes\n                // We need to update all changed items (that's those which have been added and changed)\n                for (record = this._changesHead; record !== null; record = record._nextChanged) {\n                    record.previousValue = record.currentValue;\n                }\n                for (record = this._additionsHead; record != null; record = record._nextAdded) {\n                    record.previousValue = record.currentValue;\n                }\n                this._changesHead = this._changesTail = null;\n                this._additionsHead = this._additionsTail = null;\n                this._removalsHead = null;\n            }\n        };\n        // Add the record or a given key to the list of changes only when the value has actually changed\n        DefaultKeyValueDiffer.prototype._maybeAddToChanges = function (record, newValue) {\n            if (!looseIdentical(newValue, record.currentValue)) {\n                record.previousValue = record.currentValue;\n                record.currentValue = newValue;\n                this._addToChanges(record);\n            }\n        };\n        DefaultKeyValueDiffer.prototype._addToAdditions = function (record) {\n            if (this._additionsHead === null) {\n                this._additionsHead = this._additionsTail = record;\n            }\n            else {\n                this._additionsTail._nextAdded = record;\n                this._additionsTail = record;\n            }\n        };\n        DefaultKeyValueDiffer.prototype._addToChanges = function (record) {\n            if (this._changesHead === null) {\n                this._changesHead = this._changesTail = record;\n            }\n            else {\n                this._changesTail._nextChanged = record;\n                this._changesTail = record;\n            }\n        };\n        /** @internal */\n        DefaultKeyValueDiffer.prototype._forEach = function (obj, fn) {\n            if (obj instanceof Map) {\n                obj.forEach(fn);\n            }\n            else {\n                Object.keys(obj).forEach(function (k) { return fn(obj[k], k); });\n            }\n        };\n        return DefaultKeyValueDiffer;\n    }());\n    var KeyValueChangeRecord_ = /** @class */ (function () {\n        function KeyValueChangeRecord_(key) {\n            this.key = key;\n            this.previousValue = null;\n            this.currentValue = null;\n            /** @internal */\n            this._nextPrevious = null;\n            /** @internal */\n            this._next = null;\n            /** @internal */\n            this._prev = null;\n            /** @internal */\n            this._nextAdded = null;\n            /** @internal */\n            this._nextRemoved = null;\n            /** @internal */\n            this._nextChanged = null;\n        }\n        return KeyValueChangeRecord_;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.\n     *\n     * @publicApi\n     */\n    var IterableDiffers = /** @class */ (function () {\n        function IterableDiffers(factories) {\n            this.factories = factories;\n        }\n        IterableDiffers.create = function (factories, parent) {\n            if (parent != null) {\n                var copied = parent.factories.slice();\n                factories = factories.concat(copied);\n            }\n            return new IterableDiffers(factories);\n        };\n        /**\n         * Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the\n         * inherited {@link IterableDiffers} instance with the provided factories and return a new\n         * {@link IterableDiffers} instance.\n         *\n         * @usageNotes\n         * ### Example\n         *\n         * The following example shows how to extend an existing list of factories,\n         * which will only be applied to the injector for this component and its children.\n         * This step is all that's required to make a new {@link IterableDiffer} available.\n         *\n         * ```\n         * @Component({\n         *   viewProviders: [\n         *     IterableDiffers.extend([new ImmutableListDiffer()])\n         *   ]\n         * })\n         * ```\n         */\n        IterableDiffers.extend = function (factories) {\n            return {\n                provide: IterableDiffers,\n                useFactory: function (parent) {\n                    if (!parent) {\n                        // Typically would occur when calling IterableDiffers.extend inside of dependencies passed\n                        // to\n                        // bootstrap(), which would override default pipes instead of extending them.\n                        throw new Error('Cannot extend IterableDiffers without a parent injector');\n                    }\n                    return IterableDiffers.create(factories, parent);\n                },\n                // Dependency technically isn't optional, but we can provide a better error message this way.\n                deps: [[IterableDiffers, new SkipSelf(), new Optional()]]\n            };\n        };\n        IterableDiffers.prototype.find = function (iterable) {\n            var factory = this.factories.find(function (f) { return f.supports(iterable); });\n            if (factory != null) {\n                return factory;\n            }\n            else {\n                throw new Error(\"Cannot find a differ supporting object '\" + iterable + \"' of type '\" + getTypeNameForDebugging(iterable) + \"'\");\n            }\n        };\n        /** @nocollapse */\n        IterableDiffers.ngInjectableDef = ɵɵdefineInjectable({\n            token: IterableDiffers,\n            providedIn: 'root',\n            factory: function () { return new IterableDiffers([new DefaultIterableDifferFactory()]); }\n        });\n        return IterableDiffers;\n    }());\n    function getTypeNameForDebugging(type) {\n        return type['name'] || typeof type;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.\n     *\n     * @publicApi\n     */\n    var KeyValueDiffers = /** @class */ (function () {\n        function KeyValueDiffers(factories) {\n            this.factories = factories;\n        }\n        KeyValueDiffers.create = function (factories, parent) {\n            if (parent) {\n                var copied = parent.factories.slice();\n                factories = factories.concat(copied);\n            }\n            return new KeyValueDiffers(factories);\n        };\n        /**\n         * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the\n         * inherited {@link KeyValueDiffers} instance with the provided factories and return a new\n         * {@link KeyValueDiffers} instance.\n         *\n         * @usageNotes\n         * ### Example\n         *\n         * The following example shows how to extend an existing list of factories,\n         * which will only be applied to the injector for this component and its children.\n         * This step is all that's required to make a new {@link KeyValueDiffer} available.\n         *\n         * ```\n         * @Component({\n         *   viewProviders: [\n         *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\n         *   ]\n         * })\n         * ```\n         */\n        KeyValueDiffers.extend = function (factories) {\n            return {\n                provide: KeyValueDiffers,\n                useFactory: function (parent) {\n                    if (!parent) {\n                        // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed\n                        // to bootstrap(), which would override default pipes instead of extending them.\n                        throw new Error('Cannot extend KeyValueDiffers without a parent injector');\n                    }\n                    return KeyValueDiffers.create(factories, parent);\n                },\n                // Dependency technically isn't optional, but we can provide a better error message this way.\n                deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]\n            };\n        };\n        KeyValueDiffers.prototype.find = function (kv) {\n            var factory = this.factories.find(function (f) { return f.supports(kv); });\n            if (factory) {\n                return factory;\n            }\n            throw new Error(\"Cannot find a differ supporting object '\" + kv + \"'\");\n        };\n        /** @nocollapse */\n        KeyValueDiffers.ngInjectableDef = ɵɵdefineInjectable({\n            token: KeyValueDiffers,\n            providedIn: 'root',\n            factory: function () { return new KeyValueDiffers([new DefaultKeyValueDifferFactory()]); }\n        });\n        return KeyValueDiffers;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Base class for Angular Views, provides change detection functionality.\n     * A change-detection tree collects all views that are to be checked for changes.\n     * Use the methods to add and remove views from the tree, initiate change-detection,\n     * and explicitly mark views as _dirty_, meaning that they have changed and need to be rerendered.\n     *\n     * @usageNotes\n     *\n     * The following examples demonstrate how to modify default change-detection behavior\n     * to perform explicit detection when needed.\n     *\n     * ### Use `markForCheck()` with `CheckOnce` strategy\n     *\n     * The following example sets the `OnPush` change-detection strategy for a component\n     * (`CheckOnce`, rather than the default `CheckAlways`), then forces a second check\n     * after an interval. See [live demo](http://plnkr.co/edit/GC512b?p=preview).\n     *\n     * <code-example path=\"core/ts/change_detect/change-detection.ts\"\n     * region=\"mark-for-check\"></code-example>\n     *\n     * ### Detach change detector to limit how often check occurs\n     *\n     * The following example defines a component with a large list of read-only data\n     * that is expected to change constantly, many times per second.\n     * To improve performance, we want to check and update the list\n     * less often than the changes actually occur. To do that, we detach\n     * the component's change detector and perform an explicit local check every five seconds.\n     *\n     * <code-example path=\"core/ts/change_detect/change-detection.ts\" region=\"detach\"></code-example>\n     *\n     *\n     * ### Reattaching a detached component\n     *\n     * The following example creates a component displaying live data.\n     * The component detaches its change detector from the main change detector tree\n     * when the `live` property is set to false, and reattaches it when the property\n     * becomes true.\n     *\n     * <code-example path=\"core/ts/change_detect/change-detection.ts\" region=\"reattach\"></code-example>\n     *\n     * @publicApi\n     */\n    var ChangeDetectorRef = /** @class */ (function () {\n        function ChangeDetectorRef() {\n        }\n        /**\n         * @internal\n         * @nocollapse\n         */\n        ChangeDetectorRef.__NG_ELEMENT_ID__ = function () { return SWITCH_CHANGE_DETECTOR_REF_FACTORY(); };\n        return ChangeDetectorRef;\n    }());\n    var SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__ = injectChangeDetectorRef;\n    var SWITCH_CHANGE_DETECTOR_REF_FACTORY = SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__;\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Structural diffing for `Object`s and `Map`s.\n     */\n    var keyValDiff = [new DefaultKeyValueDifferFactory()];\n    /**\n     * Structural diffing for `Iterable` types such as `Array`s.\n     */\n    var iterableDiff = [new DefaultIterableDifferFactory()];\n    var defaultIterableDiffers = new IterableDiffers(iterableDiff);\n    var defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Represents an embedded template that can be used to instantiate embedded views.\n     * To instantiate embedded views based on a template, use the `ViewContainerRef`\n     * method `createEmbeddedView()`.\n     *\n     * Access a `TemplateRef` instance by placing a directive on an `<ng-template>`\n     * element (or directive prefixed with `*`). The `TemplateRef` for the embedded view\n     * is injected into the constructor of the directive,\n     * using the `TemplateRef` token.\n     *\n     * You can also use a `Query` to find a `TemplateRef` associated with\n     * a component or a directive.\n     *\n     * @see `ViewContainerRef`\n     * @see [Navigate the Component Tree with DI](guide/dependency-injection-navtree)\n     *\n     * @publicApi\n     */\n    var TemplateRef = /** @class */ (function () {\n        function TemplateRef() {\n        }\n        /**\n         * @internal\n         * @nocollapse\n         */\n        TemplateRef.__NG_ELEMENT_ID__ = function () { return SWITCH_TEMPLATE_REF_FACTORY(TemplateRef, ElementRef); };\n        return TemplateRef;\n    }());\n    var SWITCH_TEMPLATE_REF_FACTORY__POST_R3__ = injectTemplateRef;\n    var SWITCH_TEMPLATE_REF_FACTORY = SWITCH_TEMPLATE_REF_FACTORY__POST_R3__;\n\n    /**\n     * Represents a container where one or more views can be attached to a component.\n     *\n     * Can contain *host views* (created by instantiating a\n     * component with the `createComponent()` method), and *embedded views*\n     * (created by instantiating a `TemplateRef` with the `createEmbeddedView()` method).\n     *\n     * A view container instance can contain other view containers,\n     * creating a [view hierarchy](guide/glossary#view-tree).\n     *\n     * @see `ComponentRef`\n     * @see `EmbeddedViewRef`\n     *\n     * @publicApi\n     */\n    var ViewContainerRef = /** @class */ (function () {\n        function ViewContainerRef() {\n        }\n        /**\n         * @internal\n         * @nocollapse\n         */\n        ViewContainerRef.__NG_ELEMENT_ID__ = function () { return SWITCH_VIEW_CONTAINER_REF_FACTORY(ViewContainerRef, ElementRef); };\n        return ViewContainerRef;\n    }());\n    var SWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__ = injectViewContainerRef;\n    var SWITCH_VIEW_CONTAINER_REF_FACTORY = SWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__;\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function expressionChangedAfterItHasBeenCheckedError(context, oldValue, currValue, isFirstCheck) {\n        var msg = \"ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '\" + oldValue + \"'. Current value: '\" + currValue + \"'.\";\n        if (isFirstCheck) {\n            msg +=\n                \" It seems like the view has been created after its parent and its children have been dirty checked.\" +\n                    \" Has it been created in a change detection hook ?\";\n        }\n        return viewDebugError(msg, context);\n    }\n    function viewWrappedDebugError(err, context) {\n        if (!(err instanceof Error)) {\n            // errors that are not Error instances don't have a stack,\n            // so it is ok to wrap them into a new Error object...\n            err = new Error(err.toString());\n        }\n        _addDebugContext(err, context);\n        return err;\n    }\n    function viewDebugError(msg, context) {\n        var err = new Error(msg);\n        _addDebugContext(err, context);\n        return err;\n    }\n    function _addDebugContext(err, context) {\n        err[ERROR_DEBUG_CONTEXT] = context;\n        err[ERROR_LOGGER] = context.logError.bind(context);\n    }\n    function isViewDebugError(err) {\n        return !!getDebugContext(err);\n    }\n    function viewDestroyedError(action) {\n        return new Error(\"ViewDestroyedError: Attempt to use a destroyed view: \" + action);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // Called before each cycle of a view's check to detect whether this is in the\n    // initState for which we need to call ngOnInit, ngAfterContentInit or ngAfterViewInit\n    // lifecycle methods. Returns true if this check cycle should call lifecycle\n    // methods.\n    function shiftInitState(view, priorInitState, newInitState) {\n        // Only update the InitState if we are currently in the prior state.\n        // For example, only move into CallingInit if we are in BeforeInit. Only\n        // move into CallingContentInit if we are in CallingInit. Normally this will\n        // always be true because of how checkCycle is called in checkAndUpdateView.\n        // However, if checkAndUpdateView is called recursively or if an exception is\n        // thrown while checkAndUpdateView is running, checkAndUpdateView starts over\n        // from the beginning. This ensures the state is monotonically increasing,\n        // terminating in the AfterInit state, which ensures the Init methods are called\n        // at least once and only once.\n        var state = view.state;\n        var initState = state & 1792 /* InitState_Mask */;\n        if (initState === priorInitState) {\n            view.state = (state & ~1792 /* InitState_Mask */) | newInitState;\n            view.initIndex = -1;\n            return true;\n        }\n        return initState === newInitState;\n    }\n    // Returns true if the lifecycle init method should be called for the node with\n    // the given init index.\n    function shouldCallLifecycleInitHook(view, initState, index) {\n        if ((view.state & 1792 /* InitState_Mask */) === initState && view.initIndex <= index) {\n            view.initIndex = index + 1;\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n     */\n    function asTextData(view, index) {\n        return view.nodes[index];\n    }\n    /**\n     * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n     */\n    function asElementData(view, index) {\n        return view.nodes[index];\n    }\n    /**\n     * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n     */\n    function asProviderData(view, index) {\n        return view.nodes[index];\n    }\n    /**\n     * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n     */\n    function asPureExpressionData(view, index) {\n        return view.nodes[index];\n    }\n    /**\n     * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n     */\n    function asQueryList(view, index) {\n        return view.nodes[index];\n    }\n    /**\n     * This object is used to prevent cycles in the source files and to have a place where\n     * debug mode can hook it. It is lazily filled when `isDevMode` is known.\n     */\n    var Services = {\n        setCurrentNode: undefined,\n        createRootView: undefined,\n        createEmbeddedView: undefined,\n        createComponentView: undefined,\n        createNgModuleRef: undefined,\n        overrideProvider: undefined,\n        overrideComponentView: undefined,\n        clearOverrides: undefined,\n        checkAndUpdateView: undefined,\n        checkNoChangesView: undefined,\n        destroyView: undefined,\n        resolveDep: undefined,\n        createDebugContext: undefined,\n        handleEvent: undefined,\n        updateDirectives: undefined,\n        updateRenderer: undefined,\n        dirtyParentQueries: undefined,\n    };\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var NOOP = function () { };\n    var _tokenKeyCache = new Map();\n    function tokenKey(token) {\n        var key = _tokenKeyCache.get(token);\n        if (!key) {\n            key = stringify(token) + '_' + _tokenKeyCache.size;\n            _tokenKeyCache.set(token, key);\n        }\n        return key;\n    }\n    function unwrapValue(view, nodeIdx, bindingIdx, value) {\n        if (WrappedValue.isWrapped(value)) {\n            value = WrappedValue.unwrap(value);\n            var globalBindingIdx = view.def.nodes[nodeIdx].bindingIndex + bindingIdx;\n            var oldValue = WrappedValue.unwrap(view.oldValues[globalBindingIdx]);\n            view.oldValues[globalBindingIdx] = new WrappedValue(oldValue);\n        }\n        return value;\n    }\n    var UNDEFINED_RENDERER_TYPE_ID = '$$undefined';\n    var EMPTY_RENDERER_TYPE_ID = '$$empty';\n    // Attention: this function is called as top level function.\n    // Putting any logic in here will destroy closure tree shaking!\n    function createRendererType2(values) {\n        return {\n            id: UNDEFINED_RENDERER_TYPE_ID,\n            styles: values.styles,\n            encapsulation: values.encapsulation,\n            data: values.data\n        };\n    }\n    var _renderCompCount$1 = 0;\n    function resolveRendererType2(type) {\n        if (type && type.id === UNDEFINED_RENDERER_TYPE_ID) {\n            // first time we see this RendererType2. Initialize it...\n            var isFilled = ((type.encapsulation != null && type.encapsulation !== exports.ViewEncapsulation.None) ||\n                type.styles.length || Object.keys(type.data).length);\n            if (isFilled) {\n                type.id = \"c\" + _renderCompCount$1++;\n            }\n            else {\n                type.id = EMPTY_RENDERER_TYPE_ID;\n            }\n        }\n        if (type && type.id === EMPTY_RENDERER_TYPE_ID) {\n            type = null;\n        }\n        return type || null;\n    }\n    function checkBinding(view, def, bindingIdx, value) {\n        var oldValues = view.oldValues;\n        if ((view.state & 2 /* FirstCheck */) ||\n            !looseIdentical(oldValues[def.bindingIndex + bindingIdx], value)) {\n            return true;\n        }\n        return false;\n    }\n    function checkAndUpdateBinding(view, def, bindingIdx, value) {\n        if (checkBinding(view, def, bindingIdx, value)) {\n            view.oldValues[def.bindingIndex + bindingIdx] = value;\n            return true;\n        }\n        return false;\n    }\n    function checkBindingNoChanges(view, def, bindingIdx, value) {\n        var oldValue = view.oldValues[def.bindingIndex + bindingIdx];\n        if ((view.state & 1 /* BeforeFirstCheck */) || !devModeEqual(oldValue, value)) {\n            var bindingName = def.bindings[bindingIdx].name;\n            throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, def.nodeIndex), bindingName + \": \" + oldValue, bindingName + \": \" + value, (view.state & 1 /* BeforeFirstCheck */) !== 0);\n        }\n    }\n    function markParentViewsForCheck(view) {\n        var currView = view;\n        while (currView) {\n            if (currView.def.flags & 2 /* OnPush */) {\n                currView.state |= 8 /* ChecksEnabled */;\n            }\n            currView = currView.viewContainerParent || currView.parent;\n        }\n    }\n    function markParentViewsForCheckProjectedViews(view, endView) {\n        var currView = view;\n        while (currView && currView !== endView) {\n            currView.state |= 64 /* CheckProjectedViews */;\n            currView = currView.viewContainerParent || currView.parent;\n        }\n    }\n    function dispatchEvent(view, nodeIndex, eventName, event) {\n        try {\n            var nodeDef = view.def.nodes[nodeIndex];\n            var startView = nodeDef.flags & 33554432 /* ComponentView */ ?\n                asElementData(view, nodeIndex).componentView :\n                view;\n            markParentViewsForCheck(startView);\n            return Services.handleEvent(view, nodeIndex, eventName, event);\n        }\n        catch (e) {\n            // Attention: Don't rethrow, as it would cancel Observable subscriptions!\n            view.root.errorHandler.handleError(e);\n        }\n    }\n    function declaredViewContainer(view) {\n        if (view.parent) {\n            var parentView = view.parent;\n            return asElementData(parentView, view.parentNodeDef.nodeIndex);\n        }\n        return null;\n    }\n    /**\n     * for component views, this is the host element.\n     * for embedded views, this is the index of the parent node\n     * that contains the view container.\n     */\n    function viewParentEl(view) {\n        var parentView = view.parent;\n        if (parentView) {\n            return view.parentNodeDef.parent;\n        }\n        else {\n            return null;\n        }\n    }\n    function renderNode(view, def) {\n        switch (def.flags & 201347067 /* Types */) {\n            case 1 /* TypeElement */:\n                return asElementData(view, def.nodeIndex).renderElement;\n            case 2 /* TypeText */:\n                return asTextData(view, def.nodeIndex).renderText;\n        }\n    }\n    function elementEventFullName(target, name) {\n        return target ? target + \":\" + name : name;\n    }\n    function isComponentView(view) {\n        return !!view.parent && !!(view.parentNodeDef.flags & 32768 /* Component */);\n    }\n    function isEmbeddedView(view) {\n        return !!view.parent && !(view.parentNodeDef.flags & 32768 /* Component */);\n    }\n    function filterQueryId(queryId) {\n        return 1 << (queryId % 32);\n    }\n    function splitMatchedQueriesDsl(matchedQueriesDsl) {\n        var matchedQueries = {};\n        var matchedQueryIds = 0;\n        var references = {};\n        if (matchedQueriesDsl) {\n            matchedQueriesDsl.forEach(function (_a) {\n                var _b = __read(_a, 2), queryId = _b[0], valueType = _b[1];\n                if (typeof queryId === 'number') {\n                    matchedQueries[queryId] = valueType;\n                    matchedQueryIds |= filterQueryId(queryId);\n                }\n                else {\n                    references[queryId] = valueType;\n                }\n            });\n        }\n        return { matchedQueries: matchedQueries, references: references, matchedQueryIds: matchedQueryIds };\n    }\n    function splitDepsDsl(deps, sourceName) {\n        return deps.map(function (value) {\n            var _a;\n            var token;\n            var flags;\n            if (Array.isArray(value)) {\n                _a = __read(value, 2), flags = _a[0], token = _a[1];\n            }\n            else {\n                flags = 0 /* None */;\n                token = value;\n            }\n            if (token && (typeof token === 'function' || typeof token === 'object') && sourceName) {\n                Object.defineProperty(token, SOURCE, { value: sourceName, configurable: true });\n            }\n            return { flags: flags, token: token, tokenKey: tokenKey(token) };\n        });\n    }\n    function getParentRenderElement(view, renderHost, def) {\n        var renderParent = def.renderParent;\n        if (renderParent) {\n            if ((renderParent.flags & 1 /* TypeElement */) === 0 ||\n                (renderParent.flags & 33554432 /* ComponentView */) === 0 ||\n                (renderParent.element.componentRendererType &&\n                    renderParent.element.componentRendererType.encapsulation ===\n                        exports.ViewEncapsulation.Native)) {\n                // only children of non components, or children of components with native encapsulation should\n                // be attached.\n                return asElementData(view, def.renderParent.nodeIndex).renderElement;\n            }\n        }\n        else {\n            return renderHost;\n        }\n    }\n    var DEFINITION_CACHE = new WeakMap();\n    function resolveDefinition(factory) {\n        var value = DEFINITION_CACHE.get(factory);\n        if (!value) {\n            value = factory(function () { return NOOP; });\n            value.factory = factory;\n            DEFINITION_CACHE.set(factory, value);\n        }\n        return value;\n    }\n    function rootRenderNodes(view) {\n        var renderNodes = [];\n        visitRootRenderNodes(view, 0 /* Collect */, undefined, undefined, renderNodes);\n        return renderNodes;\n    }\n    function visitRootRenderNodes(view, action, parentNode, nextSibling, target) {\n        // We need to re-compute the parent node in case the nodes have been moved around manually\n        if (action === 3 /* RemoveChild */) {\n            parentNode = view.renderer.parentNode(renderNode(view, view.def.lastRenderRootNode));\n        }\n        visitSiblingRenderNodes(view, action, 0, view.def.nodes.length - 1, parentNode, nextSibling, target);\n    }\n    function visitSiblingRenderNodes(view, action, startIndex, endIndex, parentNode, nextSibling, target) {\n        for (var i = startIndex; i <= endIndex; i++) {\n            var nodeDef = view.def.nodes[i];\n            if (nodeDef.flags & (1 /* TypeElement */ | 2 /* TypeText */ | 8 /* TypeNgContent */)) {\n                visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target);\n            }\n            // jump to next sibling\n            i += nodeDef.childCount;\n        }\n    }\n    function visitProjectedRenderNodes(view, ngContentIndex, action, parentNode, nextSibling, target) {\n        var compView = view;\n        while (compView && !isComponentView(compView)) {\n            compView = compView.parent;\n        }\n        var hostView = compView.parent;\n        var hostElDef = viewParentEl(compView);\n        var startIndex = hostElDef.nodeIndex + 1;\n        var endIndex = hostElDef.nodeIndex + hostElDef.childCount;\n        for (var i = startIndex; i <= endIndex; i++) {\n            var nodeDef = hostView.def.nodes[i];\n            if (nodeDef.ngContentIndex === ngContentIndex) {\n                visitRenderNode(hostView, nodeDef, action, parentNode, nextSibling, target);\n            }\n            // jump to next sibling\n            i += nodeDef.childCount;\n        }\n        if (!hostView.parent) {\n            // a root view\n            var projectedNodes = view.root.projectableNodes[ngContentIndex];\n            if (projectedNodes) {\n                for (var i = 0; i < projectedNodes.length; i++) {\n                    execRenderNodeAction(view, projectedNodes[i], action, parentNode, nextSibling, target);\n                }\n            }\n        }\n    }\n    function visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target) {\n        if (nodeDef.flags & 8 /* TypeNgContent */) {\n            visitProjectedRenderNodes(view, nodeDef.ngContent.index, action, parentNode, nextSibling, target);\n        }\n        else {\n            var rn = renderNode(view, nodeDef);\n            if (action === 3 /* RemoveChild */ && (nodeDef.flags & 33554432 /* ComponentView */) &&\n                (nodeDef.bindingFlags & 48 /* CatSyntheticProperty */)) {\n                // Note: we might need to do both actions.\n                if (nodeDef.bindingFlags & (16 /* SyntheticProperty */)) {\n                    execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);\n                }\n                if (nodeDef.bindingFlags & (32 /* SyntheticHostProperty */)) {\n                    var compView = asElementData(view, nodeDef.nodeIndex).componentView;\n                    execRenderNodeAction(compView, rn, action, parentNode, nextSibling, target);\n                }\n            }\n            else {\n                execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);\n            }\n            if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n                var embeddedViews = asElementData(view, nodeDef.nodeIndex).viewContainer._embeddedViews;\n                for (var k = 0; k < embeddedViews.length; k++) {\n                    visitRootRenderNodes(embeddedViews[k], action, parentNode, nextSibling, target);\n                }\n            }\n            if (nodeDef.flags & 1 /* TypeElement */ && !nodeDef.element.name) {\n                visitSiblingRenderNodes(view, action, nodeDef.nodeIndex + 1, nodeDef.nodeIndex + nodeDef.childCount, parentNode, nextSibling, target);\n            }\n        }\n    }\n    function execRenderNodeAction(view, renderNode, action, parentNode, nextSibling, target) {\n        var renderer = view.renderer;\n        switch (action) {\n            case 1 /* AppendChild */:\n                renderer.appendChild(parentNode, renderNode);\n                break;\n            case 2 /* InsertBefore */:\n                renderer.insertBefore(parentNode, renderNode, nextSibling);\n                break;\n            case 3 /* RemoveChild */:\n                renderer.removeChild(parentNode, renderNode);\n                break;\n            case 0 /* Collect */:\n                target.push(renderNode);\n                break;\n        }\n    }\n    var NS_PREFIX_RE = /^:([^:]+):(.+)$/;\n    function splitNamespace(name) {\n        if (name[0] === ':') {\n            var match = name.match(NS_PREFIX_RE);\n            return [match[1], match[2]];\n        }\n        return ['', name];\n    }\n    function calcBindingFlags(bindings) {\n        var flags = 0;\n        for (var i = 0; i < bindings.length; i++) {\n            flags |= bindings[i].flags;\n        }\n        return flags;\n    }\n    function interpolate(valueCount, constAndInterp) {\n        var result = '';\n        for (var i = 0; i < valueCount * 2; i = i + 2) {\n            result = result + constAndInterp[i] + _toStringWithNull(constAndInterp[i + 1]);\n        }\n        return result + constAndInterp[valueCount * 2];\n    }\n    function inlineInterpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {\n        switch (valueCount) {\n            case 1:\n                return c0 + _toStringWithNull(a1) + c1;\n            case 2:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;\n            case 3:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                    c3;\n            case 4:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                    c3 + _toStringWithNull(a4) + c4;\n            case 5:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;\n            case 6:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;\n            case 7:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                    c6 + _toStringWithNull(a7) + c7;\n            case 8:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                    c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;\n            case 9:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                    c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;\n            default:\n                throw new Error(\"Does not support more than 9 expressions\");\n        }\n    }\n    function _toStringWithNull(v) {\n        return v != null ? v.toString() : '';\n    }\n    var EMPTY_ARRAY$2 = [];\n    var EMPTY_MAP = {};\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var UNDEFINED_VALUE = new Object();\n    var InjectorRefTokenKey = tokenKey(Injector);\n    var INJECTORRefTokenKey = tokenKey(INJECTOR);\n    var NgModuleRefTokenKey = tokenKey(NgModuleRef);\n    function moduleProvideDef(flags, token, value, deps) {\n        // Need to resolve forwardRefs as e.g. for `useValue` we\n        // lowered the expression and then stopped evaluating it,\n        // i.e. also didn't unwrap it.\n        value = resolveForwardRef(value);\n        var depDefs = splitDepsDsl(deps, stringify(token));\n        return {\n            // will bet set by the module definition\n            index: -1,\n            deps: depDefs, flags: flags, token: token, value: value\n        };\n    }\n    function moduleDef(providers) {\n        var providersByKey = {};\n        var modules = [];\n        var isRoot = false;\n        for (var i = 0; i < providers.length; i++) {\n            var provider = providers[i];\n            if (provider.token === APP_ROOT && provider.value === true) {\n                isRoot = true;\n            }\n            if (provider.flags & 1073741824 /* TypeNgModule */) {\n                modules.push(provider.token);\n            }\n            provider.index = i;\n            providersByKey[tokenKey(provider.token)] = provider;\n        }\n        return {\n            // Will be filled later...\n            factory: null,\n            providersByKey: providersByKey,\n            providers: providers,\n            modules: modules,\n            isRoot: isRoot,\n        };\n    }\n    function initNgModule(data) {\n        var def = data._def;\n        var providers = data._providers = new Array(def.providers.length);\n        for (var i = 0; i < def.providers.length; i++) {\n            var provDef = def.providers[i];\n            if (!(provDef.flags & 4096 /* LazyProvider */)) {\n                // Make sure the provider has not been already initialized outside this loop.\n                if (providers[i] === undefined) {\n                    providers[i] = _createProviderInstance(data, provDef);\n                }\n            }\n        }\n    }\n    function resolveNgModuleDep(data, depDef, notFoundValue) {\n        if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n        var former = setCurrentInjector(data);\n        try {\n            if (depDef.flags & 8 /* Value */) {\n                return depDef.token;\n            }\n            if (depDef.flags & 2 /* Optional */) {\n                notFoundValue = null;\n            }\n            if (depDef.flags & 1 /* SkipSelf */) {\n                return data._parent.get(depDef.token, notFoundValue);\n            }\n            var tokenKey_1 = depDef.tokenKey;\n            switch (tokenKey_1) {\n                case InjectorRefTokenKey:\n                case INJECTORRefTokenKey:\n                case NgModuleRefTokenKey:\n                    return data;\n            }\n            var providerDef = data._def.providersByKey[tokenKey_1];\n            var injectableDef = void 0;\n            if (providerDef) {\n                var providerInstance = data._providers[providerDef.index];\n                if (providerInstance === undefined) {\n                    providerInstance = data._providers[providerDef.index] =\n                        _createProviderInstance(data, providerDef);\n                }\n                return providerInstance === UNDEFINED_VALUE ? undefined : providerInstance;\n            }\n            else if ((injectableDef = getInjectableDef(depDef.token)) && targetsModule(data, injectableDef)) {\n                var index = data._providers.length;\n                data._def.providers[index] = data._def.providersByKey[depDef.tokenKey] = {\n                    flags: 1024 /* TypeFactoryProvider */ | 4096 /* LazyProvider */,\n                    value: injectableDef.factory,\n                    deps: [], index: index,\n                    token: depDef.token,\n                };\n                data._providers[index] = UNDEFINED_VALUE;\n                return (data._providers[index] =\n                    _createProviderInstance(data, data._def.providersByKey[depDef.tokenKey]));\n            }\n            else if (depDef.flags & 4 /* Self */) {\n                return notFoundValue;\n            }\n            return data._parent.get(depDef.token, notFoundValue);\n        }\n        finally {\n            setCurrentInjector(former);\n        }\n    }\n    function moduleTransitivelyPresent(ngModule, scope) {\n        return ngModule._def.modules.indexOf(scope) > -1;\n    }\n    function targetsModule(ngModule, def) {\n        return def.providedIn != null && (moduleTransitivelyPresent(ngModule, def.providedIn) ||\n            def.providedIn === 'root' && ngModule._def.isRoot);\n    }\n    function _createProviderInstance(ngModule, providerDef) {\n        var injectable;\n        switch (providerDef.flags & 201347067 /* Types */) {\n            case 512 /* TypeClassProvider */:\n                injectable = _createClass(ngModule, providerDef.value, providerDef.deps);\n                break;\n            case 1024 /* TypeFactoryProvider */:\n                injectable = _callFactory(ngModule, providerDef.value, providerDef.deps);\n                break;\n            case 2048 /* TypeUseExistingProvider */:\n                injectable = resolveNgModuleDep(ngModule, providerDef.deps[0]);\n                break;\n            case 256 /* TypeValueProvider */:\n                injectable = providerDef.value;\n                break;\n        }\n        // The read of `ngOnDestroy` here is slightly expensive as it's megamorphic, so it should be\n        // avoided if possible. The sequence of checks here determines whether ngOnDestroy needs to be\n        // checked. It might not if the `injectable` isn't an object or if NodeFlags.OnDestroy is already\n        // set (ngOnDestroy was detected statically).\n        if (injectable !== UNDEFINED_VALUE && injectable !== null && typeof injectable === 'object' &&\n            !(providerDef.flags & 131072 /* OnDestroy */) && typeof injectable.ngOnDestroy === 'function') {\n            providerDef.flags |= 131072 /* OnDestroy */;\n        }\n        return injectable === undefined ? UNDEFINED_VALUE : injectable;\n    }\n    function _createClass(ngModule, ctor, deps) {\n        var len = deps.length;\n        switch (len) {\n            case 0:\n                return new ctor();\n            case 1:\n                return new ctor(resolveNgModuleDep(ngModule, deps[0]));\n            case 2:\n                return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));\n            case 3:\n                return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));\n            default:\n                var depValues = new Array(len);\n                for (var i = 0; i < len; i++) {\n                    depValues[i] = resolveNgModuleDep(ngModule, deps[i]);\n                }\n                return new (ctor.bind.apply(ctor, __spread([void 0], depValues)))();\n        }\n    }\n    function _callFactory(ngModule, factory, deps) {\n        var len = deps.length;\n        switch (len) {\n            case 0:\n                return factory();\n            case 1:\n                return factory(resolveNgModuleDep(ngModule, deps[0]));\n            case 2:\n                return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));\n            case 3:\n                return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));\n            default:\n                var depValues = Array(len);\n                for (var i = 0; i < len; i++) {\n                    depValues[i] = resolveNgModuleDep(ngModule, deps[i]);\n                }\n                return factory.apply(void 0, __spread(depValues));\n        }\n    }\n    function callNgModuleLifecycle(ngModule, lifecycles) {\n        var def = ngModule._def;\n        var destroyed = new Set();\n        for (var i = 0; i < def.providers.length; i++) {\n            var provDef = def.providers[i];\n            if (provDef.flags & 131072 /* OnDestroy */) {\n                var instance = ngModule._providers[i];\n                if (instance && instance !== UNDEFINED_VALUE) {\n                    var onDestroy = instance.ngOnDestroy;\n                    if (typeof onDestroy === 'function' && !destroyed.has(instance)) {\n                        onDestroy.apply(instance);\n                        destroyed.add(instance);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function attachEmbeddedView(parentView, elementData, viewIndex, view) {\n        var embeddedViews = elementData.viewContainer._embeddedViews;\n        if (viewIndex === null || viewIndex === undefined) {\n            viewIndex = embeddedViews.length;\n        }\n        view.viewContainerParent = parentView;\n        addToArray(embeddedViews, viewIndex, view);\n        attachProjectedView(elementData, view);\n        Services.dirtyParentQueries(view);\n        var prevView = viewIndex > 0 ? embeddedViews[viewIndex - 1] : null;\n        renderAttachEmbeddedView(elementData, prevView, view);\n    }\n    function attachProjectedView(vcElementData, view) {\n        var dvcElementData = declaredViewContainer(view);\n        if (!dvcElementData || dvcElementData === vcElementData ||\n            view.state & 16 /* IsProjectedView */) {\n            return;\n        }\n        // Note: For performance reasons, we\n        // - add a view to template._projectedViews only 1x throughout its lifetime,\n        //   and remove it not until the view is destroyed.\n        //   (hard, as when a parent view is attached/detached we would need to attach/detach all\n        //    nested projected views as well, even across component boundaries).\n        // - don't track the insertion order of views in the projected views array\n        //   (hard, as when the views of the same template are inserted different view containers)\n        view.state |= 16 /* IsProjectedView */;\n        var projectedViews = dvcElementData.template._projectedViews;\n        if (!projectedViews) {\n            projectedViews = dvcElementData.template._projectedViews = [];\n        }\n        projectedViews.push(view);\n        // Note: we are changing the NodeDef here as we cannot calculate\n        // the fact whether a template is used for projection during compilation.\n        markNodeAsProjectedTemplate(view.parent.def, view.parentNodeDef);\n    }\n    function markNodeAsProjectedTemplate(viewDef, nodeDef) {\n        if (nodeDef.flags & 4 /* ProjectedTemplate */) {\n            return;\n        }\n        viewDef.nodeFlags |= 4 /* ProjectedTemplate */;\n        nodeDef.flags |= 4 /* ProjectedTemplate */;\n        var parentNodeDef = nodeDef.parent;\n        while (parentNodeDef) {\n            parentNodeDef.childFlags |= 4 /* ProjectedTemplate */;\n            parentNodeDef = parentNodeDef.parent;\n        }\n    }\n    function detachEmbeddedView(elementData, viewIndex) {\n        var embeddedViews = elementData.viewContainer._embeddedViews;\n        if (viewIndex == null || viewIndex >= embeddedViews.length) {\n            viewIndex = embeddedViews.length - 1;\n        }\n        if (viewIndex < 0) {\n            return null;\n        }\n        var view = embeddedViews[viewIndex];\n        view.viewContainerParent = null;\n        removeFromArray(embeddedViews, viewIndex);\n        // See attachProjectedView for why we don't update projectedViews here.\n        Services.dirtyParentQueries(view);\n        renderDetachView$1(view);\n        return view;\n    }\n    function detachProjectedView(view) {\n        if (!(view.state & 16 /* IsProjectedView */)) {\n            return;\n        }\n        var dvcElementData = declaredViewContainer(view);\n        if (dvcElementData) {\n            var projectedViews = dvcElementData.template._projectedViews;\n            if (projectedViews) {\n                removeFromArray(projectedViews, projectedViews.indexOf(view));\n                Services.dirtyParentQueries(view);\n            }\n        }\n    }\n    function moveEmbeddedView(elementData, oldViewIndex, newViewIndex) {\n        var embeddedViews = elementData.viewContainer._embeddedViews;\n        var view = embeddedViews[oldViewIndex];\n        removeFromArray(embeddedViews, oldViewIndex);\n        if (newViewIndex == null) {\n            newViewIndex = embeddedViews.length;\n        }\n        addToArray(embeddedViews, newViewIndex, view);\n        // Note: Don't need to change projectedViews as the order in there\n        // as always invalid...\n        Services.dirtyParentQueries(view);\n        renderDetachView$1(view);\n        var prevView = newViewIndex > 0 ? embeddedViews[newViewIndex - 1] : null;\n        renderAttachEmbeddedView(elementData, prevView, view);\n        return view;\n    }\n    function renderAttachEmbeddedView(elementData, prevView, view) {\n        var prevRenderNode = prevView ? renderNode(prevView, prevView.def.lastRenderRootNode) :\n            elementData.renderElement;\n        var parentNode = view.renderer.parentNode(prevRenderNode);\n        var nextSibling = view.renderer.nextSibling(prevRenderNode);\n        // Note: We can't check if `nextSibling` is present, as on WebWorkers it will always be!\n        // However, browsers automatically do `appendChild` when there is no `nextSibling`.\n        visitRootRenderNodes(view, 2 /* InsertBefore */, parentNode, nextSibling, undefined);\n    }\n    function renderDetachView$1(view) {\n        visitRootRenderNodes(view, 3 /* RemoveChild */, null, null, undefined);\n    }\n    function addToArray(arr, index, value) {\n        // perf: array.push is faster than array.splice!\n        if (index >= arr.length) {\n            arr.push(value);\n        }\n        else {\n            arr.splice(index, 0, value);\n        }\n    }\n    function removeFromArray(arr, index) {\n        // perf: array.pop is faster than array.splice!\n        if (index >= arr.length - 1) {\n            arr.pop();\n        }\n        else {\n            arr.splice(index, 1);\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var EMPTY_CONTEXT = new Object();\n    // Attention: this function is called as top level function.\n    // Putting any logic in here will destroy closure tree shaking!\n    function createComponentFactory(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors) {\n        return new ComponentFactory_(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors);\n    }\n    function getComponentViewDefinitionFactory(componentFactory) {\n        return componentFactory.viewDefFactory;\n    }\n    var ComponentFactory_ = /** @class */ (function (_super) {\n        __extends(ComponentFactory_, _super);\n        function ComponentFactory_(selector, componentType, viewDefFactory, _inputs, _outputs, ngContentSelectors) {\n            var _this = \n            // Attention: this ctor is called as top level function.\n            // Putting any logic in here will destroy closure tree shaking!\n            _super.call(this) || this;\n            _this.selector = selector;\n            _this.componentType = componentType;\n            _this._inputs = _inputs;\n            _this._outputs = _outputs;\n            _this.ngContentSelectors = ngContentSelectors;\n            _this.viewDefFactory = viewDefFactory;\n            return _this;\n        }\n        Object.defineProperty(ComponentFactory_.prototype, \"inputs\", {\n            get: function () {\n                var inputsArr = [];\n                var inputs = this._inputs;\n                for (var propName in inputs) {\n                    var templateName = inputs[propName];\n                    inputsArr.push({ propName: propName, templateName: templateName });\n                }\n                return inputsArr;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ComponentFactory_.prototype, \"outputs\", {\n            get: function () {\n                var outputsArr = [];\n                for (var propName in this._outputs) {\n                    var templateName = this._outputs[propName];\n                    outputsArr.push({ propName: propName, templateName: templateName });\n                }\n                return outputsArr;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Creates a new component.\n         */\n        ComponentFactory_.prototype.create = function (injector, projectableNodes, rootSelectorOrNode, ngModule) {\n            if (!ngModule) {\n                throw new Error('ngModule should be provided');\n            }\n            var viewDef = resolveDefinition(this.viewDefFactory);\n            var componentNodeIndex = viewDef.nodes[0].element.componentProvider.nodeIndex;\n            var view = Services.createRootView(injector, projectableNodes || [], rootSelectorOrNode, viewDef, ngModule, EMPTY_CONTEXT);\n            var component = asProviderData(view, componentNodeIndex).instance;\n            if (rootSelectorOrNode) {\n                view.renderer.setAttribute(asElementData(view, 0).renderElement, 'ng-version', VERSION.full);\n            }\n            return new ComponentRef_(view, new ViewRef_(view), component);\n        };\n        return ComponentFactory_;\n    }(ComponentFactory));\n    var ComponentRef_ = /** @class */ (function (_super) {\n        __extends(ComponentRef_, _super);\n        function ComponentRef_(_view, _viewRef, _component) {\n            var _this = _super.call(this) || this;\n            _this._view = _view;\n            _this._viewRef = _viewRef;\n            _this._component = _component;\n            _this._elDef = _this._view.def.nodes[0];\n            _this.hostView = _viewRef;\n            _this.changeDetectorRef = _viewRef;\n            _this.instance = _component;\n            return _this;\n        }\n        Object.defineProperty(ComponentRef_.prototype, \"location\", {\n            get: function () {\n                return new ElementRef(asElementData(this._view, this._elDef.nodeIndex).renderElement);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ComponentRef_.prototype, \"injector\", {\n            get: function () { return new Injector_(this._view, this._elDef); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ComponentRef_.prototype, \"componentType\", {\n            get: function () { return this._component.constructor; },\n            enumerable: true,\n            configurable: true\n        });\n        ComponentRef_.prototype.destroy = function () { this._viewRef.destroy(); };\n        ComponentRef_.prototype.onDestroy = function (callback) { this._viewRef.onDestroy(callback); };\n        return ComponentRef_;\n    }(ComponentRef));\n    function createViewContainerData(view, elDef, elData) {\n        return new ViewContainerRef_(view, elDef, elData);\n    }\n    var ViewContainerRef_ = /** @class */ (function () {\n        function ViewContainerRef_(_view, _elDef, _data) {\n            this._view = _view;\n            this._elDef = _elDef;\n            this._data = _data;\n            /**\n             * @internal\n             */\n            this._embeddedViews = [];\n        }\n        Object.defineProperty(ViewContainerRef_.prototype, \"element\", {\n            get: function () { return new ElementRef(this._data.renderElement); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ViewContainerRef_.prototype, \"injector\", {\n            get: function () { return new Injector_(this._view, this._elDef); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ViewContainerRef_.prototype, \"parentInjector\", {\n            /** @deprecated No replacement */\n            get: function () {\n                var view = this._view;\n                var elDef = this._elDef.parent;\n                while (!elDef && view) {\n                    elDef = viewParentEl(view);\n                    view = view.parent;\n                }\n                return view ? new Injector_(view, elDef) : new Injector_(this._view, null);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        ViewContainerRef_.prototype.clear = function () {\n            var len = this._embeddedViews.length;\n            for (var i = len - 1; i >= 0; i--) {\n                var view = detachEmbeddedView(this._data, i);\n                Services.destroyView(view);\n            }\n        };\n        ViewContainerRef_.prototype.get = function (index) {\n            var view = this._embeddedViews[index];\n            if (view) {\n                var ref = new ViewRef_(view);\n                ref.attachToViewContainerRef(this);\n                return ref;\n            }\n            return null;\n        };\n        Object.defineProperty(ViewContainerRef_.prototype, \"length\", {\n            get: function () { return this._embeddedViews.length; },\n            enumerable: true,\n            configurable: true\n        });\n        ViewContainerRef_.prototype.createEmbeddedView = function (templateRef, context, index) {\n            var viewRef = templateRef.createEmbeddedView(context || {});\n            this.insert(viewRef, index);\n            return viewRef;\n        };\n        ViewContainerRef_.prototype.createComponent = function (componentFactory, index, injector, projectableNodes, ngModuleRef) {\n            var contextInjector = injector || this.parentInjector;\n            if (!ngModuleRef && !(componentFactory instanceof ComponentFactoryBoundToModule)) {\n                ngModuleRef = contextInjector.get(NgModuleRef);\n            }\n            var componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);\n            this.insert(componentRef.hostView, index);\n            return componentRef;\n        };\n        ViewContainerRef_.prototype.insert = function (viewRef, index) {\n            if (viewRef.destroyed) {\n                throw new Error('Cannot insert a destroyed View in a ViewContainer!');\n            }\n            var viewRef_ = viewRef;\n            var viewData = viewRef_._view;\n            attachEmbeddedView(this._view, this._data, index, viewData);\n            viewRef_.attachToViewContainerRef(this);\n            return viewRef;\n        };\n        ViewContainerRef_.prototype.move = function (viewRef, currentIndex) {\n            if (viewRef.destroyed) {\n                throw new Error('Cannot move a destroyed View in a ViewContainer!');\n            }\n            var previousIndex = this._embeddedViews.indexOf(viewRef._view);\n            moveEmbeddedView(this._data, previousIndex, currentIndex);\n            return viewRef;\n        };\n        ViewContainerRef_.prototype.indexOf = function (viewRef) {\n            return this._embeddedViews.indexOf(viewRef._view);\n        };\n        ViewContainerRef_.prototype.remove = function (index) {\n            var viewData = detachEmbeddedView(this._data, index);\n            if (viewData) {\n                Services.destroyView(viewData);\n            }\n        };\n        ViewContainerRef_.prototype.detach = function (index) {\n            var view = detachEmbeddedView(this._data, index);\n            return view ? new ViewRef_(view) : null;\n        };\n        return ViewContainerRef_;\n    }());\n    function createChangeDetectorRef(view) {\n        return new ViewRef_(view);\n    }\n    var ViewRef_ = /** @class */ (function () {\n        function ViewRef_(_view) {\n            this._view = _view;\n            this._viewContainerRef = null;\n            this._appRef = null;\n        }\n        Object.defineProperty(ViewRef_.prototype, \"rootNodes\", {\n            get: function () { return rootRenderNodes(this._view); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ViewRef_.prototype, \"context\", {\n            get: function () { return this._view.context; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ViewRef_.prototype, \"destroyed\", {\n            get: function () { return (this._view.state & 128 /* Destroyed */) !== 0; },\n            enumerable: true,\n            configurable: true\n        });\n        ViewRef_.prototype.markForCheck = function () { markParentViewsForCheck(this._view); };\n        ViewRef_.prototype.detach = function () { this._view.state &= ~4 /* Attached */; };\n        ViewRef_.prototype.detectChanges = function () {\n            var fs = this._view.root.rendererFactory;\n            if (fs.begin) {\n                fs.begin();\n            }\n            try {\n                Services.checkAndUpdateView(this._view);\n            }\n            finally {\n                if (fs.end) {\n                    fs.end();\n                }\n            }\n        };\n        ViewRef_.prototype.checkNoChanges = function () { Services.checkNoChangesView(this._view); };\n        ViewRef_.prototype.reattach = function () { this._view.state |= 4 /* Attached */; };\n        ViewRef_.prototype.onDestroy = function (callback) {\n            if (!this._view.disposables) {\n                this._view.disposables = [];\n            }\n            this._view.disposables.push(callback);\n        };\n        ViewRef_.prototype.destroy = function () {\n            if (this._appRef) {\n                this._appRef.detachView(this);\n            }\n            else if (this._viewContainerRef) {\n                this._viewContainerRef.detach(this._viewContainerRef.indexOf(this));\n            }\n            Services.destroyView(this._view);\n        };\n        ViewRef_.prototype.detachFromAppRef = function () {\n            this._appRef = null;\n            renderDetachView$1(this._view);\n            Services.dirtyParentQueries(this._view);\n        };\n        ViewRef_.prototype.attachToAppRef = function (appRef) {\n            if (this._viewContainerRef) {\n                throw new Error('This view is already attached to a ViewContainer!');\n            }\n            this._appRef = appRef;\n        };\n        ViewRef_.prototype.attachToViewContainerRef = function (vcRef) {\n            if (this._appRef) {\n                throw new Error('This view is already attached directly to the ApplicationRef!');\n            }\n            this._viewContainerRef = vcRef;\n        };\n        return ViewRef_;\n    }());\n    function createTemplateData(view, def) {\n        return new TemplateRef_(view, def);\n    }\n    var TemplateRef_ = /** @class */ (function (_super) {\n        __extends(TemplateRef_, _super);\n        function TemplateRef_(_parentView, _def) {\n            var _this = _super.call(this) || this;\n            _this._parentView = _parentView;\n            _this._def = _def;\n            return _this;\n        }\n        TemplateRef_.prototype.createEmbeddedView = function (context) {\n            return new ViewRef_(Services.createEmbeddedView(this._parentView, this._def, this._def.element.template, context));\n        };\n        Object.defineProperty(TemplateRef_.prototype, \"elementRef\", {\n            get: function () {\n                return new ElementRef(asElementData(this._parentView, this._def.nodeIndex).renderElement);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return TemplateRef_;\n    }(TemplateRef));\n    function createInjector$1(view, elDef) {\n        return new Injector_(view, elDef);\n    }\n    var Injector_ = /** @class */ (function () {\n        function Injector_(view, elDef) {\n            this.view = view;\n            this.elDef = elDef;\n        }\n        Injector_.prototype.get = function (token, notFoundValue) {\n            if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n            var allowPrivateServices = this.elDef ? (this.elDef.flags & 33554432 /* ComponentView */) !== 0 : false;\n            return Services.resolveDep(this.view, this.elDef, allowPrivateServices, { flags: 0 /* None */, token: token, tokenKey: tokenKey(token) }, notFoundValue);\n        };\n        return Injector_;\n    }());\n    function nodeValue(view, index) {\n        var def = view.def.nodes[index];\n        if (def.flags & 1 /* TypeElement */) {\n            var elData = asElementData(view, def.nodeIndex);\n            return def.element.template ? elData.template : elData.renderElement;\n        }\n        else if (def.flags & 2 /* TypeText */) {\n            return asTextData(view, def.nodeIndex).renderText;\n        }\n        else if (def.flags & (20224 /* CatProvider */ | 16 /* TypePipe */)) {\n            return asProviderData(view, def.nodeIndex).instance;\n        }\n        throw new Error(\"Illegal state: read nodeValue for node index \" + index);\n    }\n    function createRendererV1(view) {\n        return new RendererAdapter(view.renderer);\n    }\n    var RendererAdapter = /** @class */ (function () {\n        function RendererAdapter(delegate) {\n            this.delegate = delegate;\n        }\n        RendererAdapter.prototype.selectRootElement = function (selectorOrNode) {\n            return this.delegate.selectRootElement(selectorOrNode);\n        };\n        RendererAdapter.prototype.createElement = function (parent, namespaceAndName) {\n            var _a = __read(splitNamespace(namespaceAndName), 2), ns = _a[0], name = _a[1];\n            var el = this.delegate.createElement(name, ns);\n            if (parent) {\n                this.delegate.appendChild(parent, el);\n            }\n            return el;\n        };\n        RendererAdapter.prototype.createViewRoot = function (hostElement) { return hostElement; };\n        RendererAdapter.prototype.createTemplateAnchor = function (parentElement) {\n            var comment = this.delegate.createComment('');\n            if (parentElement) {\n                this.delegate.appendChild(parentElement, comment);\n            }\n            return comment;\n        };\n        RendererAdapter.prototype.createText = function (parentElement, value) {\n            var node = this.delegate.createText(value);\n            if (parentElement) {\n                this.delegate.appendChild(parentElement, node);\n            }\n            return node;\n        };\n        RendererAdapter.prototype.projectNodes = function (parentElement, nodes) {\n            for (var i = 0; i < nodes.length; i++) {\n                this.delegate.appendChild(parentElement, nodes[i]);\n            }\n        };\n        RendererAdapter.prototype.attachViewAfter = function (node, viewRootNodes) {\n            var parentElement = this.delegate.parentNode(node);\n            var nextSibling = this.delegate.nextSibling(node);\n            for (var i = 0; i < viewRootNodes.length; i++) {\n                this.delegate.insertBefore(parentElement, viewRootNodes[i], nextSibling);\n            }\n        };\n        RendererAdapter.prototype.detachView = function (viewRootNodes) {\n            for (var i = 0; i < viewRootNodes.length; i++) {\n                var node = viewRootNodes[i];\n                var parentElement = this.delegate.parentNode(node);\n                this.delegate.removeChild(parentElement, node);\n            }\n        };\n        RendererAdapter.prototype.destroyView = function (hostElement, viewAllNodes) {\n            for (var i = 0; i < viewAllNodes.length; i++) {\n                this.delegate.destroyNode(viewAllNodes[i]);\n            }\n        };\n        RendererAdapter.prototype.listen = function (renderElement, name, callback) {\n            return this.delegate.listen(renderElement, name, callback);\n        };\n        RendererAdapter.prototype.listenGlobal = function (target, name, callback) {\n            return this.delegate.listen(target, name, callback);\n        };\n        RendererAdapter.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) {\n            this.delegate.setProperty(renderElement, propertyName, propertyValue);\n        };\n        RendererAdapter.prototype.setElementAttribute = function (renderElement, namespaceAndName, attributeValue) {\n            var _a = __read(splitNamespace(namespaceAndName), 2), ns = _a[0], name = _a[1];\n            if (attributeValue != null) {\n                this.delegate.setAttribute(renderElement, name, attributeValue, ns);\n            }\n            else {\n                this.delegate.removeAttribute(renderElement, name, ns);\n            }\n        };\n        RendererAdapter.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) { };\n        RendererAdapter.prototype.setElementClass = function (renderElement, className, isAdd) {\n            if (isAdd) {\n                this.delegate.addClass(renderElement, className);\n            }\n            else {\n                this.delegate.removeClass(renderElement, className);\n            }\n        };\n        RendererAdapter.prototype.setElementStyle = function (renderElement, styleName, styleValue) {\n            if (styleValue != null) {\n                this.delegate.setStyle(renderElement, styleName, styleValue);\n            }\n            else {\n                this.delegate.removeStyle(renderElement, styleName);\n            }\n        };\n        RendererAdapter.prototype.invokeElementMethod = function (renderElement, methodName, args) {\n            renderElement[methodName].apply(renderElement, args);\n        };\n        RendererAdapter.prototype.setText = function (renderNode, text) { this.delegate.setValue(renderNode, text); };\n        RendererAdapter.prototype.animate = function () { throw new Error('Renderer.animate is no longer supported!'); };\n        return RendererAdapter;\n    }());\n    function createNgModuleRef(moduleType, parent, bootstrapComponents, def) {\n        return new NgModuleRef_(moduleType, parent, bootstrapComponents, def);\n    }\n    var NgModuleRef_ = /** @class */ (function () {\n        function NgModuleRef_(_moduleType, _parent, _bootstrapComponents, _def) {\n            this._moduleType = _moduleType;\n            this._parent = _parent;\n            this._bootstrapComponents = _bootstrapComponents;\n            this._def = _def;\n            this._destroyListeners = [];\n            this._destroyed = false;\n            this.injector = this;\n            initNgModule(this);\n        }\n        NgModuleRef_.prototype.get = function (token, notFoundValue, injectFlags) {\n            if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n            if (injectFlags === void 0) { injectFlags = exports.InjectFlags.Default; }\n            var flags = 0 /* None */;\n            if (injectFlags & exports.InjectFlags.SkipSelf) {\n                flags |= 1 /* SkipSelf */;\n            }\n            else if (injectFlags & exports.InjectFlags.Self) {\n                flags |= 4 /* Self */;\n            }\n            return resolveNgModuleDep(this, { token: token, tokenKey: tokenKey(token), flags: flags }, notFoundValue);\n        };\n        Object.defineProperty(NgModuleRef_.prototype, \"instance\", {\n            get: function () { return this.get(this._moduleType); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgModuleRef_.prototype, \"componentFactoryResolver\", {\n            get: function () { return this.get(ComponentFactoryResolver); },\n            enumerable: true,\n            configurable: true\n        });\n        NgModuleRef_.prototype.destroy = function () {\n            if (this._destroyed) {\n                throw new Error(\"The ng module \" + stringify(this.instance.constructor) + \" has already been destroyed.\");\n            }\n            this._destroyed = true;\n            callNgModuleLifecycle(this, 131072 /* OnDestroy */);\n            this._destroyListeners.forEach(function (listener) { return listener(); });\n        };\n        NgModuleRef_.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback); };\n        return NgModuleRef_;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var RendererV1TokenKey = tokenKey(Renderer);\n    var Renderer2TokenKey = tokenKey(Renderer2);\n    var ElementRefTokenKey = tokenKey(ElementRef);\n    var ViewContainerRefTokenKey = tokenKey(ViewContainerRef);\n    var TemplateRefTokenKey = tokenKey(TemplateRef);\n    var ChangeDetectorRefTokenKey = tokenKey(ChangeDetectorRef);\n    var InjectorRefTokenKey$1 = tokenKey(Injector);\n    var INJECTORRefTokenKey$1 = tokenKey(INJECTOR);\n    function directiveDef(checkIndex, flags, matchedQueries, childCount, ctor, deps, props, outputs) {\n        var bindings = [];\n        if (props) {\n            for (var prop in props) {\n                var _a = __read(props[prop], 2), bindingIndex = _a[0], nonMinifiedName = _a[1];\n                bindings[bindingIndex] = {\n                    flags: 8 /* TypeProperty */,\n                    name: prop, nonMinifiedName: nonMinifiedName,\n                    ns: null,\n                    securityContext: null,\n                    suffix: null\n                };\n            }\n        }\n        var outputDefs = [];\n        if (outputs) {\n            for (var propName in outputs) {\n                outputDefs.push({ type: 1 /* DirectiveOutput */, propName: propName, target: null, eventName: outputs[propName] });\n            }\n        }\n        flags |= 16384 /* TypeDirective */;\n        return _def(checkIndex, flags, matchedQueries, childCount, ctor, ctor, deps, bindings, outputDefs);\n    }\n    function pipeDef(flags, ctor, deps) {\n        flags |= 16 /* TypePipe */;\n        return _def(-1, flags, null, 0, ctor, ctor, deps);\n    }\n    function providerDef(flags, matchedQueries, token, value, deps) {\n        return _def(-1, flags, matchedQueries, 0, token, value, deps);\n    }\n    function _def(checkIndex, flags, matchedQueriesDsl, childCount, token, value, deps, bindings, outputs) {\n        var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;\n        if (!outputs) {\n            outputs = [];\n        }\n        if (!bindings) {\n            bindings = [];\n        }\n        // Need to resolve forwardRefs as e.g. for `useValue` we\n        // lowered the expression and then stopped evaluating it,\n        // i.e. also didn't unwrap it.\n        value = resolveForwardRef(value);\n        var depDefs = splitDepsDsl(deps, stringify(token));\n        return {\n            // will bet set by the view definition\n            nodeIndex: -1,\n            parent: null,\n            renderParent: null,\n            bindingIndex: -1,\n            outputIndex: -1,\n            // regular values\n            checkIndex: checkIndex,\n            flags: flags,\n            childFlags: 0,\n            directChildFlags: 0,\n            childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references,\n            ngContentIndex: -1, childCount: childCount, bindings: bindings,\n            bindingFlags: calcBindingFlags(bindings), outputs: outputs,\n            element: null,\n            provider: { token: token, value: value, deps: depDefs },\n            text: null,\n            query: null,\n            ngContent: null\n        };\n    }\n    function createProviderInstance(view, def) {\n        return _createProviderInstance$1(view, def);\n    }\n    function createPipeInstance(view, def) {\n        // deps are looked up from component.\n        var compView = view;\n        while (compView.parent && !isComponentView(compView)) {\n            compView = compView.parent;\n        }\n        // pipes can see the private services of the component\n        var allowPrivateServices = true;\n        // pipes are always eager and classes!\n        return createClass(compView.parent, viewParentEl(compView), allowPrivateServices, def.provider.value, def.provider.deps);\n    }\n    function createDirectiveInstance(view, def) {\n        // components can see other private services, other directives can't.\n        var allowPrivateServices = (def.flags & 32768 /* Component */) > 0;\n        // directives are always eager and classes!\n        var instance = createClass(view, def.parent, allowPrivateServices, def.provider.value, def.provider.deps);\n        if (def.outputs.length) {\n            for (var i = 0; i < def.outputs.length; i++) {\n                var output = def.outputs[i];\n                var outputObservable = instance[output.propName];\n                if (isObservable(outputObservable)) {\n                    var subscription = outputObservable.subscribe(eventHandlerClosure(view, def.parent.nodeIndex, output.eventName));\n                    view.disposables[def.outputIndex + i] = subscription.unsubscribe.bind(subscription);\n                }\n                else {\n                    throw new Error(\"@Output \" + output.propName + \" not initialized in '\" + instance.constructor.name + \"'.\");\n                }\n            }\n        }\n        return instance;\n    }\n    function eventHandlerClosure(view, index, eventName) {\n        return function (event) { return dispatchEvent(view, index, eventName, event); };\n    }\n    function checkAndUpdateDirectiveInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n        var providerData = asProviderData(view, def.nodeIndex);\n        var directive = providerData.instance;\n        var changed = false;\n        var changes = undefined;\n        var bindLen = def.bindings.length;\n        if (bindLen > 0 && checkBinding(view, def, 0, v0)) {\n            changed = true;\n            changes = updateProp(view, providerData, def, 0, v0, changes);\n        }\n        if (bindLen > 1 && checkBinding(view, def, 1, v1)) {\n            changed = true;\n            changes = updateProp(view, providerData, def, 1, v1, changes);\n        }\n        if (bindLen > 2 && checkBinding(view, def, 2, v2)) {\n            changed = true;\n            changes = updateProp(view, providerData, def, 2, v2, changes);\n        }\n        if (bindLen > 3 && checkBinding(view, def, 3, v3)) {\n            changed = true;\n            changes = updateProp(view, providerData, def, 3, v3, changes);\n        }\n        if (bindLen > 4 && checkBinding(view, def, 4, v4)) {\n            changed = true;\n            changes = updateProp(view, providerData, def, 4, v4, changes);\n        }\n        if (bindLen > 5 && checkBinding(view, def, 5, v5)) {\n            changed = true;\n            changes = updateProp(view, providerData, def, 5, v5, changes);\n        }\n        if (bindLen > 6 && checkBinding(view, def, 6, v6)) {\n            changed = true;\n            changes = updateProp(view, providerData, def, 6, v6, changes);\n        }\n        if (bindLen > 7 && checkBinding(view, def, 7, v7)) {\n            changed = true;\n            changes = updateProp(view, providerData, def, 7, v7, changes);\n        }\n        if (bindLen > 8 && checkBinding(view, def, 8, v8)) {\n            changed = true;\n            changes = updateProp(view, providerData, def, 8, v8, changes);\n        }\n        if (bindLen > 9 && checkBinding(view, def, 9, v9)) {\n            changed = true;\n            changes = updateProp(view, providerData, def, 9, v9, changes);\n        }\n        if (changes) {\n            directive.ngOnChanges(changes);\n        }\n        if ((def.flags & 65536 /* OnInit */) &&\n            shouldCallLifecycleInitHook(view, 256 /* InitState_CallingOnInit */, def.nodeIndex)) {\n            directive.ngOnInit();\n        }\n        if (def.flags & 262144 /* DoCheck */) {\n            directive.ngDoCheck();\n        }\n        return changed;\n    }\n    function checkAndUpdateDirectiveDynamic(view, def, values) {\n        var providerData = asProviderData(view, def.nodeIndex);\n        var directive = providerData.instance;\n        var changed = false;\n        var changes = undefined;\n        for (var i = 0; i < values.length; i++) {\n            if (checkBinding(view, def, i, values[i])) {\n                changed = true;\n                changes = updateProp(view, providerData, def, i, values[i], changes);\n            }\n        }\n        if (changes) {\n            directive.ngOnChanges(changes);\n        }\n        if ((def.flags & 65536 /* OnInit */) &&\n            shouldCallLifecycleInitHook(view, 256 /* InitState_CallingOnInit */, def.nodeIndex)) {\n            directive.ngOnInit();\n        }\n        if (def.flags & 262144 /* DoCheck */) {\n            directive.ngDoCheck();\n        }\n        return changed;\n    }\n    function _createProviderInstance$1(view, def) {\n        // private services can see other private services\n        var allowPrivateServices = (def.flags & 8192 /* PrivateProvider */) > 0;\n        var providerDef = def.provider;\n        switch (def.flags & 201347067 /* Types */) {\n            case 512 /* TypeClassProvider */:\n                return createClass(view, def.parent, allowPrivateServices, providerDef.value, providerDef.deps);\n            case 1024 /* TypeFactoryProvider */:\n                return callFactory(view, def.parent, allowPrivateServices, providerDef.value, providerDef.deps);\n            case 2048 /* TypeUseExistingProvider */:\n                return resolveDep(view, def.parent, allowPrivateServices, providerDef.deps[0]);\n            case 256 /* TypeValueProvider */:\n                return providerDef.value;\n        }\n    }\n    function createClass(view, elDef, allowPrivateServices, ctor, deps) {\n        var len = deps.length;\n        switch (len) {\n            case 0:\n                return new ctor();\n            case 1:\n                return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]));\n            case 2:\n                return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));\n            case 3:\n                return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));\n            default:\n                var depValues = new Array(len);\n                for (var i = 0; i < len; i++) {\n                    depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);\n                }\n                return new (ctor.bind.apply(ctor, __spread([void 0], depValues)))();\n        }\n    }\n    function callFactory(view, elDef, allowPrivateServices, factory, deps) {\n        var len = deps.length;\n        switch (len) {\n            case 0:\n                return factory();\n            case 1:\n                return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]));\n            case 2:\n                return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));\n            case 3:\n                return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));\n            default:\n                var depValues = Array(len);\n                for (var i = 0; i < len; i++) {\n                    depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);\n                }\n                return factory.apply(void 0, __spread(depValues));\n        }\n    }\n    // This default value is when checking the hierarchy for a token.\n    //\n    // It means both:\n    // - the token is not provided by the current injector,\n    // - only the element injectors should be checked (ie do not check module injectors\n    //\n    //          mod1\n    //         /\n    //       el1   mod2\n    //         \\  /\n    //         el2\n    //\n    // When requesting el2.injector.get(token), we should check in the following order and return the\n    // first found value:\n    // - el2.injector.get(token, default)\n    // - el1.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) -> do not check the module\n    // - mod2.injector.get(token, default)\n    var NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};\n    function resolveDep(view, elDef, allowPrivateServices, depDef, notFoundValue) {\n        if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n        if (depDef.flags & 8 /* Value */) {\n            return depDef.token;\n        }\n        var startView = view;\n        if (depDef.flags & 2 /* Optional */) {\n            notFoundValue = null;\n        }\n        var tokenKey = depDef.tokenKey;\n        if (tokenKey === ChangeDetectorRefTokenKey) {\n            // directives on the same element as a component should be able to control the change detector\n            // of that component as well.\n            allowPrivateServices = !!(elDef && elDef.element.componentView);\n        }\n        if (elDef && (depDef.flags & 1 /* SkipSelf */)) {\n            allowPrivateServices = false;\n            elDef = elDef.parent;\n        }\n        var searchView = view;\n        while (searchView) {\n            if (elDef) {\n                switch (tokenKey) {\n                    case RendererV1TokenKey: {\n                        var compView = findCompView(searchView, elDef, allowPrivateServices);\n                        return createRendererV1(compView);\n                    }\n                    case Renderer2TokenKey: {\n                        var compView = findCompView(searchView, elDef, allowPrivateServices);\n                        return compView.renderer;\n                    }\n                    case ElementRefTokenKey:\n                        return new ElementRef(asElementData(searchView, elDef.nodeIndex).renderElement);\n                    case ViewContainerRefTokenKey:\n                        return asElementData(searchView, elDef.nodeIndex).viewContainer;\n                    case TemplateRefTokenKey: {\n                        if (elDef.element.template) {\n                            return asElementData(searchView, elDef.nodeIndex).template;\n                        }\n                        break;\n                    }\n                    case ChangeDetectorRefTokenKey: {\n                        var cdView = findCompView(searchView, elDef, allowPrivateServices);\n                        return createChangeDetectorRef(cdView);\n                    }\n                    case InjectorRefTokenKey$1:\n                    case INJECTORRefTokenKey$1:\n                        return createInjector$1(searchView, elDef);\n                    default:\n                        var providerDef_1 = (allowPrivateServices ? elDef.element.allProviders :\n                            elDef.element.publicProviders)[tokenKey];\n                        if (providerDef_1) {\n                            var providerData = asProviderData(searchView, providerDef_1.nodeIndex);\n                            if (!providerData) {\n                                providerData = { instance: _createProviderInstance$1(searchView, providerDef_1) };\n                                searchView.nodes[providerDef_1.nodeIndex] = providerData;\n                            }\n                            return providerData.instance;\n                        }\n                }\n            }\n            allowPrivateServices = isComponentView(searchView);\n            elDef = viewParentEl(searchView);\n            searchView = searchView.parent;\n            if (depDef.flags & 4 /* Self */) {\n                searchView = null;\n            }\n        }\n        var value = startView.root.injector.get(depDef.token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR);\n        if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR ||\n            notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\n            // Return the value from the root element injector when\n            // - it provides it\n            //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n            // - the module injector should not be checked\n            //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n            return value;\n        }\n        return startView.root.ngModule.injector.get(depDef.token, notFoundValue);\n    }\n    function findCompView(view, elDef, allowPrivateServices) {\n        var compView;\n        if (allowPrivateServices) {\n            compView = asElementData(view, elDef.nodeIndex).componentView;\n        }\n        else {\n            compView = view;\n            while (compView.parent && !isComponentView(compView)) {\n                compView = compView.parent;\n            }\n        }\n        return compView;\n    }\n    function updateProp(view, providerData, def, bindingIdx, value, changes) {\n        if (def.flags & 32768 /* Component */) {\n            var compView = asElementData(view, def.parent.nodeIndex).componentView;\n            if (compView.def.flags & 2 /* OnPush */) {\n                compView.state |= 8 /* ChecksEnabled */;\n            }\n        }\n        var binding = def.bindings[bindingIdx];\n        var propName = binding.name;\n        // Note: This is still safe with Closure Compiler as\n        // the user passed in the property name as an object has to `providerDef`,\n        // so Closure Compiler will have renamed the property correctly already.\n        providerData.instance[propName] = value;\n        if (def.flags & 524288 /* OnChanges */) {\n            changes = changes || {};\n            var oldValue = WrappedValue.unwrap(view.oldValues[def.bindingIndex + bindingIdx]);\n            var binding_1 = def.bindings[bindingIdx];\n            changes[binding_1.nonMinifiedName] =\n                new SimpleChange(oldValue, value, (view.state & 2 /* FirstCheck */) !== 0);\n        }\n        view.oldValues[def.bindingIndex + bindingIdx] = value;\n        return changes;\n    }\n    // This function calls the ngAfterContentCheck, ngAfterContentInit,\n    // ngAfterViewCheck, and ngAfterViewInit lifecycle hooks (depending on the node\n    // flags in lifecycle). Unlike ngDoCheck, ngOnChanges and ngOnInit, which are\n    // called during a pre-order traversal of the view tree (that is calling the\n    // parent hooks before the child hooks) these events are sent in using a\n    // post-order traversal of the tree (children before parents). This changes the\n    // meaning of initIndex in the view state. For ngOnInit, initIndex tracks the\n    // expected nodeIndex which a ngOnInit should be called. When sending\n    // ngAfterContentInit and ngAfterViewInit it is the expected count of\n    // ngAfterContentInit or ngAfterViewInit methods that have been called. This\n    // ensure that despite being called recursively or after picking up after an\n    // exception, the ngAfterContentInit or ngAfterViewInit will be called on the\n    // correct nodes. Consider for example, the following (where E is an element\n    // and D is a directive)\n    //  Tree:       pre-order index  post-order index\n    //    E1        0                6\n    //      E2      1                1\n    //       D3     2                0\n    //      E4      3                5\n    //       E5     4                4\n    //        E6    5                2\n    //        E7    6                3\n    // As can be seen, the post-order index has an unclear relationship to the\n    // pre-order index (postOrderIndex === preOrderIndex - parentCount +\n    // childCount). Since number of calls to ngAfterContentInit and ngAfterViewInit\n    // are stable (will be the same for the same view regardless of exceptions or\n    // recursion) we just need to count them which will roughly correspond to the\n    // post-order index (it skips elements and directives that do not have\n    // lifecycle hooks).\n    //\n    // For example, if an exception is raised in the E6.onAfterViewInit() the\n    // initIndex is left at 3 (by shouldCallLifecycleInitHook() which set it to\n    // initIndex + 1). When checkAndUpdateView() is called again D3, E2 and E6 will\n    // not have their ngAfterViewInit() called but, starting with E7, the rest of\n    // the view will begin getting ngAfterViewInit() called until a check and\n    // pass is complete.\n    //\n    // This algorthim also handles recursion. Consider if E4's ngAfterViewInit()\n    // indirectly calls E1's ChangeDetectorRef.detectChanges(). The expected\n    // initIndex is set to 6, the recusive checkAndUpdateView() starts walk again.\n    // D3, E2, E6, E7, E5 and E4 are skipped, ngAfterViewInit() is called on E1.\n    // When the recursion returns the initIndex will be 7 so E1 is skipped as it\n    // has already been called in the recursively called checkAnUpdateView().\n    function callLifecycleHooksChildrenFirst(view, lifecycles) {\n        if (!(view.def.nodeFlags & lifecycles)) {\n            return;\n        }\n        var nodes = view.def.nodes;\n        var initIndex = 0;\n        for (var i = 0; i < nodes.length; i++) {\n            var nodeDef = nodes[i];\n            var parent_1 = nodeDef.parent;\n            if (!parent_1 && nodeDef.flags & lifecycles) {\n                // matching root node (e.g. a pipe)\n                callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);\n            }\n            if ((nodeDef.childFlags & lifecycles) === 0) {\n                // no child matches one of the lifecycles\n                i += nodeDef.childCount;\n            }\n            while (parent_1 && (parent_1.flags & 1 /* TypeElement */) &&\n                i === parent_1.nodeIndex + parent_1.childCount) {\n                // last child of an element\n                if (parent_1.directChildFlags & lifecycles) {\n                    initIndex = callElementProvidersLifecycles(view, parent_1, lifecycles, initIndex);\n                }\n                parent_1 = parent_1.parent;\n            }\n        }\n    }\n    function callElementProvidersLifecycles(view, elDef, lifecycles, initIndex) {\n        for (var i = elDef.nodeIndex + 1; i <= elDef.nodeIndex + elDef.childCount; i++) {\n            var nodeDef = view.def.nodes[i];\n            if (nodeDef.flags & lifecycles) {\n                callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);\n            }\n            // only visit direct children\n            i += nodeDef.childCount;\n        }\n        return initIndex;\n    }\n    function callProviderLifecycles(view, index, lifecycles, initIndex) {\n        var providerData = asProviderData(view, index);\n        if (!providerData) {\n            return;\n        }\n        var provider = providerData.instance;\n        if (!provider) {\n            return;\n        }\n        Services.setCurrentNode(view, index);\n        if (lifecycles & 1048576 /* AfterContentInit */ &&\n            shouldCallLifecycleInitHook(view, 512 /* InitState_CallingAfterContentInit */, initIndex)) {\n            provider.ngAfterContentInit();\n        }\n        if (lifecycles & 2097152 /* AfterContentChecked */) {\n            provider.ngAfterContentChecked();\n        }\n        if (lifecycles & 4194304 /* AfterViewInit */ &&\n            shouldCallLifecycleInitHook(view, 768 /* InitState_CallingAfterViewInit */, initIndex)) {\n            provider.ngAfterViewInit();\n        }\n        if (lifecycles & 8388608 /* AfterViewChecked */) {\n            provider.ngAfterViewChecked();\n        }\n        if (lifecycles & 131072 /* OnDestroy */) {\n            provider.ngOnDestroy();\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var ComponentFactoryResolver$1 = /** @class */ (function (_super) {\n        __extends(ComponentFactoryResolver, _super);\n        /**\n         * @param ngModule The NgModuleRef to which all resolved factories are bound.\n         */\n        function ComponentFactoryResolver(ngModule) {\n            var _this = _super.call(this) || this;\n            _this.ngModule = ngModule;\n            return _this;\n        }\n        ComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {\n            ngDevMode && assertComponentType(component);\n            var componentDef = getComponentDef(component);\n            return new ComponentFactory$1(componentDef, this.ngModule);\n        };\n        return ComponentFactoryResolver;\n    }(ComponentFactoryResolver));\n    function toRefArray(map) {\n        var array = [];\n        for (var nonMinified in map) {\n            if (map.hasOwnProperty(nonMinified)) {\n                var minified = map[nonMinified];\n                array.push({ propName: minified, templateName: nonMinified });\n            }\n        }\n        return array;\n    }\n    /**\n     * Default {@link RootContext} for all components rendered with {@link renderComponent}.\n     */\n    var ROOT_CONTEXT = new InjectionToken('ROOT_CONTEXT_TOKEN', { providedIn: 'root', factory: function () { return createRootContext(ɵɵinject(SCHEDULER)); } });\n    /**\n     * A change detection scheduler token for {@link RootContext}. This token is the default value used\n     * for the default `RootContext` found in the {@link ROOT_CONTEXT} token.\n     */\n    var SCHEDULER = new InjectionToken('SCHEDULER_TOKEN', {\n        providedIn: 'root',\n        factory: function () { return defaultScheduler; },\n    });\n    function createChainedInjector(rootViewInjector, moduleInjector) {\n        return {\n            get: function (token, notFoundValue, flags) {\n                var value = rootViewInjector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR, flags);\n                if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR ||\n                    notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\n                    // Return the value from the root element injector when\n                    // - it provides it\n                    //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n                    // - the module injector should not be checked\n                    //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n                    return value;\n                }\n                return moduleInjector.get(token, notFoundValue, flags);\n            }\n        };\n    }\n    /**\n     * Render3 implementation of {@link viewEngine_ComponentFactory}.\n     */\n    var ComponentFactory$1 = /** @class */ (function (_super) {\n        __extends(ComponentFactory, _super);\n        /**\n         * @param componentDef The component definition.\n         * @param ngModule The NgModuleRef to which the factory is bound.\n         */\n        function ComponentFactory(componentDef, ngModule) {\n            var _this = _super.call(this) || this;\n            _this.componentDef = componentDef;\n            _this.ngModule = ngModule;\n            _this.componentType = componentDef.type;\n            _this.selector = componentDef.selectors[0][0];\n            _this.ngContentSelectors =\n                componentDef.ngContentSelectors ? componentDef.ngContentSelectors : [];\n            _this.isBoundToModule = !!ngModule;\n            return _this;\n        }\n        Object.defineProperty(ComponentFactory.prototype, \"inputs\", {\n            get: function () {\n                return toRefArray(this.componentDef.inputs);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ComponentFactory.prototype, \"outputs\", {\n            get: function () {\n                return toRefArray(this.componentDef.outputs);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        ComponentFactory.prototype.create = function (injector, projectableNodes, rootSelectorOrNode, ngModule) {\n            var isInternalRootView = rootSelectorOrNode === undefined;\n            ngModule = ngModule || this.ngModule;\n            var rootViewInjector = ngModule ? createChainedInjector(injector, ngModule.injector) : injector;\n            var rendererFactory = rootViewInjector.get(RendererFactory2, domRendererFactory3);\n            var sanitizer = rootViewInjector.get(Sanitizer, null);\n            var hostRNode = isInternalRootView ?\n                elementCreate(this.selector, rendererFactory.createRenderer(null, this.componentDef)) :\n                locateHostElement(rendererFactory, rootSelectorOrNode);\n            var rootFlags = this.componentDef.onPush ? 64 /* Dirty */ | 512 /* IsRoot */ :\n                16 /* CheckAlways */ | 512 /* IsRoot */;\n            // Check whether this Component needs to be isolated from other components, i.e. whether it\n            // should be placed into its own (empty) root context or existing root context should be used.\n            // Note: this is internal-only convention and might change in the future, so it should not be\n            // relied upon externally.\n            var isIsolated = typeof rootSelectorOrNode === 'string' &&\n                /^#root-ng-internal-isolated-\\d+/.test(rootSelectorOrNode);\n            var rootContext = (isInternalRootView || isIsolated) ?\n                createRootContext() :\n                rootViewInjector.get(ROOT_CONTEXT);\n            var renderer = rendererFactory.createRenderer(hostRNode, this.componentDef);\n            if (rootSelectorOrNode && hostRNode) {\n                ngDevMode && ngDevMode.rendererSetAttribute++;\n                isProceduralRenderer(renderer) ?\n                    renderer.setAttribute(hostRNode, 'ng-version', VERSION.full) :\n                    hostRNode.setAttribute('ng-version', VERSION.full);\n            }\n            // Create the root view. Uses empty TView and ContentTemplate.\n            var rootLView = createLView(null, createTView(-1, null, 1, 0, null, null, null, null), rootContext, rootFlags, null, null, rendererFactory, renderer, sanitizer, rootViewInjector);\n            // rootView is the parent when bootstrapping\n            var oldLView = enterView(rootLView, null);\n            var component;\n            var tElementNode;\n            try {\n                var componentView = createRootComponentView(hostRNode, this.componentDef, rootLView, rendererFactory, renderer);\n                tElementNode = getTNode(0, rootLView);\n                if (projectableNodes) {\n                    // projectable nodes can be passed as array of arrays or an array of iterables (ngUpgrade\n                    // case). Here we do normalize passed data structure to be an array of arrays to avoid\n                    // complex checks down the line.\n                    tElementNode.projection =\n                        projectableNodes.map(function (nodesforSlot) { return Array.from(nodesforSlot); });\n                }\n                // TODO: should LifecycleHooksFeature and other host features be generated by the compiler and\n                // executed here?\n                // Angular 5 reference: https://stackblitz.com/edit/lifecycle-hooks-vcref\n                component = createRootComponent(componentView, this.componentDef, rootLView, rootContext, [LifecycleHooksFeature]);\n                addToViewTree(rootLView, componentView);\n                refreshDescendantViews(rootLView);\n            }\n            finally {\n                leaveView(oldLView);\n            }\n            var componentRef = new ComponentRef$1(this.componentType, component, createElementRef(ElementRef, tElementNode, rootLView), rootLView, tElementNode);\n            if (isInternalRootView) {\n                // The host element of the internal root view is attached to the component's host view node\n                componentRef.hostView._tViewNode.child = tElementNode;\n            }\n            return componentRef;\n        };\n        return ComponentFactory;\n    }(ComponentFactory));\n    var componentFactoryResolver = new ComponentFactoryResolver$1();\n    /**\n     * Represents an instance of a Component created via a {@link ComponentFactory}.\n     *\n     * `ComponentRef` provides access to the Component Instance as well other objects related to this\n     * Component Instance and allows you to destroy the Component Instance via the {@link #destroy}\n     * method.\n     *\n     */\n    var ComponentRef$1 = /** @class */ (function (_super) {\n        __extends(ComponentRef, _super);\n        function ComponentRef(componentType, instance, location, _rootLView, _tNode) {\n            var _this = _super.call(this) || this;\n            _this.location = location;\n            _this._rootLView = _rootLView;\n            _this._tNode = _tNode;\n            _this.destroyCbs = [];\n            _this.instance = instance;\n            _this.hostView = _this.changeDetectorRef = new RootViewRef(_rootLView);\n            _this.hostView._tViewNode = assignTViewNodeToLView(_rootLView[TVIEW], null, -1, _rootLView);\n            _this.componentType = componentType;\n            return _this;\n        }\n        Object.defineProperty(ComponentRef.prototype, \"injector\", {\n            get: function () { return new NodeInjector(this._tNode, this._rootLView); },\n            enumerable: true,\n            configurable: true\n        });\n        ComponentRef.prototype.destroy = function () {\n            if (this.destroyCbs) {\n                this.destroyCbs.forEach(function (fn) { return fn(); });\n                this.destroyCbs = null;\n                !this.hostView.destroyed && this.hostView.destroy();\n            }\n        };\n        ComponentRef.prototype.onDestroy = function (callback) {\n            if (this.destroyCbs) {\n                this.destroyCbs.push(callback);\n            }\n        };\n        return ComponentRef;\n    }(ComponentRef));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * NOTE: changes to the `ngI18nClosureMode` name must be synced with `compiler-cli/src/tooling.ts`.\n     */\n    if (typeof ngI18nClosureMode === 'undefined') {\n        // These property accesses can be ignored because ngI18nClosureMode will be set to false\n        // when optimizing code and the whole if statement will be dropped.\n        // Make sure to refer to ngI18nClosureMode as ['ngI18nClosureMode'] for closure.\n        // NOTE: we need to have it in IIFE so that the tree-shaker is happy.\n        (function () {\n            // tslint:disable-next-line:no-toplevel-property-access\n            _global['ngI18nClosureMode'] =\n                // TODO(FW-1250): validate that this actually, you know, works.\n                // tslint:disable-next-line:no-toplevel-property-access\n                typeof goog !== 'undefined' && typeof goog.getMsg === 'function';\n        })();\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * This const is used to store the locale data registered with `registerLocaleData`\n     */\n    var LOCALE_DATA = {};\n    (function (LocaleDataIndex) {\n        LocaleDataIndex[LocaleDataIndex[\"LocaleId\"] = 0] = \"LocaleId\";\n        LocaleDataIndex[LocaleDataIndex[\"DayPeriodsFormat\"] = 1] = \"DayPeriodsFormat\";\n        LocaleDataIndex[LocaleDataIndex[\"DayPeriodsStandalone\"] = 2] = \"DayPeriodsStandalone\";\n        LocaleDataIndex[LocaleDataIndex[\"DaysFormat\"] = 3] = \"DaysFormat\";\n        LocaleDataIndex[LocaleDataIndex[\"DaysStandalone\"] = 4] = \"DaysStandalone\";\n        LocaleDataIndex[LocaleDataIndex[\"MonthsFormat\"] = 5] = \"MonthsFormat\";\n        LocaleDataIndex[LocaleDataIndex[\"MonthsStandalone\"] = 6] = \"MonthsStandalone\";\n        LocaleDataIndex[LocaleDataIndex[\"Eras\"] = 7] = \"Eras\";\n        LocaleDataIndex[LocaleDataIndex[\"FirstDayOfWeek\"] = 8] = \"FirstDayOfWeek\";\n        LocaleDataIndex[LocaleDataIndex[\"WeekendRange\"] = 9] = \"WeekendRange\";\n        LocaleDataIndex[LocaleDataIndex[\"DateFormat\"] = 10] = \"DateFormat\";\n        LocaleDataIndex[LocaleDataIndex[\"TimeFormat\"] = 11] = \"TimeFormat\";\n        LocaleDataIndex[LocaleDataIndex[\"DateTimeFormat\"] = 12] = \"DateTimeFormat\";\n        LocaleDataIndex[LocaleDataIndex[\"NumberSymbols\"] = 13] = \"NumberSymbols\";\n        LocaleDataIndex[LocaleDataIndex[\"NumberFormats\"] = 14] = \"NumberFormats\";\n        LocaleDataIndex[LocaleDataIndex[\"CurrencySymbol\"] = 15] = \"CurrencySymbol\";\n        LocaleDataIndex[LocaleDataIndex[\"CurrencyName\"] = 16] = \"CurrencyName\";\n        LocaleDataIndex[LocaleDataIndex[\"Currencies\"] = 17] = \"Currencies\";\n        LocaleDataIndex[LocaleDataIndex[\"PluralCase\"] = 18] = \"PluralCase\";\n        LocaleDataIndex[LocaleDataIndex[\"ExtraData\"] = 19] = \"ExtraData\";\n    })(exports.ɵLocaleDataIndex || (exports.ɵLocaleDataIndex = {}));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // THIS CODE IS GENERATED - DO NOT MODIFY\n    // See angular/tools/gulp-tasks/cldr/extract.js\n    var u = undefined;\n    function plural(n) {\n        var i = Math.floor(Math.abs(n)), v = n.toString().replace(/^[^.]*\\.?/, '').length;\n        if (i === 1 && v === 0)\n            return 1;\n        return 5;\n    }\n    var localeEn = [\n        'en', [['a', 'p'], ['AM', 'PM'], u], [['AM', 'PM'], u, u],\n        [\n            ['S', 'M', 'T', 'W', 'T', 'F', 'S'], ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n            ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n            ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']\n        ],\n        u,\n        [\n            ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],\n            ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n            [\n                'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n                'October', 'November', 'December'\n            ]\n        ],\n        u, [['B', 'A'], ['BC', 'AD'], ['Before Christ', 'Anno Domini']], 0, [6, 0],\n        ['M/d/yy', 'MMM d, y', 'MMMM d, y', 'EEEE, MMMM d, y'],\n        ['h:mm a', 'h:mm:ss a', 'h:mm:ss a z', 'h:mm:ss a zzzz'], ['{1}, {0}', u, '{1} \\'at\\' {0}', u],\n        ['.', ',', ';', '%', '+', '-', 'E', '×', '‰', '∞', 'NaN', ':'],\n        ['#,##0.###', '#,##0%', '¤#,##0.00', '#E0'], '$', 'US Dollar', {}, plural\n    ];\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Retrieves the plural function used by ICU expressions to determine the plural case to use\n     * for a given locale.\n     * @param locale A locale code for the locale format rules to use.\n     * @returns The plural function for the locale.\n     * @see `NgPlural`\n     * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n     */\n    function getLocalePluralCase(locale) {\n        var data = findLocaleData(locale);\n        return data[exports.ɵLocaleDataIndex.PluralCase];\n    }\n    /**\n     * Finds the locale data for a given locale.\n     *\n     * @param locale The locale code.\n     * @returns The locale data.\n     * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n     */\n    function findLocaleData(locale) {\n        var normalizedLocale = locale.toLowerCase().replace(/_/g, '-');\n        var match = LOCALE_DATA[normalizedLocale];\n        if (match) {\n            return match;\n        }\n        // let's try to find a parent locale\n        var parentLocale = normalizedLocale.split('-')[0];\n        match = LOCALE_DATA[parentLocale];\n        if (match) {\n            return match;\n        }\n        if (parentLocale === 'en') {\n            return localeEn;\n        }\n        throw new Error(\"Missing locale data for the locale \\\"\" + locale + \"\\\".\");\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Returns the plural case based on the locale\n     */\n    function getPluralCase(value, locale) {\n        var plural = getLocalePluralCase(locale)(value);\n        switch (plural) {\n            case 0:\n                return 'zero';\n            case 1:\n                return 'one';\n            case 2:\n                return 'two';\n            case 3:\n                return 'few';\n            case 4:\n                return 'many';\n            default:\n                return 'other';\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n    * Equivalent to ES6 spread, add each item to an array.\n    *\n    * @param items The items to add\n    * @param arr The array to which you want to add the items\n    */\n    function addAllToArray(items, arr) {\n        for (var i = 0; i < items.length; i++) {\n            arr.push(items[i]);\n        }\n    }\n    /**\n     * Flattens an array.\n     */\n    function flatten(list, dst) {\n        if (dst === undefined)\n            dst = list;\n        for (var i = 0; i < list.length; i++) {\n            var item = list[i];\n            if (Array.isArray(item)) {\n                // we need to inline it.\n                if (dst === list) {\n                    // Our assumption that the list was already flat was wrong and\n                    // we need to clone flat since we need to write to it.\n                    dst = list.slice(0, i);\n                }\n                flatten(item, dst);\n            }\n            else if (dst !== list) {\n                dst.push(item);\n            }\n        }\n        return dst;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var MARKER = \"\\uFFFD\";\n    var ICU_BLOCK_REGEXP = /^\\s*(�\\d+:?\\d*�)\\s*,\\s*(select|plural)\\s*,/;\n    var SUBTEMPLATE_REGEXP = /�\\/?\\*(\\d+:\\d+)�/gi;\n    var PH_REGEXP = /�(\\/?[#*!]\\d+):?\\d*�/gi;\n    var BINDING_REGEXP = /�(\\d+):?\\d*�/gi;\n    var ICU_REGEXP = /({\\s*�\\d+:?\\d*�\\s*,\\s*\\S{6}\\s*,[\\s\\S]*})/gi;\n    // i18nPostprocess consts\n    var ROOT_TEMPLATE_ID = 0;\n    var PP_MULTI_VALUE_PLACEHOLDERS_REGEXP = /\\[(�.+?�?)\\]/;\n    var PP_PLACEHOLDERS_REGEXP = /\\[(�.+?�?)\\]|(�\\/?\\*\\d+:\\d+�)/g;\n    var PP_ICU_VARS_REGEXP = /({\\s*)(VAR_(PLURAL|SELECT)(_\\d+)?)(\\s*,)/g;\n    var PP_ICUS_REGEXP = /�I18N_EXP_(ICU(_\\d+)?)�/g;\n    var PP_CLOSE_TEMPLATE_REGEXP = /\\/\\*/;\n    var PP_TEMPLATE_ID_REGEXP = /\\d+\\:(\\d+)/;\n    /**\n     * Breaks pattern into strings and top level {...} blocks.\n     * Can be used to break a message into text and ICU expressions, or to break an ICU expression into\n     * keys and cases.\n     * Original code from closure library, modified for Angular.\n     *\n     * @param pattern (sub)Pattern to be broken.\n     *\n     */\n    function extractParts(pattern) {\n        if (!pattern) {\n            return [];\n        }\n        var prevPos = 0;\n        var braceStack = [];\n        var results = [];\n        var braces = /[{}]/g;\n        // lastIndex doesn't get set to 0 so we have to.\n        braces.lastIndex = 0;\n        var match;\n        while (match = braces.exec(pattern)) {\n            var pos = match.index;\n            if (match[0] == '}') {\n                braceStack.pop();\n                if (braceStack.length == 0) {\n                    // End of the block.\n                    var block = pattern.substring(prevPos, pos);\n                    if (ICU_BLOCK_REGEXP.test(block)) {\n                        results.push(parseICUBlock(block));\n                    }\n                    else {\n                        results.push(block);\n                    }\n                    prevPos = pos + 1;\n                }\n            }\n            else {\n                if (braceStack.length == 0) {\n                    var substring_1 = pattern.substring(prevPos, pos);\n                    results.push(substring_1);\n                    prevPos = pos + 1;\n                }\n                braceStack.push('{');\n            }\n        }\n        var substring = pattern.substring(prevPos);\n        results.push(substring);\n        return results;\n    }\n    /**\n     * Parses text containing an ICU expression and produces a JSON object for it.\n     * Original code from closure library, modified for Angular.\n     *\n     * @param pattern Text containing an ICU expression that needs to be parsed.\n     *\n     */\n    function parseICUBlock(pattern) {\n        var cases = [];\n        var values = [];\n        var icuType = 1 /* plural */;\n        var mainBinding = 0;\n        pattern = pattern.replace(ICU_BLOCK_REGEXP, function (str, binding, type) {\n            if (type === 'select') {\n                icuType = 0 /* select */;\n            }\n            else {\n                icuType = 1 /* plural */;\n            }\n            mainBinding = parseInt(binding.substr(1), 10);\n            return '';\n        });\n        var parts = extractParts(pattern);\n        // Looking for (key block)+ sequence. One of the keys has to be \"other\".\n        for (var pos = 0; pos < parts.length;) {\n            var key = parts[pos++].trim();\n            if (icuType === 1 /* plural */) {\n                // Key can be \"=x\", we just want \"x\"\n                key = key.replace(/\\s*(?:=)?(\\w+)\\s*/, '$1');\n            }\n            if (key.length) {\n                cases.push(key);\n            }\n            var blocks = extractParts(parts[pos++]);\n            if (cases.length > values.length) {\n                values.push(blocks);\n            }\n        }\n        assertGreaterThan(cases.indexOf('other'), -1, 'Missing key \"other\" in ICU statement.');\n        // TODO(ocombe): support ICU expressions in attributes, see #21615\n        return { type: icuType, mainBinding: mainBinding, cases: cases, values: values };\n    }\n    /**\n     * Removes everything inside the sub-templates of a message.\n     */\n    function removeInnerTemplateTranslation(message) {\n        var match;\n        var res = '';\n        var index = 0;\n        var inTemplate = false;\n        var tagMatched;\n        while ((match = SUBTEMPLATE_REGEXP.exec(message)) !== null) {\n            if (!inTemplate) {\n                res += message.substring(index, match.index + match[0].length);\n                tagMatched = match[1];\n                inTemplate = true;\n            }\n            else {\n                if (match[0] === MARKER + \"/*\" + tagMatched + MARKER) {\n                    index = match.index;\n                    inTemplate = false;\n                }\n            }\n        }\n        ngDevMode &&\n            assertEqual(inTemplate, false, \"Tag mismatch: unable to find the end of the sub-template in the translation \\\"\" + message + \"\\\"\");\n        res += message.substr(index);\n        return res;\n    }\n    /**\n     * Extracts a part of a message and removes the rest.\n     *\n     * This method is used for extracting a part of the message associated with a template. A translated\n     * message can span multiple templates.\n     *\n     * Example:\n     * ```\n     * <div i18n>Translate <span *ngIf>me</span>!</div>\n     * ```\n     *\n     * @param message The message to crop\n     * @param subTemplateIndex Index of the sub-template to extract. If undefined it returns the\n     * external template and removes all sub-templates.\n     */\n    function getTranslationForTemplate(message, subTemplateIndex) {\n        if (typeof subTemplateIndex !== 'number') {\n            // We want the root template message, ignore all sub-templates\n            return removeInnerTemplateTranslation(message);\n        }\n        else {\n            // We want a specific sub-template\n            var start = message.indexOf(\":\" + subTemplateIndex + MARKER) + 2 + subTemplateIndex.toString().length;\n            var end = message.search(new RegExp(MARKER + \"\\\\/\\\\*\\\\d+:\" + subTemplateIndex + MARKER));\n            return removeInnerTemplateTranslation(message.substring(start, end));\n        }\n    }\n    /**\n     * Generate the OpCodes to update the bindings of a string.\n     *\n     * @param str The string containing the bindings.\n     * @param destinationNode Index of the destination node which will receive the binding.\n     * @param attrName Name of the attribute, if the string belongs to an attribute.\n     * @param sanitizeFn Sanitization function used to sanitize the string after update, if necessary.\n     */\n    function generateBindingUpdateOpCodes(str, destinationNode, attrName, sanitizeFn) {\n        if (sanitizeFn === void 0) { sanitizeFn = null; }\n        var updateOpCodes = [null, null]; // Alloc space for mask and size\n        var textParts = str.split(BINDING_REGEXP);\n        var mask = 0;\n        for (var j = 0; j < textParts.length; j++) {\n            var textValue = textParts[j];\n            if (j & 1) {\n                // Odd indexes are bindings\n                var bindingIndex = parseInt(textValue, 10);\n                updateOpCodes.push(-1 - bindingIndex);\n                mask = mask | toMaskBit(bindingIndex);\n            }\n            else if (textValue !== '') {\n                // Even indexes are text\n                updateOpCodes.push(textValue);\n            }\n        }\n        updateOpCodes.push(destinationNode << 2 /* SHIFT_REF */ |\n            (attrName ? 1 /* Attr */ : 0 /* Text */));\n        if (attrName) {\n            updateOpCodes.push(attrName, sanitizeFn);\n        }\n        updateOpCodes[0] = mask;\n        updateOpCodes[1] = updateOpCodes.length - 2;\n        return updateOpCodes;\n    }\n    function getBindingMask(icuExpression, mask) {\n        if (mask === void 0) { mask = 0; }\n        mask = mask | toMaskBit(icuExpression.mainBinding);\n        var match;\n        for (var i = 0; i < icuExpression.values.length; i++) {\n            var valueArr = icuExpression.values[i];\n            for (var j = 0; j < valueArr.length; j++) {\n                var value = valueArr[j];\n                if (typeof value === 'string') {\n                    while (match = BINDING_REGEXP.exec(value)) {\n                        mask = mask | toMaskBit(parseInt(match[1], 10));\n                    }\n                }\n                else {\n                    mask = getBindingMask(value, mask);\n                }\n            }\n        }\n        return mask;\n    }\n    var i18nIndexStack = [];\n    var i18nIndexStackPointer = -1;\n    /**\n     * Convert binding index to mask bit.\n     *\n     * Each index represents a single bit on the bit-mask. Because bit-mask only has 32 bits, we make\n     * the 32nd bit share all masks for all bindings higher than 32. Since it is extremely rare to have\n     * more than 32 bindings this will be hit very rarely. The downside of hitting this corner case is\n     * that we will execute binding code more often than necessary. (penalty of performance)\n     */\n    function toMaskBit(bindingIndex) {\n        return 1 << Math.min(bindingIndex, 31);\n    }\n    var parentIndexStack = [];\n    /**\n     * Marks a block of text as translatable.\n     *\n     * The instructions `i18nStart` and `i18nEnd` mark the translation block in the template.\n     * The translation `message` is the value which is locale specific. The translation string may\n     * contain placeholders which associate inner elements and sub-templates within the translation.\n     *\n     * The translation `message` placeholders are:\n     * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be\n     *   interpolated into. The placeholder `index` points to the expression binding index. An optional\n     *   `block` that matches the sub-template in which it was declared.\n     * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning\n     *   and end of DOM element that were embedded in the original translation block. The placeholder\n     *   `index` points to the element index in the template instructions set. An optional `block` that\n     *   matches the sub-template in which it was declared.\n     * - `�!{index}(:{block})�`/`�/!{index}(:{block})�`: *Projection Placeholder*:  Marks the\n     *   beginning and end of <ng-content> that was embedded in the original translation block.\n     *   The placeholder `index` points to the element index in the template instructions set.\n     *   An optional `block` that matches the sub-template in which it was declared.\n     * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be\n     *   split up and translated separately in each angular template function. The `index` points to the\n     *   `template` instruction index. A `block` that matches the sub-template in which it was declared.\n     *\n     * @param index A unique index of the translation in the static block.\n     * @param message The translation message.\n     * @param subTemplateIndex Optional sub-template index in the `message`.\n     *\n     * @codeGenApi\n     */\n    function ɵɵi18nStart(index, message, subTemplateIndex) {\n        var tView = getLView()[TVIEW];\n        ngDevMode && assertDefined(tView, \"tView should be defined\");\n        i18nIndexStack[++i18nIndexStackPointer] = index;\n        // We need to delay projections until `i18nEnd`\n        setDelayProjection(true);\n        if (tView.firstTemplatePass && tView.data[index + HEADER_OFFSET] === null) {\n            i18nStartFirstPass(tView, index, message, subTemplateIndex);\n        }\n    }\n    // Count for the number of vars that will be allocated for each i18n block.\n    // It is global because this is used in multiple functions that include loops and recursive calls.\n    // This is reset to 0 when `i18nStartFirstPass` is called.\n    var i18nVarsCount;\n    /**\n     * See `i18nStart` above.\n     */\n    function i18nStartFirstPass(tView, index, message, subTemplateIndex) {\n        var viewData = getLView();\n        var startIndex = tView.blueprint.length - HEADER_OFFSET;\n        i18nVarsCount = 0;\n        var previousOrParentTNode = getPreviousOrParentTNode();\n        var parentTNode = getIsParent() ? getPreviousOrParentTNode() :\n            previousOrParentTNode && previousOrParentTNode.parent;\n        var parentIndex = parentTNode && parentTNode !== viewData[T_HOST] ? parentTNode.index - HEADER_OFFSET : index;\n        var parentIndexPointer = 0;\n        parentIndexStack[parentIndexPointer] = parentIndex;\n        var createOpCodes = [];\n        // If the previous node wasn't the direct parent then we have a translation without top level\n        // element and we need to keep a reference of the previous element if there is one\n        if (index > 0 && previousOrParentTNode !== parentTNode) {\n            // Create an OpCode to select the previous TNode\n            createOpCodes.push(previousOrParentTNode.index << 3 /* SHIFT_REF */ | 0 /* Select */);\n        }\n        var updateOpCodes = [];\n        var icuExpressions = [];\n        var templateTranslation = getTranslationForTemplate(message, subTemplateIndex);\n        var msgParts = templateTranslation.split(PH_REGEXP);\n        for (var i = 0; i < msgParts.length; i++) {\n            var value = msgParts[i];\n            if (i & 1) {\n                // Odd indexes are placeholders (elements and sub-templates)\n                if (value.charAt(0) === '/') {\n                    // It is a closing tag\n                    if (value.charAt(1) === \"#\" /* ELEMENT */) {\n                        var phIndex = parseInt(value.substr(2), 10);\n                        parentIndex = parentIndexStack[--parentIndexPointer];\n                        createOpCodes.push(phIndex << 3 /* SHIFT_REF */ | 5 /* ElementEnd */);\n                    }\n                }\n                else {\n                    var phIndex = parseInt(value.substr(1), 10);\n                    // The value represents a placeholder that we move to the designated index\n                    createOpCodes.push(phIndex << 3 /* SHIFT_REF */ | 0 /* Select */, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                    if (value.charAt(0) === \"#\" /* ELEMENT */) {\n                        parentIndexStack[++parentIndexPointer] = parentIndex = phIndex;\n                    }\n                }\n            }\n            else {\n                // Even indexes are text (including bindings & ICU expressions)\n                var parts = extractParts(value);\n                for (var j = 0; j < parts.length; j++) {\n                    if (j & 1) {\n                        // Odd indexes are ICU expressions\n                        // Create the comment node that will anchor the ICU expression\n                        var icuNodeIndex = startIndex + i18nVarsCount++;\n                        createOpCodes.push(COMMENT_MARKER, ngDevMode ? \"ICU \" + icuNodeIndex : '', icuNodeIndex, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                        // Update codes for the ICU expression\n                        var icuExpression = parts[j];\n                        var mask = getBindingMask(icuExpression);\n                        icuStart(icuExpressions, icuExpression, icuNodeIndex, icuNodeIndex);\n                        // Since this is recursive, the last TIcu that was pushed is the one we want\n                        var tIcuIndex = icuExpressions.length - 1;\n                        updateOpCodes.push(toMaskBit(icuExpression.mainBinding), // mask of the main binding\n                        3, // skip 3 opCodes if not changed\n                        -1 - icuExpression.mainBinding, icuNodeIndex << 2 /* SHIFT_REF */ | 2 /* IcuSwitch */, tIcuIndex, mask, // mask of all the bindings of this ICU expression\n                        2, // skip 2 opCodes if not changed\n                        icuNodeIndex << 2 /* SHIFT_REF */ | 3 /* IcuUpdate */, tIcuIndex);\n                    }\n                    else if (parts[j] !== '') {\n                        var text = parts[j];\n                        // Even indexes are text (including bindings)\n                        var hasBinding = text.match(BINDING_REGEXP);\n                        // Create text nodes\n                        var textNodeIndex = startIndex + i18nVarsCount++;\n                        createOpCodes.push(\n                        // If there is a binding, the value will be set during update\n                        hasBinding ? '' : text, textNodeIndex, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                        if (hasBinding) {\n                            addAllToArray(generateBindingUpdateOpCodes(text, textNodeIndex), updateOpCodes);\n                        }\n                    }\n                }\n            }\n        }\n        allocExpando(viewData, i18nVarsCount);\n        ngDevMode &&\n            attachI18nOpCodesDebug(createOpCodes, updateOpCodes, icuExpressions.length ? icuExpressions : null, viewData);\n        // NOTE: local var needed to properly assert the type of `TI18n`.\n        var tI18n = {\n            vars: i18nVarsCount,\n            create: createOpCodes,\n            update: updateOpCodes,\n            icus: icuExpressions.length ? icuExpressions : null,\n        };\n        tView.data[index + HEADER_OFFSET] = tI18n;\n    }\n    function appendI18nNode(tNode, parentTNode, previousTNode, viewData) {\n        ngDevMode && ngDevMode.rendererMoveNode++;\n        var nextNode = tNode.next;\n        if (!previousTNode) {\n            previousTNode = parentTNode;\n        }\n        // Re-organize node tree to put this node in the correct position.\n        if (previousTNode === parentTNode && tNode !== parentTNode.child) {\n            tNode.next = parentTNode.child;\n            parentTNode.child = tNode;\n        }\n        else if (previousTNode !== parentTNode && tNode !== previousTNode.next) {\n            tNode.next = previousTNode.next;\n            previousTNode.next = tNode;\n        }\n        else {\n            tNode.next = null;\n        }\n        if (parentTNode !== viewData[T_HOST]) {\n            tNode.parent = parentTNode;\n        }\n        // If tNode was moved around, we might need to fix a broken link.\n        var cursor = tNode.next;\n        while (cursor) {\n            if (cursor.next === tNode) {\n                cursor.next = nextNode;\n            }\n            cursor = cursor.next;\n        }\n        // If the placeholder to append is a projection, we need to move the projected nodes instead\n        if (tNode.type === 1 /* Projection */) {\n            var tProjectionNode = tNode;\n            appendProjectedNodes(viewData, tProjectionNode, tProjectionNode.projection, findComponentView(viewData));\n            return tNode;\n        }\n        appendChild(getNativeByTNode(tNode, viewData), tNode, viewData);\n        var slotValue = viewData[tNode.index];\n        if (tNode.type !== 0 /* Container */ && isLContainer(slotValue)) {\n            // Nodes that inject ViewContainerRef also have a comment node that should be moved\n            appendChild(slotValue[NATIVE], tNode, viewData);\n        }\n        return tNode;\n    }\n    /**\n     * Handles message string post-processing for internationalization.\n     *\n     * Handles message string post-processing by transforming it from intermediate\n     * format (that might contain some markers that we need to replace) to the final\n     * form, consumable by i18nStart instruction. Post processing steps include:\n     *\n     * 1. Resolve all multi-value cases (like [�*1:1��#2:1�|�#4:1�|�5�])\n     * 2. Replace all ICU vars (like \"VAR_PLURAL\")\n     * 3. Replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�)\n     *    in case multiple ICUs have the same placeholder name\n     *\n     * @param message Raw translation string for post processing\n     * @param replacements Set of replacements that should be applied\n     *\n     * @returns Transformed string that can be consumed by i18nStart instruction\n     *\n     * @codeGenApi\n     */\n    function ɵɵi18nPostprocess(message, replacements) {\n        if (replacements === void 0) { replacements = {}; }\n        /**\n         * Step 1: resolve all multi-value placeholders like [�#5�|�*1:1��#2:1�|�#4:1�]\n         *\n         * Note: due to the way we process nested templates (BFS), multi-value placeholders are typically\n         * grouped by templates, for example: [�#5�|�#6�|�#1:1�|�#3:2�] where �#5� and �#6� belong to root\n         * template, �#1:1� belong to nested template with index 1 and �#1:2� - nested template with index\n         * 3. However in real templates the order might be different: i.e. �#1:1� and/or �#3:2� may go in\n         * front of �#6�. The post processing step restores the right order by keeping track of the\n         * template id stack and looks for placeholders that belong to the currently active template.\n         */\n        var result = message;\n        if (PP_MULTI_VALUE_PLACEHOLDERS_REGEXP.test(message)) {\n            var matches_1 = {};\n            var templateIdsStack_1 = [ROOT_TEMPLATE_ID];\n            result = result.replace(PP_PLACEHOLDERS_REGEXP, function (m, phs, tmpl) {\n                var content = phs || tmpl;\n                var placeholders = matches_1[content] || [];\n                if (!placeholders.length) {\n                    content.split('|').forEach(function (placeholder) {\n                        var match = placeholder.match(PP_TEMPLATE_ID_REGEXP);\n                        var templateId = match ? parseInt(match[1], 10) : ROOT_TEMPLATE_ID;\n                        var isCloseTemplateTag = PP_CLOSE_TEMPLATE_REGEXP.test(placeholder);\n                        placeholders.push([templateId, isCloseTemplateTag, placeholder]);\n                    });\n                    matches_1[content] = placeholders;\n                }\n                if (!placeholders.length) {\n                    throw new Error(\"i18n postprocess: unmatched placeholder - \" + content);\n                }\n                var currentTemplateId = templateIdsStack_1[templateIdsStack_1.length - 1];\n                var idx = 0;\n                // find placeholder index that matches current template id\n                for (var i = 0; i < placeholders.length; i++) {\n                    if (placeholders[i][0] === currentTemplateId) {\n                        idx = i;\n                        break;\n                    }\n                }\n                // update template id stack based on the current tag extracted\n                var _a = __read(placeholders[idx], 3), templateId = _a[0], isCloseTemplateTag = _a[1], placeholder = _a[2];\n                if (isCloseTemplateTag) {\n                    templateIdsStack_1.pop();\n                }\n                else if (currentTemplateId !== templateId) {\n                    templateIdsStack_1.push(templateId);\n                }\n                // remove processed tag from the list\n                placeholders.splice(idx, 1);\n                return placeholder;\n            });\n        }\n        // return current result if no replacements specified\n        if (!Object.keys(replacements).length) {\n            return result;\n        }\n        /**\n         * Step 2: replace all ICU vars (like \"VAR_PLURAL\")\n         */\n        result = result.replace(PP_ICU_VARS_REGEXP, function (match, start, key, _type, _idx, end) {\n            return replacements.hasOwnProperty(key) ? \"\" + start + replacements[key] + end : match;\n        });\n        /**\n         * Step 3: replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�) in case\n         * multiple ICUs have the same placeholder name\n         */\n        result = result.replace(PP_ICUS_REGEXP, function (match, key) {\n            if (replacements.hasOwnProperty(key)) {\n                var list = replacements[key];\n                if (!list.length) {\n                    throw new Error(\"i18n postprocess: unmatched ICU - \" + match + \" with key: \" + key);\n                }\n                return list.shift();\n            }\n            return match;\n        });\n        return result;\n    }\n    /**\n     * Translates a translation block marked by `i18nStart` and `i18nEnd`. It inserts the text/ICU nodes\n     * into the render tree, moves the placeholder nodes and removes the deleted nodes.\n     *\n     * @codeGenApi\n     */\n    function ɵɵi18nEnd() {\n        var tView = getLView()[TVIEW];\n        ngDevMode && assertDefined(tView, \"tView should be defined\");\n        i18nEndFirstPass(tView);\n        // Stop delaying projections\n        setDelayProjection(false);\n    }\n    /**\n     * See `i18nEnd` above.\n     */\n    function i18nEndFirstPass(tView) {\n        var viewData = getLView();\n        ngDevMode && assertEqual(viewData[BINDING_INDEX], viewData[TVIEW].bindingStartIndex, 'i18nEnd should be called before any binding');\n        var rootIndex = i18nIndexStack[i18nIndexStackPointer--];\n        var tI18n = tView.data[rootIndex + HEADER_OFFSET];\n        ngDevMode && assertDefined(tI18n, \"You should call i18nStart before i18nEnd\");\n        // Find the last node that was added before `i18nEnd`\n        var lastCreatedNode = getPreviousOrParentTNode();\n        // Read the instructions to insert/move/remove DOM elements\n        var visitedNodes = readCreateOpCodes(rootIndex, tI18n.create, tI18n.icus, viewData);\n        // Remove deleted nodes\n        for (var i = rootIndex + 1; i <= lastCreatedNode.index - HEADER_OFFSET; i++) {\n            if (visitedNodes.indexOf(i) === -1) {\n                removeNode(i, viewData);\n            }\n        }\n    }\n    /**\n     * Creates and stores the dynamic TNode, and unhooks it from the tree for now.\n     */\n    function createDynamicNodeAtIndex(lView, index, type, native, name) {\n        var previousOrParentTNode = getPreviousOrParentTNode();\n        ngDevMode && assertDataInRange(lView, index + HEADER_OFFSET);\n        lView[index + HEADER_OFFSET] = native;\n        var tNode = getOrCreateTNode(lView[TVIEW], lView[T_HOST], index, type, name, null);\n        // We are creating a dynamic node, the previous tNode might not be pointing at this node.\n        // We will link ourselves into the tree later with `appendI18nNode`.\n        if (previousOrParentTNode.next === tNode) {\n            previousOrParentTNode.next = null;\n        }\n        return tNode;\n    }\n    function readCreateOpCodes(index, createOpCodes, icus, viewData) {\n        var renderer = getLView()[RENDERER];\n        var currentTNode = null;\n        var previousTNode = null;\n        var visitedNodes = [];\n        for (var i = 0; i < createOpCodes.length; i++) {\n            var opCode = createOpCodes[i];\n            if (typeof opCode == 'string') {\n                var textRNode = createTextNode(opCode, renderer);\n                var textNodeIndex = createOpCodes[++i];\n                ngDevMode && ngDevMode.rendererCreateTextNode++;\n                previousTNode = currentTNode;\n                currentTNode =\n                    createDynamicNodeAtIndex(viewData, textNodeIndex, 3 /* Element */, textRNode, null);\n                visitedNodes.push(textNodeIndex);\n                setIsNotParent();\n            }\n            else if (typeof opCode == 'number') {\n                switch (opCode & 7 /* MASK_OPCODE */) {\n                    case 1 /* AppendChild */:\n                        var destinationNodeIndex = opCode >>> 17 /* SHIFT_PARENT */;\n                        var destinationTNode = void 0;\n                        if (destinationNodeIndex === index) {\n                            // If the destination node is `i18nStart`, we don't have a\n                            // top-level node and we should use the host node instead\n                            destinationTNode = viewData[T_HOST];\n                        }\n                        else {\n                            destinationTNode = getTNode(destinationNodeIndex, viewData);\n                        }\n                        ngDevMode &&\n                            assertDefined(currentTNode, \"You need to create or select a node before you can insert it into the DOM\");\n                        previousTNode = appendI18nNode(currentTNode, destinationTNode, previousTNode, viewData);\n                        break;\n                    case 0 /* Select */:\n                        var nodeIndex = opCode >>> 3 /* SHIFT_REF */;\n                        visitedNodes.push(nodeIndex);\n                        previousTNode = currentTNode;\n                        currentTNode = getTNode(nodeIndex, viewData);\n                        if (currentTNode) {\n                            setPreviousOrParentTNode(currentTNode, currentTNode.type === 3 /* Element */);\n                        }\n                        break;\n                    case 5 /* ElementEnd */:\n                        var elementIndex = opCode >>> 3 /* SHIFT_REF */;\n                        previousTNode = currentTNode = getTNode(elementIndex, viewData);\n                        setPreviousOrParentTNode(currentTNode, false);\n                        break;\n                    case 4 /* Attr */:\n                        var elementNodeIndex = opCode >>> 3 /* SHIFT_REF */;\n                        var attrName = createOpCodes[++i];\n                        var attrValue = createOpCodes[++i];\n                        // This code is used for ICU expressions only, since we don't support\n                        // directives/components in ICUs, we don't need to worry about inputs here\n                        elementAttributeInternal(elementNodeIndex, attrName, attrValue, viewData);\n                        break;\n                    default:\n                        throw new Error(\"Unable to determine the type of mutate operation for \\\"\" + opCode + \"\\\"\");\n                }\n            }\n            else {\n                switch (opCode) {\n                    case COMMENT_MARKER:\n                        var commentValue = createOpCodes[++i];\n                        var commentNodeIndex = createOpCodes[++i];\n                        ngDevMode && assertEqual(typeof commentValue, 'string', \"Expected \\\"\" + commentValue + \"\\\" to be a comment node value\");\n                        var commentRNode = renderer.createComment(commentValue);\n                        ngDevMode && ngDevMode.rendererCreateComment++;\n                        previousTNode = currentTNode;\n                        currentTNode = createDynamicNodeAtIndex(viewData, commentNodeIndex, 5 /* IcuContainer */, commentRNode, null);\n                        visitedNodes.push(commentNodeIndex);\n                        attachPatchData(commentRNode, viewData);\n                        currentTNode.activeCaseIndex = null;\n                        // We will add the case nodes later, during the update phase\n                        setIsNotParent();\n                        break;\n                    case ELEMENT_MARKER:\n                        var tagNameValue = createOpCodes[++i];\n                        var elementNodeIndex = createOpCodes[++i];\n                        ngDevMode && assertEqual(typeof tagNameValue, 'string', \"Expected \\\"\" + tagNameValue + \"\\\" to be an element node tag name\");\n                        var elementRNode = renderer.createElement(tagNameValue);\n                        ngDevMode && ngDevMode.rendererCreateElement++;\n                        previousTNode = currentTNode;\n                        currentTNode = createDynamicNodeAtIndex(viewData, elementNodeIndex, 3 /* Element */, elementRNode, tagNameValue);\n                        visitedNodes.push(elementNodeIndex);\n                        break;\n                    default:\n                        throw new Error(\"Unable to determine the type of mutate operation for \\\"\" + opCode + \"\\\"\");\n                }\n            }\n        }\n        setIsNotParent();\n        return visitedNodes;\n    }\n    function readUpdateOpCodes(updateOpCodes, icus, bindingsStartIndex, changeMask, viewData, bypassCheckBit) {\n        if (bypassCheckBit === void 0) { bypassCheckBit = false; }\n        var caseCreated = false;\n        for (var i = 0; i < updateOpCodes.length; i++) {\n            // bit code to check if we should apply the next update\n            var checkBit = updateOpCodes[i];\n            // Number of opCodes to skip until next set of update codes\n            var skipCodes = updateOpCodes[++i];\n            if (bypassCheckBit || (checkBit & changeMask)) {\n                // The value has been updated since last checked\n                var value = '';\n                for (var j = i + 1; j <= (i + skipCodes); j++) {\n                    var opCode = updateOpCodes[j];\n                    if (typeof opCode == 'string') {\n                        value += opCode;\n                    }\n                    else if (typeof opCode == 'number') {\n                        if (opCode < 0) {\n                            // It's a binding index whose value is negative\n                            value += renderStringify(viewData[bindingsStartIndex - opCode]);\n                        }\n                        else {\n                            var nodeIndex = opCode >>> 2 /* SHIFT_REF */;\n                            var tIcuIndex = void 0;\n                            var tIcu = void 0;\n                            var icuTNode = void 0;\n                            switch (opCode & 3 /* MASK_OPCODE */) {\n                                case 1 /* Attr */:\n                                    var propName = updateOpCodes[++j];\n                                    var sanitizeFn = updateOpCodes[++j];\n                                    elementPropertyInternal(nodeIndex, propName, value, sanitizeFn);\n                                    break;\n                                case 0 /* Text */:\n                                    textBindingInternal(viewData, nodeIndex, value);\n                                    break;\n                                case 2 /* IcuSwitch */:\n                                    tIcuIndex = updateOpCodes[++j];\n                                    tIcu = icus[tIcuIndex];\n                                    icuTNode = getTNode(nodeIndex, viewData);\n                                    // If there is an active case, delete the old nodes\n                                    if (icuTNode.activeCaseIndex !== null) {\n                                        var removeCodes = tIcu.remove[icuTNode.activeCaseIndex];\n                                        for (var k = 0; k < removeCodes.length; k++) {\n                                            var removeOpCode = removeCodes[k];\n                                            switch (removeOpCode & 7 /* MASK_OPCODE */) {\n                                                case 3 /* Remove */:\n                                                    var nodeIndex_1 = removeOpCode >>> 3 /* SHIFT_REF */;\n                                                    removeNode(nodeIndex_1, viewData);\n                                                    break;\n                                                case 6 /* RemoveNestedIcu */:\n                                                    var nestedIcuNodeIndex = removeCodes[k + 1] >>> 3 /* SHIFT_REF */;\n                                                    var nestedIcuTNode = getTNode(nestedIcuNodeIndex, viewData);\n                                                    var activeIndex = nestedIcuTNode.activeCaseIndex;\n                                                    if (activeIndex !== null) {\n                                                        var nestedIcuTIndex = removeOpCode >>> 3 /* SHIFT_REF */;\n                                                        var nestedTIcu = icus[nestedIcuTIndex];\n                                                        addAllToArray(nestedTIcu.remove[activeIndex], removeCodes);\n                                                    }\n                                                    break;\n                                            }\n                                        }\n                                    }\n                                    // Update the active caseIndex\n                                    var caseIndex = getCaseIndex(tIcu, value);\n                                    icuTNode.activeCaseIndex = caseIndex !== -1 ? caseIndex : null;\n                                    // Add the nodes for the new case\n                                    readCreateOpCodes(-1, tIcu.create[caseIndex], icus, viewData);\n                                    caseCreated = true;\n                                    break;\n                                case 3 /* IcuUpdate */:\n                                    tIcuIndex = updateOpCodes[++j];\n                                    tIcu = icus[tIcuIndex];\n                                    icuTNode = getTNode(nodeIndex, viewData);\n                                    readUpdateOpCodes(tIcu.update[icuTNode.activeCaseIndex], icus, bindingsStartIndex, changeMask, viewData, caseCreated);\n                                    break;\n                            }\n                        }\n                    }\n                }\n            }\n            i += skipCodes;\n        }\n    }\n    function removeNode(index, viewData) {\n        var removedPhTNode = getTNode(index, viewData);\n        var removedPhRNode = getNativeByIndex(index, viewData);\n        if (removedPhRNode) {\n            nativeRemoveNode(viewData[RENDERER], removedPhRNode);\n        }\n        var slotValue = ɵɵload(index);\n        if (isLContainer(slotValue)) {\n            var lContainer = slotValue;\n            if (removedPhTNode.type !== 0 /* Container */) {\n                nativeRemoveNode(viewData[RENDERER], lContainer[NATIVE]);\n            }\n        }\n        // Define this node as detached so that we don't risk projecting it\n        removedPhTNode.flags |= 32 /* isDetached */;\n        ngDevMode && ngDevMode.rendererRemoveNode++;\n    }\n    /**\n     *\n     * Use this instruction to create a translation block that doesn't contain any placeholder.\n     * It calls both {@link i18nStart} and {@link i18nEnd} in one instruction.\n     *\n     * The translation `message` is the value which is locale specific. The translation string may\n     * contain placeholders which associate inner elements and sub-templates within the translation.\n     *\n     * The translation `message` placeholders are:\n     * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be\n     *   interpolated into. The placeholder `index` points to the expression binding index. An optional\n     *   `block` that matches the sub-template in which it was declared.\n     * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning\n     *   and end of DOM element that were embedded in the original translation block. The placeholder\n     *   `index` points to the element index in the template instructions set. An optional `block` that\n     *   matches the sub-template in which it was declared.\n     * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be\n     *   split up and translated separately in each angular template function. The `index` points to the\n     *   `template` instruction index. A `block` that matches the sub-template in which it was declared.\n     *\n     * @param index A unique index of the translation in the static block.\n     * @param message The translation message.\n     * @param subTemplateIndex Optional sub-template index in the `message`.\n     *\n     * @codeGenApi\n     */\n    function ɵɵi18n(index, message, subTemplateIndex) {\n        ɵɵi18nStart(index, message, subTemplateIndex);\n        ɵɵi18nEnd();\n    }\n    /**\n     * Marks a list of attributes as translatable.\n     *\n     * @param index A unique index in the static block\n     * @param values\n     *\n     * @codeGenApi\n     */\n    function ɵɵi18nAttributes(index, values) {\n        var tView = getLView()[TVIEW];\n        ngDevMode && assertDefined(tView, \"tView should be defined\");\n        i18nAttributesFirstPass(tView, index, values);\n    }\n    /**\n     * See `i18nAttributes` above.\n     */\n    function i18nAttributesFirstPass(tView, index, values) {\n        var previousElement = getPreviousOrParentTNode();\n        var previousElementIndex = previousElement.index - HEADER_OFFSET;\n        var updateOpCodes = [];\n        for (var i = 0; i < values.length; i += 2) {\n            var attrName = values[i];\n            var message = values[i + 1];\n            var parts = message.split(ICU_REGEXP);\n            for (var j = 0; j < parts.length; j++) {\n                var value = parts[j];\n                if (j & 1) {\n                    // Odd indexes are ICU expressions\n                    // TODO(ocombe): support ICU expressions in attributes\n                    throw new Error('ICU expressions are not yet supported in attributes');\n                }\n                else if (value !== '') {\n                    // Even indexes are text (including bindings)\n                    var hasBinding = !!value.match(BINDING_REGEXP);\n                    if (hasBinding) {\n                        if (tView.firstTemplatePass && tView.data[index + HEADER_OFFSET] === null) {\n                            addAllToArray(generateBindingUpdateOpCodes(value, previousElementIndex, attrName), updateOpCodes);\n                        }\n                    }\n                    else {\n                        var lView = getLView();\n                        elementAttributeInternal(previousElementIndex, attrName, value, lView);\n                        // Check if that attribute is a directive input\n                        var tNode = getTNode(previousElementIndex, lView);\n                        var dataValue = tNode.inputs && tNode.inputs[attrName];\n                        if (dataValue) {\n                            setInputsForProperty(lView, dataValue, value);\n                        }\n                    }\n                }\n            }\n        }\n        if (tView.firstTemplatePass && tView.data[index + HEADER_OFFSET] === null) {\n            tView.data[index + HEADER_OFFSET] = updateOpCodes;\n        }\n    }\n    var changeMask = 0;\n    var shiftsCounter = 0;\n    /**\n     * Stores the values of the bindings during each update cycle in order to determine if we need to\n     * update the translated nodes.\n     *\n     * @param value The binding's value\n     *\n     * @codeGenApi\n     */\n    function ɵɵi18nExp(value) {\n        var lView = getLView();\n        var expression = bind(lView, value);\n        if (expression !== NO_CHANGE) {\n            changeMask = changeMask | (1 << shiftsCounter);\n        }\n        shiftsCounter++;\n    }\n    /**\n     * Updates a translation block or an i18n attribute when the bindings have changed.\n     *\n     * @param index Index of either {@link i18nStart} (translation block) or {@link i18nAttributes}\n     * (i18n attribute) on which it should update the content.\n     *\n     * @codeGenApi\n     */\n    function ɵɵi18nApply(index) {\n        if (shiftsCounter) {\n            var lView = getLView();\n            var tView = lView[TVIEW];\n            ngDevMode && assertDefined(tView, \"tView should be defined\");\n            var tI18n = tView.data[index + HEADER_OFFSET];\n            var updateOpCodes = void 0;\n            var icus = null;\n            if (Array.isArray(tI18n)) {\n                updateOpCodes = tI18n;\n            }\n            else {\n                updateOpCodes = tI18n.update;\n                icus = tI18n.icus;\n            }\n            var bindingsStartIndex = lView[BINDING_INDEX] - shiftsCounter - 1;\n            readUpdateOpCodes(updateOpCodes, icus, bindingsStartIndex, changeMask, lView);\n            // Reset changeMask & maskBit to default for the next update cycle\n            changeMask = 0;\n            shiftsCounter = 0;\n        }\n    }\n    /**\n     * Returns the index of the current case of an ICU expression depending on the main binding value\n     *\n     * @param icuExpression\n     * @param bindingValue The value of the main binding used by this ICU expression\n     */\n    function getCaseIndex(icuExpression, bindingValue) {\n        var index = icuExpression.cases.indexOf(bindingValue);\n        if (index === -1) {\n            switch (icuExpression.type) {\n                case 1 /* plural */: {\n                    var resolvedCase = getPluralCase(bindingValue, getLocaleId());\n                    index = icuExpression.cases.indexOf(resolvedCase);\n                    if (index === -1 && resolvedCase !== 'other') {\n                        index = icuExpression.cases.indexOf('other');\n                    }\n                    break;\n                }\n                case 0 /* select */: {\n                    index = icuExpression.cases.indexOf('other');\n                    break;\n                }\n            }\n        }\n        return index;\n    }\n    /**\n     * Generate the OpCodes for ICU expressions.\n     *\n     * @param tIcus\n     * @param icuExpression\n     * @param startIndex\n     * @param expandoStartIndex\n     */\n    function icuStart(tIcus, icuExpression, startIndex, expandoStartIndex) {\n        var createCodes = [];\n        var removeCodes = [];\n        var updateCodes = [];\n        var vars = [];\n        var childIcus = [];\n        for (var i = 0; i < icuExpression.values.length; i++) {\n            // Each value is an array of strings & other ICU expressions\n            var valueArr = icuExpression.values[i];\n            var nestedIcus = [];\n            for (var j = 0; j < valueArr.length; j++) {\n                var value = valueArr[j];\n                if (typeof value !== 'string') {\n                    // It is an nested ICU expression\n                    var icuIndex = nestedIcus.push(value) - 1;\n                    // Replace nested ICU expression by a comment node\n                    valueArr[j] = \"<!--\\uFFFD\" + icuIndex + \"\\uFFFD-->\";\n                }\n            }\n            var icuCase = parseIcuCase(valueArr.join(''), startIndex, nestedIcus, tIcus, expandoStartIndex);\n            createCodes.push(icuCase.create);\n            removeCodes.push(icuCase.remove);\n            updateCodes.push(icuCase.update);\n            vars.push(icuCase.vars);\n            childIcus.push(icuCase.childIcus);\n        }\n        var tIcu = {\n            type: icuExpression.type,\n            vars: vars,\n            childIcus: childIcus,\n            cases: icuExpression.cases,\n            create: createCodes,\n            remove: removeCodes,\n            update: updateCodes\n        };\n        tIcus.push(tIcu);\n        // Adding the maximum possible of vars needed (based on the cases with the most vars)\n        i18nVarsCount += Math.max.apply(Math, __spread(vars));\n    }\n    /**\n     * Transforms a string template into an HTML template and a list of instructions used to update\n     * attributes or nodes that contain bindings.\n     *\n     * @param unsafeHtml The string to parse\n     * @param parentIndex\n     * @param nestedIcus\n     * @param tIcus\n     * @param expandoStartIndex\n     */\n    function parseIcuCase(unsafeHtml, parentIndex, nestedIcus, tIcus, expandoStartIndex) {\n        var inertBodyHelper = new InertBodyHelper(document);\n        var inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n        if (!inertBodyElement) {\n            throw new Error('Unable to generate inert body element');\n        }\n        var wrapper = getTemplateContent(inertBodyElement) || inertBodyElement;\n        var opCodes = { vars: 0, childIcus: [], create: [], remove: [], update: [] };\n        parseNodes(wrapper.firstChild, opCodes, parentIndex, nestedIcus, tIcus, expandoStartIndex);\n        return opCodes;\n    }\n    var NESTED_ICU = /�(\\d+)�/;\n    /**\n     * Parses a node, its children and its siblings, and generates the mutate & update OpCodes.\n     *\n     * @param currentNode The first node to parse\n     * @param icuCase The data for the ICU expression case that contains those nodes\n     * @param parentIndex Index of the current node's parent\n     * @param nestedIcus Data for the nested ICU expressions that this case contains\n     * @param tIcus Data for all ICU expressions of the current message\n     * @param expandoStartIndex Expando start index for the current ICU expression\n     */\n    function parseNodes(currentNode, icuCase, parentIndex, nestedIcus, tIcus, expandoStartIndex) {\n        if (currentNode) {\n            var nestedIcusToCreate = [];\n            while (currentNode) {\n                var nextNode = currentNode.nextSibling;\n                var newIndex = expandoStartIndex + ++icuCase.vars;\n                switch (currentNode.nodeType) {\n                    case Node.ELEMENT_NODE:\n                        var element = currentNode;\n                        var tagName = element.tagName.toLowerCase();\n                        if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\n                            // This isn't a valid element, we won't create an element for it\n                            icuCase.vars--;\n                        }\n                        else {\n                            icuCase.create.push(ELEMENT_MARKER, tagName, newIndex, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                            var elAttrs = element.attributes;\n                            for (var i = 0; i < elAttrs.length; i++) {\n                                var attr = elAttrs.item(i);\n                                var lowerAttrName = attr.name.toLowerCase();\n                                var hasBinding_1 = !!attr.value.match(BINDING_REGEXP);\n                                // we assume the input string is safe, unless it's using a binding\n                                if (hasBinding_1) {\n                                    if (VALID_ATTRS.hasOwnProperty(lowerAttrName)) {\n                                        if (URI_ATTRS[lowerAttrName]) {\n                                            addAllToArray(generateBindingUpdateOpCodes(attr.value, newIndex, attr.name, _sanitizeUrl), icuCase.update);\n                                        }\n                                        else if (SRCSET_ATTRS[lowerAttrName]) {\n                                            addAllToArray(generateBindingUpdateOpCodes(attr.value, newIndex, attr.name, sanitizeSrcset), icuCase.update);\n                                        }\n                                        else {\n                                            addAllToArray(generateBindingUpdateOpCodes(attr.value, newIndex, attr.name), icuCase.update);\n                                        }\n                                    }\n                                    else {\n                                        ngDevMode &&\n                                            console.warn(\"WARNING: ignoring unsafe attribute value \" + lowerAttrName + \" on element \" + tagName + \" (see http://g.co/ng/security#xss)\");\n                                    }\n                                }\n                                else {\n                                    icuCase.create.push(newIndex << 3 /* SHIFT_REF */ | 4 /* Attr */, attr.name, attr.value);\n                                }\n                            }\n                            // Parse the children of this node (if any)\n                            parseNodes(currentNode.firstChild, icuCase, newIndex, nestedIcus, tIcus, expandoStartIndex);\n                            // Remove the parent node after the children\n                            icuCase.remove.push(newIndex << 3 /* SHIFT_REF */ | 3 /* Remove */);\n                        }\n                        break;\n                    case Node.TEXT_NODE:\n                        var value = currentNode.textContent || '';\n                        var hasBinding = value.match(BINDING_REGEXP);\n                        icuCase.create.push(hasBinding ? '' : value, newIndex, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                        icuCase.remove.push(newIndex << 3 /* SHIFT_REF */ | 3 /* Remove */);\n                        if (hasBinding) {\n                            addAllToArray(generateBindingUpdateOpCodes(value, newIndex), icuCase.update);\n                        }\n                        break;\n                    case Node.COMMENT_NODE:\n                        // Check if the comment node is a placeholder for a nested ICU\n                        var match = NESTED_ICU.exec(currentNode.textContent || '');\n                        if (match) {\n                            var nestedIcuIndex = parseInt(match[1], 10);\n                            var newLocal = ngDevMode ? \"nested ICU \" + nestedIcuIndex : '';\n                            // Create the comment node that will anchor the ICU expression\n                            icuCase.create.push(COMMENT_MARKER, newLocal, newIndex, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                            var nestedIcu = nestedIcus[nestedIcuIndex];\n                            nestedIcusToCreate.push([nestedIcu, newIndex]);\n                        }\n                        else {\n                            // We do not handle any other type of comment\n                            icuCase.vars--;\n                        }\n                        break;\n                    default:\n                        // We do not handle any other type of element\n                        icuCase.vars--;\n                }\n                currentNode = nextNode;\n            }\n            for (var i = 0; i < nestedIcusToCreate.length; i++) {\n                var nestedIcu = nestedIcusToCreate[i][0];\n                var nestedIcuNodeIndex = nestedIcusToCreate[i][1];\n                icuStart(tIcus, nestedIcu, nestedIcuNodeIndex, expandoStartIndex + icuCase.vars);\n                // Since this is recursive, the last TIcu that was pushed is the one we want\n                var nestTIcuIndex = tIcus.length - 1;\n                icuCase.vars += Math.max.apply(Math, __spread(tIcus[nestTIcuIndex].vars));\n                icuCase.childIcus.push(nestTIcuIndex);\n                var mask = getBindingMask(nestedIcu);\n                icuCase.update.push(toMaskBit(nestedIcu.mainBinding), // mask of the main binding\n                3, // skip 3 opCodes if not changed\n                -1 - nestedIcu.mainBinding, nestedIcuNodeIndex << 2 /* SHIFT_REF */ | 2 /* IcuSwitch */, nestTIcuIndex, mask, // mask of all the bindings of this ICU expression\n                2, // skip 2 opCodes if not changed\n                nestedIcuNodeIndex << 2 /* SHIFT_REF */ | 3 /* IcuUpdate */, nestTIcuIndex);\n                icuCase.remove.push(nestTIcuIndex << 3 /* SHIFT_REF */ | 6 /* RemoveNestedIcu */, nestedIcuNodeIndex << 3 /* SHIFT_REF */ | 3 /* Remove */);\n            }\n        }\n    }\n    var TRANSLATIONS = {};\n    /**\n     * Set the configuration for `i18nLocalize`.\n     *\n     * @deprecated this method is temporary & should not be used as it will be removed soon\n     */\n    function i18nConfigureLocalize(options) {\n        if (options === void 0) { options = {\n            translations: {}\n        }; }\n        TRANSLATIONS = options.translations;\n    }\n    var LOCALIZE_PH_REGEXP = /\\{\\$(.*?)\\}/g;\n    /**\n     * A goog.getMsg-like function for users that do not use Closure.\n     *\n     * This method is required as a *temporary* measure to prevent i18n tests from being blocked while\n     * running outside of Closure Compiler. This method will not be needed once runtime translation\n     * service support is introduced.\n     *\n     * @codeGenApi\n     * @deprecated this method is temporary & should not be used as it will be removed soon\n     */\n    function ɵɵi18nLocalize(input, placeholders) {\n        if (typeof TRANSLATIONS[input] !== 'undefined') { // to account for empty string\n            input = TRANSLATIONS[input];\n        }\n        if (placeholders !== undefined && Object.keys(placeholders).length) {\n            return input.replace(LOCALIZE_PH_REGEXP, function (_, key) { return placeholders[key] || ''; });\n        }\n        return input;\n    }\n    /**\n     * The locale id that the application is currently using (for translations and ICU expressions).\n     * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine\n     * but is now defined as a global value.\n     */\n    var DEFAULT_LOCALE_ID = 'en-US';\n    var LOCALE_ID = DEFAULT_LOCALE_ID;\n    /**\n     * Sets the locale id that will be used for translations and ICU expressions.\n     * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine\n     * but is now defined as a global value.\n     *\n     * @param localeId\n     */\n    function setLocaleId(localeId) {\n        LOCALE_ID = localeId.toLowerCase().replace(/_/g, '-');\n    }\n    /**\n     * Gets the locale id that will be used for translations and ICU expressions.\n     * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine\n     * but is now defined as a global value.\n     */\n    function getLocaleId() {\n        return LOCALE_ID;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Map of module-id to the corresponding NgModule.\n     * - In pre Ivy we track NgModuleFactory,\n     * - In post Ivy we track the NgModuleType\n     */\n    var modules = new Map();\n    /**\n     * Registers a loaded module. Should only be called from generated NgModuleFactory code.\n     * @publicApi\n     */\n    function registerModuleFactory(id, factory) {\n        var existing = modules.get(id);\n        assertSameOrNotExisting(id, existing && existing.moduleType, factory.moduleType);\n        modules.set(id, factory);\n    }\n    function assertSameOrNotExisting(id, type, incoming) {\n        if (type && type !== incoming) {\n            throw new Error(\"Duplicate module registered for \" + id + \" - \" + stringify(type) + \" vs \" + stringify(type.name));\n        }\n    }\n    function registerNgModuleType(ngModuleType) {\n        if (ngModuleType.ngModuleDef.id !== null) {\n            var id = ngModuleType.ngModuleDef.id;\n            var existing = modules.get(id);\n            assertSameOrNotExisting(id, existing, ngModuleType);\n            modules.set(id, ngModuleType);\n        }\n        var imports = ngModuleType.ngModuleDef.imports;\n        if (imports instanceof Function) {\n            imports = imports();\n        }\n        if (imports) {\n            imports.forEach(function (i) { return registerNgModuleType(i); });\n        }\n    }\n    function getRegisteredNgModuleType(id) {\n        return modules.get(id);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var COMPONENT_FACTORY_RESOLVER = {\n        provide: ComponentFactoryResolver,\n        useClass: ComponentFactoryResolver$1,\n        deps: [NgModuleRef],\n    };\n    var NgModuleRef$1 = /** @class */ (function (_super) {\n        __extends(NgModuleRef$1, _super);\n        function NgModuleRef$1(ngModuleType, _parent) {\n            var _this = _super.call(this) || this;\n            _this._parent = _parent;\n            // tslint:disable-next-line:require-internal-with-underscore\n            _this._bootstrapComponents = [];\n            _this.injector = _this;\n            _this.destroyCbs = [];\n            var ngModuleDef = getNgModuleDef(ngModuleType);\n            ngDevMode && assertDefined(ngModuleDef, \"NgModule '\" + stringify(ngModuleType) + \"' is not a subtype of 'NgModuleType'.\");\n            var ngLocaleIdDef = getNgLocaleIdDef(ngModuleType);\n            if (ngLocaleIdDef) {\n                setLocaleId(ngLocaleIdDef);\n            }\n            _this._bootstrapComponents = maybeUnwrapFn(ngModuleDef.bootstrap);\n            var additionalProviders = [\n                {\n                    provide: NgModuleRef,\n                    useValue: _this,\n                },\n                COMPONENT_FACTORY_RESOLVER\n            ];\n            _this._r3Injector = createInjector(ngModuleType, _parent, additionalProviders, stringify(ngModuleType));\n            _this.instance = _this.get(ngModuleType);\n            return _this;\n        }\n        NgModuleRef$1.prototype.get = function (token, notFoundValue, injectFlags) {\n            if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n            if (injectFlags === void 0) { injectFlags = exports.InjectFlags.Default; }\n            if (token === Injector || token === NgModuleRef || token === INJECTOR) {\n                return this;\n            }\n            return this._r3Injector.get(token, notFoundValue, injectFlags);\n        };\n        Object.defineProperty(NgModuleRef$1.prototype, \"componentFactoryResolver\", {\n            get: function () {\n                return this.get(ComponentFactoryResolver);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        NgModuleRef$1.prototype.destroy = function () {\n            ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n            var injector = this._r3Injector;\n            !injector.destroyed && injector.destroy();\n            this.destroyCbs.forEach(function (fn) { return fn(); });\n            this.destroyCbs = null;\n        };\n        NgModuleRef$1.prototype.onDestroy = function (callback) {\n            ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n            this.destroyCbs.push(callback);\n        };\n        return NgModuleRef$1;\n    }(NgModuleRef));\n    var NgModuleFactory$1 = /** @class */ (function (_super) {\n        __extends(NgModuleFactory, _super);\n        function NgModuleFactory(moduleType) {\n            var _this = _super.call(this) || this;\n            _this.moduleType = moduleType;\n            var ngModuleDef = getNgModuleDef(moduleType);\n            if (ngModuleDef !== null) {\n                // Register the NgModule with Angular's module registry. The location (and hence timing) of\n                // this call is critical to ensure this works correctly (modules get registered when expected)\n                // without bloating bundles (modules are registered when otherwise not referenced).\n                //\n                // In View Engine, registration occurs in the .ngfactory.js file as a side effect. This has\n                // several practical consequences:\n                //\n                // - If an .ngfactory file is not imported from, the module won't be registered (and can be\n                //   tree shaken).\n                // - If an .ngfactory file is imported from, the module will be registered even if an instance\n                //   is not actually created (via `create` below).\n                // - Since an .ngfactory file in View Engine references the .ngfactory files of the NgModule's\n                //   imports,\n                //\n                // In Ivy, things are a bit different. .ngfactory files still exist for compatibility, but are\n                // not a required API to use - there are other ways to obtain an NgModuleFactory for a given\n                // NgModule. Thus, relying on a side effect in the .ngfactory file is not sufficient. Instead,\n                // the side effect of registration is added here, in the constructor of NgModuleFactory,\n                // ensuring no matter how a factory is created, the module is registered correctly.\n                //\n                // An alternative would be to include the registration side effect inline following the actual\n                // NgModule definition. This also has the correct timing, but breaks tree-shaking - modules\n                // will be registered and retained even if they're otherwise never referenced.\n                registerNgModuleType(moduleType);\n            }\n            return _this;\n        }\n        NgModuleFactory.prototype.create = function (parentInjector) {\n            return new NgModuleRef$1(this.moduleType, parentInjector);\n        };\n        return NgModuleFactory;\n    }(NgModuleFactory));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Adds decorator, constructor, and property metadata to a given type via static metadata fields\n     * on the type.\n     *\n     * These metadata fields can later be read with Angular's `ReflectionCapabilities` API.\n     *\n     * Calls to `setClassMetadata` can be marked as pure, resulting in the metadata assignments being\n     * tree-shaken away during production builds.\n     */\n    function setClassMetadata(type, decorators, ctorParameters, propDecorators) {\n        return noSideEffects(function () {\n            var _a;\n            var clazz = type;\n            // We determine whether a class has its own metadata by taking the metadata from the parent\n            // constructor and checking whether it's the same as the subclass metadata below. We can't use\n            // `hasOwnProperty` here because it doesn't work correctly in IE10 for static fields that are\n            // defined by TS. See https://github.com/angular/angular/pull/28439#issuecomment-459349218.\n            var parentPrototype = clazz.prototype ? Object.getPrototypeOf(clazz.prototype) : null;\n            var parentConstructor = parentPrototype && parentPrototype.constructor;\n            if (decorators !== null) {\n                if (clazz.decorators !== undefined &&\n                    (!parentConstructor || parentConstructor.decorators !== clazz.decorators)) {\n                    (_a = clazz.decorators).push.apply(_a, __spread(decorators));\n                }\n                else {\n                    clazz.decorators = decorators;\n                }\n            }\n            if (ctorParameters !== null) {\n                // Rather than merging, clobber the existing parameters. If other projects exist which use\n                // tsickle-style annotations and reflect over them in the same way, this could cause issues,\n                // but that is vanishingly unlikely.\n                clazz.ctorParameters = ctorParameters;\n            }\n            if (propDecorators !== null) {\n                // The property decorator objects are merged as it is possible different fields have different\n                // decorator types. Decorators on individual fields are not merged, as it's also incredibly\n                // unlikely that a field will be decorated both with an Angular decorator and a non-Angular\n                // decorator that's also been downleveled.\n                if (clazz.propDecorators !== undefined &&\n                    (!parentConstructor || parentConstructor.propDecorators !== clazz.propDecorators)) {\n                    clazz.propDecorators = __assign({}, clazz.propDecorators, propDecorators);\n                }\n                else {\n                    clazz.propDecorators = propDecorators;\n                }\n            }\n        });\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Bindings for pure functions are stored after regular bindings.\n     *\n     * |------consts------|---------vars---------|                 |----- hostVars (dir1) ------|\n     * ------------------------------------------------------------------------------------------\n     * | nodes/refs/pipes | bindings | fn slots  | injector | dir1 | host bindings | host slots |\n     * ------------------------------------------------------------------------------------------\n     *                    ^                      ^\n     *      TView.bindingStartIndex      TView.expandoStartIndex\n     *\n     * Pure function instructions are given an offset from the binding root. Adding the offset to the\n     * binding root gives the first index where the bindings are stored. In component views, the binding\n     * root is the bindingStartIndex. In host bindings, the binding root is the expandoStartIndex +\n     * any directive instances + any hostVars in directives evaluated before it.\n     *\n     * See VIEW_DATA.md for more information about host binding resolution.\n     */\n    /**\n     * If the value hasn't been saved, calls the pure function to store and return the\n     * value. If it has been saved, returns the saved value.\n     *\n     * @param slotOffset the offset from binding root to the reserved slot\n     * @param pureFn Function that returns a value\n     * @param thisArg Optional calling context of pureFn\n     * @returns value\n     *\n     * @codeGenApi\n     */\n    function ɵɵpureFunction0(slotOffset, pureFn, thisArg) {\n        // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n        var bindingIndex = getBindingRoot() + slotOffset;\n        var lView = getLView();\n        return isCreationMode() ?\n            updateBinding(lView, bindingIndex, thisArg ? pureFn.call(thisArg) : pureFn()) :\n            getBinding(lView, bindingIndex);\n    }\n    /**\n     * If the value of the provided exp has changed, calls the pure function to return\n     * an updated value. Or if the value has not changed, returns cached value.\n     *\n     * @param slotOffset the offset from binding root to the reserved slot\n     * @param pureFn Function that returns an updated value\n     * @param exp Updated expression value\n     * @param thisArg Optional calling context of pureFn\n     * @returns Updated or cached value\n     *\n     * @codeGenApi\n     */\n    function ɵɵpureFunction1(slotOffset, pureFn, exp, thisArg) {\n        // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n        var lView = getLView();\n        var bindingIndex = getBindingRoot() + slotOffset;\n        return bindingUpdated(lView, bindingIndex, exp) ?\n            updateBinding(lView, bindingIndex + 1, thisArg ? pureFn.call(thisArg, exp) : pureFn(exp)) :\n            getBinding(lView, bindingIndex + 1);\n    }\n    /**\n     * If the value of any provided exp has changed, calls the pure function to return\n     * an updated value. Or if no values have changed, returns cached value.\n     *\n     * @param slotOffset the offset from binding root to the reserved slot\n     * @param pureFn\n     * @param exp1\n     * @param exp2\n     * @param thisArg Optional calling context of pureFn\n     * @returns Updated or cached value\n     *\n     * @codeGenApi\n     */\n    function ɵɵpureFunction2(slotOffset, pureFn, exp1, exp2, thisArg) {\n        // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n        var bindingIndex = getBindingRoot() + slotOffset;\n        var lView = getLView();\n        return bindingUpdated2(lView, bindingIndex, exp1, exp2) ?\n            updateBinding(lView, bindingIndex + 2, thisArg ? pureFn.call(thisArg, exp1, exp2) : pureFn(exp1, exp2)) :\n            getBinding(lView, bindingIndex + 2);\n    }\n    /**\n     * If the value of any provided exp has changed, calls the pure function to return\n     * an updated value. Or if no values have changed, returns cached value.\n     *\n     * @param slotOffset the offset from binding root to the reserved slot\n     * @param pureFn\n     * @param exp1\n     * @param exp2\n     * @param exp3\n     * @param thisArg Optional calling context of pureFn\n     * @returns Updated or cached value\n     *\n     * @codeGenApi\n     */\n    function ɵɵpureFunction3(slotOffset, pureFn, exp1, exp2, exp3, thisArg) {\n        // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n        var bindingIndex = getBindingRoot() + slotOffset;\n        var lView = getLView();\n        return bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) ?\n            updateBinding(lView, bindingIndex + 3, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3) : pureFn(exp1, exp2, exp3)) :\n            getBinding(lView, bindingIndex + 3);\n    }\n    /**\n     * If the value of any provided exp has changed, calls the pure function to return\n     * an updated value. Or if no values have changed, returns cached value.\n     *\n     * @param slotOffset the offset from binding root to the reserved slot\n     * @param pureFn\n     * @param exp1\n     * @param exp2\n     * @param exp3\n     * @param exp4\n     * @param thisArg Optional calling context of pureFn\n     * @returns Updated or cached value\n     *\n     * @codeGenApi\n     */\n    function ɵɵpureFunction4(slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {\n        // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n        var bindingIndex = getBindingRoot() + slotOffset;\n        var lView = getLView();\n        return bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) ?\n            updateBinding(lView, bindingIndex + 4, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4) : pureFn(exp1, exp2, exp3, exp4)) :\n            getBinding(lView, bindingIndex + 4);\n    }\n    /**\n     * If the value of any provided exp has changed, calls the pure function to return\n     * an updated value. Or if no values have changed, returns cached value.\n     *\n     * @param slotOffset the offset from binding root to the reserved slot\n     * @param pureFn\n     * @param exp1\n     * @param exp2\n     * @param exp3\n     * @param exp4\n     * @param exp5\n     * @param thisArg Optional calling context of pureFn\n     * @returns Updated or cached value\n     *\n     * @codeGenApi\n     */\n    function ɵɵpureFunction5(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, thisArg) {\n        // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n        var bindingIndex = getBindingRoot() + slotOffset;\n        var lView = getLView();\n        var different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n        return bindingUpdated(lView, bindingIndex + 4, exp5) || different ?\n            updateBinding(lView, bindingIndex + 5, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5) :\n                pureFn(exp1, exp2, exp3, exp4, exp5)) :\n            getBinding(lView, bindingIndex + 5);\n    }\n    /**\n     * If the value of any provided exp has changed, calls the pure function to return\n     * an updated value. Or if no values have changed, returns cached value.\n     *\n     * @param slotOffset the offset from binding root to the reserved slot\n     * @param pureFn\n     * @param exp1\n     * @param exp2\n     * @param exp3\n     * @param exp4\n     * @param exp5\n     * @param exp6\n     * @param thisArg Optional calling context of pureFn\n     * @returns Updated or cached value\n     *\n     * @codeGenApi\n     */\n    function ɵɵpureFunction6(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, thisArg) {\n        // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n        var bindingIndex = getBindingRoot() + slotOffset;\n        var lView = getLView();\n        var different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n        return bindingUpdated2(lView, bindingIndex + 4, exp5, exp6) || different ?\n            updateBinding(lView, bindingIndex + 6, thisArg ?\n                pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6) :\n                pureFn(exp1, exp2, exp3, exp4, exp5, exp6)) :\n            getBinding(lView, bindingIndex + 6);\n    }\n    /**\n     * If the value of any provided exp has changed, calls the pure function to return\n     * an updated value. Or if no values have changed, returns cached value.\n     *\n     * @param slotOffset the offset from binding root to the reserved slot\n     * @param pureFn\n     * @param exp1\n     * @param exp2\n     * @param exp3\n     * @param exp4\n     * @param exp5\n     * @param exp6\n     * @param exp7\n     * @param thisArg Optional calling context of pureFn\n     * @returns Updated or cached value\n     *\n     * @codeGenApi\n     */\n    function ɵɵpureFunction7(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, thisArg) {\n        // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n        var bindingIndex = getBindingRoot() + slotOffset;\n        var lView = getLView();\n        var different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n        return bindingUpdated3(lView, bindingIndex + 4, exp5, exp6, exp7) || different ?\n            updateBinding(lView, bindingIndex + 7, thisArg ?\n                pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7) :\n                pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7)) :\n            getBinding(lView, bindingIndex + 7);\n    }\n    /**\n     * If the value of any provided exp has changed, calls the pure function to return\n     * an updated value. Or if no values have changed, returns cached value.\n     *\n     * @param slotOffset the offset from binding root to the reserved slot\n     * @param pureFn\n     * @param exp1\n     * @param exp2\n     * @param exp3\n     * @param exp4\n     * @param exp5\n     * @param exp6\n     * @param exp7\n     * @param exp8\n     * @param thisArg Optional calling context of pureFn\n     * @returns Updated or cached value\n     *\n     * @codeGenApi\n     */\n    function ɵɵpureFunction8(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8, thisArg) {\n        // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n        var bindingIndex = getBindingRoot() + slotOffset;\n        var lView = getLView();\n        var different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n        return bindingUpdated4(lView, bindingIndex + 4, exp5, exp6, exp7, exp8) || different ?\n            updateBinding(lView, bindingIndex + 8, thisArg ?\n                pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8) :\n                pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8)) :\n            getBinding(lView, bindingIndex + 8);\n    }\n    /**\n     * pureFunction instruction that can support any number of bindings.\n     *\n     * If the value of any provided exp has changed, calls the pure function to return\n     * an updated value. Or if no values have changed, returns cached value.\n     *\n     * @param slotOffset the offset from binding root to the reserved slot\n     * @param pureFn A pure function that takes binding values and builds an object or array\n     * containing those values.\n     * @param exps An array of binding values\n     * @param thisArg Optional calling context of pureFn\n     * @returns Updated or cached value\n     *\n     * @codeGenApi\n     */\n    function ɵɵpureFunctionV(slotOffset, pureFn, exps, thisArg) {\n        // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n        var bindingIndex = getBindingRoot() + slotOffset;\n        var different = false;\n        var lView = getLView();\n        for (var i = 0; i < exps.length; i++) {\n            bindingUpdated(lView, bindingIndex++, exps[i]) && (different = true);\n        }\n        return different ? updateBinding(lView, bindingIndex, pureFn.apply(thisArg, exps)) :\n            getBinding(lView, bindingIndex);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Create a pipe.\n     *\n     * @param index Pipe index where the pipe will be stored.\n     * @param pipeName The name of the pipe\n     * @returns T the instance of the pipe.\n     *\n     * @codeGenApi\n     */\n    function ɵɵpipe(index, pipeName) {\n        var tView = getLView()[TVIEW];\n        var pipeDef;\n        var adjustedIndex = index + HEADER_OFFSET;\n        if (tView.firstTemplatePass) {\n            pipeDef = getPipeDef$1(pipeName, tView.pipeRegistry);\n            tView.data[adjustedIndex] = pipeDef;\n            if (pipeDef.onDestroy) {\n                (tView.destroyHooks || (tView.destroyHooks = [])).push(adjustedIndex, pipeDef.onDestroy);\n            }\n        }\n        else {\n            pipeDef = tView.data[adjustedIndex];\n        }\n        var pipeInstance = pipeDef.factory();\n        store(index, pipeInstance);\n        return pipeInstance;\n    }\n    /**\n     * Searches the pipe registry for a pipe with the given name. If one is found,\n     * returns the pipe. Otherwise, an error is thrown because the pipe cannot be resolved.\n     *\n     * @param name Name of pipe to resolve\n     * @param registry Full list of available pipes\n     * @returns Matching PipeDef\n     *\n     * @publicApi\n     */\n    function getPipeDef$1(name, registry) {\n        if (registry) {\n            for (var i = registry.length - 1; i >= 0; i--) {\n                var pipeDef = registry[i];\n                if (name === pipeDef.name) {\n                    return pipeDef;\n                }\n            }\n        }\n        throw new Error(\"The pipe '\" + name + \"' could not be found!\");\n    }\n    /**\n     * Invokes a pipe with 1 arguments.\n     *\n     * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n     * the pipe only when an input to the pipe changes.\n     *\n     * @param index Pipe index where the pipe was stored on creation.\n     * @param slotOffset the offset in the reserved slot space\n     * @param v1 1st argument to {@link PipeTransform#transform}.\n     *\n     * @codeGenApi\n     */\n    function ɵɵpipeBind1(index, slotOffset, v1) {\n        var pipeInstance = ɵɵload(index);\n        return unwrapValue$1(isPure(index) ? ɵɵpureFunction1(slotOffset, pipeInstance.transform, v1, pipeInstance) :\n            pipeInstance.transform(v1));\n    }\n    /**\n     * Invokes a pipe with 2 arguments.\n     *\n     * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n     * the pipe only when an input to the pipe changes.\n     *\n     * @param index Pipe index where the pipe was stored on creation.\n     * @param slotOffset the offset in the reserved slot space\n     * @param v1 1st argument to {@link PipeTransform#transform}.\n     * @param v2 2nd argument to {@link PipeTransform#transform}.\n     *\n     * @codeGenApi\n     */\n    function ɵɵpipeBind2(index, slotOffset, v1, v2) {\n        var pipeInstance = ɵɵload(index);\n        return unwrapValue$1(isPure(index) ? ɵɵpureFunction2(slotOffset, pipeInstance.transform, v1, v2, pipeInstance) :\n            pipeInstance.transform(v1, v2));\n    }\n    /**\n     * Invokes a pipe with 3 arguments.\n     *\n     * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n     * the pipe only when an input to the pipe changes.\n     *\n     * @param index Pipe index where the pipe was stored on creation.\n     * @param slotOffset the offset in the reserved slot space\n     * @param v1 1st argument to {@link PipeTransform#transform}.\n     * @param v2 2nd argument to {@link PipeTransform#transform}.\n     * @param v3 4rd argument to {@link PipeTransform#transform}.\n     *\n     * @codeGenApi\n     */\n    function ɵɵpipeBind3(index, slotOffset, v1, v2, v3) {\n        var pipeInstance = ɵɵload(index);\n        return unwrapValue$1(isPure(index) ?\n            ɵɵpureFunction3(slotOffset, pipeInstance.transform, v1, v2, v3, pipeInstance) :\n            pipeInstance.transform(v1, v2, v3));\n    }\n    /**\n     * Invokes a pipe with 4 arguments.\n     *\n     * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n     * the pipe only when an input to the pipe changes.\n     *\n     * @param index Pipe index where the pipe was stored on creation.\n     * @param slotOffset the offset in the reserved slot space\n     * @param v1 1st argument to {@link PipeTransform#transform}.\n     * @param v2 2nd argument to {@link PipeTransform#transform}.\n     * @param v3 3rd argument to {@link PipeTransform#transform}.\n     * @param v4 4th argument to {@link PipeTransform#transform}.\n     *\n     * @codeGenApi\n     */\n    function ɵɵpipeBind4(index, slotOffset, v1, v2, v3, v4) {\n        var pipeInstance = ɵɵload(index);\n        return unwrapValue$1(isPure(index) ?\n            ɵɵpureFunction4(slotOffset, pipeInstance.transform, v1, v2, v3, v4, pipeInstance) :\n            pipeInstance.transform(v1, v2, v3, v4));\n    }\n    /**\n     * Invokes a pipe with variable number of arguments.\n     *\n     * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n     * the pipe only when an input to the pipe changes.\n     *\n     * @param index Pipe index where the pipe was stored on creation.\n     * @param slotOffset the offset in the reserved slot space\n     * @param values Array of arguments to pass to {@link PipeTransform#transform} method.\n     *\n     * @codeGenApi\n     */\n    function ɵɵpipeBindV(index, slotOffset, values) {\n        var pipeInstance = ɵɵload(index);\n        return unwrapValue$1(isPure(index) ? ɵɵpureFunctionV(slotOffset, pipeInstance.transform, values, pipeInstance) :\n            pipeInstance.transform.apply(pipeInstance, values));\n    }\n    function isPure(index) {\n        return getLView()[TVIEW].data[index + HEADER_OFFSET].pure;\n    }\n    /**\n     * Unwrap the output of a pipe transformation.\n     * In order to trick change detection into considering that the new value is always different from\n     * the old one, the old value is overwritten by NO_CHANGE.\n     *\n     * @param newValue the pipe transformation output.\n     */\n    function unwrapValue$1(newValue) {\n        if (WrappedValue.isWrapped(newValue)) {\n            newValue = WrappedValue.unwrap(newValue);\n            var lView = getLView();\n            // The NO_CHANGE value needs to be written at the index where the impacted binding value is\n            // stored\n            var bindingToInvalidateIdx = lView[BINDING_INDEX];\n            lView[bindingToInvalidateIdx] = NO_CHANGE;\n        }\n        return newValue;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Use in directives and components to emit custom events synchronously\n     * or asynchronously, and register handlers for those events by subscribing\n     * to an instance.\n     *\n     * @usageNotes\n     *\n     * In the following example, a component defines two output properties\n     * that create event emitters. When the title is clicked, the emitter\n     * emits an open or close event to toggle the current visibility state.\n     *\n     * ```\n     * @Component({\n     *   selector: 'zippy',\n     *   template: `\n     *   <div class=\"zippy\">\n     *     <div (click)=\"toggle()\">Toggle</div>\n     *     <div [hidden]=\"!visible\">\n     *       <ng-content></ng-content>\n     *     </div>\n     *  </div>`})\n     * export class Zippy {\n     *   visible: boolean = true;\n     *   @Output() open: EventEmitter<any> = new EventEmitter();\n     *   @Output() close: EventEmitter<any> = new EventEmitter();\n     *\n     *   toggle() {\n     *     this.visible = !this.visible;\n     *     if (this.visible) {\n     *       this.open.emit(null);\n     *     } else {\n     *       this.close.emit(null);\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * Access the event object with the `$event` argument passed to the output event\n     * handler:\n     *\n     * ```\n     * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n     * ```\n     *\n     * ### Notes\n     *\n     * Uses Rx.Observable but provides an adapter to make it work as specified here:\n     * https://github.com/jhusain/observable-spec\n     *\n     * Once a reference implementation of the spec is available, switch to it.\n     *\n     * @publicApi\n     */\n    var EventEmitter = /** @class */ (function (_super) {\n        __extends(EventEmitter, _super);\n        /**\n         * Creates an instance of this class that can\n         * deliver events synchronously or asynchronously.\n         *\n         * @param isAsync When true, deliver events asynchronously.\n         *\n         */\n        function EventEmitter(isAsync) {\n            if (isAsync === void 0) { isAsync = false; }\n            var _this = _super.call(this) || this;\n            _this.__isAsync = isAsync;\n            return _this;\n        }\n        /**\n         * Emits an event containing a given value.\n         * @param value The value to emit.\n         */\n        EventEmitter.prototype.emit = function (value) { _super.prototype.next.call(this, value); };\n        /**\n         * Registers handlers for events emitted by this instance.\n         * @param generatorOrNext When supplied, a custom handler for emitted events.\n         * @param error When supplied, a custom handler for an error notification\n         * from this emitter.\n         * @param complete When supplied, a custom handler for a completion\n         * notification from this emitter.\n         */\n        EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {\n            var schedulerFn;\n            var errorFn = function (err) { return null; };\n            var completeFn = function () { return null; };\n            if (generatorOrNext && typeof generatorOrNext === 'object') {\n                schedulerFn = this.__isAsync ? function (value) {\n                    setTimeout(function () { return generatorOrNext.next(value); });\n                } : function (value) { generatorOrNext.next(value); };\n                if (generatorOrNext.error) {\n                    errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :\n                        function (err) { generatorOrNext.error(err); };\n                }\n                if (generatorOrNext.complete) {\n                    completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :\n                        function () { generatorOrNext.complete(); };\n                }\n            }\n            else {\n                schedulerFn = this.__isAsync ? function (value) { setTimeout(function () { return generatorOrNext(value); }); } :\n                    function (value) { generatorOrNext(value); };\n                if (error) {\n                    errorFn =\n                        this.__isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };\n                }\n                if (complete) {\n                    completeFn =\n                        this.__isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };\n                }\n            }\n            var sink = _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);\n            if (generatorOrNext instanceof rxjs.Subscription) {\n                generatorOrNext.add(sink);\n            }\n            return sink;\n        };\n        return EventEmitter;\n    }(rxjs.Subject));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function symbolIterator() {\n        return this._results[getSymbolIterator()]();\n    }\n    /**\n     * An unmodifiable list of items that Angular keeps up to date when the state\n     * of the application changes.\n     *\n     * The type of object that {@link ViewChildren}, {@link ContentChildren}, and {@link QueryList}\n     * provide.\n     *\n     * Implements an iterable interface, therefore it can be used in both ES6\n     * javascript `for (var i of items)` loops as well as in Angular templates with\n     * `*ngFor=\"let i of myList\"`.\n     *\n     * Changes can be observed by subscribing to the changes `Observable`.\n     *\n     * NOTE: In the future this class will implement an `Observable` interface.\n     *\n     * @usageNotes\n     * ### Example\n     * ```typescript\n     * @Component({...})\n     * class Container {\n     *   @ViewChildren(Item) items:QueryList<Item>;\n     * }\n     * ```\n     *\n     * @publicApi\n     */\n    var QueryList = /** @class */ (function () {\n        function QueryList() {\n            this.dirty = true;\n            this._results = [];\n            this.changes = new EventEmitter();\n            this.length = 0;\n            // This function should be declared on the prototype, but doing so there will cause the class\n            // declaration to have side-effects and become not tree-shakable. For this reason we do it in\n            // the constructor.\n            // [getSymbolIterator()](): Iterator<T> { ... }\n            var symbol = getSymbolIterator();\n            var proto = QueryList.prototype;\n            if (!proto[symbol])\n                proto[symbol] = symbolIterator;\n        }\n        /**\n         * See\n         * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n         */\n        QueryList.prototype.map = function (fn) { return this._results.map(fn); };\n        /**\n         * See\n         * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n         */\n        QueryList.prototype.filter = function (fn) {\n            return this._results.filter(fn);\n        };\n        /**\n         * See\n         * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n         */\n        QueryList.prototype.find = function (fn) {\n            return this._results.find(fn);\n        };\n        /**\n         * See\n         * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n         */\n        QueryList.prototype.reduce = function (fn, init) {\n            return this._results.reduce(fn, init);\n        };\n        /**\n         * See\n         * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n         */\n        QueryList.prototype.forEach = function (fn) { this._results.forEach(fn); };\n        /**\n         * See\n         * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n         */\n        QueryList.prototype.some = function (fn) {\n            return this._results.some(fn);\n        };\n        /**\n         * Returns a copy of the internal results list as an Array.\n         */\n        QueryList.prototype.toArray = function () { return this._results.slice(); };\n        QueryList.prototype.toString = function () { return this._results.toString(); };\n        /**\n         * Updates the stored data of the query list, and resets the `dirty` flag to `false`, so that\n         * on change detection, it will not notify of changes to the queries, unless a new change\n         * occurs.\n         *\n         * @param resultsTree The results tree to store\n         */\n        QueryList.prototype.reset = function (resultsTree) {\n            this._results = flatten(resultsTree);\n            this.dirty = false;\n            this.length = this._results.length;\n            this.last = this._results[this.length - 1];\n            this.first = this._results[0];\n        };\n        /**\n         * Triggers a change event by emitting on the `changes` {@link EventEmitter}.\n         */\n        QueryList.prototype.notifyOnChanges = function () { this.changes.emit(this); };\n        /** internal */\n        QueryList.prototype.setDirty = function () { this.dirty = true; };\n        /** internal */\n        QueryList.prototype.destroy = function () {\n            this.changes.complete();\n            this.changes.unsubscribe();\n        };\n        return QueryList;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * An object representing a query, which is a combination of:\n     * - query predicate to determines if a given element/directive should be included in the query\n     * - values collected based on a predicate\n     * - `QueryList` to which collected values should be reported\n     */\n    var LQuery = /** @class */ (function () {\n        function LQuery(\n        /**\n         * Next query. Used when queries are stored as a linked list in `LQueries`.\n         */\n        next, \n        /**\n         * Destination to which the value should be added.\n         */\n        list, \n        /**\n         * A predicate which determines if a given element/directive should be included in the query\n         * results.\n         */\n        predicate, \n        /**\n         * Values which have been located.\n         * This is what builds up the `QueryList._valuesTree`.\n         */\n        values, \n        /**\n         * A pointer to an array that stores collected values from views. This is necessary so we\n         * know a container into which to insert nodes collected from views.\n         */\n        containerValues) {\n            this.next = next;\n            this.list = list;\n            this.predicate = predicate;\n            this.values = values;\n            this.containerValues = containerValues;\n        }\n        return LQuery;\n    }());\n    var LQueries_ = /** @class */ (function () {\n        function LQueries_(parent, shallow, deep, nodeIndex) {\n            if (nodeIndex === void 0) { nodeIndex = -1; }\n            this.parent = parent;\n            this.shallow = shallow;\n            this.deep = deep;\n            this.nodeIndex = nodeIndex;\n        }\n        LQueries_.prototype.track = function (queryList, predicate, descend, read) {\n            if (descend) {\n                this.deep = createLQuery(this.deep, queryList, predicate, read != null ? read : null);\n            }\n            else {\n                this.shallow = createLQuery(this.shallow, queryList, predicate, read != null ? read : null);\n            }\n        };\n        LQueries_.prototype.clone = function (tNode) {\n            return this.shallow !== null || isContentQueryHost(tNode) ?\n                new LQueries_(this, null, this.deep, tNode.index) :\n                this;\n        };\n        LQueries_.prototype.container = function () {\n            var shallowResults = copyQueriesToContainer(this.shallow);\n            var deepResults = copyQueriesToContainer(this.deep);\n            return shallowResults || deepResults ? new LQueries_(this, shallowResults, deepResults) : null;\n        };\n        LQueries_.prototype.createView = function () {\n            var shallowResults = copyQueriesToView(this.shallow);\n            var deepResults = copyQueriesToView(this.deep);\n            return shallowResults || deepResults ? new LQueries_(this, shallowResults, deepResults) : null;\n        };\n        LQueries_.prototype.insertView = function (index) {\n            insertView$1(index, this.shallow);\n            insertView$1(index, this.deep);\n        };\n        LQueries_.prototype.addNode = function (tNode) {\n            add(this.deep, tNode, false);\n            add(this.shallow, tNode, false);\n        };\n        LQueries_.prototype.insertNodeBeforeViews = function (tNode) {\n            add(this.deep, tNode, true);\n            add(this.shallow, tNode, true);\n        };\n        LQueries_.prototype.removeView = function () {\n            removeView$1(this.shallow);\n            removeView$1(this.deep);\n        };\n        return LQueries_;\n    }());\n    function copyQueriesToContainer(query) {\n        var result = null;\n        while (query) {\n            var containerValues = []; // prepare room for views\n            query.values.push(containerValues);\n            result = new LQuery(result, query.list, query.predicate, containerValues, null);\n            query = query.next;\n        }\n        return result;\n    }\n    function copyQueriesToView(query) {\n        var result = null;\n        while (query) {\n            result = new LQuery(result, query.list, query.predicate, [], query.values);\n            query = query.next;\n        }\n        return result;\n    }\n    function insertView$1(index, query) {\n        while (query) {\n            ngDevMode && assertViewQueryhasPointerToDeclarationContainer(query);\n            query.containerValues.splice(index, 0, query.values);\n            // mark a query as dirty only when inserted view had matching modes\n            if (query.values.length) {\n                query.list.setDirty();\n            }\n            query = query.next;\n        }\n    }\n    function removeView$1(query) {\n        while (query) {\n            ngDevMode && assertViewQueryhasPointerToDeclarationContainer(query);\n            var containerValues = query.containerValues;\n            var viewValuesIdx = containerValues.indexOf(query.values);\n            var removed = containerValues.splice(viewValuesIdx, 1);\n            // mark a query as dirty only when removed view had matching modes\n            ngDevMode && assertEqual(removed.length, 1, 'removed.length');\n            if (removed[0].length) {\n                query.list.setDirty();\n            }\n            query = query.next;\n        }\n    }\n    function assertViewQueryhasPointerToDeclarationContainer(query) {\n        assertDefined(query.containerValues, 'View queries need to have a pointer to container values.');\n    }\n    /**\n     * Iterates over local names for a given node and returns directive index\n     * (or -1 if a local name points to an element).\n     *\n     * @param tNode static data of a node to check\n     * @param selector selector to match\n     * @returns directive index, -1 or null if a selector didn't match any of the local names\n     */\n    function getIdxOfMatchingSelector(tNode, selector) {\n        var localNames = tNode.localNames;\n        if (localNames) {\n            for (var i = 0; i < localNames.length; i += 2) {\n                if (localNames[i] === selector) {\n                    return localNames[i + 1];\n                }\n            }\n        }\n        return null;\n    }\n    // TODO: \"read\" should be an AbstractType (FW-486)\n    function queryByReadToken(read, tNode, currentView) {\n        var factoryFn = read[NG_ELEMENT_ID];\n        if (typeof factoryFn === 'function') {\n            return factoryFn();\n        }\n        else {\n            var tView = currentView[TVIEW];\n            var matchingIdx = locateDirectiveOrProvider(tNode, tView, read, false, false);\n            if (matchingIdx !== null) {\n                return getNodeInjectable(tView.data, currentView, matchingIdx, tNode);\n            }\n        }\n        return null;\n    }\n    function queryByTNodeType(tNode, currentView) {\n        if (tNode.type === 3 /* Element */ || tNode.type === 4 /* ElementContainer */) {\n            return createElementRef(ElementRef, tNode, currentView);\n        }\n        if (tNode.type === 0 /* Container */) {\n            return createTemplateRef(TemplateRef, ElementRef, tNode, currentView);\n        }\n        return null;\n    }\n    function queryByTemplateRef(templateRefToken, tNode, currentView, read) {\n        var templateRefResult = templateRefToken[NG_ELEMENT_ID]();\n        if (read) {\n            return templateRefResult ? queryByReadToken(read, tNode, currentView) : null;\n        }\n        return templateRefResult;\n    }\n    function queryRead(tNode, currentView, read, matchingIdx) {\n        if (read) {\n            return queryByReadToken(read, tNode, currentView);\n        }\n        if (matchingIdx > -1) {\n            return getNodeInjectable(currentView[TVIEW].data, currentView, matchingIdx, tNode);\n        }\n        // if read token and / or strategy is not specified,\n        // detect it using appropriate tNode type\n        return queryByTNodeType(tNode, currentView);\n    }\n    /**\n     * Add query matches for a given node.\n     *\n     * @param query The first query in the linked list\n     * @param tNode The TNode to match against queries\n     * @param insertBeforeContainer Whether or not we should add matches before the last\n     * container array. This mode is necessary if the query container had to be created\n     * out of order (e.g. a view was created in a constructor)\n     */\n    function add(query, tNode, insertBeforeContainer) {\n        var lView = getLView();\n        var tView = lView[TVIEW];\n        while (query) {\n            var predicate = query.predicate;\n            var type = predicate.type;\n            if (type) {\n                var result = null;\n                if (type === TemplateRef) {\n                    result = queryByTemplateRef(type, tNode, lView, predicate.read);\n                }\n                else {\n                    var matchingIdx = locateDirectiveOrProvider(tNode, tView, type, false, false);\n                    if (matchingIdx !== null) {\n                        result = queryRead(tNode, lView, predicate.read, matchingIdx);\n                    }\n                }\n                if (result !== null) {\n                    addMatch(query, result, insertBeforeContainer);\n                }\n            }\n            else {\n                var selector = predicate.selector;\n                for (var i = 0; i < selector.length; i++) {\n                    var matchingIdx = getIdxOfMatchingSelector(tNode, selector[i]);\n                    if (matchingIdx !== null) {\n                        var result = queryRead(tNode, lView, predicate.read, matchingIdx);\n                        if (result !== null) {\n                            addMatch(query, result, insertBeforeContainer);\n                        }\n                    }\n                }\n            }\n            query = query.next;\n        }\n    }\n    function addMatch(query, matchingValue, insertBeforeViewMatches) {\n        // Views created in constructors may have their container values created too early. In this case,\n        // ensure template node results are unshifted before container results. Otherwise, results inside\n        // embedded views will appear before results on parent template nodes when flattened.\n        insertBeforeViewMatches ? query.values.unshift(matchingValue) : query.values.push(matchingValue);\n        query.list.setDirty();\n    }\n    function createPredicate(predicate, read) {\n        var isArray = Array.isArray(predicate);\n        return {\n            type: isArray ? null : predicate,\n            selector: isArray ? predicate : null,\n            read: read\n        };\n    }\n    function createLQuery(previous, queryList, predicate, read) {\n        return new LQuery(previous, queryList, createPredicate(predicate, read), queryList._valuesTree, null);\n    }\n    /**\n     * Creates a QueryList and stores it in LView's collection of active queries (LQueries).\n     *\n     * @param predicate The type for which the query will search\n     * @param descend Whether or not to descend into children\n     * @param read What to save in the query\n     * @returns QueryList<T>\n     */\n    function createQueryListInLView(\n    // TODO: \"read\" should be an AbstractType (FW-486)\n    lView, predicate, descend, read, isStatic, nodeIndex) {\n        ngDevMode && assertPreviousIsParent(getIsParent());\n        var queryList = new QueryList();\n        var queries = lView[QUERIES] || (lView[QUERIES] = new LQueries_(null, null, null, nodeIndex));\n        queryList._valuesTree = [];\n        queryList._static = isStatic;\n        queries.track(queryList, predicate, descend, read);\n        storeCleanupWithContext(lView, queryList, queryList.destroy);\n        return queryList;\n    }\n    /**\n     * Refreshes a query by combining matches from all active views and removing matches from deleted\n     * views.\n     *\n     * @returns `true` if a query got dirty during change detection or if this is a static query\n     * resolving in creation mode, `false` otherwise.\n     *\n     * @codeGenApi\n     */\n    function ɵɵqueryRefresh(queryList) {\n        var queryListImpl = queryList;\n        var creationMode = isCreationMode();\n        // if creation mode and static or update mode and not static\n        if (queryList.dirty && creationMode === queryListImpl._static) {\n            queryList.reset(queryListImpl._valuesTree || []);\n            queryList.notifyOnChanges();\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Creates new QueryList for a static view query.\n     *\n     * @param predicate The type for which the query will search\n     * @param descend Whether or not to descend into children\n     * @param read What to save in the query\n     *\n     * @codeGenApi\n     */\n    function ɵɵstaticViewQuery(\n    // TODO(FW-486): \"read\" should be an AbstractType\n    predicate, descend, read) {\n        var lView = getLView();\n        var tView = lView[TVIEW];\n        viewQueryInternal(lView, tView, predicate, descend, read, true);\n        tView.staticViewQueries = true;\n    }\n    /**\n     * Creates new QueryList, stores the reference in LView and returns QueryList.\n     *\n     * @param predicate The type for which the query will search\n     * @param descend Whether or not to descend into children\n     * @param read What to save in the query\n     * @returns QueryList<T>\n     *\n     * @codeGenApi\n     */\n    function ɵɵviewQuery(\n    // TODO(FW-486): \"read\" should be an AbstractType\n    predicate, descend, read) {\n        var lView = getLView();\n        var tView = lView[TVIEW];\n        return viewQueryInternal(lView, tView, predicate, descend, read, false);\n    }\n    function viewQueryInternal(lView, tView, predicate, descend, read, isStatic) {\n        if (tView.firstTemplatePass) {\n            tView.expandoStartIndex++;\n        }\n        var index = getCurrentQueryIndex();\n        var queryList = createQueryListInLView(lView, predicate, descend, read, isStatic, -1);\n        store(index - HEADER_OFFSET, queryList);\n        setCurrentQueryIndex(index + 1);\n        return queryList;\n    }\n    /**\n     * Loads current View Query and moves the pointer/index to the next View Query in LView.\n     *\n     * @codeGenApi\n     */\n    function ɵɵloadViewQuery() {\n        var index = getCurrentQueryIndex();\n        setCurrentQueryIndex(index + 1);\n        return loadInternal(getLView(), index - HEADER_OFFSET);\n    }\n    /**\n     * Registers a QueryList, associated with a content query, for later refresh (part of a view\n     * refresh).\n     *\n     * @param directiveIndex Current directive index\n     * @param predicate The type for which the query will search\n     * @param descend Whether or not to descend into children\n     * @param read What to save in the query\n     * @returns QueryList<T>\n     *\n     * @codeGenApi\n     */\n    function ɵɵcontentQuery(directiveIndex, predicate, descend, \n    // TODO(FW-486): \"read\" should be an AbstractType\n    read) {\n        var lView = getLView();\n        var tView = lView[TVIEW];\n        var tNode = getPreviousOrParentTNode();\n        return contentQueryInternal(lView, tView, directiveIndex, predicate, descend, read, false, tNode.index);\n    }\n    function contentQueryInternal(lView, tView, directiveIndex, predicate, descend, \n    // TODO(FW-486): \"read\" should be an AbstractType\n    read, isStatic, nodeIndex) {\n        var contentQuery = createQueryListInLView(lView, predicate, descend, read, isStatic, nodeIndex);\n        (lView[CONTENT_QUERIES] || (lView[CONTENT_QUERIES] = [])).push(contentQuery);\n        if (tView.firstTemplatePass) {\n            var tViewContentQueries = tView.contentQueries || (tView.contentQueries = []);\n            var lastSavedDirectiveIndex = tView.contentQueries.length ? tView.contentQueries[tView.contentQueries.length - 1] : -1;\n            if (directiveIndex !== lastSavedDirectiveIndex) {\n                tViewContentQueries.push(directiveIndex);\n            }\n        }\n        return contentQuery;\n    }\n    /**\n     * Registers a QueryList, associated with a static content query, for later refresh\n     * (part of a view refresh).\n     *\n     * @param directiveIndex Current directive index\n     * @param predicate The type for which the query will search\n     * @param descend Whether or not to descend into children\n     * @param read What to save in the query\n     * @returns QueryList<T>\n     *\n     * @codeGenApi\n     */\n    function ɵɵstaticContentQuery(directiveIndex, predicate, descend, \n    // TODO(FW-486): \"read\" should be an AbstractType\n    read) {\n        var lView = getLView();\n        var tView = lView[TVIEW];\n        var tNode = getPreviousOrParentTNode();\n        contentQueryInternal(lView, tView, directiveIndex, predicate, descend, read, true, tNode.index);\n        tView.staticContentQueries = true;\n    }\n    /**\n     *\n     * @codeGenApi\n     */\n    function ɵɵloadContentQuery() {\n        var lView = getLView();\n        ngDevMode &&\n            assertDefined(lView[CONTENT_QUERIES], 'Content QueryList array should be defined if reading a query.');\n        var index = getCurrentQueryIndex();\n        ngDevMode && assertDataInRange(lView[CONTENT_QUERIES], index);\n        setCurrentQueryIndex(index + 1);\n        return lView[CONTENT_QUERIES][index];\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Retrieves `TemplateRef` instance from `Injector` when a local reference is placed on the\n     * `<ng-template>` element.\n     *\n     * @codeGenApi\n     */\n    function ɵɵtemplateRefExtractor(tNode, currentView) {\n        return createTemplateRef(TemplateRef, ElementRef, tNode, currentView);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A mapping of the @angular/core API surface used in generated expressions to the actual symbols.\n     *\n     * This should be kept up to date with the public exports of @angular/core.\n     */\n    var angularCoreEnv = (function () { return ({\n        'ɵɵattribute': ɵɵattribute,\n        'ɵɵattributeInterpolate1': ɵɵattributeInterpolate1,\n        'ɵɵattributeInterpolate2': ɵɵattributeInterpolate2,\n        'ɵɵattributeInterpolate3': ɵɵattributeInterpolate3,\n        'ɵɵattributeInterpolate4': ɵɵattributeInterpolate4,\n        'ɵɵattributeInterpolate5': ɵɵattributeInterpolate5,\n        'ɵɵattributeInterpolate6': ɵɵattributeInterpolate6,\n        'ɵɵattributeInterpolate7': ɵɵattributeInterpolate7,\n        'ɵɵattributeInterpolate8': ɵɵattributeInterpolate8,\n        'ɵɵattributeInterpolateV': ɵɵattributeInterpolateV,\n        'ɵɵdefineBase': ɵɵdefineBase,\n        'ɵɵdefineComponent': ɵɵdefineComponent,\n        'ɵɵdefineDirective': ɵɵdefineDirective,\n        'ɵɵdefineInjectable': ɵɵdefineInjectable,\n        'ɵɵdefineInjector': ɵɵdefineInjector,\n        'ɵɵdefineNgModule': ɵɵdefineNgModule,\n        'ɵɵdefinePipe': ɵɵdefinePipe,\n        'ɵɵdirectiveInject': ɵɵdirectiveInject,\n        'ɵɵgetFactoryOf': ɵɵgetFactoryOf,\n        'ɵɵgetInheritedFactory': ɵɵgetInheritedFactory,\n        'ɵɵinject': ɵɵinject,\n        'ɵɵinjectAttribute': ɵɵinjectAttribute,\n        'ɵɵtemplateRefExtractor': ɵɵtemplateRefExtractor,\n        'ɵɵNgOnChangesFeature': ɵɵNgOnChangesFeature,\n        'ɵɵProvidersFeature': ɵɵProvidersFeature,\n        'ɵɵInheritDefinitionFeature': ɵɵInheritDefinitionFeature,\n        'ɵɵcontainer': ɵɵcontainer,\n        'ɵɵnextContext': ɵɵnextContext,\n        'ɵɵcontainerRefreshStart': ɵɵcontainerRefreshStart,\n        'ɵɵcontainerRefreshEnd': ɵɵcontainerRefreshEnd,\n        'ɵɵnamespaceHTML': ɵɵnamespaceHTML,\n        'ɵɵnamespaceMathML': ɵɵnamespaceMathML,\n        'ɵɵnamespaceSVG': ɵɵnamespaceSVG,\n        'ɵɵenableBindings': ɵɵenableBindings,\n        'ɵɵdisableBindings': ɵɵdisableBindings,\n        'ɵɵallocHostVars': ɵɵallocHostVars,\n        'ɵɵelementStart': ɵɵelementStart,\n        'ɵɵelementEnd': ɵɵelementEnd,\n        'ɵɵelement': ɵɵelement,\n        'ɵɵelementContainerStart': ɵɵelementContainerStart,\n        'ɵɵelementContainerEnd': ɵɵelementContainerEnd,\n        'ɵɵpureFunction0': ɵɵpureFunction0,\n        'ɵɵpureFunction1': ɵɵpureFunction1,\n        'ɵɵpureFunction2': ɵɵpureFunction2,\n        'ɵɵpureFunction3': ɵɵpureFunction3,\n        'ɵɵpureFunction4': ɵɵpureFunction4,\n        'ɵɵpureFunction5': ɵɵpureFunction5,\n        'ɵɵpureFunction6': ɵɵpureFunction6,\n        'ɵɵpureFunction7': ɵɵpureFunction7,\n        'ɵɵpureFunction8': ɵɵpureFunction8,\n        'ɵɵpureFunctionV': ɵɵpureFunctionV,\n        'ɵɵgetCurrentView': ɵɵgetCurrentView,\n        'ɵɵrestoreView': ɵɵrestoreView,\n        'ɵɵinterpolation1': ɵɵinterpolation1,\n        'ɵɵinterpolation2': ɵɵinterpolation2,\n        'ɵɵinterpolation3': ɵɵinterpolation3,\n        'ɵɵinterpolation4': ɵɵinterpolation4,\n        'ɵɵinterpolation5': ɵɵinterpolation5,\n        'ɵɵinterpolation6': ɵɵinterpolation6,\n        'ɵɵinterpolation7': ɵɵinterpolation7,\n        'ɵɵinterpolation8': ɵɵinterpolation8,\n        'ɵɵinterpolationV': ɵɵinterpolationV,\n        'ɵɵlistener': ɵɵlistener,\n        'ɵɵload': ɵɵload,\n        'ɵɵprojection': ɵɵprojection,\n        'ɵɵupdateSyntheticHostBinding': ɵɵupdateSyntheticHostBinding,\n        'ɵɵcomponentHostSyntheticListener': ɵɵcomponentHostSyntheticListener,\n        'ɵɵpipeBind1': ɵɵpipeBind1,\n        'ɵɵpipeBind2': ɵɵpipeBind2,\n        'ɵɵpipeBind3': ɵɵpipeBind3,\n        'ɵɵpipeBind4': ɵɵpipeBind4,\n        'ɵɵpipeBindV': ɵɵpipeBindV,\n        'ɵɵprojectionDef': ɵɵprojectionDef,\n        'ɵɵproperty': ɵɵproperty,\n        'ɵɵpropertyInterpolate': ɵɵpropertyInterpolate,\n        'ɵɵpropertyInterpolate1': ɵɵpropertyInterpolate1,\n        'ɵɵpropertyInterpolate2': ɵɵpropertyInterpolate2,\n        'ɵɵpropertyInterpolate3': ɵɵpropertyInterpolate3,\n        'ɵɵpropertyInterpolate4': ɵɵpropertyInterpolate4,\n        'ɵɵpropertyInterpolate5': ɵɵpropertyInterpolate5,\n        'ɵɵpropertyInterpolate6': ɵɵpropertyInterpolate6,\n        'ɵɵpropertyInterpolate7': ɵɵpropertyInterpolate7,\n        'ɵɵpropertyInterpolate8': ɵɵpropertyInterpolate8,\n        'ɵɵpropertyInterpolateV': ɵɵpropertyInterpolateV,\n        'ɵɵpipe': ɵɵpipe,\n        'ɵɵqueryRefresh': ɵɵqueryRefresh,\n        'ɵɵviewQuery': ɵɵviewQuery,\n        'ɵɵstaticViewQuery': ɵɵstaticViewQuery,\n        'ɵɵstaticContentQuery': ɵɵstaticContentQuery,\n        'ɵɵloadViewQuery': ɵɵloadViewQuery,\n        'ɵɵcontentQuery': ɵɵcontentQuery,\n        'ɵɵloadContentQuery': ɵɵloadContentQuery,\n        'ɵɵreference': ɵɵreference,\n        'ɵɵelementHostAttrs': ɵɵelementHostAttrs,\n        'ɵɵclassMap': ɵɵclassMap,\n        'ɵɵstyling': ɵɵstyling,\n        'ɵɵstyleMap': ɵɵstyleMap,\n        'ɵɵstyleProp': ɵɵstyleProp,\n        'ɵɵstyleSanitizer': styleSanitizer,\n        'ɵɵstylingApply': ɵɵstylingApply,\n        'ɵɵclassProp': ɵɵclassProp,\n        'ɵɵselect': ɵɵselect,\n        'ɵɵtemplate': ɵɵtemplate,\n        'ɵɵtext': ɵɵtext,\n        'ɵɵtextBinding': ɵɵtextBinding,\n        'ɵɵtextInterpolate': ɵɵtextInterpolate,\n        'ɵɵtextInterpolate1': ɵɵtextInterpolate1,\n        'ɵɵtextInterpolate2': ɵɵtextInterpolate2,\n        'ɵɵtextInterpolate3': ɵɵtextInterpolate3,\n        'ɵɵtextInterpolate4': ɵɵtextInterpolate4,\n        'ɵɵtextInterpolate5': ɵɵtextInterpolate5,\n        'ɵɵtextInterpolate6': ɵɵtextInterpolate6,\n        'ɵɵtextInterpolate7': ɵɵtextInterpolate7,\n        'ɵɵtextInterpolate8': ɵɵtextInterpolate8,\n        'ɵɵtextInterpolateV': ɵɵtextInterpolateV,\n        'ɵɵembeddedViewStart': ɵɵembeddedViewStart,\n        'ɵɵembeddedViewEnd': ɵɵembeddedViewEnd,\n        'ɵɵi18n': ɵɵi18n,\n        'ɵɵi18nAttributes': ɵɵi18nAttributes,\n        'ɵɵi18nExp': ɵɵi18nExp,\n        'ɵɵi18nStart': ɵɵi18nStart,\n        'ɵɵi18nEnd': ɵɵi18nEnd,\n        'ɵɵi18nApply': ɵɵi18nApply,\n        'ɵɵi18nPostprocess': ɵɵi18nPostprocess,\n        'ɵɵi18nLocalize': ɵɵi18nLocalize,\n        'ɵɵresolveWindow': ɵɵresolveWindow,\n        'ɵɵresolveDocument': ɵɵresolveDocument,\n        'ɵɵresolveBody': ɵɵresolveBody,\n        'ɵɵsetComponentScope': ɵɵsetComponentScope,\n        'ɵɵsetNgModuleScope': ɵɵsetNgModuleScope,\n        'ɵɵsanitizeHtml': ɵɵsanitizeHtml,\n        'ɵɵsanitizeStyle': ɵɵsanitizeStyle,\n        'ɵɵdefaultStyleSanitizer': ɵɵdefaultStyleSanitizer,\n        'ɵɵsanitizeResourceUrl': ɵɵsanitizeResourceUrl,\n        'ɵɵsanitizeScript': ɵɵsanitizeScript,\n        'ɵɵsanitizeUrl': ɵɵsanitizeUrl,\n        'ɵɵsanitizeUrlOrResourceUrl': ɵɵsanitizeUrlOrResourceUrl,\n    }); })();\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var EMPTY_ARRAY$3 = [];\n    var moduleQueue = [];\n    /**\n     * Enqueues moduleDef to be checked later to see if scope can be set on its\n     * component declarations.\n     */\n    function enqueueModuleForDelayedScoping(moduleType, ngModule) {\n        moduleQueue.push({ moduleType: moduleType, ngModule: ngModule });\n    }\n    var flushingModuleQueue = false;\n    /**\n     * Loops over queued module definitions, if a given module definition has all of its\n     * declarations resolved, it dequeues that module definition and sets the scope on\n     * its declarations.\n     */\n    function flushModuleScopingQueueAsMuchAsPossible() {\n        if (!flushingModuleQueue) {\n            flushingModuleQueue = true;\n            try {\n                for (var i = moduleQueue.length - 1; i >= 0; i--) {\n                    var _a = moduleQueue[i], moduleType = _a.moduleType, ngModule = _a.ngModule;\n                    if (ngModule.declarations && ngModule.declarations.every(isResolvedDeclaration)) {\n                        // dequeue\n                        moduleQueue.splice(i, 1);\n                        setScopeOnDeclaredComponents(moduleType, ngModule);\n                    }\n                }\n            }\n            finally {\n                flushingModuleQueue = false;\n            }\n        }\n    }\n    /**\n     * Returns truthy if a declaration has resolved. If the declaration happens to be\n     * an array of declarations, it will recurse to check each declaration in that array\n     * (which may also be arrays).\n     */\n    function isResolvedDeclaration(declaration) {\n        if (Array.isArray(declaration)) {\n            return declaration.every(isResolvedDeclaration);\n        }\n        return !!resolveForwardRef(declaration);\n    }\n    /**\n     * Compiles a module in JIT mode.\n     *\n     * This function automatically gets called when a class has a `@NgModule` decorator.\n     */\n    function compileNgModule(moduleType, ngModule) {\n        if (ngModule === void 0) { ngModule = {}; }\n        compileNgModuleDefs(moduleType, ngModule);\n        // Because we don't know if all declarations have resolved yet at the moment the\n        // NgModule decorator is executing, we're enqueueing the setting of module scope\n        // on its declarations to be run at a later time when all declarations for the module,\n        // including forward refs, have resolved.\n        enqueueModuleForDelayedScoping(moduleType, ngModule);\n    }\n    /**\n     * Compiles and adds the `ngModuleDef` and `ngInjectorDef` properties to the module class.\n     *\n     * It's possible to compile a module via this API which will allow duplicate declarations in its\n     * root.\n     */\n    function compileNgModuleDefs(moduleType, ngModule, allowDuplicateDeclarationsInRoot) {\n        if (allowDuplicateDeclarationsInRoot === void 0) { allowDuplicateDeclarationsInRoot = false; }\n        ngDevMode && assertDefined(moduleType, 'Required value moduleType');\n        ngDevMode && assertDefined(ngModule, 'Required value ngModule');\n        var declarations = flatten(ngModule.declarations || EMPTY_ARRAY$3);\n        var ngModuleDef = null;\n        Object.defineProperty(moduleType, NG_MODULE_DEF, {\n            configurable: true,\n            get: function () {\n                if (ngModuleDef === null) {\n                    ngModuleDef = getCompilerFacade().compileNgModule(angularCoreEnv, \"ng:///\" + moduleType.name + \"/ngModuleDef.js\", {\n                        type: moduleType,\n                        bootstrap: flatten(ngModule.bootstrap || EMPTY_ARRAY$3).map(resolveForwardRef),\n                        declarations: declarations.map(resolveForwardRef),\n                        imports: flatten(ngModule.imports || EMPTY_ARRAY$3)\n                            .map(resolveForwardRef)\n                            .map(expandModuleWithProviders),\n                        exports: flatten(ngModule.exports || EMPTY_ARRAY$3)\n                            .map(resolveForwardRef)\n                            .map(expandModuleWithProviders),\n                        emitInline: true,\n                        schemas: ngModule.schemas ? flatten(ngModule.schemas) : null,\n                        id: ngModule.id || null,\n                    });\n                }\n                return ngModuleDef;\n            }\n        });\n        var ngInjectorDef = null;\n        Object.defineProperty(moduleType, NG_INJECTOR_DEF, {\n            get: function () {\n                if (ngInjectorDef === null) {\n                    ngDevMode && verifySemanticsOfNgModuleDef(moduleType, allowDuplicateDeclarationsInRoot);\n                    var meta = {\n                        name: moduleType.name,\n                        type: moduleType,\n                        deps: reflectDependencies(moduleType),\n                        providers: ngModule.providers || EMPTY_ARRAY$3,\n                        imports: [\n                            (ngModule.imports || EMPTY_ARRAY$3).map(resolveForwardRef),\n                            (ngModule.exports || EMPTY_ARRAY$3).map(resolveForwardRef),\n                        ],\n                    };\n                    ngInjectorDef = getCompilerFacade().compileInjector(angularCoreEnv, \"ng:///\" + moduleType.name + \"/ngInjectorDef.js\", meta);\n                }\n                return ngInjectorDef;\n            },\n            // Make the property configurable in dev mode to allow overriding in tests\n            configurable: !!ngDevMode,\n        });\n    }\n    function verifySemanticsOfNgModuleDef(moduleType, allowDuplicateDeclarationsInRoot) {\n        if (verifiedNgModule.get(moduleType))\n            return;\n        verifiedNgModule.set(moduleType, true);\n        moduleType = resolveForwardRef(moduleType);\n        var ngModuleDef = getNgModuleDef(moduleType, true);\n        var errors = [];\n        var declarations = maybeUnwrapFn(ngModuleDef.declarations);\n        var imports = maybeUnwrapFn(ngModuleDef.imports);\n        flatten(imports)\n            .map(unwrapModuleWithProvidersImports)\n            .forEach(function (mod) { return verifySemanticsOfNgModuleDef(mod, false); });\n        var exports = maybeUnwrapFn(ngModuleDef.exports);\n        declarations.forEach(verifyDeclarationsHaveDefinitions);\n        var combinedDeclarations = __spread(declarations.map(resolveForwardRef), flatten(imports.map(computeCombinedExports)).map(resolveForwardRef));\n        exports.forEach(verifyExportsAreDeclaredOrReExported);\n        declarations.forEach(function (decl) { return verifyDeclarationIsUnique(decl, allowDuplicateDeclarationsInRoot); });\n        declarations.forEach(verifyComponentEntryComponentsIsPartOfNgModule);\n        var ngModule = getAnnotation(moduleType, 'NgModule');\n        if (ngModule) {\n            ngModule.imports &&\n                flatten(ngModule.imports)\n                    .map(unwrapModuleWithProvidersImports)\n                    .forEach(function (mod) { return verifySemanticsOfNgModuleDef(mod, false); });\n            ngModule.bootstrap && ngModule.bootstrap.forEach(verifyCorrectBootstrapType);\n            ngModule.bootstrap && ngModule.bootstrap.forEach(verifyComponentIsPartOfNgModule);\n            ngModule.entryComponents && ngModule.entryComponents.forEach(verifyComponentIsPartOfNgModule);\n        }\n        // Throw Error if any errors were detected.\n        if (errors.length) {\n            throw new Error(errors.join('\\n'));\n        }\n        ////////////////////////////////////////////////////////////////////////////////////////////////\n        function verifyDeclarationsHaveDefinitions(type) {\n            type = resolveForwardRef(type);\n            var def = getComponentDef(type) || getDirectiveDef(type) || getPipeDef(type);\n            if (!def) {\n                errors.push(\"Unexpected value '\" + stringifyForError(type) + \"' declared by the module '\" + stringifyForError(moduleType) + \"'. Please add a @Pipe/@Directive/@Component annotation.\");\n            }\n        }\n        function verifyExportsAreDeclaredOrReExported(type) {\n            type = resolveForwardRef(type);\n            var kind = getComponentDef(type) && 'component' || getDirectiveDef(type) && 'directive' ||\n                getPipeDef(type) && 'pipe';\n            if (kind) {\n                // only checked if we are declared as Component, Directive, or Pipe\n                // Modules don't need to be declared or imported.\n                if (combinedDeclarations.lastIndexOf(type) === -1) {\n                    // We are exporting something which we don't explicitly declare or import.\n                    errors.push(\"Can't export \" + kind + \" \" + stringifyForError(type) + \" from \" + stringifyForError(moduleType) + \" as it was neither declared nor imported!\");\n                }\n            }\n        }\n        function verifyDeclarationIsUnique(type, suppressErrors) {\n            type = resolveForwardRef(type);\n            var existingModule = ownerNgModule.get(type);\n            if (existingModule && existingModule !== moduleType) {\n                if (!suppressErrors) {\n                    var modules = [existingModule, moduleType].map(stringifyForError).sort();\n                    errors.push(\"Type \" + stringifyForError(type) + \" is part of the declarations of 2 modules: \" + modules[0] + \" and \" + modules[1] + \"! \" +\n                        (\"Please consider moving \" + stringifyForError(type) + \" to a higher module that imports \" + modules[0] + \" and \" + modules[1] + \". \") +\n                        (\"You can also create a new NgModule that exports and includes \" + stringifyForError(type) + \" then import that NgModule in \" + modules[0] + \" and \" + modules[1] + \".\"));\n                }\n            }\n            else {\n                // Mark type as having owner.\n                ownerNgModule.set(type, moduleType);\n            }\n        }\n        function verifyComponentIsPartOfNgModule(type) {\n            type = resolveForwardRef(type);\n            var existingModule = ownerNgModule.get(type);\n            if (!existingModule) {\n                errors.push(\"Component \" + stringifyForError(type) + \" is not part of any NgModule or the module has not been imported into your module.\");\n            }\n        }\n        function verifyCorrectBootstrapType(type) {\n            type = resolveForwardRef(type);\n            if (!getComponentDef(type)) {\n                errors.push(stringifyForError(type) + \" cannot be used as an entry component.\");\n            }\n        }\n        function verifyComponentEntryComponentsIsPartOfNgModule(type) {\n            type = resolveForwardRef(type);\n            if (getComponentDef(type)) {\n                // We know we are component\n                var component = getAnnotation(type, 'Component');\n                if (component && component.entryComponents) {\n                    component.entryComponents.forEach(verifyComponentIsPartOfNgModule);\n                }\n            }\n        }\n    }\n    function unwrapModuleWithProvidersImports(typeOrWithProviders) {\n        typeOrWithProviders = resolveForwardRef(typeOrWithProviders);\n        return typeOrWithProviders.ngModule || typeOrWithProviders;\n    }\n    function getAnnotation(type, name) {\n        var annotation = null;\n        collect(type.__annotations__);\n        collect(type.decorators);\n        return annotation;\n        function collect(annotations) {\n            if (annotations) {\n                annotations.forEach(readAnnotation);\n            }\n        }\n        function readAnnotation(decorator) {\n            if (!annotation) {\n                var proto = Object.getPrototypeOf(decorator);\n                if (proto.ngMetadataName == name) {\n                    annotation = decorator;\n                }\n                else if (decorator.type) {\n                    var proto_1 = Object.getPrototypeOf(decorator.type);\n                    if (proto_1.ngMetadataName == name) {\n                        annotation = decorator.args[0];\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Keep track of compiled components. This is needed because in tests we often want to compile the\n     * same component with more than one NgModule. This would cause an error unless we reset which\n     * NgModule the component belongs to. We keep the list of compiled components here so that the\n     * TestBed can reset it later.\n     */\n    var ownerNgModule = new Map();\n    var verifiedNgModule = new Map();\n    function resetCompiledComponents() {\n        ownerNgModule = new Map();\n        verifiedNgModule = new Map();\n        moduleQueue.length = 0;\n    }\n    /**\n     * Computes the combined declarations of explicit declarations, as well as declarations inherited by\n     * traversing the exports of imported modules.\n     * @param type\n     */\n    function computeCombinedExports(type) {\n        type = resolveForwardRef(type);\n        var ngModuleDef = getNgModuleDef(type, true);\n        return __spread(flatten(maybeUnwrapFn(ngModuleDef.exports).map(function (type) {\n            var ngModuleDef = getNgModuleDef(type);\n            if (ngModuleDef) {\n                verifySemanticsOfNgModuleDef(type, false);\n                return computeCombinedExports(type);\n            }\n            else {\n                return type;\n            }\n        })));\n    }\n    /**\n     * Some declared components may be compiled asynchronously, and thus may not have their\n     * ngComponentDef set yet. If this is the case, then a reference to the module is written into\n     * the `ngSelectorScope` property of the declared type.\n     */\n    function setScopeOnDeclaredComponents(moduleType, ngModule) {\n        var declarations = flatten(ngModule.declarations || EMPTY_ARRAY$3);\n        var transitiveScopes = transitiveScopesFor(moduleType);\n        declarations.forEach(function (declaration) {\n            if (declaration.hasOwnProperty(NG_COMPONENT_DEF)) {\n                // An `ngComponentDef` field exists - go ahead and patch the component directly.\n                var component = declaration;\n                var componentDef = getComponentDef(component);\n                patchComponentDefWithScope(componentDef, transitiveScopes);\n            }\n            else if (!declaration.hasOwnProperty(NG_DIRECTIVE_DEF) && !declaration.hasOwnProperty(NG_PIPE_DEF)) {\n                // Set `ngSelectorScope` for future reference when the component compilation finishes.\n                declaration.ngSelectorScope = moduleType;\n            }\n        });\n    }\n    /**\n     * Patch the definition of a component with directives and pipes from the compilation scope of\n     * a given module.\n     */\n    function patchComponentDefWithScope(componentDef, transitiveScopes) {\n        componentDef.directiveDefs = function () {\n            return Array.from(transitiveScopes.compilation.directives)\n                .map(function (dir) { return dir.hasOwnProperty(NG_COMPONENT_DEF) ? getComponentDef(dir) :\n                getDirectiveDef(dir); })\n                .filter(function (def) { return !!def; });\n        };\n        componentDef.pipeDefs = function () {\n            return Array.from(transitiveScopes.compilation.pipes).map(function (pipe) { return getPipeDef(pipe); });\n        };\n        componentDef.schemas = transitiveScopes.schemas;\n        // Since we avoid Components/Directives/Pipes recompiling in case there are no overrides, we\n        // may face a problem where previously compiled defs available to a given Component/Directive\n        // are cached in TView and may become stale (in case any of these defs gets recompiled). In\n        // order to avoid this problem, we force fresh TView to be created.\n        componentDef.tView = null;\n    }\n    /**\n     * Compute the pair of transitive scopes (compilation scope and exported scope) for a given module.\n     *\n     * This operation is memoized and the result is cached on the module's definition. It can be called\n     * on modules with components that have not fully compiled yet, but the result should not be used\n     * until they have.\n     */\n    function transitiveScopesFor(moduleType, processNgModuleFn) {\n        if (!isNgModule(moduleType)) {\n            throw new Error(moduleType.name + \" does not have an ngModuleDef\");\n        }\n        var def = getNgModuleDef(moduleType);\n        if (def.transitiveCompileScopes !== null) {\n            return def.transitiveCompileScopes;\n        }\n        var scopes = {\n            schemas: def.schemas || null,\n            compilation: {\n                directives: new Set(),\n                pipes: new Set(),\n            },\n            exported: {\n                directives: new Set(),\n                pipes: new Set(),\n            },\n        };\n        maybeUnwrapFn(def.declarations).forEach(function (declared) {\n            var declaredWithDefs = declared;\n            if (getPipeDef(declaredWithDefs)) {\n                scopes.compilation.pipes.add(declared);\n            }\n            else {\n                // Either declared has an ngComponentDef or ngDirectiveDef, or it's a component which hasn't\n                // had its template compiled yet. In either case, it gets added to the compilation's\n                // directives.\n                scopes.compilation.directives.add(declared);\n            }\n        });\n        maybeUnwrapFn(def.imports).forEach(function (imported) {\n            var importedType = imported;\n            if (!isNgModule(importedType)) {\n                throw new Error(\"Importing \" + importedType.name + \" which does not have an ngModuleDef\");\n            }\n            if (processNgModuleFn) {\n                processNgModuleFn(importedType);\n            }\n            // When this module imports another, the imported module's exported directives and pipes are\n            // added to the compilation scope of this module.\n            var importedScope = transitiveScopesFor(importedType, processNgModuleFn);\n            importedScope.exported.directives.forEach(function (entry) { return scopes.compilation.directives.add(entry); });\n            importedScope.exported.pipes.forEach(function (entry) { return scopes.compilation.pipes.add(entry); });\n        });\n        maybeUnwrapFn(def.exports).forEach(function (exported) {\n            var exportedType = exported;\n            // Either the type is a module, a pipe, or a component/directive (which may not have an\n            // ngComponentDef as it might be compiled asynchronously).\n            if (isNgModule(exportedType)) {\n                // When this module exports another, the exported module's exported directives and pipes are\n                // added to both the compilation and exported scopes of this module.\n                var exportedScope = transitiveScopesFor(exportedType, processNgModuleFn);\n                exportedScope.exported.directives.forEach(function (entry) {\n                    scopes.compilation.directives.add(entry);\n                    scopes.exported.directives.add(entry);\n                });\n                exportedScope.exported.pipes.forEach(function (entry) {\n                    scopes.compilation.pipes.add(entry);\n                    scopes.exported.pipes.add(entry);\n                });\n            }\n            else if (getPipeDef(exportedType)) {\n                scopes.exported.pipes.add(exportedType);\n            }\n            else {\n                scopes.exported.directives.add(exportedType);\n            }\n        });\n        def.transitiveCompileScopes = scopes;\n        return scopes;\n    }\n    function expandModuleWithProviders(value) {\n        if (isModuleWithProviders(value)) {\n            return value.ngModule;\n        }\n        return value;\n    }\n    function isModuleWithProviders(value) {\n        return value.ngModule !== undefined;\n    }\n    function isNgModule(value) {\n        return !!getNgModuleDef(value);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Compile an Angular component according to its decorator metadata, and patch the resulting\n     * ngComponentDef onto the component type.\n     *\n     * Compilation may be asynchronous (due to the need to resolve URLs for the component template or\n     * other resources, for example). In the event that compilation is not immediate, `compileComponent`\n     * will enqueue resource resolution into a global queue and will fail to return the `ngComponentDef`\n     * until the global queue has been resolved with a call to `resolveComponentResources`.\n     */\n    function compileComponent(type, metadata) {\n        var ngComponentDef = null;\n        // Metadata may have resources which need to be resolved.\n        maybeQueueResolutionOfComponentResources(type, metadata);\n        Object.defineProperty(type, NG_COMPONENT_DEF, {\n            get: function () {\n                var compiler = getCompilerFacade();\n                if (ngComponentDef === null) {\n                    if (componentNeedsResolution(metadata)) {\n                        var error = [\"Component '\" + type.name + \"' is not resolved:\"];\n                        if (metadata.templateUrl) {\n                            error.push(\" - templateUrl: \" + metadata.templateUrl);\n                        }\n                        if (metadata.styleUrls && metadata.styleUrls.length) {\n                            error.push(\" - styleUrls: \" + JSON.stringify(metadata.styleUrls));\n                        }\n                        error.push(\"Did you run and wait for 'resolveComponentResources()'?\");\n                        throw new Error(error.join('\\n'));\n                    }\n                    var templateUrl = metadata.templateUrl || \"ng:///\" + type.name + \"/template.html\";\n                    var meta = __assign({}, directiveMetadata(type, metadata), { typeSourceSpan: compiler.createParseSourceSpan('Component', type.name, templateUrl), template: metadata.template || '', preserveWhitespaces: metadata.preserveWhitespaces || false, styles: metadata.styles || EMPTY_ARRAY$1, animations: metadata.animations, directives: [], changeDetection: metadata.changeDetection, pipes: new Map(), encapsulation: metadata.encapsulation || exports.ViewEncapsulation.Emulated, interpolation: metadata.interpolation, viewProviders: metadata.viewProviders || null });\n                    if (meta.usesInheritance) {\n                        addBaseDefToUndecoratedParents(type);\n                    }\n                    ngComponentDef = compiler.compileComponent(angularCoreEnv, templateUrl, meta);\n                    // When NgModule decorator executed, we enqueued the module definition such that\n                    // it would only dequeue and add itself as module scope to all of its declarations,\n                    // but only if  if all of its declarations had resolved. This call runs the check\n                    // to see if any modules that are in the queue can be dequeued and add scope to\n                    // their declarations.\n                    flushModuleScopingQueueAsMuchAsPossible();\n                    // If component compilation is async, then the @NgModule annotation which declares the\n                    // component may execute and set an ngSelectorScope property on the component type. This\n                    // allows the component to patch itself with directiveDefs from the module after it\n                    // finishes compiling.\n                    if (hasSelectorScope(type)) {\n                        var scopes = transitiveScopesFor(type.ngSelectorScope);\n                        patchComponentDefWithScope(ngComponentDef, scopes);\n                    }\n                }\n                return ngComponentDef;\n            },\n            // Make the property configurable in dev mode to allow overriding in tests\n            configurable: !!ngDevMode,\n        });\n        // Add ngInjectableDef so components are reachable through the module injector by default\n        // This is mostly to support injecting components in tests. In real application code,\n        // components should be retrieved through the node injector, so this isn't a problem.\n        compileInjectable(type);\n    }\n    function hasSelectorScope(component) {\n        return component.ngSelectorScope !== undefined;\n    }\n    /**\n     * Compile an Angular directive according to its decorator metadata, and patch the resulting\n     * ngDirectiveDef onto the component type.\n     *\n     * In the event that compilation is not immediate, `compileDirective` will return a `Promise` which\n     * will resolve when compilation completes and the directive becomes usable.\n     */\n    function compileDirective(type, directive) {\n        var ngDirectiveDef = null;\n        Object.defineProperty(type, NG_DIRECTIVE_DEF, {\n            get: function () {\n                if (ngDirectiveDef === null) {\n                    var name_1 = type && type.name;\n                    var sourceMapUrl = \"ng:///\" + name_1 + \"/ngDirectiveDef.js\";\n                    var compiler = getCompilerFacade();\n                    var facade = directiveMetadata(type, directive);\n                    facade.typeSourceSpan = compiler.createParseSourceSpan('Directive', name_1, sourceMapUrl);\n                    if (facade.usesInheritance) {\n                        addBaseDefToUndecoratedParents(type);\n                    }\n                    ngDirectiveDef = compiler.compileDirective(angularCoreEnv, sourceMapUrl, facade);\n                }\n                return ngDirectiveDef;\n            },\n            // Make the property configurable in dev mode to allow overriding in tests\n            configurable: !!ngDevMode,\n        });\n        // Add ngInjectableDef so directives are reachable through the module injector by default\n        // This is mostly to support injecting directives in tests. In real application code,\n        // directives should be retrieved through the node injector, so this isn't a problem.\n        compileInjectable(type);\n    }\n    function extendsDirectlyFromObject(type) {\n        return Object.getPrototypeOf(type.prototype) === Object.prototype;\n    }\n    /**\n     * Extract the `R3DirectiveMetadata` for a particular directive (either a `Directive` or a\n     * `Component`).\n     */\n    function directiveMetadata(type, metadata) {\n        // Reflect inputs and outputs.\n        var propMetadata = getReflect().ownPropMetadata(type);\n        return {\n            name: type.name,\n            type: type,\n            typeArgumentCount: 0,\n            selector: metadata.selector,\n            deps: reflectDependencies(type),\n            host: metadata.host || EMPTY_OBJ,\n            propMetadata: propMetadata,\n            inputs: metadata.inputs || EMPTY_ARRAY$1,\n            outputs: metadata.outputs || EMPTY_ARRAY$1,\n            queries: extractQueriesMetadata(type, propMetadata, isContentQuery),\n            lifecycle: { usesOnChanges: type.prototype.hasOwnProperty('ngOnChanges') },\n            typeSourceSpan: null,\n            usesInheritance: !extendsDirectlyFromObject(type),\n            exportAs: extractExportAs(metadata.exportAs),\n            providers: metadata.providers || null,\n            viewQueries: extractQueriesMetadata(type, propMetadata, isViewQuery),\n        };\n    }\n    /**\n     * Adds an `ngBaseDef` to all parent classes of a type that don't have an Angular decorator.\n     */\n    function addBaseDefToUndecoratedParents(type) {\n        var objPrototype = Object.prototype;\n        var parent = Object.getPrototypeOf(type);\n        // Go up the prototype until we hit `Object`.\n        while (parent && parent !== objPrototype) {\n            // Since inheritance works if the class was annotated already, we only need to add\n            // the base def if there are no annotations and the base def hasn't been created already.\n            if (!getDirectiveDef(parent) && !getComponentDef(parent) && !getBaseDef(parent)) {\n                var facade = extractBaseDefMetadata(parent);\n                facade && compileBase(parent, facade);\n            }\n            parent = Object.getPrototypeOf(parent);\n        }\n    }\n    /** Compiles the base metadata into a base definition. */\n    function compileBase(type, facade) {\n        var ngBaseDef = null;\n        Object.defineProperty(type, NG_BASE_DEF, {\n            get: function () {\n                if (ngBaseDef === null) {\n                    var name_2 = type && type.name;\n                    var sourceMapUrl = \"ng://\" + name_2 + \"/ngBaseDef.js\";\n                    var compiler = getCompilerFacade();\n                    ngBaseDef = compiler.compileBase(angularCoreEnv, sourceMapUrl, facade);\n                }\n                return ngBaseDef;\n            },\n            // Make the property configurable in dev mode to allow overriding in tests\n            configurable: !!ngDevMode,\n        });\n    }\n    /** Extracts the metadata necessary to construct an `ngBaseDef` from a class. */\n    function extractBaseDefMetadata(type) {\n        var propMetadata = getReflect().ownPropMetadata(type);\n        var viewQueries = extractQueriesMetadata(type, propMetadata, isViewQuery);\n        var queries = extractQueriesMetadata(type, propMetadata, isContentQuery);\n        var inputs;\n        var outputs;\n        // We only need to know whether there are any HostListener or HostBinding\n        // decorators present, the parsing logic is in the compiler already.\n        var hasHostDecorators = false;\n        var _loop_1 = function (field) {\n            propMetadata[field].forEach(function (ann) {\n                var metadataName = ann.ngMetadataName;\n                if (metadataName === 'Input') {\n                    inputs = inputs || {};\n                    inputs[field] = ann.bindingPropertyName ? [ann.bindingPropertyName, field] : field;\n                }\n                else if (metadataName === 'Output') {\n                    outputs = outputs || {};\n                    outputs[field] = ann.bindingPropertyName || field;\n                }\n                else if (metadataName === 'HostBinding' || metadataName === 'HostListener') {\n                    hasHostDecorators = true;\n                }\n            });\n        };\n        for (var field in propMetadata) {\n            _loop_1(field);\n        }\n        // Only generate the base def if there's any info inside it.\n        if (inputs || outputs || viewQueries.length || queries.length || hasHostDecorators) {\n            return { name: type.name, inputs: inputs, outputs: outputs, viewQueries: viewQueries, queries: queries, propMetadata: propMetadata };\n        }\n        return null;\n    }\n    function convertToR3QueryPredicate(selector) {\n        return typeof selector === 'string' ? splitByComma(selector) : resolveForwardRef(selector);\n    }\n    function convertToR3QueryMetadata(propertyName, ann) {\n        return {\n            propertyName: propertyName,\n            predicate: convertToR3QueryPredicate(ann.selector),\n            descendants: ann.descendants,\n            first: ann.first,\n            read: ann.read ? ann.read : null,\n            static: !!ann.static\n        };\n    }\n    function extractQueriesMetadata(type, propMetadata, isQueryAnn) {\n        var queriesMeta = [];\n        var _loop_2 = function (field) {\n            if (propMetadata.hasOwnProperty(field)) {\n                var annotations_1 = propMetadata[field];\n                annotations_1.forEach(function (ann) {\n                    if (isQueryAnn(ann)) {\n                        if (!ann.selector) {\n                            throw new Error(\"Can't construct a query for the property \\\"\" + field + \"\\\" of \" +\n                                (\"\\\"\" + stringifyForError(type) + \"\\\" since the query selector wasn't defined.\"));\n                        }\n                        if (annotations_1.some(isInputAnn)) {\n                            throw new Error(\"Cannot combine @Input decorators with query decorators\");\n                        }\n                        queriesMeta.push(convertToR3QueryMetadata(field, ann));\n                    }\n                });\n            }\n        };\n        for (var field in propMetadata) {\n            _loop_2(field);\n        }\n        return queriesMeta;\n    }\n    function extractExportAs(exportAs) {\n        if (exportAs === undefined) {\n            return null;\n        }\n        return exportAs.split(',').map(function (part) { return part.trim(); });\n    }\n    function isContentQuery(value) {\n        var name = value.ngMetadataName;\n        return name === 'ContentChild' || name === 'ContentChildren';\n    }\n    function isViewQuery(value) {\n        var name = value.ngMetadataName;\n        return name === 'ViewChild' || name === 'ViewChildren';\n    }\n    function isInputAnn(value) {\n        return value.ngMetadataName === 'Input';\n    }\n    function splitByComma(value) {\n        return value.split(',').map(function (piece) { return piece.trim(); });\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function compilePipe(type, meta) {\n        var ngPipeDef = null;\n        Object.defineProperty(type, NG_PIPE_DEF, {\n            get: function () {\n                if (ngPipeDef === null) {\n                    var typeName = type.name;\n                    ngPipeDef =\n                        getCompilerFacade().compilePipe(angularCoreEnv, \"ng:///\" + typeName + \"/ngPipeDef.js\", {\n                            type: type,\n                            typeArgumentCount: 0,\n                            name: typeName,\n                            deps: reflectDependencies(type),\n                            pipeName: meta.name,\n                            pure: meta.pure !== undefined ? meta.pure : true\n                        });\n                }\n                return ngPipeDef;\n            },\n            // Make the property configurable in dev mode to allow overriding in tests\n            configurable: !!ngDevMode,\n        });\n    }\n\n    /**\n     * Type of the Directive metadata.\n     *\n     * @publicApi\n     */\n    var Directive = makeDecorator('Directive', function (dir) {\n        if (dir === void 0) { dir = {}; }\n        return dir;\n    }, undefined, undefined, function (type, meta) { return SWITCH_COMPILE_DIRECTIVE(type, meta); });\n    /**\n     * Component decorator and metadata.\n     *\n     * @Annotation\n     * @publicApi\n     */\n    var Component = makeDecorator('Component', function (c) {\n        if (c === void 0) { c = {}; }\n        return (__assign({ changeDetection: exports.ChangeDetectionStrategy.Default }, c));\n    }, Directive, undefined, function (type, meta) { return SWITCH_COMPILE_COMPONENT(type, meta); });\n    /**\n     * @Annotation\n     * @publicApi\n     */\n    var Pipe = makeDecorator('Pipe', function (p) { return (__assign({ pure: true }, p)); }, undefined, undefined, function (type, meta) { return SWITCH_COMPILE_PIPE(type, meta); });\n    /**\n     * @Annotation\n     * @publicApi\n     */\n    var Input = makePropDecorator('Input', function (bindingPropertyName) { return ({ bindingPropertyName: bindingPropertyName }); });\n    /**\n     * @Annotation\n     * @publicApi\n     */\n    var Output = makePropDecorator('Output', function (bindingPropertyName) { return ({ bindingPropertyName: bindingPropertyName }); });\n    /**\n     * @Annotation\n     * @publicApi\n     */\n    var HostBinding = makePropDecorator('HostBinding', function (hostPropertyName) { return ({ hostPropertyName: hostPropertyName }); });\n    /**\n     * Binds a CSS event to a host listener and supplies configuration metadata.\n     * Angular invokes the supplied handler method when the host element emits the specified event,\n     * and updates the bound element with the result.\n     * If the handler method returns false, applies `preventDefault` on the bound element.\n     *\n     * @usageNotes\n     *\n     * The following example declares a directive\n     * that attaches a click listener to a button and counts clicks.\n     *\n     * ```\n     * @Directive({selector: 'button[counting]'})\n     * class CountClicks {\n     *   numberOfClicks = 0;\n     *\n     *   @HostListener('click', ['$event.target'])\n     *   onClick(btn) {\n     *     console.log('button', btn, 'number of clicks:', this.numberOfClicks++);\n     *  }\n     * }\n     *\n     * @Component({\n     *   selector: 'app',\n     *   template: '<button counting>Increment</button>',\n     * })\n     * class App {}\n     * ```\n     *\n     * @Annotation\n     * @publicApi\n     */\n    var HostListener = makePropDecorator('HostListener', function (eventName, args) { return ({ eventName: eventName, args: args }); });\n    var SWITCH_COMPILE_COMPONENT__POST_R3__ = compileComponent;\n    var SWITCH_COMPILE_DIRECTIVE__POST_R3__ = compileDirective;\n    var SWITCH_COMPILE_PIPE__POST_R3__ = compilePipe;\n    var SWITCH_COMPILE_COMPONENT = SWITCH_COMPILE_COMPONENT__POST_R3__;\n    var SWITCH_COMPILE_DIRECTIVE = SWITCH_COMPILE_DIRECTIVE__POST_R3__;\n    var SWITCH_COMPILE_PIPE = SWITCH_COMPILE_PIPE__POST_R3__;\n\n    /**\n     * @Annotation\n     * @publicApi\n     */\n    var NgModule = makeDecorator('NgModule', function (ngModule) { return ngModule; }, undefined, undefined, \n    /**\n     * Decorator that marks the following class as an NgModule, and supplies\n     * configuration metadata for it.\n     *\n     * * The `declarations` and `entryComponents` options configure the compiler\n     * with information about what belongs to the NgModule.\n     * * The `providers` options configures the NgModule's injector to provide\n     * dependencies the NgModule members.\n     * * The `imports` and `exports` options bring in members from other modules, and make\n     * this module's members available to others.\n     */\n    function (type, meta) { return SWITCH_COMPILE_NGMODULE(type, meta); });\n    var SWITCH_COMPILE_NGMODULE__POST_R3__ = compileNgModule;\n    var SWITCH_COMPILE_NGMODULE = SWITCH_COMPILE_NGMODULE__POST_R3__;\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A function that will be executed when an application is initialized.\n     *\n     * @publicApi\n     */\n    var APP_INITIALIZER = new InjectionToken('Application Initializer');\n    /**\n     * A class that reflects the state of running {@link APP_INITIALIZER}s.\n     *\n     * @publicApi\n     */\n    var ApplicationInitStatus = /** @class */ (function () {\n        function ApplicationInitStatus(appInits) {\n            var _this = this;\n            this.appInits = appInits;\n            this.initialized = false;\n            this.done = false;\n            this.donePromise = new Promise(function (res, rej) {\n                _this.resolve = res;\n                _this.reject = rej;\n            });\n        }\n        /** @internal */\n        ApplicationInitStatus.prototype.runInitializers = function () {\n            var _this = this;\n            if (this.initialized) {\n                return;\n            }\n            var asyncInitPromises = [];\n            var complete = function () {\n                _this.done = true;\n                _this.resolve();\n            };\n            if (this.appInits) {\n                for (var i = 0; i < this.appInits.length; i++) {\n                    var initResult = this.appInits[i]();\n                    if (isPromise(initResult)) {\n                        asyncInitPromises.push(initResult);\n                    }\n                }\n            }\n            Promise.all(asyncInitPromises).then(function () { complete(); }).catch(function (e) { _this.reject(e); });\n            if (asyncInitPromises.length === 0) {\n                complete();\n            }\n            this.initialized = true;\n        };\n        ApplicationInitStatus.ngInjectableDef = ɵɵdefineInjectable({ token: ApplicationInitStatus, factory: function ApplicationInitStatus_Factory(t) { return new (t || ApplicationInitStatus)(ɵɵinject(APP_INITIALIZER, 8)); }, providedIn: null });\n        return ApplicationInitStatus;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A DI Token representing a unique string id assigned to the application by Angular and used\n     * primarily for prefixing application attributes and CSS styles when\n     * {@link ViewEncapsulation#Emulated ViewEncapsulation.Emulated} is being used.\n     *\n     * If you need to avoid randomly generated value to be used as an application id, you can provide\n     * a custom value via a DI provider <!-- TODO: provider --> configuring the root {@link Injector}\n     * using this token.\n     * @publicApi\n     */\n    var APP_ID = new InjectionToken('AppId');\n    function _appIdRandomProviderFactory() {\n        return \"\" + _randomChar() + _randomChar() + _randomChar();\n    }\n    /**\n     * Providers that will generate a random APP_ID_TOKEN.\n     * @publicApi\n     */\n    var APP_ID_RANDOM_PROVIDER = {\n        provide: APP_ID,\n        useFactory: _appIdRandomProviderFactory,\n        deps: [],\n    };\n    function _randomChar() {\n        return String.fromCharCode(97 + Math.floor(Math.random() * 25));\n    }\n    /**\n     * A function that will be executed when a platform is initialized.\n     * @publicApi\n     */\n    var PLATFORM_INITIALIZER = new InjectionToken('Platform Initializer');\n    /**\n     * A token that indicates an opaque platform id.\n     * @publicApi\n     */\n    var PLATFORM_ID = new InjectionToken('Platform ID');\n    /**\n     * All callbacks provided via this token will be called for every component that is bootstrapped.\n     * Signature of the callback:\n     *\n     * `(componentRef: ComponentRef) => void`.\n     *\n     * @publicApi\n     */\n    var APP_BOOTSTRAP_LISTENER = new InjectionToken('appBootstrapListener');\n    /**\n     * A token which indicates the root directory of the application\n     * @publicApi\n     */\n    var PACKAGE_ROOT_URL = new InjectionToken('Application Packages Root URL');\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var Console = /** @class */ (function () {\n        function Console() {\n        }\n        Console.prototype.log = function (message) {\n            // tslint:disable-next-line:no-console\n            console.log(message);\n        };\n        // Note: for reporting errors use `DOM.logError()` as it is platform specific\n        Console.prototype.warn = function (message) {\n            // tslint:disable-next-line:no-console\n            console.warn(message);\n        };\n        Console.ngInjectableDef = ɵɵdefineInjectable({ token: Console, factory: function Console_Factory(t) { return new (t || Console)(); }, providedIn: null });\n        return Console;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Provide this token to set the locale of your application.\n     * It is used for i18n extraction, by i18n pipes (DatePipe, I18nPluralPipe, CurrencyPipe,\n     * DecimalPipe and PercentPipe) and by ICU expressions.\n     *\n     * See the [i18n guide](guide/i18n#setting-up-locale) for more information.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * import { LOCALE_ID } from '@angular/core';\n     * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n     * import { AppModule } from './app/app.module';\n     *\n     * platformBrowserDynamic().bootstrapModule(AppModule, {\n     *   providers: [{provide: LOCALE_ID, useValue: 'en-US' }]\n     * });\n     * ```\n     *\n     * @publicApi\n     */\n    var LOCALE_ID$1 = new InjectionToken('LocaleId');\n    /**\n     * Use this token at bootstrap to provide the content of your translation file (`xtb`,\n     * `xlf` or `xlf2`) when you want to translate your application in another language.\n     *\n     * See the [i18n guide](guide/i18n#merge) for more information.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * import { TRANSLATIONS } from '@angular/core';\n     * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n     * import { AppModule } from './app/app.module';\n     *\n     * // content of your translation file\n     * const translations = '....';\n     *\n     * platformBrowserDynamic().bootstrapModule(AppModule, {\n     *   providers: [{provide: TRANSLATIONS, useValue: translations }]\n     * });\n     * ```\n     *\n     * @publicApi\n     */\n    var TRANSLATIONS$1 = new InjectionToken('Translations');\n    /**\n     * Provide this token at bootstrap to set the format of your {@link TRANSLATIONS}: `xtb`,\n     * `xlf` or `xlf2`.\n     *\n     * See the [i18n guide](guide/i18n#merge) for more information.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * import { TRANSLATIONS_FORMAT } from '@angular/core';\n     * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n     * import { AppModule } from './app/app.module';\n     *\n     * platformBrowserDynamic().bootstrapModule(AppModule, {\n     *   providers: [{provide: TRANSLATIONS_FORMAT, useValue: 'xlf' }]\n     * });\n     * ```\n     *\n     * @publicApi\n     */\n    var TRANSLATIONS_FORMAT = new InjectionToken('TranslationsFormat');\n    (function (MissingTranslationStrategy) {\n        MissingTranslationStrategy[MissingTranslationStrategy[\"Error\"] = 0] = \"Error\";\n        MissingTranslationStrategy[MissingTranslationStrategy[\"Warning\"] = 1] = \"Warning\";\n        MissingTranslationStrategy[MissingTranslationStrategy[\"Ignore\"] = 2] = \"Ignore\";\n    })(exports.MissingTranslationStrategy || (exports.MissingTranslationStrategy = {}));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Combination of NgModuleFactory and ComponentFactorys.\n     *\n     * @publicApi\n     */\n    var ModuleWithComponentFactories = /** @class */ (function () {\n        function ModuleWithComponentFactories(ngModuleFactory, componentFactories) {\n            this.ngModuleFactory = ngModuleFactory;\n            this.componentFactories = componentFactories;\n        }\n        return ModuleWithComponentFactories;\n    }());\n    var Compiler_compileModuleSync__POST_R3__ = function (moduleType) {\n        return new NgModuleFactory$1(moduleType);\n    };\n    var Compiler_compileModuleSync = Compiler_compileModuleSync__POST_R3__;\n    var Compiler_compileModuleAsync__POST_R3__ = function (moduleType) {\n        return Promise.resolve(Compiler_compileModuleSync__POST_R3__(moduleType));\n    };\n    var Compiler_compileModuleAsync = Compiler_compileModuleAsync__POST_R3__;\n    var Compiler_compileModuleAndAllComponentsSync__POST_R3__ = function (moduleType) {\n        var ngModuleFactory = Compiler_compileModuleSync__POST_R3__(moduleType);\n        var moduleDef = getNgModuleDef(moduleType);\n        var componentFactories = maybeUnwrapFn(moduleDef.declarations)\n            .reduce(function (factories, declaration) {\n            var componentDef = getComponentDef(declaration);\n            componentDef && factories.push(new ComponentFactory$1(componentDef));\n            return factories;\n        }, []);\n        return new ModuleWithComponentFactories(ngModuleFactory, componentFactories);\n    };\n    var Compiler_compileModuleAndAllComponentsSync = Compiler_compileModuleAndAllComponentsSync__POST_R3__;\n    var Compiler_compileModuleAndAllComponentsAsync__POST_R3__ = function (moduleType) {\n        return Promise.resolve(Compiler_compileModuleAndAllComponentsSync__POST_R3__(moduleType));\n    };\n    var Compiler_compileModuleAndAllComponentsAsync = Compiler_compileModuleAndAllComponentsAsync__POST_R3__;\n    /**\n     * Low-level service for running the angular compiler during runtime\n     * to create {@link ComponentFactory}s, which\n     * can later be used to create and render a Component instance.\n     *\n     * Each `@NgModule` provides an own `Compiler` to its injector,\n     * that will use the directives/pipes of the ng module for compilation\n     * of components.\n     *\n     * @publicApi\n     */\n    var Compiler = /** @class */ (function () {\n        function Compiler() {\n            /**\n             * Compiles the given NgModule and all of its components. All templates of the components listed\n             * in `entryComponents` have to be inlined.\n             */\n            this.compileModuleSync = Compiler_compileModuleSync;\n            /**\n             * Compiles the given NgModule and all of its components\n             */\n            this.compileModuleAsync = Compiler_compileModuleAsync;\n            /**\n             * Same as {@link #compileModuleSync} but also creates ComponentFactories for all components.\n             */\n            this.compileModuleAndAllComponentsSync = Compiler_compileModuleAndAllComponentsSync;\n            /**\n             * Same as {@link #compileModuleAsync} but also creates ComponentFactories for all components.\n             */\n            this.compileModuleAndAllComponentsAsync = Compiler_compileModuleAndAllComponentsAsync;\n        }\n        /**\n         * Clears all caches.\n         */\n        Compiler.prototype.clearCache = function () { };\n        /**\n         * Clears the cache for the given component/ngModule.\n         */\n        Compiler.prototype.clearCacheFor = function (type) { };\n        /**\n         * Returns the id for a given NgModule, if one is defined and known to the compiler.\n         */\n        Compiler.prototype.getModuleId = function (moduleType) { return undefined; };\n        Compiler.ngInjectableDef = ɵɵdefineInjectable({ token: Compiler, factory: function Compiler_Factory(t) { return new (t || Compiler)(); }, providedIn: null });\n        return Compiler;\n    }());\n    /**\n     * Token to provide CompilerOptions in the platform injector.\n     *\n     * @publicApi\n     */\n    var COMPILER_OPTIONS = new InjectionToken('compilerOptions');\n    /**\n     * A factory for creating a Compiler\n     *\n     * @publicApi\n     */\n    var CompilerFactory = /** @class */ (function () {\n        function CompilerFactory() {\n        }\n        return CompilerFactory;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var trace;\n    var events;\n    function detectWTF() {\n        var wtf = _global /** TODO #9100 */['wtf'];\n        if (wtf) {\n            trace = wtf['trace'];\n            if (trace) {\n                events = trace['events'];\n                return true;\n            }\n        }\n        return false;\n    }\n    function createScope(signature, flags) {\n        if (flags === void 0) { flags = null; }\n        return events.createScope(signature, flags);\n    }\n    function leave(scope, returnValue) {\n        trace.leaveScope(scope, returnValue);\n        return returnValue;\n    }\n    function startTimeRange(rangeType, action) {\n        return trace.beginTimeRange(rangeType, action);\n    }\n    function endTimeRange(range) {\n        trace.endTimeRange(range);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * True if WTF is enabled.\n     */\n    var wtfEnabled = detectWTF();\n    function noopScope(arg0, arg1) {\n        return null;\n    }\n    /**\n     * Create trace scope.\n     *\n     * Scopes must be strictly nested and are analogous to stack frames, but\n     * do not have to follow the stack frames. Instead it is recommended that they follow logical\n     * nesting. You may want to use\n     * [Event\n     * Signatures](http://google.github.io/tracing-framework/instrumenting-code.html#custom-events)\n     * as they are defined in WTF.\n     *\n     * Used to mark scope entry. The return value is used to leave the scope.\n     *\n     *     var myScope = wtfCreateScope('MyClass#myMethod(ascii someVal)');\n     *\n     *     someMethod() {\n     *        var s = myScope('Foo'); // 'Foo' gets stored in tracing UI\n     *        // DO SOME WORK HERE\n     *        return wtfLeave(s, 123); // Return value 123\n     *     }\n     *\n     * Note, adding try-finally block around the work to ensure that `wtfLeave` gets called can\n     * negatively impact the performance of your application. For this reason we recommend that\n     * you don't add them to ensure that `wtfLeave` gets called. In production `wtfLeave` is a noop and\n     * so try-finally block has no value. When debugging perf issues, skipping `wtfLeave`, do to\n     * exception, will produce incorrect trace, but presence of exception signifies logic error which\n     * needs to be fixed before the app should be profiled. Add try-finally only when you expect that\n     * an exception is expected during normal execution while profiling.\n     *\n     * @publicApi\n     * @deprecated the Web Tracing Framework is no longer supported in Angular\n     */\n    var wtfCreateScope = wtfEnabled ? createScope : function (signature, flags) { return noopScope; };\n    /**\n     * Used to mark end of Scope.\n     *\n     * - `scope` to end.\n     * - `returnValue` (optional) to be passed to the WTF.\n     *\n     * Returns the `returnValue for easy chaining.\n     * @publicApi\n     * @deprecated the Web Tracing Framework is no longer supported in Angular\n     */\n    var wtfLeave = wtfEnabled ? leave : function (s, r) { return r; };\n    /**\n     * Used to mark Async start. Async are similar to scope but they don't have to be strictly nested.\n     * The return value is used in the call to [endAsync]. Async ranges only work if WTF has been\n     * enabled.\n     *\n     *     someMethod() {\n     *        var s = wtfStartTimeRange('HTTP:GET', 'some.url');\n     *        var future = new Future.delay(5).then((_) {\n     *          wtfEndTimeRange(s);\n     *        });\n     *     }\n     * @publicApi\n     * @deprecated the Web Tracing Framework is no longer supported in Angular\n     */\n    var wtfStartTimeRange = wtfEnabled ? startTimeRange : function (rangeType, action) { return null; };\n    /**\n     * Ends a async time range operation.\n     * [range] is the return value from [wtfStartTimeRange] Async ranges only work if WTF has been\n     * enabled.\n     * @publicApi\n     * @deprecated the Web Tracing Framework is no longer supported in Angular\n     */\n    var wtfEndTimeRange = wtfEnabled ? endTimeRange : function (r) { return null; };\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var promise = (function () { return Promise.resolve(0); })();\n    function scheduleMicroTask(fn) {\n        if (typeof Zone === 'undefined') {\n            // use promise to schedule microTask instead of use Zone\n            promise.then(function () { fn && fn.apply(null, null); });\n        }\n        else {\n            Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * An injectable service for executing work inside or outside of the Angular zone.\n     *\n     * The most common use of this service is to optimize performance when starting a work consisting of\n     * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\n     * Angular. Such tasks can be kicked off via {@link #runOutsideAngular} and if needed, these tasks\n     * can reenter the Angular zone via {@link #run}.\n     *\n     * <!-- TODO: add/fix links to:\n     *   - docs explaining zones and the use of zones in Angular and change-detection\n     *   - link to runOutsideAngular/run (throughout this file!)\n     *   -->\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```\n     * import {Component, NgZone} from '@angular/core';\n     * import {NgIf} from '@angular/common';\n     *\n     * @Component({\n     *   selector: 'ng-zone-demo',\n     *   template: `\n     *     <h2>Demo: NgZone</h2>\n     *\n     *     <p>Progress: {{progress}}%</p>\n     *     <p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!</p>\n     *\n     *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\n     *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\n     *   `,\n     * })\n     * export class NgZoneDemo {\n     *   progress: number = 0;\n     *   label: string;\n     *\n     *   constructor(private _ngZone: NgZone) {}\n     *\n     *   // Loop inside the Angular zone\n     *   // so the UI DOES refresh after each setTimeout cycle\n     *   processWithinAngularZone() {\n     *     this.label = 'inside';\n     *     this.progress = 0;\n     *     this._increaseProgress(() => console.log('Inside Done!'));\n     *   }\n     *\n     *   // Loop outside of the Angular zone\n     *   // so the UI DOES NOT refresh after each setTimeout cycle\n     *   processOutsideOfAngularZone() {\n     *     this.label = 'outside';\n     *     this.progress = 0;\n     *     this._ngZone.runOutsideAngular(() => {\n     *       this._increaseProgress(() => {\n     *         // reenter the Angular zone and display done\n     *         this._ngZone.run(() => { console.log('Outside Done!'); });\n     *       });\n     *     });\n     *   }\n     *\n     *   _increaseProgress(doneCallback: () => void) {\n     *     this.progress += 1;\n     *     console.log(`Current progress: ${this.progress}%`);\n     *\n     *     if (this.progress < 100) {\n     *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);\n     *     } else {\n     *       doneCallback();\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * @publicApi\n     */\n    var NgZone = /** @class */ (function () {\n        function NgZone(_a) {\n            var _b = _a.enableLongStackTrace, enableLongStackTrace = _b === void 0 ? false : _b;\n            this.hasPendingMicrotasks = false;\n            this.hasPendingMacrotasks = false;\n            /**\n             * Whether there are no outstanding microtasks or macrotasks.\n             */\n            this.isStable = true;\n            /**\n             * Notifies when code enters Angular Zone. This gets fired first on VM Turn.\n             */\n            this.onUnstable = new EventEmitter(false);\n            /**\n             * Notifies when there is no more microtasks enqueued in the current VM Turn.\n             * This is a hint for Angular to do change detection, which may enqueue more microtasks.\n             * For this reason this event can fire multiple times per VM Turn.\n             */\n            this.onMicrotaskEmpty = new EventEmitter(false);\n            /**\n             * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which\n             * implies we are about to relinquish VM turn.\n             * This event gets called just once.\n             */\n            this.onStable = new EventEmitter(false);\n            /**\n             * Notifies that an error has been delivered.\n             */\n            this.onError = new EventEmitter(false);\n            if (typeof Zone == 'undefined') {\n                throw new Error(\"In this configuration Angular requires Zone.js\");\n            }\n            Zone.assertZonePatched();\n            var self = this;\n            self._nesting = 0;\n            self._outer = self._inner = Zone.current;\n            if (Zone['wtfZoneSpec']) {\n                self._inner = self._inner.fork(Zone['wtfZoneSpec']);\n            }\n            if (Zone['TaskTrackingZoneSpec']) {\n                self._inner = self._inner.fork(new Zone['TaskTrackingZoneSpec']);\n            }\n            if (enableLongStackTrace && Zone['longStackTraceZoneSpec']) {\n                self._inner = self._inner.fork(Zone['longStackTraceZoneSpec']);\n            }\n            forkInnerZoneWithAngularBehavior(self);\n        }\n        NgZone.isInAngularZone = function () { return Zone.current.get('isAngularZone') === true; };\n        NgZone.assertInAngularZone = function () {\n            if (!NgZone.isInAngularZone()) {\n                throw new Error('Expected to be in Angular Zone, but it is not!');\n            }\n        };\n        NgZone.assertNotInAngularZone = function () {\n            if (NgZone.isInAngularZone()) {\n                throw new Error('Expected to not be in Angular Zone, but it is!');\n            }\n        };\n        /**\n         * Executes the `fn` function synchronously within the Angular zone and returns value returned by\n         * the function.\n         *\n         * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n         * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\n         *\n         * Any future tasks or microtasks scheduled from within this function will continue executing from\n         * within the Angular zone.\n         *\n         * If a synchronous error happens it will be rethrown and not reported via `onError`.\n         */\n        NgZone.prototype.run = function (fn, applyThis, applyArgs) {\n            return this._inner.run(fn, applyThis, applyArgs);\n        };\n        /**\n         * Executes the `fn` function synchronously within the Angular zone as a task and returns value\n         * returned by the function.\n         *\n         * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n         * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\n         *\n         * Any future tasks or microtasks scheduled from within this function will continue executing from\n         * within the Angular zone.\n         *\n         * If a synchronous error happens it will be rethrown and not reported via `onError`.\n         */\n        NgZone.prototype.runTask = function (fn, applyThis, applyArgs, name) {\n            var zone = this._inner;\n            var task = zone.scheduleEventTask('NgZoneEvent: ' + name, fn, EMPTY_PAYLOAD, noop, noop);\n            try {\n                return zone.runTask(task, applyThis, applyArgs);\n            }\n            finally {\n                zone.cancelTask(task);\n            }\n        };\n        /**\n         * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\n         * rethrown.\n         */\n        NgZone.prototype.runGuarded = function (fn, applyThis, applyArgs) {\n            return this._inner.runGuarded(fn, applyThis, applyArgs);\n        };\n        /**\n         * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\n         * the function.\n         *\n         * Running functions via {@link #runOutsideAngular} allows you to escape Angular's zone and do\n         * work that\n         * doesn't trigger Angular change-detection or is subject to Angular's error handling.\n         *\n         * Any future tasks or microtasks scheduled from within this function will continue executing from\n         * outside of the Angular zone.\n         *\n         * Use {@link #run} to reenter the Angular zone and do work that updates the application model.\n         */\n        NgZone.prototype.runOutsideAngular = function (fn) {\n            return this._outer.run(fn);\n        };\n        return NgZone;\n    }());\n    function noop() { }\n    var EMPTY_PAYLOAD = {};\n    function checkStable(zone) {\n        if (zone._nesting == 0 && !zone.hasPendingMicrotasks && !zone.isStable) {\n            try {\n                zone._nesting++;\n                zone.onMicrotaskEmpty.emit(null);\n            }\n            finally {\n                zone._nesting--;\n                if (!zone.hasPendingMicrotasks) {\n                    try {\n                        zone.runOutsideAngular(function () { return zone.onStable.emit(null); });\n                    }\n                    finally {\n                        zone.isStable = true;\n                    }\n                }\n            }\n        }\n    }\n    function forkInnerZoneWithAngularBehavior(zone) {\n        zone._inner = zone._inner.fork({\n            name: 'angular',\n            properties: { 'isAngularZone': true },\n            onInvokeTask: function (delegate, current, target, task, applyThis, applyArgs) {\n                try {\n                    onEnter(zone);\n                    return delegate.invokeTask(target, task, applyThis, applyArgs);\n                }\n                finally {\n                    onLeave(zone);\n                }\n            },\n            onInvoke: function (delegate, current, target, callback, applyThis, applyArgs, source) {\n                try {\n                    onEnter(zone);\n                    return delegate.invoke(target, callback, applyThis, applyArgs, source);\n                }\n                finally {\n                    onLeave(zone);\n                }\n            },\n            onHasTask: function (delegate, current, target, hasTaskState) {\n                delegate.hasTask(target, hasTaskState);\n                if (current === target) {\n                    // We are only interested in hasTask events which originate from our zone\n                    // (A child hasTask event is not interesting to us)\n                    if (hasTaskState.change == 'microTask') {\n                        zone.hasPendingMicrotasks = hasTaskState.microTask;\n                        checkStable(zone);\n                    }\n                    else if (hasTaskState.change == 'macroTask') {\n                        zone.hasPendingMacrotasks = hasTaskState.macroTask;\n                    }\n                }\n            },\n            onHandleError: function (delegate, current, target, error) {\n                delegate.handleError(target, error);\n                zone.runOutsideAngular(function () { return zone.onError.emit(error); });\n                return false;\n            }\n        });\n    }\n    function onEnter(zone) {\n        zone._nesting++;\n        if (zone.isStable) {\n            zone.isStable = false;\n            zone.onUnstable.emit(null);\n        }\n    }\n    function onLeave(zone) {\n        zone._nesting--;\n        checkStable(zone);\n    }\n    /**\n     * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls\n     * to framework to perform rendering.\n     */\n    var NoopNgZone = /** @class */ (function () {\n        function NoopNgZone() {\n            this.hasPendingMicrotasks = false;\n            this.hasPendingMacrotasks = false;\n            this.isStable = true;\n            this.onUnstable = new EventEmitter();\n            this.onMicrotaskEmpty = new EventEmitter();\n            this.onStable = new EventEmitter();\n            this.onError = new EventEmitter();\n        }\n        NoopNgZone.prototype.run = function (fn) { return fn(); };\n        NoopNgZone.prototype.runGuarded = function (fn) { return fn(); };\n        NoopNgZone.prototype.runOutsideAngular = function (fn) { return fn(); };\n        NoopNgZone.prototype.runTask = function (fn) { return fn(); };\n        return NoopNgZone;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * The Testability service provides testing hooks that can be accessed from\n     * the browser and by services such as Protractor. Each bootstrapped Angular\n     * application on the page will have an instance of Testability.\n     * @publicApi\n     */\n    var Testability = /** @class */ (function () {\n        function Testability(_ngZone) {\n            var _this = this;\n            this._ngZone = _ngZone;\n            this._pendingCount = 0;\n            this._isZoneStable = true;\n            /**\n             * Whether any work was done since the last 'whenStable' callback. This is\n             * useful to detect if this could have potentially destabilized another\n             * component while it is stabilizing.\n             * @internal\n             */\n            this._didWork = false;\n            this._callbacks = [];\n            this.taskTrackingZone = null;\n            this._watchAngularEvents();\n            _ngZone.run(function () {\n                _this.taskTrackingZone =\n                    typeof Zone == 'undefined' ? null : Zone.current.get('TaskTrackingZone');\n            });\n        }\n        Testability.prototype._watchAngularEvents = function () {\n            var _this = this;\n            this._ngZone.onUnstable.subscribe({\n                next: function () {\n                    _this._didWork = true;\n                    _this._isZoneStable = false;\n                }\n            });\n            this._ngZone.runOutsideAngular(function () {\n                _this._ngZone.onStable.subscribe({\n                    next: function () {\n                        NgZone.assertNotInAngularZone();\n                        scheduleMicroTask(function () {\n                            _this._isZoneStable = true;\n                            _this._runCallbacksIfReady();\n                        });\n                    }\n                });\n            });\n        };\n        /**\n         * Increases the number of pending request\n         * @deprecated pending requests are now tracked with zones.\n         */\n        Testability.prototype.increasePendingRequestCount = function () {\n            this._pendingCount += 1;\n            this._didWork = true;\n            return this._pendingCount;\n        };\n        /**\n         * Decreases the number of pending request\n         * @deprecated pending requests are now tracked with zones\n         */\n        Testability.prototype.decreasePendingRequestCount = function () {\n            this._pendingCount -= 1;\n            if (this._pendingCount < 0) {\n                throw new Error('pending async requests below zero');\n            }\n            this._runCallbacksIfReady();\n            return this._pendingCount;\n        };\n        /**\n         * Whether an associated application is stable\n         */\n        Testability.prototype.isStable = function () {\n            return this._isZoneStable && this._pendingCount === 0 && !this._ngZone.hasPendingMacrotasks;\n        };\n        Testability.prototype._runCallbacksIfReady = function () {\n            var _this = this;\n            if (this.isStable()) {\n                // Schedules the call backs in a new frame so that it is always async.\n                scheduleMicroTask(function () {\n                    while (_this._callbacks.length !== 0) {\n                        var cb = _this._callbacks.pop();\n                        clearTimeout(cb.timeoutId);\n                        cb.doneCb(_this._didWork);\n                    }\n                    _this._didWork = false;\n                });\n            }\n            else {\n                // Still not stable, send updates.\n                var pending_1 = this.getPendingTasks();\n                this._callbacks = this._callbacks.filter(function (cb) {\n                    if (cb.updateCb && cb.updateCb(pending_1)) {\n                        clearTimeout(cb.timeoutId);\n                        return false;\n                    }\n                    return true;\n                });\n                this._didWork = true;\n            }\n        };\n        Testability.prototype.getPendingTasks = function () {\n            if (!this.taskTrackingZone) {\n                return [];\n            }\n            // Copy the tasks data so that we don't leak tasks.\n            return this.taskTrackingZone.macroTasks.map(function (t) {\n                return {\n                    source: t.source,\n                    // From TaskTrackingZone:\n                    // https://github.com/angular/zone.js/blob/master/lib/zone-spec/task-tracking.ts#L40\n                    creationLocation: t.creationLocation,\n                    data: t.data\n                };\n            });\n        };\n        Testability.prototype.addCallback = function (cb, timeout, updateCb) {\n            var _this = this;\n            var timeoutId = -1;\n            if (timeout && timeout > 0) {\n                timeoutId = setTimeout(function () {\n                    _this._callbacks = _this._callbacks.filter(function (cb) { return cb.timeoutId !== timeoutId; });\n                    cb(_this._didWork, _this.getPendingTasks());\n                }, timeout);\n            }\n            this._callbacks.push({ doneCb: cb, timeoutId: timeoutId, updateCb: updateCb });\n        };\n        /**\n         * Wait for the application to be stable with a timeout. If the timeout is reached before that\n         * happens, the callback receives a list of the macro tasks that were pending, otherwise null.\n         *\n         * @param doneCb The callback to invoke when Angular is stable or the timeout expires\n         *    whichever comes first.\n         * @param timeout Optional. The maximum time to wait for Angular to become stable. If not\n         *    specified, whenStable() will wait forever.\n         * @param updateCb Optional. If specified, this callback will be invoked whenever the set of\n         *    pending macrotasks changes. If this callback returns true doneCb will not be invoked\n         *    and no further updates will be issued.\n         */\n        Testability.prototype.whenStable = function (doneCb, timeout, updateCb) {\n            if (updateCb && !this.taskTrackingZone) {\n                throw new Error('Task tracking zone is required when passing an update callback to ' +\n                    'whenStable(). Is \"zone.js/dist/task-tracking.js\" loaded?');\n            }\n            // These arguments are 'Function' above to keep the public API simple.\n            this.addCallback(doneCb, timeout, updateCb);\n            this._runCallbacksIfReady();\n        };\n        /**\n         * Get the number of pending requests\n         * @deprecated pending requests are now tracked with zones\n         */\n        Testability.prototype.getPendingRequestCount = function () { return this._pendingCount; };\n        /**\n         * Find providers by name\n         * @param using The root element to search from\n         * @param provider The name of binding variable\n         * @param exactMatch Whether using exactMatch\n         */\n        Testability.prototype.findProviders = function (using, provider, exactMatch) {\n            // TODO(juliemr): implement.\n            return [];\n        };\n        Testability.ngInjectableDef = ɵɵdefineInjectable({ token: Testability, factory: function Testability_Factory(t) { return new (t || Testability)(ɵɵinject(NgZone)); }, providedIn: null });\n        return Testability;\n    }());\n    /**\n     * A global registry of {@link Testability} instances for specific elements.\n     * @publicApi\n     */\n    var TestabilityRegistry = /** @class */ (function () {\n        function TestabilityRegistry() {\n            /** @internal */\n            this._applications = new Map();\n            _testabilityGetter.addToWindow(this);\n        }\n        /**\n         * Registers an application with a testability hook so that it can be tracked\n         * @param token token of application, root element\n         * @param testability Testability hook\n         */\n        TestabilityRegistry.prototype.registerApplication = function (token, testability) {\n            this._applications.set(token, testability);\n        };\n        /**\n         * Unregisters an application.\n         * @param token token of application, root element\n         */\n        TestabilityRegistry.prototype.unregisterApplication = function (token) { this._applications.delete(token); };\n        /**\n         * Unregisters all applications\n         */\n        TestabilityRegistry.prototype.unregisterAllApplications = function () { this._applications.clear(); };\n        /**\n         * Get a testability hook associated with the application\n         * @param elem root element\n         */\n        TestabilityRegistry.prototype.getTestability = function (elem) { return this._applications.get(elem) || null; };\n        /**\n         * Get all registered testabilities\n         */\n        TestabilityRegistry.prototype.getAllTestabilities = function () { return Array.from(this._applications.values()); };\n        /**\n         * Get all registered applications(root elements)\n         */\n        TestabilityRegistry.prototype.getAllRootElements = function () { return Array.from(this._applications.keys()); };\n        /**\n         * Find testability of a node in the Tree\n         * @param elem node\n         * @param findInAncestors whether finding testability in ancestors if testability was not found in\n         * current node\n         */\n        TestabilityRegistry.prototype.findTestabilityInTree = function (elem, findInAncestors) {\n            if (findInAncestors === void 0) { findInAncestors = true; }\n            return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);\n        };\n        TestabilityRegistry.ngInjectableDef = ɵɵdefineInjectable({ token: TestabilityRegistry, factory: function TestabilityRegistry_Factory(t) { return new (t || TestabilityRegistry)(); }, providedIn: null });\n        return TestabilityRegistry;\n    }());\n    var _NoopGetTestability = /** @class */ (function () {\n        function _NoopGetTestability() {\n        }\n        _NoopGetTestability.prototype.addToWindow = function (registry) { };\n        _NoopGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {\n            return null;\n        };\n        return _NoopGetTestability;\n    }());\n    /**\n     * Set the {@link GetTestability} implementation used by the Angular testing framework.\n     * @publicApi\n     */\n    function setTestabilityGetter(getter) {\n        _testabilityGetter = getter;\n    }\n    var _testabilityGetter = new _NoopGetTestability();\n\n    var _platform;\n    var compileNgModuleFactory = compileNgModuleFactory__POST_R3__;\n    function compileNgModuleFactory__POST_R3__(injector, options, moduleType) {\n        ngDevMode && assertNgModuleType(moduleType);\n        var moduleFactory = new NgModuleFactory$1(moduleType);\n        if (isComponentResourceResolutionQueueEmpty()) {\n            return Promise.resolve(moduleFactory);\n        }\n        var compilerOptions = injector.get(COMPILER_OPTIONS, []).concat(options);\n        var compilerProviders = _mergeArrays(compilerOptions.map(function (o) { return o.providers; }));\n        // In case there are no compiler providers, we just return the module factory as\n        // there won't be any resource loader. This can happen with Ivy, because AOT compiled\n        // modules can be still passed through \"bootstrapModule\". In that case we shouldn't\n        // unnecessarily require the JIT compiler.\n        if (compilerProviders.length === 0) {\n            return Promise.resolve(moduleFactory);\n        }\n        var compiler = getCompilerFacade();\n        var compilerInjector = Injector.create({ providers: compilerProviders });\n        var resourceLoader = compilerInjector.get(compiler.ResourceLoader);\n        // The resource loader can also return a string while the \"resolveComponentResources\"\n        // always expects a promise. Therefore we need to wrap the returned value in a promise.\n        return resolveComponentResources(function (url) { return Promise.resolve(resourceLoader.get(url)); })\n            .then(function () { return moduleFactory; });\n    }\n    var isBoundToModule = isBoundToModule__POST_R3__;\n    function isBoundToModule__POST_R3__(cf) {\n        return cf.isBoundToModule;\n    }\n    var ALLOW_MULTIPLE_PLATFORMS = new InjectionToken('AllowMultipleToken');\n    /**\n     * A token for third-party components that can register themselves with NgProbe.\n     *\n     * @publicApi\n     */\n    var NgProbeToken = /** @class */ (function () {\n        function NgProbeToken(name, token) {\n            this.name = name;\n            this.token = token;\n        }\n        return NgProbeToken;\n    }());\n    /**\n     * Creates a platform.\n     * Platforms have to be eagerly created via this function.\n     *\n     * @publicApi\n     */\n    function createPlatform(injector) {\n        if (_platform && !_platform.destroyed &&\n            !_platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n            throw new Error('There can be only one platform. Destroy the previous one to create a new one.');\n        }\n        _platform = injector.get(PlatformRef);\n        var inits = injector.get(PLATFORM_INITIALIZER, null);\n        if (inits)\n            inits.forEach(function (init) { return init(); });\n        return _platform;\n    }\n    /**\n     * Creates a factory for a platform\n     *\n     * @publicApi\n     */\n    function createPlatformFactory(parentPlatformFactory, name, providers) {\n        if (providers === void 0) { providers = []; }\n        var desc = \"Platform: \" + name;\n        var marker = new InjectionToken(desc);\n        return function (extraProviders) {\n            if (extraProviders === void 0) { extraProviders = []; }\n            var platform = getPlatform();\n            if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n                if (parentPlatformFactory) {\n                    parentPlatformFactory(providers.concat(extraProviders).concat({ provide: marker, useValue: true }));\n                }\n                else {\n                    var injectedProviders = providers.concat(extraProviders).concat({ provide: marker, useValue: true });\n                    createPlatform(Injector.create({ providers: injectedProviders, name: desc }));\n                }\n            }\n            return assertPlatform(marker);\n        };\n    }\n    /**\n     * Checks that there currently is a platform which contains the given token as a provider.\n     *\n     * @publicApi\n     */\n    function assertPlatform(requiredToken) {\n        var platform = getPlatform();\n        if (!platform) {\n            throw new Error('No platform exists!');\n        }\n        if (!platform.injector.get(requiredToken, null)) {\n            throw new Error('A platform with a different configuration has been created. Please destroy it first.');\n        }\n        return platform;\n    }\n    /**\n     * Destroy the existing platform.\n     *\n     * @publicApi\n     */\n    function destroyPlatform() {\n        if (_platform && !_platform.destroyed) {\n            _platform.destroy();\n        }\n    }\n    /**\n     * Returns the current platform.\n     *\n     * @publicApi\n     */\n    function getPlatform() {\n        return _platform && !_platform.destroyed ? _platform : null;\n    }\n    /**\n     * The Angular platform is the entry point for Angular on a web page. Each page\n     * has exactly one platform, and services (such as reflection) which are common\n     * to every Angular application running on the page are bound in its scope.\n     *\n     * A page's platform is initialized implicitly when a platform is created via a platform factory\n     * (e.g. {@link platformBrowser}), or explicitly by calling the {@link createPlatform} function.\n     *\n     * @publicApi\n     */\n    var PlatformRef = /** @class */ (function () {\n        /** @internal */\n        function PlatformRef(_injector) {\n            this._injector = _injector;\n            this._modules = [];\n            this._destroyListeners = [];\n            this._destroyed = false;\n        }\n        /**\n         * Creates an instance of an `@NgModule` for the given platform\n         * for offline compilation.\n         *\n         * @usageNotes\n         * ### Simple Example\n         *\n         * ```typescript\n         * my_module.ts:\n         *\n         * @NgModule({\n         *   imports: [BrowserModule]\n         * })\n         * class MyModule {}\n         *\n         * main.ts:\n         * import {MyModuleNgFactory} from './my_module.ngfactory';\n         * import {platformBrowser} from '@angular/platform-browser';\n         *\n         * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\n         * ```\n         */\n        PlatformRef.prototype.bootstrapModuleFactory = function (moduleFactory, options) {\n            var _this = this;\n            // Note: We need to create the NgZone _before_ we instantiate the module,\n            // as instantiating the module creates some providers eagerly.\n            // So we create a mini parent injector that just contains the new NgZone and\n            // pass that as parent to the NgModuleFactory.\n            var ngZoneOption = options ? options.ngZone : undefined;\n            var ngZone = getNgZone(ngZoneOption);\n            var providers = [{ provide: NgZone, useValue: ngZone }];\n            // Attention: Don't use ApplicationRef.run here,\n            // as we want to be sure that all possible constructor calls are inside `ngZone.run`!\n            return ngZone.run(function () {\n                var ngZoneInjector = Injector.create({ providers: providers, parent: _this.injector, name: moduleFactory.moduleType.name });\n                var moduleRef = moduleFactory.create(ngZoneInjector);\n                var exceptionHandler = moduleRef.injector.get(ErrorHandler, null);\n                if (!exceptionHandler) {\n                    throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');\n                }\n                // If the `LOCALE_ID` provider is defined at bootstrap we set the value for runtime i18n (ivy)\n                var localeId = moduleRef.injector.get(LOCALE_ID$1, DEFAULT_LOCALE_ID);\n                setLocaleId(localeId);\n                moduleRef.onDestroy(function () { return remove(_this._modules, moduleRef); });\n                ngZone.runOutsideAngular(function () { return ngZone.onError.subscribe({ next: function (error) { exceptionHandler.handleError(error); } }); });\n                return _callAndReportToErrorHandler(exceptionHandler, ngZone, function () {\n                    var initStatus = moduleRef.injector.get(ApplicationInitStatus);\n                    initStatus.runInitializers();\n                    return initStatus.donePromise.then(function () {\n                        _this._moduleDoBootstrap(moduleRef);\n                        return moduleRef;\n                    });\n                });\n            });\n        };\n        /**\n         * Creates an instance of an `@NgModule` for a given platform using the given runtime compiler.\n         *\n         * @usageNotes\n         * ### Simple Example\n         *\n         * ```typescript\n         * @NgModule({\n         *   imports: [BrowserModule]\n         * })\n         * class MyModule {}\n         *\n         * let moduleRef = platformBrowser().bootstrapModule(MyModule);\n         * ```\n         *\n         */\n        PlatformRef.prototype.bootstrapModule = function (moduleType, compilerOptions) {\n            var _this = this;\n            if (compilerOptions === void 0) { compilerOptions = []; }\n            var options = optionsReducer({}, compilerOptions);\n            return compileNgModuleFactory(this.injector, options, moduleType)\n                .then(function (moduleFactory) { return _this.bootstrapModuleFactory(moduleFactory, options); });\n        };\n        PlatformRef.prototype._moduleDoBootstrap = function (moduleRef) {\n            var appRef = moduleRef.injector.get(ApplicationRef);\n            if (moduleRef._bootstrapComponents.length > 0) {\n                moduleRef._bootstrapComponents.forEach(function (f) { return appRef.bootstrap(f); });\n            }\n            else if (moduleRef.instance.ngDoBootstrap) {\n                moduleRef.instance.ngDoBootstrap(appRef);\n            }\n            else {\n                throw new Error(\"The module \" + stringify(moduleRef.instance.constructor) + \" was bootstrapped, but it does not declare \\\"@NgModule.bootstrap\\\" components nor a \\\"ngDoBootstrap\\\" method. \" +\n                    \"Please define one of these.\");\n            }\n            this._modules.push(moduleRef);\n        };\n        /**\n         * Register a listener to be called when the platform is disposed.\n         */\n        PlatformRef.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback); };\n        Object.defineProperty(PlatformRef.prototype, \"injector\", {\n            /**\n             * Retrieve the platform {@link Injector}, which is the parent injector for\n             * every Angular application on the page and provides singleton providers.\n             */\n            get: function () { return this._injector; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Destroy the Angular platform and all Angular applications on the page.\n         */\n        PlatformRef.prototype.destroy = function () {\n            if (this._destroyed) {\n                throw new Error('The platform has already been destroyed!');\n            }\n            this._modules.slice().forEach(function (module) { return module.destroy(); });\n            this._destroyListeners.forEach(function (listener) { return listener(); });\n            this._destroyed = true;\n        };\n        Object.defineProperty(PlatformRef.prototype, \"destroyed\", {\n            get: function () { return this._destroyed; },\n            enumerable: true,\n            configurable: true\n        });\n        PlatformRef.ngInjectableDef = ɵɵdefineInjectable({ token: PlatformRef, factory: function PlatformRef_Factory(t) { return new (t || PlatformRef)(ɵɵinject(Injector)); }, providedIn: null });\n        return PlatformRef;\n    }());\n    function getNgZone(ngZoneOption) {\n        var ngZone;\n        if (ngZoneOption === 'noop') {\n            ngZone = new NoopNgZone();\n        }\n        else {\n            ngZone = (ngZoneOption === 'zone.js' ? undefined : ngZoneOption) ||\n                new NgZone({ enableLongStackTrace: isDevMode() });\n        }\n        return ngZone;\n    }\n    function _callAndReportToErrorHandler(errorHandler, ngZone, callback) {\n        try {\n            var result = callback();\n            if (isPromise(result)) {\n                return result.catch(function (e) {\n                    ngZone.runOutsideAngular(function () { return errorHandler.handleError(e); });\n                    // rethrow as the exception handler might not do it\n                    throw e;\n                });\n            }\n            return result;\n        }\n        catch (e) {\n            ngZone.runOutsideAngular(function () { return errorHandler.handleError(e); });\n            // rethrow as the exception handler might not do it\n            throw e;\n        }\n    }\n    function optionsReducer(dst, objs) {\n        if (Array.isArray(objs)) {\n            dst = objs.reduce(optionsReducer, dst);\n        }\n        else {\n            dst = __assign({}, dst, objs);\n        }\n        return dst;\n    }\n    /**\n     * A reference to an Angular application running on a page.\n     *\n     * @usageNotes\n     *\n     * {@a is-stable-examples}\n     * ### isStable examples and caveats\n     *\n     * Note two important points about `isStable`, demonstrated in the examples below:\n     * - the application will never be stable if you start any kind\n     * of recurrent asynchronous task when the application starts\n     * (for example for a polling process, started with a `setInterval`, a `setTimeout`\n     * or using RxJS operators like `interval`);\n     * - the `isStable` Observable runs outside of the Angular zone.\n     *\n     * Let's imagine that you start a recurrent task\n     * (here incrementing a counter, using RxJS `interval`),\n     * and at the same time subscribe to `isStable`.\n     *\n     * ```\n     * constructor(appRef: ApplicationRef) {\n     *   appRef.isStable.pipe(\n     *      filter(stable => stable)\n     *   ).subscribe(() => console.log('App is stable now');\n     *   interval(1000).subscribe(counter => console.log(counter));\n     * }\n     * ```\n     * In this example, `isStable` will never emit `true`,\n     * and the trace \"App is stable now\" will never get logged.\n     *\n     * If you want to execute something when the app is stable,\n     * you have to wait for the application to be stable\n     * before starting your polling process.\n     *\n     * ```\n     * constructor(appRef: ApplicationRef) {\n     *   appRef.isStable.pipe(\n     *     first(stable => stable),\n     *     tap(stable => console.log('App is stable now')),\n     *     switchMap(() => interval(1000))\n     *   ).subscribe(counter => console.log(counter));\n     * }\n     * ```\n     * In this example, the trace \"App is stable now\" will be logged\n     * and then the counter starts incrementing every second.\n     *\n     * Note also that this Observable runs outside of the Angular zone,\n     * which means that the code in the subscription\n     * to this Observable will not trigger the change detection.\n     *\n     * Let's imagine that instead of logging the counter value,\n     * you update a field of your component\n     * and display it in its template.\n     *\n     * ```\n     * constructor(appRef: ApplicationRef) {\n     *   appRef.isStable.pipe(\n     *     first(stable => stable),\n     *     switchMap(() => interval(1000))\n     *   ).subscribe(counter => this.value = counter);\n     * }\n     * ```\n     * As the `isStable` Observable runs outside the zone,\n     * the `value` field will be updated properly,\n     * but the template will not be refreshed!\n     *\n     * You'll have to manually trigger the change detection to update the template.\n     *\n     * ```\n     * constructor(appRef: ApplicationRef, cd: ChangeDetectorRef) {\n     *   appRef.isStable.pipe(\n     *     first(stable => stable),\n     *     switchMap(() => interval(1000))\n     *   ).subscribe(counter => {\n     *     this.value = counter;\n     *     cd.detectChanges();\n     *   });\n     * }\n     * ```\n     *\n     * Or make the subscription callback run inside the zone.\n     *\n     * ```\n     * constructor(appRef: ApplicationRef, zone: NgZone) {\n     *   appRef.isStable.pipe(\n     *     first(stable => stable),\n     *     switchMap(() => interval(1000))\n     *   ).subscribe(counter => zone.run(() => this.value = counter));\n     * }\n     * ```\n     *\n     * @publicApi\n     */\n    var ApplicationRef = /** @class */ (function () {\n        /** @internal */\n        function ApplicationRef(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus) {\n            var _this = this;\n            this._zone = _zone;\n            this._console = _console;\n            this._injector = _injector;\n            this._exceptionHandler = _exceptionHandler;\n            this._componentFactoryResolver = _componentFactoryResolver;\n            this._initStatus = _initStatus;\n            this._bootstrapListeners = [];\n            this._views = [];\n            this._runningTick = false;\n            this._enforceNoNewChanges = false;\n            this._stable = true;\n            /**\n             * Get a list of component types registered to this application.\n             * This list is populated even before the component is created.\n             */\n            this.componentTypes = [];\n            /**\n             * Get a list of components registered to this application.\n             */\n            this.components = [];\n            this._enforceNoNewChanges = isDevMode();\n            this._zone.onMicrotaskEmpty.subscribe({ next: function () { _this._zone.run(function () { _this.tick(); }); } });\n            var isCurrentlyStable = new rxjs.Observable(function (observer) {\n                _this._stable = _this._zone.isStable && !_this._zone.hasPendingMacrotasks &&\n                    !_this._zone.hasPendingMicrotasks;\n                _this._zone.runOutsideAngular(function () {\n                    observer.next(_this._stable);\n                    observer.complete();\n                });\n            });\n            var isStable = new rxjs.Observable(function (observer) {\n                // Create the subscription to onStable outside the Angular Zone so that\n                // the callback is run outside the Angular Zone.\n                var stableSub;\n                _this._zone.runOutsideAngular(function () {\n                    stableSub = _this._zone.onStable.subscribe(function () {\n                        NgZone.assertNotInAngularZone();\n                        // Check whether there are no pending macro/micro tasks in the next tick\n                        // to allow for NgZone to update the state.\n                        scheduleMicroTask(function () {\n                            if (!_this._stable && !_this._zone.hasPendingMacrotasks &&\n                                !_this._zone.hasPendingMicrotasks) {\n                                _this._stable = true;\n                                observer.next(true);\n                            }\n                        });\n                    });\n                });\n                var unstableSub = _this._zone.onUnstable.subscribe(function () {\n                    NgZone.assertInAngularZone();\n                    if (_this._stable) {\n                        _this._stable = false;\n                        _this._zone.runOutsideAngular(function () { observer.next(false); });\n                    }\n                });\n                return function () {\n                    stableSub.unsubscribe();\n                    unstableSub.unsubscribe();\n                };\n            });\n            this.isStable =\n                rxjs.merge(isCurrentlyStable, isStable.pipe(operators.share()));\n        }\n        /**\n         * Bootstrap a new component at the root level of the application.\n         *\n         * @usageNotes\n         * ### Bootstrap process\n         *\n         * When bootstrapping a new root component into an application, Angular mounts the\n         * specified application component onto DOM elements identified by the componentType's\n         * selector and kicks off automatic change detection to finish initializing the component.\n         *\n         * Optionally, a component can be mounted onto a DOM element that does not match the\n         * componentType's selector.\n         *\n         * ### Example\n         * {@example core/ts/platform/platform.ts region='longform'}\n         */\n        ApplicationRef.prototype.bootstrap = function (componentOrFactory, rootSelectorOrNode) {\n            var _this = this;\n            if (!this._initStatus.done) {\n                throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');\n            }\n            var componentFactory;\n            if (componentOrFactory instanceof ComponentFactory) {\n                componentFactory = componentOrFactory;\n            }\n            else {\n                componentFactory =\n                    this._componentFactoryResolver.resolveComponentFactory(componentOrFactory);\n            }\n            this.componentTypes.push(componentFactory.componentType);\n            // Create a factory associated with the current module if it's not bound to some other\n            var ngModule = isBoundToModule(componentFactory) ? null : this._injector.get(NgModuleRef);\n            var selectorOrNode = rootSelectorOrNode || componentFactory.selector;\n            var compRef = componentFactory.create(Injector.NULL, [], selectorOrNode, ngModule);\n            compRef.onDestroy(function () { _this._unloadComponent(compRef); });\n            var testability = compRef.injector.get(Testability, null);\n            if (testability) {\n                compRef.injector.get(TestabilityRegistry)\n                    .registerApplication(compRef.location.nativeElement, testability);\n            }\n            this._loadComponent(compRef);\n            if (isDevMode()) {\n                this._console.log(\"Angular is running in the development mode. Call enableProdMode() to enable the production mode.\");\n            }\n            return compRef;\n        };\n        /**\n         * Invoke this method to explicitly process change detection and its side-effects.\n         *\n         * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n         * further changes are detected. If additional changes are picked up during this second cycle,\n         * bindings in the app have side-effects that cannot be resolved in a single change detection\n         * pass.\n         * In this case, Angular throws an error, since an Angular application can only have one change\n         * detection pass during which all change detection must complete.\n         */\n        ApplicationRef.prototype.tick = function () {\n            var _this = this;\n            var e_1, _a, e_2, _b;\n            if (this._runningTick) {\n                throw new Error('ApplicationRef.tick is called recursively');\n            }\n            var scope = ApplicationRef._tickScope();\n            try {\n                this._runningTick = true;\n                try {\n                    for (var _c = __values(this._views), _d = _c.next(); !_d.done; _d = _c.next()) {\n                        var view = _d.value;\n                        view.detectChanges();\n                    }\n                }\n                catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                finally {\n                    try {\n                        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n                    }\n                    finally { if (e_1) throw e_1.error; }\n                }\n                if (this._enforceNoNewChanges) {\n                    try {\n                        for (var _e = __values(this._views), _f = _e.next(); !_f.done; _f = _e.next()) {\n                            var view = _f.value;\n                            view.checkNoChanges();\n                        }\n                    }\n                    catch (e_2_1) { e_2 = { error: e_2_1 }; }\n                    finally {\n                        try {\n                            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n                        }\n                        finally { if (e_2) throw e_2.error; }\n                    }\n                }\n            }\n            catch (e) {\n                // Attention: Don't rethrow as it could cancel subscriptions to Observables!\n                this._zone.runOutsideAngular(function () { return _this._exceptionHandler.handleError(e); });\n            }\n            finally {\n                this._runningTick = false;\n                wtfLeave(scope);\n            }\n        };\n        /**\n         * Attaches a view so that it will be dirty checked.\n         * The view will be automatically detached when it is destroyed.\n         * This will throw if the view is already attached to a ViewContainer.\n         */\n        ApplicationRef.prototype.attachView = function (viewRef) {\n            var view = viewRef;\n            this._views.push(view);\n            view.attachToAppRef(this);\n        };\n        /**\n         * Detaches a view from dirty checking again.\n         */\n        ApplicationRef.prototype.detachView = function (viewRef) {\n            var view = viewRef;\n            remove(this._views, view);\n            view.detachFromAppRef();\n        };\n        ApplicationRef.prototype._loadComponent = function (componentRef) {\n            this.attachView(componentRef.hostView);\n            this.tick();\n            this.components.push(componentRef);\n            // Get the listeners lazily to prevent DI cycles.\n            var listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);\n            listeners.forEach(function (listener) { return listener(componentRef); });\n        };\n        ApplicationRef.prototype._unloadComponent = function (componentRef) {\n            this.detachView(componentRef.hostView);\n            remove(this.components, componentRef);\n        };\n        /** @internal */\n        ApplicationRef.prototype.ngOnDestroy = function () {\n            // TODO(alxhub): Dispose of the NgZone.\n            this._views.slice().forEach(function (view) { return view.destroy(); });\n        };\n        Object.defineProperty(ApplicationRef.prototype, \"viewCount\", {\n            /**\n             * Returns the number of attached views.\n             */\n            get: function () { return this._views.length; },\n            enumerable: true,\n            configurable: true\n        });\n        /** @internal */\n        ApplicationRef._tickScope = wtfCreateScope('ApplicationRef#tick()');\n        ApplicationRef.ngInjectableDef = ɵɵdefineInjectable({ token: ApplicationRef, factory: function ApplicationRef_Factory(t) { return new (t || ApplicationRef)(ɵɵinject(NgZone), ɵɵinject(Console), ɵɵinject(Injector), ɵɵinject(ErrorHandler), ɵɵinject(ComponentFactoryResolver), ɵɵinject(ApplicationInitStatus)); }, providedIn: null });\n        return ApplicationRef;\n    }());\n    function remove(list, el) {\n        var index = list.indexOf(el);\n        if (index > -1) {\n            list.splice(index, 1);\n        }\n    }\n    function _mergeArrays(parts) {\n        var result = [];\n        parts.forEach(function (part) { return part && result.push.apply(result, __spread(part)); });\n        return result;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Used to load ng module factories.\n     *\n     * @publicApi\n     * @deprecated the `string` form of `loadChildren` is deprecated, and `NgModuleFactoryLoader` is\n     * part of its implementation. See `LoadChildren` for more details.\n     */\n    var NgModuleFactoryLoader = /** @class */ (function () {\n        function NgModuleFactoryLoader() {\n        }\n        return NgModuleFactoryLoader;\n    }());\n    function getModuleFactory__POST_R3__(id) {\n        var type = getRegisteredNgModuleType(id);\n        if (!type)\n            throw noModuleError(id);\n        return new NgModuleFactory$1(type);\n    }\n    /**\n     * Returns the NgModuleFactory with the given id, if it exists and has been loaded.\n     * Factories for modules that do not specify an `id` cannot be retrieved. Throws if the module\n     * cannot be found.\n     * @publicApi\n     */\n    var getModuleFactory = getModuleFactory__POST_R3__;\n    function noModuleError(id) {\n        return new Error(\"No module with ID \" + id + \" loaded\");\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var SWITCH_IVY_ENABLED__POST_R3__ = true;\n    var ivyEnabled = SWITCH_IVY_ENABLED__POST_R3__;\n\n    var _SEPARATOR = '#';\n    var FACTORY_CLASS_SUFFIX = 'NgFactory';\n    /**\n     * Configuration for SystemJsNgModuleLoader.\n     * token.\n     *\n     * @publicApi\n     * @deprecated the `string` form of `loadChildren` is deprecated, and `SystemJsNgModuleLoaderConfig`\n     * is part of its implementation. See `LoadChildren` for more details.\n     */\n    var SystemJsNgModuleLoaderConfig = /** @class */ (function () {\n        function SystemJsNgModuleLoaderConfig() {\n        }\n        return SystemJsNgModuleLoaderConfig;\n    }());\n    var DEFAULT_CONFIG = {\n        factoryPathPrefix: '',\n        factoryPathSuffix: '.ngfactory',\n    };\n    /**\n     * NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory\n     * @publicApi\n     * @deprecated the `string` form of `loadChildren` is deprecated, and `SystemJsNgModuleLoader` is\n     * part of its implementation. See `LoadChildren` for more details.\n     */\n    var SystemJsNgModuleLoader = /** @class */ (function () {\n        function SystemJsNgModuleLoader(_compiler, config) {\n            this._compiler = _compiler;\n            this._config = config || DEFAULT_CONFIG;\n        }\n        SystemJsNgModuleLoader.prototype.load = function (path) {\n            var legacyOfflineMode = !ivyEnabled && this._compiler instanceof Compiler;\n            return legacyOfflineMode ? this.loadFactory(path) : this.loadAndCompile(path);\n        };\n        SystemJsNgModuleLoader.prototype.loadAndCompile = function (path) {\n            var _this = this;\n            var _a = __read(path.split(_SEPARATOR), 2), module = _a[0], exportName = _a[1];\n            if (exportName === undefined) {\n                exportName = 'default';\n            }\n            return System.import(module)\n                .then(function (module) { return module[exportName]; })\n                .then(function (type) { return checkNotEmpty(type, module, exportName); })\n                .then(function (type) { return _this._compiler.compileModuleAsync(type); });\n        };\n        SystemJsNgModuleLoader.prototype.loadFactory = function (path) {\n            var _a = __read(path.split(_SEPARATOR), 2), module = _a[0], exportName = _a[1];\n            var factoryClassSuffix = FACTORY_CLASS_SUFFIX;\n            if (exportName === undefined) {\n                exportName = 'default';\n                factoryClassSuffix = '';\n            }\n            return System.import(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix)\n                .then(function (module) { return module[exportName + factoryClassSuffix]; })\n                .then(function (factory) { return checkNotEmpty(factory, module, exportName); });\n        };\n        SystemJsNgModuleLoader.ngInjectableDef = ɵɵdefineInjectable({ token: SystemJsNgModuleLoader, factory: function SystemJsNgModuleLoader_Factory(t) { return new (t || SystemJsNgModuleLoader)(ɵɵinject(Compiler), ɵɵinject(SystemJsNgModuleLoaderConfig, 8)); }, providedIn: null });\n        return SystemJsNgModuleLoader;\n    }());\n    function checkNotEmpty(value, modulePath, exportName) {\n        if (!value) {\n            throw new Error(\"Cannot find '\" + exportName + \"' in '\" + modulePath + \"'\");\n        }\n        return value;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Represents an Angular [view](guide/glossary#view),\n     * specifically the [host view](guide/glossary#view-tree) that is defined by a component.\n     * Also serves as the base class\n     * that adds destroy methods for [embedded views](guide/glossary#view-tree).\n     *\n     * @see `EmbeddedViewRef`\n     *\n     * @publicApi\n     */\n    var ViewRef$1 = /** @class */ (function (_super) {\n        __extends(ViewRef, _super);\n        function ViewRef() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        return ViewRef;\n    }(ChangeDetectorRef));\n    /**\n     * Represents an Angular [view](guide/glossary#view) in a view container.\n     * An [embedded view](guide/glossary#view-tree) can be referenced from a component\n     * other than the hosting component whose template defines it, or it can be defined\n     * independently by a `TemplateRef`.\n     *\n     * Properties of elements in a view can change, but the structure (number and order) of elements in\n     * a view cannot. Change the structure of elements by inserting, moving, or\n     * removing nested views in a view container.\n     *\n     * @see `ViewContainerRef`\n     *\n     * @usageNotes\n     *\n     * The following template breaks down into two separate `TemplateRef` instances,\n     * an outer one and an inner one.\n     *\n     * ```\n     * Count: {{items.length}}\n     * <ul>\n     *   <li *ngFor=\"let  item of items\">{{item}}</li>\n     * </ul>\n     * ```\n     *\n     * This is the outer `TemplateRef`:\n     *\n     * ```\n     * Count: {{items.length}}\n     * <ul>\n     *   <ng-template ngFor let-item [ngForOf]=\"items\"></ng-template>\n     * </ul>\n     * ```\n     *\n     * This is the inner `TemplateRef`:\n     *\n     * ```\n     *   <li>{{item}}</li>\n     * ```\n     *\n     * The outer and inner `TemplateRef` instances are assembled into views as follows:\n     *\n     * ```\n     * <!-- ViewRef: outer-0 -->\n     * Count: 2\n     * <ul>\n     *   <ng-template view-container-ref></ng-template>\n     *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->\n     *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->\n     * </ul>\n     * <!-- /ViewRef: outer-0 -->\n     * ```\n     * @publicApi\n     */\n    var EmbeddedViewRef = /** @class */ (function (_super) {\n        __extends(EmbeddedViewRef, _super);\n        function EmbeddedViewRef() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        return EmbeddedViewRef;\n    }(ViewRef$1));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @publicApi\n     */\n    var DebugEventListener = /** @class */ (function () {\n        function DebugEventListener(name, callback) {\n            this.name = name;\n            this.callback = callback;\n        }\n        return DebugEventListener;\n    }());\n    var DebugNode__PRE_R3__ = /** @class */ (function () {\n        function DebugNode__PRE_R3__(nativeNode, parent, _debugContext) {\n            this.listeners = [];\n            this.parent = null;\n            this._debugContext = _debugContext;\n            this.nativeNode = nativeNode;\n            if (parent && parent instanceof DebugElement__PRE_R3__) {\n                parent.addChild(this);\n            }\n        }\n        Object.defineProperty(DebugNode__PRE_R3__.prototype, \"injector\", {\n            get: function () { return this._debugContext.injector; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugNode__PRE_R3__.prototype, \"componentInstance\", {\n            get: function () { return this._debugContext.component; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugNode__PRE_R3__.prototype, \"context\", {\n            get: function () { return this._debugContext.context; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugNode__PRE_R3__.prototype, \"references\", {\n            get: function () { return this._debugContext.references; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugNode__PRE_R3__.prototype, \"providerTokens\", {\n            get: function () { return this._debugContext.providerTokens; },\n            enumerable: true,\n            configurable: true\n        });\n        return DebugNode__PRE_R3__;\n    }());\n    var DebugElement__PRE_R3__ = /** @class */ (function (_super) {\n        __extends(DebugElement__PRE_R3__, _super);\n        function DebugElement__PRE_R3__(nativeNode, parent, _debugContext) {\n            var _this = _super.call(this, nativeNode, parent, _debugContext) || this;\n            _this.properties = {};\n            _this.attributes = {};\n            _this.classes = {};\n            _this.styles = {};\n            _this.childNodes = [];\n            _this.nativeElement = nativeNode;\n            return _this;\n        }\n        DebugElement__PRE_R3__.prototype.addChild = function (child) {\n            if (child) {\n                this.childNodes.push(child);\n                child.parent = this;\n            }\n        };\n        DebugElement__PRE_R3__.prototype.removeChild = function (child) {\n            var childIndex = this.childNodes.indexOf(child);\n            if (childIndex !== -1) {\n                child.parent = null;\n                this.childNodes.splice(childIndex, 1);\n            }\n        };\n        DebugElement__PRE_R3__.prototype.insertChildrenAfter = function (child, newChildren) {\n            var _this = this;\n            var _a;\n            var siblingIndex = this.childNodes.indexOf(child);\n            if (siblingIndex !== -1) {\n                (_a = this.childNodes).splice.apply(_a, __spread([siblingIndex + 1, 0], newChildren));\n                newChildren.forEach(function (c) {\n                    if (c.parent) {\n                        c.parent.removeChild(c);\n                    }\n                    child.parent = _this;\n                });\n            }\n        };\n        DebugElement__PRE_R3__.prototype.insertBefore = function (refChild, newChild) {\n            var refIndex = this.childNodes.indexOf(refChild);\n            if (refIndex === -1) {\n                this.addChild(newChild);\n            }\n            else {\n                if (newChild.parent) {\n                    newChild.parent.removeChild(newChild);\n                }\n                newChild.parent = this;\n                this.childNodes.splice(refIndex, 0, newChild);\n            }\n        };\n        DebugElement__PRE_R3__.prototype.query = function (predicate) {\n            var results = this.queryAll(predicate);\n            return results[0] || null;\n        };\n        DebugElement__PRE_R3__.prototype.queryAll = function (predicate) {\n            var matches = [];\n            _queryElementChildren(this, predicate, matches);\n            return matches;\n        };\n        DebugElement__PRE_R3__.prototype.queryAllNodes = function (predicate) {\n            var matches = [];\n            _queryNodeChildren(this, predicate, matches);\n            return matches;\n        };\n        Object.defineProperty(DebugElement__PRE_R3__.prototype, \"children\", {\n            get: function () {\n                return this\n                    .childNodes //\n                    .filter(function (node) { return node instanceof DebugElement__PRE_R3__; });\n            },\n            enumerable: true,\n            configurable: true\n        });\n        DebugElement__PRE_R3__.prototype.triggerEventHandler = function (eventName, eventObj) {\n            this.listeners.forEach(function (listener) {\n                if (listener.name == eventName) {\n                    listener.callback(eventObj);\n                }\n            });\n        };\n        return DebugElement__PRE_R3__;\n    }(DebugNode__PRE_R3__));\n    /**\n     * @publicApi\n     */\n    function asNativeElements(debugEls) {\n        return debugEls.map(function (el) { return el.nativeElement; });\n    }\n    function _queryElementChildren(element, predicate, matches) {\n        element.childNodes.forEach(function (node) {\n            if (node instanceof DebugElement__PRE_R3__) {\n                if (predicate(node)) {\n                    matches.push(node);\n                }\n                _queryElementChildren(node, predicate, matches);\n            }\n        });\n    }\n    function _queryNodeChildren(parentNode, predicate, matches) {\n        if (parentNode instanceof DebugElement__PRE_R3__) {\n            parentNode.childNodes.forEach(function (node) {\n                if (predicate(node)) {\n                    matches.push(node);\n                }\n                if (node instanceof DebugElement__PRE_R3__) {\n                    _queryNodeChildren(node, predicate, matches);\n                }\n            });\n        }\n    }\n    var DebugNode__POST_R3__ = /** @class */ (function () {\n        function DebugNode__POST_R3__(nativeNode) {\n            this.nativeNode = nativeNode;\n        }\n        Object.defineProperty(DebugNode__POST_R3__.prototype, \"parent\", {\n            get: function () {\n                var parent = this.nativeNode.parentNode;\n                return parent ? new DebugElement__POST_R3__(parent) : null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugNode__POST_R3__.prototype, \"injector\", {\n            get: function () { return getInjector(this.nativeNode); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugNode__POST_R3__.prototype, \"componentInstance\", {\n            get: function () {\n                var nativeElement = this.nativeNode;\n                return nativeElement &&\n                    (getComponent(nativeElement) || getViewComponent(nativeElement));\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugNode__POST_R3__.prototype, \"context\", {\n            get: function () { return getContext$1(this.nativeNode); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugNode__POST_R3__.prototype, \"listeners\", {\n            get: function () {\n                return getListeners(this.nativeNode).filter(isBrowserEvents);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugNode__POST_R3__.prototype, \"references\", {\n            get: function () { return getLocalRefs(this.nativeNode); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugNode__POST_R3__.prototype, \"providerTokens\", {\n            get: function () { return getInjectionTokens(this.nativeNode); },\n            enumerable: true,\n            configurable: true\n        });\n        return DebugNode__POST_R3__;\n    }());\n    var DebugElement__POST_R3__ = /** @class */ (function (_super) {\n        __extends(DebugElement__POST_R3__, _super);\n        function DebugElement__POST_R3__(nativeNode) {\n            var _this = this;\n            ngDevMode && assertDomNode(nativeNode);\n            _this = _super.call(this, nativeNode) || this;\n            return _this;\n        }\n        Object.defineProperty(DebugElement__POST_R3__.prototype, \"nativeElement\", {\n            get: function () {\n                return this.nativeNode.nodeType == Node.ELEMENT_NODE ? this.nativeNode : null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugElement__POST_R3__.prototype, \"name\", {\n            get: function () { return this.nativeElement.nodeName; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugElement__POST_R3__.prototype, \"properties\", {\n            /**\n             *  Gets a map of property names to property values for an element.\n             *\n             *  This map includes:\n             *  - Regular property bindings (e.g. `[id]=\"id\"`)\n             *  - Host property bindings (e.g. `host: { '[id]': \"id\" }`)\n             *  - Interpolated property bindings (e.g. `id=\"{{ value }}\")\n             *\n             *  It does not include:\n             *  - input property bindings (e.g. `[myCustomInput]=\"value\"`)\n             *  - attribute bindings (e.g. `[attr.role]=\"menu\"`)\n             */\n            get: function () {\n                var context = loadLContext(this.nativeNode);\n                var lView = context.lView;\n                var tData = lView[TVIEW].data;\n                var tNode = tData[context.nodeIndex];\n                var properties = collectPropertyBindings(tNode, lView, tData);\n                var hostProperties = collectHostPropertyBindings(tNode, lView, tData);\n                var className = collectClassNames(this);\n                var output = __assign({}, properties, hostProperties);\n                if (className) {\n                    output['className'] = output['className'] ? output['className'] + (\" \" + className) : className;\n                }\n                return output;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugElement__POST_R3__.prototype, \"attributes\", {\n            get: function () {\n                var attributes = {};\n                var element = this.nativeElement;\n                if (!element) {\n                    return attributes;\n                }\n                var context = loadLContext(element);\n                var lView = context.lView;\n                var tNodeAttrs = lView[TVIEW].data[context.nodeIndex].attrs;\n                var lowercaseTNodeAttrs = [];\n                // For debug nodes we take the element's attribute directly from the DOM since it allows us\n                // to account for ones that weren't set via bindings (e.g. ViewEngine keeps track of the ones\n                // that are set through `Renderer2`). The problem is that the browser will lowercase all names,\n                // however since we have the attributes already on the TNode, we can preserve the case by going\n                // through them once, adding them to the `attributes` map and putting their lower-cased name\n                // into an array. Afterwards when we're going through the native DOM attributes, we can check\n                // whether we haven't run into an attribute already through the TNode.\n                if (tNodeAttrs) {\n                    var i = 0;\n                    while (i < tNodeAttrs.length) {\n                        var attrName = tNodeAttrs[i];\n                        // Stop as soon as we hit a marker. We only care about the regular attributes. Everything\n                        // else will be handled below when we read the final attributes off the DOM.\n                        if (typeof attrName !== 'string')\n                            break;\n                        var attrValue = tNodeAttrs[i + 1];\n                        attributes[attrName] = attrValue;\n                        lowercaseTNodeAttrs.push(attrName.toLowerCase());\n                        i += 2;\n                    }\n                }\n                var eAttrs = element.attributes;\n                for (var i = 0; i < eAttrs.length; i++) {\n                    var attr = eAttrs[i];\n                    // Make sure that we don't assign the same attribute both in its\n                    // case-sensitive form and the lower-cased one from the browser.\n                    if (lowercaseTNodeAttrs.indexOf(attr.name) === -1) {\n                        attributes[attr.name] = attr.value;\n                    }\n                }\n                return attributes;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugElement__POST_R3__.prototype, \"classes\", {\n            get: function () {\n                var classes = {};\n                var element = this.nativeElement;\n                if (element) {\n                    var lContext = loadLContextFromNode(element);\n                    var stylingContext = getStylingContextFromLView(lContext.nodeIndex, lContext.lView);\n                    if (stylingContext) {\n                        for (var i = 10 /* SingleStylesStartPosition */; i < stylingContext.length; i += 4 /* Size */) {\n                            if (isClassBasedValue(stylingContext, i)) {\n                                var className = getProp(stylingContext, i);\n                                var value = getValue(stylingContext, i);\n                                if (typeof value == 'boolean') {\n                                    // we want to ignore `null` since those don't overwrite the values.\n                                    classes[className] = value;\n                                }\n                            }\n                        }\n                    }\n                    else {\n                        // Fallback, just read DOM.\n                        var eClasses = element.classList;\n                        for (var i = 0; i < eClasses.length; i++) {\n                            classes[eClasses[i]] = true;\n                        }\n                    }\n                }\n                return classes;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugElement__POST_R3__.prototype, \"styles\", {\n            get: function () {\n                var styles = {};\n                var element = this.nativeElement;\n                if (element) {\n                    var lContext = loadLContextFromNode(element);\n                    var stylingContext = getStylingContextFromLView(lContext.nodeIndex, lContext.lView);\n                    if (stylingContext) {\n                        for (var i = 10 /* SingleStylesStartPosition */; i < stylingContext.length; i += 4 /* Size */) {\n                            if (!isClassBasedValue(stylingContext, i)) {\n                                var styleName = getProp(stylingContext, i);\n                                var value = getValue(stylingContext, i);\n                                if (value !== null) {\n                                    // we want to ignore `null` since those don't overwrite the values.\n                                    styles[styleName] = value;\n                                }\n                            }\n                        }\n                    }\n                    else {\n                        // Fallback, just read DOM.\n                        var eStyles = element.style;\n                        for (var i = 0; i < eStyles.length; i++) {\n                            var name_1 = eStyles.item(i);\n                            styles[name_1] = eStyles.getPropertyValue(name_1);\n                        }\n                    }\n                }\n                return styles;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugElement__POST_R3__.prototype, \"childNodes\", {\n            get: function () {\n                var childNodes = this.nativeNode.childNodes;\n                var children = [];\n                for (var i = 0; i < childNodes.length; i++) {\n                    var element = childNodes[i];\n                    children.push(getDebugNode__POST_R3__(element));\n                }\n                return children;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugElement__POST_R3__.prototype, \"children\", {\n            get: function () {\n                var nativeElement = this.nativeElement;\n                if (!nativeElement)\n                    return [];\n                var childNodes = nativeElement.children;\n                var children = [];\n                for (var i = 0; i < childNodes.length; i++) {\n                    var element = childNodes[i];\n                    children.push(getDebugNode__POST_R3__(element));\n                }\n                return children;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        DebugElement__POST_R3__.prototype.query = function (predicate) {\n            var results = this.queryAll(predicate);\n            return results[0] || null;\n        };\n        DebugElement__POST_R3__.prototype.queryAll = function (predicate) {\n            var matches = [];\n            _queryAllR3(this, predicate, matches, true);\n            return matches;\n        };\n        DebugElement__POST_R3__.prototype.queryAllNodes = function (predicate) {\n            var matches = [];\n            _queryAllR3(this, predicate, matches, false);\n            return matches;\n        };\n        DebugElement__POST_R3__.prototype.triggerEventHandler = function (eventName, eventObj) {\n            this.listeners.forEach(function (listener) {\n                if (listener.name === eventName) {\n                    listener.callback(eventObj);\n                }\n            });\n        };\n        return DebugElement__POST_R3__;\n    }(DebugNode__POST_R3__));\n    /**\n     * Walk the TNode tree to find matches for the predicate.\n     *\n     * @param parentElement the element from which the walk is started\n     * @param predicate the predicate to match\n     * @param matches the list of positive matches\n     * @param elementsOnly whether only elements should be searched\n     */\n    function _queryAllR3(parentElement, predicate, matches, elementsOnly) {\n        var context = loadLContext(parentElement.nativeNode);\n        var parentTNode = context.lView[TVIEW].data[context.nodeIndex];\n        _queryNodeChildrenR3(parentTNode, context.lView, predicate, matches, elementsOnly, parentElement.nativeNode);\n    }\n    /**\n     * Recursively match the current TNode against the predicate, and goes on with the next ones.\n     *\n     * @param tNode the current TNode\n     * @param lView the LView of this TNode\n     * @param predicate the predicate to match\n     * @param matches the list of positive matches\n     * @param elementsOnly whether only elements should be searched\n     * @param rootNativeNode the root native node on which prediccate shouold not be matched\n     */\n    function _queryNodeChildrenR3(tNode, lView, predicate, matches, elementsOnly, rootNativeNode) {\n        var e_1, _a;\n        var nativeNode = getNativeByTNode(tNode, lView);\n        // For each type of TNode, specific logic is executed.\n        if (tNode.type === 3 /* Element */ || tNode.type === 4 /* ElementContainer */) {\n            // Case 1: the TNode is an element\n            // The native node has to be checked.\n            _addQueryMatchR3(nativeNode, predicate, matches, elementsOnly, rootNativeNode);\n            if (isComponent(tNode)) {\n                // If the element is the host of a component, then all nodes in its view have to be processed.\n                // Note: the component's content (tNode.child) will be processed from the insertion points.\n                var componentView = getComponentViewByIndex(tNode.index, lView);\n                if (componentView && componentView[TVIEW].firstChild) {\n                    _queryNodeChildrenR3(componentView[TVIEW].firstChild, componentView, predicate, matches, elementsOnly, rootNativeNode);\n                }\n            }\n            else if (tNode.child) {\n                // Otherwise, its children have to be processed.\n                _queryNodeChildrenR3(tNode.child, lView, predicate, matches, elementsOnly, rootNativeNode);\n            }\n            // In all cases, if a dynamic container exists for this node, each view inside it has to be\n            // processed.\n            var nodeOrContainer = lView[tNode.index];\n            if (isLContainer(nodeOrContainer)) {\n                _queryNodeChildrenInContainerR3(nodeOrContainer, predicate, matches, elementsOnly, rootNativeNode);\n            }\n        }\n        else if (tNode.type === 0 /* Container */) {\n            // Case 2: the TNode is a container\n            // The native node has to be checked.\n            var lContainer = lView[tNode.index];\n            _addQueryMatchR3(lContainer[NATIVE], predicate, matches, elementsOnly, rootNativeNode);\n            // Each view inside the container has to be processed.\n            _queryNodeChildrenInContainerR3(lContainer, predicate, matches, elementsOnly, rootNativeNode);\n        }\n        else if (tNode.type === 1 /* Projection */) {\n            // Case 3: the TNode is a projection insertion point (i.e. a <ng-content>).\n            // The nodes projected at this location all need to be processed.\n            var componentView = findComponentView(lView);\n            var componentHost = componentView[T_HOST];\n            var head = componentHost.projection[tNode.projection];\n            if (Array.isArray(head)) {\n                try {\n                    for (var head_1 = __values(head), head_1_1 = head_1.next(); !head_1_1.done; head_1_1 = head_1.next()) {\n                        var nativeNode_1 = head_1_1.value;\n                        _addQueryMatchR3(nativeNode_1, predicate, matches, elementsOnly, rootNativeNode);\n                    }\n                }\n                catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                finally {\n                    try {\n                        if (head_1_1 && !head_1_1.done && (_a = head_1.return)) _a.call(head_1);\n                    }\n                    finally { if (e_1) throw e_1.error; }\n                }\n            }\n            else if (head) {\n                var nextLView = componentView[PARENT];\n                var nextTNode = nextLView[TVIEW].data[head.index];\n                _queryNodeChildrenR3(nextTNode, nextLView, predicate, matches, elementsOnly, rootNativeNode);\n            }\n        }\n        else if (tNode.child) {\n            // Case 4: the TNode is a view.\n            _queryNodeChildrenR3(tNode.child, lView, predicate, matches, elementsOnly, rootNativeNode);\n        }\n        // We don't want to go to the next sibling of the root node.\n        if (rootNativeNode !== nativeNode) {\n            // To determine the next node to be processed, we need to use the next or the projectionNext\n            // link, depending on whether the current node has been projected.\n            var nextTNode = (tNode.flags & 2 /* isProjected */) ? tNode.projectionNext : tNode.next;\n            if (nextTNode) {\n                _queryNodeChildrenR3(nextTNode, lView, predicate, matches, elementsOnly, rootNativeNode);\n            }\n        }\n    }\n    /**\n     * Process all TNodes in a given container.\n     *\n     * @param lContainer the container to be processed\n     * @param predicate the predicate to match\n     * @param matches the list of positive matches\n     * @param elementsOnly whether only elements should be searched\n     * @param rootNativeNode the root native node on which prediccate shouold not be matched\n     */\n    function _queryNodeChildrenInContainerR3(lContainer, predicate, matches, elementsOnly, rootNativeNode) {\n        for (var i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n            var childView = lContainer[i];\n            _queryNodeChildrenR3(childView[TVIEW].node, childView, predicate, matches, elementsOnly, rootNativeNode);\n        }\n    }\n    /**\n     * Match the current native node against the predicate.\n     *\n     * @param nativeNode the current native node\n     * @param predicate the predicate to match\n     * @param matches the list of positive matches\n     * @param elementsOnly whether only elements should be searched\n     * @param rootNativeNode the root native node on which prediccate shouold not be matched\n     */\n    function _addQueryMatchR3(nativeNode, predicate, matches, elementsOnly, rootNativeNode) {\n        if (rootNativeNode !== nativeNode) {\n            var debugNode = getDebugNode(nativeNode);\n            if (debugNode && (elementsOnly ? debugNode instanceof DebugElement__POST_R3__ : true) &&\n                predicate(debugNode)) {\n                matches.push(debugNode);\n            }\n        }\n    }\n    /**\n     * Iterates through the property bindings for a given node and generates\n     * a map of property names to values. This map only contains property bindings\n     * defined in templates, not in host bindings.\n     */\n    function collectPropertyBindings(tNode, lView, tData) {\n        var properties = {};\n        var bindingIndex = getFirstBindingIndex(tNode.propertyMetadataStartIndex, tData);\n        while (bindingIndex < tNode.propertyMetadataEndIndex) {\n            var value = void 0;\n            var propMetadata = tData[bindingIndex];\n            while (!isPropMetadataString(propMetadata)) {\n                // This is the first value for an interpolation. We need to build up\n                // the full interpolation by combining runtime values in LView with\n                // the static interstitial values stored in TData.\n                value = (value || '') + renderStringify(lView[bindingIndex]) + tData[bindingIndex];\n                propMetadata = tData[++bindingIndex];\n            }\n            value = value === undefined ? lView[bindingIndex] : value += lView[bindingIndex];\n            // Property metadata string has 3 parts: property name, prefix, and suffix\n            var metadataParts = propMetadata.split(INTERPOLATION_DELIMITER);\n            var propertyName = metadataParts[0];\n            // Attr bindings don't have property names and should be skipped\n            if (propertyName) {\n                // Wrap value with prefix and suffix (will be '' for normal bindings), if they're defined.\n                // Avoid wrapping for normal bindings so that the value doesn't get cast to a string.\n                properties[propertyName] = (metadataParts[1] && metadataParts[2]) ?\n                    metadataParts[1] + value + metadataParts[2] :\n                    value;\n            }\n            bindingIndex++;\n        }\n        return properties;\n    }\n    /**\n     * Retrieves the first binding index that holds values for this property\n     * binding.\n     *\n     * For normal bindings (e.g. `[id]=\"id\"`), the binding index is the\n     * same as the metadata index. For interpolations (e.g. `id=\"{{id}}-{{name}}\"`),\n     * there can be multiple binding values, so we might have to loop backwards\n     * from the metadata index until we find the first one.\n     *\n     * @param metadataIndex The index of the first property metadata string for\n     * this node.\n     * @param tData The data array for the current TView\n     * @returns The first binding index for this binding\n     */\n    function getFirstBindingIndex(metadataIndex, tData) {\n        var currentBindingIndex = metadataIndex - 1;\n        // If the slot before the metadata holds a string, we know that this\n        // metadata applies to an interpolation with at least 2 bindings, and\n        // we need to search further to access the first binding value.\n        var currentValue = tData[currentBindingIndex];\n        // We need to iterate until we hit either a:\n        // - TNode (it is an element slot marking the end of `consts` section), OR a\n        // - metadata string (slot is attribute metadata or a previous node's property metadata)\n        while (typeof currentValue === 'string' && !isPropMetadataString(currentValue)) {\n            currentValue = tData[--currentBindingIndex];\n        }\n        return currentBindingIndex + 1;\n    }\n    function collectHostPropertyBindings(tNode, lView, tData) {\n        var properties = {};\n        // Host binding values for a node are stored after directives on that node\n        var hostPropIndex = tNode.directiveEnd;\n        var propMetadata = tData[hostPropIndex];\n        // When we reach a value in TView.data that is not a string, we know we've\n        // hit the next node's providers and directives and should stop copying data.\n        while (typeof propMetadata === 'string') {\n            var propertyName = propMetadata.split(INTERPOLATION_DELIMITER)[0];\n            properties[propertyName] = lView[hostPropIndex];\n            propMetadata = tData[++hostPropIndex];\n        }\n        return properties;\n    }\n    function collectClassNames(debugElement) {\n        var e_2, _a;\n        var classes = debugElement.classes;\n        var output = '';\n        try {\n            for (var _b = __values(Object.keys(classes)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var className = _c.value;\n                if (classes[className]) {\n                    output = output ? output + (\" \" + className) : className;\n                }\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n        return output;\n    }\n    // Need to keep the nodes in a global Map so that multiple angular apps are supported.\n    var _nativeNodeToDebugNode = new Map();\n    var NG_DEBUG_PROPERTY = '__ng_debug__';\n    function getDebugNode__POST_R3__(nativeNode) {\n        if (nativeNode instanceof Node) {\n            if (!(nativeNode.hasOwnProperty(NG_DEBUG_PROPERTY))) {\n                nativeNode[NG_DEBUG_PROPERTY] = nativeNode.nodeType == Node.ELEMENT_NODE ?\n                    new DebugElement__POST_R3__(nativeNode) :\n                    new DebugNode__POST_R3__(nativeNode);\n            }\n            return nativeNode[NG_DEBUG_PROPERTY];\n        }\n        return null;\n    }\n    /**\n     * @publicApi\n     */\n    var getDebugNode = getDebugNode__POST_R3__;\n    function indexDebugNode(node) {\n        _nativeNodeToDebugNode.set(node.nativeNode, node);\n    }\n    function removeDebugNodeFromIndex(node) {\n        _nativeNodeToDebugNode.delete(node.nativeNode);\n    }\n    /**\n     * @publicApi\n     */\n    var DebugNode = DebugNode__POST_R3__;\n    /**\n     * @publicApi\n     */\n    var DebugElement = DebugElement__POST_R3__;\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var _CORE_PLATFORM_PROVIDERS = [\n        // Set a default platform name for platforms that don't set it explicitly.\n        { provide: PLATFORM_ID, useValue: 'unknown' },\n        { provide: PlatformRef, deps: [Injector] },\n        { provide: TestabilityRegistry, deps: [] },\n        { provide: Console, deps: [] },\n    ];\n    /**\n     * This platform has to be included in any other platform\n     *\n     * @publicApi\n     */\n    var platformCore = createPlatformFactory(null, 'core', _CORE_PLATFORM_PROVIDERS);\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function _iterableDiffersFactory() {\n        return defaultIterableDiffers;\n    }\n    function _keyValueDiffersFactory() {\n        return defaultKeyValueDiffers;\n    }\n    function _localeFactory(locale) {\n        return locale || 'en-US';\n    }\n    /**\n     * A built-in [dependency injection token](guide/glossary#di-token)\n     * that is used to configure the root injector for bootstrapping.\n     */\n    var APPLICATION_MODULE_PROVIDERS = [\n        {\n            provide: ApplicationRef,\n            useClass: ApplicationRef,\n            deps: [NgZone, Console, Injector, ErrorHandler, ComponentFactoryResolver, ApplicationInitStatus]\n        },\n        { provide: SCHEDULER, deps: [NgZone], useFactory: zoneSchedulerFactory },\n        {\n            provide: ApplicationInitStatus,\n            useClass: ApplicationInitStatus,\n            deps: [[new Optional(), APP_INITIALIZER]]\n        },\n        { provide: Compiler, useClass: Compiler, deps: [] },\n        APP_ID_RANDOM_PROVIDER,\n        { provide: IterableDiffers, useFactory: _iterableDiffersFactory, deps: [] },\n        { provide: KeyValueDiffers, useFactory: _keyValueDiffersFactory, deps: [] },\n        {\n            provide: LOCALE_ID$1,\n            useFactory: _localeFactory,\n            deps: [[new Inject(LOCALE_ID$1), new Optional(), new SkipSelf()]]\n        },\n    ];\n    /**\n     * Schedule work at next available slot.\n     *\n     * In Ivy this is just `requestAnimationFrame`. For compatibility reasons when bootstrapped\n     * using `platformRef.bootstrap` we need to use `NgZone.onStable` as the scheduling mechanism.\n     * This overrides the scheduling mechanism in Ivy to `NgZone.onStable`.\n     *\n     * @param ngZone NgZone to use for scheduling.\n     */\n    function zoneSchedulerFactory(ngZone) {\n        var queue = [];\n        ngZone.onStable.subscribe(function () {\n            while (queue.length) {\n                queue.pop()();\n            }\n        });\n        return function (fn) { queue.push(fn); };\n    }\n    /**\n     * Configures the root injector for an app with\n     * providers of `@angular/core` dependencies that `ApplicationRef` needs\n     * to bootstrap components.\n     *\n     * Re-exported by `BrowserModule`, which is included automatically in the root\n     * `AppModule` when you create a new app with the CLI `new` command.\n     *\n     * @publicApi\n     */\n    var ApplicationModule = /** @class */ (function () {\n        // Inject ApplicationRef to make it eager...\n        function ApplicationModule(appRef) {\n        }\n        ApplicationModule.ngModuleDef = ɵɵdefineNgModule({ type: ApplicationModule });\n        ApplicationModule.ngInjectorDef = ɵɵdefineInjector({ factory: function ApplicationModule_Factory(t) { return new (t || ApplicationModule)(ɵɵinject(ApplicationRef)); }, providers: APPLICATION_MODULE_PROVIDERS });\n        return ApplicationModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function anchorDef(flags, matchedQueriesDsl, ngContentIndex, childCount, handleEvent, templateFactory) {\n        flags |= 1 /* TypeElement */;\n        var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;\n        var template = templateFactory ? resolveDefinition(templateFactory) : null;\n        return {\n            // will bet set by the view definition\n            nodeIndex: -1,\n            parent: null,\n            renderParent: null,\n            bindingIndex: -1,\n            outputIndex: -1,\n            // regular values\n            flags: flags,\n            checkIndex: -1,\n            childFlags: 0,\n            directChildFlags: 0,\n            childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references, ngContentIndex: ngContentIndex, childCount: childCount,\n            bindings: [],\n            bindingFlags: 0,\n            outputs: [],\n            element: {\n                ns: null,\n                name: null,\n                attrs: null, template: template,\n                componentProvider: null,\n                componentView: null,\n                componentRendererType: null,\n                publicProviders: null,\n                allProviders: null,\n                handleEvent: handleEvent || NOOP\n            },\n            provider: null,\n            text: null,\n            query: null,\n            ngContent: null\n        };\n    }\n    function elementDef(checkIndex, flags, matchedQueriesDsl, ngContentIndex, childCount, namespaceAndName, fixedAttrs, bindings, outputs, handleEvent, componentView, componentRendererType) {\n        var _a;\n        if (fixedAttrs === void 0) { fixedAttrs = []; }\n        if (!handleEvent) {\n            handleEvent = NOOP;\n        }\n        var _b = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _b.matchedQueries, references = _b.references, matchedQueryIds = _b.matchedQueryIds;\n        var ns = null;\n        var name = null;\n        if (namespaceAndName) {\n            _a = __read(splitNamespace(namespaceAndName), 2), ns = _a[0], name = _a[1];\n        }\n        bindings = bindings || [];\n        var bindingDefs = new Array(bindings.length);\n        for (var i = 0; i < bindings.length; i++) {\n            var _c = __read(bindings[i], 3), bindingFlags = _c[0], namespaceAndName_1 = _c[1], suffixOrSecurityContext = _c[2];\n            var _d = __read(splitNamespace(namespaceAndName_1), 2), ns_1 = _d[0], name_1 = _d[1];\n            var securityContext = undefined;\n            var suffix = undefined;\n            switch (bindingFlags & 15 /* Types */) {\n                case 4 /* TypeElementStyle */:\n                    suffix = suffixOrSecurityContext;\n                    break;\n                case 1 /* TypeElementAttribute */:\n                case 8 /* TypeProperty */:\n                    securityContext = suffixOrSecurityContext;\n                    break;\n            }\n            bindingDefs[i] =\n                { flags: bindingFlags, ns: ns_1, name: name_1, nonMinifiedName: name_1, securityContext: securityContext, suffix: suffix };\n        }\n        outputs = outputs || [];\n        var outputDefs = new Array(outputs.length);\n        for (var i = 0; i < outputs.length; i++) {\n            var _e = __read(outputs[i], 2), target = _e[0], eventName = _e[1];\n            outputDefs[i] = {\n                type: 0 /* ElementOutput */,\n                target: target, eventName: eventName,\n                propName: null\n            };\n        }\n        fixedAttrs = fixedAttrs || [];\n        var attrs = fixedAttrs.map(function (_a) {\n            var _b = __read(_a, 2), namespaceAndName = _b[0], value = _b[1];\n            var _c = __read(splitNamespace(namespaceAndName), 2), ns = _c[0], name = _c[1];\n            return [ns, name, value];\n        });\n        componentRendererType = resolveRendererType2(componentRendererType);\n        if (componentView) {\n            flags |= 33554432 /* ComponentView */;\n        }\n        flags |= 1 /* TypeElement */;\n        return {\n            // will bet set by the view definition\n            nodeIndex: -1,\n            parent: null,\n            renderParent: null,\n            bindingIndex: -1,\n            outputIndex: -1,\n            // regular values\n            checkIndex: checkIndex,\n            flags: flags,\n            childFlags: 0,\n            directChildFlags: 0,\n            childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references, ngContentIndex: ngContentIndex, childCount: childCount,\n            bindings: bindingDefs,\n            bindingFlags: calcBindingFlags(bindingDefs),\n            outputs: outputDefs,\n            element: {\n                ns: ns,\n                name: name,\n                attrs: attrs,\n                template: null,\n                // will bet set by the view definition\n                componentProvider: null,\n                componentView: componentView || null,\n                componentRendererType: componentRendererType,\n                publicProviders: null,\n                allProviders: null,\n                handleEvent: handleEvent || NOOP,\n            },\n            provider: null,\n            text: null,\n            query: null,\n            ngContent: null\n        };\n    }\n    function createElement(view, renderHost, def) {\n        var elDef = def.element;\n        var rootSelectorOrNode = view.root.selectorOrNode;\n        var renderer = view.renderer;\n        var el;\n        if (view.parent || !rootSelectorOrNode) {\n            if (elDef.name) {\n                el = renderer.createElement(elDef.name, elDef.ns);\n            }\n            else {\n                el = renderer.createComment('');\n            }\n            var parentEl = getParentRenderElement(view, renderHost, def);\n            if (parentEl) {\n                renderer.appendChild(parentEl, el);\n            }\n        }\n        else {\n            // when using native Shadow DOM, do not clear the root element contents to allow slot projection\n            var preserveContent = (!!elDef.componentRendererType &&\n                elDef.componentRendererType.encapsulation === exports.ViewEncapsulation.ShadowDom);\n            el = renderer.selectRootElement(rootSelectorOrNode, preserveContent);\n        }\n        if (elDef.attrs) {\n            for (var i = 0; i < elDef.attrs.length; i++) {\n                var _a = __read(elDef.attrs[i], 3), ns = _a[0], name_2 = _a[1], value = _a[2];\n                renderer.setAttribute(el, name_2, value, ns);\n            }\n        }\n        return el;\n    }\n    function listenToElementOutputs(view, compView, def, el) {\n        for (var i = 0; i < def.outputs.length; i++) {\n            var output = def.outputs[i];\n            var handleEventClosure = renderEventHandlerClosure(view, def.nodeIndex, elementEventFullName(output.target, output.eventName));\n            var listenTarget = output.target;\n            var listenerView = view;\n            if (output.target === 'component') {\n                listenTarget = null;\n                listenerView = compView;\n            }\n            var disposable = listenerView.renderer.listen(listenTarget || el, output.eventName, handleEventClosure);\n            view.disposables[def.outputIndex + i] = disposable;\n        }\n    }\n    function renderEventHandlerClosure(view, index, eventName) {\n        return function (event) { return dispatchEvent(view, index, eventName, event); };\n    }\n    function checkAndUpdateElementInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n        var bindLen = def.bindings.length;\n        var changed = false;\n        if (bindLen > 0 && checkAndUpdateElementValue(view, def, 0, v0))\n            changed = true;\n        if (bindLen > 1 && checkAndUpdateElementValue(view, def, 1, v1))\n            changed = true;\n        if (bindLen > 2 && checkAndUpdateElementValue(view, def, 2, v2))\n            changed = true;\n        if (bindLen > 3 && checkAndUpdateElementValue(view, def, 3, v3))\n            changed = true;\n        if (bindLen > 4 && checkAndUpdateElementValue(view, def, 4, v4))\n            changed = true;\n        if (bindLen > 5 && checkAndUpdateElementValue(view, def, 5, v5))\n            changed = true;\n        if (bindLen > 6 && checkAndUpdateElementValue(view, def, 6, v6))\n            changed = true;\n        if (bindLen > 7 && checkAndUpdateElementValue(view, def, 7, v7))\n            changed = true;\n        if (bindLen > 8 && checkAndUpdateElementValue(view, def, 8, v8))\n            changed = true;\n        if (bindLen > 9 && checkAndUpdateElementValue(view, def, 9, v9))\n            changed = true;\n        return changed;\n    }\n    function checkAndUpdateElementDynamic(view, def, values) {\n        var changed = false;\n        for (var i = 0; i < values.length; i++) {\n            if (checkAndUpdateElementValue(view, def, i, values[i]))\n                changed = true;\n        }\n        return changed;\n    }\n    function checkAndUpdateElementValue(view, def, bindingIdx, value) {\n        if (!checkAndUpdateBinding(view, def, bindingIdx, value)) {\n            return false;\n        }\n        var binding = def.bindings[bindingIdx];\n        var elData = asElementData(view, def.nodeIndex);\n        var renderNode = elData.renderElement;\n        var name = binding.name;\n        switch (binding.flags & 15 /* Types */) {\n            case 1 /* TypeElementAttribute */:\n                setElementAttribute(view, binding, renderNode, binding.ns, name, value);\n                break;\n            case 2 /* TypeElementClass */:\n                setElementClass(view, renderNode, name, value);\n                break;\n            case 4 /* TypeElementStyle */:\n                setElementStyle(view, binding, renderNode, name, value);\n                break;\n            case 8 /* TypeProperty */:\n                var bindView = (def.flags & 33554432 /* ComponentView */ &&\n                    binding.flags & 32 /* SyntheticHostProperty */) ?\n                    elData.componentView :\n                    view;\n                setElementProperty(bindView, binding, renderNode, name, value);\n                break;\n        }\n        return true;\n    }\n    function setElementAttribute(view, binding, renderNode, ns, name, value) {\n        var securityContext = binding.securityContext;\n        var renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;\n        renderValue = renderValue != null ? renderValue.toString() : null;\n        var renderer = view.renderer;\n        if (value != null) {\n            renderer.setAttribute(renderNode, name, renderValue, ns);\n        }\n        else {\n            renderer.removeAttribute(renderNode, name, ns);\n        }\n    }\n    function setElementClass(view, renderNode, name, value) {\n        var renderer = view.renderer;\n        if (value) {\n            renderer.addClass(renderNode, name);\n        }\n        else {\n            renderer.removeClass(renderNode, name);\n        }\n    }\n    function setElementStyle(view, binding, renderNode, name, value) {\n        var renderValue = view.root.sanitizer.sanitize(exports.SecurityContext.STYLE, value);\n        if (renderValue != null) {\n            renderValue = renderValue.toString();\n            var unit = binding.suffix;\n            if (unit != null) {\n                renderValue = renderValue + unit;\n            }\n        }\n        else {\n            renderValue = null;\n        }\n        var renderer = view.renderer;\n        if (renderValue != null) {\n            renderer.setStyle(renderNode, name, renderValue);\n        }\n        else {\n            renderer.removeStyle(renderNode, name);\n        }\n    }\n    function setElementProperty(view, binding, renderNode, name, value) {\n        var securityContext = binding.securityContext;\n        var renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;\n        view.renderer.setProperty(renderNode, name, renderValue);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function queryDef(flags, id, bindings) {\n        var bindingDefs = [];\n        for (var propName in bindings) {\n            var bindingType = bindings[propName];\n            bindingDefs.push({ propName: propName, bindingType: bindingType });\n        }\n        return {\n            // will bet set by the view definition\n            nodeIndex: -1,\n            parent: null,\n            renderParent: null,\n            bindingIndex: -1,\n            outputIndex: -1,\n            // regular values\n            // TODO(vicb): check\n            checkIndex: -1, flags: flags,\n            childFlags: 0,\n            directChildFlags: 0,\n            childMatchedQueries: 0,\n            ngContentIndex: -1,\n            matchedQueries: {},\n            matchedQueryIds: 0,\n            references: {},\n            childCount: 0,\n            bindings: [],\n            bindingFlags: 0,\n            outputs: [],\n            element: null,\n            provider: null,\n            text: null,\n            query: { id: id, filterId: filterQueryId(id), bindings: bindingDefs },\n            ngContent: null\n        };\n    }\n    function createQuery() {\n        return new QueryList();\n    }\n    function dirtyParentQueries(view) {\n        var queryIds = view.def.nodeMatchedQueries;\n        while (view.parent && isEmbeddedView(view)) {\n            var tplDef = view.parentNodeDef;\n            view = view.parent;\n            // content queries\n            var end = tplDef.nodeIndex + tplDef.childCount;\n            for (var i = 0; i <= end; i++) {\n                var nodeDef = view.def.nodes[i];\n                if ((nodeDef.flags & 67108864 /* TypeContentQuery */) &&\n                    (nodeDef.flags & 536870912 /* DynamicQuery */) &&\n                    (nodeDef.query.filterId & queryIds) === nodeDef.query.filterId) {\n                    asQueryList(view, i).setDirty();\n                }\n                if ((nodeDef.flags & 1 /* TypeElement */ && i + nodeDef.childCount < tplDef.nodeIndex) ||\n                    !(nodeDef.childFlags & 67108864 /* TypeContentQuery */) ||\n                    !(nodeDef.childFlags & 536870912 /* DynamicQuery */)) {\n                    // skip elements that don't contain the template element or no query.\n                    i += nodeDef.childCount;\n                }\n            }\n        }\n        // view queries\n        if (view.def.nodeFlags & 134217728 /* TypeViewQuery */) {\n            for (var i = 0; i < view.def.nodes.length; i++) {\n                var nodeDef = view.def.nodes[i];\n                if ((nodeDef.flags & 134217728 /* TypeViewQuery */) && (nodeDef.flags & 536870912 /* DynamicQuery */)) {\n                    asQueryList(view, i).setDirty();\n                }\n                // only visit the root nodes\n                i += nodeDef.childCount;\n            }\n        }\n    }\n    function checkAndUpdateQuery(view, nodeDef) {\n        var queryList = asQueryList(view, nodeDef.nodeIndex);\n        if (!queryList.dirty) {\n            return;\n        }\n        var directiveInstance;\n        var newValues = undefined;\n        if (nodeDef.flags & 67108864 /* TypeContentQuery */) {\n            var elementDef = nodeDef.parent.parent;\n            newValues = calcQueryValues(view, elementDef.nodeIndex, elementDef.nodeIndex + elementDef.childCount, nodeDef.query, []);\n            directiveInstance = asProviderData(view, nodeDef.parent.nodeIndex).instance;\n        }\n        else if (nodeDef.flags & 134217728 /* TypeViewQuery */) {\n            newValues = calcQueryValues(view, 0, view.def.nodes.length - 1, nodeDef.query, []);\n            directiveInstance = view.component;\n        }\n        queryList.reset(newValues);\n        var bindings = nodeDef.query.bindings;\n        var notify = false;\n        for (var i = 0; i < bindings.length; i++) {\n            var binding = bindings[i];\n            var boundValue = void 0;\n            switch (binding.bindingType) {\n                case 0 /* First */:\n                    boundValue = queryList.first;\n                    break;\n                case 1 /* All */:\n                    boundValue = queryList;\n                    notify = true;\n                    break;\n            }\n            directiveInstance[binding.propName] = boundValue;\n        }\n        if (notify) {\n            queryList.notifyOnChanges();\n        }\n    }\n    function calcQueryValues(view, startIndex, endIndex, queryDef, values) {\n        for (var i = startIndex; i <= endIndex; i++) {\n            var nodeDef = view.def.nodes[i];\n            var valueType = nodeDef.matchedQueries[queryDef.id];\n            if (valueType != null) {\n                values.push(getQueryValue(view, nodeDef, valueType));\n            }\n            if (nodeDef.flags & 1 /* TypeElement */ && nodeDef.element.template &&\n                (nodeDef.element.template.nodeMatchedQueries & queryDef.filterId) ===\n                    queryDef.filterId) {\n                var elementData = asElementData(view, i);\n                // check embedded views that were attached at the place of their template,\n                // but process child nodes first if some match the query (see issue #16568)\n                if ((nodeDef.childMatchedQueries & queryDef.filterId) === queryDef.filterId) {\n                    calcQueryValues(view, i + 1, i + nodeDef.childCount, queryDef, values);\n                    i += nodeDef.childCount;\n                }\n                if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n                    var embeddedViews = elementData.viewContainer._embeddedViews;\n                    for (var k = 0; k < embeddedViews.length; k++) {\n                        var embeddedView = embeddedViews[k];\n                        var dvc = declaredViewContainer(embeddedView);\n                        if (dvc && dvc === elementData) {\n                            calcQueryValues(embeddedView, 0, embeddedView.def.nodes.length - 1, queryDef, values);\n                        }\n                    }\n                }\n                var projectedViews = elementData.template._projectedViews;\n                if (projectedViews) {\n                    for (var k = 0; k < projectedViews.length; k++) {\n                        var projectedView = projectedViews[k];\n                        calcQueryValues(projectedView, 0, projectedView.def.nodes.length - 1, queryDef, values);\n                    }\n                }\n            }\n            if ((nodeDef.childMatchedQueries & queryDef.filterId) !== queryDef.filterId) {\n                // if no child matches the query, skip the children.\n                i += nodeDef.childCount;\n            }\n        }\n        return values;\n    }\n    function getQueryValue(view, nodeDef, queryValueType) {\n        if (queryValueType != null) {\n            // a match\n            switch (queryValueType) {\n                case 1 /* RenderElement */:\n                    return asElementData(view, nodeDef.nodeIndex).renderElement;\n                case 0 /* ElementRef */:\n                    return new ElementRef(asElementData(view, nodeDef.nodeIndex).renderElement);\n                case 2 /* TemplateRef */:\n                    return asElementData(view, nodeDef.nodeIndex).template;\n                case 3 /* ViewContainerRef */:\n                    return asElementData(view, nodeDef.nodeIndex).viewContainer;\n                case 4 /* Provider */:\n                    return asProviderData(view, nodeDef.nodeIndex).instance;\n            }\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function ngContentDef(ngContentIndex, index) {\n        return {\n            // will bet set by the view definition\n            nodeIndex: -1,\n            parent: null,\n            renderParent: null,\n            bindingIndex: -1,\n            outputIndex: -1,\n            // regular values\n            checkIndex: -1,\n            flags: 8 /* TypeNgContent */,\n            childFlags: 0,\n            directChildFlags: 0,\n            childMatchedQueries: 0,\n            matchedQueries: {},\n            matchedQueryIds: 0,\n            references: {}, ngContentIndex: ngContentIndex,\n            childCount: 0,\n            bindings: [],\n            bindingFlags: 0,\n            outputs: [],\n            element: null,\n            provider: null,\n            text: null,\n            query: null,\n            ngContent: { index: index }\n        };\n    }\n    function appendNgContent(view, renderHost, def) {\n        var parentEl = getParentRenderElement(view, renderHost, def);\n        if (!parentEl) {\n            // Nothing to do if there is no parent element.\n            return;\n        }\n        var ngContentIndex = def.ngContent.index;\n        visitProjectedRenderNodes(view, ngContentIndex, 1 /* AppendChild */, parentEl, null, undefined);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function purePipeDef(checkIndex, argCount) {\n        // argCount + 1 to include the pipe as first arg\n        return _pureExpressionDef(128 /* TypePurePipe */, checkIndex, new Array(argCount + 1));\n    }\n    function pureArrayDef(checkIndex, argCount) {\n        return _pureExpressionDef(32 /* TypePureArray */, checkIndex, new Array(argCount));\n    }\n    function pureObjectDef(checkIndex, propToIndex) {\n        var keys = Object.keys(propToIndex);\n        var nbKeys = keys.length;\n        var propertyNames = new Array(nbKeys);\n        for (var i = 0; i < nbKeys; i++) {\n            var key = keys[i];\n            var index = propToIndex[key];\n            propertyNames[index] = key;\n        }\n        return _pureExpressionDef(64 /* TypePureObject */, checkIndex, propertyNames);\n    }\n    function _pureExpressionDef(flags, checkIndex, propertyNames) {\n        var bindings = new Array(propertyNames.length);\n        for (var i = 0; i < propertyNames.length; i++) {\n            var prop = propertyNames[i];\n            bindings[i] = {\n                flags: 8 /* TypeProperty */,\n                name: prop,\n                ns: null,\n                nonMinifiedName: prop,\n                securityContext: null,\n                suffix: null\n            };\n        }\n        return {\n            // will bet set by the view definition\n            nodeIndex: -1,\n            parent: null,\n            renderParent: null,\n            bindingIndex: -1,\n            outputIndex: -1,\n            // regular values\n            checkIndex: checkIndex,\n            flags: flags,\n            childFlags: 0,\n            directChildFlags: 0,\n            childMatchedQueries: 0,\n            matchedQueries: {},\n            matchedQueryIds: 0,\n            references: {},\n            ngContentIndex: -1,\n            childCount: 0, bindings: bindings,\n            bindingFlags: calcBindingFlags(bindings),\n            outputs: [],\n            element: null,\n            provider: null,\n            text: null,\n            query: null,\n            ngContent: null\n        };\n    }\n    function createPureExpression(view, def) {\n        return { value: undefined };\n    }\n    function checkAndUpdatePureExpressionInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n        var bindings = def.bindings;\n        var changed = false;\n        var bindLen = bindings.length;\n        if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))\n            changed = true;\n        if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))\n            changed = true;\n        if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))\n            changed = true;\n        if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))\n            changed = true;\n        if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))\n            changed = true;\n        if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))\n            changed = true;\n        if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))\n            changed = true;\n        if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))\n            changed = true;\n        if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))\n            changed = true;\n        if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))\n            changed = true;\n        if (changed) {\n            var data = asPureExpressionData(view, def.nodeIndex);\n            var value = void 0;\n            switch (def.flags & 201347067 /* Types */) {\n                case 32 /* TypePureArray */:\n                    value = new Array(bindings.length);\n                    if (bindLen > 0)\n                        value[0] = v0;\n                    if (bindLen > 1)\n                        value[1] = v1;\n                    if (bindLen > 2)\n                        value[2] = v2;\n                    if (bindLen > 3)\n                        value[3] = v3;\n                    if (bindLen > 4)\n                        value[4] = v4;\n                    if (bindLen > 5)\n                        value[5] = v5;\n                    if (bindLen > 6)\n                        value[6] = v6;\n                    if (bindLen > 7)\n                        value[7] = v7;\n                    if (bindLen > 8)\n                        value[8] = v8;\n                    if (bindLen > 9)\n                        value[9] = v9;\n                    break;\n                case 64 /* TypePureObject */:\n                    value = {};\n                    if (bindLen > 0)\n                        value[bindings[0].name] = v0;\n                    if (bindLen > 1)\n                        value[bindings[1].name] = v1;\n                    if (bindLen > 2)\n                        value[bindings[2].name] = v2;\n                    if (bindLen > 3)\n                        value[bindings[3].name] = v3;\n                    if (bindLen > 4)\n                        value[bindings[4].name] = v4;\n                    if (bindLen > 5)\n                        value[bindings[5].name] = v5;\n                    if (bindLen > 6)\n                        value[bindings[6].name] = v6;\n                    if (bindLen > 7)\n                        value[bindings[7].name] = v7;\n                    if (bindLen > 8)\n                        value[bindings[8].name] = v8;\n                    if (bindLen > 9)\n                        value[bindings[9].name] = v9;\n                    break;\n                case 128 /* TypePurePipe */:\n                    var pipe = v0;\n                    switch (bindLen) {\n                        case 1:\n                            value = pipe.transform(v0);\n                            break;\n                        case 2:\n                            value = pipe.transform(v1);\n                            break;\n                        case 3:\n                            value = pipe.transform(v1, v2);\n                            break;\n                        case 4:\n                            value = pipe.transform(v1, v2, v3);\n                            break;\n                        case 5:\n                            value = pipe.transform(v1, v2, v3, v4);\n                            break;\n                        case 6:\n                            value = pipe.transform(v1, v2, v3, v4, v5);\n                            break;\n                        case 7:\n                            value = pipe.transform(v1, v2, v3, v4, v5, v6);\n                            break;\n                        case 8:\n                            value = pipe.transform(v1, v2, v3, v4, v5, v6, v7);\n                            break;\n                        case 9:\n                            value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8);\n                            break;\n                        case 10:\n                            value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8, v9);\n                            break;\n                    }\n                    break;\n            }\n            data.value = value;\n        }\n        return changed;\n    }\n    function checkAndUpdatePureExpressionDynamic(view, def, values) {\n        var bindings = def.bindings;\n        var changed = false;\n        for (var i = 0; i < values.length; i++) {\n            // Note: We need to loop over all values, so that\n            // the old values are updates as well!\n            if (checkAndUpdateBinding(view, def, i, values[i])) {\n                changed = true;\n            }\n        }\n        if (changed) {\n            var data = asPureExpressionData(view, def.nodeIndex);\n            var value = void 0;\n            switch (def.flags & 201347067 /* Types */) {\n                case 32 /* TypePureArray */:\n                    value = values;\n                    break;\n                case 64 /* TypePureObject */:\n                    value = {};\n                    for (var i = 0; i < values.length; i++) {\n                        value[bindings[i].name] = values[i];\n                    }\n                    break;\n                case 128 /* TypePurePipe */:\n                    var pipe = values[0];\n                    var params = values.slice(1);\n                    value = pipe.transform.apply(pipe, __spread(params));\n                    break;\n            }\n            data.value = value;\n        }\n        return changed;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function textDef(checkIndex, ngContentIndex, staticText) {\n        var bindings = new Array(staticText.length - 1);\n        for (var i = 1; i < staticText.length; i++) {\n            bindings[i - 1] = {\n                flags: 8 /* TypeProperty */,\n                name: null,\n                ns: null,\n                nonMinifiedName: null,\n                securityContext: null,\n                suffix: staticText[i],\n            };\n        }\n        return {\n            // will bet set by the view definition\n            nodeIndex: -1,\n            parent: null,\n            renderParent: null,\n            bindingIndex: -1,\n            outputIndex: -1,\n            // regular values\n            checkIndex: checkIndex,\n            flags: 2 /* TypeText */,\n            childFlags: 0,\n            directChildFlags: 0,\n            childMatchedQueries: 0,\n            matchedQueries: {},\n            matchedQueryIds: 0,\n            references: {}, ngContentIndex: ngContentIndex,\n            childCount: 0, bindings: bindings,\n            bindingFlags: 8 /* TypeProperty */,\n            outputs: [],\n            element: null,\n            provider: null,\n            text: { prefix: staticText[0] },\n            query: null,\n            ngContent: null,\n        };\n    }\n    function createText(view, renderHost, def) {\n        var renderNode;\n        var renderer = view.renderer;\n        renderNode = renderer.createText(def.text.prefix);\n        var parentEl = getParentRenderElement(view, renderHost, def);\n        if (parentEl) {\n            renderer.appendChild(parentEl, renderNode);\n        }\n        return { renderText: renderNode };\n    }\n    function checkAndUpdateTextInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n        var changed = false;\n        var bindings = def.bindings;\n        var bindLen = bindings.length;\n        if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))\n            changed = true;\n        if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))\n            changed = true;\n        if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))\n            changed = true;\n        if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))\n            changed = true;\n        if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))\n            changed = true;\n        if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))\n            changed = true;\n        if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))\n            changed = true;\n        if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))\n            changed = true;\n        if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))\n            changed = true;\n        if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))\n            changed = true;\n        if (changed) {\n            var value = def.text.prefix;\n            if (bindLen > 0)\n                value += _addInterpolationPart(v0, bindings[0]);\n            if (bindLen > 1)\n                value += _addInterpolationPart(v1, bindings[1]);\n            if (bindLen > 2)\n                value += _addInterpolationPart(v2, bindings[2]);\n            if (bindLen > 3)\n                value += _addInterpolationPart(v3, bindings[3]);\n            if (bindLen > 4)\n                value += _addInterpolationPart(v4, bindings[4]);\n            if (bindLen > 5)\n                value += _addInterpolationPart(v5, bindings[5]);\n            if (bindLen > 6)\n                value += _addInterpolationPart(v6, bindings[6]);\n            if (bindLen > 7)\n                value += _addInterpolationPart(v7, bindings[7]);\n            if (bindLen > 8)\n                value += _addInterpolationPart(v8, bindings[8]);\n            if (bindLen > 9)\n                value += _addInterpolationPart(v9, bindings[9]);\n            var renderNode = asTextData(view, def.nodeIndex).renderText;\n            view.renderer.setValue(renderNode, value);\n        }\n        return changed;\n    }\n    function checkAndUpdateTextDynamic(view, def, values) {\n        var bindings = def.bindings;\n        var changed = false;\n        for (var i = 0; i < values.length; i++) {\n            // Note: We need to loop over all values, so that\n            // the old values are updates as well!\n            if (checkAndUpdateBinding(view, def, i, values[i])) {\n                changed = true;\n            }\n        }\n        if (changed) {\n            var value = '';\n            for (var i = 0; i < values.length; i++) {\n                value = value + _addInterpolationPart(values[i], bindings[i]);\n            }\n            value = def.text.prefix + value;\n            var renderNode = asTextData(view, def.nodeIndex).renderText;\n            view.renderer.setValue(renderNode, value);\n        }\n        return changed;\n    }\n    function _addInterpolationPart(value, binding) {\n        var valueStr = value != null ? value.toString() : '';\n        return valueStr + binding.suffix;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function viewDef(flags, nodes, updateDirectives, updateRenderer) {\n        // clone nodes and set auto calculated values\n        var viewBindingCount = 0;\n        var viewDisposableCount = 0;\n        var viewNodeFlags = 0;\n        var viewRootNodeFlags = 0;\n        var viewMatchedQueries = 0;\n        var currentParent = null;\n        var currentRenderParent = null;\n        var currentElementHasPublicProviders = false;\n        var currentElementHasPrivateProviders = false;\n        var lastRenderRootNode = null;\n        for (var i = 0; i < nodes.length; i++) {\n            var node = nodes[i];\n            node.nodeIndex = i;\n            node.parent = currentParent;\n            node.bindingIndex = viewBindingCount;\n            node.outputIndex = viewDisposableCount;\n            node.renderParent = currentRenderParent;\n            viewNodeFlags |= node.flags;\n            viewMatchedQueries |= node.matchedQueryIds;\n            if (node.element) {\n                var elDef = node.element;\n                elDef.publicProviders =\n                    currentParent ? currentParent.element.publicProviders : Object.create(null);\n                elDef.allProviders = elDef.publicProviders;\n                // Note: We assume that all providers of an element are before any child element!\n                currentElementHasPublicProviders = false;\n                currentElementHasPrivateProviders = false;\n                if (node.element.template) {\n                    viewMatchedQueries |= node.element.template.nodeMatchedQueries;\n                }\n            }\n            validateNode(currentParent, node, nodes.length);\n            viewBindingCount += node.bindings.length;\n            viewDisposableCount += node.outputs.length;\n            if (!currentRenderParent && (node.flags & 3 /* CatRenderNode */)) {\n                lastRenderRootNode = node;\n            }\n            if (node.flags & 20224 /* CatProvider */) {\n                if (!currentElementHasPublicProviders) {\n                    currentElementHasPublicProviders = true;\n                    // Use prototypical inheritance to not get O(n^2) complexity...\n                    currentParent.element.publicProviders =\n                        Object.create(currentParent.element.publicProviders);\n                    currentParent.element.allProviders = currentParent.element.publicProviders;\n                }\n                var isPrivateService = (node.flags & 8192 /* PrivateProvider */) !== 0;\n                var isComponent = (node.flags & 32768 /* Component */) !== 0;\n                if (!isPrivateService || isComponent) {\n                    currentParent.element.publicProviders[tokenKey(node.provider.token)] = node;\n                }\n                else {\n                    if (!currentElementHasPrivateProviders) {\n                        currentElementHasPrivateProviders = true;\n                        // Use prototypical inheritance to not get O(n^2) complexity...\n                        currentParent.element.allProviders =\n                            Object.create(currentParent.element.publicProviders);\n                    }\n                    currentParent.element.allProviders[tokenKey(node.provider.token)] = node;\n                }\n                if (isComponent) {\n                    currentParent.element.componentProvider = node;\n                }\n            }\n            if (currentParent) {\n                currentParent.childFlags |= node.flags;\n                currentParent.directChildFlags |= node.flags;\n                currentParent.childMatchedQueries |= node.matchedQueryIds;\n                if (node.element && node.element.template) {\n                    currentParent.childMatchedQueries |= node.element.template.nodeMatchedQueries;\n                }\n            }\n            else {\n                viewRootNodeFlags |= node.flags;\n            }\n            if (node.childCount > 0) {\n                currentParent = node;\n                if (!isNgContainer(node)) {\n                    currentRenderParent = node;\n                }\n            }\n            else {\n                // When the current node has no children, check if it is the last children of its parent.\n                // When it is, propagate the flags up.\n                // The loop is required because an element could be the last transitive children of several\n                // elements. We loop to either the root or the highest opened element (= with remaining\n                // children)\n                while (currentParent && i === currentParent.nodeIndex + currentParent.childCount) {\n                    var newParent = currentParent.parent;\n                    if (newParent) {\n                        newParent.childFlags |= currentParent.childFlags;\n                        newParent.childMatchedQueries |= currentParent.childMatchedQueries;\n                    }\n                    currentParent = newParent;\n                    // We also need to update the render parent & account for ng-container\n                    if (currentParent && isNgContainer(currentParent)) {\n                        currentRenderParent = currentParent.renderParent;\n                    }\n                    else {\n                        currentRenderParent = currentParent;\n                    }\n                }\n            }\n        }\n        var handleEvent = function (view, nodeIndex, eventName, event) {\n            return nodes[nodeIndex].element.handleEvent(view, eventName, event);\n        };\n        return {\n            // Will be filled later...\n            factory: null,\n            nodeFlags: viewNodeFlags,\n            rootNodeFlags: viewRootNodeFlags,\n            nodeMatchedQueries: viewMatchedQueries, flags: flags,\n            nodes: nodes,\n            updateDirectives: updateDirectives || NOOP,\n            updateRenderer: updateRenderer || NOOP, handleEvent: handleEvent,\n            bindingCount: viewBindingCount,\n            outputCount: viewDisposableCount, lastRenderRootNode: lastRenderRootNode\n        };\n    }\n    function isNgContainer(node) {\n        return (node.flags & 1 /* TypeElement */) !== 0 && node.element.name === null;\n    }\n    function validateNode(parent, node, nodeCount) {\n        var template = node.element && node.element.template;\n        if (template) {\n            if (!template.lastRenderRootNode) {\n                throw new Error(\"Illegal State: Embedded templates without nodes are not allowed!\");\n            }\n            if (template.lastRenderRootNode &&\n                template.lastRenderRootNode.flags & 16777216 /* EmbeddedViews */) {\n                throw new Error(\"Illegal State: Last root node of a template can't have embedded views, at index \" + node.nodeIndex + \"!\");\n            }\n        }\n        if (node.flags & 20224 /* CatProvider */) {\n            var parentFlags = parent ? parent.flags : 0;\n            if ((parentFlags & 1 /* TypeElement */) === 0) {\n                throw new Error(\"Illegal State: StaticProvider/Directive nodes need to be children of elements or anchors, at index \" + node.nodeIndex + \"!\");\n            }\n        }\n        if (node.query) {\n            if (node.flags & 67108864 /* TypeContentQuery */ &&\n                (!parent || (parent.flags & 16384 /* TypeDirective */) === 0)) {\n                throw new Error(\"Illegal State: Content Query nodes need to be children of directives, at index \" + node.nodeIndex + \"!\");\n            }\n            if (node.flags & 134217728 /* TypeViewQuery */ && parent) {\n                throw new Error(\"Illegal State: View Query nodes have to be top level nodes, at index \" + node.nodeIndex + \"!\");\n            }\n        }\n        if (node.childCount) {\n            var parentEnd = parent ? parent.nodeIndex + parent.childCount : nodeCount - 1;\n            if (node.nodeIndex <= parentEnd && node.nodeIndex + node.childCount > parentEnd) {\n                throw new Error(\"Illegal State: childCount of node leads outside of parent, at index \" + node.nodeIndex + \"!\");\n            }\n        }\n    }\n    function createEmbeddedView(parent, anchorDef, viewDef, context) {\n        // embedded views are seen as siblings to the anchor, so we need\n        // to get the parent of the anchor and use it as parentIndex.\n        var view = createView(parent.root, parent.renderer, parent, anchorDef, viewDef);\n        initView(view, parent.component, context);\n        createViewNodes(view);\n        return view;\n    }\n    function createRootView(root, def, context) {\n        var view = createView(root, root.renderer, null, null, def);\n        initView(view, context, context);\n        createViewNodes(view);\n        return view;\n    }\n    function createComponentView(parentView, nodeDef, viewDef, hostElement) {\n        var rendererType = nodeDef.element.componentRendererType;\n        var compRenderer;\n        if (!rendererType) {\n            compRenderer = parentView.root.renderer;\n        }\n        else {\n            compRenderer = parentView.root.rendererFactory.createRenderer(hostElement, rendererType);\n        }\n        return createView(parentView.root, compRenderer, parentView, nodeDef.element.componentProvider, viewDef);\n    }\n    function createView(root, renderer, parent, parentNodeDef, def) {\n        var nodes = new Array(def.nodes.length);\n        var disposables = def.outputCount ? new Array(def.outputCount) : null;\n        var view = {\n            def: def,\n            parent: parent,\n            viewContainerParent: null, parentNodeDef: parentNodeDef,\n            context: null,\n            component: null, nodes: nodes,\n            state: 13 /* CatInit */, root: root, renderer: renderer,\n            oldValues: new Array(def.bindingCount), disposables: disposables,\n            initIndex: -1\n        };\n        return view;\n    }\n    function initView(view, component, context) {\n        view.component = component;\n        view.context = context;\n    }\n    function createViewNodes(view) {\n        var renderHost;\n        if (isComponentView(view)) {\n            var hostDef = view.parentNodeDef;\n            renderHost = asElementData(view.parent, hostDef.parent.nodeIndex).renderElement;\n        }\n        var def = view.def;\n        var nodes = view.nodes;\n        for (var i = 0; i < def.nodes.length; i++) {\n            var nodeDef = def.nodes[i];\n            Services.setCurrentNode(view, i);\n            var nodeData = void 0;\n            switch (nodeDef.flags & 201347067 /* Types */) {\n                case 1 /* TypeElement */:\n                    var el = createElement(view, renderHost, nodeDef);\n                    var componentView = undefined;\n                    if (nodeDef.flags & 33554432 /* ComponentView */) {\n                        var compViewDef = resolveDefinition(nodeDef.element.componentView);\n                        componentView = Services.createComponentView(view, nodeDef, compViewDef, el);\n                    }\n                    listenToElementOutputs(view, componentView, nodeDef, el);\n                    nodeData = {\n                        renderElement: el,\n                        componentView: componentView,\n                        viewContainer: null,\n                        template: nodeDef.element.template ? createTemplateData(view, nodeDef) : undefined\n                    };\n                    if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n                        nodeData.viewContainer = createViewContainerData(view, nodeDef, nodeData);\n                    }\n                    break;\n                case 2 /* TypeText */:\n                    nodeData = createText(view, renderHost, nodeDef);\n                    break;\n                case 512 /* TypeClassProvider */:\n                case 1024 /* TypeFactoryProvider */:\n                case 2048 /* TypeUseExistingProvider */:\n                case 256 /* TypeValueProvider */: {\n                    nodeData = nodes[i];\n                    if (!nodeData && !(nodeDef.flags & 4096 /* LazyProvider */)) {\n                        var instance = createProviderInstance(view, nodeDef);\n                        nodeData = { instance: instance };\n                    }\n                    break;\n                }\n                case 16 /* TypePipe */: {\n                    var instance = createPipeInstance(view, nodeDef);\n                    nodeData = { instance: instance };\n                    break;\n                }\n                case 16384 /* TypeDirective */: {\n                    nodeData = nodes[i];\n                    if (!nodeData) {\n                        var instance = createDirectiveInstance(view, nodeDef);\n                        nodeData = { instance: instance };\n                    }\n                    if (nodeDef.flags & 32768 /* Component */) {\n                        var compView = asElementData(view, nodeDef.parent.nodeIndex).componentView;\n                        initView(compView, nodeData.instance, nodeData.instance);\n                    }\n                    break;\n                }\n                case 32 /* TypePureArray */:\n                case 64 /* TypePureObject */:\n                case 128 /* TypePurePipe */:\n                    nodeData = createPureExpression(view, nodeDef);\n                    break;\n                case 67108864 /* TypeContentQuery */:\n                case 134217728 /* TypeViewQuery */:\n                    nodeData = createQuery();\n                    break;\n                case 8 /* TypeNgContent */:\n                    appendNgContent(view, renderHost, nodeDef);\n                    // no runtime data needed for NgContent...\n                    nodeData = undefined;\n                    break;\n            }\n            nodes[i] = nodeData;\n        }\n        // Create the ViewData.nodes of component views after we created everything else,\n        // so that e.g. ng-content works\n        execComponentViewsAction(view, ViewAction.CreateViewNodes);\n        // fill static content and view queries\n        execQueriesAction(view, 67108864 /* TypeContentQuery */ | 134217728 /* TypeViewQuery */, 268435456 /* StaticQuery */, 0 /* CheckAndUpdate */);\n    }\n    function checkNoChangesView(view) {\n        markProjectedViewsForCheck(view);\n        Services.updateDirectives(view, 1 /* CheckNoChanges */);\n        execEmbeddedViewsAction(view, ViewAction.CheckNoChanges);\n        Services.updateRenderer(view, 1 /* CheckNoChanges */);\n        execComponentViewsAction(view, ViewAction.CheckNoChanges);\n        // Note: We don't check queries for changes as we didn't do this in v2.x.\n        // TODO(tbosch): investigate if we can enable the check again in v5.x with a nicer error message.\n        view.state &= ~(64 /* CheckProjectedViews */ | 32 /* CheckProjectedView */);\n    }\n    function checkAndUpdateView(view) {\n        if (view.state & 1 /* BeforeFirstCheck */) {\n            view.state &= ~1 /* BeforeFirstCheck */;\n            view.state |= 2 /* FirstCheck */;\n        }\n        else {\n            view.state &= ~2 /* FirstCheck */;\n        }\n        shiftInitState(view, 0 /* InitState_BeforeInit */, 256 /* InitState_CallingOnInit */);\n        markProjectedViewsForCheck(view);\n        Services.updateDirectives(view, 0 /* CheckAndUpdate */);\n        execEmbeddedViewsAction(view, ViewAction.CheckAndUpdate);\n        execQueriesAction(view, 67108864 /* TypeContentQuery */, 536870912 /* DynamicQuery */, 0 /* CheckAndUpdate */);\n        var callInit = shiftInitState(view, 256 /* InitState_CallingOnInit */, 512 /* InitState_CallingAfterContentInit */);\n        callLifecycleHooksChildrenFirst(view, 2097152 /* AfterContentChecked */ | (callInit ? 1048576 /* AfterContentInit */ : 0));\n        Services.updateRenderer(view, 0 /* CheckAndUpdate */);\n        execComponentViewsAction(view, ViewAction.CheckAndUpdate);\n        execQueriesAction(view, 134217728 /* TypeViewQuery */, 536870912 /* DynamicQuery */, 0 /* CheckAndUpdate */);\n        callInit = shiftInitState(view, 512 /* InitState_CallingAfterContentInit */, 768 /* InitState_CallingAfterViewInit */);\n        callLifecycleHooksChildrenFirst(view, 8388608 /* AfterViewChecked */ | (callInit ? 4194304 /* AfterViewInit */ : 0));\n        if (view.def.flags & 2 /* OnPush */) {\n            view.state &= ~8 /* ChecksEnabled */;\n        }\n        view.state &= ~(64 /* CheckProjectedViews */ | 32 /* CheckProjectedView */);\n        shiftInitState(view, 768 /* InitState_CallingAfterViewInit */, 1024 /* InitState_AfterInit */);\n    }\n    function checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n        if (argStyle === 0 /* Inline */) {\n            return checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        }\n        else {\n            return checkAndUpdateNodeDynamic(view, nodeDef, v0);\n        }\n    }\n    function markProjectedViewsForCheck(view) {\n        var def = view.def;\n        if (!(def.nodeFlags & 4 /* ProjectedTemplate */)) {\n            return;\n        }\n        for (var i = 0; i < def.nodes.length; i++) {\n            var nodeDef = def.nodes[i];\n            if (nodeDef.flags & 4 /* ProjectedTemplate */) {\n                var projectedViews = asElementData(view, i).template._projectedViews;\n                if (projectedViews) {\n                    for (var i_1 = 0; i_1 < projectedViews.length; i_1++) {\n                        var projectedView = projectedViews[i_1];\n                        projectedView.state |= 32 /* CheckProjectedView */;\n                        markParentViewsForCheckProjectedViews(projectedView, view);\n                    }\n                }\n            }\n            else if ((nodeDef.childFlags & 4 /* ProjectedTemplate */) === 0) {\n                // a parent with leafs\n                // no child is a component,\n                // then skip the children\n                i += nodeDef.childCount;\n            }\n        }\n    }\n    function checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n        switch (nodeDef.flags & 201347067 /* Types */) {\n            case 1 /* TypeElement */:\n                return checkAndUpdateElementInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n            case 2 /* TypeText */:\n                return checkAndUpdateTextInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n            case 16384 /* TypeDirective */:\n                return checkAndUpdateDirectiveInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n            case 32 /* TypePureArray */:\n            case 64 /* TypePureObject */:\n            case 128 /* TypePurePipe */:\n                return checkAndUpdatePureExpressionInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n            default:\n                throw 'unreachable';\n        }\n    }\n    function checkAndUpdateNodeDynamic(view, nodeDef, values) {\n        switch (nodeDef.flags & 201347067 /* Types */) {\n            case 1 /* TypeElement */:\n                return checkAndUpdateElementDynamic(view, nodeDef, values);\n            case 2 /* TypeText */:\n                return checkAndUpdateTextDynamic(view, nodeDef, values);\n            case 16384 /* TypeDirective */:\n                return checkAndUpdateDirectiveDynamic(view, nodeDef, values);\n            case 32 /* TypePureArray */:\n            case 64 /* TypePureObject */:\n            case 128 /* TypePurePipe */:\n                return checkAndUpdatePureExpressionDynamic(view, nodeDef, values);\n            default:\n                throw 'unreachable';\n        }\n    }\n    function checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n        if (argStyle === 0 /* Inline */) {\n            checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        }\n        else {\n            checkNoChangesNodeDynamic(view, nodeDef, v0);\n        }\n        // Returning false is ok here as we would have thrown in case of a change.\n        return false;\n    }\n    function checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n        var bindLen = nodeDef.bindings.length;\n        if (bindLen > 0)\n            checkBindingNoChanges(view, nodeDef, 0, v0);\n        if (bindLen > 1)\n            checkBindingNoChanges(view, nodeDef, 1, v1);\n        if (bindLen > 2)\n            checkBindingNoChanges(view, nodeDef, 2, v2);\n        if (bindLen > 3)\n            checkBindingNoChanges(view, nodeDef, 3, v3);\n        if (bindLen > 4)\n            checkBindingNoChanges(view, nodeDef, 4, v4);\n        if (bindLen > 5)\n            checkBindingNoChanges(view, nodeDef, 5, v5);\n        if (bindLen > 6)\n            checkBindingNoChanges(view, nodeDef, 6, v6);\n        if (bindLen > 7)\n            checkBindingNoChanges(view, nodeDef, 7, v7);\n        if (bindLen > 8)\n            checkBindingNoChanges(view, nodeDef, 8, v8);\n        if (bindLen > 9)\n            checkBindingNoChanges(view, nodeDef, 9, v9);\n    }\n    function checkNoChangesNodeDynamic(view, nodeDef, values) {\n        for (var i = 0; i < values.length; i++) {\n            checkBindingNoChanges(view, nodeDef, i, values[i]);\n        }\n    }\n    /**\n     * Workaround https://github.com/angular/tsickle/issues/497\n     * @suppress {misplacedTypeAnnotation}\n     */\n    function checkNoChangesQuery(view, nodeDef) {\n        var queryList = asQueryList(view, nodeDef.nodeIndex);\n        if (queryList.dirty) {\n            throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, nodeDef.nodeIndex), \"Query \" + nodeDef.query.id + \" not dirty\", \"Query \" + nodeDef.query.id + \" dirty\", (view.state & 1 /* BeforeFirstCheck */) !== 0);\n        }\n    }\n    function destroyView(view) {\n        if (view.state & 128 /* Destroyed */) {\n            return;\n        }\n        execEmbeddedViewsAction(view, ViewAction.Destroy);\n        execComponentViewsAction(view, ViewAction.Destroy);\n        callLifecycleHooksChildrenFirst(view, 131072 /* OnDestroy */);\n        if (view.disposables) {\n            for (var i = 0; i < view.disposables.length; i++) {\n                view.disposables[i]();\n            }\n        }\n        detachProjectedView(view);\n        if (view.renderer.destroyNode) {\n            destroyViewNodes(view);\n        }\n        if (isComponentView(view)) {\n            view.renderer.destroy();\n        }\n        view.state |= 128 /* Destroyed */;\n    }\n    function destroyViewNodes(view) {\n        var len = view.def.nodes.length;\n        for (var i = 0; i < len; i++) {\n            var def = view.def.nodes[i];\n            if (def.flags & 1 /* TypeElement */) {\n                view.renderer.destroyNode(asElementData(view, i).renderElement);\n            }\n            else if (def.flags & 2 /* TypeText */) {\n                view.renderer.destroyNode(asTextData(view, i).renderText);\n            }\n            else if (def.flags & 67108864 /* TypeContentQuery */ || def.flags & 134217728 /* TypeViewQuery */) {\n                asQueryList(view, i).destroy();\n            }\n        }\n    }\n    var ViewAction;\n    (function (ViewAction) {\n        ViewAction[ViewAction[\"CreateViewNodes\"] = 0] = \"CreateViewNodes\";\n        ViewAction[ViewAction[\"CheckNoChanges\"] = 1] = \"CheckNoChanges\";\n        ViewAction[ViewAction[\"CheckNoChangesProjectedViews\"] = 2] = \"CheckNoChangesProjectedViews\";\n        ViewAction[ViewAction[\"CheckAndUpdate\"] = 3] = \"CheckAndUpdate\";\n        ViewAction[ViewAction[\"CheckAndUpdateProjectedViews\"] = 4] = \"CheckAndUpdateProjectedViews\";\n        ViewAction[ViewAction[\"Destroy\"] = 5] = \"Destroy\";\n    })(ViewAction || (ViewAction = {}));\n    function execComponentViewsAction(view, action) {\n        var def = view.def;\n        if (!(def.nodeFlags & 33554432 /* ComponentView */)) {\n            return;\n        }\n        for (var i = 0; i < def.nodes.length; i++) {\n            var nodeDef = def.nodes[i];\n            if (nodeDef.flags & 33554432 /* ComponentView */) {\n                // a leaf\n                callViewAction(asElementData(view, i).componentView, action);\n            }\n            else if ((nodeDef.childFlags & 33554432 /* ComponentView */) === 0) {\n                // a parent with leafs\n                // no child is a component,\n                // then skip the children\n                i += nodeDef.childCount;\n            }\n        }\n    }\n    function execEmbeddedViewsAction(view, action) {\n        var def = view.def;\n        if (!(def.nodeFlags & 16777216 /* EmbeddedViews */)) {\n            return;\n        }\n        for (var i = 0; i < def.nodes.length; i++) {\n            var nodeDef = def.nodes[i];\n            if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n                // a leaf\n                var embeddedViews = asElementData(view, i).viewContainer._embeddedViews;\n                for (var k = 0; k < embeddedViews.length; k++) {\n                    callViewAction(embeddedViews[k], action);\n                }\n            }\n            else if ((nodeDef.childFlags & 16777216 /* EmbeddedViews */) === 0) {\n                // a parent with leafs\n                // no child is a component,\n                // then skip the children\n                i += nodeDef.childCount;\n            }\n        }\n    }\n    function callViewAction(view, action) {\n        var viewState = view.state;\n        switch (action) {\n            case ViewAction.CheckNoChanges:\n                if ((viewState & 128 /* Destroyed */) === 0) {\n                    if ((viewState & 12 /* CatDetectChanges */) === 12 /* CatDetectChanges */) {\n                        checkNoChangesView(view);\n                    }\n                    else if (viewState & 64 /* CheckProjectedViews */) {\n                        execProjectedViewsAction(view, ViewAction.CheckNoChangesProjectedViews);\n                    }\n                }\n                break;\n            case ViewAction.CheckNoChangesProjectedViews:\n                if ((viewState & 128 /* Destroyed */) === 0) {\n                    if (viewState & 32 /* CheckProjectedView */) {\n                        checkNoChangesView(view);\n                    }\n                    else if (viewState & 64 /* CheckProjectedViews */) {\n                        execProjectedViewsAction(view, action);\n                    }\n                }\n                break;\n            case ViewAction.CheckAndUpdate:\n                if ((viewState & 128 /* Destroyed */) === 0) {\n                    if ((viewState & 12 /* CatDetectChanges */) === 12 /* CatDetectChanges */) {\n                        checkAndUpdateView(view);\n                    }\n                    else if (viewState & 64 /* CheckProjectedViews */) {\n                        execProjectedViewsAction(view, ViewAction.CheckAndUpdateProjectedViews);\n                    }\n                }\n                break;\n            case ViewAction.CheckAndUpdateProjectedViews:\n                if ((viewState & 128 /* Destroyed */) === 0) {\n                    if (viewState & 32 /* CheckProjectedView */) {\n                        checkAndUpdateView(view);\n                    }\n                    else if (viewState & 64 /* CheckProjectedViews */) {\n                        execProjectedViewsAction(view, action);\n                    }\n                }\n                break;\n            case ViewAction.Destroy:\n                // Note: destroyView recurses over all views,\n                // so we don't need to special case projected views here.\n                destroyView(view);\n                break;\n            case ViewAction.CreateViewNodes:\n                createViewNodes(view);\n                break;\n        }\n    }\n    function execProjectedViewsAction(view, action) {\n        execEmbeddedViewsAction(view, action);\n        execComponentViewsAction(view, action);\n    }\n    function execQueriesAction(view, queryFlags, staticDynamicQueryFlag, checkType) {\n        if (!(view.def.nodeFlags & queryFlags) || !(view.def.nodeFlags & staticDynamicQueryFlag)) {\n            return;\n        }\n        var nodeCount = view.def.nodes.length;\n        for (var i = 0; i < nodeCount; i++) {\n            var nodeDef = view.def.nodes[i];\n            if ((nodeDef.flags & queryFlags) && (nodeDef.flags & staticDynamicQueryFlag)) {\n                Services.setCurrentNode(view, nodeDef.nodeIndex);\n                switch (checkType) {\n                    case 0 /* CheckAndUpdate */:\n                        checkAndUpdateQuery(view, nodeDef);\n                        break;\n                    case 1 /* CheckNoChanges */:\n                        checkNoChangesQuery(view, nodeDef);\n                        break;\n                }\n            }\n            if (!(nodeDef.childFlags & queryFlags) || !(nodeDef.childFlags & staticDynamicQueryFlag)) {\n                // no child has a matching query\n                // then skip the children\n                i += nodeDef.childCount;\n            }\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var initialized = false;\n    function initServicesIfNeeded() {\n        if (initialized) {\n            return;\n        }\n        initialized = true;\n        var services = isDevMode() ? createDebugServices() : createProdServices();\n        Services.setCurrentNode = services.setCurrentNode;\n        Services.createRootView = services.createRootView;\n        Services.createEmbeddedView = services.createEmbeddedView;\n        Services.createComponentView = services.createComponentView;\n        Services.createNgModuleRef = services.createNgModuleRef;\n        Services.overrideProvider = services.overrideProvider;\n        Services.overrideComponentView = services.overrideComponentView;\n        Services.clearOverrides = services.clearOverrides;\n        Services.checkAndUpdateView = services.checkAndUpdateView;\n        Services.checkNoChangesView = services.checkNoChangesView;\n        Services.destroyView = services.destroyView;\n        Services.resolveDep = resolveDep;\n        Services.createDebugContext = services.createDebugContext;\n        Services.handleEvent = services.handleEvent;\n        Services.updateDirectives = services.updateDirectives;\n        Services.updateRenderer = services.updateRenderer;\n        Services.dirtyParentQueries = dirtyParentQueries;\n    }\n    function createProdServices() {\n        return {\n            setCurrentNode: function () { },\n            createRootView: createProdRootView,\n            createEmbeddedView: createEmbeddedView,\n            createComponentView: createComponentView,\n            createNgModuleRef: createNgModuleRef,\n            overrideProvider: NOOP,\n            overrideComponentView: NOOP,\n            clearOverrides: NOOP,\n            checkAndUpdateView: checkAndUpdateView,\n            checkNoChangesView: checkNoChangesView,\n            destroyView: destroyView,\n            createDebugContext: function (view, nodeIndex) { return new DebugContext_(view, nodeIndex); },\n            handleEvent: function (view, nodeIndex, eventName, event) {\n                return view.def.handleEvent(view, nodeIndex, eventName, event);\n            },\n            updateDirectives: function (view, checkType) { return view.def.updateDirectives(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode :\n                prodCheckNoChangesNode, view); },\n            updateRenderer: function (view, checkType) { return view.def.updateRenderer(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode :\n                prodCheckNoChangesNode, view); },\n        };\n    }\n    function createDebugServices() {\n        return {\n            setCurrentNode: debugSetCurrentNode,\n            createRootView: debugCreateRootView,\n            createEmbeddedView: debugCreateEmbeddedView,\n            createComponentView: debugCreateComponentView,\n            createNgModuleRef: debugCreateNgModuleRef,\n            overrideProvider: debugOverrideProvider,\n            overrideComponentView: debugOverrideComponentView,\n            clearOverrides: debugClearOverrides,\n            checkAndUpdateView: debugCheckAndUpdateView,\n            checkNoChangesView: debugCheckNoChangesView,\n            destroyView: debugDestroyView,\n            createDebugContext: function (view, nodeIndex) { return new DebugContext_(view, nodeIndex); },\n            handleEvent: debugHandleEvent,\n            updateDirectives: debugUpdateDirectives,\n            updateRenderer: debugUpdateRenderer,\n        };\n    }\n    function createProdRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {\n        var rendererFactory = ngModule.injector.get(RendererFactory2);\n        return createRootView(createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode), def, context);\n    }\n    function debugCreateRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {\n        var rendererFactory = ngModule.injector.get(RendererFactory2);\n        var root = createRootData(elInjector, ngModule, new DebugRendererFactory2(rendererFactory), projectableNodes, rootSelectorOrNode);\n        var defWithOverride = applyProviderOverridesToView(def);\n        return callWithDebugContext(DebugAction.create, createRootView, null, [root, defWithOverride, context]);\n    }\n    function createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode) {\n        var sanitizer = ngModule.injector.get(Sanitizer);\n        var errorHandler = ngModule.injector.get(ErrorHandler);\n        var renderer = rendererFactory.createRenderer(null, null);\n        return {\n            ngModule: ngModule,\n            injector: elInjector, projectableNodes: projectableNodes,\n            selectorOrNode: rootSelectorOrNode, sanitizer: sanitizer, rendererFactory: rendererFactory, renderer: renderer, errorHandler: errorHandler\n        };\n    }\n    function debugCreateEmbeddedView(parentView, anchorDef, viewDef, context) {\n        var defWithOverride = applyProviderOverridesToView(viewDef);\n        return callWithDebugContext(DebugAction.create, createEmbeddedView, null, [parentView, anchorDef, defWithOverride, context]);\n    }\n    function debugCreateComponentView(parentView, nodeDef, viewDef, hostElement) {\n        var overrideComponentView = viewDefOverrides.get(nodeDef.element.componentProvider.provider.token);\n        if (overrideComponentView) {\n            viewDef = overrideComponentView;\n        }\n        else {\n            viewDef = applyProviderOverridesToView(viewDef);\n        }\n        return callWithDebugContext(DebugAction.create, createComponentView, null, [parentView, nodeDef, viewDef, hostElement]);\n    }\n    function debugCreateNgModuleRef(moduleType, parentInjector, bootstrapComponents, def) {\n        var defWithOverride = applyProviderOverridesToNgModule(def);\n        return createNgModuleRef(moduleType, parentInjector, bootstrapComponents, defWithOverride);\n    }\n    var providerOverrides = new Map();\n    var providerOverridesWithScope = new Map();\n    var viewDefOverrides = new Map();\n    function debugOverrideProvider(override) {\n        providerOverrides.set(override.token, override);\n        var injectableDef;\n        if (typeof override.token === 'function' && (injectableDef = getInjectableDef(override.token)) &&\n            typeof injectableDef.providedIn === 'function') {\n            providerOverridesWithScope.set(override.token, override);\n        }\n    }\n    function debugOverrideComponentView(comp, compFactory) {\n        var hostViewDef = resolveDefinition(getComponentViewDefinitionFactory(compFactory));\n        var compViewDef = resolveDefinition(hostViewDef.nodes[0].element.componentView);\n        viewDefOverrides.set(comp, compViewDef);\n    }\n    function debugClearOverrides() {\n        providerOverrides.clear();\n        providerOverridesWithScope.clear();\n        viewDefOverrides.clear();\n    }\n    // Notes about the algorithm:\n    // 1) Locate the providers of an element and check if one of them was overwritten\n    // 2) Change the providers of that element\n    //\n    // We only create new datastructures if we need to, to keep perf impact\n    // reasonable.\n    function applyProviderOverridesToView(def) {\n        if (providerOverrides.size === 0) {\n            return def;\n        }\n        var elementIndicesWithOverwrittenProviders = findElementIndicesWithOverwrittenProviders(def);\n        if (elementIndicesWithOverwrittenProviders.length === 0) {\n            return def;\n        }\n        // clone the whole view definition,\n        // as it maintains references between the nodes that are hard to update.\n        def = def.factory(function () { return NOOP; });\n        for (var i = 0; i < elementIndicesWithOverwrittenProviders.length; i++) {\n            applyProviderOverridesToElement(def, elementIndicesWithOverwrittenProviders[i]);\n        }\n        return def;\n        function findElementIndicesWithOverwrittenProviders(def) {\n            var elIndicesWithOverwrittenProviders = [];\n            var lastElementDef = null;\n            for (var i = 0; i < def.nodes.length; i++) {\n                var nodeDef = def.nodes[i];\n                if (nodeDef.flags & 1 /* TypeElement */) {\n                    lastElementDef = nodeDef;\n                }\n                if (lastElementDef && nodeDef.flags & 3840 /* CatProviderNoDirective */ &&\n                    providerOverrides.has(nodeDef.provider.token)) {\n                    elIndicesWithOverwrittenProviders.push(lastElementDef.nodeIndex);\n                    lastElementDef = null;\n                }\n            }\n            return elIndicesWithOverwrittenProviders;\n        }\n        function applyProviderOverridesToElement(viewDef, elIndex) {\n            for (var i = elIndex + 1; i < viewDef.nodes.length; i++) {\n                var nodeDef = viewDef.nodes[i];\n                if (nodeDef.flags & 1 /* TypeElement */) {\n                    // stop at the next element\n                    return;\n                }\n                if (nodeDef.flags & 3840 /* CatProviderNoDirective */) {\n                    var provider = nodeDef.provider;\n                    var override = providerOverrides.get(provider.token);\n                    if (override) {\n                        nodeDef.flags = (nodeDef.flags & ~3840 /* CatProviderNoDirective */) | override.flags;\n                        provider.deps = splitDepsDsl(override.deps);\n                        provider.value = override.value;\n                    }\n                }\n            }\n        }\n    }\n    // Notes about the algorithm:\n    // We only create new datastructures if we need to, to keep perf impact\n    // reasonable.\n    function applyProviderOverridesToNgModule(def) {\n        var _a = calcHasOverrides(def), hasOverrides = _a.hasOverrides, hasDeprecatedOverrides = _a.hasDeprecatedOverrides;\n        if (!hasOverrides) {\n            return def;\n        }\n        // clone the whole view definition,\n        // as it maintains references between the nodes that are hard to update.\n        def = def.factory(function () { return NOOP; });\n        applyProviderOverrides(def);\n        return def;\n        function calcHasOverrides(def) {\n            var hasOverrides = false;\n            var hasDeprecatedOverrides = false;\n            if (providerOverrides.size === 0) {\n                return { hasOverrides: hasOverrides, hasDeprecatedOverrides: hasDeprecatedOverrides };\n            }\n            def.providers.forEach(function (node) {\n                var override = providerOverrides.get(node.token);\n                if ((node.flags & 3840 /* CatProviderNoDirective */) && override) {\n                    hasOverrides = true;\n                    hasDeprecatedOverrides = hasDeprecatedOverrides || override.deprecatedBehavior;\n                }\n            });\n            def.modules.forEach(function (module) {\n                providerOverridesWithScope.forEach(function (override, token) {\n                    if (getInjectableDef(token).providedIn === module) {\n                        hasOverrides = true;\n                        hasDeprecatedOverrides = hasDeprecatedOverrides || override.deprecatedBehavior;\n                    }\n                });\n            });\n            return { hasOverrides: hasOverrides, hasDeprecatedOverrides: hasDeprecatedOverrides };\n        }\n        function applyProviderOverrides(def) {\n            for (var i = 0; i < def.providers.length; i++) {\n                var provider = def.providers[i];\n                if (hasDeprecatedOverrides) {\n                    // We had a bug where me made\n                    // all providers lazy. Keep this logic behind a flag\n                    // for migrating existing users.\n                    provider.flags |= 4096 /* LazyProvider */;\n                }\n                var override = providerOverrides.get(provider.token);\n                if (override) {\n                    provider.flags = (provider.flags & ~3840 /* CatProviderNoDirective */) | override.flags;\n                    provider.deps = splitDepsDsl(override.deps);\n                    provider.value = override.value;\n                }\n            }\n            if (providerOverridesWithScope.size > 0) {\n                var moduleSet_1 = new Set(def.modules);\n                providerOverridesWithScope.forEach(function (override, token) {\n                    if (moduleSet_1.has(getInjectableDef(token).providedIn)) {\n                        var provider = {\n                            token: token,\n                            flags: override.flags | (hasDeprecatedOverrides ? 4096 /* LazyProvider */ : 0 /* None */),\n                            deps: splitDepsDsl(override.deps),\n                            value: override.value,\n                            index: def.providers.length,\n                        };\n                        def.providers.push(provider);\n                        def.providersByKey[tokenKey(token)] = provider;\n                    }\n                });\n            }\n        }\n    }\n    function prodCheckAndUpdateNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n        var nodeDef = view.def.nodes[checkIndex];\n        checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        return (nodeDef.flags & 224 /* CatPureExpression */) ?\n            asPureExpressionData(view, checkIndex).value :\n            undefined;\n    }\n    function prodCheckNoChangesNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n        var nodeDef = view.def.nodes[checkIndex];\n        checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        return (nodeDef.flags & 224 /* CatPureExpression */) ?\n            asPureExpressionData(view, checkIndex).value :\n            undefined;\n    }\n    function debugCheckAndUpdateView(view) {\n        return callWithDebugContext(DebugAction.detectChanges, checkAndUpdateView, null, [view]);\n    }\n    function debugCheckNoChangesView(view) {\n        return callWithDebugContext(DebugAction.checkNoChanges, checkNoChangesView, null, [view]);\n    }\n    function debugDestroyView(view) {\n        return callWithDebugContext(DebugAction.destroy, destroyView, null, [view]);\n    }\n    var DebugAction;\n    (function (DebugAction) {\n        DebugAction[DebugAction[\"create\"] = 0] = \"create\";\n        DebugAction[DebugAction[\"detectChanges\"] = 1] = \"detectChanges\";\n        DebugAction[DebugAction[\"checkNoChanges\"] = 2] = \"checkNoChanges\";\n        DebugAction[DebugAction[\"destroy\"] = 3] = \"destroy\";\n        DebugAction[DebugAction[\"handleEvent\"] = 4] = \"handleEvent\";\n    })(DebugAction || (DebugAction = {}));\n    var _currentAction;\n    var _currentView;\n    var _currentNodeIndex;\n    function debugSetCurrentNode(view, nodeIndex) {\n        _currentView = view;\n        _currentNodeIndex = nodeIndex;\n    }\n    function debugHandleEvent(view, nodeIndex, eventName, event) {\n        debugSetCurrentNode(view, nodeIndex);\n        return callWithDebugContext(DebugAction.handleEvent, view.def.handleEvent, null, [view, nodeIndex, eventName, event]);\n    }\n    function debugUpdateDirectives(view, checkType) {\n        if (view.state & 128 /* Destroyed */) {\n            throw viewDestroyedError(DebugAction[_currentAction]);\n        }\n        debugSetCurrentNode(view, nextDirectiveWithBinding(view, 0));\n        return view.def.updateDirectives(debugCheckDirectivesFn, view);\n        function debugCheckDirectivesFn(view, nodeIndex, argStyle) {\n            var values = [];\n            for (var _i = 3; _i < arguments.length; _i++) {\n                values[_i - 3] = arguments[_i];\n            }\n            var nodeDef = view.def.nodes[nodeIndex];\n            if (checkType === 0 /* CheckAndUpdate */) {\n                debugCheckAndUpdateNode(view, nodeDef, argStyle, values);\n            }\n            else {\n                debugCheckNoChangesNode(view, nodeDef, argStyle, values);\n            }\n            if (nodeDef.flags & 16384 /* TypeDirective */) {\n                debugSetCurrentNode(view, nextDirectiveWithBinding(view, nodeIndex));\n            }\n            return (nodeDef.flags & 224 /* CatPureExpression */) ?\n                asPureExpressionData(view, nodeDef.nodeIndex).value :\n                undefined;\n        }\n    }\n    function debugUpdateRenderer(view, checkType) {\n        if (view.state & 128 /* Destroyed */) {\n            throw viewDestroyedError(DebugAction[_currentAction]);\n        }\n        debugSetCurrentNode(view, nextRenderNodeWithBinding(view, 0));\n        return view.def.updateRenderer(debugCheckRenderNodeFn, view);\n        function debugCheckRenderNodeFn(view, nodeIndex, argStyle) {\n            var values = [];\n            for (var _i = 3; _i < arguments.length; _i++) {\n                values[_i - 3] = arguments[_i];\n            }\n            var nodeDef = view.def.nodes[nodeIndex];\n            if (checkType === 0 /* CheckAndUpdate */) {\n                debugCheckAndUpdateNode(view, nodeDef, argStyle, values);\n            }\n            else {\n                debugCheckNoChangesNode(view, nodeDef, argStyle, values);\n            }\n            if (nodeDef.flags & 3 /* CatRenderNode */) {\n                debugSetCurrentNode(view, nextRenderNodeWithBinding(view, nodeIndex));\n            }\n            return (nodeDef.flags & 224 /* CatPureExpression */) ?\n                asPureExpressionData(view, nodeDef.nodeIndex).value :\n                undefined;\n        }\n    }\n    function debugCheckAndUpdateNode(view, nodeDef, argStyle, givenValues) {\n        var changed = checkAndUpdateNode.apply(void 0, __spread([view, nodeDef, argStyle], givenValues));\n        if (changed) {\n            var values = argStyle === 1 /* Dynamic */ ? givenValues[0] : givenValues;\n            if (nodeDef.flags & 16384 /* TypeDirective */) {\n                var bindingValues = {};\n                for (var i = 0; i < nodeDef.bindings.length; i++) {\n                    var binding = nodeDef.bindings[i];\n                    var value = values[i];\n                    if (binding.flags & 8 /* TypeProperty */) {\n                        bindingValues[normalizeDebugBindingName(binding.nonMinifiedName)] =\n                            normalizeDebugBindingValue(value);\n                    }\n                }\n                var elDef = nodeDef.parent;\n                var el = asElementData(view, elDef.nodeIndex).renderElement;\n                if (!elDef.element.name) {\n                    // a comment.\n                    view.renderer.setValue(el, \"bindings=\" + JSON.stringify(bindingValues, null, 2));\n                }\n                else {\n                    // a regular element.\n                    for (var attr in bindingValues) {\n                        var value = bindingValues[attr];\n                        if (value != null) {\n                            view.renderer.setAttribute(el, attr, value);\n                        }\n                        else {\n                            view.renderer.removeAttribute(el, attr);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    function debugCheckNoChangesNode(view, nodeDef, argStyle, values) {\n        checkNoChangesNode.apply(void 0, __spread([view, nodeDef, argStyle], values));\n    }\n    function nextDirectiveWithBinding(view, nodeIndex) {\n        for (var i = nodeIndex; i < view.def.nodes.length; i++) {\n            var nodeDef = view.def.nodes[i];\n            if (nodeDef.flags & 16384 /* TypeDirective */ && nodeDef.bindings && nodeDef.bindings.length) {\n                return i;\n            }\n        }\n        return null;\n    }\n    function nextRenderNodeWithBinding(view, nodeIndex) {\n        for (var i = nodeIndex; i < view.def.nodes.length; i++) {\n            var nodeDef = view.def.nodes[i];\n            if ((nodeDef.flags & 3 /* CatRenderNode */) && nodeDef.bindings && nodeDef.bindings.length) {\n                return i;\n            }\n        }\n        return null;\n    }\n    var DebugContext_ = /** @class */ (function () {\n        function DebugContext_(view, nodeIndex) {\n            this.view = view;\n            this.nodeIndex = nodeIndex;\n            if (nodeIndex == null) {\n                this.nodeIndex = nodeIndex = 0;\n            }\n            this.nodeDef = view.def.nodes[nodeIndex];\n            var elDef = this.nodeDef;\n            var elView = view;\n            while (elDef && (elDef.flags & 1 /* TypeElement */) === 0) {\n                elDef = elDef.parent;\n            }\n            if (!elDef) {\n                while (!elDef && elView) {\n                    elDef = viewParentEl(elView);\n                    elView = elView.parent;\n                }\n            }\n            this.elDef = elDef;\n            this.elView = elView;\n        }\n        Object.defineProperty(DebugContext_.prototype, \"elOrCompView\", {\n            get: function () {\n                // Has to be done lazily as we use the DebugContext also during creation of elements...\n                return asElementData(this.elView, this.elDef.nodeIndex).componentView || this.view;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugContext_.prototype, \"injector\", {\n            get: function () { return createInjector$1(this.elView, this.elDef); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugContext_.prototype, \"component\", {\n            get: function () { return this.elOrCompView.component; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugContext_.prototype, \"context\", {\n            get: function () { return this.elOrCompView.context; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugContext_.prototype, \"providerTokens\", {\n            get: function () {\n                var tokens = [];\n                if (this.elDef) {\n                    for (var i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {\n                        var childDef = this.elView.def.nodes[i];\n                        if (childDef.flags & 20224 /* CatProvider */) {\n                            tokens.push(childDef.provider.token);\n                        }\n                        i += childDef.childCount;\n                    }\n                }\n                return tokens;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugContext_.prototype, \"references\", {\n            get: function () {\n                var references = {};\n                if (this.elDef) {\n                    collectReferences(this.elView, this.elDef, references);\n                    for (var i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {\n                        var childDef = this.elView.def.nodes[i];\n                        if (childDef.flags & 20224 /* CatProvider */) {\n                            collectReferences(this.elView, childDef, references);\n                        }\n                        i += childDef.childCount;\n                    }\n                }\n                return references;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugContext_.prototype, \"componentRenderElement\", {\n            get: function () {\n                var elData = findHostElement(this.elOrCompView);\n                return elData ? elData.renderElement : undefined;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugContext_.prototype, \"renderNode\", {\n            get: function () {\n                return this.nodeDef.flags & 2 /* TypeText */ ? renderNode(this.view, this.nodeDef) :\n                    renderNode(this.elView, this.elDef);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        DebugContext_.prototype.logError = function (console) {\n            var values = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                values[_i - 1] = arguments[_i];\n            }\n            var logViewDef;\n            var logNodeIndex;\n            if (this.nodeDef.flags & 2 /* TypeText */) {\n                logViewDef = this.view.def;\n                logNodeIndex = this.nodeDef.nodeIndex;\n            }\n            else {\n                logViewDef = this.elView.def;\n                logNodeIndex = this.elDef.nodeIndex;\n            }\n            // Note: we only generate a log function for text and element nodes\n            // to make the generated code as small as possible.\n            var renderNodeIndex = getRenderNodeIndex(logViewDef, logNodeIndex);\n            var currRenderNodeIndex = -1;\n            var nodeLogger = function () {\n                var _a;\n                currRenderNodeIndex++;\n                if (currRenderNodeIndex === renderNodeIndex) {\n                    return (_a = console.error).bind.apply(_a, __spread([console], values));\n                }\n                else {\n                    return NOOP;\n                }\n            };\n            logViewDef.factory(nodeLogger);\n            if (currRenderNodeIndex < renderNodeIndex) {\n                console.error('Illegal state: the ViewDefinitionFactory did not call the logger!');\n                console.error.apply(console, __spread(values));\n            }\n        };\n        return DebugContext_;\n    }());\n    function getRenderNodeIndex(viewDef, nodeIndex) {\n        var renderNodeIndex = -1;\n        for (var i = 0; i <= nodeIndex; i++) {\n            var nodeDef = viewDef.nodes[i];\n            if (nodeDef.flags & 3 /* CatRenderNode */) {\n                renderNodeIndex++;\n            }\n        }\n        return renderNodeIndex;\n    }\n    function findHostElement(view) {\n        while (view && !isComponentView(view)) {\n            view = view.parent;\n        }\n        if (view.parent) {\n            return asElementData(view.parent, viewParentEl(view).nodeIndex);\n        }\n        return null;\n    }\n    function collectReferences(view, nodeDef, references) {\n        for (var refName in nodeDef.references) {\n            references[refName] = getQueryValue(view, nodeDef, nodeDef.references[refName]);\n        }\n    }\n    function callWithDebugContext(action, fn, self, args) {\n        var oldAction = _currentAction;\n        var oldView = _currentView;\n        var oldNodeIndex = _currentNodeIndex;\n        try {\n            _currentAction = action;\n            var result = fn.apply(self, args);\n            _currentView = oldView;\n            _currentNodeIndex = oldNodeIndex;\n            _currentAction = oldAction;\n            return result;\n        }\n        catch (e) {\n            if (isViewDebugError(e) || !_currentView) {\n                throw e;\n            }\n            throw viewWrappedDebugError(e, getCurrentDebugContext());\n        }\n    }\n    function getCurrentDebugContext() {\n        return _currentView ? new DebugContext_(_currentView, _currentNodeIndex) : null;\n    }\n    var DebugRendererFactory2 = /** @class */ (function () {\n        function DebugRendererFactory2(delegate) {\n            this.delegate = delegate;\n        }\n        DebugRendererFactory2.prototype.createRenderer = function (element, renderData) {\n            return new DebugRenderer2(this.delegate.createRenderer(element, renderData));\n        };\n        DebugRendererFactory2.prototype.begin = function () {\n            if (this.delegate.begin) {\n                this.delegate.begin();\n            }\n        };\n        DebugRendererFactory2.prototype.end = function () {\n            if (this.delegate.end) {\n                this.delegate.end();\n            }\n        };\n        DebugRendererFactory2.prototype.whenRenderingDone = function () {\n            if (this.delegate.whenRenderingDone) {\n                return this.delegate.whenRenderingDone();\n            }\n            return Promise.resolve(null);\n        };\n        return DebugRendererFactory2;\n    }());\n    var DebugRenderer2 = /** @class */ (function () {\n        function DebugRenderer2(delegate) {\n            this.delegate = delegate;\n            /**\n             * Factory function used to create a `DebugContext` when a node is created.\n             *\n             * The `DebugContext` allows to retrieve information about the nodes that are useful in tests.\n             *\n             * The factory is configurable so that the `DebugRenderer2` could instantiate either a View Engine\n             * or a Render context.\n             */\n            this.debugContextFactory = getCurrentDebugContext;\n            this.data = this.delegate.data;\n        }\n        DebugRenderer2.prototype.createDebugContext = function (nativeElement) { return this.debugContextFactory(nativeElement); };\n        DebugRenderer2.prototype.destroyNode = function (node) {\n            removeDebugNodeFromIndex(getDebugNode(node));\n            if (this.delegate.destroyNode) {\n                this.delegate.destroyNode(node);\n            }\n        };\n        DebugRenderer2.prototype.destroy = function () { this.delegate.destroy(); };\n        DebugRenderer2.prototype.createElement = function (name, namespace) {\n            var el = this.delegate.createElement(name, namespace);\n            var debugCtx = this.createDebugContext(el);\n            if (debugCtx) {\n                var debugEl = new DebugElement__PRE_R3__(el, null, debugCtx);\n                debugEl.name = name;\n                indexDebugNode(debugEl);\n            }\n            return el;\n        };\n        DebugRenderer2.prototype.createComment = function (value) {\n            var comment = this.delegate.createComment(value);\n            var debugCtx = this.createDebugContext(comment);\n            if (debugCtx) {\n                indexDebugNode(new DebugNode__PRE_R3__(comment, null, debugCtx));\n            }\n            return comment;\n        };\n        DebugRenderer2.prototype.createText = function (value) {\n            var text = this.delegate.createText(value);\n            var debugCtx = this.createDebugContext(text);\n            if (debugCtx) {\n                indexDebugNode(new DebugNode__PRE_R3__(text, null, debugCtx));\n            }\n            return text;\n        };\n        DebugRenderer2.prototype.appendChild = function (parent, newChild) {\n            var debugEl = getDebugNode(parent);\n            var debugChildEl = getDebugNode(newChild);\n            if (debugEl && debugChildEl && debugEl instanceof DebugElement__PRE_R3__) {\n                debugEl.addChild(debugChildEl);\n            }\n            this.delegate.appendChild(parent, newChild);\n        };\n        DebugRenderer2.prototype.insertBefore = function (parent, newChild, refChild) {\n            var debugEl = getDebugNode(parent);\n            var debugChildEl = getDebugNode(newChild);\n            var debugRefEl = getDebugNode(refChild);\n            if (debugEl && debugChildEl && debugEl instanceof DebugElement__PRE_R3__) {\n                debugEl.insertBefore(debugRefEl, debugChildEl);\n            }\n            this.delegate.insertBefore(parent, newChild, refChild);\n        };\n        DebugRenderer2.prototype.removeChild = function (parent, oldChild) {\n            var debugEl = getDebugNode(parent);\n            var debugChildEl = getDebugNode(oldChild);\n            if (debugEl && debugChildEl && debugEl instanceof DebugElement__PRE_R3__) {\n                debugEl.removeChild(debugChildEl);\n            }\n            this.delegate.removeChild(parent, oldChild);\n        };\n        DebugRenderer2.prototype.selectRootElement = function (selectorOrNode, preserveContent) {\n            var el = this.delegate.selectRootElement(selectorOrNode, preserveContent);\n            var debugCtx = getCurrentDebugContext();\n            if (debugCtx) {\n                indexDebugNode(new DebugElement__PRE_R3__(el, null, debugCtx));\n            }\n            return el;\n        };\n        DebugRenderer2.prototype.setAttribute = function (el, name, value, namespace) {\n            var debugEl = getDebugNode(el);\n            if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n                var fullName = namespace ? namespace + ':' + name : name;\n                debugEl.attributes[fullName] = value;\n            }\n            this.delegate.setAttribute(el, name, value, namespace);\n        };\n        DebugRenderer2.prototype.removeAttribute = function (el, name, namespace) {\n            var debugEl = getDebugNode(el);\n            if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n                var fullName = namespace ? namespace + ':' + name : name;\n                debugEl.attributes[fullName] = null;\n            }\n            this.delegate.removeAttribute(el, name, namespace);\n        };\n        DebugRenderer2.prototype.addClass = function (el, name) {\n            var debugEl = getDebugNode(el);\n            if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n                debugEl.classes[name] = true;\n            }\n            this.delegate.addClass(el, name);\n        };\n        DebugRenderer2.prototype.removeClass = function (el, name) {\n            var debugEl = getDebugNode(el);\n            if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n                debugEl.classes[name] = false;\n            }\n            this.delegate.removeClass(el, name);\n        };\n        DebugRenderer2.prototype.setStyle = function (el, style, value, flags) {\n            var debugEl = getDebugNode(el);\n            if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n                debugEl.styles[style] = value;\n            }\n            this.delegate.setStyle(el, style, value, flags);\n        };\n        DebugRenderer2.prototype.removeStyle = function (el, style, flags) {\n            var debugEl = getDebugNode(el);\n            if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n                debugEl.styles[style] = null;\n            }\n            this.delegate.removeStyle(el, style, flags);\n        };\n        DebugRenderer2.prototype.setProperty = function (el, name, value) {\n            var debugEl = getDebugNode(el);\n            if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n                debugEl.properties[name] = value;\n            }\n            this.delegate.setProperty(el, name, value);\n        };\n        DebugRenderer2.prototype.listen = function (target, eventName, callback) {\n            if (typeof target !== 'string') {\n                var debugEl = getDebugNode(target);\n                if (debugEl) {\n                    debugEl.listeners.push(new DebugEventListener(eventName, callback));\n                }\n            }\n            return this.delegate.listen(target, eventName, callback);\n        };\n        DebugRenderer2.prototype.parentNode = function (node) { return this.delegate.parentNode(node); };\n        DebugRenderer2.prototype.nextSibling = function (node) { return this.delegate.nextSibling(node); };\n        DebugRenderer2.prototype.setValue = function (node, value) { return this.delegate.setValue(node, value); };\n        return DebugRenderer2;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function overrideProvider(override) {\n        initServicesIfNeeded();\n        return Services.overrideProvider(override);\n    }\n    function overrideComponentView(comp, componentFactory) {\n        initServicesIfNeeded();\n        return Services.overrideComponentView(comp, componentFactory);\n    }\n    function clearOverrides() {\n        initServicesIfNeeded();\n        return Services.clearOverrides();\n    }\n    // Attention: this function is called as top level function.\n    // Putting any logic in here will destroy closure tree shaking!\n    function createNgModuleFactory(ngModuleType, bootstrapComponents, defFactory) {\n        return new NgModuleFactory_(ngModuleType, bootstrapComponents, defFactory);\n    }\n    function cloneNgModuleDefinition(def) {\n        var providers = Array.from(def.providers);\n        var modules = Array.from(def.modules);\n        var providersByKey = {};\n        for (var key in def.providersByKey) {\n            providersByKey[key] = def.providersByKey[key];\n        }\n        return {\n            factory: def.factory,\n            isRoot: def.isRoot, providers: providers, modules: modules, providersByKey: providersByKey,\n        };\n    }\n    var NgModuleFactory_ = /** @class */ (function (_super) {\n        __extends(NgModuleFactory_, _super);\n        function NgModuleFactory_(moduleType, _bootstrapComponents, _ngModuleDefFactory) {\n            var _this = \n            // Attention: this ctor is called as top level function.\n            // Putting any logic in here will destroy closure tree shaking!\n            _super.call(this) || this;\n            _this.moduleType = moduleType;\n            _this._bootstrapComponents = _bootstrapComponents;\n            _this._ngModuleDefFactory = _ngModuleDefFactory;\n            return _this;\n        }\n        NgModuleFactory_.prototype.create = function (parentInjector) {\n            initServicesIfNeeded();\n            // Clone the NgModuleDefinition so that any tree shakeable provider definition\n            // added to this instance of the NgModuleRef doesn't affect the cached copy.\n            // See https://github.com/angular/angular/issues/25018.\n            var def = cloneNgModuleDefinition(resolveDefinition(this._ngModuleDefFactory));\n            return Services.createNgModuleRef(this.moduleType, parentInjector || Injector.NULL, this._bootstrapComponents, def);\n        };\n        return NgModuleFactory_;\n    }(NgModuleFactory));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // clang-format on\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // This file only reexports content of the `src` folder. Keep it that way.\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    exports.createPlatform = createPlatform;\n    exports.assertPlatform = assertPlatform;\n    exports.destroyPlatform = destroyPlatform;\n    exports.getPlatform = getPlatform;\n    exports.PlatformRef = PlatformRef;\n    exports.ApplicationRef = ApplicationRef;\n    exports.createPlatformFactory = createPlatformFactory;\n    exports.NgProbeToken = NgProbeToken;\n    exports.enableProdMode = enableProdMode;\n    exports.isDevMode = isDevMode;\n    exports.APP_ID = APP_ID;\n    exports.PACKAGE_ROOT_URL = PACKAGE_ROOT_URL;\n    exports.PLATFORM_INITIALIZER = PLATFORM_INITIALIZER;\n    exports.PLATFORM_ID = PLATFORM_ID;\n    exports.APP_BOOTSTRAP_LISTENER = APP_BOOTSTRAP_LISTENER;\n    exports.APP_INITIALIZER = APP_INITIALIZER;\n    exports.ApplicationInitStatus = ApplicationInitStatus;\n    exports.DebugElement = DebugElement;\n    exports.DebugEventListener = DebugEventListener;\n    exports.DebugNode = DebugNode;\n    exports.asNativeElements = asNativeElements;\n    exports.getDebugNode = getDebugNode;\n    exports.Testability = Testability;\n    exports.TestabilityRegistry = TestabilityRegistry;\n    exports.setTestabilityGetter = setTestabilityGetter;\n    exports.TRANSLATIONS = TRANSLATIONS$1;\n    exports.TRANSLATIONS_FORMAT = TRANSLATIONS_FORMAT;\n    exports.LOCALE_ID = LOCALE_ID$1;\n    exports.ApplicationModule = ApplicationModule;\n    exports.wtfCreateScope = wtfCreateScope;\n    exports.wtfLeave = wtfLeave;\n    exports.wtfStartTimeRange = wtfStartTimeRange;\n    exports.wtfEndTimeRange = wtfEndTimeRange;\n    exports.Type = Type;\n    exports.EventEmitter = EventEmitter;\n    exports.ErrorHandler = ErrorHandler;\n    exports.Sanitizer = Sanitizer;\n    exports.Attribute = Attribute;\n    exports.ANALYZE_FOR_ENTRY_COMPONENTS = ANALYZE_FOR_ENTRY_COMPONENTS;\n    exports.ContentChild = ContentChild;\n    exports.ContentChildren = ContentChildren;\n    exports.Query = Query;\n    exports.ViewChild = ViewChild;\n    exports.ViewChildren = ViewChildren;\n    exports.Component = Component;\n    exports.Directive = Directive;\n    exports.HostBinding = HostBinding;\n    exports.HostListener = HostListener;\n    exports.Input = Input;\n    exports.Output = Output;\n    exports.Pipe = Pipe;\n    exports.NgModule = NgModule;\n    exports.CUSTOM_ELEMENTS_SCHEMA = CUSTOM_ELEMENTS_SCHEMA;\n    exports.NO_ERRORS_SCHEMA = NO_ERRORS_SCHEMA;\n    exports.Version = Version;\n    exports.VERSION = VERSION;\n    exports.ɵɵdefineInjectable = ɵɵdefineInjectable;\n    exports.defineInjectable = defineInjectable;\n    exports.ɵɵdefineInjector = ɵɵdefineInjector;\n    exports.forwardRef = forwardRef;\n    exports.resolveForwardRef = resolveForwardRef;\n    exports.Injectable = Injectable;\n    exports.Injector = Injector;\n    exports.ɵɵinject = ɵɵinject;\n    exports.inject = inject;\n    exports.INJECTOR = INJECTOR;\n    exports.ReflectiveInjector = ReflectiveInjector;\n    exports.ResolvedReflectiveFactory = ResolvedReflectiveFactory;\n    exports.ReflectiveKey = ReflectiveKey;\n    exports.InjectionToken = InjectionToken;\n    exports.Inject = Inject;\n    exports.Optional = Optional;\n    exports.Self = Self;\n    exports.SkipSelf = SkipSelf;\n    exports.Host = Host;\n    exports.NgZone = NgZone;\n    exports.ɵNoopNgZone = NoopNgZone;\n    exports.RenderComponentType = RenderComponentType;\n    exports.Renderer = Renderer;\n    exports.Renderer2 = Renderer2;\n    exports.RendererFactory2 = RendererFactory2;\n    exports.RootRenderer = RootRenderer;\n    exports.COMPILER_OPTIONS = COMPILER_OPTIONS;\n    exports.Compiler = Compiler;\n    exports.CompilerFactory = CompilerFactory;\n    exports.ModuleWithComponentFactories = ModuleWithComponentFactories;\n    exports.ComponentFactory = ComponentFactory;\n    exports.ɵComponentFactory = ComponentFactory;\n    exports.ComponentRef = ComponentRef;\n    exports.ComponentFactoryResolver = ComponentFactoryResolver;\n    exports.ElementRef = ElementRef;\n    exports.NgModuleFactory = NgModuleFactory;\n    exports.NgModuleRef = NgModuleRef;\n    exports.NgModuleFactoryLoader = NgModuleFactoryLoader;\n    exports.getModuleFactory = getModuleFactory;\n    exports.QueryList = QueryList;\n    exports.SystemJsNgModuleLoader = SystemJsNgModuleLoader;\n    exports.SystemJsNgModuleLoaderConfig = SystemJsNgModuleLoaderConfig;\n    exports.TemplateRef = TemplateRef;\n    exports.ViewContainerRef = ViewContainerRef;\n    exports.EmbeddedViewRef = EmbeddedViewRef;\n    exports.ViewRef = ViewRef$1;\n    exports.ChangeDetectorRef = ChangeDetectorRef;\n    exports.DefaultIterableDiffer = DefaultIterableDiffer;\n    exports.IterableDiffers = IterableDiffers;\n    exports.KeyValueDiffers = KeyValueDiffers;\n    exports.SimpleChange = SimpleChange;\n    exports.WrappedValue = WrappedValue;\n    exports.platformCore = platformCore;\n    exports.ɵALLOW_MULTIPLE_PLATFORMS = ALLOW_MULTIPLE_PLATFORMS;\n    exports.ɵAPP_ID_RANDOM_PROVIDER = APP_ID_RANDOM_PROVIDER;\n    exports.ɵdefaultIterableDiffers = defaultIterableDiffers;\n    exports.ɵdefaultKeyValueDiffers = defaultKeyValueDiffers;\n    exports.ɵdevModeEqual = devModeEqual;\n    exports.ɵisListLikeIterable = isListLikeIterable;\n    exports.ɵisDefaultChangeDetectionStrategy = isDefaultChangeDetectionStrategy;\n    exports.ɵConsole = Console;\n    exports.ɵsetCurrentInjector = setCurrentInjector;\n    exports.ɵgetInjectableDef = getInjectableDef;\n    exports.ɵAPP_ROOT = APP_ROOT;\n    exports.ɵivyEnabled = ivyEnabled;\n    exports.ɵCodegenComponentFactoryResolver = CodegenComponentFactoryResolver;\n    exports.ɵclearResolutionOfComponentResourcesQueue = clearResolutionOfComponentResourcesQueue;\n    exports.ɵresolveComponentResources = resolveComponentResources;\n    exports.ɵReflectionCapabilities = ReflectionCapabilities;\n    exports.ɵRenderDebugInfo = RenderDebugInfo;\n    exports.ɵ_sanitizeHtml = _sanitizeHtml;\n    exports.ɵ_sanitizeStyle = _sanitizeStyle;\n    exports.ɵ_sanitizeUrl = _sanitizeUrl;\n    exports.ɵglobal = _global;\n    exports.ɵlooseIdentical = looseIdentical;\n    exports.ɵstringify = stringify;\n    exports.ɵmakeDecorator = makeDecorator;\n    exports.ɵisObservable = isObservable;\n    exports.ɵisPromise = isPromise;\n    exports.ɵclearOverrides = clearOverrides;\n    exports.ɵinitServicesIfNeeded = initServicesIfNeeded;\n    exports.ɵoverrideComponentView = overrideComponentView;\n    exports.ɵoverrideProvider = overrideProvider;\n    exports.ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR;\n    exports.ɵgetLocalePluralCase = getLocalePluralCase;\n    exports.ɵfindLocaleData = findLocaleData;\n    exports.ɵLOCALE_DATA = LOCALE_DATA;\n    exports.ɵɵattribute = ɵɵattribute;\n    exports.ɵɵattributeInterpolate1 = ɵɵattributeInterpolate1;\n    exports.ɵɵattributeInterpolate2 = ɵɵattributeInterpolate2;\n    exports.ɵɵattributeInterpolate3 = ɵɵattributeInterpolate3;\n    exports.ɵɵattributeInterpolate4 = ɵɵattributeInterpolate4;\n    exports.ɵɵattributeInterpolate5 = ɵɵattributeInterpolate5;\n    exports.ɵɵattributeInterpolate6 = ɵɵattributeInterpolate6;\n    exports.ɵɵattributeInterpolate7 = ɵɵattributeInterpolate7;\n    exports.ɵɵattributeInterpolate8 = ɵɵattributeInterpolate8;\n    exports.ɵɵattributeInterpolateV = ɵɵattributeInterpolateV;\n    exports.ɵɵdefineBase = ɵɵdefineBase;\n    exports.ɵɵdefineComponent = ɵɵdefineComponent;\n    exports.ɵɵdefineDirective = ɵɵdefineDirective;\n    exports.ɵɵdefinePipe = ɵɵdefinePipe;\n    exports.ɵɵdefineNgModule = ɵɵdefineNgModule;\n    exports.ɵdetectChanges = detectChanges;\n    exports.ɵrenderComponent = renderComponent;\n    exports.ɵRender3ComponentFactory = ComponentFactory$1;\n    exports.ɵRender3ComponentRef = ComponentRef$1;\n    exports.ɵɵdirectiveInject = ɵɵdirectiveInject;\n    exports.ɵɵinjectAttribute = ɵɵinjectAttribute;\n    exports.ɵɵgetFactoryOf = ɵɵgetFactoryOf;\n    exports.ɵɵgetInheritedFactory = ɵɵgetInheritedFactory;\n    exports.ɵɵsetComponentScope = ɵɵsetComponentScope;\n    exports.ɵɵsetNgModuleScope = ɵɵsetNgModuleScope;\n    exports.ɵɵtemplateRefExtractor = ɵɵtemplateRefExtractor;\n    exports.ɵɵProvidersFeature = ɵɵProvidersFeature;\n    exports.ɵɵInheritDefinitionFeature = ɵɵInheritDefinitionFeature;\n    exports.ɵɵNgOnChangesFeature = ɵɵNgOnChangesFeature;\n    exports.ɵLifecycleHooksFeature = LifecycleHooksFeature;\n    exports.ɵRender3NgModuleRef = NgModuleRef$1;\n    exports.ɵmarkDirty = markDirty;\n    exports.ɵNgModuleFactory = NgModuleFactory$1;\n    exports.ɵNO_CHANGE = NO_CHANGE;\n    exports.ɵɵcontainer = ɵɵcontainer;\n    exports.ɵɵnextContext = ɵɵnextContext;\n    exports.ɵɵelementStart = ɵɵelementStart;\n    exports.ɵɵnamespaceHTML = ɵɵnamespaceHTML;\n    exports.ɵɵnamespaceMathML = ɵɵnamespaceMathML;\n    exports.ɵɵnamespaceSVG = ɵɵnamespaceSVG;\n    exports.ɵɵelement = ɵɵelement;\n    exports.ɵɵlistener = ɵɵlistener;\n    exports.ɵɵtext = ɵɵtext;\n    exports.ɵɵtextInterpolate = ɵɵtextInterpolate;\n    exports.ɵɵtextInterpolate1 = ɵɵtextInterpolate1;\n    exports.ɵɵtextInterpolate2 = ɵɵtextInterpolate2;\n    exports.ɵɵtextInterpolate3 = ɵɵtextInterpolate3;\n    exports.ɵɵtextInterpolate4 = ɵɵtextInterpolate4;\n    exports.ɵɵtextInterpolate5 = ɵɵtextInterpolate5;\n    exports.ɵɵtextInterpolate6 = ɵɵtextInterpolate6;\n    exports.ɵɵtextInterpolate7 = ɵɵtextInterpolate7;\n    exports.ɵɵtextInterpolate8 = ɵɵtextInterpolate8;\n    exports.ɵɵtextInterpolateV = ɵɵtextInterpolateV;\n    exports.ɵɵembeddedViewStart = ɵɵembeddedViewStart;\n    exports.ɵɵprojection = ɵɵprojection;\n    exports.ɵɵinterpolation1 = ɵɵinterpolation1;\n    exports.ɵɵinterpolation2 = ɵɵinterpolation2;\n    exports.ɵɵinterpolation3 = ɵɵinterpolation3;\n    exports.ɵɵinterpolation4 = ɵɵinterpolation4;\n    exports.ɵɵinterpolation5 = ɵɵinterpolation5;\n    exports.ɵɵinterpolation6 = ɵɵinterpolation6;\n    exports.ɵɵinterpolation7 = ɵɵinterpolation7;\n    exports.ɵɵinterpolation8 = ɵɵinterpolation8;\n    exports.ɵɵinterpolationV = ɵɵinterpolationV;\n    exports.ɵɵpipeBind1 = ɵɵpipeBind1;\n    exports.ɵɵpipeBind2 = ɵɵpipeBind2;\n    exports.ɵɵpipeBind3 = ɵɵpipeBind3;\n    exports.ɵɵpipeBind4 = ɵɵpipeBind4;\n    exports.ɵɵpipeBindV = ɵɵpipeBindV;\n    exports.ɵɵpureFunction0 = ɵɵpureFunction0;\n    exports.ɵɵpureFunction1 = ɵɵpureFunction1;\n    exports.ɵɵpureFunction2 = ɵɵpureFunction2;\n    exports.ɵɵpureFunction3 = ɵɵpureFunction3;\n    exports.ɵɵpureFunction4 = ɵɵpureFunction4;\n    exports.ɵɵpureFunction5 = ɵɵpureFunction5;\n    exports.ɵɵpureFunction6 = ɵɵpureFunction6;\n    exports.ɵɵpureFunction7 = ɵɵpureFunction7;\n    exports.ɵɵpureFunction8 = ɵɵpureFunction8;\n    exports.ɵɵpureFunctionV = ɵɵpureFunctionV;\n    exports.ɵɵgetCurrentView = ɵɵgetCurrentView;\n    exports.ɵgetDirectives = getDirectives;\n    exports.ɵgetHostElement = getHostElement;\n    exports.ɵɵrestoreView = ɵɵrestoreView;\n    exports.ɵɵcontainerRefreshStart = ɵɵcontainerRefreshStart;\n    exports.ɵɵcontainerRefreshEnd = ɵɵcontainerRefreshEnd;\n    exports.ɵɵqueryRefresh = ɵɵqueryRefresh;\n    exports.ɵɵviewQuery = ɵɵviewQuery;\n    exports.ɵɵstaticViewQuery = ɵɵstaticViewQuery;\n    exports.ɵɵstaticContentQuery = ɵɵstaticContentQuery;\n    exports.ɵɵloadViewQuery = ɵɵloadViewQuery;\n    exports.ɵɵcontentQuery = ɵɵcontentQuery;\n    exports.ɵɵloadContentQuery = ɵɵloadContentQuery;\n    exports.ɵɵelementEnd = ɵɵelementEnd;\n    exports.ɵɵproperty = ɵɵproperty;\n    exports.ɵɵpropertyInterpolate = ɵɵpropertyInterpolate;\n    exports.ɵɵpropertyInterpolate1 = ɵɵpropertyInterpolate1;\n    exports.ɵɵpropertyInterpolate2 = ɵɵpropertyInterpolate2;\n    exports.ɵɵpropertyInterpolate3 = ɵɵpropertyInterpolate3;\n    exports.ɵɵpropertyInterpolate4 = ɵɵpropertyInterpolate4;\n    exports.ɵɵpropertyInterpolate5 = ɵɵpropertyInterpolate5;\n    exports.ɵɵpropertyInterpolate6 = ɵɵpropertyInterpolate6;\n    exports.ɵɵpropertyInterpolate7 = ɵɵpropertyInterpolate7;\n    exports.ɵɵpropertyInterpolate8 = ɵɵpropertyInterpolate8;\n    exports.ɵɵpropertyInterpolateV = ɵɵpropertyInterpolateV;\n    exports.ɵɵupdateSyntheticHostBinding = ɵɵupdateSyntheticHostBinding;\n    exports.ɵɵcomponentHostSyntheticListener = ɵɵcomponentHostSyntheticListener;\n    exports.ɵɵprojectionDef = ɵɵprojectionDef;\n    exports.ɵɵreference = ɵɵreference;\n    exports.ɵɵenableBindings = ɵɵenableBindings;\n    exports.ɵɵdisableBindings = ɵɵdisableBindings;\n    exports.ɵɵallocHostVars = ɵɵallocHostVars;\n    exports.ɵɵelementContainerStart = ɵɵelementContainerStart;\n    exports.ɵɵelementContainerEnd = ɵɵelementContainerEnd;\n    exports.ɵɵstyling = ɵɵstyling;\n    exports.ɵɵstyleMap = ɵɵstyleMap;\n    exports.ɵɵclassMap = ɵɵclassMap;\n    exports.ɵɵstyleProp = ɵɵstyleProp;\n    exports.ɵɵstylingApply = ɵɵstylingApply;\n    exports.ɵɵclassProp = ɵɵclassProp;\n    exports.ɵɵelementHostAttrs = ɵɵelementHostAttrs;\n    exports.ɵɵselect = ɵɵselect;\n    exports.ɵɵtextBinding = ɵɵtextBinding;\n    exports.ɵɵtemplate = ɵɵtemplate;\n    exports.ɵɵembeddedViewEnd = ɵɵembeddedViewEnd;\n    exports.ɵstore = store;\n    exports.ɵɵload = ɵɵload;\n    exports.ɵɵpipe = ɵɵpipe;\n    exports.ɵwhenRendered = whenRendered;\n    exports.ɵɵi18n = ɵɵi18n;\n    exports.ɵɵi18nAttributes = ɵɵi18nAttributes;\n    exports.ɵɵi18nExp = ɵɵi18nExp;\n    exports.ɵɵi18nStart = ɵɵi18nStart;\n    exports.ɵɵi18nEnd = ɵɵi18nEnd;\n    exports.ɵɵi18nApply = ɵɵi18nApply;\n    exports.ɵɵi18nPostprocess = ɵɵi18nPostprocess;\n    exports.ɵi18nConfigureLocalize = i18nConfigureLocalize;\n    exports.ɵɵi18nLocalize = ɵɵi18nLocalize;\n    exports.ɵsetLocaleId = setLocaleId;\n    exports.ɵDEFAULT_LOCALE_ID = DEFAULT_LOCALE_ID;\n    exports.ɵsetClassMetadata = setClassMetadata;\n    exports.ɵɵresolveWindow = ɵɵresolveWindow;\n    exports.ɵɵresolveDocument = ɵɵresolveDocument;\n    exports.ɵɵresolveBody = ɵɵresolveBody;\n    exports.ɵcompileComponent = compileComponent;\n    exports.ɵcompileDirective = compileDirective;\n    exports.ɵcompileNgModule = compileNgModule;\n    exports.ɵcompileNgModuleDefs = compileNgModuleDefs;\n    exports.ɵpatchComponentDefWithScope = patchComponentDefWithScope;\n    exports.ɵresetCompiledComponents = resetCompiledComponents;\n    exports.ɵflushModuleScopingQueueAsMuchAsPossible = flushModuleScopingQueueAsMuchAsPossible;\n    exports.ɵtransitiveScopesFor = transitiveScopesFor;\n    exports.ɵcompilePipe = compilePipe;\n    exports.ɵɵsanitizeHtml = ɵɵsanitizeHtml;\n    exports.ɵɵsanitizeStyle = ɵɵsanitizeStyle;\n    exports.ɵɵdefaultStyleSanitizer = ɵɵdefaultStyleSanitizer;\n    exports.ɵɵsanitizeScript = ɵɵsanitizeScript;\n    exports.ɵɵsanitizeUrl = ɵɵsanitizeUrl;\n    exports.ɵɵsanitizeResourceUrl = ɵɵsanitizeResourceUrl;\n    exports.ɵɵsanitizeUrlOrResourceUrl = ɵɵsanitizeUrlOrResourceUrl;\n    exports.ɵbypassSanitizationTrustHtml = bypassSanitizationTrustHtml;\n    exports.ɵbypassSanitizationTrustStyle = bypassSanitizationTrustStyle;\n    exports.ɵbypassSanitizationTrustScript = bypassSanitizationTrustScript;\n    exports.ɵbypassSanitizationTrustUrl = bypassSanitizationTrustUrl;\n    exports.ɵbypassSanitizationTrustResourceUrl = bypassSanitizationTrustResourceUrl;\n    exports.ɵgetLContext = getLContext;\n    exports.ɵNG_ELEMENT_ID = NG_ELEMENT_ID;\n    exports.ɵNG_COMPONENT_DEF = NG_COMPONENT_DEF;\n    exports.ɵNG_DIRECTIVE_DEF = NG_DIRECTIVE_DEF;\n    exports.ɵNG_PIPE_DEF = NG_PIPE_DEF;\n    exports.ɵNG_MODULE_DEF = NG_MODULE_DEF;\n    exports.ɵNG_BASE_DEF = NG_BASE_DEF;\n    exports.ɵNG_INJECTABLE_DEF = NG_INJECTABLE_DEF;\n    exports.ɵNG_INJECTOR_DEF = NG_INJECTOR_DEF;\n    exports.ɵbindPlayerFactory = bindPlayerFactory;\n    exports.ɵaddPlayer = addPlayer;\n    exports.ɵgetPlayers = getPlayers;\n    exports.ɵcompileNgModuleFactory__POST_R3__ = compileNgModuleFactory__POST_R3__;\n    exports.ɵisBoundToModule__POST_R3__ = isBoundToModule__POST_R3__;\n    exports.ɵSWITCH_COMPILE_COMPONENT__POST_R3__ = SWITCH_COMPILE_COMPONENT__POST_R3__;\n    exports.ɵSWITCH_COMPILE_DIRECTIVE__POST_R3__ = SWITCH_COMPILE_DIRECTIVE__POST_R3__;\n    exports.ɵSWITCH_COMPILE_PIPE__POST_R3__ = SWITCH_COMPILE_PIPE__POST_R3__;\n    exports.ɵSWITCH_COMPILE_NGMODULE__POST_R3__ = SWITCH_COMPILE_NGMODULE__POST_R3__;\n    exports.ɵgetDebugNode__POST_R3__ = getDebugNode__POST_R3__;\n    exports.ɵSWITCH_COMPILE_INJECTABLE__POST_R3__ = SWITCH_COMPILE_INJECTABLE__POST_R3__;\n    exports.ɵSWITCH_IVY_ENABLED__POST_R3__ = SWITCH_IVY_ENABLED__POST_R3__;\n    exports.ɵSWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__ = SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__;\n    exports.ɵCompiler_compileModuleSync__POST_R3__ = Compiler_compileModuleSync__POST_R3__;\n    exports.ɵCompiler_compileModuleAsync__POST_R3__ = Compiler_compileModuleAsync__POST_R3__;\n    exports.ɵCompiler_compileModuleAndAllComponentsSync__POST_R3__ = Compiler_compileModuleAndAllComponentsSync__POST_R3__;\n    exports.ɵCompiler_compileModuleAndAllComponentsAsync__POST_R3__ = Compiler_compileModuleAndAllComponentsAsync__POST_R3__;\n    exports.ɵSWITCH_ELEMENT_REF_FACTORY__POST_R3__ = SWITCH_ELEMENT_REF_FACTORY__POST_R3__;\n    exports.ɵSWITCH_TEMPLATE_REF_FACTORY__POST_R3__ = SWITCH_TEMPLATE_REF_FACTORY__POST_R3__;\n    exports.ɵSWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__ = SWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__;\n    exports.ɵSWITCH_RENDERER2_FACTORY__POST_R3__ = SWITCH_RENDERER2_FACTORY__POST_R3__;\n    exports.ɵgetModuleFactory__POST_R3__ = getModuleFactory__POST_R3__;\n    exports.ɵregisterNgModuleType = registerNgModuleType;\n    exports.ɵpublishGlobalUtil = publishGlobalUtil;\n    exports.ɵpublishDefaultGlobalUtils = publishDefaultGlobalUtils;\n    exports.ɵcreateInjector = createInjector;\n    exports.ɵINJECTOR_IMPL__POST_R3__ = INJECTOR_IMPL__POST_R3__;\n    exports.ɵregisterModuleFactory = registerModuleFactory;\n    exports.ɵEMPTY_ARRAY = EMPTY_ARRAY$2;\n    exports.ɵEMPTY_MAP = EMPTY_MAP;\n    exports.ɵand = anchorDef;\n    exports.ɵccf = createComponentFactory;\n    exports.ɵcmf = createNgModuleFactory;\n    exports.ɵcrt = createRendererType2;\n    exports.ɵdid = directiveDef;\n    exports.ɵeld = elementDef;\n    exports.ɵgetComponentViewDefinitionFactory = getComponentViewDefinitionFactory;\n    exports.ɵinlineInterpolate = inlineInterpolate;\n    exports.ɵinterpolate = interpolate;\n    exports.ɵmod = moduleDef;\n    exports.ɵmpd = moduleProvideDef;\n    exports.ɵncd = ngContentDef;\n    exports.ɵnov = nodeValue;\n    exports.ɵpid = pipeDef;\n    exports.ɵprd = providerDef;\n    exports.ɵpad = pureArrayDef;\n    exports.ɵpod = pureObjectDef;\n    exports.ɵppd = purePipeDef;\n    exports.ɵqud = queryDef;\n    exports.ɵted = textDef;\n    exports.ɵunv = unwrapValue;\n    exports.ɵvid = viewDef;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=core.umd.js.map\n"]}