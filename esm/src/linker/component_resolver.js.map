{"version":3,"file":"component_resolver.js","sourceRoot":"","sources":["../../../../../../modules/@angular/core/src/linker/component_resolver.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAEI,EAAC,OAAO,EAAC,MAAM,YAAY;OAC3B,EAAC,UAAU,EAAC,MAAM,kBAAkB;OACpC,EAAC,cAAc,EAAC,MAAM,iBAAiB;OACvC,EAAC,aAAa,EAAC,MAAM,sBAAsB;OAC3C,EAAO,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAC,MAAM,gBAAgB;OAC1D,EAAC,SAAS,EAAC,MAAM,0BAA0B;OAE3C,EAAC,gBAAgB,EAAC,MAAM,qBAAqB;AAGpD;;;;;;;;GAQG;AACH;AASA,CAAC;AARQ,kDAAgC,GACnC,kLAAkL,CAAC;AAChL,2CAAyB,GAC5B,uFAAuF,CAK5F;AAED,6BAA6B,IAAS;IACpC,MAAM,CAAC,IAAI,YAAY,gBAAgB,CAAC;AAC1C,CAAC;AACD,gDAAgD,iBAAiB;IAC/D,YAAoB,QAAiB;QAAI,OAAO,CAAC;QAA7B,aAAQ,GAAR,QAAQ,CAAS;IAAa,CAAC;IACnD,gBAAgB,CAAC,SAAsB;QACrC,EAAE,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YACxB,MAAM,CAAC,cAAc,CAAC,MAAM,CACxB,IAAI,aAAa,CAAC,mCAAmC,SAAS,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC;QACjF,CAAC;QACD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,iBAAiB,CAAC,gCAAgC,CAAC,CAAC;QAEvE,IAAI,SAAS,GAAG,SAAS,CAAC,WAAW,CAAO,SAAS,CAAC,CAAC;QACvD,IAAI,gBAAgB,GAAG,SAAS,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;QAE3D,EAAE,CAAC,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;YAC9B,MAAM,IAAI,aAAa,CAAC,4BAA4B,SAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QACpF,CAAC;QACD,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;IAClD,CAAC;IAED,UAAU,KAAI,CAAC;AASjB,CAAC;AARD,kBAAkB;AACX,qCAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,yCAAc,GAA2D;IAChF,EAAC,IAAI,EAAE,OAAO,GAAG;CAChB,CACA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Console} from '../console';\nimport {Injectable} from '../di/decorators';\nimport {PromiseWrapper} from '../facade/async';\nimport {BaseException} from '../facade/exceptions';\nimport {Type, isBlank, isString, stringify} from '../facade/lang';\nimport {reflector} from '../reflection/reflection';\n\nimport {ComponentFactory} from './component_factory';\n\n\n/**\n * Low-level service for loading {@link ComponentFactory}s, which\n * can later be used to create and render a Component instance.\n *\n * @deprecated Use {@link ComponentFactoryResolver} together with {@link\n * AppModule}.precompile}/{@link Component}.precompile or\n * {@link ANALYZE_FOR_PRECOMPILE} provider for dynamic component creation.\n * Use {@link AppModuleFactoryLoader} for lazy loading.\n */\nexport abstract class ComponentResolver {\n  static DynamicCompilationDeprecationMsg =\n      'ComponentResolver is deprecated for dynamic compilation. Use ComponentFactoryResolver together with @AppModule/@Component.precompile or ANALYZE_FOR_PRECOMPILE provider instead.';\n  static LazyLoadingDeprecationMsg =\n      'ComponentResolver is deprecated for lazy loading. Use AppModuleFactoryLoader instead.';\n\n\n  abstract resolveComponent(component: Type|string): Promise<ComponentFactory<any>>;\n  abstract clearCache(): void;\n}\n\nfunction _isComponentFactory(type: any): boolean {\n  return type instanceof ComponentFactory;\n}\nexport class ReflectorComponentResolver extends ComponentResolver {\n  constructor(private _console: Console) { super(); }\n  resolveComponent(component: Type|string): Promise<ComponentFactory<any>> {\n    if (isString(component)) {\n      return PromiseWrapper.reject(\n          new BaseException(`Cannot resolve component using '${component}'.`), null);\n    }\n    this._console.warn(ComponentResolver.DynamicCompilationDeprecationMsg);\n\n    var metadatas = reflector.annotations(<Type>component);\n    var componentFactory = metadatas.find(_isComponentFactory);\n\n    if (isBlank(componentFactory)) {\n      throw new BaseException(`No precompiled component ${stringify(component)} found`);\n    }\n    return PromiseWrapper.resolve(componentFactory);\n  }\n\n  clearCache() {}\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: Console, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}