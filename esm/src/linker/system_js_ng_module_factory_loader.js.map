{"version":3,"file":"system_js_ng_module_factory_loader.js","sourceRoot":"","sources":["../../../../../../modules/@angular/core/src/linker/system_js_ng_module_factory_loader.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, Optional} from '../di';\n\nimport {Compiler} from './compiler';\nimport {NgModuleFactory} from './ng_module_factory';\nimport {NgModuleFactoryLoader} from './ng_module_factory_loader';\n\nconst _SEPARATOR = '#';\n\nconst FACTORY_CLASS_SUFFIX = 'NgFactory';\n\n/**\n * Configuration for SystemJsNgModuleLoader.\n * token.\n *\n * @experimental\n */\nexport abstract class SystemJsNgModuleLoaderConfig {\n  /**\n   * Prefix to add when computing the name of the factory module for a given module name.\n   */\n  factoryPathPrefix: string;\n\n  /**\n   * Suffix to add when computing the name of the factory module for a given module name.\n   */\n  factoryPathSuffix: string;\n}\n\nconst DEFAULT_CONFIG: SystemJsNgModuleLoaderConfig = {\n  factoryPathPrefix: '',\n  factoryPathSuffix: '.ngfactory',\n};\nexport class SystemJsNgModuleLoader implements NgModuleFactoryLoader {\n  private _config: SystemJsNgModuleLoaderConfig;\n\n  /**\n   * @internal\n   */\n  _system: any;\n\n  constructor(private _compiler: Compiler, config?: SystemJsNgModuleLoaderConfig) {\n    this._system = () => System;\n    this._config = config || DEFAULT_CONFIG;\n  }\n\n  load(path: string): Promise<NgModuleFactory<any>> {\n    const offlineMode = this._compiler instanceof Compiler;\n    return offlineMode ? this.loadFactory(path) : this.loadAndCompile(path);\n  }\n\n  private loadAndCompile(path: string): Promise<NgModuleFactory<any>> {\n    let [module, exportName] = path.split(_SEPARATOR);\n    if (exportName === undefined) exportName = 'default';\n\n    return this._system()\n        .import(module)\n        .then((module: any) => module[exportName])\n        .then((type: any) => checkNotEmpty(type, module, exportName))\n        .then((type: any) => this._compiler.compileModuleAsync(type));\n  }\n\n  private loadFactory(path: string): Promise<NgModuleFactory<any>> {\n    let [module, exportName] = path.split(_SEPARATOR);\n    let factoryClassSuffix = FACTORY_CLASS_SUFFIX;\n    if (exportName === undefined) {\n      exportName = 'default';\n      factoryClassSuffix = '';\n    }\n\n    return this._system()\n        .import(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix)\n        .then((module: any) => module[exportName + factoryClassSuffix])\n        .then((factory: any) => checkNotEmpty(factory, module, exportName));\n  }\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: Compiler, },\n{type: SystemJsNgModuleLoaderConfig, decorators: [{ type: Optional }, ]},\n];\n}\n\nfunction checkNotEmpty(value: any, modulePath: string, exportName: string): any {\n  if (!value) {\n    throw new Error(`Cannot find '${exportName}' in '${modulePath}'`);\n  }\n  return value;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}