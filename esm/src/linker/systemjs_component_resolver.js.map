{"version":3,"file":"systemjs_component_resolver.js","sourceRoot":"","sources":["../../../../../../modules/@angular/core/src/linker/systemjs_component_resolver.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAEI,EAAC,OAAO,EAAC,MAAM,YAAY;OAC3B,EAAC,UAAU,EAAC,MAAM,OAAO;OACzB,EAAC,QAAQ,EAAC,MAAM,gBAAgB;OAGhC,EAAC,iBAAiB,EAAC,MAAM,sBAAsB;AAItD,MAAM,UAAU,GAAG,GAAG,CAAC;AACvB;IACE,YAAoB,SAA4B,EAAU,QAAiB;QAAvD,cAAS,GAAT,SAAS,CAAmB;QAAU,aAAQ,GAAR,QAAQ,CAAS;IAAG,CAAC;IAE/E,gBAAgB,CAAC,aAA+B;QAC9C,EAAE,CAAC,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;YAC5B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,iBAAiB,CAAC,yBAAyB,CAAC,CAAC;YAChE,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC,GAAG,aAAa,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;YAE1D,EAAE,CAAC,CAAC,SAAS,KAAK,KAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC1B,wDAAwD;gBACxD,SAAS,GAAG,SAAS,CAAC;YACxB,CAAC;YAED,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAC7B,CAAC,MAAW,KAAK,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QAC3E,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC;IACxD,CAAC;IAED,UAAU,KAAU,CAAC;AAUvB,CAAC;AATD,kBAAkB;AACX,oCAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,wCAAc,GAA2D;IAChF,EAAC,IAAI,EAAE,iBAAiB,GAAG;IAC3B,EAAC,IAAI,EAAE,OAAO,GAAG;CAChB,CACA;AAED,MAAM,qBAAqB,GAAG,YAAY,CAAC;AAC3C,MAAM,oBAAoB,GAAG,WAAW,CAAC;AACzC;IACE,YAAoB,QAAiB;QAAjB,aAAQ,GAAR,QAAQ,CAAS;IAAG,CAAC;IACzC,gBAAgB,CAAC,aAA+B;QAC9C,EAAE,CAAC,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;YAC5B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,iBAAiB,CAAC,yBAAyB,CAAC,CAAC;YAChE,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,GAAG,aAAa,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;YACxD,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,qBAAqB,CAAC;iBAC/C,IAAI,CAAC,CAAC,MAAW,KAAK,MAAM,CAAC,OAAO,GAAG,oBAAoB,CAAC,CAAC,CAAC;QACrE,CAAC;QAED,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC;IAED,UAAU,KAAU,CAAC;AASvB,CAAC;AARD,kBAAkB;AACX,qCAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,yCAAc,GAA2D;IAChF,EAAC,IAAI,EAAE,OAAO,GAAG;CAChB,CACA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Console} from '../console';\nimport {Injectable} from '../di';\nimport {isString} from '../facade/lang';\nimport {Type} from '../type';\nimport {ComponentFactory} from './component_factory';\nimport {ComponentResolver} from './component_resolver';\n\ndeclare var System: {import: (module: string) => Promise<any>;};\n\nconst _SEPARATOR = '#';\nexport class SystemJsComponentResolver implements ComponentResolver {\n  constructor(private _resolver: ComponentResolver, private _console: Console) {}\n\n  resolveComponent(componentType: string|Type<any>): Promise<ComponentFactory<any>> {\n    if (isString(componentType)) {\n      this._console.warn(ComponentResolver.LazyLoadingDeprecationMsg);\n      let [module, component] = componentType.split(_SEPARATOR);\n\n      if (component === void(0)) {\n        // Use the default export when no component is specified\n        component = 'default';\n      }\n\n      return System.import(module).then(\n          (module: any) => this._resolver.resolveComponent(module[component]));\n    }\n\n    return this._resolver.resolveComponent(componentType);\n  }\n\n  clearCache(): void {}\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: ComponentResolver, },\n{type: Console, },\n];\n}\n\nconst FACTORY_MODULE_SUFFIX = '.ngfactory';\nconst FACTORY_CLASS_SUFFIX = 'NgFactory';\nexport class SystemJsCmpFactoryResolver implements ComponentResolver {\n  constructor(private _console: Console) {}\n  resolveComponent(componentType: string|Type<any>): Promise<ComponentFactory<any>> {\n    if (isString(componentType)) {\n      this._console.warn(ComponentResolver.LazyLoadingDeprecationMsg);\n      let [module, factory] = componentType.split(_SEPARATOR);\n      return System.import(module + FACTORY_MODULE_SUFFIX)\n          .then((module: any) => module[factory + FACTORY_CLASS_SUFFIX]);\n    }\n\n    return Promise.resolve(null);\n  }\n\n  clearCache(): void {}\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: Console, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}