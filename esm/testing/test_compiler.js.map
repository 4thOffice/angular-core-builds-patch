{"version":3,"file":"test_compiler.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/testing/test_compiler.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAEI,EAAC,QAAQ,EAAkH,MAAM,UAAU;OAC3I,EAAC,aAAa,EAAC,MAAM,0BAA0B;AAItD;;;;GAIG;AACH,qCAAqC,QAAQ;IAC3C,IAAI,QAAQ,KAAe,MAAM,aAAa,EAAE,CAAC,CAAC,CAAC;IACnD,cAAc,CAAC,MAAiB,EAAE,SAAiD;QACjF,MAAM,aAAa,EAAE,CAAC;IACxB,CAAC;IACD,iBAAiB,CAAC,SAAoB,EAAE,SAAkD;QAExF,MAAM,aAAa,EAAE,CAAC;IACxB,CAAC;IACD,iBAAiB,CAAC,SAAoB,EAAE,SAAkD;QAExF,MAAM,aAAa,EAAE,CAAC;IACxB,CAAC;IACD,YAAY,CAAC,SAAoB,EAAE,SAA6C;QAC9E,MAAM,aAAa,EAAE,CAAC;IACxB,CAAC;AACH,CAAC;AAED;;;;GAIG;AACH;AAEA,CAAC;AAAA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Compiler, CompilerOptions, ComponentMetadataType, DirectiveMetadataType, Injector, NgModuleMetadataType, PipeMetadataType} from '../index';\nimport {unimplemented} from '../src/facade/exceptions';\nimport {Type} from '../src/type';\nimport {MetadataOverride} from './metadata_override';\n\n/**\n * Special interface to the compiler only used by testing\n *\n * @experimental\n */\nexport class TestingCompiler extends Compiler {\n  get injector(): Injector { throw unimplemented(); }\n  overrideModule(module: Type<any>, overrides: MetadataOverride<NgModuleMetadataType>): void {\n    throw unimplemented();\n  }\n  overrideDirective(directive: Type<any>, overrides: MetadataOverride<DirectiveMetadataType>):\n      void {\n    throw unimplemented();\n  }\n  overrideComponent(component: Type<any>, overrides: MetadataOverride<ComponentMetadataType>):\n      void {\n    throw unimplemented();\n  }\n  overridePipe(directive: Type<any>, overrides: MetadataOverride<PipeMetadataType>): void {\n    throw unimplemented();\n  }\n}\n\n/**\n * A factory for creating a Compiler\n *\n * @experimental\n */\nexport abstract class TestingCompilerFactory {\n  abstract createTestingCompiler(options?: CompilerOptions[]): TestingCompiler;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}