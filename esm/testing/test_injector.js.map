{"version":3,"file":"test_injector.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/testing/test_injector.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AppModule, AppModuleFactory, AppModuleMetadata, AppModuleRef, Compiler, ComponentStillLoadingError, Injector, PlatformRef, Provider, Type} from '../index';\nimport {ListWrapper} from '../src/facade/collection';\nimport {BaseException} from '../src/facade/exceptions';\nimport {FunctionWrapper, isPresent, stringify} from '../src/facade/lang';\n\nimport {AsyncTestCompleter} from './async_test_completer';\n\nconst UNDEFINED = new Object();\n\n/**\n * Signature of the compiler factory passed to `initTestEnvironment`.\n *\n * @experimental\n */\nexport type TestCompilerFactory =\n    (config: {providers?: Array<Type|Provider|any[]>, useJit?: boolean}) => Compiler;\n\n/**\n * @experimental\n */\nexport class TestInjector implements Injector {\n  private _instantiated: boolean = false;\n\n  private _compiler: Compiler = null;\n  private _moduleRef: AppModuleRef<any> = null;\n\n  private _compilerProviders: Array<Type|Provider|any[]|any> = [];\n  private _compilerUseJit: boolean = true;\n\n  private _providers: Array<Type|Provider|any[]|any> = [];\n  private _directives: Array<Type|any[]|any> = [];\n  private _pipes: Array<Type|any[]|any> = [];\n  private _modules: Array<Type|any[]|any> = [];\n  private _precompile: Array<Type|any[]|any> = [];\n\n  reset() {\n    this._compiler = null;\n    this._moduleRef = null;\n    this._compilerProviders = [];\n    this._compilerUseJit = true;\n    this._providers = [];\n    this._directives = [];\n    this._pipes = [];\n    this._modules = [];\n    this._precompile = [];\n    this._instantiated = false;\n  }\n\n  compilerFactory: TestCompilerFactory = null;\n\n  platform: PlatformRef = null;\n\n  appModule: Type = null;\n\n  configureCompiler(config: {providers?: any[], useJit?: boolean}) {\n    if (this._instantiated) {\n      throw new BaseException('Cannot add configuration after test injector is instantiated');\n    }\n    if (config.providers) {\n      this._compilerProviders = ListWrapper.concat(this._compilerProviders, config.providers);\n    }\n    if (config.useJit !== undefined) {\n      this._compilerUseJit = config.useJit;\n    }\n  }\n\n  configureModule(moduleDef: {\n    providers?: any[],\n    directives?: any[],\n    pipes?: any[],\n    precompile?: any[],\n    modules?: any[]\n  }) {\n    if (this._instantiated) {\n      throw new BaseException('Cannot add configuration after test injector is instantiated');\n    }\n    if (moduleDef.providers) {\n      this._providers = ListWrapper.concat(this._providers, moduleDef.providers);\n    }\n    if (moduleDef.directives) {\n      this._directives = ListWrapper.concat(this._directives, moduleDef.directives);\n    }\n    if (moduleDef.pipes) {\n      this._pipes = ListWrapper.concat(this._pipes, moduleDef.pipes);\n    }\n    if (moduleDef.precompile) {\n      this._precompile = ListWrapper.concat(this._precompile, moduleDef.precompile);\n    }\n    if (moduleDef.modules) {\n      this._modules = ListWrapper.concat(this._modules, moduleDef.modules);\n    }\n  }\n\n  createInjectorSync(): Injector {\n    if (this._instantiated) {\n      return this;\n    }\n    let moduleMeta = this._createCompilerAndModuleMeta();\n    return this._createFromModuleFactory(\n        this._compiler.compileAppModuleSync(_NoopModule, moduleMeta));\n  }\n\n  createInjectorAsync(): Promise<Injector> {\n    if (this._instantiated) {\n      return Promise.resolve(this);\n    }\n    let moduleMeta = this._createCompilerAndModuleMeta();\n    return this._compiler.compileAppModuleAsync(_NoopModule, moduleMeta)\n        .then((appModuleFactory) => this._createFromModuleFactory(appModuleFactory));\n  }\n\n  private _createCompilerAndModuleMeta(): AppModuleMetadata {\n    this._compiler =\n        this.compilerFactory({providers: this._compilerProviders, useJit: this._compilerUseJit});\n    const moduleMeta = new AppModuleMetadata({\n      providers: this._providers.concat([{provide: TestInjector, useValue: this}]),\n      modules: this._modules.concat([this.appModule]),\n      directives: this._directives,\n      pipes: this._pipes,\n      precompile: this._precompile\n    });\n\n    return moduleMeta;\n  }\n\n  private _createFromModuleFactory(appModuleFactory: AppModuleFactory<any>): Injector {\n    this._moduleRef = appModuleFactory.create(this.platform.injector);\n    this._instantiated = true;\n    return this;\n  }\n\n  get(token: any, notFoundValue: any = Injector.THROW_IF_NOT_FOUND) {\n    if (!this._instantiated) {\n      throw new BaseException(\n          'Illegal state: The TestInjector has not yet been created. Call createInjectorSync/Async first!');\n    }\n    if (token === TestInjector) {\n      return this;\n    }\n    // Tests can inject things from the app module and from the compiler,\n    // but the app module can't inject things from the compiler and vice versa.\n    let result = this._moduleRef.injector.get(token, UNDEFINED);\n    return result === UNDEFINED ? this._compiler.injector.get(token, notFoundValue) : result;\n  }\n\n  execute(tokens: any[], fn: Function): any {\n    if (!this._instantiated) {\n      throw new BaseException(\n          'Illegal state: The TestInjector has not yet been created. Call createInjectorSync/Async first!');\n    }\n    var params = tokens.map(t => this.get(t));\n    return FunctionWrapper.apply(fn, params);\n  }\n}\n\nvar _testInjector: TestInjector = null;\n\n/**\n * @experimental\n */\nexport function getTestInjector() {\n  if (_testInjector == null) {\n    _testInjector = new TestInjector();\n  }\n  return _testInjector;\n}\n\n/**\n * Set the providers that the test injector should use. These should be providers\n * common to every test in the suite.\n *\n * This may only be called once, to set up the common providers for the current test\n * suite on the current platform. If you absolutely need to change the providers,\n * first use `resetTestEnvironment`.\n *\n * Test Providers for individual platforms are available from\n * 'angular2/platform/testing/<platform_name>'.\n *\n * @experimental\n */\nexport function initTestEnvironment(\n    compilerFactory: TestCompilerFactory, platform: PlatformRef, appModule: Type) {\n  var testInjector = getTestInjector();\n  if (testInjector.compilerFactory || testInjector.platform || testInjector.appModule) {\n    throw new BaseException('Cannot set base providers because it has already been called');\n  }\n  testInjector.compilerFactory = compilerFactory;\n  testInjector.platform = platform;\n  testInjector.appModule = appModule;\n}\n\n/**\n * Reset the providers for the test injector.\n *\n * @experimental\n */\nexport function resetTestEnvironment() {\n  var testInjector = getTestInjector();\n  testInjector.compilerFactory = null;\n  testInjector.platform = null;\n  testInjector.appModule = null;\n  testInjector.reset();\n}\n\n/**\n * Allows injecting dependencies in `beforeEach()` and `it()`.\n *\n * Example:\n *\n * ```\n * beforeEach(inject([Dependency, AClass], (dep, object) => {\n *   // some code that uses `dep` and `object`\n *   // ...\n * }));\n *\n * it('...', inject([AClass], (object) => {\n *   object.doSomething();\n *   expect(...);\n * })\n * ```\n *\n * Notes:\n * - inject is currently a function because of some Traceur limitation the syntax should\n * eventually\n *   becomes `it('...', @Inject (object: AClass, async: AsyncTestCompleter) => { ... });`\n *\n * @stable\n */\nexport function inject(tokens: any[], fn: Function): () => any {\n  let testInjector = getTestInjector();\n  if (tokens.indexOf(AsyncTestCompleter) >= 0) {\n    return () => {\n      // Return an async test method that returns a Promise if AsyncTestCompleter is one of the\n      // injected tokens.\n      return testInjector.createInjectorAsync().then(() => {\n        let completer: AsyncTestCompleter = testInjector.get(AsyncTestCompleter);\n        testInjector.execute(tokens, fn);\n        return completer.promise;\n      });\n    };\n  } else {\n    return () => {\n      // Return a asynchronous test method with the injected tokens.\n      // TODO(tbosch): Right now, we can only detect the AsyncTestZoneSpec via its name.\n      // (see https://github.com/angular/zone.js/issues/370)\n      if (Zone.current.name.toLowerCase().indexOf('asynctestzone') >= 0) {\n        return testInjector.createInjectorAsync().then(() => testInjector.execute(tokens, fn));\n      } else {\n        // Return a synchronous test method with the injected tokens.\n        try {\n          testInjector.createInjectorSync();\n        } catch (e) {\n          if (e instanceof ComponentStillLoadingError) {\n            throw new Error(\n                `This test module precompiles the component ${stringify(e.compType)} which is using a \"templateUrl\", but the test is synchronous. ` +\n                `Please use the \"async(...)\" or \"fakeAsync(...)\" helper functions to make the test asynchronous.`);\n          } else {\n            throw e;\n          }\n        }\n        return testInjector.execute(tokens, fn);\n      }\n    };\n  }\n}\n\n/**\n * @experimental\n */\nexport class InjectSetupWrapper {\n  constructor(private _moduleDef: () => {\n    providers?: any[],\n    directives?: any[],\n    pipes?: any[],\n    precompile?: any[],\n    modules?: any[]\n  }) {}\n\n  private _addModule() {\n    var moduleDef = this._moduleDef();\n    if (moduleDef) {\n      getTestInjector().configureModule(moduleDef);\n    }\n  }\n\n  inject(tokens: any[], fn: Function): () => any {\n    return () => {\n      this._addModule();\n      return inject_impl(tokens, fn)();\n    };\n  }\n}\n\n/**\n * @experimental\n */\nexport function withProviders(providers: () => any) {\n  return new InjectSetupWrapper(() => {{return {providers: providers()};}});\n}\n\n/**\n * @experimental\n */\nexport function withModule(moduleDef: () => {\n  providers?: any[],\n  directives?: any[],\n  pipes?: any[],\n  precompile?: any[],\n  modules?: any[]\n}) {\n  return new InjectSetupWrapper(moduleDef);\n}\n\n\n// This is to ensure inject(Async) within InjectSetupWrapper doesn't call itself\n// when transpiled to Dart.\nvar inject_impl = inject;\n\nclass _NoopModule {}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}