/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// clang-format off
export { defineComponent as ɵdefineComponent, defineDirective as ɵdefineDirective, definePipe as ɵdefinePipe, defineNgModule as ɵdefineNgModule, detectChanges as ɵdetectChanges, renderComponent as ɵrenderComponent, directiveInject as ɵdirectiveInject, injectElementRef as ɵinjectElementRef, injectTemplateRef as ɵinjectTemplateRef, injectViewContainerRef as ɵinjectViewContainerRef, injectChangeDetectorRef as ɵinjectChangeDetectorRef, injectAttribute as ɵinjectAttribute, getFactoryOf as ɵgetFactoryOf, getInheritedFactory as ɵgetInheritedFactory, PublicFeature as ɵPublicFeature, InheritDefinitionFeature as ɵInheritDefinitionFeature, NgOnChangesFeature as ɵNgOnChangesFeature, markDirty as ɵmarkDirty, NgModuleFactory as ɵNgModuleFactory, NC as ɵNC, C as ɵC, x as ɵx, E as ɵE, NH as ɵNH, NM as ɵNM, NS as ɵNS, Ee as ɵEe, L as ɵL, T as ɵT, V as ɵV, Q as ɵQ, Qr as ɵQr, d as ɵd, P as ɵP, b as ɵb, i1 as ɵi1, i2 as ɵi2, i3 as ɵi3, i4 as ɵi4, i5 as ɵi5, i6 as ɵi6, i7 as ɵi7, i8 as ɵi8, iV as ɵiV, pb1 as ɵpb1, pb2 as ɵpb2, pb3 as ɵpb3, pb4 as ɵpb4, pbV as ɵpbV, f0 as ɵf0, f1 as ɵf1, f2 as ɵf2, f3 as ɵf3, f4 as ɵf4, f5 as ɵf5, f6 as ɵf6, f7 as ɵf7, f8 as ɵf8, fV as ɵfV, gV as ɵgV, rV as ɵrV, cR as ɵcR, cr as ɵcr, qR as ɵqR, ql as ɵql, e as ɵe, p as ɵp, pD as ɵpD, r as ɵr, rS as ɵrS, a as ɵa, s as ɵs, sm as ɵsm, sp as ɵsp, sa as ɵsa, cp as ɵcp, t as ɵt, v as ɵv, st as ɵst, ld as ɵld, Pp as ɵPp, whenRendered as ɵwhenRendered, iA as ɵiA, iEM as ɵiEM, iI1 as ɵiI1, iI2 as ɵiI2, iI3 as ɵiI3, iI4 as ɵiI4, iI5 as ɵiI5, iI6 as ɵiI6, iI7 as ɵiI7, iI8 as ɵiI8, iIV as ɵIV, iM as ɵiM, } from './render3/index';
export { sanitizeHtml as ɵsanitizeHtml, sanitizeStyle as ɵsanitizeStyle, sanitizeUrl as ɵsanitizeUrl, sanitizeResourceUrl as ɵsanitizeResourceUrl, } from './sanitization/sanitization';
export { bypassSanitizationTrustHtml as ɵbypassSanitizationTrustHtml, bypassSanitizationTrustStyle as ɵbypassSanitizationTrustStyle, bypassSanitizationTrustScript as ɵbypassSanitizationTrustScript, bypassSanitizationTrustUrl as ɵbypassSanitizationTrustUrl, bypassSanitizationTrustResourceUrl as ɵbypassSanitizationTrustResourceUrl, } from './sanitization/bypass';
// clang-format on

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29yZV9yZW5kZXIzX3ByaXZhdGVfZXhwb3J0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvY29yZV9yZW5kZXIzX3ByaXZhdGVfZXhwb3J0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUVILG1CQUFtQjtBQUNuQixPQUFPLEVBQ0wsZUFBZSxJQUFJLGdCQUFnQixFQUNuQyxlQUFlLElBQUksZ0JBQWdCLEVBQ25DLFVBQVUsSUFBSSxXQUFXLEVBQ3pCLGNBQWMsSUFBSSxlQUFlLEVBQ2pDLGFBQWEsSUFBSSxjQUFjLEVBQy9CLGVBQWUsSUFBSSxnQkFBZ0IsRUFJbkMsZUFBZSxJQUFJLGdCQUFnQixFQUNuQyxnQkFBZ0IsSUFBSSxpQkFBaUIsRUFDckMsaUJBQWlCLElBQUksa0JBQWtCLEVBQ3ZDLHNCQUFzQixJQUFJLHVCQUF1QixFQUNqRCx1QkFBdUIsSUFBSSx3QkFBd0IsRUFDbkQsZUFBZSxJQUFJLGdCQUFnQixFQUNuQyxZQUFZLElBQUksYUFBYSxFQUM3QixtQkFBbUIsSUFBSSxvQkFBb0IsRUFDM0MsYUFBYSxJQUFJLGNBQWMsRUFDL0Isd0JBQXdCLElBQUkseUJBQXlCLEVBQ3JELGtCQUFrQixJQUFJLG1CQUFtQixFQUd6QyxTQUFTLElBQUksVUFBVSxFQUN2QixlQUFlLElBQUksZ0JBQWdCLEVBQ25DLEVBQUUsSUFBSSxHQUFHLEVBQ1QsQ0FBQyxJQUFJLEVBQUUsRUFDUCxDQUFDLElBQUksRUFBRSxFQUNQLENBQUMsSUFBSSxFQUFFLEVBQ1AsRUFBRSxJQUFJLEdBQUcsRUFDVCxFQUFFLElBQUksR0FBRyxFQUNULEVBQUUsSUFBSSxHQUFHLEVBQ1QsRUFBRSxJQUFJLEdBQUcsRUFDVCxDQUFDLElBQUksRUFBRSxFQUNQLENBQUMsSUFBSSxFQUFFLEVBQ1AsQ0FBQyxJQUFJLEVBQUUsRUFDUCxDQUFDLElBQUksRUFBRSxFQUNQLEVBQUUsSUFBSSxHQUFHLEVBQ1QsQ0FBQyxJQUFJLEVBQUUsRUFDUCxDQUFDLElBQUksRUFBRSxFQUNQLENBQUMsSUFBSSxFQUFFLEVBQ1AsRUFBRSxJQUFJLEdBQUcsRUFDVCxFQUFFLElBQUksR0FBRyxFQUNULEVBQUUsSUFBSSxHQUFHLEVBQ1QsRUFBRSxJQUFJLEdBQUcsRUFDVCxFQUFFLElBQUksR0FBRyxFQUNULEVBQUUsSUFBSSxHQUFHLEVBQ1QsRUFBRSxJQUFJLEdBQUcsRUFDVCxFQUFFLElBQUksR0FBRyxFQUNULEVBQUUsSUFBSSxHQUFHLEVBQ1QsR0FBRyxJQUFJLElBQUksRUFDWCxHQUFHLElBQUksSUFBSSxFQUNYLEdBQUcsSUFBSSxJQUFJLEVBQ1gsR0FBRyxJQUFJLElBQUksRUFDWCxHQUFHLElBQUksSUFBSSxFQUNYLEVBQUUsSUFBSSxHQUFHLEVBQ1QsRUFBRSxJQUFJLEdBQUcsRUFDVCxFQUFFLElBQUksR0FBRyxFQUNULEVBQUUsSUFBSSxHQUFHLEVBQ1QsRUFBRSxJQUFJLEdBQUcsRUFDVCxFQUFFLElBQUksR0FBRyxFQUNULEVBQUUsSUFBSSxHQUFHLEVBQ1QsRUFBRSxJQUFJLEdBQUcsRUFDVCxFQUFFLElBQUksR0FBRyxFQUNULEVBQUUsSUFBSSxHQUFHLEVBQ1QsRUFBRSxJQUFJLEdBQUcsRUFDVCxFQUFFLElBQUksR0FBRyxFQUNULEVBQUUsSUFBSSxHQUFHLEVBQ1QsRUFBRSxJQUFJLEdBQUcsRUFDVCxFQUFFLElBQUksR0FBRyxFQUNULEVBQUUsSUFBSSxHQUFHLEVBQ1QsQ0FBQyxJQUFJLEVBQUUsRUFDUCxDQUFDLElBQUksRUFBRSxFQUNQLEVBQUUsSUFBSSxHQUFHLEVBQ1QsQ0FBQyxJQUFJLEVBQUUsRUFDUCxFQUFFLElBQUksR0FBRyxFQUNULENBQUMsSUFBSSxFQUFFLEVBQ1AsQ0FBQyxJQUFJLEVBQUUsRUFDUCxFQUFFLElBQUksR0FBRyxFQUNULEVBQUUsSUFBSSxHQUFHLEVBQ1QsRUFBRSxJQUFJLEdBQUcsRUFDVCxFQUFFLElBQUksR0FBRyxFQUNULENBQUMsSUFBSSxFQUFFLEVBQ1AsQ0FBQyxJQUFJLEVBQUUsRUFDUCxFQUFFLElBQUksR0FBRyxFQUNULEVBQUUsSUFBSSxHQUFHLEVBQ1QsRUFBRSxJQUFJLEdBQUcsRUFJVCxZQUFZLElBQUksYUFBYSxFQUM3QixFQUFFLElBQUksR0FBRyxFQUNULEdBQUcsSUFBSSxJQUFJLEVBQ1gsR0FBRyxJQUFJLElBQUksRUFDWCxHQUFHLElBQUksSUFBSSxFQUNYLEdBQUcsSUFBSSxJQUFJLEVBQ1gsR0FBRyxJQUFJLElBQUksRUFDWCxHQUFHLElBQUksSUFBSSxFQUNYLEdBQUcsSUFBSSxJQUFJLEVBQ1gsR0FBRyxJQUFJLElBQUksRUFDWCxHQUFHLElBQUksSUFBSSxFQUNYLEdBQUcsSUFBSSxHQUFHLEVBQ1YsRUFBRSxJQUFJLEdBQUcsR0FHVixNQUFNLGlCQUFpQixDQUFDO0FBRXpCLE9BQU8sRUFDTCxZQUFZLElBQUksYUFBYSxFQUM3QixhQUFhLElBQUksY0FBYyxFQUMvQixXQUFXLElBQUksWUFBWSxFQUMzQixtQkFBbUIsSUFBSSxvQkFBb0IsR0FDNUMsTUFBTSw2QkFBNkIsQ0FBQztBQUNyQyxPQUFPLEVBQ0wsMkJBQTJCLElBQUksNEJBQTRCLEVBQzNELDRCQUE0QixJQUFJLDZCQUE2QixFQUM3RCw2QkFBNkIsSUFBSSw4QkFBOEIsRUFDL0QsMEJBQTBCLElBQUksMkJBQTJCLEVBQ3pELGtDQUFrQyxJQUFJLG1DQUFtQyxHQUMxRSxNQUFNLHVCQUF1QixDQUFDO0FBQy9CLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuLy8gY2xhbmctZm9ybWF0IG9mZlxuZXhwb3J0IHtcbiAgZGVmaW5lQ29tcG9uZW50IGFzIMm1ZGVmaW5lQ29tcG9uZW50LFxuICBkZWZpbmVEaXJlY3RpdmUgYXMgybVkZWZpbmVEaXJlY3RpdmUsXG4gIGRlZmluZVBpcGUgYXMgybVkZWZpbmVQaXBlLFxuICBkZWZpbmVOZ01vZHVsZSBhcyDJtWRlZmluZU5nTW9kdWxlLFxuICBkZXRlY3RDaGFuZ2VzIGFzIMm1ZGV0ZWN0Q2hhbmdlcyxcbiAgcmVuZGVyQ29tcG9uZW50IGFzIMm1cmVuZGVyQ29tcG9uZW50LFxuICBDb21wb25lbnRUeXBlIGFzIMm1Q29tcG9uZW50VHlwZSxcbiAgRGlyZWN0aXZlVHlwZSBhcyDJtURpcmVjdGl2ZVR5cGUsXG4gIFJlbmRlckZsYWdzIGFzIMm1UmVuZGVyRmxhZ3MsXG4gIGRpcmVjdGl2ZUluamVjdCBhcyDJtWRpcmVjdGl2ZUluamVjdCxcbiAgaW5qZWN0RWxlbWVudFJlZiBhcyDJtWluamVjdEVsZW1lbnRSZWYsXG4gIGluamVjdFRlbXBsYXRlUmVmIGFzIMm1aW5qZWN0VGVtcGxhdGVSZWYsXG4gIGluamVjdFZpZXdDb250YWluZXJSZWYgYXMgybVpbmplY3RWaWV3Q29udGFpbmVyUmVmLFxuICBpbmplY3RDaGFuZ2VEZXRlY3RvclJlZiBhcyDJtWluamVjdENoYW5nZURldGVjdG9yUmVmLFxuICBpbmplY3RBdHRyaWJ1dGUgYXMgybVpbmplY3RBdHRyaWJ1dGUsXG4gIGdldEZhY3RvcnlPZiBhcyDJtWdldEZhY3RvcnlPZixcbiAgZ2V0SW5oZXJpdGVkRmFjdG9yeSBhcyDJtWdldEluaGVyaXRlZEZhY3RvcnksXG4gIFB1YmxpY0ZlYXR1cmUgYXMgybVQdWJsaWNGZWF0dXJlLFxuICBJbmhlcml0RGVmaW5pdGlvbkZlYXR1cmUgYXMgybVJbmhlcml0RGVmaW5pdGlvbkZlYXR1cmUsXG4gIE5nT25DaGFuZ2VzRmVhdHVyZSBhcyDJtU5nT25DaGFuZ2VzRmVhdHVyZSxcbiAgTmdNb2R1bGVUeXBlIGFzIMm1TmdNb2R1bGVUeXBlLFxuICBDc3NTZWxlY3Rvckxpc3QgYXMgybVDc3NTZWxlY3Rvckxpc3QsXG4gIG1hcmtEaXJ0eSBhcyDJtW1hcmtEaXJ0eSxcbiAgTmdNb2R1bGVGYWN0b3J5IGFzIMm1TmdNb2R1bGVGYWN0b3J5LFxuICBOQyBhcyDJtU5DLFxuICBDIGFzIMm1QyxcbiAgeCBhcyDJtXgsXG4gIEUgYXMgybVFLFxuICBOSCBhcyDJtU5ILFxuICBOTSBhcyDJtU5NLFxuICBOUyBhcyDJtU5TLFxuICBFZSBhcyDJtUVlLFxuICBMIGFzIMm1TCxcbiAgVCBhcyDJtVQsXG4gIFYgYXMgybVWLFxuICBRIGFzIMm1USxcbiAgUXIgYXMgybVRcixcbiAgZCBhcyDJtWQsXG4gIFAgYXMgybVQLFxuICBiIGFzIMm1YixcbiAgaTEgYXMgybVpMSxcbiAgaTIgYXMgybVpMixcbiAgaTMgYXMgybVpMyxcbiAgaTQgYXMgybVpNCxcbiAgaTUgYXMgybVpNSxcbiAgaTYgYXMgybVpNixcbiAgaTcgYXMgybVpNyxcbiAgaTggYXMgybVpOCxcbiAgaVYgYXMgybVpVixcbiAgcGIxIGFzIMm1cGIxLFxuICBwYjIgYXMgybVwYjIsXG4gIHBiMyBhcyDJtXBiMyxcbiAgcGI0IGFzIMm1cGI0LFxuICBwYlYgYXMgybVwYlYsXG4gIGYwIGFzIMm1ZjAsXG4gIGYxIGFzIMm1ZjEsXG4gIGYyIGFzIMm1ZjIsXG4gIGYzIGFzIMm1ZjMsXG4gIGY0IGFzIMm1ZjQsXG4gIGY1IGFzIMm1ZjUsXG4gIGY2IGFzIMm1ZjYsXG4gIGY3IGFzIMm1ZjcsXG4gIGY4IGFzIMm1ZjgsXG4gIGZWIGFzIMm1ZlYsXG4gIGdWIGFzIMm1Z1YsXG4gIHJWIGFzIMm1clYsXG4gIGNSIGFzIMm1Y1IsXG4gIGNyIGFzIMm1Y3IsXG4gIHFSIGFzIMm1cVIsXG4gIHFsIGFzIMm1cWwsXG4gIGUgYXMgybVlLFxuICBwIGFzIMm1cCxcbiAgcEQgYXMgybVwRCxcbiAgciBhcyDJtXIsXG4gIHJTIGFzIMm1clMsXG4gIGEgYXMgybVhLFxuICBzIGFzIMm1cyxcbiAgc20gYXMgybVzbSxcbiAgc3AgYXMgybVzcCxcbiAgc2EgYXMgybVzYSxcbiAgY3AgYXMgybVjcCxcbiAgdCBhcyDJtXQsXG4gIHYgYXMgybV2LFxuICBzdCBhcyDJtXN0LFxuICBsZCBhcyDJtWxkLFxuICBQcCBhcyDJtVBwLFxuICBDb21wb25lbnREZWYgYXMgybVDb21wb25lbnREZWYsXG4gIERpcmVjdGl2ZURlZiBhcyDJtURpcmVjdGl2ZURlZixcbiAgUGlwZURlZiBhcyDJtVBpcGVEZWYsXG4gIHdoZW5SZW5kZXJlZCBhcyDJtXdoZW5SZW5kZXJlZCxcbiAgaUEgYXMgybVpQSxcbiAgaUVNIGFzIMm1aUVNLFxuICBpSTEgYXMgybVpSTEsXG4gIGlJMiBhcyDJtWlJMixcbiAgaUkzIGFzIMm1aUkzLFxuICBpSTQgYXMgybVpSTQsXG4gIGlJNSBhcyDJtWlJNSxcbiAgaUk2IGFzIMm1aUk2LFxuICBpSTcgYXMgybVpSTcsXG4gIGlJOCBhcyDJtWlJOCxcbiAgaUlWIGFzIMm1SVYsXG4gIGlNIGFzIMm1aU0sXG4gIEkxOG5JbnN0cnVjdGlvbiBhcyDJtUkxOG5JbnN0cnVjdGlvbixcbiAgSTE4bkV4cEluc3RydWN0aW9uIGFzIMm1STE4bkV4cEluc3RydWN0aW9uLFxufSBmcm9tICcuL3JlbmRlcjMvaW5kZXgnO1xuZXhwb3J0IHtOZ01vZHVsZURlZiBhcyDJtU5nTW9kdWxlRGVmfSBmcm9tICcuL21ldGFkYXRhL25nX21vZHVsZSc7XG5leHBvcnQge1xuICBzYW5pdGl6ZUh0bWwgYXMgybVzYW5pdGl6ZUh0bWwsXG4gIHNhbml0aXplU3R5bGUgYXMgybVzYW5pdGl6ZVN0eWxlLFxuICBzYW5pdGl6ZVVybCBhcyDJtXNhbml0aXplVXJsLFxuICBzYW5pdGl6ZVJlc291cmNlVXJsIGFzIMm1c2FuaXRpemVSZXNvdXJjZVVybCxcbn0gZnJvbSAnLi9zYW5pdGl6YXRpb24vc2FuaXRpemF0aW9uJztcbmV4cG9ydCB7XG4gIGJ5cGFzc1Nhbml0aXphdGlvblRydXN0SHRtbCBhcyDJtWJ5cGFzc1Nhbml0aXphdGlvblRydXN0SHRtbCxcbiAgYnlwYXNzU2FuaXRpemF0aW9uVHJ1c3RTdHlsZSBhcyDJtWJ5cGFzc1Nhbml0aXphdGlvblRydXN0U3R5bGUsXG4gIGJ5cGFzc1Nhbml0aXphdGlvblRydXN0U2NyaXB0IGFzIMm1YnlwYXNzU2FuaXRpemF0aW9uVHJ1c3RTY3JpcHQsXG4gIGJ5cGFzc1Nhbml0aXphdGlvblRydXN0VXJsIGFzIMm1YnlwYXNzU2FuaXRpemF0aW9uVHJ1c3RVcmwsXG4gIGJ5cGFzc1Nhbml0aXphdGlvblRydXN0UmVzb3VyY2VVcmwgYXMgybVieXBhc3NTYW5pdGl6YXRpb25UcnVzdFJlc291cmNlVXJsLFxufSBmcm9tICcuL3Nhbml0aXphdGlvbi9ieXBhc3MnO1xuLy8gY2xhbmctZm9ybWF0IG9uXG4iXX0=