/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { defineInjectable, defineInjector } from './di/defs';
import { inject, injectArgs } from './di/injector';
import * as ivyOn from './ivy_switch_on';
import { ReflectionCapabilities } from './reflection/reflection_capabilities';
import { getClosureSafeProperty } from './util/property';
function noop() { }
const R3_COMPILE_COMPONENT__POST_NGCC__ = ivyOn.R3_COMPILE_COMPONENT;
const R3_COMPILE_DIRECTIVE__POST_NGCC__ = ivyOn.R3_COMPILE_DIRECTIVE;
const R3_COMPILE_INJECTABLE__POST_NGCC__ = ivyOn.R3_COMPILE_INJECTABLE;
const R3_COMPILE_NGMODULE__POST_NGCC__ = ivyOn.R3_COMPILE_NGMODULE;
const R3_COMPILE_PIPE__POST_NGCC__ = ivyOn.R3_COMPILE_PIPE;
const ivyEnable__POST_NGCC__ = ivyOn.ivyEnabled;
const compileComponentQueue = [];
const compileDirectiveQueue = [];
const compileInjectableQueue = [];
const compileNgModuleQueue = [];
const compilePipeQueue = [];
const R3_COMPILE_COMPONENT__PRE_NGCC__ = noop;
const R3_COMPILE_DIRECTIVE__PRE_NGCC__ = noop;
const R3_COMPILE_INJECTABLE__PRE_NGCC__ = preR3InjectableCompile;
const R3_COMPILE_NGMODULE__PRE_NGCC__ = preR3NgModuleCompile;
const R3_COMPILE_PIPE__PRE_NGCC__ = noop;
const ivyEnable__PRE_NGCC__ = false;
export const ivyEnabled = ivyEnable__PRE_NGCC__;
export let R3_COMPILE_COMPONENT = R3_COMPILE_COMPONENT__PRE_NGCC__;
export let R3_COMPILE_DIRECTIVE = R3_COMPILE_DIRECTIVE__PRE_NGCC__;
export let R3_COMPILE_INJECTABLE = R3_COMPILE_INJECTABLE__PRE_NGCC__;
export let R3_COMPILE_NGMODULE = R3_COMPILE_NGMODULE__PRE_NGCC__;
export let R3_COMPILE_PIPE = R3_COMPILE_PIPE__PRE_NGCC__;
////////////////////////////////////////////////////////////
// Glue code which should be removed after Ivy is default //
////////////////////////////////////////////////////////////
function preR3NgModuleCompile(moduleType, metadata) {
    let imports = (metadata && metadata.imports) || [];
    if (metadata && metadata.exports) {
        imports = [...imports, metadata.exports];
    }
    moduleType.ngInjectorDef = defineInjector({
        factory: convertInjectableProviderToFactory(moduleType, { useClass: moduleType }),
        providers: metadata && metadata.providers,
        imports: imports,
    });
}
const GET_PROPERTY_NAME = {};
const USE_VALUE = getClosureSafeProperty({ provide: String, useValue: GET_PROPERTY_NAME }, GET_PROPERTY_NAME);
const EMPTY_ARRAY = [];
function convertInjectableProviderToFactory(type, provider) {
    if (!provider) {
        const reflectionCapabilities = new ReflectionCapabilities();
        const deps = reflectionCapabilities.parameters(type);
        // TODO - convert to flags.
        return () => new type(...injectArgs(deps));
    }
    if (USE_VALUE in provider) {
        const valueProvider = provider;
        return () => valueProvider.useValue;
    }
    else if (provider.useExisting) {
        const existingProvider = provider;
        return () => inject(existingProvider.useExisting);
    }
    else if (provider.useFactory) {
        const factoryProvider = provider;
        return () => factoryProvider.useFactory(...injectArgs(factoryProvider.deps || EMPTY_ARRAY));
    }
    else if (provider.useClass) {
        const classProvider = provider;
        let deps = provider.deps;
        if (!deps) {
            const reflectionCapabilities = new ReflectionCapabilities();
            deps = reflectionCapabilities.parameters(type);
        }
        return () => new classProvider.useClass(...injectArgs(deps));
    }
    else {
        let deps = provider.deps;
        if (!deps) {
            const reflectionCapabilities = new ReflectionCapabilities();
            deps = reflectionCapabilities.parameters(type);
        }
        return () => new type(...injectArgs(deps));
    }
}
/**
 * Supports @Injectable() in JIT mode for Render2.
 */
function preR3InjectableCompile(injectableType, options) {
    if (options && options.providedIn !== undefined && injectableType.ngInjectableDef === undefined) {
        injectableType.ngInjectableDef = defineInjectable({
            providedIn: options.providedIn,
            factory: convertInjectableProviderToFactory(injectableType, options),
        });
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXZ5X3N3aXRjaF9sZWdhY3kuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9pdnlfc3dpdGNoX2xlZ2FjeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFFSCxPQUFPLEVBQStCLGdCQUFnQixFQUFFLGNBQWMsRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUV6RixPQUFPLEVBQUMsTUFBTSxFQUFFLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUVqRCxPQUFPLEtBQUssS0FBSyxNQUFNLGlCQUFpQixDQUFDO0FBRXpDLE9BQU8sRUFBQyxzQkFBc0IsRUFBQyxNQUFNLHNDQUFzQyxDQUFDO0FBRTVFLE9BQU8sRUFBQyxzQkFBc0IsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBRXZELGtCQUFpQixDQUFDO0FBSWxCLE1BQU0saUNBQWlDLEdBQUcsS0FBSyxDQUFDLG9CQUFvQixDQUFDO0FBQ3JFLE1BQU0saUNBQWlDLEdBQUcsS0FBSyxDQUFDLG9CQUFvQixDQUFDO0FBQ3JFLE1BQU0sa0NBQWtDLEdBQUcsS0FBSyxDQUFDLHFCQUFxQixDQUFDO0FBQ3ZFLE1BQU0sZ0NBQWdDLEdBQUcsS0FBSyxDQUFDLG1CQUFtQixDQUFDO0FBQ25FLE1BQU0sNEJBQTRCLEdBQUcsS0FBSyxDQUFDLGVBQWUsQ0FBQztBQUMzRCxNQUFNLHNCQUFzQixHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUM7QUFFaEQsTUFBTSxxQkFBcUIsR0FBVSxFQUFFLENBQUM7QUFDeEMsTUFBTSxxQkFBcUIsR0FBVSxFQUFFLENBQUM7QUFDeEMsTUFBTSxzQkFBc0IsR0FBVSxFQUFFLENBQUM7QUFDekMsTUFBTSxvQkFBb0IsR0FBVSxFQUFFLENBQUM7QUFDdkMsTUFBTSxnQkFBZ0IsR0FBVSxFQUFFLENBQUM7QUFFbkMsTUFBTSxnQ0FBZ0MsR0FBc0IsSUFBSSxDQUFDO0FBQ2pFLE1BQU0sZ0NBQWdD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SSxDQUFDO1FBQ3RELElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDVCxNQUFNLHNCQUFzQixHQUFHLElBQUksc0JBQXNCLEVBQUUsQ0FBQztZQUM1RCxJQUFJLEdBQUcsc0JBQXNCLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2hEO1FBQ0QsT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLGFBQWEsQ0FBQyxRQUFRLENBQUMsR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztLQUM5RDtTQUFNO1FBQ0wsSUFBSSxJQUFJLEdBQUksUUFBb0MsQ0FBQyxJQUFJLENBQUM7UUFDdEQsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNULE1BQU0sc0JBQXNCLEdBQUcsSUFBSSxzQkFBc0IsRUFBRSxDQUFDO1lBQzVELElBQUksR0FBRyxzQkFBc0IsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDaEQ7UUFDRCxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsVUFBVSxDQUFDLElBQU0sQ0FBQyxDQUFDLENBQUM7S0FDOUM7QUFDSCxDQUFDO0FBRUQ7O0dBRUc7QUFDSCxnQ0FDSSxjQUFtQyxFQUNuQyxPQUFxRTtJQUN2RSxJQUFJLE9BQU8sSUFBSSxPQUFPLENBQUMsVUFBVSxLQUFLLFNBQVMsSUFBSSxjQUFjLENBQUMsZUFBZSxLQUFLLFNBQVMsRUFBRTtRQUMvRixjQUFjLENBQUMsZUFBZSxHQUFHLGdCQUFnQixDQUFDO1lBQ2hELFVBQVUsRUFBRSxPQUFPLENBQUMsVUFBVTtZQUM5QixPQUFPLEVBQUUsa0NBQWtDLENBQUMsY0FBYyxFQUFFLE9BQU8sQ0FBQztTQUNyRSxDQUFDLENBQUM7S0FDSjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7SW5qZWN0YWJsZVR5cGUsIEluamVjdG9yVHlwZSwgZGVmaW5lSW5qZWN0YWJsZSwgZGVmaW5lSW5qZWN0b3J9IGZyb20gJy4vZGkvZGVmcyc7XG5pbXBvcnQge0luamVjdGFibGVQcm92aWRlcn0gZnJvbSAnLi9kaS9pbmplY3RhYmxlJztcbmltcG9ydCB7aW5qZWN0LCBpbmplY3RBcmdzfSBmcm9tICcuL2RpL2luamVjdG9yJztcbmltcG9ydCB7Q2xhc3NTYW5zUHJvdmlkZXIsIENvbnN0cnVjdG9yU2Fuc1Byb3ZpZGVyLCBFeGlzdGluZ1NhbnNQcm92aWRlciwgRmFjdG9yeVNhbnNQcm92aWRlciwgU3RhdGljQ2xhc3NTYW5zUHJvdmlkZXIsIFZhbHVlUHJvdmlkZXIsIFZhbHVlU2Fuc1Byb3ZpZGVyfSBmcm9tICcuL2RpL3Byb3ZpZGVyJztcbmltcG9ydCAqIGFzIGl2eU9uIGZyb20gJy4vaXZ5X3N3aXRjaF9vbic7XG5pbXBvcnQge05nTW9kdWxlfSBmcm9tICcuL21ldGFkYXRhJztcbmltcG9ydCB7UmVmbGVjdGlvbkNhcGFiaWxpdGllc30gZnJvbSAnLi9yZWZsZWN0aW9uL3JlZmxlY3Rpb25fY2FwYWJpbGl0aWVzJztcbmltcG9ydCB7VHlwZX0gZnJvbSAnLi90eXBlJztcbmltcG9ydCB7Z2V0Q2xvc3VyZVNhZmVQcm9wZXJ0eX0gZnJvbSAnLi91dGlsL3Byb3BlcnR5JztcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGlyZWN0aXZlQ29tcGlsZXIgeyAodHlwZTogYW55LCBtZXRhOiBhbnkpOiB2b2lkOyB9XG5cbmNvbnN0IFIzX0NPTVBJTEVfQ09NUE9ORU5UX19QT1NUX05HQ0NfXyA9IGl2eU9uLlIzX0NPTVBJTEVfQ09NUE9ORU5UO1xuY29uc3QgUjNfQ09NUElMRV9ESVJFQ1RJVkVfX1BPU1RfTkdDQ19fID0gaXZ5T24uUjNfQ09NUElMRV9ESVJFQ1RJVkU7XG5jb25zdCBSM19DT01QSUxFX0lOSkVDVEFCTEVfX1BPU1RfTkdDQ19fID0gaXZ5T24uUjNfQ09NUElMRV9JTkpFQ1RBQkxFO1xuY29uc3QgUjNfQ09NUElMRV9OR01PRFVMRV9fUE9TVF9OR0NDX18gPSBpdnlPbi5SM19DT01QSUxFX05HTU9EVUxFO1xuY29uc3QgUjNfQ09NUElMRV9QSVBFX19QT1NUX05HQ0NfXyA9IGl2eU9uLlIzX0NPTVBJTEVfUElQRTtcbmNvbnN0IGl2eUVuYWJsZV9fUE9TVF9OR0NDX18gPSBpdnlPbi5pdnlFbmFibGVkO1xuXG5jb25zdCBjb21waWxlQ29tcG9uZW50UXVldWU6IGFueVtdID0gW107XG5jb25zdCBjb21waWxlRGlyZWN0aXZlUXVldWU6IGFueVtdID0gW107XG5jb25zdCBjb21waWxlSW5qZWN0YWJsZVF1ZXVlOiBhbnlbXSA9IFtdO1xuY29uc3QgY29tcGlsZU5nTW9kdWxlUXVldWU6IGFueVtdID0gW107XG5jb25zdCBjb21waWxlUGlwZVF1ZXVlOiBhbnlbXSA9IFtdO1xuXG5jb25zdCBSM19DT01QSUxFX0NPTVBPTkVOVF9fUFJFX05HQ0NfXzogRGlyZWN0aXZlQ29tcGlsZXIgPSBub29wO1xuY29uc3QgUjNfQ09NUElMRV9ESVJFQ1RJVkVfX1BSRV9OR0NDX186IERpcmVjdGl2ZUNvbXBpbGVyID0gbm9vcDtcbmNvbnN0IFIzX0NPTVBJTEVfSU5KRUNUQUJMRV9fUFJFX05HQ0NfXzogRGlyZWN0aXZlQ29tcGlsZXIgPSBwcmVSM0luamVjdGFibGVDb21waWxlO1xuY29uc3QgUjNfQ09NUElMRV9OR01PRFVMRV9fUFJFX05HQ0NfXzogRGlyZWN0aXZlQ29tcGlsZXIgPSBwcmVSM05nTW9kdWxlQ29tcGlsZTtcbmNvbnN0IFIzX0NPTVBJTEVfUElQRV9fUFJFX05HQ0NfXzogRGlyZWN0aXZlQ29tcGlsZXIgPSBub29wO1xuY29uc3QgaXZ5RW5hYmxlX19QUkVfTkdDQ19fID0gZmFsc2U7XG5cbmV4cG9ydCBjb25zdCBpdnlFbmFibGVkID0gaXZ5RW5hYmxlX19QUkVfTkdDQ19fO1xuZXhwb3J0IGxldCBSM19DT01QSUxFX0NPTVBPTkVOVDogRGlyZWN0aXZlQ29tcGlsZXIgPSBSM19DT01QSUxFX0NPTVBPTkVOVF9fUFJFX05HQ0NfXztcbmV4cG9ydCBsZXQgUjNfQ09NUElMRV9ESVJFQ1RJVkU6IERpcmVjdGl2ZUNvbXBpbGVyID0gUjNfQ09NUElMRV9ESVJFQ1RJVkVfX1BSRV9OR0NDX187XG5leHBvcnQgbGV0IFIzX0NPTVBJTEVfSU5KRUNUQUJMRTogRGlyZWN0aXZlQ29tcGlsZXIgPSBSM19DT01QSUxFX0lOSkVDVEFCTEVfX1BSRV9OR0NDX187XG5leHBvcnQgbGV0IFIzX0NPTVBJTEVfTkdNT0RVTEU6IERpcmVjdGl2ZUNvbXBpbGVyID0gUjNfQ09NUElMRV9OR01PRFVMRV9fUFJFX05HQ0NfXztcbmV4cG9ydCBsZXQgUjNfQ09NUElMRV9QSVBFOiBEaXJlY3RpdmVDb21waWxlciA9IFIzX0NPTVBJTEVfUElQRV9fUFJFX05HQ0NfXztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIEdsdWUgY29kZSB3aGljaCBzaG91bGQgYmUgcmVtb3ZlZCBhZnRlciBJdnkgaXMgZGVmYXVsdCAvL1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbmZ1bmN0aW9uIHByZVIzTmdNb2R1bGVDb21waWxlKG1vZHVsZVR5cGU6IEluamVjdG9yVHlwZTxhbnk+LCBtZXRhZGF0YTogTmdNb2R1bGUpOiB2b2lkIHtcbiAgbGV0IGltcG9ydHMgPSAobWV0YWRhdGEgJiYgbWV0YWRhdGEuaW1wb3J0cykgfHwgW107XG4gIGlmIChtZXRhZGF0YSAmJiBtZXRhZGF0YS5leHBvcnRzKSB7XG4gICAgaW1wb3J0cyA9IFsuLi5pbXBvcnRzLCBtZXRhZGF0YS5leHBvcnRzXTtcbiAgfVxuXG4gIG1vZHVsZVR5cGUubmdJbmplY3RvckRlZiA9IGRlZmluZUluamVjdG9yKHtcbiAgICBmYWN0b3J5OiBjb252ZXJ0SW5qZWN0YWJsZVByb3ZpZGVyVG9GYWN0b3J5KG1vZHVsZVR5cGUsIHt1c2VDbGFzczogbW9kdWxlVHlwZX0pLFxuICAgIHByb3ZpZGVyczogbWV0YWRhdGEgJiYgbWV0YWRhdGEucHJvdmlkZXJzLFxuICAgIGltcG9ydHM6IGltcG9ydHMsXG4gIH0pO1xufVxuXG5jb25zdCBHRVRfUFJPUEVSVFlfTkFNRSA9IHt9IGFzIGFueTtcbmNvbnN0IFVTRV9WQUxVRSA9IGdldENsb3N1cmVTYWZlUHJvcGVydHk8VmFsdWVQcm92aWRlcj4oXG4gICAge3Byb3ZpZGU6IFN0cmluZywgdXNlVmFsdWU6IEdFVF9QUk9QRVJUWV9OQU1FfSwgR0VUX1BST1BFUlRZX05BTUUpO1xuY29uc3QgRU1QVFlfQVJSQVk6IGFueVtdID0gW107XG5cbmZ1bmN0aW9uIGNvbnZlcnRJbmplY3RhYmxlUHJvdmlkZXJUb0ZhY3RvcnkodHlwZTogVHlwZTxhbnk+LCBwcm92aWRlcj86IEluamVjdGFibGVQcm92aWRlcik6ICgpID0+XG4gICAgYW55IHtcbiAgaWYgKCFwcm92aWRlcikge1xuICAgIGNvbnN0IHJlZmxlY3Rpb25DYXBhYmlsaXRpZXMgPSBuZXcgUmVmbGVjdGlvbkNhcGFiaWxpdGllcygpO1xuICAgIGNvbnN0IGRlcHMgPSByZWZsZWN0aW9uQ2FwYWJpbGl0aWVzLnBhcmFtZXRlcnModHlwZSk7XG4gICAgLy8gVE9ETyAtIGNvbnZlcnQgdG8gZmxhZ3MuXG4gICAgcmV0dXJuICgpID0+IG5ldyB0eXBlKC4uLmluamVjdEFyZ3MoZGVwcyBhcyBhbnlbXSkpO1xuICB9XG5cbiAgaWYgKFVTRV9WQUxVRSBpbiBwcm92aWRlcikge1xuICAgIGNvbnN0IHZhbHVlUHJvdmlkZXIgPSAocHJvdmlkZXIgYXMgVmFsdWVTYW5zUHJvdmlkZXIpO1xuICAgIHJldHVybiAoKSA9PiB2YWx1ZVByb3ZpZGVyLnVzZVZhbHVlO1xuICB9IGVsc2UgaWYgKChwcm92aWRlciBhcyBFeGlzdGluZ1NhbnNQcm92aWRlcikudXNlRXhpc3RpbmcpIHtcbiAgICBjb25zdCBleGlzdGluZ1Byb3ZpZGVyID0gKHByb3ZpZGVyIGFzIEV4aXN0aW5nU2Fuc1Byb3ZpZGVyKTtcbiAgICByZXR1cm4gKCkgPT4gaW5qZWN0KGV4aXN0aW5nUHJvdmlkZXIudXNlRXhpc3RpbmcpO1xuICB9IGVsc2UgaWYgKChwcm92aWRlciBhcyBGYWN0b3J5U2Fuc1Byb3ZpZGVyKS51c2VGYWN0b3J5KSB7XG4gICAgY29uc3QgZmFjdG9yeVByb3ZpZGVyID0gKHByb3ZpZGVyIGFzIEZhY3RvcnlTYW5zUHJvdmlkZXIpO1xuICAgIHJldHVybiAoKSA9PiBmYWN0b3J5UHJvdmlkZXIudXNlRmFjdG9yeSguLi5pbmplY3RBcmdzKGZhY3RvcnlQcm92aWRlci5kZXBzIHx8IEVNUFRZX0FSUkFZKSk7XG4gIH0gZWxzZSBpZiAoKHByb3ZpZGVyIGFzIFN0YXRpY0NsYXNzU2Fuc1Byb3ZpZGVyIHwgQ2xhc3NTYW5zUHJvdmlkZXIpLnVzZUNsYXNzKSB7XG4gICAgY29uc3QgY2xhc3NQcm92aWRlciA9IChwcm92aWRlciBhcyBTdGF0aWNDbGFzc1NhbnNQcm92aWRlciB8IENsYXNzU2Fuc1Byb3ZpZGVyKTtcbiAgICBsZXQgZGVwcyA9IChwcm92aWRlciBhcyBTdGF0aWNDbGFzc1NhbnNQcm92aWRlcikuZGVwcztcbiAgICBpZiAoIWRlcHMpIHtcbiAgICAgIGNvbnN0IHJlZmxlY3Rpb25DYXBhYmlsaXRpZXMgPSBuZXcgUmVmbGVjdGlvbkNhcGFiaWxpdGllcygpO1xuICAgICAgZGVwcyA9IHJlZmxlY3Rpb25DYXBhYmlsaXRpZXMucGFyYW1ldGVycyh0eXBlKTtcbiAgICB9XG4gICAgcmV0dXJuICgpID0+IG5ldyBjbGFzc1Byb3ZpZGVyLnVzZUNsYXNzKC4uLmluamVjdEFyZ3MoZGVwcykpO1xuICB9IGVsc2Uge1xuICAgIGxldCBkZXBzID0gKHByb3ZpZGVyIGFzIENvbnN0cnVjdG9yU2Fuc1Byb3ZpZGVyKS5kZXBzO1xuICAgIGlmICghZGVwcykge1xuICAgICAgY29uc3QgcmVmbGVjdGlvbkNhcGFiaWxpdGllcyA9IG5ldyBSZWZsZWN0aW9uQ2FwYWJpbGl0aWVzKCk7XG4gICAgICBkZXBzID0gcmVmbGVjdGlvbkNhcGFiaWxpdGllcy5wYXJhbWV0ZXJzKHR5cGUpO1xuICAgIH1cbiAgICByZXR1cm4gKCkgPT4gbmV3IHR5cGUoLi4uaW5qZWN0QXJncyhkZXBzICEpKTtcbiAgfVxufVxuXG4vKipcbiAqIFN1cHBvcnRzIEBJbmplY3RhYmxlKCkgaW4gSklUIG1vZGUgZm9yIFJlbmRlcjIuXG4gKi9cbmZ1bmN0aW9uIHByZVIzSW5qZWN0YWJsZUNvbXBpbGUoXG4gICAgaW5qZWN0YWJsZVR5cGU6IEluamVjdGFibGVUeXBlPGFueT4sXG4gICAgb3B0aW9uczoge3Byb3ZpZGVkSW4/OiBUeXBlPGFueT58ICdyb290JyB8IG51bGx9ICYgSW5qZWN0YWJsZVByb3ZpZGVyKTogdm9pZCB7XG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMucHJvdmlkZWRJbiAhPT0gdW5kZWZpbmVkICYmIGluamVjdGFibGVUeXBlLm5nSW5qZWN0YWJsZURlZiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgaW5qZWN0YWJsZVR5cGUubmdJbmplY3RhYmxlRGVmID0gZGVmaW5lSW5qZWN0YWJsZSh7XG4gICAgICBwcm92aWRlZEluOiBvcHRpb25zLnByb3ZpZGVkSW4sXG4gICAgICBmYWN0b3J5OiBjb252ZXJ0SW5qZWN0YWJsZVByb3ZpZGVyVG9GYWN0b3J5KGluamVjdGFibGVUeXBlLCBvcHRpb25zKSxcbiAgICB9KTtcbiAgfVxufSJdfQ==