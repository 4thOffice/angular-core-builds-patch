/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { DebugRendererFactory2 } from '../view/services';
import { getHostComponent, getInjector, getLocalRefs, loadContext } from './discovery_utils';
import { TVIEW } from './interfaces/view';
/**
 * Adapts the DebugRendererFactory2 to create a DebugRenderer2 specific for IVY.
 *
 * The created DebugRenderer know how to create a Debug Context specific to IVY.
 */
export class Render3DebugRendererFactory2 extends DebugRendererFactory2 {
    createRenderer(element, renderData) {
        const renderer = super.createRenderer(element, renderData);
        renderer.debugContextFactory = (nativeElement) => new Render3DebugContext(nativeElement);
        return renderer;
    }
}
/**
 * Stores context information about view nodes.
 *
 * Used in tests to retrieve information those nodes.
 */
class Render3DebugContext {
    constructor(_nativeNode) {
        this._nativeNode = _nativeNode;
    }
    get nodeIndex() { return loadContext(this._nativeNode).nodeIndex; }
    get view() { return loadContext(this._nativeNode).lViewData; }
    get injector() { return getInjector(this._nativeNode); }
    get component() { return getHostComponent(this._nativeNode); }
    get providerTokens() {
        const lDebugCtx = loadContext(this._nativeNode);
        const lViewData = lDebugCtx.lViewData;
        const tNode = lViewData[TVIEW].data[lDebugCtx.nodeIndex];
        const directivesCount = tNode.flags & 4095 /* DirectiveCountMask */;
        if (directivesCount > 0) {
            const directiveIdxStart = tNode.flags >> 15 /* DirectiveStartingIndexShift */;
            const directiveIdxEnd = directiveIdxStart + directivesCount;
            const viewDirectiveDefs = this.view[TVIEW].data;
            const directiveDefs = viewDirectiveDefs.slice(directiveIdxStart, directiveIdxEnd);
            return directiveDefs.map(directiveDef => directiveDef.type);
        }
        return [];
    }
    get references() { return getLocalRefs(this._nativeNode); }
    // TODO(pk): check previous implementation and re-implement
    get context() { throw new Error('Not implemented in ivy'); }
    // TODO(pk): check previous implementation and re-implement
    get componentRenderElement() { throw new Error('Not implemented in ivy'); }
    // TODO(pk): check previous implementation and re-implement
    get renderNode() { throw new Error('Not implemented in ivy'); }
    // TODO(pk): check previous implementation and re-implement
    logError(console, ...values) { console.error(...values); }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVidWcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9yZW5kZXIzL2RlYnVnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUtILE9BQU8sRUFBaUIscUJBQXFCLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQztBQUV2RSxPQUFPLEVBQUMsZ0JBQWdCLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUczRixPQUFPLEVBQUMsS0FBSyxFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFFeEM7Ozs7R0FJRztBQUNILE1BQU0sT0FBTyw0QkFBNkIsU0FBUSxxQkFBcUI7SUFDckUsY0FBYyxDQUFDLE9BQVksRUFBRSxVQUE4QjtRQUN6RCxNQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxVQUFVLENBQW1CLENBQUM7UUFDN0UsUUFBUSxDQUFDLG1CQUFtQixHQUFHLENBQUMsYUFBa0IsRUFBRSxFQUFFLENBQUMsSUFBSSxtQkFBbUIsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUM5RixPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDO0NBQ0Y7QUFFRDs7OztHQUlHO0FBQ0gsTUFBTSxtQkFBbUI7SUFDdkIsWUFBb0IsV0FBZ0I7UUFBaEIsZ0JBQVcsR0FBWCxXQUFXLENBQUs7SUFBRyxDQUFDO0lBRXhDLElBQUksU0FBUyxLQUFrQixPQUFPLFdBQVcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztJQUVoRixJQUFJLElBQUksS0FBVSxPQUFPLFdBQVcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztJQUVuRSxJQUFJLFFBQVEsS0FBZSxPQUFPLFdBQVcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRWxFLElBQUksU0FBUyxLQUFVLE9BQU8sZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVuRSxJQUFJLGNBQWM7UUFDaEIsTUFBTSxTQUFTLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNoRCxNQUFNLFNBQVMsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDO1FBQ3RDLE1BQU0sS0FBSyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBVSxDQUFDO1FBQ2xFLE1BQU0sZUFBZSxHQUFHLEtBQUssQ0FBQyxLQUFLLGdDQUFnQyxDQUFDO1FBRXBFLElBQUksZUFBZSxHQUFHLENBQUMsRUFBRTtZQUN2QixNQUFNLGlCQUFpQixHQUFHLEtBQUssQ0FBQyxLQUFLLHdDQUEwQyxDQUFDO1lBQ2hGLE1BQU0sZUFBZSxHQUFHLGlCQUFpQixHQUFHLGVBQWUsQ0FBQztZQUM1RCxNQUFNLGlCQUFpQixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ2hELE1BQU0sYUFBYSxHQUNmLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxpQkFBaUIsRUFBRSxlQUFlLENBQXdCLENBQUM7WUFFdkYsT0FBTyxhQUFhLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzdEO1FBRUQsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDO0lBRUQsSUFBSSxVQUFVLEtBQTJCLE9BQU8sWUFBWSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFakYsMkRBQTJEO0lBQzNELElBQUksT0FBTyxLQUFVLE1BQU0sSUFBSSxLQUFLLENBQUMsd0JBQXdCLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFakUsMkRBQTJEO0lBQzNELElBQUksc0JBQXNCLEtBQVUsTUFBTSxJQUFJLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVoRiwyREFBMkQ7SUFDM0QsSUFBSSxVQUFVLEtBQVUsTUFBTSxJQUFJLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVwRSwyREFBMkQ7SUFDM0QsUUFBUSxDQUFDLE9BQWdCLEVBQUUsR0FBRyxNQUFhLElBQVUsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUNqRiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHtJbmplY3Rvcn0gZnJvbSAnLi4vZGkvaW5qZWN0b3InO1xuaW1wb3J0IHtSZW5kZXJlcjIsIFJlbmRlcmVyVHlwZTJ9IGZyb20gJy4uL3JlbmRlci9hcGknO1xuaW1wb3J0IHtEZWJ1Z0NvbnRleHR9IGZyb20gJy4uL3ZpZXcnO1xuaW1wb3J0IHtEZWJ1Z1JlbmRlcmVyMiwgRGVidWdSZW5kZXJlckZhY3RvcnkyfSBmcm9tICcuLi92aWV3L3NlcnZpY2VzJztcblxuaW1wb3J0IHtnZXRIb3N0Q29tcG9uZW50LCBnZXRJbmplY3RvciwgZ2V0TG9jYWxSZWZzLCBsb2FkQ29udGV4dH0gZnJvbSAnLi9kaXNjb3ZlcnlfdXRpbHMnO1xuaW1wb3J0IHtEaXJlY3RpdmVEZWZ9IGZyb20gJy4vaW50ZXJmYWNlcy9kZWZpbml0aW9uJztcbmltcG9ydCB7VE5vZGUsIFROb2RlRmxhZ3N9IGZyb20gJy4vaW50ZXJmYWNlcy9ub2RlJztcbmltcG9ydCB7VFZJRVd9IGZyb20gJy4vaW50ZXJmYWNlcy92aWV3JztcblxuLyoqXG4gKiBBZGFwdHMgdGhlIERlYnVnUmVuZGVyZXJGYWN0b3J5MiB0byBjcmVhdGUgYSBEZWJ1Z1JlbmRlcmVyMiBzcGVjaWZpYyBmb3IgSVZZLlxuICpcbiAqIFRoZSBjcmVhdGVkIERlYnVnUmVuZGVyZXIga25vdyBob3cgdG8gY3JlYXRlIGEgRGVidWcgQ29udGV4dCBzcGVjaWZpYyB0byBJVlkuXG4gKi9cbmV4cG9ydCBjbGFzcyBSZW5kZXIzRGVidWdSZW5kZXJlckZhY3RvcnkyIGV4dGVuZHMgRGVidWdSZW5kZXJlckZhY3RvcnkyIHtcbiAgY3JlYXRlUmVuZGVyZXIoZWxlbWVudDogYW55LCByZW5kZXJEYXRhOiBSZW5kZXJlclR5cGUyfG51bGwpOiBSZW5kZXJlcjIge1xuICAgIGNvbnN0IHJlbmRlcmVyID0gc3VwZXIuY3JlYXRlUmVuZGVyZXIoZWxlbWVudCwgcmVuZGVyRGF0YSkgYXMgRGVidWdSZW5kZXJlcjI7XG4gICAgcmVuZGVyZXIuZGVidWdDb250ZXh0RmFjdG9yeSA9IChuYXRpdmVFbGVtZW50OiBhbnkpID0+IG5ldyBSZW5kZXIzRGVidWdDb250ZXh0KG5hdGl2ZUVsZW1lbnQpO1xuICAgIHJldHVybiByZW5kZXJlcjtcbiAgfVxufVxuXG4vKipcbiAqIFN0b3JlcyBjb250ZXh0IGluZm9ybWF0aW9uIGFib3V0IHZpZXcgbm9kZXMuXG4gKlxuICogVXNlZCBpbiB0ZXN0cyB0byByZXRyaWV2ZSBpbmZvcm1hdGlvbiB0aG9zZSBub2Rlcy5cbiAqL1xuY2xhc3MgUmVuZGVyM0RlYnVnQ29udGV4dCBpbXBsZW1lbnRzIERlYnVnQ29udGV4dCB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX25hdGl2ZU5vZGU6IGFueSkge31cblxuICBnZXQgbm9kZUluZGV4KCk6IG51bWJlcnxudWxsIHsgcmV0dXJuIGxvYWRDb250ZXh0KHRoaXMuX25hdGl2ZU5vZGUpLm5vZGVJbmRleDsgfVxuXG4gIGdldCB2aWV3KCk6IGFueSB7IHJldHVybiBsb2FkQ29udGV4dCh0aGlzLl9uYXRpdmVOb2RlKS5sVmlld0RhdGE7IH1cblxuICBnZXQgaW5qZWN0b3IoKTogSW5qZWN0b3IgeyByZXR1cm4gZ2V0SW5qZWN0b3IodGhpcy5fbmF0aXZlTm9kZSk7IH1cblxuICBnZXQgY29tcG9uZW50KCk6IGFueSB7IHJldHVybiBnZXRIb3N0Q29tcG9uZW50KHRoaXMuX25hdGl2ZU5vZGUpOyB9XG5cbiAgZ2V0IHByb3ZpZGVyVG9rZW5zKCk6IGFueVtdIHtcbiAgICBjb25zdCBsRGVidWdDdHggPSBsb2FkQ29udGV4dCh0aGlzLl9uYXRpdmVOb2RlKTtcbiAgICBjb25zdCBsVmlld0RhdGEgPSBsRGVidWdDdHgubFZpZXdEYXRhO1xuICAgIGNvbnN0IHROb2RlID0gbFZpZXdEYXRhW1RWSUVXXS5kYXRhW2xEZWJ1Z0N0eC5ub2RlSW5kZXhdIGFzIFROb2RlO1xuICAgIGNvbnN0IGRpcmVjdGl2ZXNDb3VudCA9IHROb2RlLmZsYWdzICYgVE5vZGVGbGFncy5EaXJlY3RpdmVDb3VudE1hc2s7XG5cbiAgICBpZiAoZGlyZWN0aXZlc0NvdW50ID4gMCkge1xuICAgICAgY29uc3QgZGlyZWN0aXZlSWR4U3RhcnQgPSB0Tm9kZS5mbGFncyA+PiBUTm9kZUZsYWdzLkRpcmVjdGl2ZVN0YXJ0aW5nSW5kZXhTaGlmdDtcbiAgICAgIGNvbnN0IGRpcmVjdGl2ZUlkeEVuZCA9IGRpcmVjdGl2ZUlkeFN0YXJ0ICsgZGlyZWN0aXZlc0NvdW50O1xuICAgICAgY29uc3Qgdmlld0RpcmVjdGl2ZURlZnMgPSB0aGlzLnZpZXdbVFZJRVddLmRhdGE7XG4gICAgICBjb25zdCBkaXJlY3RpdmVEZWZzID1cbiAgICAgICAgICB2aWV3RGlyZWN0aXZlRGVmcy5zbGljZShkaXJlY3RpdmVJZHhTdGFydCwgZGlyZWN0aXZlSWR4RW5kKSBhcyBEaXJlY3RpdmVEZWY8YW55PltdO1xuXG4gICAgICByZXR1cm4gZGlyZWN0aXZlRGVmcy5tYXAoZGlyZWN0aXZlRGVmID0+IGRpcmVjdGl2ZURlZi50eXBlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gW107XG4gIH1cblxuICBnZXQgcmVmZXJlbmNlcygpOiB7W2tleTogc3RyaW5nXTogYW55fSB7IHJldHVybiBnZXRMb2NhbFJlZnModGhpcy5fbmF0aXZlTm9kZSk7IH1cblxuICAvLyBUT0RPKHBrKTogY2hlY2sgcHJldmlvdXMgaW1wbGVtZW50YXRpb24gYW5kIHJlLWltcGxlbWVudFxuICBnZXQgY29udGV4dCgpOiBhbnkgeyB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCBpbiBpdnknKTsgfVxuXG4gIC8vIFRPRE8ocGspOiBjaGVjayBwcmV2aW91cyBpbXBsZW1lbnRhdGlvbiBhbmQgcmUtaW1wbGVtZW50XG4gIGdldCBjb21wb25lbnRSZW5kZXJFbGVtZW50KCk6IGFueSB7IHRocm93IG5ldyBFcnJvcignTm90IGltcGxlbWVudGVkIGluIGl2eScpOyB9XG5cbiAgLy8gVE9ETyhwayk6IGNoZWNrIHByZXZpb3VzIGltcGxlbWVudGF0aW9uIGFuZCByZS1pbXBsZW1lbnRcbiAgZ2V0IHJlbmRlck5vZGUoKTogYW55IHsgdGhyb3cgbmV3IEVycm9yKCdOb3QgaW1wbGVtZW50ZWQgaW4gaXZ5Jyk7IH1cblxuICAvLyBUT0RPKHBrKTogY2hlY2sgcHJldmlvdXMgaW1wbGVtZW50YXRpb24gYW5kIHJlLWltcGxlbWVudFxuICBsb2dFcnJvcihjb25zb2xlOiBDb25zb2xlLCAuLi52YWx1ZXM6IGFueVtdKTogdm9pZCB7IGNvbnNvbGUuZXJyb3IoLi4udmFsdWVzKTsgfVxufVxuIl19