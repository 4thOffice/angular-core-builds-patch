import { assertDefined } from './assert';
import { discoverDirectiveIndices, discoverDirectives, discoverLocalRefs, getContext, isComponentInstance, readPatchedLViewData } from './context_discovery';
import { CONTEXT, FLAGS, INJECTOR, PARENT, TVIEW } from './interfaces/view';
/**
 * NOTE: The following functions might not be ideal for core usage in Angular...
 *
 * Each function below is designed
 */
/**
 * Returns the component instance associated with the target.
 *
 * If a DOM is used then it will return the component that
 *    owns the view where the element is situated.
 * If a component instance is used then it will return the
 *    instance of the parent component depending on where
 *    the component instance is exists in a template.
 * If a directive instance is used then it will return the
 *    component that contains that directive in it's template.
 */
export function getComponent(target) {
    const context = loadContext(target);
    if (context.component === undefined) {
        let lViewData = context.lViewData;
        while (lViewData) {
            const ctx = lViewData[CONTEXT];
            if (ctx && isComponentInstance(ctx)) {
                context.component = ctx;
                break;
            }
            lViewData = lViewData[PARENT];
        }
        if (context.component === undefined) {
            context.component = null;
        }
    }
    return context.component;
}
/**
 * Returns the host component instance associated with the target.
 *
 * This will only return a component instance of the DOM node
 * contains an instance of a component on it.
 */
export function getHostComponent(target) {
    const context = loadContext(target);
    const tNode = context.lViewData[TVIEW].data[context.lNodeIndex];
    if (tNode.flags & 4096 /* isComponent */) {
        const lNode = context.lViewData[context.lNodeIndex];
        return lNode.data[CONTEXT];
    }
    return null;
}
/**
 * Returns the `RootContext` instance that is associated with
 * the application where the target is situated.
 */
export function getRootContext(target) {
    const context = loadContext(target);
    const rootLViewData = getRootView(context.lViewData);
    return rootLViewData[CONTEXT];
}
/**
 * Returns a list of all the components in the application
 * that are have been bootstrapped.
 */
export function getRootComponents(target) {
    return [...getRootContext(target).components];
}
/**
 * Returns the injector instance that is associated with
 * the element, component or directive.
 */
export function getInjector(target) {
    const context = loadContext(target);
    return context.lViewData[INJECTOR] || null;
}
/**
 * Returns a list of all the directives that are associated
 * with the underlying target element.
 */
export function getDirectives(target) {
    const context = loadContext(target);
    if (context.directives === undefined) {
        context.directiveIndices = discoverDirectiveIndices(context.lViewData, context.lNodeIndex);
        context.directives = context.directiveIndices ?
            discoverDirectives(context.lViewData, context.directiveIndices) :
            null;
    }
    return context.directives || [];
}
function loadContext(target) {
    const context = getContext(target);
    if (!context) {
        throw new Error(ngDevMode ? 'Unable to find the given context data for the given target' :
            'Invalid ng target');
    }
    return context;
}
/**
 * Retrieve the root view from any component by walking the parent `LViewData` until
 * reaching the root `LViewData`.
 *
 * @param componentOrView any component or view
 */
export function getRootView(componentOrView) {
    let lViewData;
    if (Array.isArray(componentOrView)) {
        ngDevMode && assertDefined(componentOrView, 'lViewData');
        lViewData = componentOrView;
    }
    else {
        ngDevMode && assertDefined(componentOrView, 'component');
        lViewData = readPatchedLViewData(componentOrView);
    }
    while (lViewData && !(lViewData[FLAGS] & 64 /* IsRoot */)) {
        lViewData = lViewData[PARENT];
    }
    return lViewData;
}
/**
 *  Retrieve map of local references (local reference name => element or directive instance).
 */
export function getLocalRefs(target) {
    const context = loadContext(target);
    if (context.localRefs === undefined) {
        context.localRefs = discoverLocalRefs(context.lViewData, context.lNodeIndex);
    }
    return context.localRefs || {};
}

//# sourceMappingURL=data:application/json;base64,