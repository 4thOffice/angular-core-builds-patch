/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { WrappedNodeExpr, compileNgModule as compileIvyNgModule, jitExpression } from '@angular/compiler';
import { flatten } from '../util';
import { angularCoreEnv } from './environment';
const /** @type {?} */ EMPTY_ARRAY = [];
/**
 * @param {?} type
 * @param {?} ngModule
 * @return {?}
 */
export function compileNgModule(type, ngModule) {
    const /** @type {?} */ meta = {
        type: wrap(type),
        bootstrap: flatten(ngModule.bootstrap || EMPTY_ARRAY).map(wrap),
        declarations: flatten(ngModule.declarations || EMPTY_ARRAY).map(wrap),
        imports: flatten(ngModule.imports || EMPTY_ARRAY).map(expandModuleWithProviders).map(wrap),
        exports: flatten(ngModule.exports || EMPTY_ARRAY).map(expandModuleWithProviders).map(wrap),
        emitInline: true,
    };
    const /** @type {?} */ res = compileIvyNgModule(meta);
    // Compute transitiveCompileScope
    const /** @type {?} */ transitiveCompileScope = {
        directives: /** @type {?} */ ([]),
        pipes: /** @type {?} */ ([]),
    };
    /**
     * @param {?} module
     * @return {?}
     */
    function addExportsFrom(module) {
        module.ngModuleDef.exports.forEach((exp) => {
            if (isNgModule(exp)) {
                addExportsFrom(exp);
            }
            else if (exp.ngPipeDef) {
                transitiveCompileScope.pipes.push(exp);
            }
            else {
                transitiveCompileScope.directives.push(exp);
            }
        });
    }
    flatten([(ngModule.imports || EMPTY_ARRAY), (ngModule.exports || EMPTY_ARRAY)])
        .filter(importExport => isNgModule(importExport))
        .forEach(mod => addExportsFrom(mod));
    flatten(ngModule.declarations || EMPTY_ARRAY).forEach(decl => {
        if (decl.ngPipeDef) {
            transitiveCompileScope.pipes.push(decl);
        }
        else if (decl.ngComponentDef) {
            transitiveCompileScope.directives.push(decl);
            patchComponentWithScope(decl, /** @type {?} */ (type));
        }
        else {
            transitiveCompileScope.directives.push(decl);
            decl.ngSelectorScope = type;
        }
    });
    let /** @type {?} */ def = null;
    Object.defineProperty(type, 'ngModuleDef', {
        get: () => {
            if (def === null) {
                const /** @type {?} */ meta = {
                    type: wrap(type),
                    bootstrap: flatten(ngModule.bootstrap || EMPTY_ARRAY).map(wrap),
                    declarations: flatten(ngModule.declarations || EMPTY_ARRAY).map(wrap),
                    imports: flatten(ngModule.imports || EMPTY_ARRAY).map(expandModuleWithProviders).map(wrap),
                    exports: flatten(ngModule.exports || EMPTY_ARRAY).map(expandModuleWithProviders).map(wrap),
                    emitInline: true,
                };
                const /** @type {?} */ res = compileIvyNgModule(meta);
                def = jitExpression(res.expression, angularCoreEnv, `ng://${type.name}/ngModuleDef.js`);
                def.transitiveCompileScope = transitiveCompileScope;
            }
            return def;
        },
    });
}
/**
 * @template C, M
 * @param {?} component
 * @param {?} module
 * @return {?}
 */
export function patchComponentWithScope(component, module) {
    component.ngComponentDef.directiveDefs = () => /** @type {?} */ ((module.ngModuleDef.transitiveCompileScope)).directives.map(dir => dir.ngDirectiveDef || dir.ngComponentDef).filter(def => !!def);
    component.ngComponentDef.pipeDefs = () => /** @type {?} */ ((module.ngModuleDef.transitiveCompileScope)).pipes.map(pipe => pipe.ngPipeDef);
}
/**
 * @param {?} value
 * @return {?}
 */
function expandModuleWithProviders(value) {
    if (isModuleWithProviders(value)) {
        return value.ngModule;
    }
    return value;
}
/**
 * @param {?} value
 * @return {?}
 */
function wrap(value) {
    return new WrappedNodeExpr(value);
}
/**
 * @param {?} value
 * @return {?}
 */
function isModuleWithProviders(value) {
    return value.ngModule !== undefined;
}
/**
 * @param {?} value
 * @return {?}
 */
function isNgModule(value) {
    return value.ngModuleDef !== undefined;
}

//# sourceMappingURL=data:application/json;base64,