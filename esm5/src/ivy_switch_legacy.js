/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import * as tslib_1 from "tslib";
import { defineInjectable, defineInjector } from './di/defs';
import { inject, injectArgs } from './di/injector';
import * as ivyOn from './ivy_switch_on';
import { ReflectionCapabilities } from './reflection/reflection_capabilities';
import { getClosureSafeProperty } from './util/property';
function noop() { }
var R3_COMPILE_COMPONENT__POST_NGCC__ = ivyOn.R3_COMPILE_COMPONENT;
var R3_COMPILE_DIRECTIVE__POST_NGCC__ = ivyOn.R3_COMPILE_DIRECTIVE;
var R3_COMPILE_INJECTABLE__POST_NGCC__ = ivyOn.R3_COMPILE_INJECTABLE;
var R3_COMPILE_NGMODULE__POST_NGCC__ = ivyOn.R3_COMPILE_NGMODULE;
var R3_COMPILE_PIPE__POST_NGCC__ = ivyOn.R3_COMPILE_PIPE;
var ivyEnable__POST_NGCC__ = ivyOn.ivyEnabled;
var compileComponentQueue = [];
var compileDirectiveQueue = [];
var compileInjectableQueue = [];
var compileNgModuleQueue = [];
var compilePipeQueue = [];
var R3_COMPILE_COMPONENT__PRE_NGCC__ = noop;
var R3_COMPILE_DIRECTIVE__PRE_NGCC__ = noop;
var R3_COMPILE_INJECTABLE__PRE_NGCC__ = preR3InjectableCompile;
var R3_COMPILE_NGMODULE__PRE_NGCC__ = preR3NgModuleCompile;
var R3_COMPILE_PIPE__PRE_NGCC__ = noop;
var ivyEnable__PRE_NGCC__ = false;
export var ivyEnabled = ivyEnable__PRE_NGCC__;
export var R3_COMPILE_COMPONENT = R3_COMPILE_COMPONENT__PRE_NGCC__;
export var R3_COMPILE_DIRECTIVE = R3_COMPILE_DIRECTIVE__PRE_NGCC__;
export var R3_COMPILE_INJECTABLE = R3_COMPILE_INJECTABLE__PRE_NGCC__;
export var R3_COMPILE_NGMODULE = R3_COMPILE_NGMODULE__PRE_NGCC__;
export var R3_COMPILE_PIPE = R3_COMPILE_PIPE__PRE_NGCC__;
////////////////////////////////////////////////////////////
// Glue code which should be removed after Ivy is default //
////////////////////////////////////////////////////////////
function preR3NgModuleCompile(moduleType, metadata) {
    var imports = (metadata && metadata.imports) || [];
    if (metadata && metadata.exports) {
        imports = tslib_1.__spread(imports, [metadata.exports]);
    }
    moduleType.ngInjectorDef = defineInjector({
        factory: convertInjectableProviderToFactory(moduleType, { useClass: moduleType }),
        providers: metadata && metadata.providers,
        imports: imports,
    });
}
var GET_PROPERTY_NAME = {};
var USE_VALUE = getClosureSafeProperty({ provide: String, useValue: GET_PROPERTY_NAME }, GET_PROPERTY_NAME);
var EMPTY_ARRAY = [];
function convertInjectableProviderToFactory(type, provider) {
    if (!provider) {
        var reflectionCapabilities = new ReflectionCapabilities();
        var deps_1 = reflectionCapabilities.parameters(type);
        // TODO - convert to flags.
        return function () { return new (type.bind.apply(type, tslib_1.__spread([void 0], injectArgs(deps_1))))(); };
    }
    if (USE_VALUE in provider) {
        var valueProvider_1 = provider;
        return function () { return valueProvider_1.useValue; };
    }
    else if (provider.useExisting) {
        var existingProvider_1 = provider;
        return function () { return inject(existingProvider_1.useExisting); };
    }
    else if (provider.useFactory) {
        var factoryProvider_1 = provider;
        return function () { return factoryProvider_1.useFactory.apply(factoryProvider_1, tslib_1.__spread(injectArgs(factoryProvider_1.deps || EMPTY_ARRAY))); };
    }
    else if (provider.useClass) {
        var classProvider_1 = provider;
        var deps_2 = provider.deps;
        if (!deps_2) {
            var reflectionCapabilities = new ReflectionCapabilities();
            deps_2 = reflectionCapabilities.parameters(type);
        }
        return function () {
            var _a;
            return new ((_a = classProvider_1.useClass).bind.apply(_a, tslib_1.__spread([void 0], injectArgs(deps_2))))();
        };
    }
    else {
        var deps_3 = provider.deps;
        if (!deps_3) {
            var reflectionCapabilities = new ReflectionCapabilities();
            deps_3 = reflectionCapabilities.parameters(type);
        }
        return function () { return new (type.bind.apply(type, tslib_1.__spread([void 0], injectArgs(deps_3))))(); };
    }
}
/**
 * Supports @Injectable() in JIT mode for Render2.
 */
function preR3InjectableCompile(injectableType, options) {
    if (options && options.providedIn !== undefined && injectableType.ngInjectableDef === undefined) {
        injectableType.ngInjectableDef = defineInjectable({
            providedIn: options.providedIn,
            factory: convertInjectableProviderToFactory(injectableType, options),
        });
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXZ5X3N3aXRjaF9sZWdhY3kuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9pdnlfc3dpdGNoX2xlZ2FjeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7O0FBRUgsT0FBTyxFQUErQixnQkFBZ0IsRUFBRSxjQUFjLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFFekYsT0FBTyxFQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFakQsT0FBTyxLQUFLLEtBQUssTUFBTSxpQkFBaUIsQ0FBQztBQUV6QyxPQUFPLEVBQUMsc0JBQXNCLEVBQUMsTUFBTSxzQ0FBc0MsQ0FBQztBQUU1RSxPQUFPLEVBQUMsc0JBQXNCLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUV2RCxrQkFBaUIsQ0FBQztBQUlsQixJQUFNLGlDQUFpQyxHQUFHLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQztBQUNyRSxJQUFNLGlDQUFpQyxHQUFHLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQztBQUNyRSxJQUFNLGtDQUFrQyxHQUFHLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQztBQUN2RSxJQUFNLGdDQUFnQyxHQUFHLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQztBQUNuRSxJQUFNLDRCQUE0QixHQUFHLEtBQUssQ0FBQyxlQUFlLENBQUM7QUFDM0QsSUFBTSxzQkFBc0IsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDO0FBRWhELElBQU0scUJBQXFCLEdBQVUsRUFBRSxDQUFDO0FBQ3hDLElBQU0scUJBQXFCLEdBQVUsRUFBRSxDQUFDO0FBQ3hDLElBQU0sc0JBQXNCLEdBQVUsRUFBRSxDQUFDO0FBQ3pDLElBQU0sb0JBQW9CLEdBQVUsRUFBRSxDQUFDO0FBQ3ZDLElBQU0sZ0JBQWdCLEdBQVUsRUFBRSxDQUFDO0FBRW5DLElBQU0sZ0NBQWdDLEdBQXNCLElBQUksQ0FBQztBQUNqRSxJ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RixJQUFJLE1BQUksR0FBSSxRQUFvQyxDQUFDLElBQUksQ0FBQztRQUN0RCxJQUFJLENBQUMsTUFBSSxFQUFFO1lBQ1QsSUFBTSxzQkFBc0IsR0FBRyxJQUFJLHNCQUFzQixFQUFFLENBQUM7WUFDNUQsTUFBSSxHQUFHLHNCQUFzQixDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNoRDtRQUNELE9BQU87O1lBQU0sWUFBSSxDQUFBLEtBQUEsZUFBYSxDQUFDLFFBQVEsQ0FBQSwyQ0FBSSxVQUFVLENBQUMsTUFBSSxDQUFDO1FBQTlDLENBQStDLENBQUM7S0FDOUQ7U0FBTTtRQUNMLElBQUksTUFBSSxHQUFJLFFBQW9DLENBQUMsSUFBSSxDQUFDO1FBQ3RELElBQUksQ0FBQyxNQUFJLEVBQUU7WUFDVCxJQUFNLHNCQUFzQixHQUFHLElBQUksc0JBQXNCLEVBQUUsQ0FBQztZQUM1RCxNQUFJLEdBQUcsc0JBQXNCLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2hEO1FBQ0QsT0FBTyxjQUFNLFlBQUksSUFBSSxZQUFKLElBQUksNkJBQUksVUFBVSxDQUFDLE1BQU0sQ0FBQyxPQUE5QixDQUErQixDQUFDO0tBQzlDO0FBQ0gsQ0FBQztBQUVEOztHQUVHO0FBQ0gsZ0NBQ0ksY0FBbUMsRUFDbkMsT0FBcUU7SUFDdkUsSUFBSSxPQUFPLElBQUksT0FBTyxDQUFDLFVBQVUsS0FBSyxTQUFTLElBQUksY0FBYyxDQUFDLGVBQWUsS0FBSyxTQUFTLEVBQUU7UUFDL0YsY0FBYyxDQUFDLGVBQWUsR0FBRyxnQkFBZ0IsQ0FBQztZQUNoRCxVQUFVLEVBQUUsT0FBTyxDQUFDLFVBQVU7WUFDOUIsT0FBTyxFQUFFLGtDQUFrQyxDQUFDLGNBQWMsRUFBRSxPQUFPLENBQUM7U0FDckUsQ0FBQyxDQUFDO0tBQ0o7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge0luamVjdGFibGVUeXBlLCBJbmplY3RvclR5cGUsIGRlZmluZUluamVjdGFibGUsIGRlZmluZUluamVjdG9yfSBmcm9tICcuL2RpL2RlZnMnO1xuaW1wb3J0IHtJbmplY3RhYmxlUHJvdmlkZXJ9IGZyb20gJy4vZGkvaW5qZWN0YWJsZSc7XG5pbXBvcnQge2luamVjdCwgaW5qZWN0QXJnc30gZnJvbSAnLi9kaS9pbmplY3Rvcic7XG5pbXBvcnQge0NsYXNzU2Fuc1Byb3ZpZGVyLCBDb25zdHJ1Y3RvclNhbnNQcm92aWRlciwgRXhpc3RpbmdTYW5zUHJvdmlkZXIsIEZhY3RvcnlTYW5zUHJvdmlkZXIsIFN0YXRpY0NsYXNzU2Fuc1Byb3ZpZGVyLCBWYWx1ZVByb3ZpZGVyLCBWYWx1ZVNhbnNQcm92aWRlcn0gZnJvbSAnLi9kaS9wcm92aWRlcic7XG5pbXBvcnQgKiBhcyBpdnlPbiBmcm9tICcuL2l2eV9zd2l0Y2hfb24nO1xuaW1wb3J0IHtOZ01vZHVsZX0gZnJvbSAnLi9tZXRhZGF0YSc7XG5pbXBvcnQge1JlZmxlY3Rpb25DYXBhYmlsaXRpZXN9IGZyb20gJy4vcmVmbGVjdGlvbi9yZWZsZWN0aW9uX2NhcGFiaWxpdGllcyc7XG5pbXBvcnQge1R5cGV9IGZyb20gJy4vdHlwZSc7XG5pbXBvcnQge2dldENsb3N1cmVTYWZlUHJvcGVydHl9IGZyb20gJy4vdXRpbC9wcm9wZXJ0eSc7XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5leHBvcnQgaW50ZXJmYWNlIERpcmVjdGl2ZUNvbXBpbGVyIHsgKHR5cGU6IGFueSwgbWV0YTogYW55KTogdm9pZDsgfVxuXG5jb25zdCBSM19DT01QSUxFX0NPTVBPTkVOVF9fUE9TVF9OR0NDX18gPSBpdnlPbi5SM19DT01QSUxFX0NPTVBPTkVOVDtcbmNvbnN0IFIzX0NPTVBJTEVfRElSRUNUSVZFX19QT1NUX05HQ0NfXyA9IGl2eU9uLlIzX0NPTVBJTEVfRElSRUNUSVZFO1xuY29uc3QgUjNfQ09NUElMRV9JTkpFQ1RBQkxFX19QT1NUX05HQ0NfXyA9IGl2eU9uLlIzX0NPTVBJTEVfSU5KRUNUQUJMRTtcbmNvbnN0IFIzX0NPTVBJTEVfTkdNT0RVTEVfX1BPU1RfTkdDQ19fID0gaXZ5T24uUjNfQ09NUElMRV9OR01PRFVMRTtcbmNvbnN0IFIzX0NPTVBJTEVfUElQRV9fUE9TVF9OR0NDX18gPSBpdnlPbi5SM19DT01QSUxFX1BJUEU7XG5jb25zdCBpdnlFbmFibGVfX1BPU1RfTkdDQ19fID0gaXZ5T24uaXZ5RW5hYmxlZDtcblxuY29uc3QgY29tcGlsZUNvbXBvbmVudFF1ZXVlOiBhbnlbXSA9IFtdO1xuY29uc3QgY29tcGlsZURpcmVjdGl2ZVF1ZXVlOiBhbnlbXSA9IFtdO1xuY29uc3QgY29tcGlsZUluamVjdGFibGVRdWV1ZTogYW55W10gPSBbXTtcbmNvbnN0IGNvbXBpbGVOZ01vZHVsZVF1ZXVlOiBhbnlbXSA9IFtdO1xuY29uc3QgY29tcGlsZVBpcGVRdWV1ZTogYW55W10gPSBbXTtcblxuY29uc3QgUjNfQ09NUElMRV9DT01QT05FTlRfX1BSRV9OR0NDX186IERpcmVjdGl2ZUNvbXBpbGVyID0gbm9vcDtcbmNvbnN0IFIzX0NPTVBJTEVfRElSRUNUSVZFX19QUkVfTkdDQ19fOiBEaXJlY3RpdmVDb21waWxlciA9IG5vb3A7XG5jb25zdCBSM19DT01QSUxFX0lOSkVDVEFCTEVfX1BSRV9OR0NDX186IERpcmVjdGl2ZUNvbXBpbGVyID0gcHJlUjNJbmplY3RhYmxlQ29tcGlsZTtcbmNvbnN0IFIzX0NPTVBJTEVfTkdNT0RVTEVfX1BSRV9OR0NDX186IERpcmVjdGl2ZUNvbXBpbGVyID0gcHJlUjNOZ01vZHVsZUNvbXBpbGU7XG5jb25zdCBSM19DT01QSUxFX1BJUEVfX1BSRV9OR0NDX186IERpcmVjdGl2ZUNvbXBpbGVyID0gbm9vcDtcbmNvbnN0IGl2eUVuYWJsZV9fUFJFX05HQ0NfXyA9IGZhbHNlO1xuXG5leHBvcnQgY29uc3QgaXZ5RW5hYmxlZCA9IGl2eUVuYWJsZV9fUFJFX05HQ0NfXztcbmV4cG9ydCBsZXQgUjNfQ09NUElMRV9DT01QT05FTlQ6IERpcmVjdGl2ZUNvbXBpbGVyID0gUjNfQ09NUElMRV9DT01QT05FTlRfX1BSRV9OR0NDX187XG5leHBvcnQgbGV0IFIzX0NPTVBJTEVfRElSRUNUSVZFOiBEaXJlY3RpdmVDb21waWxlciA9IFIzX0NPTVBJTEVfRElSRUNUSVZFX19QUkVfTkdDQ19fO1xuZXhwb3J0IGxldCBSM19DT01QSUxFX0lOSkVDVEFCTEU6IERpcmVjdGl2ZUNvbXBpbGVyID0gUjNfQ09NUElMRV9JTkpFQ1RBQkxFX19QUkVfTkdDQ19fO1xuZXhwb3J0IGxldCBSM19DT01QSUxFX05HTU9EVUxFOiBEaXJlY3RpdmVDb21waWxlciA9IFIzX0NPTVBJTEVfTkdNT0RVTEVfX1BSRV9OR0NDX187XG5leHBvcnQgbGV0IFIzX0NPTVBJTEVfUElQRTogRGlyZWN0aXZlQ29tcGlsZXIgPSBSM19DT01QSUxFX1BJUEVfX1BSRV9OR0NDX187XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBHbHVlIGNvZGUgd2hpY2ggc2hvdWxkIGJlIHJlbW92ZWQgYWZ0ZXIgSXZ5IGlzIGRlZmF1bHQgLy9cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5mdW5jdGlvbiBwcmVSM05nTW9kdWxlQ29tcGlsZShtb2R1bGVUeXBlOiBJbmplY3RvclR5cGU8YW55PiwgbWV0YWRhdGE6IE5nTW9kdWxlKTogdm9pZCB7XG4gIGxldCBpbXBvcnRzID0gKG1ldGFkYXRhICYmIG1ldGFkYXRhLmltcG9ydHMpIHx8IFtdO1xuICBpZiAobWV0YWRhdGEgJiYgbWV0YWRhdGEuZXhwb3J0cykge1xuICAgIGltcG9ydHMgPSBbLi4uaW1wb3J0cywgbWV0YWRhdGEuZXhwb3J0c107XG4gIH1cblxuICBtb2R1bGVUeXBlLm5nSW5qZWN0b3JEZWYgPSBkZWZpbmVJbmplY3Rvcih7XG4gICAgZmFjdG9yeTogY29udmVydEluamVjdGFibGVQcm92aWRlclRvRmFjdG9yeShtb2R1bGVUeXBlLCB7dXNlQ2xhc3M6IG1vZHVsZVR5cGV9KSxcbiAgICBwcm92aWRlcnM6IG1ldGFkYXRhICYmIG1ldGFkYXRhLnByb3ZpZGVycyxcbiAgICBpbXBvcnRzOiBpbXBvcnRzLFxuICB9KTtcbn1cblxuY29uc3QgR0VUX1BST1BFUlRZX05BTUUgPSB7fSBhcyBhbnk7XG5jb25zdCBVU0VfVkFMVUUgPSBnZXRDbG9zdXJlU2FmZVByb3BlcnR5PFZhbHVlUHJvdmlkZXI+KFxuICAgIHtwcm92aWRlOiBTdHJpbmcsIHVzZVZhbHVlOiBHRVRfUFJPUEVSVFlfTkFNRX0sIEdFVF9QUk9QRVJUWV9OQU1FKTtcbmNvbnN0IEVNUFRZX0FSUkFZOiBhbnlbXSA9IFtdO1xuXG5mdW5jdGlvbiBjb252ZXJ0SW5qZWN0YWJsZVByb3ZpZGVyVG9GYWN0b3J5KHR5cGU6IFR5cGU8YW55PiwgcHJvdmlkZXI/OiBJbmplY3RhYmxlUHJvdmlkZXIpOiAoKSA9PlxuICAgIGFueSB7XG4gIGlmICghcHJvdmlkZXIpIHtcbiAgICBjb25zdCByZWZsZWN0aW9uQ2FwYWJpbGl0aWVzID0gbmV3IFJlZmxlY3Rpb25DYXBhYmlsaXRpZXMoKTtcbiAgICBjb25zdCBkZXBzID0gcmVmbGVjdGlvbkNhcGFiaWxpdGllcy5wYXJhbWV0ZXJzKHR5cGUpO1xuICAgIC8vIFRPRE8gLSBjb252ZXJ0IHRvIGZsYWdzLlxuICAgIHJldHVybiAoKSA9PiBuZXcgdHlwZSguLi5pbmplY3RBcmdzKGRlcHMgYXMgYW55W10pKTtcbiAgfVxuXG4gIGlmIChVU0VfVkFMVUUgaW4gcHJvdmlkZXIpIHtcbiAgICBjb25zdCB2YWx1ZVByb3ZpZGVyID0gKHByb3ZpZGVyIGFzIFZhbHVlU2Fuc1Byb3ZpZGVyKTtcbiAgICByZXR1cm4gKCkgPT4gdmFsdWVQcm92aWRlci51c2VWYWx1ZTtcbiAgfSBlbHNlIGlmICgocHJvdmlkZXIgYXMgRXhpc3RpbmdTYW5zUHJvdmlkZXIpLnVzZUV4aXN0aW5nKSB7XG4gICAgY29uc3QgZXhpc3RpbmdQcm92aWRlciA9IChwcm92aWRlciBhcyBFeGlzdGluZ1NhbnNQcm92aWRlcik7XG4gICAgcmV0dXJuICgpID0+IGluamVjdChleGlzdGluZ1Byb3ZpZGVyLnVzZUV4aXN0aW5nKTtcbiAgfSBlbHNlIGlmICgocHJvdmlkZXIgYXMgRmFjdG9yeVNhbnNQcm92aWRlcikudXNlRmFjdG9yeSkge1xuICAgIGNvbnN0IGZhY3RvcnlQcm92aWRlciA9IChwcm92aWRlciBhcyBGYWN0b3J5U2Fuc1Byb3ZpZGVyKTtcbiAgICByZXR1cm4gKCkgPT4gZmFjdG9yeVByb3ZpZGVyLnVzZUZhY3RvcnkoLi4uaW5qZWN0QXJncyhmYWN0b3J5UHJvdmlkZXIuZGVwcyB8fCBFTVBUWV9BUlJBWSkpO1xuICB9IGVsc2UgaWYgKChwcm92aWRlciBhcyBTdGF0aWNDbGFzc1NhbnNQcm92aWRlciB8IENsYXNzU2Fuc1Byb3ZpZGVyKS51c2VDbGFzcykge1xuICAgIGNvbnN0IGNsYXNzUHJvdmlkZXIgPSAocHJvdmlkZXIgYXMgU3RhdGljQ2xhc3NTYW5zUHJvdmlkZXIgfCBDbGFzc1NhbnNQcm92aWRlcik7XG4gICAgbGV0IGRlcHMgPSAocHJvdmlkZXIgYXMgU3RhdGljQ2xhc3NTYW5zUHJvdmlkZXIpLmRlcHM7XG4gICAgaWYgKCFkZXBzKSB7XG4gICAgICBjb25zdCByZWZsZWN0aW9uQ2FwYWJpbGl0aWVzID0gbmV3IFJlZmxlY3Rpb25DYXBhYmlsaXRpZXMoKTtcbiAgICAgIGRlcHMgPSByZWZsZWN0aW9uQ2FwYWJpbGl0aWVzLnBhcmFtZXRlcnModHlwZSk7XG4gICAgfVxuICAgIHJldHVybiAoKSA9PiBuZXcgY2xhc3NQcm92aWRlci51c2VDbGFzcyguLi5pbmplY3RBcmdzKGRlcHMpKTtcbiAgfSBlbHNlIHtcbiAgICBsZXQgZGVwcyA9IChwcm92aWRlciBhcyBDb25zdHJ1Y3RvclNhbnNQcm92aWRlcikuZGVwcztcbiAgICBpZiAoIWRlcHMpIHtcbiAgICAgIGNvbnN0IHJlZmxlY3Rpb25DYXBhYmlsaXRpZXMgPSBuZXcgUmVmbGVjdGlvbkNhcGFiaWxpdGllcygpO1xuICAgICAgZGVwcyA9IHJlZmxlY3Rpb25DYXBhYmlsaXRpZXMucGFyYW1ldGVycyh0eXBlKTtcbiAgICB9XG4gICAgcmV0dXJuICgpID0+IG5ldyB0eXBlKC4uLmluamVjdEFyZ3MoZGVwcyAhKSk7XG4gIH1cbn1cblxuLyoqXG4gKiBTdXBwb3J0cyBASW5qZWN0YWJsZSgpIGluIEpJVCBtb2RlIGZvciBSZW5kZXIyLlxuICovXG5mdW5jdGlvbiBwcmVSM0luamVjdGFibGVDb21waWxlKFxuICAgIGluamVjdGFibGVUeXBlOiBJbmplY3RhYmxlVHlwZTxhbnk+LFxuICAgIG9wdGlvbnM6IHtwcm92aWRlZEluPzogVHlwZTxhbnk+fCAncm9vdCcgfCBudWxsfSAmIEluamVjdGFibGVQcm92aWRlcik6IHZvaWQge1xuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnByb3ZpZGVkSW4gIT09IHVuZGVmaW5lZCAmJiBpbmplY3RhYmxlVHlwZS5uZ0luamVjdGFibGVEZWYgPT09IHVuZGVmaW5lZCkge1xuICAgIGluamVjdGFibGVUeXBlLm5nSW5qZWN0YWJsZURlZiA9IGRlZmluZUluamVjdGFibGUoe1xuICAgICAgcHJvdmlkZWRJbjogb3B0aW9ucy5wcm92aWRlZEluLFxuICAgICAgZmFjdG9yeTogY29udmVydEluamVjdGFibGVQcm92aWRlclRvRmFjdG9yeShpbmplY3RhYmxlVHlwZSwgb3B0aW9ucyksXG4gICAgfSk7XG4gIH1cbn0iXX0=