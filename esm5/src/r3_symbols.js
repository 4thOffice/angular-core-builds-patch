/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/*
 * This file exists to support compilation of @angular/core in Ivy mode.
 *
 * When the Angular compiler processes a compilation unit, it normally writes imports to
 * @angular/core. When compiling the core package itself this strategy isn't usable. Instead, the
 * compiler writes imports to this file.
 *
 * Only a subset of such imports are supported - core is not allowed to declare components or pipes.
 * A check in ngtsc's `R3SymbolsImportRewriter` validates this condition. The rewriter is only used
 * when compiling @angular/core and is responsible for translating an external name (prefixed with
 * Éµ) to the internal symbol name as exported below.
 *
 * The below symbols are used for @Injectable and @NgModule compilation.
 */
export { defineInjectable, defineInjector } from './di/defs';
export { inject } from './di/injector_compatibility';
export { defineNgModule } from './render3/definition';
export { setClassMetadata } from './render3/metadata';
export { NgModuleFactory } from './render3/ng_module_ref';
/**
 * The existence of this constant (in this particular file) informs the Angular compiler that the
 * current program is actually @angular/core, which needs to be compiled specially.
 */
export var ITS_JUST_ANGULAR = true;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicjNfc3ltYm9scy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL2NvcmUvc3JjL3IzX3N5bWJvbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBRUg7Ozs7Ozs7Ozs7Ozs7R0FhRztBQUVILE9BQU8sRUFBNkIsZ0JBQWdCLEVBQUUsY0FBYyxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ3ZGLE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSw2QkFBNkIsQ0FBQztBQUVuRCxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFDcEQsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFDcEQsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBR3hEOzs7R0FHRztBQUNILE1BQU0sQ0FBQyxJQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuLypcbiAqIFRoaXMgZmlsZSBleGlzdHMgdG8gc3VwcG9ydCBjb21waWxhdGlvbiBvZiBAYW5ndWxhci9jb3JlIGluIEl2eSBtb2RlLlxuICpcbiAqIFdoZW4gdGhlIEFuZ3VsYXIgY29tcGlsZXIgcHJvY2Vzc2VzIGEgY29tcGlsYXRpb24gdW5pdCwgaXQgbm9ybWFsbHkgd3JpdGVzIGltcG9ydHMgdG9cbiAqIEBhbmd1bGFyL2NvcmUuIFdoZW4gY29tcGlsaW5nIHRoZSBjb3JlIHBhY2thZ2UgaXRzZWxmIHRoaXMgc3RyYXRlZ3kgaXNuJ3QgdXNhYmxlLiBJbnN0ZWFkLCB0aGVcbiAqIGNvbXBpbGVyIHdyaXRlcyBpbXBvcnRzIHRvIHRoaXMgZmlsZS5cbiAqXG4gKiBPbmx5IGEgc3Vic2V0IG9mIHN1Y2ggaW1wb3J0cyBhcmUgc3VwcG9ydGVkIC0gY29yZSBpcyBub3QgYWxsb3dlZCB0byBkZWNsYXJlIGNvbXBvbmVudHMgb3IgcGlwZXMuXG4gKiBBIGNoZWNrIGluIG5ndHNjJ3MgYFIzU3ltYm9sc0ltcG9ydFJld3JpdGVyYCB2YWxpZGF0ZXMgdGhpcyBjb25kaXRpb24uIFRoZSByZXdyaXRlciBpcyBvbmx5IHVzZWRcbiAqIHdoZW4gY29tcGlsaW5nIEBhbmd1bGFyL2NvcmUgYW5kIGlzIHJlc3BvbnNpYmxlIGZvciB0cmFuc2xhdGluZyBhbiBleHRlcm5hbCBuYW1lIChwcmVmaXhlZCB3aXRoXG4gKiDJtSkgdG8gdGhlIGludGVybmFsIHN5bWJvbCBuYW1lIGFzIGV4cG9ydGVkIGJlbG93LlxuICpcbiAqIFRoZSBiZWxvdyBzeW1ib2xzIGFyZSB1c2VkIGZvciBASW5qZWN0YWJsZSBhbmQgQE5nTW9kdWxlIGNvbXBpbGF0aW9uLlxuICovXG5cbmV4cG9ydCB7SW5qZWN0YWJsZURlZiwgSW5qZWN0b3JEZWYsIGRlZmluZUluamVjdGFibGUsIGRlZmluZUluamVjdG9yfSBmcm9tICcuL2RpL2RlZnMnO1xuZXhwb3J0IHtpbmplY3R9IGZyb20gJy4vZGkvaW5qZWN0b3JfY29tcGF0aWJpbGl0eSc7XG5leHBvcnQge05nTW9kdWxlRGVmLCBOZ01vZHVsZURlZldpdGhNZXRhfSBmcm9tICcuL21ldGFkYXRhL25nX21vZHVsZSc7XG5leHBvcnQge2RlZmluZU5nTW9kdWxlfSBmcm9tICcuL3JlbmRlcjMvZGVmaW5pdGlvbic7XG5leHBvcnQge3NldENsYXNzTWV0YWRhdGF9IGZyb20gJy4vcmVuZGVyMy9tZXRhZGF0YSc7XG5leHBvcnQge05nTW9kdWxlRmFjdG9yeX0gZnJvbSAnLi9yZW5kZXIzL25nX21vZHVsZV9yZWYnO1xuXG5cbi8qKlxuICogVGhlIGV4aXN0ZW5jZSBvZiB0aGlzIGNvbnN0YW50IChpbiB0aGlzIHBhcnRpY3VsYXIgZmlsZSkgaW5mb3JtcyB0aGUgQW5ndWxhciBjb21waWxlciB0aGF0IHRoZVxuICogY3VycmVudCBwcm9ncmFtIGlzIGFjdHVhbGx5IEBhbmd1bGFyL2NvcmUsIHdoaWNoIG5lZWRzIHRvIGJlIGNvbXBpbGVkIHNwZWNpYWxseS5cbiAqL1xuZXhwb3J0IGNvbnN0IElUU19KVVNUX0FOR1VMQVIgPSB0cnVlO1xuIl19