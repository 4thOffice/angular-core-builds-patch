import { AUTO_STYLE } from './tokens';
export function computeStyle(element, prop) {
    if (!window || !window.getComputedStyle)
        return '';
    var gcs = window.getComputedStyle(element);
    return readStyle(gcs, prop);
}
/**
 *
 * @param element
 * @param cb
 */
export function applyReflow(element, cb) {
    // TODO (matsko): make sure this doesn't get minified
    var w = element.clientWidth + 1;
    cb && requestAnimationFrame(function () { return cb(w); });
}
export function now() {
    return Date.now();
}
var TIMING_REGEX = /^(-?[\.\d]+)(m?s)(?:\s+(-?[\.\d]+)(m?s))?(?:\s+([-a-z]+(?:\(.+?\))?))?$/i;
export function parseTimingExp(exp) {
    var duration = 0;
    var delay = 0;
    var easing = null;
    if (typeof exp === 'string') {
        var matches = exp.match(TIMING_REGEX);
        if (matches === null) {
            return { duration: 0, delay: 0, easing: '', fill: null };
        }
        duration = _convertTimeValueToMS(parseFloat(matches[1]), matches[2]);
        var delayMatch = matches[3];
        if (delayMatch != null) {
            delay = _convertTimeValueToMS(parseFloat(delayMatch), matches[4]);
        }
        var easingVal = matches[5];
        if (easingVal) {
            easing = easingVal;
        }
    }
    else if (typeof exp === 'number') {
        duration = exp;
    }
    else {
        var t = exp;
        duration = t.duration;
        delay = t.delay || 0;
        easing = t.easing || null;
    }
    return { duration: duration, delay: delay, easing: easing, fill: null };
}
var ONE_SECOND = 1000;
function _convertTimeValueToMS(value, unit) {
    // only seconds are treated in a special way ...
    // otherwise it's assumed that milliseconds are used
    return unit == 's' ? value * ONE_SECOND : value;
}
export function applyTransition(element, value) {
    value ? element.style.setProperty('transition', value) :
        element.style.removeProperty('transition');
}
export function readStyle(element, prop) {
    var styles = (element instanceof Element) ? element.style : element;
    return styles[prop] || styles.getPropertyValue(prop);
}
export function hyphenateProp(prop) {
    return prop.replace(/[a-z][A-Z]/g, function (value) { return value[0] + "-" + value[1].toLowerCase(); });
}
export function applyClassChanges(element, classes, revert, store) {
    Object.keys(classes).forEach(function (className) {
        var bool = classes[className];
        element.classList.toggle(className, revert ? !bool : bool);
        if (store) {
            store[className] = revert ? false : true;
        }
    });
}
export function applyStyleChanges(element, styles, backupStyles, revert, preComputedStyles, store) {
    Object.keys(styles).forEach(function (prop) {
        var value = revert ? (backupStyles && backupStyles[prop]) : styles[prop];
        if (value && value === AUTO_STYLE) {
            value = preComputedStyles && preComputedStyles[prop] || '';
        }
        applyStyle(element, prop, value);
        if (store) {
            store[prop] = value || null;
        }
    });
}
export function applyStyle(element, prop, value) {
    if (value) {
        element.style.setProperty(prop, value);
    }
    else {
        element.style.removeProperty(prop);
    }
}

//# sourceMappingURL=data:application/json;base64,