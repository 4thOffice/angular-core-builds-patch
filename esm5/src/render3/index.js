/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { LifecycleHooksFeature, getHostElement, getRenderedText, renderComponent, whenRendered } from './component';
import { defineBase, defineComponent, defineDirective, defineNgModule, definePipe } from './definition';
import { InheritDefinitionFeature } from './features/inherit_definition_feature';
import { NgOnChangesFeature } from './features/ng_onchanges_feature';
import { PublicFeature } from './features/public_feature';
export { ComponentFactory, ComponentFactoryResolver, ComponentRef, WRAP_RENDERER_FACTORY2 } from './component_ref';
export { QUERY_READ_CONTAINER_REF, QUERY_READ_ELEMENT_REF, QUERY_READ_FROM_NODE, QUERY_READ_TEMPLATE_REF, directiveInject, getFactoryOf, getInheritedFactory, injectAttribute, injectChangeDetectorRef, injectComponentFactoryResolver, injectElementRef, injectTemplateRef, injectViewContainerRef, templateRefExtractor } from './di';
// clang-format off
export { NO_CHANGE, bind, interpolation1, interpolation2, interpolation3, interpolation4, interpolation5, interpolation6, interpolation7, interpolation8, interpolationV, container, containerRefreshStart, containerRefreshEnd, nextContext, element, elementAttribute, elementClassProp, elementEnd, elementProperty, elementStart, elementContainerStart, elementContainerEnd, elementStyling, elementStylingMap, elementStyleProp, elementStylingApply, getCurrentView, restoreView, listener, store, load, loadDirective, namespaceHTML, namespaceMathML, namespaceSVG, projection, projectionDef, text, textBinding, template, reference, reserveSlots, embeddedViewStart, embeddedViewEnd, detectChanges, markDirty, tick, } from './instructions';
export { i18nApply, i18nMapping, i18nInterpolation1, i18nInterpolation2, i18nInterpolation3, i18nInterpolation4, i18nInterpolation5, i18nInterpolation6, i18nInterpolation7, i18nInterpolation8, i18nInterpolationV, i18nExpMapping } from './i18n';
export { NgModuleFactory, NgModuleRef } from './ng_module_ref';
export { pipe, pipeBind1, pipeBind2, pipeBind3, pipeBind4, pipeBindV, } from './pipe';
export { QueryList, query, queryRefresh, } from './query';
export { registerContentQuery, loadQueryList, } from './instructions';
export { pureFunction0, pureFunction1, pureFunction2, pureFunction3, pureFunction4, pureFunction5, pureFunction6, pureFunction7, pureFunction8, pureFunctionV, } from './pure_function';
// clang-format on
export { NgOnChangesFeature, InheritDefinitionFeature, PublicFeature, LifecycleHooksFeature, defineComponent, defineDirective, defineNgModule, defineBase, definePipe, getHostElement, getRenderedText, renderComponent, whenRendered, };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9yZW5kZXIzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUVILE9BQU8sRUFBQyxxQkFBcUIsRUFBRSxjQUFjLEVBQUUsZUFBZSxFQUFFLGVBQWUsRUFBRSxZQUFZLEVBQUMsTUFBTSxhQUFhLENBQUM7QUFDbEgsT0FBTyxFQUFDLFVBQVUsRUFBRSxlQUFlLEVBQUUsZUFBZSxFQUFFLGNBQWMsRUFBRSxVQUFVLEVBQUMsTUFBTSxjQUFjLENBQUM7QUFDdEcsT0FBTyxFQUFDLHdCQUF3QixFQUFDLE1BQU0sdUNBQXVDLENBQUM7QUFDL0UsT0FBTyxFQUFDLGtCQUFrQixFQUFDLE1BQU0saUNBQWlDLENBQUM7QUFDbkUsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBR3hELE9BQU8sRUFBQyxnQkFBZ0IsRUFBRSx3QkFBd0IsRUFBRSxZQUFZLEVBQUUsc0JBQXNCLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUNqSCxPQUFPLEVBQUMsd0JBQXdCLEVBQUUsc0JBQXNCLEVBQUUsb0JBQW9CLEVBQUUsdUJBQXVCLEVBQUUsZUFBZSxFQUFFLFlBQVksRUFBRSxtQkFBbUIsRUFBRSxlQUFlLEVBQUUsdUJBQXVCLEVBQUUsOEJBQThCLEVBQUUsZ0JBQWdCLEVBQUUsaUJBQWlCLEVBQUUsc0JBQXNCLEVBQUUsb0JBQW9CLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFJdFUsbUJBQW1CO0FBQ25CLE9BQU8sRUFFTCxTQUFTLEVBRVQsSUFBSSxFQUNKLGNBQWMsRUFDZCxjQUFjLEVBQ2QsY0FBYyxFQUNkLGNBQWMsRUFDZCxjQUFjLEVBQ2QsY0FBYyxFQUNkLGNBQWMsRUFDZCxjQUFjLEVBQ2QsY0FBYyxFQUVkLFNBQVMsRUFDVCxxQkFBcUIsRUFDckIsbUJBQW1CLEVBRW5CLFdBQVcsRUFFWCxPQUFPLEVBQ1AsZ0JBQWdCLEVBQ2hCLGdCQUFnQixFQUNoQixVQUFVLEVBQ1YsZUFBZSxFQUNmLFlBQVksRUFFWixxQkFBcUIsRUFDckIsbUJBQW1CLEVBRW5CLGNBQWMsRUFDZCxpQkFBaUIsRUFDakIsZ0JBQWdCLEVBQ2hCLG1CQUFtQixFQUVuQixjQUFjLEVBQ2QsV0FBVyxFQUVYLFFBQVEsRUFDUixLQUFLLEVBQ0wsSUFBSSxFQUNKLGFBQWEsRUFFYixhQUFhLEVBQ2IsZUFBZSxFQUNmLFlBQVksRUFFWixVQUFVLEVBQ1YsYUFBYSxFQUViLElBQUksRUFDSixXQUFXLEVBQ1gsUUFBUSxFQUVSLFNBQVMsRUFFVCxZQUFZLEVBRVosaUJBQWlCLEVBQ2pCLGVBQWUsRUFDZixhQUFhLEVBQ2IsU0FBUyxFQUNULElBQUksR0FDTCxNQUFNLGdCQUFnQixDQUFDO0FBRXhCLE9BQU8sRUFDTCxTQUFTLEVBQ1QsV0FBVyxFQUNYLGtCQUFrQixFQUNsQixrQkFBa0IsRUFDbEIsa0JBQWtCLEVBQ2xCLGtCQUFrQixFQUNsQixrQkFBa0IsRUFDbEIsa0JBQWtCLEVBQ2xCLGtCQUFrQixFQUNsQixrQkFBa0IsRUFDbEIsa0JBQWtCLEVBQ2xCLGNBQWMsRUFHZixNQUFNLFFBQVEsQ0FBQztBQUVoQixPQUFPLEVBQUMsZUFBZSxFQUFFLFdBQVcsRUFBZSxNQUFNLGlCQUFpQixDQUFDO0FBTTNFLE9BQU8sRUFDTCxJQUFJLEVBQ0osU0FBUyxFQUNULFNBQVMsRUFDVCxTQUFTLEVBQ1QsU0FBUyxFQUNULFNBQVMsR0FDVixNQUFNLFFBQVEsQ0FBQztBQUVoQixPQUFPLEVBQ0wsU0FBUyxFQUNULEtBQUssRUFDTCxZQUFZLEdBQ2IsTUFBTSxTQUFTLENBQUM7QUFDakIsT0FBUSxFQUNOLG9CQUFvQixFQUNwQixhQUFhLEdBQ2QsTUFBTSxnQkFBZ0IsQ0FBQztBQUV4QixPQUFPLEVBQ0wsYUFBYSxFQUNiLGFBQWEsRUFDYixhQUFhLEVBQ2IsYUFBYSxFQUNiLGFBQWEsRUFDYixhQUFhLEVBQ2IsYUFBYSxFQUNiLGFBQWEsRUFDYixhQUFhLEVBQ2IsYUFBYSxHQUNkLE1BQU0saUJBQWlCLENBQUM7QUFHekIsa0JBQWtCO0FBRWxCLE9BQU8sRUFVTCxrQkFBa0IsRUFDbEIsd0JBQXdCLEVBQ3hCLGFBQWEsRUFFYixxQkFBcUIsRUFDckIsZUFBZSxFQUNmLGVBQWUsRUFDZixjQUFjLEVBQ2QsVUFBVSxFQUNWLFVBQVUsRUFDVixjQUFjLEVBQ2QsZUFBZSxFQUNmLGVBQWUsRUFDZixZQUFZLEdBQ2IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHtMaWZlY3ljbGVIb29rc0ZlYXR1cmUsIGdldEhvc3RFbGVtZW50LCBnZXRSZW5kZXJlZFRleHQsIHJlbmRlckNvbXBvbmVudCwgd2hlblJlbmRlcmVkfSBmcm9tICcuL2NvbXBvbmVudCc7XG5pbXBvcnQge2RlZmluZUJhc2UsIGRlZmluZUNvbXBvbmVudCwgZGVmaW5lRGlyZWN0aXZlLCBkZWZpbmVOZ01vZHVsZSwgZGVmaW5lUGlwZX0gZnJvbSAnLi9kZWZpbml0aW9uJztcbmltcG9ydCB7SW5oZXJpdERlZmluaXRpb25GZWF0dXJlfSBmcm9tICcuL2ZlYXR1cmVzL2luaGVyaXRfZGVmaW5pdGlvbl9mZWF0dXJlJztcbmltcG9ydCB7TmdPbkNoYW5nZXNGZWF0dXJlfSBmcm9tICcuL2ZlYXR1cmVzL25nX29uY2hhbmdlc19mZWF0dXJlJztcbmltcG9ydCB7UHVibGljRmVhdHVyZX0gZnJvbSAnLi9mZWF0dXJlcy9wdWJsaWNfZmVhdHVyZSc7XG5pbXBvcnQge0Jhc2VEZWYsIENvbXBvbmVudERlZiwgQ29tcG9uZW50RGVmSW50ZXJuYWwsIENvbXBvbmVudFRlbXBsYXRlLCBDb21wb25lbnRUeXBlLCBEaXJlY3RpdmVEZWYsIERpcmVjdGl2ZURlZkZsYWdzLCBEaXJlY3RpdmVEZWZJbnRlcm5hbCwgRGlyZWN0aXZlVHlwZSwgUGlwZURlZn0gZnJvbSAnLi9pbnRlcmZhY2VzL2RlZmluaXRpb24nO1xuXG5leHBvcnQge0NvbXBvbmVudEZhY3RvcnksIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgQ29tcG9uZW50UmVmLCBXUkFQX1JFTkRFUkVSX0ZBQ1RPUlkyfSBmcm9tICcuL2NvbXBvbmVudF9yZWYnO1xuZXhwb3J0IHtRVUVSWV9SRUFEX0NPTlRBSU5FUl9SRUYsIFFVRVJZX1JFQURfRUxFTUVOVF9SRUYsIFFVRVJZX1JFQURfRlJPTV9OT0RFLCBRVUVSWV9SRUFEX1RFTVBMQVRFX1JFRiwgZGlyZWN0aXZlSW5qZWN0LCBnZXRGYWN0b3J5T2YsIGdldEluaGVyaXRlZEZhY3RvcnksIGluamVjdEF0dHJpYnV0ZSwgaW5qZWN0Q2hhbmdlRGV0ZWN0b3JSZWYsIGluamVjdENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgaW5qZWN0RWxlbWVudFJlZiwgaW5qZWN0VGVtcGxhdGVSZWYsIGluamVjdFZpZXdDb250YWluZXJSZWYsIHRlbXBsYXRlUmVmRXh0cmFjdG9yfSBmcm9tICcuL2RpJztcbmV4cG9ydCB7UmVuZGVyRmxhZ3N9IGZyb20gJy4vaW50ZXJmYWNlcy9kZWZpbml0aW9uJztcbmV4cG9ydCB7Q3NzU2VsZWN0b3JMaXN0fSBmcm9tICcuL2ludGVyZmFjZXMvcHJvamVjdGlvbic7XG5cbi8vIGNsYW5nLWZvcm1hdCBvZmZcbmV4cG9ydCB7XG5cbiAgTk9fQ0hBTkdFLFxuXG4gIGJpbmQsXG4gIGludGVycG9sYXRpb24xLFxuICBpbnRlcnBvbGF0aW9uMixcbiAgaW50ZXJwb2xhdGlvbjMsXG4gIGludGVycG9sYXRpb240LFxuICBpbnRlcnBvbGF0aW9uNSxcbiAgaW50ZXJwb2xhdGlvbjYsXG4gIGludGVycG9sYXRpb243LFxuICBpbnRlcnBvbGF0aW9uOCxcbiAgaW50ZXJwb2xhdGlvblYsXG5cbiAgY29udGFpbmVyLFxuICBjb250YWluZXJSZWZyZXNoU3RhcnQsXG4gIGNvbnRhaW5lclJlZnJlc2hFbmQsXG5cbiAgbmV4dENvbnRleHQsXG5cbiAgZWxlbWVudCxcbiAgZWxlbWVudEF0dHJpYnV0ZSxcbiAgZWxlbWVudENsYXNzUHJvcCxcbiAgZWxlbWVudEVuZCxcbiAgZWxlbWVudFByb3BlcnR5LFxuICBlbGVtZW50U3RhcnQsXG5cbiAgZWxlbWVudENvbnRhaW5lclN0YXJ0LFxuICBlbGVtZW50Q29udGFpbmVyRW5kLFxuXG4gIGVsZW1lbnRTdHlsaW5nLFxuICBlbGVtZW50U3R5bGluZ01hcCxcbiAgZWxlbWVudFN0eWxlUHJvcCxcbiAgZWxlbWVudFN0eWxpbmdBcHBseSxcblxuICBnZXRDdXJyZW50VmlldyxcbiAgcmVzdG9yZVZpZXcsXG5cbiAgbGlzdGVuZXIsXG4gIHN0b3JlLFxuICBsb2FkLFxuICBsb2FkRGlyZWN0aXZlLFxuXG4gIG5hbWVzcGFjZUhUTUwsXG4gIG5hbWVzcGFjZU1hdGhNTCxcbiAgbmFtZXNwYWNlU1ZHLFxuXG4gIHByb2plY3Rpb24sXG4gIHByb2plY3Rpb25EZWYsXG5cbiAgdGV4dCxcbiAgdGV4dEJpbmRpbmcsXG4gIHRlbXBsYXRlLFxuXG4gIHJlZmVyZW5jZSxcblxuICByZXNlcnZlU2xvdHMsXG5cbiAgZW1iZWRkZWRWaWV3U3RhcnQsXG4gIGVtYmVkZGVkVmlld0VuZCxcbiAgZGV0ZWN0Q2hhbmdlcyxcbiAgbWFya0RpcnR5LFxuICB0aWNrLFxufSBmcm9tICcuL2luc3RydWN0aW9ucyc7XG5cbmV4cG9ydCB7XG4gIGkxOG5BcHBseSxcbiAgaTE4bk1hcHBpbmcsXG4gIGkxOG5JbnRlcnBvbGF0aW9uMSxcbiAgaTE4bkludGVycG9sYXRpb24yLFxuICBpMThuSW50ZXJwb2xhdGlvbjMsXG4gIGkxOG5JbnRlcnBvbGF0aW9uNCxcbiAgaTE4bkludGVycG9sYXRpb241LFxuICBpMThuSW50ZXJwb2xhdGlvbjYsXG4gIGkxOG5JbnRlcnBvbGF0aW9uNyxcbiAgaTE4bkludGVycG9sYXRpb244LFxuICBpMThuSW50ZXJwb2xhdGlvblYsXG4gIGkxOG5FeHBNYXBwaW5nLFxuICBJMThuSW5zdHJ1Y3Rpb24sXG4gIEkxOG5FeHBJbnN0cnVjdGlvblxufSBmcm9tICcuL2kxOG4nO1xuXG5leHBvcnQge05nTW9kdWxlRmFjdG9yeSwgTmdNb2R1bGVSZWYsIE5nTW9kdWxlVHlwZX0gZnJvbSAnLi9uZ19tb2R1bGVfcmVmJztcblxuZXhwb3J0IHtcbiAgICBBdHRyaWJ1dGVNYXJrZXJcbn0gZnJvbSAnLi9pbnRlcmZhY2VzL25vZGUnO1xuXG5leHBvcnQge1xuICBwaXBlLFxuICBwaXBlQmluZDEsXG4gIHBpcGVCaW5kMixcbiAgcGlwZUJpbmQzLFxuICBwaXBlQmluZDQsXG4gIHBpcGVCaW5kVixcbn0gZnJvbSAnLi9waXBlJztcblxuZXhwb3J0IHtcbiAgUXVlcnlMaXN0LFxuICBxdWVyeSxcbiAgcXVlcnlSZWZyZXNoLFxufSBmcm9tICcuL3F1ZXJ5JztcbmV4cG9ydCAge1xuICByZWdpc3RlckNvbnRlbnRRdWVyeSxcbiAgbG9hZFF1ZXJ5TGlzdCxcbn0gZnJvbSAnLi9pbnN0cnVjdGlvbnMnO1xuXG5leHBvcnQge1xuICBwdXJlRnVuY3Rpb24wLFxuICBwdXJlRnVuY3Rpb24xLFxuICBwdXJlRnVuY3Rpb24yLFxuICBwdXJlRnVuY3Rpb24zLFxuICBwdXJlRnVuY3Rpb240LFxuICBwdXJlRnVuY3Rpb241LFxuICBwdXJlRnVuY3Rpb242LFxuICBwdXJlRnVuY3Rpb243LFxuICBwdXJlRnVuY3Rpb244LFxuICBwdXJlRnVuY3Rpb25WLFxufSBmcm9tICcuL3B1cmVfZnVuY3Rpb24nO1xuXG5cbi8vIGNsYW5nLWZvcm1hdCBvblxuXG5leHBvcnQge1xuICBCYXNlRGVmLFxuICBDb21wb25lbnREZWYsXG4gIENvbXBvbmVudERlZkludGVybmFsLFxuICBDb21wb25lbnRUZW1wbGF0ZSxcbiAgQ29tcG9uZW50VHlwZSxcbiAgRGlyZWN0aXZlRGVmLFxuICBEaXJlY3RpdmVEZWZGbGFncyxcbiAgRGlyZWN0aXZlRGVmSW50ZXJuYWwsXG4gIERpcmVjdGl2ZVR5cGUsXG4gIE5nT25DaGFuZ2VzRmVhdHVyZSxcbiAgSW5oZXJpdERlZmluaXRpb25GZWF0dXJlLFxuICBQdWJsaWNGZWF0dXJlLFxuICBQaXBlRGVmLFxuICBMaWZlY3ljbGVIb29rc0ZlYXR1cmUsXG4gIGRlZmluZUNvbXBvbmVudCxcbiAgZGVmaW5lRGlyZWN0aXZlLFxuICBkZWZpbmVOZ01vZHVsZSxcbiAgZGVmaW5lQmFzZSxcbiAgZGVmaW5lUGlwZSxcbiAgZ2V0SG9zdEVsZW1lbnQsXG4gIGdldFJlbmRlcmVkVGV4dCxcbiAgcmVuZGVyQ29tcG9uZW50LFxuICB3aGVuUmVuZGVyZWQsXG59O1xuIl19