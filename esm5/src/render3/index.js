/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { LifecycleHooksFeature, getHostElement, getRenderedText, renderComponent, whenRendered } from './component';
import { defineBase, defineComponent, defineDirective, defineNgModule, definePipe } from './definition';
import { InheritDefinitionFeature } from './features/inherit_definition_feature';
import { NgOnChangesFeature } from './features/ng_onchanges_feature';
import { PublicFeature } from './features/public_feature';
export { ComponentFactory, ComponentFactoryResolver, ComponentRef, WRAP_RENDERER_FACTORY2, injectComponentFactoryResolver } from './component_ref';
export { directiveInject, getFactoryOf, getInheritedFactory, injectAttribute, injectRenderer2 } from './di';
// clang-format off
export { NO_CHANGE, bind, interpolation1, interpolation2, interpolation3, interpolation4, interpolation5, interpolation6, interpolation7, interpolation8, interpolationV, container, containerRefreshStart, containerRefreshEnd, nextContext, element, elementAttribute, elementClassProp, elementEnd, elementProperty, elementStart, elementContainerStart, elementContainerEnd, elementStyling, elementStylingMap, elementStyleProp, elementStylingApply, getCurrentView, restoreView, listener, store, load, loadDirective, namespaceHTML, namespaceMathML, namespaceSVG, projection, projectionDef, text, textBinding, template, reference, embeddedViewStart, embeddedViewEnd, detectChanges, markDirty, tick, } from './instructions';
export { i18nApply, i18nMapping, i18nInterpolation1, i18nInterpolation2, i18nInterpolation3, i18nInterpolation4, i18nInterpolation5, i18nInterpolation6, i18nInterpolation7, i18nInterpolation8, i18nInterpolationV, i18nExpMapping } from './i18n';
export { NgModuleFactory, NgModuleRef } from './ng_module_ref';
export { pipe, pipeBind1, pipeBind2, pipeBind3, pipeBind4, pipeBindV, } from './pipe';
export { QueryList, query, queryRefresh, } from './query';
export { registerContentQuery, loadQueryList, } from './instructions';
export { pureFunction0, pureFunction1, pureFunction2, pureFunction3, pureFunction4, pureFunction5, pureFunction6, pureFunction7, pureFunction8, pureFunctionV, } from './pure_function';
export { templateRefExtractor, QUERY_READ_ELEMENT_REF, QUERY_READ_CONTAINER_REF, QUERY_READ_FROM_NODE, QUERY_READ_TEMPLATE_REF } from './view_engine_compatibility_prebound';
// clang-format on
export { NgOnChangesFeature, InheritDefinitionFeature, PublicFeature, LifecycleHooksFeature, defineComponent, defineDirective, defineNgModule, defineBase, definePipe, getHostElement, getRenderedText, renderComponent, whenRendered, };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9yZW5kZXIzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUVILE9BQU8sRUFBQyxxQkFBcUIsRUFBRSxjQUFjLEVBQUUsZUFBZSxFQUFFLGVBQWUsRUFBRSxZQUFZLEVBQUMsTUFBTSxhQUFhLENBQUM7QUFDbEgsT0FBTyxFQUFDLFVBQVUsRUFBRSxlQUFlLEVBQUUsZUFBZSxFQUFFLGNBQWMsRUFBRSxVQUFVLEVBQUMsTUFBTSxjQUFjLENBQUM7QUFDdEcsT0FBTyxFQUFDLHdCQUF3QixFQUFDLE1BQU0sdUNBQXVDLENBQUM7QUFDL0UsT0FBTyxFQUFDLGtCQUFrQixFQUFDLE1BQU0saUNBQWlDLENBQUM7QUFDbkUsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBR3hELE9BQU8sRUFBQyxnQkFBZ0IsRUFBRSx3QkFBd0IsRUFBRSxZQUFZLEVBQUUsc0JBQXNCLEVBQUUsOEJBQThCLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUNqSixPQUFPLEVBQUMsZUFBZSxFQUFFLFlBQVksRUFBRSxtQkFBbUIsRUFBRSxlQUFlLEVBQUUsZUFBZSxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBSTFHLG1CQUFtQjtBQUNuQixPQUFPLEVBRUwsU0FBUyxFQUVULElBQUksRUFDSixjQUFjLEVBQ2QsY0FBYyxFQUNkLGNBQWMsRUFDZCxjQUFjLEVBQ2QsY0FBYyxFQUNkLGNBQWMsRUFDZCxjQUFjLEVBQ2QsY0FBYyxFQUNkLGNBQWMsRUFFZCxTQUFTLEVBQ1QscUJBQXFCLEVBQ3JCLG1CQUFtQixFQUVuQixXQUFXLEVBRVgsT0FBTyxFQUNQLGdCQUFnQixFQUNoQixnQkFBZ0IsRUFDaEIsVUFBVSxFQUNWLGVBQWUsRUFDZixZQUFZLEVBRVoscUJBQXFCLEVBQ3JCLG1CQUFtQixFQUVuQixjQUFjLEVBQ2QsaUJBQWlCLEVBQ2pCLGdCQUFnQixFQUNoQixtQkFBbUIsRUFFbkIsY0FBYyxFQUNkLFdBQVcsRUFFWCxRQUFRLEVBQ1IsS0FBSyxFQUNMLElBQUksRUFDSixhQUFhLEVBRWIsYUFBYSxFQUNiLGVBQWUsRUFDZixZQUFZLEVBRVosVUFBVSxFQUNWLGFBQWEsRUFFYixJQUFJLEVBQ0osV0FBVyxFQUNYLFFBQVEsRUFFUixTQUFTLEVBRVQsaUJBQWlCLEVBQ2pCLGVBQWUsRUFDZixhQUFhLEVBQ2IsU0FBUyxFQUNULElBQUksR0FDTCxNQUFNLGdCQUFnQixDQUFDO0FBRXhCLE9BQU8sRUFDTCxTQUFTLEVBQ1QsV0FBVyxFQUNYLGtCQUFrQixFQUNsQixrQkFBa0IsRUFDbEIsa0JBQWtCLEVBQ2xCLGtCQUFrQixFQUNsQixrQkFBa0IsRUFDbEIsa0JBQWtCLEVBQ2xCLGtCQUFrQixFQUNsQixrQkFBa0IsRUFDbEIsa0JBQWtCLEVBQ2xCLGNBQWMsRUFHZixNQUFNLFFBQVEsQ0FBQztBQUVoQixPQUFPLEVBQUMsZUFBZSxFQUFFLFdBQVcsRUFBZSxNQUFNLGlCQUFpQixDQUFDO0FBTTNFLE9BQU8sRUFDTCxJQUFJLEVBQ0osU0FBUyxFQUNULFNBQVMsRUFDVCxTQUFTLEVBQ1QsU0FBUyxFQUNULFNBQVMsR0FDVixNQUFNLFFBQVEsQ0FBQztBQUVoQixPQUFPLEVBQ0wsU0FBUyxFQUNULEtBQUssRUFDTCxZQUFZLEdBQ2IsTUFBTSxTQUFTLENBQUM7QUFDakIsT0FBUSxFQUNOLG9CQUFvQixFQUNwQixhQUFhLEdBQ2QsTUFBTSxnQkFBZ0IsQ0FBQztBQUV4QixPQUFPLEVBQ0wsYUFBYSxFQUNiLGFBQWEsRUFDYixhQUFhLEVBQ2IsYUFBYSxFQUNiLGFBQWEsRUFDYixhQUFhLEVBQ2IsYUFBYSxFQUNiLGFBQWEsRUFDYixhQUFhLEVBQ2IsYUFBYSxHQUNkLE1BQU0saUJBQWlCLENBQUM7QUFFekIsT0FBTyxFQUFDLG9CQUFvQixFQUFFLHNCQUFzQixFQUFFLHdCQUF3QixFQUFFLG9CQUFvQixFQUFFLHVCQUF1QixFQUFDLE1BQU0sc0NBQXNDLENBQUM7QUFHM0ssa0JBQWtCO0FBRWxCLE9BQU8sRUFVTCxrQkFBa0IsRUFDbEIsd0JBQXdCLEVBQ3hCLGFBQWEsRUFFYixxQkFBcUIsRUFDckIsZUFBZSxFQUNmLGVBQWUsRUFDZixjQUFjLEVBQ2QsVUFBVSxFQUNWLFVBQVUsRUFDVixjQUFjLEVBQ2QsZUFBZSxFQUNmLGVBQWUsRUFDZixZQUFZLEdBQ2IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHtMaWZlY3ljbGVIb29rc0ZlYXR1cmUsIGdldEhvc3RFbGVtZW50LCBnZXRSZW5kZXJlZFRleHQsIHJlbmRlckNvbXBvbmVudCwgd2hlblJlbmRlcmVkfSBmcm9tICcuL2NvbXBvbmVudCc7XG5pbXBvcnQge2RlZmluZUJhc2UsIGRlZmluZUNvbXBvbmVudCwgZGVmaW5lRGlyZWN0aXZlLCBkZWZpbmVOZ01vZHVsZSwgZGVmaW5lUGlwZX0gZnJvbSAnLi9kZWZpbml0aW9uJztcbmltcG9ydCB7SW5oZXJpdERlZmluaXRpb25GZWF0dXJlfSBmcm9tICcuL2ZlYXR1cmVzL2luaGVyaXRfZGVmaW5pdGlvbl9mZWF0dXJlJztcbmltcG9ydCB7TmdPbkNoYW5nZXNGZWF0dXJlfSBmcm9tICcuL2ZlYXR1cmVzL25nX29uY2hhbmdlc19mZWF0dXJlJztcbmltcG9ydCB7UHVibGljRmVhdHVyZX0gZnJvbSAnLi9mZWF0dXJlcy9wdWJsaWNfZmVhdHVyZSc7XG5pbXBvcnQge0Jhc2VEZWYsIENvbXBvbmVudERlZiwgQ29tcG9uZW50RGVmSW50ZXJuYWwsIENvbXBvbmVudFRlbXBsYXRlLCBDb21wb25lbnRUeXBlLCBEaXJlY3RpdmVEZWYsIERpcmVjdGl2ZURlZkZsYWdzLCBEaXJlY3RpdmVEZWZJbnRlcm5hbCwgRGlyZWN0aXZlVHlwZSwgUGlwZURlZn0gZnJvbSAnLi9pbnRlcmZhY2VzL2RlZmluaXRpb24nO1xuXG5leHBvcnQge0NvbXBvbmVudEZhY3RvcnksIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgQ29tcG9uZW50UmVmLCBXUkFQX1JFTkRFUkVSX0ZBQ1RPUlkyLCBpbmplY3RDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXJ9IGZyb20gJy4vY29tcG9uZW50X3JlZic7XG5leHBvcnQge2RpcmVjdGl2ZUluamVjdCwgZ2V0RmFjdG9yeU9mLCBnZXRJbmhlcml0ZWRGYWN0b3J5LCBpbmplY3RBdHRyaWJ1dGUsIGluamVjdFJlbmRlcmVyMn0gZnJvbSAnLi9kaSc7XG5leHBvcnQge1JlbmRlckZsYWdzfSBmcm9tICcuL2ludGVyZmFjZXMvZGVmaW5pdGlvbic7XG5leHBvcnQge0Nzc1NlbGVjdG9yTGlzdH0gZnJvbSAnLi9pbnRlcmZhY2VzL3Byb2plY3Rpb24nO1xuXG4vLyBjbGFuZy1mb3JtYXQgb2ZmXG5leHBvcnQge1xuXG4gIE5PX0NIQU5HRSxcblxuICBiaW5kLFxuICBpbnRlcnBvbGF0aW9uMSxcbiAgaW50ZXJwb2xhdGlvbjIsXG4gIGludGVycG9sYXRpb24zLFxuICBpbnRlcnBvbGF0aW9uNCxcbiAgaW50ZXJwb2xhdGlvbjUsXG4gIGludGVycG9sYXRpb242LFxuICBpbnRlcnBvbGF0aW9uNyxcbiAgaW50ZXJwb2xhdGlvbjgsXG4gIGludGVycG9sYXRpb25WLFxuXG4gIGNvbnRhaW5lcixcbiAgY29udGFpbmVyUmVmcmVzaFN0YXJ0LFxuICBjb250YWluZXJSZWZyZXNoRW5kLFxuXG4gIG5leHRDb250ZXh0LFxuXG4gIGVsZW1lbnQsXG4gIGVsZW1lbnRBdHRyaWJ1dGUsXG4gIGVsZW1lbnRDbGFzc1Byb3AsXG4gIGVsZW1lbnRFbmQsXG4gIGVsZW1lbnRQcm9wZXJ0eSxcbiAgZWxlbWVudFN0YXJ0LFxuXG4gIGVsZW1lbnRDb250YWluZXJTdGFydCxcbiAgZWxlbWVudENvbnRhaW5lckVuZCxcblxuICBlbGVtZW50U3R5bGluZyxcbiAgZWxlbWVudFN0eWxpbmdNYXAsXG4gIGVsZW1lbnRTdHlsZVByb3AsXG4gIGVsZW1lbnRTdHlsaW5nQXBwbHksXG5cbiAgZ2V0Q3VycmVudFZpZXcsXG4gIHJlc3RvcmVWaWV3LFxuXG4gIGxpc3RlbmVyLFxuICBzdG9yZSxcbiAgbG9hZCxcbiAgbG9hZERpcmVjdGl2ZSxcblxuICBuYW1lc3BhY2VIVE1MLFxuICBuYW1lc3BhY2VNYXRoTUwsXG4gIG5hbWVzcGFjZVNWRyxcblxuICBwcm9qZWN0aW9uLFxuICBwcm9qZWN0aW9uRGVmLFxuXG4gIHRleHQsXG4gIHRleHRCaW5kaW5nLFxuICB0ZW1wbGF0ZSxcblxuICByZWZlcmVuY2UsXG5cbiAgZW1iZWRkZWRWaWV3U3RhcnQsXG4gIGVtYmVkZGVkVmlld0VuZCxcbiAgZGV0ZWN0Q2hhbmdlcyxcbiAgbWFya0RpcnR5LFxuICB0aWNrLFxufSBmcm9tICcuL2luc3RydWN0aW9ucyc7XG5cbmV4cG9ydCB7XG4gIGkxOG5BcHBseSxcbiAgaTE4bk1hcHBpbmcsXG4gIGkxOG5JbnRlcnBvbGF0aW9uMSxcbiAgaTE4bkludGVycG9sYXRpb24yLFxuICBpMThuSW50ZXJwb2xhdGlvbjMsXG4gIGkxOG5JbnRlcnBvbGF0aW9uNCxcbiAgaTE4bkludGVycG9sYXRpb241LFxuICBpMThuSW50ZXJwb2xhdGlvbjYsXG4gIGkxOG5JbnRlcnBvbGF0aW9uNyxcbiAgaTE4bkludGVycG9sYXRpb244LFxuICBpMThuSW50ZXJwb2xhdGlvblYsXG4gIGkxOG5FeHBNYXBwaW5nLFxuICBJMThuSW5zdHJ1Y3Rpb24sXG4gIEkxOG5FeHBJbnN0cnVjdGlvblxufSBmcm9tICcuL2kxOG4nO1xuXG5leHBvcnQge05nTW9kdWxlRmFjdG9yeSwgTmdNb2R1bGVSZWYsIE5nTW9kdWxlVHlwZX0gZnJvbSAnLi9uZ19tb2R1bGVfcmVmJztcblxuZXhwb3J0IHtcbiAgICBBdHRyaWJ1dGVNYXJrZXJcbn0gZnJvbSAnLi9pbnRlcmZhY2VzL25vZGUnO1xuXG5leHBvcnQge1xuICBwaXBlLFxuICBwaXBlQmluZDEsXG4gIHBpcGVCaW5kMixcbiAgcGlwZUJpbmQzLFxuICBwaXBlQmluZDQsXG4gIHBpcGVCaW5kVixcbn0gZnJvbSAnLi9waXBlJztcblxuZXhwb3J0IHtcbiAgUXVlcnlMaXN0LFxuICBxdWVyeSxcbiAgcXVlcnlSZWZyZXNoLFxufSBmcm9tICcuL3F1ZXJ5JztcbmV4cG9ydCAge1xuICByZWdpc3RlckNvbnRlbnRRdWVyeSxcbiAgbG9hZFF1ZXJ5TGlzdCxcbn0gZnJvbSAnLi9pbnN0cnVjdGlvbnMnO1xuXG5leHBvcnQge1xuICBwdXJlRnVuY3Rpb24wLFxuICBwdXJlRnVuY3Rpb24xLFxuICBwdXJlRnVuY3Rpb24yLFxuICBwdXJlRnVuY3Rpb24zLFxuICBwdXJlRnVuY3Rpb240LFxuICBwdXJlRnVuY3Rpb241LFxuICBwdXJlRnVuY3Rpb242LFxuICBwdXJlRnVuY3Rpb243LFxuICBwdXJlRnVuY3Rpb244LFxuICBwdXJlRnVuY3Rpb25WLFxufSBmcm9tICcuL3B1cmVfZnVuY3Rpb24nO1xuXG5leHBvcnQge3RlbXBsYXRlUmVmRXh0cmFjdG9yLCBRVUVSWV9SRUFEX0VMRU1FTlRfUkVGLCBRVUVSWV9SRUFEX0NPTlRBSU5FUl9SRUYsIFFVRVJZX1JFQURfRlJPTV9OT0RFLCBRVUVSWV9SRUFEX1RFTVBMQVRFX1JFRn0gZnJvbSAnLi92aWV3X2VuZ2luZV9jb21wYXRpYmlsaXR5X3ByZWJvdW5kJztcblxuXG4vLyBjbGFuZy1mb3JtYXQgb25cblxuZXhwb3J0IHtcbiAgQmFzZURlZixcbiAgQ29tcG9uZW50RGVmLFxuICBDb21wb25lbnREZWZJbnRlcm5hbCxcbiAgQ29tcG9uZW50VGVtcGxhdGUsXG4gIENvbXBvbmVudFR5cGUsXG4gIERpcmVjdGl2ZURlZixcbiAgRGlyZWN0aXZlRGVmRmxhZ3MsXG4gIERpcmVjdGl2ZURlZkludGVybmFsLFxuICBEaXJlY3RpdmVUeXBlLFxuICBOZ09uQ2hhbmdlc0ZlYXR1cmUsXG4gIEluaGVyaXREZWZpbml0aW9uRmVhdHVyZSxcbiAgUHVibGljRmVhdHVyZSxcbiAgUGlwZURlZixcbiAgTGlmZWN5Y2xlSG9va3NGZWF0dXJlLFxuICBkZWZpbmVDb21wb25lbnQsXG4gIGRlZmluZURpcmVjdGl2ZSxcbiAgZGVmaW5lTmdNb2R1bGUsXG4gIGRlZmluZUJhc2UsXG4gIGRlZmluZVBpcGUsXG4gIGdldEhvc3RFbGVtZW50LFxuICBnZXRSZW5kZXJlZFRleHQsXG4gIHJlbmRlckNvbXBvbmVudCxcbiAgd2hlblJlbmRlcmVkLFxufTtcbiJdfQ==