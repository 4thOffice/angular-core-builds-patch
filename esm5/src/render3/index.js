/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { LifecycleHooksFeature, getHostElement, getRenderedText, renderComponent, whenRendered } from './component';
import { defineBase, defineComponent, defineDirective, defineNgModule, definePipe } from './definition';
import { InheritDefinitionFeature } from './features/inherit_definition_feature';
import { NgOnChangesFeature } from './features/ng_onchanges_feature';
import { ProvidersFeature } from './features/providers_feature';
export { ComponentFactory, ComponentFactoryResolver, ComponentRef, WRAP_RENDERER_FACTORY2, injectComponentFactoryResolver } from './component_ref';
export { getFactoryOf, getInheritedFactory } from './di';
// clang-format off
export { bind, interpolation1, interpolation2, interpolation3, interpolation4, interpolation5, interpolation6, interpolation7, interpolation8, interpolationV, container, containerRefreshStart, containerRefreshEnd, nextContext, element, elementAttribute, elementClassProp, elementEnd, elementProperty, elementStart, elementContainerStart, elementContainerEnd, elementStyling, elementStylingMap, elementStyleProp, elementStylingApply, listener, store, load, namespaceHTML, namespaceMathML, namespaceSVG, projection, projectionDef, text, textBinding, template, reference, embeddedViewStart, embeddedViewEnd, detectChanges, markDirty, tick, directiveInject, injectAttribute, } from './instructions';
export { getCurrentView, restoreView, enableBindings, disableBindings, } from './state';
export { i18n, i18nAttributes, i18nExp, i18nStart, i18nEnd, i18nApply, i18nPostprocess } from './i18n';
export { NgModuleFactory, NgModuleRef } from './ng_module_ref';
export { setClassMetadata, } from './metadata';
export { pipe, pipeBind1, pipeBind2, pipeBind3, pipeBind4, pipeBindV, } from './pipe';
export { QueryList, query, queryRefresh, } from './query';
export { registerContentQuery, loadQueryList, } from './instructions';
export { pureFunction0, pureFunction1, pureFunction2, pureFunction3, pureFunction4, pureFunction5, pureFunction6, pureFunction7, pureFunction8, pureFunctionV, } from './pure_function';
export { templateRefExtractor } from './view_engine_compatibility_prebound';
// clang-format on
export { NgOnChangesFeature, InheritDefinitionFeature, ProvidersFeature, LifecycleHooksFeature, defineComponent, defineDirective, defineNgModule, defineBase, definePipe, getHostElement, getRenderedText, renderComponent, whenRendered, };
export { NO_CHANGE } from './tokens';

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9yZW5kZXIzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUNILE9BQU8sRUFBQyxxQkFBcUIsRUFBRSxjQUFjLEVBQUUsZUFBZSxFQUFFLGVBQWUsRUFBRSxZQUFZLEVBQUMsTUFBTSxhQUFhLENBQUM7QUFDbEgsT0FBTyxFQUFDLFVBQVUsRUFBRSxlQUFlLEVBQUUsZUFBZSxFQUFFLGNBQWMsRUFBRSxVQUFVLEVBQUMsTUFBTSxjQUFjLENBQUM7QUFDdEcsT0FBTyxFQUFDLHdCQUF3QixFQUFDLE1BQU0sdUNBQXVDLENBQUM7QUFDL0UsT0FBTyxFQUFDLGtCQUFrQixFQUFDLE1BQU0saUNBQWlDLENBQUM7QUFDbkUsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sOEJBQThCLENBQUM7QUFHOUQsT0FBTyxFQUFDLGdCQUFnQixFQUFFLHdCQUF3QixFQUFFLFlBQVksRUFBRSxzQkFBc0IsRUFBRSw4QkFBOEIsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQ2pKLE9BQU8sRUFBQyxZQUFZLEVBQUUsbUJBQW1CLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFJdkQsbUJBQW1CO0FBQ25CLE9BQU8sRUFDTCxJQUFJLEVBQ0osY0FBYyxFQUNkLGNBQWMsRUFDZCxjQUFjLEVBQ2QsY0FBYyxFQUNkLGNBQWMsRUFDZCxjQUFjLEVBQ2QsY0FBYyxFQUNkLGNBQWMsRUFDZCxjQUFjLEVBRWQsU0FBUyxFQUNULHFCQUFxQixFQUNyQixtQkFBbUIsRUFFbkIsV0FBVyxFQUVYLE9BQU8sRUFDUCxnQkFBZ0IsRUFDaEIsZ0JBQWdCLEVBQ2hCLFVBQVUsRUFDVixlQUFlLEVBQ2YsWUFBWSxFQUVaLHFCQUFxQixFQUNyQixtQkFBbUIsRUFFbkIsY0FBYyxFQUNkLGlCQUFpQixFQUNqQixnQkFBZ0IsRUFDaEIsbUJBQW1CLEVBRW5CLFFBQVEsRUFDUixLQUFLLEVBQ0wsSUFBSSxFQUVKLGFBQWEsRUFDYixlQUFlLEVBQ2YsWUFBWSxFQUVaLFVBQVUsRUFDVixhQUFhLEVBRWIsSUFBSSxFQUNKLFdBQVcsRUFDWCxRQUFRLEVBRVIsU0FBUyxFQUVULGlCQUFpQixFQUNqQixlQUFlLEVBQ2YsYUFBYSxFQUNiLFNBQVMsRUFDVCxJQUFJLEVBRUosZUFBZSxFQUNmLGVBQWUsR0FDaEIsTUFBTSxnQkFBZ0IsQ0FBQztBQUV4QixPQUFPLEVBQ0wsY0FBYyxFQUNkLFdBQVcsRUFFWCxjQUFjLEVBQ2QsZUFBZSxHQUNoQixNQUFNLFNBQVMsQ0FBQztBQUVqQixPQUFPLEVBQ0wsSUFBSSxFQUNKLGNBQWMsRUFDZCxPQUFPLEVBQ1AsU0FBUyxFQUNULE9BQU8sRUFDUCxTQUFTLEVBQ1QsZUFBZSxFQUNoQixNQUFNLFFBQVEsQ0FBQztBQUVoQixPQUFPLEVBQUMsZUFBZSxFQUFFLFdBQVcsRUFBZSxNQUFNLGlCQUFpQixDQUFDO0FBTTNFLE9BQU8sRUFDTCxnQkFBZ0IsR0FDakIsTUFBTSxZQUFZLENBQUM7QUFFcEIsT0FBTyxFQUNMLElBQUksRUFDSixTQUFTLEVBQ1QsU0FBUyxFQUNULFNBQVMsRUFDVCxTQUFTLEVBQ1QsU0FBUyxHQUNWLE1BQU0sUUFBUSxDQUFDO0FBRWhCLE9BQU8sRUFDTCxTQUFTLEVBQ1QsS0FBSyxFQUNMLFlBQVksR0FDYixNQUFNLFNBQVMsQ0FBQztBQUNqQixPQUFRLEVBQ04sb0JBQW9CLEVBQ3BCLGFBQWEsR0FDZCxNQUFNLGdCQUFnQixDQUFDO0FBRXhCLE9BQU8sRUFDTCxhQUFhLEVBQ2IsYUFBYSxFQUNiLGFBQWEsRUFDYixhQUFhLEVBQ2IsYUFBYSxFQUNiLGFBQWEsRUFDYixhQUFhLEVBQ2IsYUFBYSxFQUNiLGFBQWEsRUFDYixhQUFhLEdBQ2QsTUFBTSxpQkFBaUIsQ0FBQztBQUV6QixPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSxzQ0FBc0MsQ0FBQztBQUcxRSxrQkFBa0I7QUFFbEIsT0FBTyxFQVVMLGtCQUFrQixFQUNsQix3QkFBd0IsRUFDeEIsZ0JBQWdCLEVBR2hCLHFCQUFxQixFQUNyQixlQUFlLEVBQ2YsZUFBZSxFQUNmLGNBQWMsRUFDZCxVQUFVLEVBQ1YsVUFBVSxFQUNWLGNBQWMsRUFDZCxlQUFlLEVBQ2YsZUFBZSxFQUNmLFlBQVksR0FDYixDQUFDO0FBRUYsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLFVBQVUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmltcG9ydCB7TGlmZWN5Y2xlSG9va3NGZWF0dXJlLCBnZXRIb3N0RWxlbWVudCwgZ2V0UmVuZGVyZWRUZXh0LCByZW5kZXJDb21wb25lbnQsIHdoZW5SZW5kZXJlZH0gZnJvbSAnLi9jb21wb25lbnQnO1xuaW1wb3J0IHtkZWZpbmVCYXNlLCBkZWZpbmVDb21wb25lbnQsIGRlZmluZURpcmVjdGl2ZSwgZGVmaW5lTmdNb2R1bGUsIGRlZmluZVBpcGV9IGZyb20gJy4vZGVmaW5pdGlvbic7XG5pbXBvcnQge0luaGVyaXREZWZpbml0aW9uRmVhdHVyZX0gZnJvbSAnLi9mZWF0dXJlcy9pbmhlcml0X2RlZmluaXRpb25fZmVhdHVyZSc7XG5pbXBvcnQge05nT25DaGFuZ2VzRmVhdHVyZX0gZnJvbSAnLi9mZWF0dXJlcy9uZ19vbmNoYW5nZXNfZmVhdHVyZSc7XG5pbXBvcnQge1Byb3ZpZGVyc0ZlYXR1cmV9IGZyb20gJy4vZmVhdHVyZXMvcHJvdmlkZXJzX2ZlYXR1cmUnO1xuaW1wb3J0IHtCYXNlRGVmLCBDb21wb25lbnREZWYsIENvbXBvbmVudERlZldpdGhNZXRhLCBDb21wb25lbnRUZW1wbGF0ZSwgQ29tcG9uZW50VHlwZSwgRGlyZWN0aXZlRGVmLCBEaXJlY3RpdmVEZWZGbGFncywgRGlyZWN0aXZlRGVmV2l0aE1ldGEsIERpcmVjdGl2ZVR5cGUsIFBpcGVEZWYsIFBpcGVEZWZXaXRoTWV0YX0gZnJvbSAnLi9pbnRlcmZhY2VzL2RlZmluaXRpb24nO1xuXG5leHBvcnQge0NvbXBvbmVudEZhY3RvcnksIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgQ29tcG9uZW50UmVmLCBXUkFQX1JFTkRFUkVSX0ZBQ1RPUlkyLCBpbmplY3RDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXJ9IGZyb20gJy4vY29tcG9uZW50X3JlZic7XG5leHBvcnQge2dldEZhY3RvcnlPZiwgZ2V0SW5oZXJpdGVkRmFjdG9yeX0gZnJvbSAnLi9kaSc7XG5leHBvcnQge1JlbmRlckZsYWdzfSBmcm9tICcuL2ludGVyZmFjZXMvZGVmaW5pdGlvbic7XG5leHBvcnQge0Nzc1NlbGVjdG9yTGlzdH0gZnJvbSAnLi9pbnRlcmZhY2VzL3Byb2plY3Rpb24nO1xuXG4vLyBjbGFuZy1mb3JtYXQgb2ZmXG5leHBvcnQge1xuICBiaW5kLFxuICBpbnRlcnBvbGF0aW9uMSxcbiAgaW50ZXJwb2xhdGlvbjIsXG4gIGludGVycG9sYXRpb24zLFxuICBpbnRlcnBvbGF0aW9uNCxcbiAgaW50ZXJwb2xhdGlvbjUsXG4gIGludGVycG9sYXRpb242LFxuICBpbnRlcnBvbGF0aW9uNyxcbiAgaW50ZXJwb2xhdGlvbjgsXG4gIGludGVycG9sYXRpb25WLFxuXG4gIGNvbnRhaW5lcixcbiAgY29udGFpbmVyUmVmcmVzaFN0YXJ0LFxuICBjb250YWluZXJSZWZyZXNoRW5kLFxuXG4gIG5leHRDb250ZXh0LFxuXG4gIGVsZW1lbnQsXG4gIGVsZW1lbnRBdHRyaWJ1dGUsXG4gIGVsZW1lbnRDbGFzc1Byb3AsXG4gIGVsZW1lbnRFbmQsXG4gIGVsZW1lbnRQcm9wZXJ0eSxcbiAgZWxlbWVudFN0YXJ0LFxuXG4gIGVsZW1lbnRDb250YWluZXJTdGFydCxcbiAgZWxlbWVudENvbnRhaW5lckVuZCxcblxuICBlbGVtZW50U3R5bGluZyxcbiAgZWxlbWVudFN0eWxpbmdNYXAsXG4gIGVsZW1lbnRTdHlsZVByb3AsXG4gIGVsZW1lbnRTdHlsaW5nQXBwbHksXG5cbiAgbGlzdGVuZXIsXG4gIHN0b3JlLFxuICBsb2FkLFxuXG4gIG5hbWVzcGFjZUhUTUwsXG4gIG5hbWVzcGFjZU1hdGhNTCxcbiAgbmFtZXNwYWNlU1ZHLFxuXG4gIHByb2plY3Rpb24sXG4gIHByb2plY3Rpb25EZWYsXG5cbiAgdGV4dCxcbiAgdGV4dEJpbmRpbmcsXG4gIHRlbXBsYXRlLFxuXG4gIHJlZmVyZW5jZSxcblxuICBlbWJlZGRlZFZpZXdTdGFydCxcbiAgZW1iZWRkZWRWaWV3RW5kLFxuICBkZXRlY3RDaGFuZ2VzLFxuICBtYXJrRGlydHksXG4gIHRpY2ssXG5cbiAgZGlyZWN0aXZlSW5qZWN0LFxuICBpbmplY3RBdHRyaWJ1dGUsXG59IGZyb20gJy4vaW5zdHJ1Y3Rpb25zJztcblxuZXhwb3J0IHtcbiAgZ2V0Q3VycmVudFZpZXcsXG4gIHJlc3RvcmVWaWV3LFxuXG4gIGVuYWJsZUJpbmRpbmdzLFxuICBkaXNhYmxlQmluZGluZ3MsXG59IGZyb20gJy4vc3RhdGUnO1xuXG5leHBvcnQge1xuICBpMThuLFxuICBpMThuQXR0cmlidXRlcyxcbiAgaTE4bkV4cCxcbiAgaTE4blN0YXJ0LFxuICBpMThuRW5kLFxuICBpMThuQXBwbHksXG4gIGkxOG5Qb3N0cHJvY2Vzc1xufSBmcm9tICcuL2kxOG4nO1xuXG5leHBvcnQge05nTW9kdWxlRmFjdG9yeSwgTmdNb2R1bGVSZWYsIE5nTW9kdWxlVHlwZX0gZnJvbSAnLi9uZ19tb2R1bGVfcmVmJztcblxuZXhwb3J0IHtcbiAgICBBdHRyaWJ1dGVNYXJrZXJcbn0gZnJvbSAnLi9pbnRlcmZhY2VzL25vZGUnO1xuXG5leHBvcnQge1xuICBzZXRDbGFzc01ldGFkYXRhLFxufSBmcm9tICcuL21ldGFkYXRhJztcblxuZXhwb3J0IHtcbiAgcGlwZSxcbiAgcGlwZUJpbmQxLFxuICBwaXBlQmluZDIsXG4gIHBpcGVCaW5kMyxcbiAgcGlwZUJpbmQ0LFxuICBwaXBlQmluZFYsXG59IGZyb20gJy4vcGlwZSc7XG5cbmV4cG9ydCB7XG4gIFF1ZXJ5TGlzdCxcbiAgcXVlcnksXG4gIHF1ZXJ5UmVmcmVzaCxcbn0gZnJvbSAnLi9xdWVyeSc7XG5leHBvcnQgIHtcbiAgcmVnaXN0ZXJDb250ZW50UXVlcnksXG4gIGxvYWRRdWVyeUxpc3QsXG59IGZyb20gJy4vaW5zdHJ1Y3Rpb25zJztcblxuZXhwb3J0IHtcbiAgcHVyZUZ1bmN0aW9uMCxcbiAgcHVyZUZ1bmN0aW9uMSxcbiAgcHVyZUZ1bmN0aW9uMixcbiAgcHVyZUZ1bmN0aW9uMyxcbiAgcHVyZUZ1bmN0aW9uNCxcbiAgcHVyZUZ1bmN0aW9uNSxcbiAgcHVyZUZ1bmN0aW9uNixcbiAgcHVyZUZ1bmN0aW9uNyxcbiAgcHVyZUZ1bmN0aW9uOCxcbiAgcHVyZUZ1bmN0aW9uVixcbn0gZnJvbSAnLi9wdXJlX2Z1bmN0aW9uJztcblxuZXhwb3J0IHt0ZW1wbGF0ZVJlZkV4dHJhY3Rvcn0gZnJvbSAnLi92aWV3X2VuZ2luZV9jb21wYXRpYmlsaXR5X3ByZWJvdW5kJztcblxuXG4vLyBjbGFuZy1mb3JtYXQgb25cblxuZXhwb3J0IHtcbiAgQmFzZURlZixcbiAgQ29tcG9uZW50RGVmLFxuICBDb21wb25lbnREZWZXaXRoTWV0YSxcbiAgQ29tcG9uZW50VGVtcGxhdGUsXG4gIENvbXBvbmVudFR5cGUsXG4gIERpcmVjdGl2ZURlZixcbiAgRGlyZWN0aXZlRGVmRmxhZ3MsXG4gIERpcmVjdGl2ZURlZldpdGhNZXRhLFxuICBEaXJlY3RpdmVUeXBlLFxuICBOZ09uQ2hhbmdlc0ZlYXR1cmUsXG4gIEluaGVyaXREZWZpbml0aW9uRmVhdHVyZSxcbiAgUHJvdmlkZXJzRmVhdHVyZSxcbiAgUGlwZURlZixcbiAgUGlwZURlZldpdGhNZXRhLFxuICBMaWZlY3ljbGVIb29rc0ZlYXR1cmUsXG4gIGRlZmluZUNvbXBvbmVudCxcbiAgZGVmaW5lRGlyZWN0aXZlLFxuICBkZWZpbmVOZ01vZHVsZSxcbiAgZGVmaW5lQmFzZSxcbiAgZGVmaW5lUGlwZSxcbiAgZ2V0SG9zdEVsZW1lbnQsXG4gIGdldFJlbmRlcmVkVGV4dCxcbiAgcmVuZGVyQ29tcG9uZW50LFxuICB3aGVuUmVuZGVyZWQsXG59O1xuXG5leHBvcnQge05PX0NIQU5HRX0gZnJvbSAnLi90b2tlbnMnO1xuIl19