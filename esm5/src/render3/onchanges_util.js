/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { SimpleChange } from '../change_detection/simple_change';
/**
 * Checks an object to see if it's an exact instance of a particular type
 * without traversing the inheritance hierarchy like `instanceof` does.
 * @param obj The object to check
 * @param type The type to check the object against
 */
export function isExactInstanceOf(obj, type) {
    return obj != null && typeof obj == 'object' && Object.getPrototypeOf(obj) == type.prototype;
}
/**
 * Checks to see if an object is an instance of {@link OnChangesDirectiveWrapper}
 * @param obj the object to check (generally from `LView`)
 */
export function isOnChangesDirectiveWrapper(obj) {
    return isExactInstanceOf(obj, OnChangesDirectiveWrapper);
}
/**
 * Removes the `OnChangesDirectiveWrapper` if present.
 *
 * @param obj to unwrap.
 */
export function unwrapOnChangesDirectiveWrapper(obj) {
    return isOnChangesDirectiveWrapper(obj) ? obj.instance : obj;
}
/**
 * A class that wraps directive instances for storage in LView when directives
 * have onChanges hooks to deal with.
 */
var OnChangesDirectiveWrapper = /** @class */ (function () {
    function OnChangesDirectiveWrapper(instance) {
        this.instance = instance;
        this.seenProps = new Set();
        this.previous = {};
        this.changes = null;
    }
    return OnChangesDirectiveWrapper;
}());
export { OnChangesDirectiveWrapper };
/**
 * Updates the `changes` property on the `wrapper` instance, such that when it's
 * checked in {@link callHooks} it will fire the related `onChanges` hook.
 * @param wrapper the wrapper for the directive instance
 * @param declaredName the declared name to be used in `SimpleChange`
 * @param value The new value for the property
 */
export function recordChange(wrapper, declaredName, value) {
    var simpleChanges = wrapper.changes || (wrapper.changes = {});
    var firstChange = !wrapper.seenProps.has(declaredName);
    if (firstChange) {
        wrapper.seenProps.add(declaredName);
    }
    var previous = wrapper.previous;
    var previousValue = previous[declaredName];
    simpleChanges[declaredName] = new SimpleChange(firstChange ? undefined : previousValue && previousValue.currentValue, value, firstChange);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib25jaGFuZ2VzX3V0aWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9yZW5kZXIzL29uY2hhbmdlc191dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUNILE9BQU8sRUFBQyxZQUFZLEVBQWdCLE1BQU0sbUNBQW1DLENBQUM7QUFLOUU7Ozs7O0dBS0c7QUFDSCxNQUFNLFVBQVUsaUJBQWlCLENBQUksR0FBUSxFQUFFLElBQW9CO0lBQ2pFLE9BQU8sR0FBRyxJQUFJLElBQUksSUFBSSxPQUFPLEdBQUcsSUFBSSxRQUFRLElBQUksTUFBTSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDO0FBQy9GLENBQUM7QUFFRDs7O0dBR0c7QUFDSCxNQUFNLFVBQVUsMkJBQTJCLENBQUMsR0FBUTtJQUNsRCxPQUFPLGlCQUFpQixDQUFDLEdBQUcsRUFBRSx5QkFBeUIsQ0FBQyxDQUFDO0FBQzNELENBQUM7QUFFRDs7OztHQUlHO0FBQ0gsTUFBTSxVQUFVLCtCQUErQixDQUFJLEdBQXFDO0lBQ3RGLE9BQU8sMkJBQTJCLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztBQUMvRCxDQUFDO0FBRUQ7OztHQUdHO0FBQ0g7SUFLRSxtQ0FBbUIsUUFBVztRQUFYLGFBQVEsR0FBUixRQUFRLENBQUc7UUFKOUIsY0FBUyxHQUFHLElBQUksR0FBRyxFQUFVLENBQUM7UUFDOUIsYUFBUSxHQUFrQixFQUFFLENBQUM7UUFDN0IsWUFBTyxHQUF1QixJQUFJLENBQUM7SUFFRixDQUFDO0lBQ3BDLGdDQUFDO0FBQUQsQ0FBQyxBQU5ELElBTUM7O0FBRUQ7Ozs7OztHQU1HO0FBQ0gsTUFBTSxVQUFVLFlBQVksQ0FBQyxPQUFrQyxFQUFFLFlBQW9CLEVBQUUsS0FBVTtJQUMvRixJQUFNLGFBQWEsR0FBRyxPQUFPLENBQUMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUMsQ0FBQztJQUVoRSxJQUFNLFdBQVcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3pELElBQUksV0FBVyxFQUFFO1FBQ2YsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7S0FDckM7SUFFRCxJQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDO0lBQ2xDLElBQU0sYUFBYSxHQUEyQixRQUFRLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDckUsYUFBYSxDQUFDLFlBQVksQ0FBQyxHQUFHLElBQUksWUFBWSxDQUMxQyxXQUFXLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsYUFBYSxJQUFJLGFBQWEsQ0FBQyxZQUFZLEVBQUUsS0FBSyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0FBQ2pHLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5pbXBvcnQge1NpbXBsZUNoYW5nZSwgU2ltcGxlQ2hhbmdlc30gZnJvbSAnLi4vY2hhbmdlX2RldGVjdGlvbi9zaW1wbGVfY2hhbmdlJztcblxuXG50eXBlIENvbnN0cnVjdG9yPFQ+ID0gbmV3ICguLi5hcmdzOiBhbnlbXSkgPT4gVDtcblxuLyoqXG4gKiBDaGVja3MgYW4gb2JqZWN0IHRvIHNlZSBpZiBpdCdzIGFuIGV4YWN0IGluc3RhbmNlIG9mIGEgcGFydGljdWxhciB0eXBlXG4gKiB3aXRob3V0IHRyYXZlcnNpbmcgdGhlIGluaGVyaXRhbmNlIGhpZXJhcmNoeSBsaWtlIGBpbnN0YW5jZW9mYCBkb2VzLlxuICogQHBhcmFtIG9iaiBUaGUgb2JqZWN0IHRvIGNoZWNrXG4gKiBAcGFyYW0gdHlwZSBUaGUgdHlwZSB0byBjaGVjayB0aGUgb2JqZWN0IGFnYWluc3RcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRXhhY3RJbnN0YW5jZU9mPFQ+KG9iajogYW55LCB0eXBlOiBDb25zdHJ1Y3RvcjxUPik6IG9iaiBpcyBUIHtcbiAgcmV0dXJuIG9iaiAhPSBudWxsICYmIHR5cGVvZiBvYmogPT0gJ29iamVjdCcgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikgPT0gdHlwZS5wcm90b3R5cGU7XG59XG5cbi8qKlxuICogQ2hlY2tzIHRvIHNlZSBpZiBhbiBvYmplY3QgaXMgYW4gaW5zdGFuY2Ugb2Yge0BsaW5rIE9uQ2hhbmdlc0RpcmVjdGl2ZVdyYXBwZXJ9XG4gKiBAcGFyYW0gb2JqIHRoZSBvYmplY3QgdG8gY2hlY2sgKGdlbmVyYWxseSBmcm9tIGBMVmlld2ApXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc09uQ2hhbmdlc0RpcmVjdGl2ZVdyYXBwZXIob2JqOiBhbnkpOiBvYmogaXMgT25DaGFuZ2VzRGlyZWN0aXZlV3JhcHBlcjxhbnk+IHtcbiAgcmV0dXJuIGlzRXhhY3RJbnN0YW5jZU9mKG9iaiwgT25DaGFuZ2VzRGlyZWN0aXZlV3JhcHBlcik7XG59XG5cbi8qKlxuICogUmVtb3ZlcyB0aGUgYE9uQ2hhbmdlc0RpcmVjdGl2ZVdyYXBwZXJgIGlmIHByZXNlbnQuXG4gKlxuICogQHBhcmFtIG9iaiB0byB1bndyYXAuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1bndyYXBPbkNoYW5nZXNEaXJlY3RpdmVXcmFwcGVyPFQ+KG9iajogVCB8IE9uQ2hhbmdlc0RpcmVjdGl2ZVdyYXBwZXI8VD4pOiBUIHtcbiAgcmV0dXJuIGlzT25DaGFuZ2VzRGlyZWN0aXZlV3JhcHBlcihvYmopID8gb2JqLmluc3RhbmNlIDogb2JqO1xufVxuXG4vKipcbiAqIEEgY2xhc3MgdGhhdCB3cmFwcyBkaXJlY3RpdmUgaW5zdGFuY2VzIGZvciBzdG9yYWdlIGluIExWaWV3IHdoZW4gZGlyZWN0aXZlc1xuICogaGF2ZSBvbkNoYW5nZXMgaG9va3MgdG8gZGVhbCB3aXRoLlxuICovXG5leHBvcnQgY2xhc3MgT25DaGFuZ2VzRGlyZWN0aXZlV3JhcHBlcjxUID0gYW55PiB7XG4gIHNlZW5Qcm9wcyA9IG5ldyBTZXQ8c3RyaW5nPigpO1xuICBwcmV2aW91czogU2ltcGxlQ2hhbmdlcyA9IHt9O1xuICBjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzfG51bGwgPSBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBpbnN0YW5jZTogVCkge31cbn1cblxuLyoqXG4gKiBVcGRhdGVzIHRoZSBgY2hhbmdlc2AgcHJvcGVydHkgb24gdGhlIGB3cmFwcGVyYCBpbnN0YW5jZSwgc3VjaCB0aGF0IHdoZW4gaXQnc1xuICogY2hlY2tlZCBpbiB7QGxpbmsgY2FsbEhvb2tzfSBpdCB3aWxsIGZpcmUgdGhlIHJlbGF0ZWQgYG9uQ2hhbmdlc2AgaG9vay5cbiAqIEBwYXJhbSB3cmFwcGVyIHRoZSB3cmFwcGVyIGZvciB0aGUgZGlyZWN0aXZlIGluc3RhbmNlXG4gKiBAcGFyYW0gZGVjbGFyZWROYW1lIHRoZSBkZWNsYXJlZCBuYW1lIHRvIGJlIHVzZWQgaW4gYFNpbXBsZUNoYW5nZWBcbiAqIEBwYXJhbSB2YWx1ZSBUaGUgbmV3IHZhbHVlIGZvciB0aGUgcHJvcGVydHlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlY29yZENoYW5nZSh3cmFwcGVyOiBPbkNoYW5nZXNEaXJlY3RpdmVXcmFwcGVyLCBkZWNsYXJlZE5hbWU6IHN0cmluZywgdmFsdWU6IGFueSkge1xuICBjb25zdCBzaW1wbGVDaGFuZ2VzID0gd3JhcHBlci5jaGFuZ2VzIHx8ICh3cmFwcGVyLmNoYW5nZXMgPSB7fSk7XG5cbiAgY29uc3QgZmlyc3RDaGFuZ2UgPSAhd3JhcHBlci5zZWVuUHJvcHMuaGFzKGRlY2xhcmVkTmFtZSk7XG4gIGlmIChmaXJzdENoYW5nZSkge1xuICAgIHdyYXBwZXIuc2VlblByb3BzLmFkZChkZWNsYXJlZE5hbWUpO1xuICB9XG5cbiAgY29uc3QgcHJldmlvdXMgPSB3cmFwcGVyLnByZXZpb3VzO1xuICBjb25zdCBwcmV2aW91c1ZhbHVlOiBTaW1wbGVDaGFuZ2V8dW5kZWZpbmVkID0gcHJldmlvdXNbZGVjbGFyZWROYW1lXTtcbiAgc2ltcGxlQ2hhbmdlc1tkZWNsYXJlZE5hbWVdID0gbmV3IFNpbXBsZUNoYW5nZShcbiAgICAgIGZpcnN0Q2hhbmdlID8gdW5kZWZpbmVkIDogcHJldmlvdXNWYWx1ZSAmJiBwcmV2aW91c1ZhbHVlLmN1cnJlbnRWYWx1ZSwgdmFsdWUsIGZpcnN0Q2hhbmdlKTtcbn1cbiJdfQ==