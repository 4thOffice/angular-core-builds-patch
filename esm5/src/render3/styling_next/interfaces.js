//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJmYWNlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL3JlbmRlcjMvc3R5bGluZ19uZXh0L2ludGVyZmFjZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuKiBAbGljZW5zZVxuKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbipcbiogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuKi9cbmltcG9ydCB7UHJvY2VkdXJhbFJlbmRlcmVyMywgUkVsZW1lbnQsIFJlbmRlcmVyM30gZnJvbSAnLi4vaW50ZXJmYWNlcy9yZW5kZXJlcic7XG5pbXBvcnQge0xWaWV3fSBmcm9tICcuLi9pbnRlcmZhY2VzL3ZpZXcnO1xuXG4vKipcbiAqIEEgc3RhdGljLWxldmVsIHJlcHJlc2VudGF0aW9uIG9mIGFsbCBzdHlsZSBvciBjbGFzcyBiaW5kaW5ncy92YWx1ZXNcbiAqIGFzc29jaWF0ZWQgd2l0aCBhIGBUTm9kZWAuXG4gKlxuICogVGhlIGBUU3R5bGluZ0NvbnRleHRgIHVuaXRlcyBhbGwgdGVtcGxhdGUgc3R5bGluZyBiaW5kaW5ncyAoaS5lLlxuICogYFtjbGFzc11gIGFuZCBgW3N0eWxlXWAgYmluZGluZ3MpIGFzIHdlbGwgYXMgYWxsIGhvc3QtbGV2ZWxcbiAqIHN0eWxpbmcgYmluZGluZ3MgKGZvciBjb21wb25lbnRzIGFuZCBkaXJlY3RpdmVzKSB0b2dldGhlciBpbnRvXG4gKiBhIHNpbmdsZSBtYW5pZmVzdC4gSXQgaXMgdXNlZCBlYWNoIHRpbWUgdGhlcmUgYXJlIG9uZSBvciBtb3JlXG4gKiBzdHlsaW5nIGJpbmRpbmdzIHByZXNlbnQgZm9yIGFuIGVsZW1lbnQuXG4gKlxuICogVGhlIHN0eWxpbmcgY29udGV4dCBpcyBzdG9yZWQgb24gYSBgVE5vZGVgIG9uIGFuZCB0aGVyZSBhcmVcbiAqIHR3byBpbnN0YW5jZXMgb2YgaXQ6IG9uZSBmb3IgY2xhc3NlcyBhbmQgYW5vdGhlciBmb3Igc3R5bGVzLlxuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIHROb2RlLnN0eWxlcyA9IFsgLi4uIGEgY29udGV4dCBvbmx5IGZvciBzdHlsZXMgLi4uIF07XG4gKiB0Tm9kZS5jbGFzc2VzID0gWyAuLi4gYSBjb250ZXh0IG9ubHkgZm9yIGNsYXNzZXMgLi4uIF07XG4gKiBgYGBcbiAqXG4gKiBEdWUgdG8gdGhlIGZhY3QgdGhlIHRoZSBgVFN0eWxpbmdDb250ZXh0YCBpcyBzdG9yZWQgb24gYSBgVE5vZGVgXG4gKiB0aGlzIG1lYW5zIHRoYXQgYWxsIGRhdGEgd2l0aGluIHRoZSBjb250ZXh0IGlzIHN0YXRpYy4gSW5zdGVhZCBvZlxuICogc3RvcmluZyBhY3R1YWwgc3R5bGluZyBiaW5kaW5nIHZhbHVlcywgdGhlIGxWaWV3IGJpbmRpbmcgaW5kZXggdmFsdWVzXG4gKiBhcmUgc3RvcmVkIHdpdGhpbiB0aGUgY29udGV4dC4gKHN0YXRpYyBuYXR1cmUgbWVhbnMgaXQgaXMgbW9yZSBjb21wYWN0LilcblxuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIC8vIDxkaXYgW2NsYXNzLmFjdGl2ZV09XCJjXCIgIC8vIGxWaWV3IGJpbmRpbmcgaW5kZXggPSAyMFxuICogLy8gICAgICBbc3R5bGUud2lkdGhdPVwieFwiICAgLy8gbFZpZXcgYmluZGluZyBpbmRleCA9IDIxXG4gKiAvLyAgICAgIFtzdHlsZS5oZWlnaHRdPVwieVwiPiAvLyBsVmlldyBiaW5kaW5nIGluZGV4ID0gMjJcbiAqIHROb2RlLnN0eWxlc0NvbnRleHQgPSBbXG4gKiAgIDAsIC8vIHRoZSBjb250ZXh0IGNvbmZpZyB2YWx1ZVxuICpcbiAqICAgMGIwMDEsIC8vIGd1YXJkIG1hc2sgZm9yIHdpZHRoXG4gKiAgIDIsIC8vIHRvdGFsIGVudHJpZXMgZm9yIHdpZHRoXG4gKiAgICd3aWR0aCcsIC8vIHRoZSBwcm9wZXJ0eSBuYW1lXG4gKiAgIDIxLCAvLyB0aGUgYmluZGluZyBsb2NhdGlvbiBmb3IgdGhlIFwieFwiIGJpbmRpbmcgaW4gdGhlIGxWaWV3XG4gKiAgIG51bGwsXG4gKlxuICogICAwYjAxMCwgLy8gZ3VhcmQgbWFzayBmb3IgaGVpZ2h0XG4gKiAgIDIsIC8vIHRvdGFsIGVudHJpZXMgZm9yIGhlaWdodFxuICogICAnaGVpZ2h0JywgLy8gdGhlIHByb3BlcnR5IG5hbWVcbiAqICAgMjIsIC8vIHRoZSBiaW5kaW5nIGxvY2F0aW9uIGZvciB0aGUgXCJ5XCIgYmluZGluZyBpbiB0aGUgbFZpZXdcbiAqICAgbnVsbCxcbiAqIF07XG4gKlxuICogdE5vZGUuY2xhc3Nlc0NvbnRleHQgPSBbXG4gKiAgIDAsIC8vIHRoZSBjb250ZXh0IGNvbmZpZyB2YWx1ZVxuICpcbiAqICAgMGIwMDEsIC8vIGd1YXJkIG1hc2sgZm9yIGFjdGl2ZVxuICogICAyLCAvLyB0b3RhbCBlbnRyaWVzIGZvciBhY3RpdmVcbiAqICAgJ2FjdGl2ZScsIC8vIHRoZSBwcm9wZXJ0eSBuYW1lXG4gKiAgIDIwLCAvLyB0aGUgYmluZGluZyBsb2NhdGlvbiBmb3IgdGhlIFwiY1wiIGJpbmRpbmcgaW4gdGhlIGxWaWV3XG4gKiAgIG51bGwsXG4gKiBdO1xuICogYGBgXG4gKlxuICogRW50cnkgdmFsdWUgcHJlc2VudCBpbiBhbiBlbnRyeSAoY2FsbGVkIGEgdHVwbGUpIHdpdGhpbiB0aGVcbiAqIHN0eWxpbmcgY29udGV4dCBpcyBhcyBmb2xsb3dzOlxuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGNvbnRleHQgPSBbXG4gKiAgIENPTkZJRywgLy8gdGhlIHN0eWxpbmcgY29udGV4dCBjb25maWcgdmFsdWVcbiAqICAgLy8uLi5cbiAqICAgZ3VhcmRNYXNrLFxuICogICB0b3RhbEVudHJpZXMsXG4gKiAgIHByb3BOYW1lLFxuICogICBiaW5kaW5nSW5kaWNlcy4uLixcbiAqICAgZGVmYXVsdFZhbHVlXG4gKiBdO1xuICogYGBgXG4gKlxuICogQmVsb3cgaXMgYSBicmVha2Rvd24gb2YgZWFjaCB2YWx1ZTpcbiAqXG4gKiAtICoqZ3VhcmRNYXNrKio6XG4gKiAgIEEgbnVtZXJpYyB2YWx1ZSB3aGVyZSBlYWNoIGJpdCByZXByZXNlbnRzIGEgYmluZGluZyBpbmRleFxuICogICBsb2NhdGlvbi4gRWFjaCBiaW5kaW5nIGluZGV4IGxvY2F0aW9uIGlzIGFzc2lnbmVkIGJhc2VkIG9uXG4gKiAgIGEgbG9jYWwgY291bnRlciB2YWx1ZSB0aGF0IGluY3JlbWVudHMgZWFjaCB0aW1lIGFuIGluc3RydWN0aW9uXG4gKiAgIGlzIGNhbGxlZDpcbiAqXG4gKiBgYGBcbiAqIDxkaXYgW3N0eWxlLndpZHRoXT1cInhcIiAgIC8vIGJpbmRpbmcgaW5kZXggPSAyMSAoY291bnRlciBpbmRleCA9IDApXG4gKiAgICAgIFtzdHlsZS5oZWlnaHRdPVwieVwiPiAvLyBiaW5kaW5nIGluZGV4ID0gMjIgKGNvdW50ZXIgaW5kZXggPSAxKVxuICogYGBgXG4gKlxuICogICBJbiB0aGUgZXhhbXBsZSBjb2RlIGFib3ZlLCBpZiB0aGUgYHdpZHRoYCB2YWx1ZSB3aGVyZSB0byBjaGFuZ2VcbiAqICAgdGhlbiB0aGUgZmlyc3QgYml0IGluIHRoZSBsb2NhbCBiaXQgbWFzayB2YWx1ZSB3b3VsZCBiZSBmbGlwcGVkXG4gKiAgIChhbmQgdGhlIHNlY29uZCBiaXQgZm9yIHdoZW4gYGhlaWdodGApLlxuICpcbiAqICAgSWYgYW5kIHdoZW4gdGhlcmUgYXJlIG1vcmUgdGhhbiAzMiBiaW5kaW5nIHNvdXJjZXMgaW4gdGhlIGNvbnRleHRcbiAqICAgKG1vcmUgdGhhbiAzMiBgW3N0eWxlL2NsYXNzXWAgYmluZGluZ3MpIHRoZW4gdGhlIGJpdCBtYXNraW5nIHdpbGxcbiAqICAgb3ZlcmZsb3cgYW5kIHdlIGFyZSBsZWZ0IHdpdGggYSBzaXR1YXRpb24gd2hlcmUgYSBgLTFgIHZhbHVlIHdpbGxcbiAqICAgcmVwcmVzZW50IHRoZSBiaXQgbWFzay4gRHVlIHRvIHRoZSB3YXkgdGhhdCBKYXZhU2NyaXB0IGhhbmRsZXNcbiAqICAgbmVnYXRpdmUgdmFsdWVzLCB3aGVuIHRoZSBiaXQgbWFzayBpcyBgLTFgIHRoZW4gYWxsIGJpdHMgd2l0aGluXG4gKiAgIHRoYXQgdmFsdWUgd2lsbCBiZSBhdXRvbWF0aWNhbGx5IGZsaXBwZWQgKHRoaXMgaXMgYSBxdWljayBhbmRcbiAqICAgZWZmaWNpZW50IHdheSB0byBmbGlwIGFsbCBiaXRzIG9uIHRoZSBtYXNrIHdoZW4gYSBzcGVjaWFsIGtpbmRcbiAqICAgb2YgY2FjaGluZyBzY2VuYXJpbyBvY2N1cnMgb3Igd2hlbiB0aGVyZSBhcmUgbW9yZSB0aGFuIDMyIGJpbmRpbmdzKS5cbiAqXG4gKiAtICoqdG90YWxFbnRyaWVzKio6XG4gKiAgIEVhY2ggcHJvcGVydHkgcHJlc2VudCBpbiB0aGUgY29udGFpbnMgdmFyaW91cyBiaW5kaW5nIHNvdXJjZXMgb2ZcbiAqICAgd2hlcmUgdGhlIHN0eWxpbmcgZGF0YSBjb3VsZCBjb21lIGZyb20uIFRoaXMgaW5jbHVkZXMgdGVtcGxhdGVcbiAqICAgbGV2ZWwgYmluZGluZ3MsIGRpcmVjdGl2ZS9jb21wb25lbnQgaG9zdCBiaW5kaW5ncyBhcyB3ZWxsIGFzIHRoZVxuICogICBkZWZhdWx0IHZhbHVlIChvciBzdGF0aWMgdmFsdWUpIGFsbCB3cml0aW5nIHRvIHRoZSBzYW1lIHByb3BlcnR5LlxuICogICBUaGlzIHZhbHVlIGRlcGljdHMgaG93IG1hbnkgYmluZGluZyBzb3VyY2UgZW50cmllcyBleGlzdCBmb3IgdGhlXG4gKiAgIHByb3BlcnR5LlxuICpcbiAqICAgVGhlIHJlYXNvbiB3aHkgdGhlIHRvdGFsRW50cmllcyB2YWx1ZSBpcyBuZWVkZWQgaXMgYmVjYXVzZSB0aGVcbiAqICAgc3R5bGluZyBjb250ZXh0IGlzIGR5bmFtaWMgaW4gc2l6ZSBhbmQgaXQncyBub3QgcG9zc2libGVcbiAqICAgZm9yIHRoZSBmbHVzaGluZyBvciB1cGRhdGUgYWxnb3JpdGhtcyB0byBrbm93IHdoZW4gYW5kIHdoZXJlXG4gKiAgIGEgcHJvcGVydHkgc3RhcnRzIGFuZCBlbmRzIHdpdGhvdXQgaXQuXG4gKlxuICogLSAqKnByb3BOYW1lKio6XG4gKiAgIFRoZSBDU1MgcHJvcGVydHkgbmFtZSBvciBjbGFzcyBuYW1lIChlLmcgYHdpZHRoYCBvciBgYWN0aXZlYCkuXG4gKlxuICogLSAqKmJpbmRpbmdJbmRpY2VzLi4uKio6XG4gKiAgIEEgc2VyaWVzIG9mIG51bWVyaWMgYmluZGluZyB2YWx1ZXMgdGhhdCByZWZsZWN0IHdoZXJlIGluIHRoZVxuICogICBsVmlldyB0byBmaW5kIHRoZSBzdHlsZS9jbGFzcyB2YWx1ZXMgYXNzb2NpYXRlZCB3aXRoIHRoZSBwcm9wZXJ0eS5cbiAqICAgRWFjaCB2YWx1ZSBpcyBpbiBvcmRlciBpbiB0ZXJtcyBvZiBwcmlvcml0eSAodGVtcGxhdGVzIGFyZSBmaXJzdCxcbiAqICAgdGhlbiBkaXJlY3RpdmVzIGFuZCB0aGVuIGNvbXBvbmVudHMpLiBXaGVuIHRoZSBjb250ZXh0IGlzIGZsdXNoZWRcbiAqICAgYW5kIHRoZSBzdHlsZS9jbGFzcyB2YWx1ZXMgYXJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnQgKHRoaXMgaGFwcGVuc1xuICogICBpbnNpZGUgb2YgdGhlIGBzdHlsaW5nQXBwbHlgIGluc3RydWN0aW9uKSB0aGVuIHRoZSBmbHVzaGluZyBjb2RlXG4gKiAgIHdpbGwga2VlcCBjaGVja2luZyBlYWNoIGJpbmRpbmcgaW5kZXggYWdhaW5zdCB0aGUgYXNzb2NpYXRlZCBsVmlld1xuICogICB0byBmaW5kIHRoZSBmaXJzdCBzdHlsZS9jbGFzcyB2YWx1ZSB0aGF0IGlzIG5vbi1udWxsLlxuICpcbiAqIC0gKipkZWZhdWx0VmFsdWUqKjpcbiAqICAgVGhpcyBpcyB0aGUgZGVmYXVsdCB0aGF0IHdpbGwgYWx3YXlzIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnQgaWZcbiAqICAgYW5kIHdoZW4gYWxsIG90aGVyIGJpbmRpbmcgc291cmNlcyByZXR1cm4gYSByZXN1bHQgdGhhdCBpcyBudWxsLlxuICogICBVc3VhbGx5IHRoaXMgdmFsdWUgaXMgbnVsbCBidXQgaXQgY2FuIGFsc28gYmUgYSBzdGF0aWMgdmFsdWUgdGhhdFxuICogICBpcyBpbnRlcmNlcHRlZCB3aGVuIHRoZSB0Tm9kZSBpcyBmaXJzdCBjb25zdHJ1Y3R1cmVkIChlLmcuXG4gKiAgIGA8ZGl2IHN0eWxlPVwid2lkdGg6MjAwcHhcIj5gIGhhcyBhIGRlZmF1bHQgdmFsdWUgb2YgYDIwMHB4YCBmb3JcbiAqICAgdGhlIGB3aWR0aGAgcHJvcGVydHkpLlxuICpcbiAqIEVhY2ggdGltZSBhIG5ldyBiaW5kaW5nIGlzIGVuY291bnRlcmVkIGl0IGlzIHJlZ2lzdGVyZWQgaW50byB0aGVcbiAqIGNvbnRleHQuIFRoZSBjb250ZXh0IHRoZW4gaXMgY29udGludWFsbHkgdXBkYXRlZCB1bnRpbCB0aGUgZmlyc3RcbiAqIHN0eWxpbmcgYXBwbHkgY2FsbCBoYXMgYmVlbiBjYWxsZWQgKHRoaXMgaXMgdHJpZ2dlcmVkIGJ5IHRoZVxuICogYHN0eWxpbmdBcHBseSgpYCBpbnN0cnVjdGlvbiBmb3IgdGhlIGFjdGl2ZSBlbGVtZW50KS5cbiAqXG4gKiAjIEhvdyBTdHlsZXMvQ2xhc3NlcyBhcmUgQXBwbGllZFxuICogRWFjaCB0aW1lIGEgc3R5bGluZyBpbnN0cnVjdGlvbiAoZS5nLiBgW2NsYXNzLm5hbWVdYCwgYFtzdHlsZS5wcm9wXWAsXG4gKiBldGMuLi4pIGlzIGV4ZWN1dGVkLCB0aGUgYXNzb2NpYXRlZCBgbFZpZXdgIGZvciB0aGUgdmlldyBpcyB1cGRhdGVkXG4gKiBhdCB0aGUgY3VycmVudCBiaW5kaW5nIGxvY2F0aW9uLiBBbHNvLCB3aGVuIHRoaXMgaGFwcGVucywgYSBsb2NhbFxuICogY291bnRlciB2YWx1ZSBpcyBpbmNyZW1lbnRlZC4gSWYgdGhlIGJpbmRpbmcgdmFsdWUgaGFzIGNoYW5nZWQgdGhlblxuICogYSBsb2NhbCBgYml0TWFza2AgdmFyaWFibGUgaXMgdXBkYXRlZCB3aXRoIHRoZSBzcGVjaWZpYyBiaXQgYmFzZWRcbiAqIG9uIHRoZSBjb3VudGVyIHZhbHVlLlxuICpcbiAqIEJlbG93IGlzIGEgbGlnaHR3ZWlnaHQgZXhhbXBsZSBvZiB3aGF0IGhhcHBlbnMgd2hlbiBhIHNpbmdsZSBzdHlsZVxuICogcHJvcGVydHkgaXMgdXBkYXRlZCAoaS5lLiBgPGRpdiBbc3R5bGUucHJvcF09XCJ2YWxcIj5gKTpcbiAqXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBmdW5jdGlvbiB1cGRhdGVTdHlsZVByb3AocHJvcDogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKSB7XG4gKiAgIGNvbnN0IGxWaWV3ID0gZ2V0TFZpZXcoKTtcbiAqICAgY29uc3QgYmluZGluZ0luZGV4ID0gQklORElOR19JTkRFWCsrO1xuICogICBjb25zdCBpbmRleEZvclN0eWxlID0gbG9jYWxTdHlsZXNDb3VudGVyKys7XG4gKiAgIGlmIChsVmlld1tiaW5kaW5nSW5kZXhdICE9PSB2YWx1ZSkge1xuICogICAgIGxWaWV3W2JpbmRpbmdJbmRleF0gPSB2YWx1ZTtcbiAqICAgICBsb2NhbEJpdE1hc2tGb3JTdHlsZXMgfD0gMSA8PCBpbmRleEZvclN0eWxlO1xuICogICB9XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBPbmNlIGFsbCB0aGUgc3R5bGluZyBpbnN0cnVjdGlvbnMgaGF2ZSBiZWVuIGV2YWx1YXRlZCwgdGhlbiB0aGUgc3R5bGluZ1xuICogY29udGV4dChzKSBhcmUgZmx1c2hlZCB0byB0aGUgZWxlbWVudC4gV2hlbiB0aGlzIGhhcHBlbnMsIHRoZSBjb250ZXh0IHdpbGxcbiAqIGJlIGl0ZXJhdGVkIG92ZXIgKHByb3BlcnR5IGJ5IHByb3BlcnR5KSBhbmQgZWFjaCBiaW5kaW5nIHNvdXJjZSB3aWxsIGJlXG4gKiBleGFtaW5lZCBhbmQgdGhlIGZpcnN0IG5vbi1udWxsIHZhbHVlIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudC5cbiAqXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVFN0eWxpbmdDb250ZXh0IGV4dGVuZHMgQXJyYXk8bnVtYmVyfHN0cmluZ3xudW1iZXJ8Ym9vbGVhbnxudWxsPiB7XG4gIFtUU3R5bGluZ0NvbnRleHRJbmRleC5Db25maWdQb3NpdGlvbl06IFRTdHlsaW5nQ29uZmlnRmxhZ3M7XG5cbiAgLyogVGVtcG9yYXJ5IHZhbHVlIHVzZWQgdG8gdHJhY2sgZGlyZWN0aXZlIGluZGV4IGVudHJpZXMgdW50aWxcbiAgICAgdGhlIG9sZCBzdHlsaW5nIGNvZGUgaXMgZnVsbHkgcmVtb3ZlZC4gVGhlIHJlYXNvbiB3aHkgdGhpc1xuICAgICBpcyByZXF1aXJlZCBpcyB0byBmaWd1cmUgb3V0IHdoaWNoIGRpcmVjdGl2ZSBpcyBsYXN0IGFuZCxcbiAgICAgd2hlbiBlbmNvdW50ZXJlZCwgdHJpZ2dlciBhIHN0eWxpbmcgZmx1c2ggdG8gaGFwcGVuICovXG4gIFtUU3R5bGluZ0NvbnRleHRJbmRleC5NYXhEaXJlY3RpdmVJbmRleFBvc2l0aW9uXTogbnVtYmVyO1xufVxuXG4vKipcbiAqIEEgc2VyaWVzIG9mIGZsYWdzIHVzZWQgdG8gY29uZmlndXJlIHRoZSBjb25maWcgdmFsdWUgcHJlc2VudCB3aXRoaW4gYVxuICogYFRTdHlsaW5nQ29udGV4dGAgdmFsdWUuXG4gKi9cbmV4cG9ydCBjb25zdCBlbnVtIFRTdHlsaW5nQ29uZmlnRmxhZ3Mge1xuICAvKipcbiAgICogVGhlIGluaXRpYWwgc3RhdGUgb2YgdGhlIHN0eWxpbmcgY29udGV4dCBjb25maWdcbiAgICovXG4gIEluaXRpYWwgPSAwYjAsXG5cbiAgLyoqXG4gICAqIEEgZmxhZyB3aGljaCBtYXJrcyB0aGUgY29udGV4dCBhcyBiZWluZyBsb2NrZWQuXG4gICAqXG4gICAqIFRoZSBzdHlsaW5nIGNvbnRleHQgaXMgY29uc3RydWN0ZWQgYWNyb3NzIGFuIGVsZW1lbnQgdGVtcGxhdGVcbiAgICogZnVuY3Rpb24gYXMgd2VsbCBhcyBhbnkgYXNzb2NpYXRlZCBob3N0QmluZGluZ3MgZnVuY3Rpb25zLiBXaGVuXG4gICAqIHRoaXMgb2NjdXJzLCB0aGUgY29udGV4dCBpdHNlbGYgaXMgb3BlbiB0byBtdXRhdGlvbiBhbmQgb25seSBvbmNlXG4gICAqIGl0IGhhcyBiZWVuIGZsdXNoZWQgb25jZSB0aGVuIGl0IHdpbGwgYmUgbG9ja2VkIGZvciBnb29kIChubyBleHRyYVxuICAgKiBiaW5kaW5ncyBjYW4gYmUgYWRkZWQgdG8gaXQpLlxuICAgKi9cbiAgTG9ja2VkID0gMGIxLFxufVxuXG4vKipcbiAqIEFuIGluZGV4IG9mIHBvc2l0aW9uIGFuZCBvZmZzZXQgdmFsdWVzIHVzZWQgdG8gbmF0aWdhdGUgdGhlIGBUU3R5bGluZ0NvbnRleHRgLlxuICovXG5leHBvcnQgY29uc3QgZW51bSBUU3R5bGluZ0NvbnRleHRJbmRleCB7XG4gIENvbmZpZ1Bvc2l0aW9uID0gMCxcbiAgTWF4RGlyZWN0aXZlSW5kZXhQb3NpdGlvbiA9IDEsXG4gIFZhbHVlc1N0YXJ0UG9zaXRpb24gPSAyLFxuXG4gIC8vIGVhY2ggdHVwbGUgZW50cnkgaW4gdGhlIGNvbnRleHRcbiAgLy8gKG1hc2ssIGNvdW50LCBwcm9wLCAuLi5iaW5kaW5nc3x8ZGVmYXVsdC12YWx1ZSlcbiAgTWFza09mZnNldCA9IDAsXG4gIFZhbHVlc0NvdW50T2Zmc2V0ID0gMSxcbiAgUHJvcE9mZnNldCA9IDIsXG4gIEJpbmRpbmdzU3RhcnRPZmZzZXQgPSAzLFxufVxuXG4vKipcbiAqIEEgZnVuY3Rpb24gdXNlZCB0byBhcHBseSBvciByZW1vdmUgc3R5bGluZyBmcm9tIGFuIGVsZW1lbnQgZm9yIGEgZ2l2ZW4gcHJvcGVydHkuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQXBwbHlTdHlsaW5nRm4ge1xuICAocmVuZGVyZXI6IFJlbmRlcmVyM3xQcm9jZWR1cmFsUmVuZGVyZXIzfG51bGwsIGVsZW1lbnQ6IFJFbGVtZW50LCBwcm9wOiBzdHJpbmcsXG4gICB2YWx1ZTogc3RyaW5nfG51bGwsIGJpbmRpbmdJbmRleDogbnVtYmVyKTogdm9pZDtcbn1cblxuLyoqXG4gKiBSdW50aW1lIGRhdGEgdHlwZSB0aGF0IGlzIHVzZWQgdG8gc3RvcmUgYmluZGluZyBkYXRhIHJlZmVyZW5jZWQgZnJvbSB0aGUgYFRTdHlsaW5nQ29udGV4dGAuXG4gKlxuICogQmVjYXVzZSBgTFZpZXdgIGlzIGp1c3QgYW4gYXJyYXkgd2l0aCBkYXRhLCB0aGVyZSBpcyBubyByZWFzb24gdG9cbiAqIHNwZWNpYWwgY2FzZSBgTFZpZXdgIGV2ZXJ5d2hlcmUgaW4gdGhlIHN0eWxpbmcgYWxnb3JpdGhtLiBCeSBhbGxvd2luZ1xuICogdGhpcyBkYXRhIHR5cGUgdG8gYmUgYW4gYXJyYXkgdGhhdCBjb250YWlucyB2YXJpb3VzIHNjYWxhciBkYXRhIHR5cGVzLFxuICogYW4gaW5zdGFuY2Ugb2YgYExWaWV3YCBkb2Vzbid0IG5lZWQgdG8gYmUgY29uc3RydWN0ZWQgZm9yIHRlc3RzLlxuICovXG5leHBvcnQgdHlwZSBTdHlsaW5nQmluZGluZ0RhdGEgPSBMVmlldyB8IChzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuKVtdO1xuIl19