{"version":3,"sources":["../../../../modules/@angular/core/src/application_ref.ts"],"names":[],"mappings":"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","file":"application_ref.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ErrorHandler} from '../src/error_handler';\nimport {ListWrapper} from '../src/facade/collection';\nimport {stringify} from '../src/facade/lang';\nimport {isPromise} from '../src/util/lang';\n\nimport {ApplicationInitStatus} from './application_init';\nimport {APP_BOOTSTRAP_LISTENER, PLATFORM_INITIALIZER} from './application_tokens';\nimport {Console} from './console';\nimport {Injectable, InjectionToken, Injector, Optional, Provider, ReflectiveInjector} from './di';\nimport {CompilerFactory, CompilerOptions} from './linker/compiler';\nimport {ComponentFactory, ComponentRef} from './linker/component_factory';\nimport {ComponentFactoryResolver} from './linker/component_factory_resolver';\nimport {NgModuleFactory, NgModuleInjector, NgModuleRef} from './linker/ng_module_factory';\nimport {AppView} from './linker/view';\nimport {ViewRef, ViewRef_} from './linker/view_ref';\nimport {WtfScopeFn, wtfCreateScope, wtfLeave} from './profile/profile';\nimport {Testability, TestabilityRegistry} from './testability/testability';\nimport {Type} from './type';\nimport {NgZone} from './zone/ng_zone';\n\nlet /** @type {?} */ _devMode: boolean = true;\nlet /** @type {?} */ _runModeLocked: boolean = false;\nlet /** @type {?} */ _platform: PlatformRef;\n/**\n * Disable Angular's development mode, which turns off assertions and other\n * checks within the framework.\n * \n * One important assertion this disables verifies that a change detection pass\n * does not result in additional changes to any bindings (also known as\n * unidirectional data flow).\n * \n * \\@stable\n * @return {?}\n */\nexport function enableProdMode(): void {\n  if (_runModeLocked) {\n    throw new Error('Cannot enable prod mode after platform setup.');\n  }\n  _devMode = false;\n}\n/**\n * Returns whether Angular is in development mode. After called once,\n * the value is locked and won't change any more.\n * \n * By default, this is true, unless a user calls `enableProdMode` before calling this.\n * \n * \\@experimental APIs related to application bootstrap are currently under review.\n * @return {?}\n */\nexport function isDevMode(): boolean {\n  _runModeLocked = true;\n  return _devMode;\n}\n/**\n * A token for third-party components that can register themselves with NgProbe.\n * \n * \\@experimental\n */\nexport class NgProbeToken {\n/**\n * @param {?} name\n * @param {?} token\n */\nconstructor(public name: string,\npublic token: any) {}\n}\n\nfunction NgProbeToken_tsickle_Closure_declarations() {\n/** @type {?} */\nNgProbeToken.prototype.name;\n/** @type {?} */\nNgProbeToken.prototype.token;\n}\n\n/**\n * Creates a platform.\n * Platforms have to be eagerly created via this function.\n * \n * \\@experimental APIs related to application bootstrap are currently under review.\n * @param {?} injector\n * @return {?}\n */\nexport function createPlatform(injector: Injector): PlatformRef {\n  if (_platform && !_platform.destroyed) {\n    throw new Error(\n        'There can be only one platform. Destroy the previous one to create a new one.');\n  }\n  _platform = injector.get(PlatformRef);\n  const /** @type {?} */ inits = injector.get(PLATFORM_INITIALIZER, null);\n  if (inits) inits.forEach(init => init());\n  return _platform;\n}\n/**\n * Creates a factory for a platform\n * \n * \\@experimental APIs related to application bootstrap are currently under review.\n * @param {?} parentPlatformFactory\n * @param {?} name\n * @param {?=} providers\n * @return {?}\n */\nexport function createPlatformFactory(\n    parentPlatformFactory: (extraProviders?: Provider[]) => PlatformRef, name: string,\n    providers: Provider[] = []): (extraProviders?: Provider[]) => PlatformRef {\n  const /** @type {?} */ marker = new InjectionToken(`Platform: ${name}`);\n  return (extraProviders: Provider[] = []) => {\n    if (!getPlatform()) {\n      if (parentPlatformFactory) {\n        parentPlatformFactory(\n            providers.concat(extraProviders).concat({provide: marker, useValue: true}));\n      } else {\n        createPlatform(ReflectiveInjector.resolveAndCreate(\n            providers.concat(extraProviders).concat({provide: marker, useValue: true})));\n      }\n    }\n    return assertPlatform(marker);\n  };\n}\n/**\n * Checks that there currently is a platform\n * which contains the given token as a provider.\n * \n * \\@experimental APIs related to application bootstrap are currently under review.\n * @param {?} requiredToken\n * @return {?}\n */\nexport function assertPlatform(requiredToken: any): PlatformRef {\n  const /** @type {?} */ platform = getPlatform();\n\n  if (!platform) {\n    throw new Error('No platform exists!');\n  }\n\n  if (!platform.injector.get(requiredToken, null)) {\n    throw new Error(\n        'A platform with a different configuration has been created. Please destroy it first.');\n  }\n\n  return platform;\n}\n/**\n * Destroy the existing platform.\n * \n * \\@experimental APIs related to application bootstrap are currently under review.\n * @return {?}\n */\nexport function destroyPlatform(): void {\n  if (_platform && !_platform.destroyed) {\n    _platform.destroy();\n  }\n}\n/**\n * Returns the current platform.\n * \n * \\@experimental APIs related to application bootstrap are currently under review.\n * @return {?}\n */\nexport function getPlatform(): PlatformRef {\n  return _platform && !_platform.destroyed ? _platform : null;\n}\n/**\n * The Angular platform is the entry point for Angular on a web page. Each page\n * has exactly one platform, and services (such as reflection) which are common\n * to every Angular application running on the page are bound in its scope.\n * \n * A page's platform is initialized implicitly when {\\@link bootstrap}() is called, or\n * explicitly by calling {\\@link createPlatform}().\n * \n * \\@stable\n * @abstract\n */\nexport abstract class PlatformRef {\n/**\n * Creates an instance of an `\\@NgModule` for the given platform\n * for offline compilation.\n * \n * ## Simple Example\n * \n * ```typescript\n * my_module.ts:\n * \n * \\@NgModule({ \n *   imports: [BrowserModule]\n * })\n * class MyModule {}\n * \n * main.ts:\n * import {MyModuleNgFactory} from './my_module.ngfactory';\n * import {platformBrowser} from '\\@angular/platform-browser';\n * \n * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\n * ```\n * \n * \\@experimental APIs related to application bootstrap are currently under review.\n * @abstract\n * @param {?} moduleFactory\n * @return {?}\n */\nbootstrapModuleFactory<M>(moduleFactory: NgModuleFactory<M>) {}\n/**\n * Creates an instance of an `\\@NgModule` for a given platform using the given runtime compiler.\n * \n * ## Simple Example\n * \n * ```typescript\n * \\@NgModule({ \n *   imports: [BrowserModule]\n * })\n * class MyModule {}\n * \n * let moduleRef = platformBrowser().bootstrapModule(MyModule);\n * ```\n * \\@stable\n * @abstract\n * @param {?} moduleType\n * @param {?=} compilerOptions\n * @return {?}\n */\nbootstrapModule<M>(\n      moduleType: Type<M>,\n      compilerOptions?: CompilerOptions|CompilerOptions[]) {}\n/**\n * Register a listener to be called when the platform is disposed.\n * @abstract\n * @param {?} callback\n * @return {?}\n */\nonDestroy(callback: () => void) {}\n/**\n * Retrieve the platform {\\@link Injector}, which is the parent injector for\n * every Angular application on the page and provides singleton providers.\n * @abstract\n * @return {?}\n */\ninjector() {}\n/**\n * Destroy the Angular platform and all Angular applications on the page.\n * @abstract\n * @return {?}\n */\ndestroy() {}\n/**\n * @abstract\n * @return {?}\n */\ndestroyed() {}\n}\n/**\n * @param {?} errorHandler\n * @param {?} callback\n * @return {?}\n */\nfunction _callAndReportToErrorHandler(errorHandler: ErrorHandler, callback: () => any): any {\n  try {\n    const /** @type {?} */ result = callback();\n    if (isPromise(result)) {\n      return result.catch((e: any) => {\n        errorHandler.handleError(e);\n        // rethrow as the exception handler might not do it\n        throw e;\n      });\n    }\n\n    return result;\n  } catch ( /** @type {?} */e) {\n    errorHandler.handleError(e);\n    // rethrow as the exception handler might not do it\n    throw e;\n  }\n}\n/**\n * workaround https://github.com/angular/tsickle/issues/350\n * @suppress {checkTypes}\n */\nexport class PlatformRef_ extends PlatformRef {\nprivate _modules: NgModuleRef<any>[] = [];\nprivate _destroyListeners: Function[] = [];\nprivate _destroyed: boolean = false;\n/**\n * @param {?} _injector\n */\nconstructor(private _injector: Injector) { super(); }\n/**\n * @param {?} callback\n * @return {?}\n */\nonDestroy(callback: () => void): void { this._destroyListeners.push(callback); }\n/**\n * @return {?}\n */\nget injector(): Injector { return this._injector; }\n/**\n * @return {?}\n */\nget destroyed() { return this._destroyed; }\n/**\n * @return {?}\n */\ndestroy() {\n    if (this._destroyed) {\n      throw new Error('The platform has already been destroyed!');\n    }\n    this._modules.slice().forEach(module => module.destroy());\n    this._destroyListeners.forEach(listener => listener());\n    this._destroyed = true;\n  }\n/**\n * @param {?} moduleFactory\n * @return {?}\n */\nbootstrapModuleFactory<M>(moduleFactory: NgModuleFactory<M>): Promise<NgModuleRef<M>> {\n    return this._bootstrapModuleFactoryWithZone(moduleFactory, null);\n  }\n/**\n * @param {?} moduleFactory\n * @param {?} ngZone\n * @return {?}\n */\nprivate _bootstrapModuleFactoryWithZone<M>(moduleFactory: NgModuleFactory<M>, ngZone: NgZone):\n      Promise<NgModuleRef<M>> {\n    // Note: We need to create the NgZone _before_ we instantiate the module,\n    // as instantiating the module creates some providers eagerly.\n    // So we create a mini parent injector that just contains the new NgZone and\n    // pass that as parent to the NgModuleFactory.\n    if (!ngZone) ngZone = new NgZone({enableLongStackTrace: isDevMode()});\n    // Attention: Don't use ApplicationRef.run here,\n    // as we want to be sure that all possible constructor calls are inside `ngZone.run`!\n    return ngZone.run(() => {\n      const /** @type {?} */ ngZoneInjector =\n          ReflectiveInjector.resolveAndCreate([{provide: NgZone, useValue: ngZone}], this.injector);\n      const /** @type {?} */ moduleRef = /** @type {?} */(( <NgModuleInjector<M>>moduleFactory.create(ngZoneInjector)));\n      const /** @type {?} */ exceptionHandler: ErrorHandler = moduleRef.injector.get(ErrorHandler, null);\n      if (!exceptionHandler) {\n        throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');\n      }\n      moduleRef.onDestroy(() => ListWrapper.remove(this._modules, moduleRef));\n      ngZone.onError.subscribe({next: (error: any) => { exceptionHandler.handleError(error); }});\n      return _callAndReportToErrorHandler(exceptionHandler, () => {\n        const /** @type {?} */ initStatus: ApplicationInitStatus = moduleRef.injector.get(ApplicationInitStatus);\n        return initStatus.donePromise.then(() => {\n          this._moduleDoBootstrap(moduleRef);\n          return moduleRef;\n        });\n      });\n    });\n  }\n/**\n * @param {?} moduleType\n * @param {?=} compilerOptions\n * @return {?}\n */\nbootstrapModule<M>(moduleType: Type<M>, compilerOptions: CompilerOptions|CompilerOptions[] = []):\n      Promise<NgModuleRef<M>> {\n    return this._bootstrapModuleWithZone(moduleType, compilerOptions, null);\n  }\n/**\n * @param {?} moduleType\n * @param {?=} compilerOptions\n * @param {?=} ngZone\n * @return {?}\n */\nprivate _bootstrapModuleWithZone<M>(\n      moduleType: Type<M>, compilerOptions: CompilerOptions|CompilerOptions[] = [],\n      ngZone: NgZone = null): Promise<NgModuleRef<M>> {\n    const /** @type {?} */ compilerFactory: CompilerFactory = this.injector.get(CompilerFactory);\n    const /** @type {?} */ compiler = compilerFactory.createCompiler(\n        Array.isArray(compilerOptions) ? compilerOptions : [compilerOptions]);\n\n    return compiler.compileModuleAsync(moduleType)\n        .then((moduleFactory) => this._bootstrapModuleFactoryWithZone(moduleFactory, ngZone));\n  }\n/**\n * @param {?} moduleRef\n * @return {?}\n */\nprivate _moduleDoBootstrap(moduleRef: NgModuleInjector<any>): void {\n    const /** @type {?} */ appRef = moduleRef.injector.get(ApplicationRef);\n    if (moduleRef.bootstrapFactories.length > 0) {\n      moduleRef.bootstrapFactories.forEach((compFactory) => appRef.bootstrap(compFactory));\n    } else if (moduleRef.instance.ngDoBootstrap) {\n      moduleRef.instance.ngDoBootstrap(appRef);\n    } else {\n      throw new Error(\n          `The module ${stringify(moduleRef.instance.constructor)} was bootstrapped, but it does not declare \"@NgModule.bootstrap\" components nor a \"ngDoBootstrap\" method. ` +\n          `Please define one of these.`);\n    }\n    this._modules.push(moduleRef);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Injector, },\n];\n}\n\nfunction PlatformRef__tsickle_Closure_declarations() {\n/** @type {?} */\nPlatformRef_.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPlatformRef_.ctorParameters;\n/** @type {?} */\nPlatformRef_.prototype._modules;\n/** @type {?} */\nPlatformRef_.prototype._destroyListeners;\n/** @type {?} */\nPlatformRef_.prototype._destroyed;\n/** @type {?} */\nPlatformRef_.prototype._injector;\n}\n\n/**\n * A reference to an Angular application running on a page.\n * \n * For more about Angular applications, see the documentation for {\\@link bootstrap}.\n * \n * \\@stable\n * @abstract\n */\nexport abstract class ApplicationRef {\n/**\n * Bootstrap a new component at the root level of the application.\n * \n * ### Bootstrap process\n * \n * When bootstrapping a new root component into an application, Angular mounts the\n * specified application component onto DOM elements identified by the [componentType]'s\n * selector and kicks off automatic change detection to finish initializing the component.\n * \n * ### Example\n * {\\@example core/ts/platform/platform.ts region='longform'}\n * @abstract\n * @param {?} componentFactory\n * @return {?}\n */\nbootstrap<C>(componentFactory: ComponentFactory<C>|Type<C>) {}\n/**\n * Invoke this method to explicitly process change detection and its side-effects.\n * \n * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n * further changes are detected. If additional changes are picked up during this second cycle,\n * bindings in the app have side-effects that cannot be resolved in a single change detection\n * pass.\n * In this case, Angular throws an error, since an Angular application can only have one change\n * detection pass during which all change detection must complete.\n * @abstract\n * @return {?}\n */\ntick() {}\n/**\n * Get a list of component types registered to this application.\n * This list is populated even before the component is created.\n * @abstract\n * @return {?}\n */\ncomponentTypes() {}\n/**\n * Get a list of components registered to this application.\n * @abstract\n * @return {?}\n */\ncomponents() {}\n/**\n * Attaches a view so that it will be dirty checked.\n * The view will be automatically detached when it is destroyed.\n * This will throw if the view is already attached to a ViewContainer.\n * @abstract\n * @param {?} view\n * @return {?}\n */\nattachView(view: ViewRef) {}\n/**\n * Detaches a view from dirty checking again.\n * @abstract\n * @param {?} view\n * @return {?}\n */\ndetachView(view: ViewRef) {}\n/**\n * Returns the number of attached views.\n * @abstract\n * @return {?}\n */\nviewCount() {}\n}\n/**\n * workaround https://github.com/angular/tsickle/issues/350\n * @suppress {checkTypes}\n */\nexport class ApplicationRef_ extends ApplicationRef {\n  /** @internal */\n  static _tickScope: WtfScopeFn = wtfCreateScope('ApplicationRef#tick()');\nprivate _bootstrapListeners: ((compRef: ComponentRef<any>) => void)[] = [];\nprivate _rootComponents: ComponentRef<any>[] = [];\nprivate _rootComponentTypes: Type<any>[] = [];\nprivate _views: AppView<any>[] = [];\nprivate _runningTick: boolean = false;\nprivate _enforceNoNewChanges: boolean = false;\n/**\n * @param {?} _zone\n * @param {?} _console\n * @param {?} _injector\n * @param {?} _exceptionHandler\n * @param {?} _componentFactoryResolver\n * @param {?} _initStatus\n * @param {?} _testabilityRegistry\n * @param {?} _testability\n */\nconstructor(\nprivate _zone: NgZone,\nprivate _console: Console,\nprivate _injector: Injector,\nprivate _exceptionHandler: ErrorHandler,\nprivate _componentFactoryResolver: ComponentFactoryResolver,\nprivate _initStatus: ApplicationInitStatus,\nprivate _testabilityRegistry: TestabilityRegistry,\nprivate _testability: Testability) {\n    super();\n    this._enforceNoNewChanges = isDevMode();\n\n    this._zone.onMicrotaskEmpty.subscribe(\n        {next: () => { this._zone.run(() => { this.tick(); }); }});\n  }\n/**\n * @param {?} viewRef\n * @return {?}\n */\nattachView(viewRef: ViewRef): void {\n    const /** @type {?} */ view = ( /** @type {?} */((viewRef as ViewRef_<any>))).internalView;\n    this._views.push(view);\n    view.attachToAppRef(this);\n  }\n/**\n * @param {?} viewRef\n * @return {?}\n */\ndetachView(viewRef: ViewRef): void {\n    const /** @type {?} */ view = ( /** @type {?} */((viewRef as ViewRef_<any>))).internalView;\n    ListWrapper.remove(this._views, view);\n    view.detach();\n  }\n/**\n * @param {?} componentOrFactory\n * @return {?}\n */\nbootstrap<C>(componentOrFactory: ComponentFactory<C>|Type<C>): ComponentRef<C> {\n    if (!this._initStatus.done) {\n      throw new Error(\n          'Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');\n    }\n    let /** @type {?} */ componentFactory: ComponentFactory<C>;\n    if (componentOrFactory instanceof ComponentFactory) {\n      componentFactory = componentOrFactory;\n    } else {\n      componentFactory = this._componentFactoryResolver.resolveComponentFactory(componentOrFactory);\n    }\n    this._rootComponentTypes.push(componentFactory.componentType);\n    const /** @type {?} */ compRef = componentFactory.create(this._injector, [], componentFactory.selector);\n    compRef.onDestroy(() => { this._unloadComponent(compRef); });\n    const /** @type {?} */ testability = compRef.injector.get(Testability, null);\n    if (testability) {\n      compRef.injector.get(TestabilityRegistry)\n          .registerApplication(compRef.location.nativeElement, testability);\n    }\n\n    this._loadComponent(compRef);\n    if (isDevMode()) {\n      this._console.log(\n          `Angular is running in the development mode. Call enableProdMode() to enable the production mode.`);\n    }\n    return compRef;\n  }\n/**\n * @param {?} componentRef\n * @return {?}\n */\nprivate _loadComponent(componentRef: ComponentRef<any>): void {\n    this.attachView(componentRef.hostView);\n    this.tick();\n    this._rootComponents.push(componentRef);\n    // Get the listeners lazily to prevent DI cycles.\n    const /** @type {?} */ listeners =\n        this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);\n    listeners.forEach((listener) => listener(componentRef));\n  }\n/**\n * @param {?} componentRef\n * @return {?}\n */\nprivate _unloadComponent(componentRef: ComponentRef<any>): void {\n    this.detachView(componentRef.hostView);\n    ListWrapper.remove(this._rootComponents, componentRef);\n  }\n/**\n * @return {?}\n */\ntick(): void {\n    if (this._runningTick) {\n      throw new Error('ApplicationRef.tick is called recursively');\n    }\n\n    const /** @type {?} */ scope = ApplicationRef_._tickScope();\n    try {\n      this._runningTick = true;\n      this._views.forEach((view) => view.ref.detectChanges());\n      if (this._enforceNoNewChanges) {\n        this._views.forEach((view) => view.ref.checkNoChanges());\n      }\n    } finally {\n      this._runningTick = false;\n      wtfLeave(scope);\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    // TODO(alxhub): Dispose of the NgZone.\n    this._views.slice().forEach((view) => view.destroy());\n  }\n/**\n * @return {?}\n */\nget viewCount() { return this._views.length; }\n/**\n * @return {?}\n */\nget componentTypes(): Type<any>[] { return this._rootComponentTypes; }\n/**\n * @return {?}\n */\nget components(): ComponentRef<any>[] { return this._rootComponents; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: Console, },\n{type: Injector, },\n{type: ErrorHandler, },\n{type: ComponentFactoryResolver, },\n{type: ApplicationInitStatus, },\n{type: TestabilityRegistry, decorators: [{ type: Optional }, ]},\n{type: Testability, decorators: [{ type: Optional }, ]},\n];\n}\n\nfunction ApplicationRef__tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nApplicationRef_._tickScope;\n/** @type {?} */\nApplicationRef_.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nApplicationRef_.ctorParameters;\n/** @type {?} */\nApplicationRef_.prototype._bootstrapListeners;\n/** @type {?} */\nApplicationRef_.prototype._rootComponents;\n/** @type {?} */\nApplicationRef_.prototype._rootComponentTypes;\n/** @type {?} */\nApplicationRef_.prototype._views;\n/** @type {?} */\nApplicationRef_.prototype._runningTick;\n/** @type {?} */\nApplicationRef_.prototype._enforceNoNewChanges;\n/** @type {?} */\nApplicationRef_.prototype._zone;\n/** @type {?} */\nApplicationRef_.prototype._console;\n/** @type {?} */\nApplicationRef_.prototype._injector;\n/** @type {?} */\nApplicationRef_.prototype._exceptionHandler;\n/** @type {?} */\nApplicationRef_.prototype._componentFactoryResolver;\n/** @type {?} */\nApplicationRef_.prototype._initStatus;\n/** @type {?} */\nApplicationRef_.prototype._testabilityRegistry;\n/** @type {?} */\nApplicationRef_.prototype._testability;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}