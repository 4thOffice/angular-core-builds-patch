{"version":3,"sources":["../../../../../../modules/@angular/core/src/change_detection/differs/default_iterable_differ.ts"],"names":[],"mappings":"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","file":"default_iterable_differ.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isListLikeIterable, iterateListLike} from '../../facade/collection';\nimport {isBlank, looseIdentical, stringify} from '../../facade/lang';\nimport {ChangeDetectorRef} from '../change_detector_ref';\n\nimport {IterableChangeRecord, IterableChanges, IterableDiffer, IterableDifferFactory, NgIterable, TrackByFunction} from './iterable_differs';\nexport class DefaultIterableDifferFactory implements IterableDifferFactory {\nconstructor() {}\n/**\n * @param {?} obj\n * @return {?}\n */\nsupports(obj: Object): boolean { return isListLikeIterable(obj); }\n/**\n * @param {?} cdRef\n * @param {?=} trackByFn\n * @return {?}\n */\ncreate<V>(cdRef: ChangeDetectorRef, trackByFn?: TrackByFunction<any>): DefaultIterableDiffer<V> {\n    return new DefaultIterableDiffer<V>(trackByFn);\n  }\n}\n\nconst /** @type {?} */ trackByIdentity = (index: number, item: any) => item;\n/**\n * @deprecated v4.0.0 - Should not be part of public API.\n */\nexport class DefaultIterableDiffer<V> implements IterableDiffer<V>, IterableChanges<V> {\nprivate _length: number = null;\nprivate _collection: NgIterable<V> = null;\nprivate _linkedRecords: _DuplicateMap<V> = null;\nprivate _unlinkedRecords: _DuplicateMap<V> = null;\nprivate _previousItHead: IterableChangeRecord_<V> = null;\nprivate _itHead: IterableChangeRecord_<V> = null;\nprivate _itTail: IterableChangeRecord_<V> = null;\nprivate _additionsHead: IterableChangeRecord_<V> = null;\nprivate _additionsTail: IterableChangeRecord_<V> = null;\nprivate _movesHead: IterableChangeRecord_<V> = null;\nprivate _movesTail: IterableChangeRecord_<V> = null;\nprivate _removalsHead: IterableChangeRecord_<V> = null;\nprivate _removalsTail: IterableChangeRecord_<V> = null;\nprivate _identityChangesHead: IterableChangeRecord_<V> = null;\nprivate _identityChangesTail: IterableChangeRecord_<V> = null;\n/**\n * @param {?=} _trackByFn\n */\nconstructor(private _trackByFn?: TrackByFunction<V>) {\n    this._trackByFn = this._trackByFn || trackByIdentity;\n  }\n/**\n * @return {?}\n */\nget collection() { return this._collection; }\n/**\n * @return {?}\n */\nget length(): number { return this._length; }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEachItem(fn: (record: IterableChangeRecord_<V>) => void) {\n    let /** @type {?} */ record: IterableChangeRecord_<V>;\n    for (record = this._itHead; record !== null; record = record._next) {\n      fn(record);\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEachOperation(\n      fn: (item: IterableChangeRecord_<V>, previousIndex: number, currentIndex: number) => void) {\n    let /** @type {?} */ nextIt = this._itHead;\n    let /** @type {?} */ nextRemove = this._removalsHead;\n    let /** @type {?} */ addRemoveOffset = 0;\n    let /** @type {?} */ moveOffsets: number[] = null;\n    while (nextIt || nextRemove) {\n      // Figure out which is the next record to process\n      // Order: remove, add, move\n      const /** @type {?} */ record = !nextRemove ||\n              nextIt &&\n                  nextIt.currentIndex < getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ?\n          nextIt :\n          nextRemove;\n      const /** @type {?} */ adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);\n      const /** @type {?} */ currentIndex = record.currentIndex;\n\n      // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary\n      if (record === nextRemove) {\n        addRemoveOffset--;\n        nextRemove = nextRemove._nextRemoved;\n      } else {\n        nextIt = nextIt._next;\n        if (record.previousIndex == null) {\n          addRemoveOffset++;\n        } else {\n          // INVARIANT:  currentIndex < previousIndex\n          if (!moveOffsets) moveOffsets = [];\n          const /** @type {?} */ localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;\n          const /** @type {?} */ localCurrentIndex = currentIndex - addRemoveOffset;\n          if (localMovePreviousIndex != localCurrentIndex) {\n            for (let /** @type {?} */ i = 0; i < localMovePreviousIndex; i++) {\n              const /** @type {?} */ offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);\n              const /** @type {?} */ index = offset + i;\n              if (localCurrentIndex <= index && index < localMovePreviousIndex) {\n                moveOffsets[i] = offset + 1;\n              }\n            }\n            const /** @type {?} */ previousIndex = record.previousIndex;\n            moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;\n          }\n        }\n      }\n\n      if (adjPreviousIndex !== currentIndex) {\n        fn(record, adjPreviousIndex, currentIndex);\n      }\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEachPreviousItem(fn: (record: IterableChangeRecord_<V>) => void) {\n    let /** @type {?} */ record: IterableChangeRecord_<V>;\n    for (record = this._previousItHead; record !== null; record = record._nextPrevious) {\n      fn(record);\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEachAddedItem(fn: (record: IterableChangeRecord_<V>) => void) {\n    let /** @type {?} */ record: IterableChangeRecord_<V>;\n    for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n      fn(record);\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEachMovedItem(fn: (record: IterableChangeRecord_<V>) => void) {\n    let /** @type {?} */ record: IterableChangeRecord_<V>;\n    for (record = this._movesHead; record !== null; record = record._nextMoved) {\n      fn(record);\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEachRemovedItem(fn: (record: IterableChangeRecord_<V>) => void) {\n    let /** @type {?} */ record: IterableChangeRecord_<V>;\n    for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n      fn(record);\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEachIdentityChange(fn: (record: IterableChangeRecord_<V>) => void) {\n    let /** @type {?} */ record: IterableChangeRecord_<V>;\n    for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {\n      fn(record);\n    }\n  }\n/**\n * @param {?} collection\n * @return {?}\n */\ndiff(collection: NgIterable<V>): DefaultIterableDiffer<V> {\n    if (isBlank(collection)) collection = [];\n    if (!isListLikeIterable(collection)) {\n      throw new Error(`Error trying to diff '${collection}'`);\n    }\n\n    if (this.check(collection)) {\n      return this;\n    } else {\n      return null;\n    }\n  }\n/**\n * @return {?}\n */\nonDestroy() {}\n/**\n * @param {?} collection\n * @return {?}\n */\ncheck(collection: NgIterable<V>): boolean {\n    this._reset();\n\n    let /** @type {?} */ record: IterableChangeRecord_<V> = this._itHead;\n    let /** @type {?} */ mayBeDirty: boolean = false;\n    let /** @type {?} */ index: number;\n    let /** @type {?} */ item: V;\n    let /** @type {?} */ itemTrackBy: any;\n    if (Array.isArray(collection)) {\n      this._length = collection.length;\n\n      for (let /** @type {?} */ index = 0; index < this._length; index++) {\n        item = collection[index];\n        itemTrackBy = this._trackByFn(index, item);\n        if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n          record = this._mismatch(record, item, itemTrackBy, index);\n          mayBeDirty = true;\n        } else {\n          if (mayBeDirty) {\n            // TODO(misko): can we limit this to duplicates only?\n            record = this._verifyReinsertion(record, item, itemTrackBy, index);\n          }\n          if (!looseIdentical(record.item, item)) this._addIdentityChange(record, item);\n        }\n\n        record = record._next;\n      }\n    } else {\n      index = 0;\n      iterateListLike(collection, (item: V) => {\n        itemTrackBy = this._trackByFn(index, item);\n        if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n          record = this._mismatch(record, item, itemTrackBy, index);\n          mayBeDirty = true;\n        } else {\n          if (mayBeDirty) {\n            // TODO(misko): can we limit this to duplicates only?\n            record = this._verifyReinsertion(record, item, itemTrackBy, index);\n          }\n          if (!looseIdentical(record.item, item)) this._addIdentityChange(record, item);\n        }\n        record = record._next;\n        index++;\n      });\n      this._length = index;\n    }\n\n    this._truncate(record);\n    this._collection = collection;\n    return this.isDirty;\n  }\n/**\n * @return {?}\n */\nget isDirty(): boolean {\n    return this._additionsHead !== null || this._movesHead !== null ||\n        this._removalsHead !== null || this._identityChangesHead !== null;\n  }\n/**\n * Reset the state of the change objects to show no changes. This means set previousKey to\n * currentKey, and clear all of the queues (additions, moves, removals).\n * Set the previousIndexes of moved and added items to their currentIndexes\n * Reset the list of additions, moves and removals\n * \n * \\@internal\n * @return {?}\n */\n_reset() {\n    if (this.isDirty) {\n      let /** @type {?} */ record: IterableChangeRecord_<V>;\n      let /** @type {?} */ nextRecord: IterableChangeRecord_<V>;\n\n      for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {\n        record._nextPrevious = record._next;\n      }\n\n      for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n        record.previousIndex = record.currentIndex;\n      }\n      this._additionsHead = this._additionsTail = null;\n\n      for (record = this._movesHead; record !== null; record = nextRecord) {\n        record.previousIndex = record.currentIndex;\n        nextRecord = record._nextMoved;\n      }\n      this._movesHead = this._movesTail = null;\n      this._removalsHead = this._removalsTail = null;\n      this._identityChangesHead = this._identityChangesTail = null;\n\n      // todo(vicb) when assert gets supported\n      // assert(!this.isDirty);\n    }\n  }\n/**\n * This is the core function which handles differences between collections.\n * \n * - `record` is the record which we saw at this position last time. If null then it is a new\n *   item.\n * - `item` is the current item in the collection\n * - `index` is the position of the item in the collection\n * \n * \\@internal\n * @param {?} record\n * @param {?} item\n * @param {?} itemTrackBy\n * @param {?} index\n * @return {?}\n */\n_mismatch(record: IterableChangeRecord_<V>, item: V, itemTrackBy: any, index: number):\n      IterableChangeRecord_<V> {\n    // The previous record after which we will append the current one.\n    let /** @type {?} */ previousRecord: IterableChangeRecord_<V>;\n\n    if (record === null) {\n      previousRecord = this._itTail;\n    } else {\n      previousRecord = record._prev;\n      // Remove the record from the collection since we know it does not match the item.\n      this._remove(record);\n    }\n\n    // Attempt to see if we have seen the item before.\n    record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);\n    if (record !== null) {\n      // We have seen this before, we need to move it forward in the collection.\n      // But first we need to check if identity changed, so we can update in view if necessary\n      if (!looseIdentical(record.item, item)) this._addIdentityChange(record, item);\n\n      this._moveAfter(record, previousRecord, index);\n    } else {\n      // Never seen it, check evicted list.\n      record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);\n      if (record !== null) {\n        // It is an item which we have evicted earlier: reinsert it back into the list.\n        // But first we need to check if identity changed, so we can update in view if necessary\n        if (!looseIdentical(record.item, item)) this._addIdentityChange(record, item);\n\n        this._reinsertAfter(record, previousRecord, index);\n      } else {\n        // It is a new item: add it.\n        record =\n            this._addAfter(new IterableChangeRecord_<V>(item, itemTrackBy), previousRecord, index);\n      }\n    }\n    return record;\n  }\n/**\n * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\n * \n * Use case: `[a, a]` => `[b, a, a]`\n * \n * If we did not have this check then the insertion of `b` would:\n *   1) evict first `a`\n *   2) insert `b` at `0` index.\n *   3) leave `a` at index `1` as is. <-- this is wrong!\n *   3) reinsert `a` at index 2. <-- this is wrong!\n * \n * The correct behavior is:\n *   1) evict first `a`\n *   2) insert `b` at `0` index.\n *   3) reinsert `a` at index 1.\n *   3) move `a` at from `1` to `2`.\n * \n * \n * Double check that we have not evicted a duplicate item. We need to check if the item type may\n * have already been removed:\n * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\n * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\n * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\n * at the end.\n * \n * \\@internal\n * @param {?} record\n * @param {?} item\n * @param {?} itemTrackBy\n * @param {?} index\n * @return {?}\n */\n_verifyReinsertion(record: IterableChangeRecord_<V>, item: V, itemTrackBy: any, index: number):\n      IterableChangeRecord_<V> {\n    let /** @type {?} */ reinsertRecord: IterableChangeRecord_<V> =\n        this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);\n    if (reinsertRecord !== null) {\n      record = this._reinsertAfter(reinsertRecord, record._prev, index);\n    } else if (record.currentIndex != index) {\n      record.currentIndex = index;\n      this._addToMoves(record, index);\n    }\n    return record;\n  }\n/**\n * Get rid of any excess {\\@link IterableChangeRecord_}s from the previous collection\n * \n * - `record` The first excess {\\@link IterableChangeRecord_}.\n * \n * \\@internal\n * @param {?} record\n * @return {?}\n */\n_truncate(record: IterableChangeRecord_<V>) {\n    // Anything after that needs to be removed;\n    while (record !== null) {\n      const /** @type {?} */ nextRecord: IterableChangeRecord_<V> = record._next;\n      this._addToRemovals(this._unlink(record));\n      record = nextRecord;\n    }\n    if (this._unlinkedRecords !== null) {\n      this._unlinkedRecords.clear();\n    }\n\n    if (this._additionsTail !== null) {\n      this._additionsTail._nextAdded = null;\n    }\n    if (this._movesTail !== null) {\n      this._movesTail._nextMoved = null;\n    }\n    if (this._itTail !== null) {\n      this._itTail._next = null;\n    }\n    if (this._removalsTail !== null) {\n      this._removalsTail._nextRemoved = null;\n    }\n    if (this._identityChangesTail !== null) {\n      this._identityChangesTail._nextIdentityChange = null;\n    }\n  }\n/**\n * \\@internal\n * @param {?} record\n * @param {?} prevRecord\n * @param {?} index\n * @return {?}\n */\n_reinsertAfter(\n      record: IterableChangeRecord_<V>, prevRecord: IterableChangeRecord_<V>,\n      index: number): IterableChangeRecord_<V> {\n    if (this._unlinkedRecords !== null) {\n      this._unlinkedRecords.remove(record);\n    }\n    const /** @type {?} */ prev = record._prevRemoved;\n    const /** @type {?} */ next = record._nextRemoved;\n\n    if (prev === null) {\n      this._removalsHead = next;\n    } else {\n      prev._nextRemoved = next;\n    }\n    if (next === null) {\n      this._removalsTail = prev;\n    } else {\n      next._prevRemoved = prev;\n    }\n\n    this._insertAfter(record, prevRecord, index);\n    this._addToMoves(record, index);\n    return record;\n  }\n/**\n * \\@internal\n * @param {?} record\n * @param {?} prevRecord\n * @param {?} index\n * @return {?}\n */\n_moveAfter(record: IterableChangeRecord_<V>, prevRecord: IterableChangeRecord_<V>, index: number):\n      IterableChangeRecord_<V> {\n    this._unlink(record);\n    this._insertAfter(record, prevRecord, index);\n    this._addToMoves(record, index);\n    return record;\n  }\n/**\n * \\@internal\n * @param {?} record\n * @param {?} prevRecord\n * @param {?} index\n * @return {?}\n */\n_addAfter(record: IterableChangeRecord_<V>, prevRecord: IterableChangeRecord_<V>, index: number):\n      IterableChangeRecord_<V> {\n    this._insertAfter(record, prevRecord, index);\n\n    if (this._additionsTail === null) {\n      // todo(vicb)\n      // assert(this._additionsHead === null);\n      this._additionsTail = this._additionsHead = record;\n    } else {\n      // todo(vicb)\n      // assert(_additionsTail._nextAdded === null);\n      // assert(record._nextAdded === null);\n      this._additionsTail = this._additionsTail._nextAdded = record;\n    }\n    return record;\n  }\n/**\n * \\@internal\n * @param {?} record\n * @param {?} prevRecord\n * @param {?} index\n * @return {?}\n */\n_insertAfter(\n      record: IterableChangeRecord_<V>, prevRecord: IterableChangeRecord_<V>,\n      index: number): IterableChangeRecord_<V> {\n    // todo(vicb)\n    // assert(record != prevRecord);\n    // assert(record._next === null);\n    // assert(record._prev === null);\n\n    const /** @type {?} */ next: IterableChangeRecord_<V> = prevRecord === null ? this._itHead : prevRecord._next;\n    // todo(vicb)\n    // assert(next != record);\n    // assert(prevRecord != record);\n    record._next = next;\n    record._prev = prevRecord;\n    if (next === null) {\n      this._itTail = record;\n    } else {\n      next._prev = record;\n    }\n    if (prevRecord === null) {\n      this._itHead = record;\n    } else {\n      prevRecord._next = record;\n    }\n\n    if (this._linkedRecords === null) {\n      this._linkedRecords = new _DuplicateMap<V>();\n    }\n    this._linkedRecords.put(record);\n\n    record.currentIndex = index;\n    return record;\n  }\n/**\n * \\@internal\n * @param {?} record\n * @return {?}\n */\n_remove(record: IterableChangeRecord_<V>): IterableChangeRecord_<V> {\n    return this._addToRemovals(this._unlink(record));\n  }\n/**\n * \\@internal\n * @param {?} record\n * @return {?}\n */\n_unlink(record: IterableChangeRecord_<V>): IterableChangeRecord_<V> {\n    if (this._linkedRecords !== null) {\n      this._linkedRecords.remove(record);\n    }\n\n    const /** @type {?} */ prev = record._prev;\n    const /** @type {?} */ next = record._next;\n\n    // todo(vicb)\n    // assert((record._prev = null) === null);\n    // assert((record._next = null) === null);\n\n    if (prev === null) {\n      this._itHead = next;\n    } else {\n      prev._next = next;\n    }\n    if (next === null) {\n      this._itTail = prev;\n    } else {\n      next._prev = prev;\n    }\n\n    return record;\n  }\n/**\n * \\@internal\n * @param {?} record\n * @param {?} toIndex\n * @return {?}\n */\n_addToMoves(record: IterableChangeRecord_<V>, toIndex: number): IterableChangeRecord_<V> {\n    // todo(vicb)\n    // assert(record._nextMoved === null);\n\n    if (record.previousIndex === toIndex) {\n      return record;\n    }\n\n    if (this._movesTail === null) {\n      // todo(vicb)\n      // assert(_movesHead === null);\n      this._movesTail = this._movesHead = record;\n    } else {\n      // todo(vicb)\n      // assert(_movesTail._nextMoved === null);\n      this._movesTail = this._movesTail._nextMoved = record;\n    }\n\n    return record;\n  }\n/**\n * @param {?} record\n * @return {?}\n */\nprivate _addToRemovals(record: IterableChangeRecord_<V>): IterableChangeRecord_<V> {\n    if (this._unlinkedRecords === null) {\n      this._unlinkedRecords = new _DuplicateMap<V>();\n    }\n    this._unlinkedRecords.put(record);\n    record.currentIndex = null;\n    record._nextRemoved = null;\n\n    if (this._removalsTail === null) {\n      // todo(vicb)\n      // assert(_removalsHead === null);\n      this._removalsTail = this._removalsHead = record;\n      record._prevRemoved = null;\n    } else {\n      // todo(vicb)\n      // assert(_removalsTail._nextRemoved === null);\n      // assert(record._nextRemoved === null);\n      record._prevRemoved = this._removalsTail;\n      this._removalsTail = this._removalsTail._nextRemoved = record;\n    }\n    return record;\n  }\n/**\n * \\@internal\n * @param {?} record\n * @param {?} item\n * @return {?}\n */\n_addIdentityChange(record: IterableChangeRecord_<V>, item: V) {\n    record.item = item;\n    if (this._identityChangesTail === null) {\n      this._identityChangesTail = this._identityChangesHead = record;\n    } else {\n      this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;\n    }\n    return record;\n  }\n/**\n * @return {?}\n */\ntoString(): string {\n    const /** @type {?} */ list: IterableChangeRecord_<V>[] = [];\n    this.forEachItem((record: IterableChangeRecord_<V>) => list.push(record));\n\n    const /** @type {?} */ previous: IterableChangeRecord_<V>[] = [];\n    this.forEachPreviousItem((record: IterableChangeRecord_<V>) => previous.push(record));\n\n    const /** @type {?} */ additions: IterableChangeRecord_<V>[] = [];\n    this.forEachAddedItem((record: IterableChangeRecord_<V>) => additions.push(record));\n\n    const /** @type {?} */ moves: IterableChangeRecord_<V>[] = [];\n    this.forEachMovedItem((record: IterableChangeRecord_<V>) => moves.push(record));\n\n    const /** @type {?} */ removals: IterableChangeRecord_<V>[] = [];\n    this.forEachRemovedItem((record: IterableChangeRecord_<V>) => removals.push(record));\n\n    const /** @type {?} */ identityChanges: IterableChangeRecord_<V>[] = [];\n    this.forEachIdentityChange((record: IterableChangeRecord_<V>) => identityChanges.push(record));\n\n    return 'collection: ' + list.join(', ') + '\\n' +\n        'previous: ' + previous.join(', ') + '\\n' +\n        'additions: ' + additions.join(', ') + '\\n' +\n        'moves: ' + moves.join(', ') + '\\n' +\n        'removals: ' + removals.join(', ') + '\\n' +\n        'identityChanges: ' + identityChanges.join(', ') + '\\n';\n  }\n}\n\nfunction DefaultIterableDiffer_tsickle_Closure_declarations() {\n/** @type {?} */\nDefaultIterableDiffer.prototype._length;\n/** @type {?} */\nDefaultIterableDiffer.prototype._collection;\n/** @type {?} */\nDefaultIterableDiffer.prototype._linkedRecords;\n/** @type {?} */\nDefaultIterableDiffer.prototype._unlinkedRecords;\n/** @type {?} */\nDefaultIterableDiffer.prototype._previousItHead;\n/** @type {?} */\nDefaultIterableDiffer.prototype._itHead;\n/** @type {?} */\nDefaultIterableDiffer.prototype._itTail;\n/** @type {?} */\nDefaultIterableDiffer.prototype._additionsHead;\n/** @type {?} */\nDefaultIterableDiffer.prototype._additionsTail;\n/** @type {?} */\nDefaultIterableDiffer.prototype._movesHead;\n/** @type {?} */\nDefaultIterableDiffer.prototype._movesTail;\n/** @type {?} */\nDefaultIterableDiffer.prototype._removalsHead;\n/** @type {?} */\nDefaultIterableDiffer.prototype._removalsTail;\n/** @type {?} */\nDefaultIterableDiffer.prototype._identityChangesHead;\n/** @type {?} */\nDefaultIterableDiffer.prototype._identityChangesTail;\n/** @type {?} */\nDefaultIterableDiffer.prototype._trackByFn;\n}\n\n/**\n * \\@stable\n */\nexport class IterableChangeRecord_<V> implements IterableChangeRecord<V> {\n  currentIndex: number = null;\n  previousIndex: number = null;\n\n  /** @internal */\n  _nextPrevious: IterableChangeRecord_<V> = null;\n  /** @internal */\n  _prev: IterableChangeRecord_<V> = null;\n  /** @internal */\n  _next: IterableChangeRecord_<V> = null;\n  /** @internal */\n  _prevDup: IterableChangeRecord_<V> = null;\n  /** @internal */\n  _nextDup: IterableChangeRecord_<V> = null;\n  /** @internal */\n  _prevRemoved: IterableChangeRecord_<V> = null;\n  /** @internal */\n  _nextRemoved: IterableChangeRecord_<V> = null;\n  /** @internal */\n  _nextAdded: IterableChangeRecord_<V> = null;\n  /** @internal */\n  _nextMoved: IterableChangeRecord_<V> = null;\n  /** @internal */\n  _nextIdentityChange: IterableChangeRecord_<V> = null;\n/**\n * @param {?} item\n * @param {?} trackById\n */\nconstructor(public item: V,\npublic trackById: any) {}\n/**\n * @return {?}\n */\ntoString(): string {\n    return this.previousIndex === this.currentIndex ? stringify(this.item) :\n                                                      stringify(this.item) + '[' +\n            stringify(this.previousIndex) + '->' + stringify(this.currentIndex) + ']';\n  }\n}\n\nfunction IterableChangeRecord__tsickle_Closure_declarations() {\n/** @type {?} */\nIterableChangeRecord_.prototype.currentIndex;\n/** @type {?} */\nIterableChangeRecord_.prototype.previousIndex;\n/**\n * \\@internal\n * @type {?}\n */\nIterableChangeRecord_.prototype._nextPrevious;\n/**\n * \\@internal\n * @type {?}\n */\nIterableChangeRecord_.prototype._prev;\n/**\n * \\@internal\n * @type {?}\n */\nIterableChangeRecord_.prototype._next;\n/**\n * \\@internal\n * @type {?}\n */\nIterableChangeRecord_.prototype._prevDup;\n/**\n * \\@internal\n * @type {?}\n */\nIterableChangeRecord_.prototype._nextDup;\n/**\n * \\@internal\n * @type {?}\n */\nIterableChangeRecord_.prototype._prevRemoved;\n/**\n * \\@internal\n * @type {?}\n */\nIterableChangeRecord_.prototype._nextRemoved;\n/**\n * \\@internal\n * @type {?}\n */\nIterableChangeRecord_.prototype._nextAdded;\n/**\n * \\@internal\n * @type {?}\n */\nIterableChangeRecord_.prototype._nextMoved;\n/**\n * \\@internal\n * @type {?}\n */\nIterableChangeRecord_.prototype._nextIdentityChange;\n/** @type {?} */\nIterableChangeRecord_.prototype.item;\n/** @type {?} */\nIterableChangeRecord_.prototype.trackById;\n}\n\nclass _DuplicateItemRecordList<V> {\n  /** @internal */\n  _head: IterableChangeRecord_<V> = null;\n  /** @internal */\n  _tail: IterableChangeRecord_<V> = null;\n/**\n * Append the record to the list of duplicates.\n * \n * Note: by design all records in the list of duplicates hold the same value in record.item.\n * @param {?} record\n * @return {?}\n */\nadd(record: IterableChangeRecord_<V>): void {\n    if (this._head === null) {\n      this._head = this._tail = record;\n      record._nextDup = null;\n      record._prevDup = null;\n    } else {\n      // todo(vicb)\n      // assert(record.item ==  _head.item ||\n      //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);\n      this._tail._nextDup = record;\n      record._prevDup = this._tail;\n      record._nextDup = null;\n      this._tail = record;\n    }\n  }\n/**\n * @param {?} trackById\n * @param {?} afterIndex\n * @return {?}\n */\nget(trackById: any, afterIndex: number): IterableChangeRecord_<V> {\n    let /** @type {?} */ record: IterableChangeRecord_<V>;\n    for (record = this._head; record !== null; record = record._nextDup) {\n      if ((afterIndex === null || afterIndex < record.currentIndex) &&\n          looseIdentical(record.trackById, trackById)) {\n        return record;\n      }\n    }\n    return null;\n  }\n/**\n * Remove one {\\@link IterableChangeRecord_} from the list of duplicates.\n * \n * Returns whether the list of duplicates is empty.\n * @param {?} record\n * @return {?}\n */\nremove(record: IterableChangeRecord_<V>): boolean {\n    // todo(vicb)\n    // assert(() {\n    //  // verify that the record being removed is in the list.\n    //  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {\n    //    if (identical(cursor, record)) return true;\n    //  }\n    //  return false;\n    //});\n\n    const /** @type {?} */ prev: IterableChangeRecord_<V> = record._prevDup;\n    const /** @type {?} */ next: IterableChangeRecord_<V> = record._nextDup;\n    if (prev === null) {\n      this._head = next;\n    } else {\n      prev._nextDup = next;\n    }\n    if (next === null) {\n      this._tail = prev;\n    } else {\n      next._prevDup = prev;\n    }\n    return this._head === null;\n  }\n}\n\nfunction _DuplicateItemRecordList_tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\n_DuplicateItemRecordList.prototype._head;\n/**\n * \\@internal\n * @type {?}\n */\n_DuplicateItemRecordList.prototype._tail;\n}\n\nclass _DuplicateMap<V> {\n  map = new Map<any, _DuplicateItemRecordList<V>>();\n/**\n * @param {?} record\n * @return {?}\n */\nput(record: IterableChangeRecord_<V>) {\n    const /** @type {?} */ key = record.trackById;\n\n    let /** @type {?} */ duplicates = this.map.get(key);\n    if (!duplicates) {\n      duplicates = new _DuplicateItemRecordList<V>();\n      this.map.set(key, duplicates);\n    }\n    duplicates.add(record);\n  }\n/**\n * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we\n * have already iterated over, we use the afterIndex to pretend it is not there.\n * \n * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\n * have any more `a`s needs to return the last `a` not the first or second.\n * @param {?} trackById\n * @param {?=} afterIndex\n * @return {?}\n */\nget(trackById: any, afterIndex: number = null): IterableChangeRecord_<V> {\n    const /** @type {?} */ key = trackById;\n    const /** @type {?} */ recordList = this.map.get(key);\n    return recordList ? recordList.get(trackById, afterIndex) : null;\n  }\n/**\n * Removes a {\\@link IterableChangeRecord_} from the list of duplicates.\n * \n * The list of duplicates also is removed from the map if it gets empty.\n * @param {?} record\n * @return {?}\n */\nremove(record: IterableChangeRecord_<V>): IterableChangeRecord_<V> {\n    const /** @type {?} */ key = record.trackById;\n    const /** @type {?} */ recordList: _DuplicateItemRecordList<V> = this.map.get(key);\n    // Remove the list of duplicates when it gets empty\n    if (recordList.remove(record)) {\n      this.map.delete(key);\n    }\n    return record;\n  }\n/**\n * @return {?}\n */\nget isEmpty(): boolean { return this.map.size === 0; }\n/**\n * @return {?}\n */\nclear() { this.map.clear(); }\n/**\n * @return {?}\n */\ntoString(): string { return '_DuplicateMap(' + stringify(this.map) + ')'; }\n}\n\nfunction _DuplicateMap_tsickle_Closure_declarations() {\n/** @type {?} */\n_DuplicateMap.prototype.map;\n}\n\n/**\n * @param {?} item\n * @param {?} addRemoveOffset\n * @param {?} moveOffsets\n * @return {?}\n */\nfunction getPreviousIndex(item: any, addRemoveOffset: number, moveOffsets: number[]): number {\n  const /** @type {?} */ previousIndex = item.previousIndex;\n  if (previousIndex === null) return previousIndex;\n  let /** @type {?} */ moveOffset = 0;\n  if (moveOffsets && previousIndex < moveOffsets.length) {\n    moveOffset = moveOffsets[previousIndex];\n  }\n  return previousIndex + addRemoveOffset + moveOffset;\n}\n"]}