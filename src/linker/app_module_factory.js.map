{"version":3,"file":"app_module_factory.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/src/linker/app_module_factory.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;;;;;;AAEH,yBAA2C,gBAAgB,CAAC,CAAA;AAC5D,2BAA4B,sBAAsB,CAAC,CAAA;AAInD,2CAAwE,8BAA8B,CAAC,CAAA;AAGvG;;;;;;GAMG;AACH;IAAA;IAgBA,CAAC;IAZC,sBAAI,kCAAQ;QAHZ;;WAEG;aACH,cAA2B,MAAM,CAAC,0BAAa,EAAE,CAAC,CAAC,CAAC;;;OAAA;IAMpD,sBAAI,kDAAwB;QAJ5B;;;WAGG;aACH,cAA2D,MAAM,CAAC,0BAAa,EAAE,CAAC,CAAC,CAAC;;;OAAA;IAKpF,sBAAI,kCAAQ;QAHZ;;WAEG;aACH,cAAoB,MAAM,CAAC,0BAAa,EAAE,CAAC,CAAC,CAAC;;;OAAA;IAC/C,mBAAC;AAAD,CAAC,AAhBD,IAgBC;AAhBqB,oBAAY,eAgBjC,CAAA;AAED;;GAEG;AACH;IACE,0BACY,cAAsE,EACtE,UAA2B;QAD3B,mBAAc,GAAd,cAAc,CAAwD;QACtE,eAAU,GAAV,UAAU,CAAiB;IAAG,CAAC;IAE3C,sBAAI,wCAAU;aAAd,cAAoC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;;;OAAA;IAE7D,iCAAM,GAAN,UAAO,cAA+B;QAA/B,8BAA+B,GAA/B,qBAA+B;QACpC,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;YACpB,cAAc,GAAG,mBAAQ,CAAC,IAAI,CAAC;QACjC,CAAC;QACD,IAAI,QAAQ,GAAG,IAAI,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;QACvD,QAAQ,CAAC,MAAM,EAAE,CAAC;QAClB,MAAM,CAAC,QAAQ,CAAC;IAClB,CAAC;IACH,uBAAC;AAAD,CAAC,AAfD,IAeC;AAfY,wBAAgB,mBAe5B,CAAA;AAED,IAAM,UAAU,GAAG,IAAI,MAAM,EAAE,CAAC;AAEhC;IAAmD,qCAA+B;IAKhF,2BAAmB,MAAgB,EAAE,SAAkC;QACrE,kBAAM,SAAS,EAAE,MAAM,CAAC,GAAG,CAAC,qDAAwB,EAAE,qDAAwB,CAAC,IAAI,CAAC,CAAC,CAAC;QADrE,WAAM,GAAN,MAAM,CAAU;IAEnC,CAAC;IAED,kCAAM,GAAN,cAAW,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC;IAInD,+BAAG,GAAH,UAAI,KAAU,EAAE,aAAuC;QAAvC,6BAAuC,GAAvC,6CAAuC;QACrD,EAAE,CAAC,CAAC,KAAK,KAAK,mBAAQ,IAAI,KAAK,KAAK,qDAAwB,CAAC,CAAC,CAAC;YAC7D,MAAM,CAAC,IAAI,CAAC;QACd,CAAC;QACD,IAAI,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;QACjD,MAAM,CAAC,MAAM,KAAK,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,EAAE,aAAa,CAAC,GAAG,MAAM,CAAC;IAChF,CAAC;IAID,sBAAI,uCAAQ;aAAZ,cAA2B,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;;;OAAA;IAEzC,sBAAI,uDAAwB;aAA5B,cAA2D,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;;;OAAA;IAC3E,wBAAC;AAAD,CAAC,AA1BD,CAAmD,4DAA+B,GA0BjF;AA1BqB,yBAAiB,oBA0BtC,CAAA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector, THROW_IF_NOT_FOUND} from '../di/injector';\nimport {unimplemented} from '../facade/exceptions';\nimport {ConcreteType} from '../facade/lang';\n\nimport {ComponentFactory} from './component_factory';\nimport {CodegenComponentFactoryResolver, ComponentFactoryResolver} from './component_factory_resolver';\n\n\n/**\n * Represents an instance of an AppModule created via a {@link AppModuleFactory}.\n *\n * `AppModuleRef` provides access to the AppModule Instance as well other objects related to this\n * AppModule Instance.\n * @stable\n */\nexport abstract class AppModuleRef<T> {\n  /**\n   * The injector that contains all of the providers of the AppModule.\n   */\n  get injector(): Injector { return unimplemented(); }\n\n  /**\n   * The ComponentFactoryResolver to get hold of the ComponentFactories\n   * delcared in the `precompile` property of the module.\n   */\n  get componentFactoryResolver(): ComponentFactoryResolver { return unimplemented(); }\n\n  /**\n   * The AppModule instance.\n   */\n  get instance(): T { return unimplemented(); }\n}\n\n/**\n * @stable\n */\nexport class AppModuleFactory<T> {\n  constructor(\n      private _injectorClass: {new (parentInjector: Injector): AppModuleInjector<T>},\n      private _moduleype: ConcreteType<T>) {}\n\n  get moduleType(): ConcreteType<T> { return this._moduleype; }\n\n  create(parentInjector: Injector = null): AppModuleRef<T> {\n    if (!parentInjector) {\n      parentInjector = Injector.NULL;\n    }\n    var instance = new this._injectorClass(parentInjector);\n    instance.create();\n    return instance;\n  }\n}\n\nconst _UNDEFINED = new Object();\n\nexport abstract class AppModuleInjector<T> extends CodegenComponentFactoryResolver implements\n    Injector,\n    AppModuleRef<T> {\n  public instance: T;\n\n  constructor(public parent: Injector, factories: ComponentFactory<any>[]) {\n    super(factories, parent.get(ComponentFactoryResolver, ComponentFactoryResolver.NULL));\n  }\n\n  create() { this.instance = this.createInternal(); }\n\n  abstract createInternal(): T;\n\n  get(token: any, notFoundValue: any = THROW_IF_NOT_FOUND): any {\n    if (token === Injector || token === ComponentFactoryResolver) {\n      return this;\n    }\n    var result = this.getInternal(token, _UNDEFINED);\n    return result === _UNDEFINED ? this.parent.get(token, notFoundValue) : result;\n  }\n\n  abstract getInternal(token: any, notFoundValue: any): any;\n\n  get injector(): Injector { return this; }\n\n  get componentFactoryResolver(): ComponentFactoryResolver { return this; }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}