{"version":3,"file":"compiler.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/src/linker/compiler.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;;;;;;AAEH,mBAAoC,OAAO,CAAC,CAAA;AAC5C,2BAA4B,sBAAsB,CAAC,CAAA;AACnD,qBAA4C,gBAAgB,CAAC,CAAA;AAS7D;;;;GAIG;AACH;IAAgD,8CAAa;IAC3D,oCAAmB,QAAc;QAC/B,kBAAM,oCAAkC,gBAAS,CAAC,QAAQ,CAAC,4BAAyB,CAAC,CAAC;QADrE,aAAQ,GAAR,QAAQ,CAAM;IAEjC,CAAC;IACH,iCAAC;AAAD,CAAC,AAJD,CAAgD,0BAAa,GAI5D;AAJY,kCAA0B,6BAItC,CAAA;AAED;;;;;;;;;GASG;AACH;IAAA;IAkDA,CAAC;IA5CC,sBAAI,8BAAQ;QALZ;;;;WAIG;aACH;YACE,MAAM,IAAI,0BAAa,CAAC,6DAA6D,CAAC,CAAC;QACzF,CAAC;;;OAAA;IAED;;OAEG;IACH,wCAAqB,GAArB,UAAyB,SAA0B,EAAE,QAAqB;QAArB,wBAAqB,GAArB,eAAqB;QAExE,MAAM,IAAI,0BAAa,CACnB,sDAAoD,gBAAS,CAAC,SAAS,CAAG,CAAC,CAAC;IAClF,CAAC;IACD;;;OAGG;IACH,uCAAoB,GAApB,UAAwB,SAA0B,EAAE,QAAqB;QAArB,wBAAqB,GAArB,eAAqB;QACvE,MAAM,IAAI,0BAAa,CACnB,sDAAoD,gBAAS,CAAC,SAAS,CAAG,CAAC,CAAC;IAClF,CAAC;IACD;;;;OAIG;IACH,oCAAiB,GAAjB,UAAqB,UAA2B;QAC9C,MAAM,IAAI,0BAAa,CACnB,sDAAoD,gBAAS,CAAC,UAAU,CAAG,CAAC,CAAC;IACnF,CAAC;IAED,qCAAkB,GAAlB,UAAsB,UAA2B;QAC/C,MAAM,IAAI,0BAAa,CACnB,sDAAoD,gBAAS,CAAC,UAAU,CAAG,CAAC,CAAC;IACnF,CAAC;IAED;;OAEG;IACH,6BAAU,GAAV,cAAoB,CAAC;IAErB;;OAEG;IACH,gCAAa,GAAb,UAAc,IAAU,IAAG,CAAC;IAC9B,eAAC;AAAD,CAAC,AAlDD,IAkDC;AAlDY,gBAAQ,WAkDpB,CAAA;AAcD;;;;GAIG;AACU,uBAAe,GAAG,IAAI,gBAAW,CAAC,iBAAiB,CAAC,CAAC;AAElE;;;;GAIG;AACH;IAAA;IAEA,CAAC;IAAD,sBAAC;AAAD,CAAC,AAFD,IAEC;AAFqB,uBAAe,kBAEpC,CAAA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector, OpaqueToken} from '../di';\nimport {BaseException} from '../facade/exceptions';\nimport {ConcreteType, Type, stringify} from '../facade/lang';\nimport {ViewEncapsulation} from '../metadata';\nimport {NgModuleMetadata} from '../metadata/ng_module';\n\nimport {ComponentFactory} from './component_factory';\nimport {ComponentResolver} from './component_resolver';\nimport {NgModuleFactory} from './ng_module_factory';\n\n\n/**\n * Indicates that a component is still being loaded in a synchronous compile.\n *\n * @stable\n */\nexport class ComponentStillLoadingError extends BaseException {\n  constructor(public compType: Type) {\n    super(`Can't compile synchronously as ${stringify(compType)} is still being loaded!`);\n  }\n}\n\n/**\n * Low-level service for running the angular compiler duirng runtime\n * to create {@link ComponentFactory}s, which\n * can later be used to create and render a Component instance.\n *\n * Each `@NgModule` provides an own `Compiler` to its injector,\n * that will use the directives/pipes of the ng module for compilation\n * of components.\n * @stable\n */\nexport class Compiler {\n  /**\n   * Returns the injector with which the compiler has been created.\n   *\n   * @internal\n   */\n  get injector(): Injector {\n    throw new BaseException(`Runtime compiler is not loaded. Tried to read the injector.`);\n  }\n\n  /**\n   * Loads the template and styles of a component and returns the associated `ComponentFactory`.\n   */\n  compileComponentAsync<T>(component: ConcreteType<T>, ngModule: Type = null):\n      Promise<ComponentFactory<T>> {\n    throw new BaseException(\n        `Runtime compiler is not loaded. Tried to compile ${stringify(component)}`);\n  }\n  /**\n   * Compiles the given component. All templates have to be either inline or compiled via\n   * `compileComponentAsync` before. Otherwise throws a {@link ComponentStillLoadingError}.\n   */\n  compileComponentSync<T>(component: ConcreteType<T>, ngModule: Type = null): ComponentFactory<T> {\n    throw new BaseException(\n        `Runtime compiler is not loaded. Tried to compile ${stringify(component)}`);\n  }\n  /**\n   * Compiles the given NgModule. All templates of the components listed in `entryComponents`\n   * have to be either inline or compiled before via `compileComponentAsync` /\n   * `compileModuleAsync`. Otherwise throws a {@link ComponentStillLoadingError}.\n   */\n  compileModuleSync<T>(moduleType: ConcreteType<T>): NgModuleFactory<T> {\n    throw new BaseException(\n        `Runtime compiler is not loaded. Tried to compile ${stringify(moduleType)}`);\n  }\n\n  compileModuleAsync<T>(moduleType: ConcreteType<T>): Promise<NgModuleFactory<T>> {\n    throw new BaseException(\n        `Runtime compiler is not loaded. Tried to compile ${stringify(moduleType)}`);\n  }\n\n  /**\n   * Clears all caches\n   */\n  clearCache(): void {}\n\n  /**\n   * Clears the cache for the given component/ngModule.\n   */\n  clearCacheFor(type: Type) {}\n}\n\n/**\n * Options for creating a compiler\n *\n * @experimental\n */\nexport type CompilerOptions = {\n  useDebug?: boolean,\n  useJit?: boolean,\n  defaultEncapsulation?: ViewEncapsulation,\n  providers?: any[],\n};\n\n/**\n * Token to provide CompilerOptions in the platform injector.\n *\n * @experimental\n */\nexport const CompilerOptions = new OpaqueToken('compilerOptions');\n\n/**\n * A factory for creating a Compiler\n *\n * @experimental\n */\nexport abstract class CompilerFactory {\n  abstract createCompiler(options?: CompilerOptions[]): Compiler;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}