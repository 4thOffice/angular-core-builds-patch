{"version":3,"sources":["../../../../../modules/@angular/core/src/linker/view_ref.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAGI,EAAA,iBAAE,EAAiB,MAAA,yCAAA;OACnB,EAAA,oBAAE,EAAoB,MAAA,+BAAA;AAE7B;;;GAGG;AACH,6BAAC,iBAAA;IACD;;;;OAIG;IACH,OAFY,KAAA,CAAA;IAGZ;;;OAGG;IACH,SALgB,KAAA,CAAA;IAMhB;;;;OAIG;IACH,SATY,CAAA,QAAA,IAAA,CAAA;AAUZ,CAAC;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAsDG;AACH,qCATC,OAAA;IAUD;;;OAGG;IACH,OAbgB,KAAA,CAAA;IAchB;;;OAGG;IACH,SAhBgB,KAAA,CAAA;AAiBhB,CAAC;AACD;IAGA;;;OAGG;IACH,YAlBsB,KAAiB,EAAS,cAAgB;QAA1C,UAAA,GAAA,KAAA,CAAiB;QAAS,mBAAA,GAAA,cAAA,CAAgB;QAoB5D,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;IACzC,CAAC;IACH;;OAEG;IACH,IArBG,YAAA,KAAgC,MAAA,CAAO,IAAA,CAAK,KAAC,CAAK,CAAC,CAAA;IAsBtD;;OAEG;IACH,IAvBG,SAAA,KAAwB,MAAA,CAAO,IAAA,CAAK,KAAC,CAAK,aAAC,CAAa,CAAC,CAAA;IAwB5D;;OAEG;IACH,IAzBG,OAAA,KAAe,MAAA,CAAO,IAAA,CAAK,KAAC,CAAK,OAAC,CAAO,CAAC,CAAA;IA0B7C;;OAEG;IACH,IA3BG,SAAA,KAA0B,MAAA,CAAO,IAAA,CAAK,KAAC,CAAK,SAAC,CAAS,CAAC,CAAA;IA4B1D;;OAEG;IACH,YA7BG,KAAsB,IAAA,CAAK,KAAC,CAAK,yBAAC,EAAyB,CAAE,CAAC,CAAA;IA8BjE;;OAEG;IACH,MAhCG,KAAgB,IAAA,CAAK,KAAC,CAAK,MAAC,GAAQ,oBAAA,CAAqB,QAAC,CAAQ,CAAC,CAAA;IAiCtE;;OAEG;IACH,aAnCG;QAoCC,IAAI,CAnCC,KAAC,CAAK,aAAC,CAAa,KAAC,CAAK,CAAC;QAoChC,IAAI,CAnCC,cAAC,CAAc,KAAC,EAAK,CAAE;IAoC9B,CAAC;IACH;;OAEG;IACH,cAtCG,KAAwB,IAAA,CAAK,KAAC,CAAK,aAAC,CAAa,IAAC,CAAI,CAAC,CAAC,CAAA;IAuC3D;;OAEG;IACH,QAzCG;QA0CC,IAAI,CAzCC,KAAC,CAAK,MAAC,GAAQ,IAAA,CAAK,aAAC,CAAa;QA0CvC,IAAI,CAzCC,YAAC,EAAY,CAAE;IA0CtB,CAAC;IACH;;;OAGG;IACH,SA5CG,CAAA,QAAA;QA6CC,EAAE,CAAC,CAAC,CA5CC,IAAC,CAAI,KAAC,CAAK,WAAC,CAAW,CAAC,CAAA;YA6C3B,IAAI,CA5CC,KAAC,CAAK,WAAC,GAAa,EAAA,CAAG;QA6C9B,CAAC;QACD,IAAI,CA5CC,KAAC,CAAK,WAAC,CAAW,IAAC,CAAI,QAAC,CAAQ,CAAC;IA6CxC,CAAC;IACH;;OAEG;IACH,OA9CG,KAAW,IAAA,CAAK,KAAC,CAAK,gBAAC,EAAgB,CAAE,CAAC,CAAA;AA+C7C,CAAC;AAED;IACA;;;OAGG;IACH,QAAQ,CAAC,SAAS,CAAC,aAAa,CAAC;IACjC,gBAAgB;IAChB,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC;IACzB,gBAAgB;IAChB,QAAQ,CAAC,SAAS,CAAC,cAAc,CAAC;AAClC,CAAC","file":"view_ref.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationQueue} from '../animation/animation_queue';\nimport {ChangeDetectorRef} from '../change_detection/change_detector_ref';\nimport {ChangeDetectorStatus} from '../change_detection/constants';\nimport {AppView} from './view';\n/**\n * \\@stable\n * @abstract\n */\nexport abstract class ViewRef extends ChangeDetectorRef {\n/**\n * Destroys the view and all of the data structures associated with it.\n * @abstract\n * @return {?}\n */\ndestroy() {}\n/**\n * @abstract\n * @return {?}\n */\ndestroyed() {}\n/**\n * @abstract\n * @param {?} callback\n * @return {?}\n */\nonDestroy(callback: Function) {}\n}\n/**\n * Represents an Angular View.\n * \n * <!-- TODO: move the next two paragraphs to the dev guide -->\n * A View is a fundamental building block of the application UI. It is the smallest grouping of\n * Elements which are created and destroyed together.\n * \n * Properties of elements in a View can change, but the structure (number and order) of elements in\n * a View cannot. Changing the structure of Elements can only be done by inserting, moving or\n * removing nested Views via a {\\@link ViewContainerRef}. Each View can contain many View Containers.\n * <!-- /TODO -->\n * \n * ### Example\n * \n * Given this template...\n * \n * ```\n * Count: {{items.length}}\n * <ul>\n *   <li *ngFor=\"let  item of items\">{{item}}</li>\n * </ul>\n * ```\n * \n * We have two {\\@link TemplateRef}s:\n * \n * Outer {\\@link TemplateRef}:\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <template ngFor let-item [ngForOf]=\"items\"></template>\n * </ul>\n * ```\n * \n * Inner {\\@link TemplateRef}:\n * ```\n *   <li>{{item}}</li>\n * ```\n * \n * Notice that the original template is broken down into two separate {\\@link TemplateRef}s.\n * \n * The outer/inner {\\@link TemplateRef}s are then assembled into views like so:\n * \n * ```\n * <!-- ViewRef: outer-0 -->\n * Count: 2\n * <ul>\n *   <template view-container-ref></template>\n *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->\n *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->\n * </ul>\n * <!-- /ViewRef: outer-0 -->\n * ```\n * \\@experimental\n * @abstract\n */\nexport abstract class EmbeddedViewRef<C> extends ViewRef {\n/**\n * @abstract\n * @return {?}\n */\ncontext() {}\n/**\n * @abstract\n * @return {?}\n */\nrootNodes() {}\n}\nexport class ViewRef_<C> implements EmbeddedViewRef<C>, ChangeDetectorRef {\n  /** @internal */\n  _originalMode: ChangeDetectorStatus;\n/**\n * @param {?} _view\n * @param {?} animationQueue\n */\nconstructor(private _view: AppView<C>,\npublic animationQueue: AnimationQueue) {\n    this._view = _view;\n    this._originalMode = this._view.cdMode;\n  }\n/**\n * @return {?}\n */\nget internalView(): AppView<C> { return this._view; }\n/**\n * @return {?}\n */\nget rootNodes(): any[] { return this._view.flatRootNodes; }\n/**\n * @return {?}\n */\nget context() { return this._view.context; }\n/**\n * @return {?}\n */\nget destroyed(): boolean { return this._view.destroyed; }\n/**\n * @return {?}\n */\nmarkForCheck(): void { this._view.markPathToRootAsCheckOnce(); }\n/**\n * @return {?}\n */\ndetach(): void { this._view.cdMode = ChangeDetectorStatus.Detached; }\n/**\n * @return {?}\n */\ndetectChanges(): void {\n    this._view.detectChanges(false);\n    this.animationQueue.flush();\n  }\n/**\n * @return {?}\n */\ncheckNoChanges(): void { this._view.detectChanges(true); }\n/**\n * @return {?}\n */\nreattach(): void {\n    this._view.cdMode = this._originalMode;\n    this.markForCheck();\n  }\n/**\n * @param {?} callback\n * @return {?}\n */\nonDestroy(callback: Function) {\n    if (!this._view.disposables) {\n      this._view.disposables = [];\n    }\n    this._view.disposables.push(callback);\n  }\n/**\n * @return {?}\n */\ndestroy() { this._view.detachAndDestroy(); }\n}\n\nfunction ViewRef__tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nViewRef_.prototype._originalMode;\n/** @type {?} */\nViewRef_.prototype._view;\n/** @type {?} */\nViewRef_.prototype.animationQueue;\n}\n\n"]}