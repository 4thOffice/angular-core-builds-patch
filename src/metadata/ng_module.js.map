{"version":3,"file":"ng_module.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/src/metadata/ng_module.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;;;;;;AAEH,yBAAiC,gBAAgB,CAAC,CAAA;AAoBlD;;;;;GAKG;AACU,8BAAsB,GAAmB;IACpD,IAAI,EAAE,iBAAiB;CACxB,CAAC;AAEF;;;GAGG;AACH;IAAsC,oCAAkB;IA6FtD,0BAAY,EAON;YAPM,4BAON,EAPO,wBAAS,EAAE,8BAAY,EAAE,oBAAO,EAAE,oBAAO,EAAE,oCAAe,EAAE,oBAAO;QAQ9E,iBAAO,CAAC;QACR,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IA9ED,sBAAI,uCAAS;QA7Bb;;;;;;;;;;;;;;;;;;;;;;;;;;;;WA4BG;aACH,cAAyB,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;;;OAAA;IA+EpD,uBAAC;AAAD,CAAC,AA7GD,CAAsC,6BAAkB,GA6GvD;AA7GY,wBAAgB,mBA6G5B,CAAA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectableMetadata} from '../di/metadata';\nimport {Type} from '../facade/lang';\n\n/**\n * A wrapper around a module that also includes the providers.\n *\n * @experimental\n */\nexport interface ModuleWithProviders {\n  ngModule: Type;\n  providers?: any[];\n}\n\n/**\n * Interface for schema definitions in @NgModules.\n *\n * @experimental\n */\nexport interface SchemaMetadata { name: string; }\n\n/**\n * Defines a schema that will allow any property on elements with a `-` in their name,\n * which is the common rule for custom elements.\n *\n * @experimental\n */\nexport const CUSTOM_ELEMENTS_SCHEMA: SchemaMetadata = {\n  name: 'custom-elements'\n};\n\n/**\n * Declares an Angular Module.\n * @experimental\n */\nexport class NgModuleMetadata extends InjectableMetadata {\n  /**\n   * Defines the set of injectable objects that are available in the injector\n   * of this module.\n   *\n   * ## Simple Example\n   *\n   * Here is an example of a class that can be injected:\n   *\n   * ```\n   * class Greeter {\n   *    greet(name:string) {\n   *      return 'Hello ' + name + '!';\n   *    }\n   * }\n   *\n   * @NgModule({\n   *   providers: [\n   *     Greeter\n   *   ]\n   * })\n   * class HelloWorld {\n   *   greeter:Greeter;\n   *\n   *   constructor(greeter:Greeter) {\n   *     this.greeter = greeter;\n   *   }\n   * }\n   * ```\n   */\n  get providers(): any[] { return this._providers; }\n  private _providers: any[];\n\n\n  /**\n   * Specifies a list of directives/pipes that belong to this module.\n   *\n   * ### Example\n   *\n   * ```javascript\n   * @NgModule({\n   *   declarations: [NgFor]\n   * })\n   * class CommonModule {\n   * }\n   * ```\n   */\n  declarations: Array<Type|any[]>;\n\n  /**\n   * Specifies a list of modules whose exported directives/pipes\n   * should be available to templates in this module.\n   * This can also contain {@link ModuleWithProviders}.\n   *\n   * ### Example\n   *\n   * ```javascript\n   * @NgModule({\n   *   imports: [CommonModule]\n   * })\n   * class MainModule {\n   * }\n   * ```\n   */\n  imports: Array<Type|ModuleWithProviders|any[]>;\n\n  /**\n   * Specifies a list of directives/pipes/module that can be used within the template\n   * of any component that is part of an angular module\n   * that imports this angular module.\n   *\n   * ### Example\n   *\n   * ```javascript\n   * @NgModule({\n   *   exports: [NgFor]\n   * })\n   * class CommonModule {\n   * }\n   * ```\n   */\n  exports: Array<Type|any[]>;\n\n  /**\n   * Defines the components that should be compiled as well when\n   * this component is defined. For each components listed here,\n   * Angular will create a {@link ComponentFactory ComponentFactory} and store it in the\n   * {@link ComponentFactoryResolver ComponentFactoryResolver}.\n   */\n  entryComponents: Array<Type|any[]>;\n\n  schemas: Array<SchemaMetadata|any[]>;\n\n  constructor({providers, declarations, imports, exports, entryComponents, schemas}: {\n    providers?: any[],\n    declarations?: Array<Type|any[]>,\n    imports?: Array<Type|any[]>,\n    exports?: Array<Type|any[]>,\n    entryComponents?: Array<Type|any[]>,\n    schemas?: Array<SchemaMetadata|any[]>\n  } = {}) {\n    super();\n    this._providers = providers;\n    this.declarations = declarations;\n    this.imports = imports;\n    this.exports = exports;\n    this.entryComponents = entryComponents;\n    this.schemas = schemas;\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}