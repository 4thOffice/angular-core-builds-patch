{"version":3,"sources":["../../../../../modules/@angular/core/src/view/errors.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAEI,EAAA,mBAAE,EAAoB,oBAAA,EAAsB,eAAA,EAAgB,MAAA,WAAA;OAC5D,EAAe,WAAA,EAAa,SAAA,EAAU,MAAA,SAAA;AAC7C;;;;;;GAMG;AACH,4DACI,OAAqB,EAAE,QAAa,EAAE,SAAc,EAAE,YAAqB;IAC7E,IAAI,gBAAgB,CANhB,GAAA,GAOA,mEAAiE,QANC,2BAAQ,SAAsB,OAAS,CAAI;IAOjH,EAAE,CAAC,CAAC,YANC,CAAY,CAAC,CAAA;QAOhB,GAAG;YACC,qGAAqG;gBACrG,mDAAmD,CANC;IAO1D,CAAC;IACD,MAAM,CANC,cAAA,CAAe,GAAC,EAAI,OAAA,CAAQ,CAAC;AAOtC,CAAC;AACD;;;;GAIG;AACH,sCAVC,aAAA,EAAA,OAAA;IAWC,IAAM,gBAAgB,CAVhB,GAAA,GAAM,cAAA,CAAe,aAAC,CAAa,OAAC,EAAQ,OAAA,CAAQ,CAAC;IAW3D,CAAkB,CAAE,GAVZ,CAAA,CAAI,CAAC,oBAAC,CAAoB,GAAG,aAAA,CAAc;IAWnD,MAAM,CAVC,GAAA,CAAI;AAWb,CAAC;AACD;;;;GAIG;AACH,+BAdC,GAAA,EAAA,OAAA;IAeC,IAAM,gBAAgB,CAdhB,GAAA,GAAM,IAAI,KAAA,CAAM,GAAC,CAAG,CAAC;IAe3B,CAAkB,CAAE,GAdZ,CAAA,CAAI,CAAC,mBAAC,CAAmB,GAAG,OAAA,CAAQ;IAe5C,GAAG,CAdC,KAAC,GAAO,OAAA,CAAQ,MAAC,CAAM;IAe3B,OAAO,CAdC,IAAC,CAAI,KAAC,IAAQ,SAAA,CAAU,OAAC,CAAO;IAexC,MAAM,CAdC,GAAA,CAAI;AAeb,CAAC;AACD;;;GAGG;AACH,iCAjBC,GAAA;IAkBC,MAAM,CAjBC,CAAA,CAAE,eAAC,CAAe,GAAC,CAAG,CAAC;AAkBhC,CAAC;AACD;;;GAGG;AACH,mCApBC,MAAA;IAqBC,MAAM,CApBC,IAAI,KAAA,CAAM,0CAAC,WAAwC,CAAW,MAAC,CAAO,CAAE,CAAC;AAqBlF,CAAC","file":"errors.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ERROR_DEBUG_CONTEXT, ERROR_ORIGINAL_ERROR, getDebugContext} from '../errors';\nimport {DebugContext, EntryAction, ViewState} from './types';\n/**\n * @param {?} context\n * @param {?} oldValue\n * @param {?} currValue\n * @param {?} isFirstCheck\n * @return {?}\n */\nexport function expressionChangedAfterItHasBeenCheckedError(\n    context: DebugContext, oldValue: any, currValue: any, isFirstCheck: boolean): Error {\n  let /** @type {?} */ msg =\n      `Expression has changed after it was checked. Previous value: '${oldValue}'. Current value: '${currValue}'.`;\n  if (isFirstCheck) {\n    msg +=\n        ` It seems like the view has been created after its parent and its children have been dirty checked.` +\n        ` Has it been created in a change detection hook ?`;\n  }\n  return viewDebugError(msg, context);\n}\n/**\n * @param {?} originalError\n * @param {?} context\n * @return {?}\n */\nexport function viewWrappedDebugError(originalError: any, context: DebugContext): Error {\n  const /** @type {?} */ err = viewDebugError(originalError.message, context);\n  ( /** @type {?} */((err as any)))[ERROR_ORIGINAL_ERROR] = originalError;\n  return err;\n}\n/**\n * @param {?} msg\n * @param {?} context\n * @return {?}\n */\nexport function viewDebugError(msg: string, context: DebugContext): Error {\n  const /** @type {?} */ err = new Error(msg);\n  ( /** @type {?} */((err as any)))[ERROR_DEBUG_CONTEXT] = context;\n  err.stack = context.source;\n  context.view.state |= ViewState.Errored;\n  return err;\n}\n/**\n * @param {?} err\n * @return {?}\n */\nexport function isViewDebugError(err: Error): boolean {\n  return !!getDebugContext(err);\n}\n/**\n * @param {?} action\n * @return {?}\n */\nexport function viewDestroyedError(action: EntryAction): Error {\n  return new Error(`View has been used after destroy for ${EntryAction[action]}`);\n}\n"]}