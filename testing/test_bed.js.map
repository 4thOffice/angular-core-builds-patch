{"version":3,"file":"test_bed.js","sourceRoot":"","sources":["../../../../modules/@angular/core/testing/test_bed.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AppModule, AppModuleFactory, AppModuleMetadata, AppModuleRef, Compiler, CompilerFactory, ComponentStillLoadingError, Injector, PlatformRef, Provider, ReflectiveInjector, Type, assertPlatform, createPlatform, getPlatform} from '../index';\nimport {ListWrapper} from '../src/facade/collection';\nimport {BaseException} from '../src/facade/exceptions';\nimport {FunctionWrapper, isPresent, stringify} from '../src/facade/lang';\n\nimport {AsyncTestCompleter} from './async_test_completer';\n\nconst UNDEFINED = new Object();\n\n/**\n * @experimental\n */\nexport class TestBed implements Injector {\n  private _instantiated: boolean = false;\n\n  private _compiler: Compiler = null;\n  private _moduleRef: AppModuleRef<any> = null;\n  private _appModuleFactory: AppModuleFactory<any> = null;\n\n  private _compilerProviders: Array<Type|Provider|any[]|any> = [];\n  private _compilerUseJit: boolean = true;\n\n  private _providers: Array<Type|Provider|any[]|any> = [];\n  private _directives: Array<Type|any[]|any> = [];\n  private _pipes: Array<Type|any[]|any> = [];\n  private _modules: Array<Type|any[]|any> = [];\n  private _precompile: Array<Type|any[]|any> = [];\n\n  reset() {\n    this._compiler = null;\n    this._moduleRef = null;\n    this._appModuleFactory = null;\n    this._compilerProviders = [];\n    this._compilerUseJit = true;\n    this._providers = [];\n    this._directives = [];\n    this._pipes = [];\n    this._modules = [];\n    this._precompile = [];\n    this._instantiated = false;\n  }\n\n  platform: PlatformRef = null;\n\n  appModule: Type = null;\n\n  configureCompiler(config: {providers?: any[], useJit?: boolean}) {\n    if (this._instantiated) {\n      throw new BaseException('Cannot add configuration after test injector is instantiated');\n    }\n    if (config.providers) {\n      this._compilerProviders = ListWrapper.concat(this._compilerProviders, config.providers);\n    }\n    if (config.useJit !== undefined) {\n      this._compilerUseJit = config.useJit;\n    }\n  }\n\n  configureModule(moduleDef: {\n    providers?: any[],\n    directives?: any[],\n    pipes?: any[],\n    precompile?: any[],\n    modules?: any[]\n  }) {\n    if (this._instantiated) {\n      throw new BaseException('Cannot add configuration after test injector is instantiated');\n    }\n    if (moduleDef.providers) {\n      this._providers = ListWrapper.concat(this._providers, moduleDef.providers);\n    }\n    if (moduleDef.directives) {\n      this._directives = ListWrapper.concat(this._directives, moduleDef.directives);\n    }\n    if (moduleDef.pipes) {\n      this._pipes = ListWrapper.concat(this._pipes, moduleDef.pipes);\n    }\n    if (moduleDef.precompile) {\n      this._precompile = ListWrapper.concat(this._precompile, moduleDef.precompile);\n    }\n    if (moduleDef.modules) {\n      this._modules = ListWrapper.concat(this._modules, moduleDef.modules);\n    }\n  }\n\n  createAppModuleFactory(): Promise<AppModuleFactory<any>> {\n    if (this._instantiated) {\n      throw new BaseException(\n          'Cannot run precompilation when the test AppModule has already been instantiated. ' +\n          'Make sure you are not using `inject` before `doAsyncPrecompilation`.');\n    }\n\n    if (this._appModuleFactory) {\n      return Promise.resolve(this._appModuleFactory);\n    }\n\n    let moduleMeta = this._createCompilerAndModuleMeta();\n\n    return this._compiler.compileAppModuleAsync(_NoopModule, moduleMeta)\n        .then((appModuleFactory) => {\n          this._appModuleFactory = appModuleFactory;\n          return appModuleFactory;\n        });\n  }\n\n  initTestAppModule() {\n    if (this._instantiated) {\n      return;\n    }\n\n    if (this._appModuleFactory) {\n      this._createFromModuleFactory(this._appModuleFactory);\n    } else {\n      let moduleMeta = this._createCompilerAndModuleMeta();\n      this._createFromModuleFactory(this._compiler.compileAppModuleSync(_NoopModule, moduleMeta));\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _createInjectorAsync(): Promise<Injector> {\n    if (this._instantiated) {\n      return Promise.resolve(this);\n    }\n    let moduleMeta = this._createCompilerAndModuleMeta();\n    return this._compiler.compileAppModuleAsync(_NoopModule, moduleMeta)\n        .then((appModuleFactory) => this._createFromModuleFactory(appModuleFactory));\n  }\n\n  private _createCompilerAndModuleMeta(): AppModuleMetadata {\n    const compilerFactory: CompilerFactory = this.platform.injector.get(CompilerFactory);\n    this._compiler = compilerFactory.createCompiler({\n      providers: this._compilerProviders,\n      useJit: this._compilerUseJit,\n      deprecatedAppProviders: this._providers\n    });\n    const moduleMeta = new AppModuleMetadata({\n      providers: this._providers.concat([{provide: TestBed, useValue: this}]),\n      modules: this._modules.concat([this.appModule]),\n      directives: this._directives,\n      pipes: this._pipes,\n      precompile: this._precompile\n    });\n\n    return moduleMeta;\n  }\n\n  private _createFromModuleFactory(appModuleFactory: AppModuleFactory<any>): Injector {\n    this._moduleRef = appModuleFactory.create(this.platform.injector);\n    this._instantiated = true;\n    return this;\n  }\n\n  get(token: any, notFoundValue: any = Injector.THROW_IF_NOT_FOUND) {\n    if (!this._instantiated) {\n      throw new BaseException(\n          'Illegal state: The test bed\\'s injector has not yet been created. Call initTestAppModule first!');\n    }\n    if (token === TestBed) {\n      return this;\n    }\n    // Tests can inject things from the app module and from the compiler,\n    // but the app module can't inject things from the compiler and vice versa.\n    let result = this._moduleRef.injector.get(token, UNDEFINED);\n    return result === UNDEFINED ? this._compiler.injector.get(token, notFoundValue) : result;\n  }\n\n  execute(tokens: any[], fn: Function): any {\n    if (!this._instantiated) {\n      throw new BaseException(\n          'Illegal state: The test bed\\'s injector has not yet been created. Call initTestAppModule first!');\n    }\n    var params = tokens.map(t => this.get(t));\n    return FunctionWrapper.apply(fn, params);\n  }\n}\n\nvar _testBed: TestBed = null;\n\n/**\n * @experimental\n */\nexport function getTestBed() {\n  if (_testBed == null) {\n    _testBed = new TestBed();\n  }\n  return _testBed;\n}\n\n/**\n * @deprecated use getTestBed instead.\n */\nexport function getTestInjector() {\n  return getTestBed();\n}\n\n/**\n * Set the providers that the test injector should use. These should be providers\n * common to every test in the suite.\n *\n * This may only be called once, to set up the common providers for the current test\n * suite on the current platform. If you absolutely need to change the providers,\n * first use `resetBaseTestProviders`.\n *\n * Test modules and platforms for individual platforms are available from\n * 'angular2/platform/testing/<platform_name>'.\n *\n * @deprecated Use initTestEnvironment instead\n */\nexport function setBaseTestProviders(\n    platformProviders: Array<Type|Provider|any[]>,\n    applicationProviders: Array<Type|Provider|any[]>) {\n  // Create a platform based on the Platform Providers.\n  var platformRef = createPlatform(ReflectiveInjector.resolveAndCreate(platformProviders));\n  class TestAppModule {\n  /** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: AppModule, args: [{providers: applicationProviders}, ] },\n];\n}\n\n  initTestEnvironment(TestAppModule, platformRef);\n}\n\n/**\n * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n * application module. These are common to every test in the suite.\n *\n * This may only be called once, to set up the common providers for the current test\n * suite on the current platform. If you absolutely need to change the providers,\n * first use `resetTestEnvironment`.\n *\n * Test modules and platforms for individual platforms are available from\n * 'angular2/platform/testing/<platform_name>'.\n *\n * @experimental\n */\nexport function initTestEnvironment(appModule: Type, platform: PlatformRef) {\n  var testBed = getTestBed();\n  if (testBed.platform || testBed.appModule) {\n    throw new BaseException('Cannot set base providers because it has already been called');\n  }\n  testBed.platform = platform;\n  testBed.appModule = appModule;\n}\n\n/**\n * Reset the providers for the test injector.\n *\n * @deprecated Use resetTestEnvironment instead.\n */\nexport function resetBaseTestProviders() {\n  resetTestEnvironment();\n}\n\n/**\n * Reset the providers for the test injector.\n *\n * @experimental\n */\nexport function resetTestEnvironment() {\n  var testBed = getTestBed();\n  testBed.platform = null;\n  testBed.appModule = null;\n  testBed.reset();\n}\n\n/**\n * Run asynchronous precompilation for the test's AppModule. It is necessary to call this function\n * if your test is using an AppModule which has precompiled components that require an asynchronous\n * call, such as an XHR. Should be called once before the test case.\n *\n * @experimental\n */\nexport function doAsyncPrecompilation(): Promise<any> {\n  let testBed = getTestBed();\n  return testBed.createAppModuleFactory();\n}\n\n/**\n * Allows injecting dependencies in `beforeEach()` and `it()`.\n *\n * Example:\n *\n * ```\n * beforeEach(inject([Dependency, AClass], (dep, object) => {\n *   // some code that uses `dep` and `object`\n *   // ...\n * }));\n *\n * it('...', inject([AClass], (object) => {\n *   object.doSomething();\n *   expect(...);\n * })\n * ```\n *\n * Notes:\n * - inject is currently a function because of some Traceur limitation the syntax should\n * eventually\n *   becomes `it('...', @Inject (object: AClass, async: AsyncTestCompleter) => { ... });`\n *\n * @stable\n */\nexport function inject(tokens: any[], fn: Function): () => any {\n  let testBed = getTestBed();\n  if (tokens.indexOf(AsyncTestCompleter) >= 0) {\n    return () => {\n      // Return an async test method that returns a Promise if AsyncTestCompleter is one of the\n      // injected tokens.\n      return testBed._createInjectorAsync().then(() => {\n        let completer: AsyncTestCompleter = testBed.get(AsyncTestCompleter);\n        testBed.execute(tokens, fn);\n        return completer.promise;\n      });\n    };\n  } else {\n    return () => {\n      try {\n        testBed.initTestAppModule();\n      } catch (e) {\n        if (e instanceof ComponentStillLoadingError) {\n          throw new Error(\n              `This test module precompiles the component ${stringify(e.compType)} which is using a \"templateUrl\", but precompilation was never done. ` +\n              `Please call \"doAsyncPrecompilation\" before \"inject\".`);\n        } else {\n          throw e;\n        }\n      }\n      return testBed.execute(tokens, fn);\n    };\n  }\n}\n\n/**\n * @experimental\n */\nexport class InjectSetupWrapper {\n  constructor(private _moduleDef: () => {\n    providers?: any[],\n    directives?: any[],\n    pipes?: any[],\n    precompile?: any[],\n    modules?: any[]\n  }) {}\n\n  private _addModule() {\n    var moduleDef = this._moduleDef();\n    if (moduleDef) {\n      getTestBed().configureModule(moduleDef);\n    }\n  }\n\n  inject(tokens: any[], fn: Function): () => any {\n    return () => {\n      this._addModule();\n      return inject(tokens, fn)();\n    };\n  }\n}\n\n/**\n * @experimental\n */\nexport function withProviders(providers: () => any) {\n  return new InjectSetupWrapper(() => {{return {providers: providers()};}});\n}\n\n/**\n * @experimental\n */\nexport function withModule(moduleDef: () => {\n  providers?: any[],\n  directives?: any[],\n  pipes?: any[],\n  precompile?: any[],\n  modules?: any[]\n}) {\n  return new InjectSetupWrapper(moduleDef);\n}\n\nclass _NoopModule {}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}