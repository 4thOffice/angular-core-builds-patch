{"version":3,"file":"test_compiler.js","sourceRoot":"","sources":["../../../../modules/@angular/core/testing/test_compiler.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;;;;;;AAEH,sBAAwI,UAAU,CAAC,CAAA;AACnJ,2BAA4B,0BAA0B,CAAC,CAAA;AAIvD;;;;GAIG;AACH;IAAqC,mCAAQ;IAA7C;QAAqC,8BAAQ;IAgB7C,CAAC;IAfC,sBAAI,qCAAQ;aAAZ,cAA2B,MAAM,0BAAa,EAAE,CAAC,CAAC,CAAC;;;OAAA;IACnD,wCAAc,GAAd,UAAe,MAAiB,EAAE,SAAiD;QACjF,MAAM,0BAAa,EAAE,CAAC;IACxB,CAAC;IACD,2CAAiB,GAAjB,UAAkB,SAAoB,EAAE,SAAkD;QAExF,MAAM,0BAAa,EAAE,CAAC;IACxB,CAAC;IACD,2CAAiB,GAAjB,UAAkB,SAAoB,EAAE,SAAkD;QAExF,MAAM,0BAAa,EAAE,CAAC;IACxB,CAAC;IACD,sCAAY,GAAZ,UAAa,SAAoB,EAAE,SAA6C;QAC9E,MAAM,0BAAa,EAAE,CAAC;IACxB,CAAC;IACH,sBAAC;AAAD,CAAC,AAhBD,CAAqC,gBAAQ,GAgB5C;AAhBY,uBAAe,kBAgB3B,CAAA;AAED;;;;GAIG;AACH;IAAA;IAEA,CAAC;IAAD,6BAAC;AAAD,CAAC,AAFD,IAEC;AAFqB,8BAAsB,yBAE3C,CAAA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Compiler, CompilerOptions, ComponentMetadataType, DirectiveMetadataType, Injector, NgModuleMetadataType, PipeMetadataType} from '../index';\nimport {unimplemented} from '../src/facade/exceptions';\nimport {Type} from '../src/type';\nimport {MetadataOverride} from './metadata_override';\n\n/**\n * Special interface to the compiler only used by testing\n *\n * @experimental\n */\nexport class TestingCompiler extends Compiler {\n  get injector(): Injector { throw unimplemented(); }\n  overrideModule(module: Type<any>, overrides: MetadataOverride<NgModuleMetadataType>): void {\n    throw unimplemented();\n  }\n  overrideDirective(directive: Type<any>, overrides: MetadataOverride<DirectiveMetadataType>):\n      void {\n    throw unimplemented();\n  }\n  overrideComponent(component: Type<any>, overrides: MetadataOverride<ComponentMetadataType>):\n      void {\n    throw unimplemented();\n  }\n  overridePipe(directive: Type<any>, overrides: MetadataOverride<PipeMetadataType>): void {\n    throw unimplemented();\n  }\n}\n\n/**\n * A factory for creating a Compiler\n *\n * @experimental\n */\nexport abstract class TestingCompilerFactory {\n  abstract createTestingCompiler(options?: CompilerOptions[]): TestingCompiler;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}